(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("aframe"), require("three"));
	else if(typeof define === 'function' && define.amd)
		define(["aframe", "three"], factory);
	else if(typeof exports === 'object')
		exports["ARjs"] = factory(require("aframe"), require("three"));
	else
		root["ARjs"] = factory(root["AFRAME"], root["THREE"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_aframe__, __WEBPACK_EXTERNAL_MODULE_three__) {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./aframe/src/component-anchor.js":
/*!****************************************!*\
  !*** ./aframe/src/component-anchor.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var aframe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aframe */ "aframe");
/* harmony import */ var aframe__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(aframe__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _three_js_src_new_api_arjs_anchor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../three.js/src/new-api/arjs-anchor */ "./three.js/src/new-api/arjs-anchor.js");
/* harmony import */ var _three_js_src_new_api_arjs_debugui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../three.js/src/new-api/arjs-debugui */ "./three.js/src/new-api/arjs-debugui.js");
/* harmony import */ var _three_js_src_threex_arjs_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../three.js/src/threex/arjs-context */ "./three.js/src/threex/arjs-context.js");





// //////////////////////////////////////////////////////////////////////////////
//		arjs-anchor
//////////////////////////////////////////////////////////////////////////////
aframe__WEBPACK_IMPORTED_MODULE_0__.registerComponent('arjs-anchor', {
    dependencies: ['arjs', 'artoolkit'],
    schema: {
        preset: {
            type: 'string',
        },
        markerhelpers: {	// IIF preset === 'area'
            type: 'boolean',
            default: false,
        },

        // controls parameters
        size: {
            type: 'number',
            default: 1
        },
        type: {
            type: 'string',
        },
        patternUrl: {
            type: 'string',
        },
        barcodeValue: {
            type: 'number'
        },
        changeMatrixMode: {
            type: 'string',
            default: 'modelViewMatrix',
        },
        minConfidence: {
            type: 'number',
            default: 0.6,
        },
        smooth: {
            type: 'boolean',
            default: false,
        },
        smoothCount: {
            type: 'number',
            default: 5,
        },
        smoothTolerance: {
            type: 'number',
            default: 0.01,
        },
        smoothThreshold: {
            type: 'number',
            default: 2,
        },
    },
    init: function () {
        var _this = this

        // get arjsSystem
        var arjsSystem = this.el.sceneEl.systems.arjs || this.el.sceneEl.systems.artoolkit

        //////////////////////////////////////////////////////////////////////////////
        //		Code Separator
        //////////////////////////////////////////////////////////////////////////////

        _this.isReady = false
        _this._arAnchor = null

        // honor object visibility
        if (_this.data.changeMatrixMode === 'modelViewMatrix') {
            _this.el.object3D.visible = false
        } else if (_this.data.changeMatrixMode === 'cameraTransformMatrix') {
            _this.el.sceneEl.object3D.visible = false
        } else console.assert(false)

        // trick to wait until arjsSystem is isReady
        var startedAt = Date.now()
        var timerId = setInterval(function () {
            // wait until the system is isReady
            if (arjsSystem.isReady === false) return

            clearInterval(timerId)

            //////////////////////////////////////////////////////////////////////////////
            //		update arProfile
            //////////////////////////////////////////////////////////////////////////////
            var arProfile = arjsSystem._arProfile

            // arProfile.changeMatrixMode('modelViewMatrix')
            arProfile.changeMatrixMode(_this.data.changeMatrixMode)

            // honor this.data.preset
            var markerParameters = Object.assign({}, arProfile.defaultMarkerParameters)

            if (_this.data.preset === 'hiro') {
                markerParameters.type = 'pattern'
                markerParameters.patternUrl = _three_js_src_threex_arjs_context__WEBPACK_IMPORTED_MODULE_3__.default.baseURL + 'examples/marker-training/examples/pattern-files/pattern-hiro.patt'
                markerParameters.markersAreaEnabled = false
            } else if (_this.data.preset === 'kanji') {
                markerParameters.type = 'pattern'
                markerParameters.patternUrl = _three_js_src_threex_arjs_context__WEBPACK_IMPORTED_MODULE_3__.default.baseURL + 'examples/marker-training/examples/pattern-files/pattern-kanji.patt'
                markerParameters.markersAreaEnabled = false
            } else if (_this.data.preset === 'area') {
                markerParameters.type = 'barcode'
                markerParameters.barcodeValue = 1001
                markerParameters.markersAreaEnabled = true
            } else if (_this.data.type === 'barcode') {
                markerParameters = {
                    type: _this.data.type,
                    changeMatrixMode: 'modelViewMatrix',
                    barcodeValue: _this.data.barcodeValue,
                    markersAreaEnabled: false
                }
            } else if (_this.data.type === 'pattern') {
                markerParameters.type = _this.data.type
                markerParameters.patternUrl = _this.data.patternUrl;
                markerParameters.markersAreaEnabled = false
            }
            
            markerParameters.minConfidence = _this.data.minConfidence;
            markerParameters.smooth = _this.data.smooth;
            markerParameters.smoothCount = _this.data.smoothCount;
            markerParameters.smoothTolerance = _this.data.smoothTolerance;
            markerParameters.smoothThreshold = _this.data.smoothThreshold;

            //////////////////////////////////////////////////////////////////////////////
            //		create arAnchor
            //////////////////////////////////////////////////////////////////////////////

            var arSession = arjsSystem._arSession
            var arAnchor = _this._arAnchor = new _three_js_src_new_api_arjs_anchor__WEBPACK_IMPORTED_MODULE_1__.default(arSession, markerParameters)

            // it is now considered isReady
            _this.isReady = true

            //////////////////////////////////////////////////////////////////////////////
            //		honor .debugUIEnabled
            //////////////////////////////////////////////////////////////////////////////
            if (arjsSystem.data.debugUIEnabled) {
                // get or create containerElement
                var containerElement = document.querySelector('#arjsDebugUIContainer')
                if (containerElement === null) {
                    containerElement = document.createElement('div')
                    containerElement.id = 'arjsDebugUIContainer'
                    containerElement.setAttribute('style', 'position: fixed; bottom: 10px; width:100%; text-align: center; z-index: 1; color: grey;')
                    document.body.appendChild(containerElement)
                }
                // create anchorDebugUI
                var anchorDebugUI = new _three_js_src_new_api_arjs_debugui__WEBPACK_IMPORTED_MODULE_2__.AnchorDebugUI(arAnchor)
                containerElement.appendChild(anchorDebugUI.domElement)
            }
        }, 1000 / 60)
    },
    remove: function () {
    },
    update: function () {
    },
    tick: function () {
        var _this = this
        // if not yet isReady, do nothing
        if (this.isReady === false) return

        //////////////////////////////////////////////////////////////////////////////
        //		update arAnchor
        //////////////////////////////////////////////////////////////////////////////
        var arjsSystem = this.el.sceneEl.systems.arjs || this.el.sceneEl.systems.artoolkit
        this._arAnchor.update()

        //////////////////////////////////////////////////////////////////////////////
        //		honor pose
        //////////////////////////////////////////////////////////////////////////////
        var arWorldRoot = this._arAnchor.object3d
        arWorldRoot.updateMatrixWorld(true)
        arWorldRoot.matrixWorld.decompose(this.el.object3D.position, this.el.object3D.quaternion, this.el.object3D.scale)

        //////////////////////////////////////////////////////////////////////////////
        //		honor visibility
        //////////////////////////////////////////////////////////////////////////////
        if (_this._arAnchor.parameters.changeMatrixMode === 'modelViewMatrix') {
            var wasVisible = _this.el.object3D.visible
            _this.el.object3D.visible = this._arAnchor.object3d.visible
        } else if (_this._arAnchor.parameters.changeMatrixMode === 'cameraTransformMatrix') {
            var wasVisible = _this.el.sceneEl.object3D.visible
            _this.el.sceneEl.object3D.visible = this._arAnchor.object3d.visible
        } else console.assert(false)

        // emit markerFound markerLost
        if (_this._arAnchor.object3d.visible === true && wasVisible === false) {
            _this.el.emit('markerFound')
        } else if (_this._arAnchor.object3d.visible === false && wasVisible === true) {
            _this.el.emit('markerLost')
        }
    }
})

//////////////////////////////////////////////////////////////////////////////
//                define some primitives shortcuts
//////////////////////////////////////////////////////////////////////////////

aframe__WEBPACK_IMPORTED_MODULE_0__.registerPrimitive('a-anchor', aframe__WEBPACK_IMPORTED_MODULE_0__.utils.extendDeep({}, aframe__WEBPACK_IMPORTED_MODULE_0__.primitives.getMeshMixin(), {
    defaultComponents: {
        'arjs-anchor': {},
        'arjs-hit-testing': {},
    },
    mappings: {
        'type': 'arjs-anchor.type',
        'size': 'arjs-anchor.size',
        'url': 'arjs-anchor.patternUrl',
        'value': 'arjs-anchor.barcodeValue',
        'preset': 'arjs-anchor.preset',
        'min-confidence': 'arjs-anchor.minConfidence',
        'marker-helpers': 'arjs-anchor.markerhelpers',
        'smooth': 'arjs-anchor.smooth',
        'smooth-count': 'arjs-anchor.smoothCount',
        'smooth-tolerance': 'arjs-anchor.smoothTolerance',
        'smooth-threshold': 'arjs-anchor.smoothThreshold',

        'hit-testing-render-debug': 'arjs-hit-testing.renderDebug',
        'hit-testing-enabled': 'arjs-hit-testing.enabled',
    }
}))

aframe__WEBPACK_IMPORTED_MODULE_0__.registerPrimitive('a-camera-static', aframe__WEBPACK_IMPORTED_MODULE_0__.utils.extendDeep({}, aframe__WEBPACK_IMPORTED_MODULE_0__.primitives.getMeshMixin(), {
    defaultComponents: {
        'camera': {},
    },
    mappings: {
    }
}))

//////////////////////////////////////////////////////////////////////////////
//		backward compatibility
//////////////////////////////////////////////////////////////////////////////
// FIXME
aframe__WEBPACK_IMPORTED_MODULE_0__.registerPrimitive('a-marker', aframe__WEBPACK_IMPORTED_MODULE_0__.utils.extendDeep({}, aframe__WEBPACK_IMPORTED_MODULE_0__.primitives.getMeshMixin(), {
    defaultComponents: {
        'arjs-anchor': {},
        'arjs-hit-testing': {},
    },
    mappings: {
        'type': 'arjs-anchor.type',
        'size': 'arjs-anchor.size',
        'url': 'arjs-anchor.patternUrl',
        'value': 'arjs-anchor.barcodeValue',
        'preset': 'arjs-anchor.preset',
        'min-confidence': 'arjs-anchor.minConfidence',
        'marker-helpers': 'arjs-anchor.markerhelpers',
        'smooth': 'arjs-anchor.smooth',
        'smooth-count': 'arjs-anchor.smoothCount',
        'smooth-tolerance': 'arjs-anchor.smoothTolerance',
        'smooth-threshold': 'arjs-anchor.smoothThreshold',

        'hit-testing-render-debug': 'arjs-hit-testing.renderDebug',
        'hit-testing-enabled': 'arjs-hit-testing.enabled',
    }
}))

aframe__WEBPACK_IMPORTED_MODULE_0__.registerPrimitive('a-marker-camera', aframe__WEBPACK_IMPORTED_MODULE_0__.utils.extendDeep({}, aframe__WEBPACK_IMPORTED_MODULE_0__.primitives.getMeshMixin(), {
    defaultComponents: {
        'arjs-anchor': {
            changeMatrixMode: 'cameraTransformMatrix'
        },
        'camera': {},
    },
    mappings: {
        'type': 'arjs-anchor.type',
        'size': 'arjs-anchor.size',
        'url': 'arjs-anchor.patternUrl',
        'value': 'arjs-anchor.barcodeValue',
        'preset': 'arjs-anchor.preset',
        'min-confidence': 'arjs-anchor.minConfidence',
        'marker-helpers': 'arjs-anchor.markerhelpers',
    }
}))


/***/ }),

/***/ "./aframe/src/component-hit-testing.js":
/*!*********************************************!*\
  !*** ./aframe/src/component-hit-testing.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var aframe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aframe */ "aframe");
/* harmony import */ var aframe__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(aframe__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _three_js_src_new_api_arjs_hittesting__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../three.js/src/new-api/arjs-hittesting */ "./three.js/src/new-api/arjs-hittesting.js");



// //////////////////////////////////////////////////////////////////////////////
//		arjs-hit-testing
//////////////////////////////////////////////////////////////////////////////
aframe__WEBPACK_IMPORTED_MODULE_0__.registerComponent('arjs-hit-testing', {
	dependencies: ['arjs', 'artoolkit'],
	schema: {
		enabled : {
			type: 'boolean',
			default: false,
		},
		renderDebug : {
			type: 'boolean',
			default: false,
		},
	},
	init: function () {
		var _this = this
		var arjsSystem = this.el.sceneEl.systems.arjs || this.el.sceneEl.systems.artoolkit

// TODO make it work on cameraTransformMatrix too
//
		_this.isReady = false
		_this._arAnchor = null
		_this._arHitTesting = null

		// trick to wait until arjsSystem is isReady
		var startedAt = Date.now()
		var timerId = setInterval(function(){
			var anchorEl = _this.el
			var anchorComponent = anchorEl.components['arjs-anchor']
			// wait until anchorComponent is isReady
			if( anchorComponent === undefined || anchorComponent.isReady === false )	return

			clearInterval(timerId)

			//////////////////////////////////////////////////////////////////////////////
			//		create arAnchor
			//////////////////////////////////////////////////////////////////////////////
			var arAnchor = anchorComponent._arAnchor
			var arSession = arjsSystem._arSession
			var renderer = arSession.parameters.renderer

			var hitTesting = _this._arHitTesting = new _three_js_src_new_api_arjs_hittesting__WEBPACK_IMPORTED_MODULE_1__.default(arSession)
			hitTesting.enabled = _this.data.enabled

			_this.isReady = true
		}, 1000/60)
	},
	remove : function(){
	},
	update: function () {
	},
	tick: function(){
		var _this = this
		// if not yet isReady, do nothing
		if( this.isReady === false )	return

		var arjsSystem = this.el.sceneEl.systems.arjs || this.el.sceneEl.systems.artoolkit
		var arSession = arjsSystem._arSession

		var anchorEl = _this.el
		var anchorComponent = anchorEl.components['arjs-anchor']
		var arAnchor = anchorComponent._arAnchor


		var hitTesting = this._arHitTesting
		var camera = arSession.parameters.camera
// console.log(camera.position)
		hitTesting.update(camera, arAnchor.object3d, arAnchor.parameters.changeMatrixMode)
	}
});


/***/ }),

/***/ "./aframe/src/location-based/ArjsDeviceOrientationControls.js":
/*!********************************************************************!*\
  !*** ./aframe/src/location-based/ArjsDeviceOrientationControls.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);

/**
 * @author richt / http://richt.me
 * @author WestLangley / http://github.com/WestLangley
 *
 * W3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)
 */

/* NOTE that this is a modified version of THREE.DeviceOrientationControls to 
 * allow exponential smoothing, for use in AR.js.
 *
 * Modifications Nick Whitelegg (nickw1 github)
 */



const ArjsDeviceOrientationControls = function ( object ) {

  var scope = this;

  this.object = object;
  this.object.rotation.reorder( 'YXZ' );

  this.enabled = true;

  this.deviceOrientation = {};
  this.screenOrientation = 0;

  this.alphaOffset = 0; // radians

  this.smoothingFactor = 1;

  this.TWO_PI = 2 * Math.PI;
  this.HALF_PI = 0.5 * Math.PI;

  var onDeviceOrientationChangeEvent = function ( event ) {

    scope.deviceOrientation = event;

  };

  var onScreenOrientationChangeEvent = function () {

    scope.screenOrientation = window.orientation || 0;

  };

  // The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''

  var setObjectQuaternion = function () {

    var zee = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3( 0, 0, 1 );

    var euler = new three__WEBPACK_IMPORTED_MODULE_0__.Euler();

    var q0 = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion();

    var q1 = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion( - Math.sqrt( 0.5 ), 0, 0, Math.sqrt( 0.5 ) ); // - PI/2 around the x-axis

    return function ( quaternion, alpha, beta, gamma, orient ) {

      euler.set( beta, alpha, - gamma, 'YXZ' ); // 'ZXY' for the device, but 'YXZ' for us

      quaternion.setFromEuler( euler ); // orient the device

      quaternion.multiply( q1 ); // camera looks out the back of the device, not the top

      quaternion.multiply( q0.setFromAxisAngle( zee, - orient ) ); // adjust for screen orientation

    };

  }();

  this.connect = function () {
 
    onScreenOrientationChangeEvent();

    window.addEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );
    window.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );

    scope.enabled = true;

  };

  this.disconnect = function () {

    window.removeEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );
    window.removeEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );

    scope.enabled = false;

  };

  this.update = function () {

    if ( scope.enabled === false ) return;

    var device = scope.deviceOrientation;

    if ( device ) {

      var alpha = device.alpha ? three__WEBPACK_IMPORTED_MODULE_0__.Math.degToRad( device.alpha ) + scope.alphaOffset : 0; // Z

      var beta = device.beta ? three__WEBPACK_IMPORTED_MODULE_0__.Math.degToRad( device.beta ) : 0; // X'

      var gamma = device.gamma ? three__WEBPACK_IMPORTED_MODULE_0__.Math.degToRad( device.gamma ) : 0; // Y''

      var orient = scope.screenOrientation ? three__WEBPACK_IMPORTED_MODULE_0__.Math.degToRad( scope.screenOrientation ) : 0; // O

      // NW Added smoothing code
      var k = this.smoothingFactor;

      if(this.lastOrientation) {
        alpha = this._getSmoothedAngle(alpha, this.lastOrientation.alpha, k);
        beta = this._getSmoothedAngle(beta + Math.PI, this.lastOrientation.beta, k);
        gamma = this._getSmoothedAngle(gamma + this.HALF_PI, this.lastOrientation.gamma, k, Math.PI);
    
      } else {
        beta += Math.PI;
        gamma += this.HALF_PI;
      }

      this.lastOrientation = {
        alpha: alpha,
        beta: beta,
        gamma: gamma
      };
      setObjectQuaternion( scope.object.quaternion, alpha, beta - Math.PI, gamma - this.HALF_PI, orient );

    }
  };

   
   // NW Added
  this._orderAngle = function(a, b, range = this.TWO_PI) {
    if ((b > a && Math.abs(b - a) < range / 2) || (a > b && Math.abs(b - a) > range / 2)) {
      return { left: a, right: b }
    } else { 
      return { left: b, right: a }
    }
  };

   // NW Added
  this._getSmoothedAngle = function(a, b, k, range = this.TWO_PI) {
    const angles = this._orderAngle(a, b, range);
    const angleshift = angles.left;
    const origAnglesRight = angles.right;
    angles.left = 0;
    angles.right -= angleshift;
    if(angles.right < 0) angles.right += range;
    let newangle = origAnglesRight == b ? (1 - k)*angles.right + k * angles.left : k * angles.right + (1 - k) * angles.left;
    newangle += angleshift;
    if(newangle >= range) newangle -= range;
    return newangle;
  };

  this.dispose = function () {
    scope.disconnect();
  };

  this.connect();

};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ArjsDeviceOrientationControls);


/***/ }),

/***/ "./aframe/src/location-based/arjs-look-controls.js":
/*!*********************************************************!*\
  !*** ./aframe/src/location-based/arjs-look-controls.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var aframe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aframe */ "aframe");
/* harmony import */ var aframe__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(aframe__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ArjsDeviceOrientationControls__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ArjsDeviceOrientationControls */ "./aframe/src/location-based/ArjsDeviceOrientationControls.js");
// To avoid recalculation at every mouse movement tick
var PI_2 = Math.PI / 2;


/**
 * look-controls. Update entity pose, factoring mouse, touch, and WebVR API data.
 */

/* NOTE that this is a modified version of A-Frame's look-controls to 
 * allow exponential smoothing, for use in AR.js.
 *
 * Modifications Nick Whitelegg (nickw1 github)
 */




aframe__WEBPACK_IMPORTED_MODULE_0__.registerComponent('arjs-look-controls', {
  dependencies: ['position', 'rotation'],

  schema: {
    enabled: {default: true},
    magicWindowTrackingEnabled: {default: true},
    pointerLockEnabled: {default: false},
    reverseMouseDrag: {default: false},
    reverseTouchDrag: {default: false},
    touchEnabled: {default: true},
    smoothingFactor: { type: 'number', default: 1 }
  },

  init: function () {
    this.deltaYaw = 0;
    this.previousHMDPosition = new THREE.Vector3();
    this.hmdQuaternion = new THREE.Quaternion();
    this.magicWindowAbsoluteEuler = new THREE.Euler();
    this.magicWindowDeltaEuler = new THREE.Euler();
    this.position = new THREE.Vector3();
    this.magicWindowObject = new THREE.Object3D();
    this.rotation = {};
    this.deltaRotation = {};
    this.savedPose = null;
    this.pointerLocked = false;
    this.setupMouseControls();
    this.bindMethods();
    this.previousMouseEvent = {};

    this.setupMagicWindowControls();

    // To save / restore camera pose
    this.savedPose = {
      position: new THREE.Vector3(),
      rotation: new THREE.Euler()
    };

    // Call enter VR handler if the scene has entered VR before the event listeners attached.
    if (this.el.sceneEl.is('vr-mode')) { this.onEnterVR(); }
  },

  setupMagicWindowControls: function () {
    var magicWindowControls;
    var data = this.data;

    // Only on mobile devices and only enabled if DeviceOrientation permission has been granted.
    if (aframe__WEBPACK_IMPORTED_MODULE_0__.utils.device.isMobile()) {
      magicWindowControls = this.magicWindowControls = new _ArjsDeviceOrientationControls__WEBPACK_IMPORTED_MODULE_1__.default(this.magicWindowObject);
      if (typeof DeviceOrientationEvent !== 'undefined' && DeviceOrientationEvent.requestPermission) {
        magicWindowControls.enabled = false;
        if (this.el.sceneEl.components['device-orientation-permission-ui'].permissionGranted) {
          magicWindowControls.enabled = data.magicWindowTrackingEnabled;
        } else {
          this.el.sceneEl.addEventListener('deviceorientationpermissiongranted', function () {
            magicWindowControls.enabled = data.magicWindowTrackingEnabled;
          });
        }
      }
    }
  },

  update: function (oldData) {
    var data = this.data;

    // Disable grab cursor classes if no longer enabled.
    if (data.enabled !== oldData.enabled) {
      this.updateGrabCursor(data.enabled);
    }

    // Reset magic window eulers if tracking is disabled.
    if (oldData && !data.magicWindowTrackingEnabled && oldData.magicWindowTrackingEnabled) {
      this.magicWindowAbsoluteEuler.set(0, 0, 0);
      this.magicWindowDeltaEuler.set(0, 0, 0);
    }

    // Pass on magic window tracking setting to magicWindowControls.
    if (this.magicWindowControls) {
      this.magicWindowControls.enabled = data.magicWindowTrackingEnabled;
      this.magicWindowControls.smoothingFactor = data.smoothingFactor;
    }

    if (oldData && !data.pointerLockEnabled !== oldData.pointerLockEnabled) {
      this.removeEventListeners();
      this.addEventListeners();
      if (this.pointerLocked) { this.exitPointerLock(); }
    }
  },

  tick: function (t) {
    var data = this.data;
    if (!data.enabled) { return; }
    this.updateOrientation();
  },

  play: function () {
    this.addEventListeners();
  },

  pause: function () {
    this.removeEventListeners();
    if (this.pointerLocked) { this.exitPointerLock(); }
  },

  remove: function () {
    this.removeEventListeners();
    if (this.pointerLocked) { this.exitPointerLock(); }
  },

  bindMethods: function () {
    this.onMouseDown = aframe__WEBPACK_IMPORTED_MODULE_0__.utils.bind(this.onMouseDown, this);
    this.onMouseMove = aframe__WEBPACK_IMPORTED_MODULE_0__.utils.bind(this.onMouseMove, this);
    this.onMouseUp = aframe__WEBPACK_IMPORTED_MODULE_0__.utils.bind(this.onMouseUp, this);
    this.onTouchStart = aframe__WEBPACK_IMPORTED_MODULE_0__.utils.bind(this.onTouchStart, this);
    this.onTouchMove = aframe__WEBPACK_IMPORTED_MODULE_0__.utils.bind(this.onTouchMove, this);
    this.onTouchEnd = aframe__WEBPACK_IMPORTED_MODULE_0__.utils.bind(this.onTouchEnd, this);
    this.onEnterVR = aframe__WEBPACK_IMPORTED_MODULE_0__.utils.bind(this.onEnterVR, this);
    this.onExitVR = aframe__WEBPACK_IMPORTED_MODULE_0__.utils.bind(this.onExitVR, this);
    this.onPointerLockChange = aframe__WEBPACK_IMPORTED_MODULE_0__.utils.bind(this.onPointerLockChange, this);
    this.onPointerLockError = aframe__WEBPACK_IMPORTED_MODULE_0__.utils.bind(this.onPointerLockError, this);
  },

 /**
  * Set up states and Object3Ds needed to store rotation data.
  */
  setupMouseControls: function () {
    this.mouseDown = false;
    this.pitchObject = new THREE.Object3D();
    this.yawObject = new THREE.Object3D();
    this.yawObject.position.y = 10;
    this.yawObject.add(this.pitchObject);
  },

  /**
   * Add mouse and touch event listeners to canvas.
   */
  addEventListeners: function () {
    var sceneEl = this.el.sceneEl;
    var canvasEl = sceneEl.canvas;

    // Wait for canvas to load.
    if (!canvasEl) {
      sceneEl.addEventListener('render-target-loaded', aframe__WEBPACK_IMPORTED_MODULE_0__.utils.bind(this.addEventListeners, this));
      return;
    }

    // Mouse events.
    canvasEl.addEventListener('mousedown', this.onMouseDown, false);
    window.addEventListener('mousemove', this.onMouseMove, false);
    window.addEventListener('mouseup', this.onMouseUp, false);

    // Touch events.
    canvasEl.addEventListener('touchstart', this.onTouchStart);
    window.addEventListener('touchmove', this.onTouchMove);
    window.addEventListener('touchend', this.onTouchEnd);

    // sceneEl events.
    sceneEl.addEventListener('enter-vr', this.onEnterVR);
    sceneEl.addEventListener('exit-vr', this.onExitVR);

    // Pointer Lock events.
    if (this.data.pointerLockEnabled) {
      document.addEventListener('pointerlockchange', this.onPointerLockChange, false);
      document.addEventListener('mozpointerlockchange', this.onPointerLockChange, false);
      document.addEventListener('pointerlockerror', this.onPointerLockError, false);
    }
  },

  /**
   * Remove mouse and touch event listeners from canvas.
   */
  removeEventListeners: function () {
    var sceneEl = this.el.sceneEl;
    var canvasEl = sceneEl && sceneEl.canvas;

    if (!canvasEl) { return; }

    // Mouse events.
    canvasEl.removeEventListener('mousedown', this.onMouseDown);
    window.removeEventListener('mousemove', this.onMouseMove);
    window.removeEventListener('mouseup', this.onMouseUp);

    // Touch events.
    canvasEl.removeEventListener('touchstart', this.onTouchStart);
    window.removeEventListener('touchmove', this.onTouchMove);
    window.removeEventListener('touchend', this.onTouchEnd);

    // sceneEl events.
    sceneEl.removeEventListener('enter-vr', this.onEnterVR);
    sceneEl.removeEventListener('exit-vr', this.onExitVR);

    // Pointer Lock events.
    document.removeEventListener('pointerlockchange', this.onPointerLockChange, false);
    document.removeEventListener('mozpointerlockchange', this.onPointerLockChange, false);
    document.removeEventListener('pointerlockerror', this.onPointerLockError, false);
  },

  /**
   * Update orientation for mobile, mouse drag, and headset.
   * Mouse-drag only enabled if HMD is not active.
   */
  updateOrientation: (function () {
    var poseMatrix = new THREE.Matrix4();

    return function () {
      var object3D = this.el.object3D;
      var pitchObject = this.pitchObject;
      var yawObject = this.yawObject;
      var pose;
      var sceneEl = this.el.sceneEl;

      // In VR mode, THREE is in charge of updating the camera pose.
      if (sceneEl.is('vr-mode') && sceneEl.checkHeadsetConnected()) {
        // With WebXR THREE applies headset pose to the object3D matrixWorld internally.
        // Reflect values back on position, rotation, scale for getAttribute to return the expected values.
        if (sceneEl.hasWebXR) {
          pose = sceneEl.renderer.xr.getCameraPose();
          if (pose) {
            poseMatrix.elements = pose.transform.matrix;
            poseMatrix.decompose(object3D.position, object3D.rotation, object3D.scale);
          }
        }
        return;
      }

      this.updateMagicWindowOrientation();

      // On mobile, do camera rotation with touch events and sensors.
      object3D.rotation.x = this.magicWindowDeltaEuler.x + pitchObject.rotation.x;
      object3D.rotation.y = this.magicWindowDeltaEuler.y + yawObject.rotation.y;
      object3D.rotation.z = this.magicWindowDeltaEuler.z;
    };
  })(),

  updateMagicWindowOrientation: function () {
    var magicWindowAbsoluteEuler = this.magicWindowAbsoluteEuler;
    var magicWindowDeltaEuler = this.magicWindowDeltaEuler;
    // Calculate magic window HMD quaternion.
    if (this.magicWindowControls && this.magicWindowControls.enabled) {
      this.magicWindowControls.update();
      magicWindowAbsoluteEuler.setFromQuaternion(this.magicWindowObject.quaternion, 'YXZ');
      if (!this.previousMagicWindowYaw && magicWindowAbsoluteEuler.y !== 0) {
        this.previousMagicWindowYaw = magicWindowAbsoluteEuler.y;
      }
      if (this.previousMagicWindowYaw) {
        magicWindowDeltaEuler.x = magicWindowAbsoluteEuler.x;
        magicWindowDeltaEuler.y += magicWindowAbsoluteEuler.y - this.previousMagicWindowYaw;
        magicWindowDeltaEuler.z = magicWindowAbsoluteEuler.z;
        this.previousMagicWindowYaw = magicWindowAbsoluteEuler.y;
      }
    }
  },

  /**
   * Translate mouse drag into rotation.
   *
   * Dragging up and down rotates the camera around the X-axis (yaw).
   * Dragging left and right rotates the camera around the Y-axis (pitch).
   */
  onMouseMove: function (evt) {
    var direction;
    var movementX;
    var movementY;
    var pitchObject = this.pitchObject;
    var previousMouseEvent = this.previousMouseEvent;
    var yawObject = this.yawObject;

    // Not dragging or not enabled.
    if (!this.data.enabled || (!this.mouseDown && !this.pointerLocked)) { return; }

    // Calculate delta.
    if (this.pointerLocked) {
      movementX = evt.movementX || evt.mozMovementX || 0;
      movementY = evt.movementY || evt.mozMovementY || 0;
    } else {
      movementX = evt.screenX - previousMouseEvent.screenX;
      movementY = evt.screenY - previousMouseEvent.screenY;
    }
    this.previousMouseEvent.screenX = evt.screenX;
    this.previousMouseEvent.screenY = evt.screenY;

    // Calculate rotation.
    direction = this.data.reverseMouseDrag ? 1 : -1;
    yawObject.rotation.y += movementX * 0.002 * direction;
    pitchObject.rotation.x += movementY * 0.002 * direction;
    pitchObject.rotation.x = Math.max(-PI_2, Math.min(PI_2, pitchObject.rotation.x));
  },

  /**
   * Register mouse down to detect mouse drag.
   */
  onMouseDown: function (evt) {
    var sceneEl = this.el.sceneEl;
    if (!this.data.enabled || (sceneEl.is('vr-mode') && sceneEl.checkHeadsetConnected())) { return; }
    // Handle only primary button.
    if (evt.button !== 0) { return; }

    var canvasEl = sceneEl && sceneEl.canvas;

    this.mouseDown = true;
    this.previousMouseEvent.screenX = evt.screenX;
    this.previousMouseEvent.screenY = evt.screenY;
    this.showGrabbingCursor();

    if (this.data.pointerLockEnabled && !this.pointerLocked) {
      if (canvasEl.requestPointerLock) {
        canvasEl.requestPointerLock();
      } else if (canvasEl.mozRequestPointerLock) {
        canvasEl.mozRequestPointerLock();
      }
    }
  },

  /**
   * Shows grabbing cursor on scene
   */
  showGrabbingCursor: function () {
    this.el.sceneEl.canvas.style.cursor = 'grabbing';
  },

  /**
   * Hides grabbing cursor on scene
   */
  hideGrabbingCursor: function () {
    this.el.sceneEl.canvas.style.cursor = '';
  },

  /**
   * Register mouse up to detect release of mouse drag.
   */
  onMouseUp: function () {
    this.mouseDown = false;
    this.hideGrabbingCursor();
  },

  /**
   * Register touch down to detect touch drag.
   */
  onTouchStart: function (evt) {
    if (evt.touches.length !== 1 ||
        !this.data.touchEnabled ||
        this.el.sceneEl.is('vr-mode')) { return; }
    this.touchStart = {
      x: evt.touches[0].pageX,
      y: evt.touches[0].pageY
    };
    this.touchStarted = true;
  },

  /**
   * Translate touch move to Y-axis rotation.
   */
  onTouchMove: function (evt) {
    var direction;
    var canvas = this.el.sceneEl.canvas;
    var deltaY;
    var yawObject = this.yawObject;

    if (!this.touchStarted || !this.data.touchEnabled) { return; }

    deltaY = 2 * Math.PI * (evt.touches[0].pageX - this.touchStart.x) / canvas.clientWidth;

    direction = this.data.reverseTouchDrag ? 1 : -1;
    // Limit touch orientaion to to yaw (y axis).
    yawObject.rotation.y -= deltaY * 0.5 * direction;
    this.touchStart = {
      x: evt.touches[0].pageX,
      y: evt.touches[0].pageY
    };
  },

  /**
   * Register touch end to detect release of touch drag.
   */
  onTouchEnd: function () {
    this.touchStarted = false;
  },

  /**
   * Save pose.
   */
  onEnterVR: function () {
    var sceneEl = this.el.sceneEl;
    if (!sceneEl.checkHeadsetConnected()) { return; }
    this.saveCameraPose();
    this.el.object3D.position.set(0, 0, 0);
    this.el.object3D.rotation.set(0, 0, 0);
    if (sceneEl.hasWebXR) {
      this.el.object3D.matrixAutoUpdate = false;
      this.el.object3D.updateMatrix();
    }
  },

  /**
   * Restore the pose.
   */
  onExitVR: function () {
    if (!this.el.sceneEl.checkHeadsetConnected()) { return; }
    this.restoreCameraPose();
    this.previousHMDPosition.set(0, 0, 0);
    this.el.object3D.matrixAutoUpdate = true;
  },

  /**
   * Update Pointer Lock state.
   */
  onPointerLockChange: function () {
    this.pointerLocked = !!(document.pointerLockElement || document.mozPointerLockElement);
  },

  /**
   * Recover from Pointer Lock error.
   */
  onPointerLockError: function () {
    this.pointerLocked = false;
  },

  // Exits pointer-locked mode.
  exitPointerLock: function () {
    document.exitPointerLock();
    this.pointerLocked = false;
  },

  /**
   * Toggle the feature of showing/hiding the grab cursor.
   */
  updateGrabCursor: function (enabled) {
    var sceneEl = this.el.sceneEl;

    function enableGrabCursor () { sceneEl.canvas.classList.add('a-grab-cursor'); }
    function disableGrabCursor () { sceneEl.canvas.classList.remove('a-grab-cursor'); }

    if (!sceneEl.canvas) {
      if (enabled) {
        sceneEl.addEventListener('render-target-loaded', enableGrabCursor);
      } else {
        sceneEl.addEventListener('render-target-loaded', disableGrabCursor);
      }
      return;
    }

    if (enabled) {
      enableGrabCursor();
      return;
    }
    disableGrabCursor();
  },

  /**
   * Save camera pose before entering VR to restore later if exiting.
   */
  saveCameraPose: function () {
    var el = this.el;

    this.savedPose.position.copy(el.object3D.position);
    this.savedPose.rotation.copy(el.object3D.rotation);
    this.hasSavedPose = true;
  },

  /**
   * Reset camera pose to before entering VR.
   */
  restoreCameraPose: function () {
    var el = this.el;
    var savedPose = this.savedPose;

    if (!this.hasSavedPose) { return; }

    // Reset camera orientation.
    el.object3D.position.copy(savedPose.position);
    el.object3D.rotation.copy(savedPose.rotation);
    this.hasSavedPose = false;
  }
});


/***/ }),

/***/ "./aframe/src/location-based/arjs-webcam-texture.js":
/*!**********************************************************!*\
  !*** ./aframe/src/location-based/arjs-webcam-texture.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var aframe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aframe */ "aframe");
/* harmony import */ var aframe__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(aframe__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_1__);



aframe__WEBPACK_IMPORTED_MODULE_0__.registerComponent('arjs-webcam-texture', {

    init: function() {
        this.scene = this.el.sceneEl;
        this.texCamera = new three__WEBPACK_IMPORTED_MODULE_1__.OrthographicCamera(-0.5, 0.5, 0.5, -0.5, 0, 10);
        this.texScene = new three__WEBPACK_IMPORTED_MODULE_1__.Scene();

        this.scene.renderer.autoClear = false;
        this.video = document.createElement("video");
        this.video.setAttribute("autoplay", true);
        this.video.setAttribute("playsinline", true);
        this.video.setAttribute("display", "none");
        document.body.appendChild(this.video);
        this.geom = new three__WEBPACK_IMPORTED_MODULE_1__.PlaneBufferGeometry(); //0.5, 0.5);
        this.texture = new three__WEBPACK_IMPORTED_MODULE_1__.VideoTexture(this.video);
        this.material = new three__WEBPACK_IMPORTED_MODULE_1__.MeshBasicMaterial( { map: this.texture } );
        const mesh = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(this.geom, this.material);
        this.texScene.add(mesh);
    },

    play: function() {
        if(navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
            const constraints = { video: {
                facingMode: 'environment' }
            };
            navigator.mediaDevices.getUserMedia(constraints).then( stream=> {
                this.video.srcObject = stream;    
                this.video.play();
            })
            .catch(e => {  
                this.el.sceneEl.systems['arjs']._displayErrorPopup(`Webcam error: ${e}`);
            });
        } else {
            this.el.sceneEl.systems['arjs']._displayErrorPopup('sorry - media devices API not supported');
        }
    },

    tick: function() {
        this.scene.renderer.clear();
        this.scene.renderer.render(this.texScene, this.texCamera);
        this.scene.renderer.clearDepth();
    },

    pause: function() {
        this.video.srcObject.getTracks().forEach ( track => {
            track.stop();
        });
    },

    remove: function() {
        this.material.dispose();
        this.texture.dispose();
        this.geom.dispose();
    }
});


/***/ }),

/***/ "./aframe/src/location-based/gps-camera.js":
/*!*************************************************!*\
  !*** ./aframe/src/location-based/gps-camera.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var aframe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aframe */ "aframe");
/* harmony import */ var aframe__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(aframe__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_1__);
/*
 * UPDATES 28/08/20:
 *
 * - add gpsMinDistance and gpsTimeInterval properties to control how
 * frequently GPS updates are processed. Aim is to prevent 'stuttering'
 * effects when close to AR content due to continuous small changes in
 * location.
 */




aframe__WEBPACK_IMPORTED_MODULE_0__.registerComponent('gps-camera', {
    _watchPositionId: null,
    originCoords: null,
    currentCoords: null,
    lookControls: null,
    heading: null,
    schema: {
        simulateLatitude: {
            type: 'number',
            default: 0,
        },
        simulateLongitude: {
            type: 'number',
            default: 0,
        },
        simulateAltitude: {
            type: 'number',
            default: 0,
        },
        positionMinAccuracy: {
            type: 'int',
            default: 100,
        },
        alert: {
            type: 'boolean',
            default: false,
        },
        minDistance: {
            type: 'int',
            default: 0,
        },
        maxDistance: {
            type: 'int',
            default: 0,
        },
        gpsMinDistance: {
            type: 'number',
            default: 5,
        },
        gpsTimeInterval: {
            type: 'number',
            default: 0,
        },
    },
    update: function() {
        if (this.data.simulateLatitude !== 0 && this.data.simulateLongitude !== 0) {
            var localPosition = Object.assign({}, this.currentCoords || {});
            localPosition.longitude = this.data.simulateLongitude;
            localPosition.latitude = this.data.simulateLatitude;
            localPosition.altitude = this.data.simulateAltitude;
            this.currentCoords = localPosition;

            // re-trigger initialization for new origin
            this.originCoords = null;
            this._updatePosition();
        }
    },
    init: function () {      
        if (!this.el.components['arjs-look-controls'] && !this.el.components['look-controls']) {
            return;
        }

        this.lastPosition = {
            latitude: 0,
            longitude: 0
        };

        this.loader = document.createElement('DIV');
        this.loader.classList.add('arjs-loader');
        document.body.appendChild(this.loader);

        this.onGpsEntityPlaceAdded = this._onGpsEntityPlaceAdded.bind(this);
        window.addEventListener('gps-entity-place-added', this.onGpsEntityPlaceAdded);

        this.lookControls = this.el.components['arjs-look-controls'] || this.el.components['look-controls'];

        // listen to deviceorientation event
        var eventName = this._getDeviceOrientationEventName();
        this._onDeviceOrientation = this._onDeviceOrientation.bind(this);

        // if Safari
        if (!!navigator.userAgent.match(/Version\/[\d.]+.*Safari/)) {
            // iOS 13+
            if (typeof DeviceOrientationEvent.requestPermission === 'function') {
                var handler = function () {
                    console.log('Requesting device orientation permissions...')
                    DeviceOrientationEvent.requestPermission();
                    document.removeEventListener('touchend', handler);
                };

                document.addEventListener('touchend', function () { handler() }, false);

                this.el.sceneEl.systems['arjs']._displayErrorPopup( 'After camera permission prompt, please tap the screen to activate geolocation.');
            } else {
                var timeout = setTimeout(function () {
                    this.el.sceneEl.systems['arjs']._displayErrorPopup('Please enable device orientation in Settings > Safari > Motion & Orientation Access.');
                }, 750);
                window.addEventListener(eventName, function () {
                    clearTimeout(timeout);
                });
            }
        }

        window.addEventListener(eventName, this._onDeviceOrientation, false);

    },

    play: function() {
        if (this.data.simulateLatitude !== 0 && this.data.simulateLongitude !== 0) {
            var localPosition = Object.assign({}, this.currentCoords || {});
            localPosition.latitude = this.data.simulateLatitude;
            localPosition.longitude = this.data.simulateLongitude;
            if (this.data.simulateAltitude !== 0) {
                localPosition.altitude = this.data.simulateAltitude;
            }
            this.currentCoords = localPosition;
            this._updatePosition();
        } else {
            this._watchPositionId = this._initWatchGPS(function (position) {
                var localPosition = {
                    latitude: position.coords.latitude,
                    longitude: position.coords.longitude,
                    altitude: position.coords.altitude,
                    accuracy: position.coords.accuracy,
                    altitudeAccuracy: position.coords.altitudeAccuracy,
                };
          
                if (this.data.simulateAltitude !== 0) {
                    localPosition.altitude = this.data.simulateAltitude;
                }
               
                this.currentCoords = localPosition;
                var distMoved = this._haversineDist(
                    this.lastPosition,
                    this.currentCoords
                );

                if(distMoved >= this.data.gpsMinDistance || !this.originCoords) {
                    this._updatePosition();
                    this.lastPosition = {
                        longitude: this.currentCoords.longitude,
                        latitude: this.currentCoords.latitude
                    };
                }
            }.bind(this));
        }
    },

    tick: function () {
        if (this.heading === null) {
            return;
        }
        this._updateRotation();
    },

    pause: function() {
        if (this._watchPositionId) {
            navigator.geolocation.clearWatch(this._watchPositionId);
        }
        this._watchPositionId = null;
    },

    remove: function () {

        var eventName = this._getDeviceOrientationEventName();
        window.removeEventListener(eventName, this._onDeviceOrientation, false);

        window.removeEventListener('gps-entity-place-added', this.onGpsEntityPlaceAdded);
    },

    /**
     * Get device orientation event name, depends on browser implementation.
     * @returns {string} event name
     */
    _getDeviceOrientationEventName: function () {
        if ('ondeviceorientationabsolute' in window) {
            var eventName = 'deviceorientationabsolute'
        } else if ('ondeviceorientation' in window) {
            var eventName = 'deviceorientation'
        } else {
            var eventName = ''
            console.error('Compass not supported')
        }

        return eventName
    },

    /**
     * Get current user position.
     *
     * @param {function} onSuccess
     * @param {function} onError
     * @returns {Promise}
     */
    _initWatchGPS: function (onSuccess, onError) {
        if (!onError) {
            onError = function (err) {
                console.warn('ERROR(' + err.code + '): ' + err.message)

                if (err.code === 1) {
                    // User denied GeoLocation, let their know that
                    this.el.sceneEl.systems['arjs']._displayErrorPopup('Please activate Geolocation and refresh the page. If it is already active, please check permissions for this website.');
                    return;
                }

                if (err.code === 3) {
                    this.el.sceneEl.systems['arjs']._displayErrorPopup('Cannot retrieve GPS position. Signal is absent.');
                    return;
                }
            };
        }

        if ('geolocation' in navigator === false) {
            onError({ code: 0, message: 'Geolocation is not supported by your browser' });
            return Promise.resolve();
        }

        // https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/watchPosition
        return navigator.geolocation.watchPosition(onSuccess, onError, {
            enableHighAccuracy: true,
            maximumAge: this.data.gpsTimeInterval,
            timeout: 27000,
        });
    },

    /**
     * Update user position.
     *
     * @returns {void}
     */
    _updatePosition: function () {
        // don't update if accuracy is not good enough
        if (this.currentCoords.accuracy > this.data.positionMinAccuracy) {
            if (this.data.alert && !document.getElementById('alert-popup')) {
                var popup = document.createElement('div');
                popup.innerHTML = 'GPS signal is very poor. Try move outdoor or to an area with a better signal.'
                popup.setAttribute('id', 'alert-popup');
                document.body.appendChild(popup);
            }
            return;
        }

        var alertPopup = document.getElementById('alert-popup');
        if (this.currentCoords.accuracy <= this.data.positionMinAccuracy && alertPopup) {
            document.body.removeChild(alertPopup);
        }

        if (!this.originCoords) {
            // first camera initialization
            this.originCoords = this.currentCoords;
            this._setPosition();

            var loader = document.querySelector('.arjs-loader');
            if (loader) {
                loader.remove();
            }
            window.dispatchEvent(new CustomEvent('gps-camera-origin-coord-set'));
        } else {
            this._setPosition();
        }
    },
    _setPosition: function () {
        var position = this.el.getAttribute('position');

        // compute position.x
        var dstCoords = {
            longitude: this.currentCoords.longitude,
            latitude: this.originCoords.latitude,
        };

        position.x = this.computeDistanceMeters(this.originCoords, dstCoords);
        position.x *= this.currentCoords.longitude > this.originCoords.longitude ? 1 : -1;

        // compute position.z
        var dstCoords = {
            longitude: this.originCoords.longitude,
            latitude: this.currentCoords.latitude,
        }

        position.z = this.computeDistanceMeters(this.originCoords, dstCoords);
        position.z *= this.currentCoords.latitude > this.originCoords.latitude ? -1 : 1;

        // update position
        this.el.setAttribute('position', position);

        window.dispatchEvent(new CustomEvent('gps-camera-update-position', { detail: { position: this.currentCoords, origin: this.originCoords } }));
    },
    /**
     * Returns distance in meters between source and destination inputs.
     *
     *  Calculate distance, bearing and more between Latitude/Longitude points
     *  Details: https://www.movable-type.co.uk/scripts/latlong.html
     *
     * @param {Position} src
     * @param {Position} dest
     * @param {Boolean} isPlace
     *
     * @returns {number} distance | Number.MAX_SAFE_INTEGER
     */
    computeDistanceMeters: function (src, dest, isPlace) {
        var distance = this._haversineDist (src, dest);

        // if function has been called for a place, and if it's too near and a min distance has been set,
        // return max distance possible - to be handled by the caller
        if (isPlace && this.data.minDistance && this.data.minDistance > 0 && distance < this.data.minDistance) {
            return Number.MAX_SAFE_INTEGER;
        }

        // if function has been called for a place, and if it's too far and a max distance has been set,
        // return max distance possible - to be handled by the caller
        if (isPlace && this.data.maxDistance && this.data.maxDistance > 0 && distance > this.data.maxDistance) {
            return Number.MAX_SAFE_INTEGER;
        }

        return distance;
    },

    _haversineDist: function (src, dest) {
        var dlongitude = three__WEBPACK_IMPORTED_MODULE_1__.Math.degToRad(dest.longitude - src.longitude);
        var dlatitude = three__WEBPACK_IMPORTED_MODULE_1__.Math.degToRad(dest.latitude - src.latitude);

        var a = (Math.sin(dlatitude / 2) * Math.sin(dlatitude / 2)) + Math.cos(three__WEBPACK_IMPORTED_MODULE_1__.Math.degToRad(src.latitude)) * Math.cos(three__WEBPACK_IMPORTED_MODULE_1__.Math.degToRad(dest.latitude)) * (Math.sin(dlongitude / 2) * Math.sin(dlongitude / 2));
        var angle = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return angle * 6371000;
    },

    /**
     * Compute compass heading.
     *
     * @param {number} alpha
     * @param {number} beta
     * @param {number} gamma
     *
     * @returns {number} compass heading
     */
    _computeCompassHeading: function (alpha, beta, gamma) {

        // Convert degrees to radians
        var alphaRad = alpha * (Math.PI / 180);
        var betaRad = beta * (Math.PI / 180);
        var gammaRad = gamma * (Math.PI / 180);

        // Calculate equation components
        var cA = Math.cos(alphaRad);
        var sA = Math.sin(alphaRad);
        var sB = Math.sin(betaRad);
        var cG = Math.cos(gammaRad);
        var sG = Math.sin(gammaRad);

        // Calculate A, B, C rotation components
        var rA = - cA * sG - sA * sB * cG;
        var rB = - sA * sG + cA * sB * cG;

        // Calculate compass heading
        var compassHeading = Math.atan(rA / rB);

        // Convert from half unit circle to whole unit circle
        if (rB < 0) {
            compassHeading += Math.PI;
        } else if (rA < 0) {
            compassHeading += 2 * Math.PI;
        }

        // Convert radians to degrees
        compassHeading *= 180 / Math.PI;

        return compassHeading;
    },

    /**
     * Handler for device orientation event.
     *
     * @param {Event} event
     * @returns {void}
     */
    _onDeviceOrientation: function (event) {
        if (event.webkitCompassHeading !== undefined) {
            if (event.webkitCompassAccuracy < 50) {
                this.heading = event.webkitCompassHeading;
            } else {
                console.warn('webkitCompassAccuracy is event.webkitCompassAccuracy');
            }
        } else if (event.alpha !== null) {
            if (event.absolute === true || event.absolute === undefined) {
                this.heading = this._computeCompassHeading(event.alpha, event.beta, event.gamma);
            } else {
                console.warn('event.absolute === false');
            }
        } else {
            console.warn('event.alpha === null');
        }
    },

    /**
     * Update user rotation data.
     *
     * @returns {void}
     */
    _updateRotation: function () {
        var heading = 360 - this.heading;
        var cameraRotation = this.el.getAttribute('rotation').y;
        var yawRotation = three__WEBPACK_IMPORTED_MODULE_1__.Math.radToDeg(this.lookControls.yawObject.rotation.y);
        var offset = (heading - (cameraRotation - yawRotation)) % 360;
        this.lookControls.yawObject.rotation.y = three__WEBPACK_IMPORTED_MODULE_1__.Math.degToRad(offset);
    },
    
    _onGpsEntityPlaceAdded: function() {
        // if places are added after camera initialization is finished
        if (this.originCoords) {
            window.dispatchEvent(new CustomEvent('gps-camera-origin-coord-set'));
        }
        if (this.loader && this.loader.parentElement) {
            document.body.removeChild(this.loader)
        }
    }
});

/***/ }),

/***/ "./aframe/src/location-based/gps-entity-place.js":
/*!*******************************************************!*\
  !*** ./aframe/src/location-based/gps-entity-place.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var aframe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aframe */ "aframe");
/* harmony import */ var aframe__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(aframe__WEBPACK_IMPORTED_MODULE_0__);


aframe__WEBPACK_IMPORTED_MODULE_0__.registerComponent('gps-entity-place', {
    _cameraGps: null,
    schema: {
        longitude: {
            type: 'number',
            default: 0,
        },
        latitude: {
            type: 'number',
            default: 0,
        }
    },
    remove: function() {
        // cleaning listeners when the entity is removed from the DOM
        window.removeEventListener('gps-camera-origin-coord-set', this.coordSetListener);
        window.removeEventListener('gps-camera-update-position', this.updatePositionListener);
    },
    init: function() {
        this.coordSetListener = () => {
            if (!this._cameraGps) {
                var camera = document.querySelector('[gps-camera]');
                if (!camera.components['gps-camera']) {
                    console.error('gps-camera not initialized')
                    return;
                }
                this._cameraGps = camera.components['gps-camera'];
            }
            this._updatePosition();
        };

        this.updatePositionListener = (ev) => {
            if (!this.data || !this._cameraGps) {
                return;
            }

            var dstCoords = {
                longitude: this.data.longitude,
                latitude: this.data.latitude,
            };

            // it's actually a 'distance place', but we don't call it with last param, because we want to retrieve distance even if it's < minDistance property
            var distanceForMsg = this._cameraGps.computeDistanceMeters(ev.detail.position, dstCoords);

            this.el.setAttribute('distance', distanceForMsg);
            this.el.setAttribute('distanceMsg', formatDistance(distanceForMsg));
            this.el.dispatchEvent(new CustomEvent('gps-entity-place-update-position', { detail: { distance: distanceForMsg } }));

            var actualDistance = this._cameraGps.computeDistanceMeters(ev.detail.position, dstCoords, true);

            if (actualDistance === Number.MAX_SAFE_INTEGER) {
                this.hideForMinDistance(this.el, true);
            } else {
                this.hideForMinDistance(this.el, false);
            }
        };

        window.addEventListener('gps-camera-origin-coord-set', this.coordSetListener);
        window.addEventListener('gps-camera-update-position', this.updatePositionListener);

        this._positionXDebug = 0;

        window.dispatchEvent(new CustomEvent('gps-entity-place-added', { detail: { component: this.el } }));
    },
    /**
     * Hide entity according to minDistance property
     * @returns {void}
     */
    hideForMinDistance: function(el, hideEntity) {
        if (hideEntity) {
            el.setAttribute('visible', 'false');
        } else {
            el.setAttribute('visible', 'true');
        }
    },
    /**
     * Update place position
     * @returns {void}
     */
    _updatePosition: function() {
        var position = { x: 0, y: this.el.getAttribute('position').y || 0, z: 0 }

        // update position.x
        var dstCoords = {
            longitude: this.data.longitude,
            latitude: this._cameraGps.originCoords.latitude,
        };

        position.x = this._cameraGps.computeDistanceMeters(this._cameraGps.originCoords, dstCoords);

        this._positionXDebug = position.x;

        position.x *= this.data.longitude > this._cameraGps.originCoords.longitude ? 1 : -1;

        // update position.z
        var dstCoords = {
            longitude: this._cameraGps.originCoords.longitude,
            latitude: this.data.latitude,
        };

        position.z = this._cameraGps.computeDistanceMeters(this._cameraGps.originCoords, dstCoords);

        position.z *= this.data.latitude > this._cameraGps.originCoords.latitude ? -1 : 1;

        if (position.y !== 0) {
            var altitude = this._cameraGps.originCoords.altitude !== undefined ? this._cameraGps.originCoords.altitude : 0;
            position.y = position.y - altitude;
        }

        // update element's position in 3D world
        this.el.setAttribute('position', position);
    },
});

/**
 * Format distances string
 *
 * @param {String} distance
 */
function formatDistance(distance) {
    distance = distance.toFixed(0);

    if (distance >= 1000) {
        return (distance / 1000) + ' kilometers';
    }

    return distance + ' meters';
};


/***/ }),

/***/ "./aframe/src/location-based/gps-projected-camera.js":
/*!***********************************************************!*\
  !*** ./aframe/src/location-based/gps-projected-camera.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var aframe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aframe */ "aframe");
/* harmony import */ var aframe__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(aframe__WEBPACK_IMPORTED_MODULE_0__);
/** gps-projected-camera
 *
 * based on the original gps-camera, modified by nickw 02/04/20
 *
 * Rather than keeping track of position by calculating the distance of
 * entities or the current location to the original location, this version
 * makes use of the "Google" Spherical Mercactor projection, aka epsg:3857.
 *
 * The original position (lat/lon) is projected into Spherical Mercator and
 * stored.
 *
 * Then, when we receive a new position (lat/lon), this new position is
 * projected into Spherical Mercator and then its world position calculated
 * by comparing against the original position.
 *
 * The same is also the case for 'entity-places'; when these are added, their
 * Spherical Mercator coords are calculated (see gps-projected-entity-place).
 *
 * Spherical Mercator units are close to, but not exactly, metres, and are
 * heavily distorted near the poles. Nonetheless they are a good approximation
 * for many areas of the world and appear not to cause unacceptable distortions
 * when used as the units for AR apps.
 *
 * UPDATES 28/08/20:
 *
 * - add gpsMinDistance and gpsTimeInterval properties to control how
 * frequently GPS updates are processed. Aim is to prevent 'stuttering'
 * effects when close to AR content due to continuous small changes in
 * location.
 */



aframe__WEBPACK_IMPORTED_MODULE_0__.registerComponent('gps-projected-camera', {
    _watchPositionId: null,
    originCoords: null, // original coords now in Spherical Mercator
    currentCoords: null,
    lookControls: null,
    heading: null,
    schema: {
        simulateLatitude: {
            type: 'number',
            default: 0,
        },
        simulateLongitude: {
            type: 'number',
            default: 0,
        },
        simulateAltitude: {
            type: 'number',
            default: 0,
        },
        positionMinAccuracy: {
            type: 'int',
            default: 100,
        },
        alert: {
            type: 'boolean',
            default: false,
        },
        minDistance: {
            type: 'int',
            default: 0,
        },
        gpsMinDistance: {
            type: 'number',
            default: 0
        },
        gpsTimeInterval: {
            type: 'number',
            default: 0
        },
    },
    update: function() {
        if (this.data.simulateLatitude !== 0 && this.data.simulateLongitude !== 0) {
            var localPosition = Object.assign({}, this.currentCoords || {});
            localPosition.longitude = this.data.simulateLongitude;
            localPosition.latitude = this.data.simulateLatitude;
            localPosition.altitude = this.data.simulateAltitude;
            this.currentCoords = localPosition;

            // re-trigger initialization for new origin
            this.originCoords = null;
            this._updatePosition();
        }
    },
    init: function() {
        if (!this.el.components['arjs-look-controls'] && !this.el.components['look-controls']) {
            return;
        }

        this.lastPosition = {
            latitude: 0,
            longitude: 0
        };

        this.loader = document.createElement('DIV');
        this.loader.classList.add('arjs-loader');
        document.body.appendChild(this.loader);

        this.onGpsEntityPlaceAdded = this._onGpsEntityPlaceAdded.bind(this);
        window.addEventListener('gps-entity-place-added', this.onGpsEntityPlaceAdded);

        this.lookControls = this.el.components['arjs-look-controls'] || this.el.components['look-controls'];

        // listen to deviceorientation event
        var eventName = this._getDeviceOrientationEventName();
        this._onDeviceOrientation = this._onDeviceOrientation.bind(this);

        // if Safari
        if (!!navigator.userAgent.match(/Version\/[\d.]+.*Safari/)) {
            // iOS 13+
            if (typeof DeviceOrientationEvent.requestPermission === 'function') {
                var handler = function() {
                    console.log('Requesting device orientation permissions...')
                    DeviceOrientationEvent.requestPermission();
                    document.removeEventListener('touchend', handler);
                };

                document.addEventListener('touchend', function() { handler() }, false);

                this.el.sceneEl.systems['arjs']._displayErrorPopup('After camera permission prompt, please tap the screen to activate geolocation.');
            } else {
                var timeout = setTimeout(function() {
                    this.el.sceneEl.systems['arjs']._displayErrorPopup('Please enable device orientation in Settings > Safari > Motion & Orientation Access.');
                }, 750);
                window.addEventListener(eventName, function() {
                    clearTimeout(timeout);
                });
            }
        }

        window.addEventListener(eventName, this._onDeviceOrientation, false);
    },

    play: function() {
        if (this.data.simulateLatitude !== 0 && this.data.simulateLongitude !== 0) {
            var localPosition = Object.assign({}, this.currentCoords || {});
            localPosition.latitude = this.data.simulateLatitude;
            localPosition.longitude = this.data.simulateLongitude;
            if (this.data.simulateAltitude !== 0) {
                localPosition.altitude = this.data.simulateAltitude;
            }
            this.currentCoords = localPosition;
            this._updatePosition();
        } else {
            this._watchPositionId = this._initWatchGPS(function (position) {
                var localPosition = {
                    latitude: position.coords.latitude,
                    longitude: position.coords.longitude,
                    altitude: position.coords.altitude,
                    accuracy: position.coords.accuracy,
                    altitudeAccuracy: position.coords.altitudeAccuracy,
                };
          
                if (this.data.simulateAltitude !== 0) {
                    localPosition.altitude = this.data.simulateAltitude;
                }
               
                this.currentCoords = localPosition;
                var distMoved = this._haversineDist(
                    this.lastPosition,
                    this.currentCoords
                );

                if(distMoved >= this.data.gpsMinDistance || !this.originCoords) {
                    this._updatePosition();
                    this.lastPosition = {
                        longitude: this.currentCoords.longitude,
                        latitude: this.currentCoords.latitude
                    };
                }
            }.bind(this));
        }
    },

    tick: function() {
        if (this.heading === null) {
            return;
        }
        this._updateRotation();
    },

    pause: function() {
        if (this._watchPositionId) {
            navigator.geolocation.clearWatch(this._watchPositionId);
        }
        this._watchPositionId = null;
    },

    remove: function() {
        var eventName = this._getDeviceOrientationEventName();
        window.removeEventListener(eventName, this._onDeviceOrientation, false);
        window.removeEventListener('gps-entity-place-added', this.onGpsEntityPlaceAdded);
    },

    /**
     * Get device orientation event name, depends on browser implementation.
     * @returns {string} event name
     */
    _getDeviceOrientationEventName: function() {
        if ('ondeviceorientationabsolute' in window) {
            var eventName = 'deviceorientationabsolute'
        } else if ('ondeviceorientation' in window) {
            var eventName = 'deviceorientation'
        } else {
            var eventName = ''
            console.error('Compass not supported')
        }

        return eventName
    },

    /**
     * Get current user position.
     *
     * @param {function} onSuccess
     * @param {function} onError
     * @returns {Promise}
     */
    _initWatchGPS: function(onSuccess, onError) {
        if (!onError) {
            onError = function(err) {
                console.warn('ERROR(' + err.code + '): ' + err.message)

                if (err.code === 1) {
                    // User denied GeoLocation, let their know that
                    this.el.sceneEl.systems['arjs']._displayErrorPopup('Please activate Geolocation and refresh the page. If it is already active, please check permissions for this website.');  
                    return;
                }

                if (err.code === 3) {
                    this.el.sceneEl.systems['arjs']._displayErrorPopup('Cannot retrieve GPS position. Signal is absent.');
                    return;
                }
            };
        }

        if ('geolocation' in navigator === false) {
            onError({ code: 0, message: 'Geolocation is not supported by your browser' });
            return Promise.resolve();
        }

        // https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/watchPosition
        return navigator.geolocation.watchPosition(onSuccess, onError, {
            enableHighAccuracy: true,
            maximumAge: this.data.gpsTimeInterval,
            timeout: 27000,
        });
    },

    /**
     * Update user position.
     *
     * @returns {void}
     */
    _updatePosition: function() {
        // don't update if accuracy is not good enough
        if (this.currentCoords.accuracy > this.data.positionMinAccuracy) {
            if (this.data.alert && !document.getElementById('alert-popup')) {
                var popup = document.createElement('div');
                popup.innerHTML = 'GPS signal is very poor. Try move outdoor or to an area with a better signal.'
                popup.setAttribute('id', 'alert-popup');
                document.body.appendChild(popup);
            }
            return;
        }

        var alertPopup = document.getElementById('alert-popup');
        if (this.currentCoords.accuracy <= this.data.positionMinAccuracy && alertPopup) {
            document.body.removeChild(alertPopup);
        }

        if (!this.originCoords) {
            // first camera initialization
            // Now store originCoords as PROJECTED original lat/lon, so that
            // we can set the world origin to the original position in "metres"
            this.originCoords = this._project(this.currentCoords.latitude, this.currentCoords.longitude);
            this._setPosition();

            var loader = document.querySelector('.arjs-loader');
            if (loader) {
                loader.remove();
            }
            window.dispatchEvent(new CustomEvent('gps-camera-origin-coord-set'));
        } else {
            this._setPosition();
        }
    },
    /**
     * Set the current position (in world coords, based on Spherical Mercator)
     *
     * @returns {void}
     */
    _setPosition: function() {
        var position = this.el.getAttribute('position');

        var worldCoords = this.latLonToWorld(this.currentCoords.latitude, this.currentCoords.longitude);

        position.x = worldCoords[0];
        position.z = worldCoords[1];

        // update position
        this.el.setAttribute('position', position);

        // add the sphmerc position to the event (for testing only)
        window.dispatchEvent(new CustomEvent('gps-camera-update-position', { detail: { position: this.currentCoords, origin: this.originCoords } }));
    },
    /**
     * Returns distance in meters between camera and destination input.
     *
     * Assume we are using a metre-based projection. Not all 'metre-based'
     * projections give exact metres, e.g. Spherical Mercator, but it appears
     * close enough to be used for AR at least in middle temperate
     * latitudes (40 - 55). It is heavily distorted near the poles, however.
     *
     * @param {Position} dest
     * @param {Boolean} isPlace
     *
     * @returns {number} distance | Number.MAX_SAFE_INTEGER
     */
    computeDistanceMeters: function(dest, isPlace) {
        var src = this.el.getAttribute("position");
        var dx = dest.x - src.x;
        var dz = dest.z - src.z;
        var distance = Math.sqrt(dx * dx + dz * dz);

        // if function has been called for a place, and if it's too near and a min distance has been set,
        // return max distance possible - to be handled by the  method caller
        if (isPlace && this.data.minDistance && this.data.minDistance > 0 && distance < this.data.minDistance) {
            return Number.MAX_SAFE_INTEGER;
        }

        return distance;
    },
    /**
     * Converts latitude/longitude to OpenGL world coordinates.
     *
     * First projects lat/lon to absolute Spherical Mercator and then
     * calculates the world coordinates by comparing the Spherical Mercator
     * coordinates with the Spherical Mercator coordinates of the origin point.
     *
     * @param {Number} lat
     * @param {Number} lon
     *
     * @returns {array} world coordinates
     */
    latLonToWorld: function(lat, lon) {
        var projected = this._project(lat, lon);
        // Sign of z needs to be reversed compared to projected coordinates
        return [projected[0] - this.originCoords[0], -(projected[1] - this.originCoords[1])];
    },
    /**
     * Converts latitude/longitude to Spherical Mercator coordinates.
     * Algorithm is used in several OpenStreetMap-related applications.
     *
     * @param {Number} lat
     * @param {Number} lon
     *
     * @returns {array} Spherical Mercator coordinates
     */
    _project: function(lat, lon) {
        const HALF_EARTH = 20037508.34;

        // Convert the supplied coords to Spherical Mercator (EPSG:3857), also
        // known as 'Google Projection', using the algorithm used extensively
        // in various OpenStreetMap software.
        var y = Math.log(Math.tan((90 + lat) * Math.PI / 360.0)) / (Math.PI / 180.0);
        return [(lon / 180.0) * HALF_EARTH, y * HALF_EARTH / 180.0];
    },
    /**
     * Converts Spherical Mercator coordinates to latitude/longitude.
     * Algorithm is used in several OpenStreetMap-related applications.
     *
     * @param {Number} spherical mercator easting
     * @param {Number} spherical mercator northing
     *
     * @returns {object} lon/lat
     */
    _unproject: function(e, n) {
        const HALF_EARTH = 20037508.34;
        var yp = (n / HALF_EARTH) * 180.0;
        return {
            longitude: (e / HALF_EARTH) * 180.0,
            latitude: 180.0 / Math.PI * (2 * Math.atan(Math.exp(yp * Math.PI / 180.0)) - Math.PI / 2)
        };
    },
    /**
     * Compute compass heading.
     *
     * @param {number} alpha
     * @param {number} beta
     * @param {number} gamma
     *
     * @returns {number} compass heading
     */
    _computeCompassHeading: function(alpha, beta, gamma) {

        // Convert degrees to radians
        var alphaRad = alpha * (Math.PI / 180);
        var betaRad = beta * (Math.PI / 180);
        var gammaRad = gamma * (Math.PI / 180);

        // Calculate equation components
        var cA = Math.cos(alphaRad);
        var sA = Math.sin(alphaRad);
        var sB = Math.sin(betaRad);
        var cG = Math.cos(gammaRad);
        var sG = Math.sin(gammaRad);

        // Calculate A, B, C rotation components
        var rA = - cA * sG - sA * sB * cG;
        var rB = - sA * sG + cA * sB * cG;

        // Calculate compass heading
        var compassHeading = Math.atan(rA / rB);

        // Convert from half unit circle to whole unit circle
        if (rB < 0) {
            compassHeading += Math.PI;
        } else if (rA < 0) {
            compassHeading += 2 * Math.PI;
        }

        // Convert radians to degrees
        compassHeading *= 180 / Math.PI;

        return compassHeading;
    },

    /**
     * Handler for device orientation event.
     *
     * @param {Event} event
     * @returns {void}
     */
    _onDeviceOrientation: function(event) {
        if (event.webkitCompassHeading !== undefined) {
            if (event.webkitCompassAccuracy < 50) {
                this.heading = event.webkitCompassHeading;
            } else {
                console.warn('webkitCompassAccuracy is event.webkitCompassAccuracy');
            }
        } else if (event.alpha !== null) {
            if (event.absolute === true || event.absolute === undefined) {
                this.heading = this._computeCompassHeading(event.alpha, event.beta, event.gamma);
            } else {
                console.warn('event.absolute === false');
            }
        } else {
            console.warn('event.alpha === null');
        }
    },

    /**
     * Update user rotation data.
     *
     * @returns {void}
     */
    _updateRotation: function() {
        var heading = 360 - this.heading;
        var cameraRotation = this.el.getAttribute('rotation').y;
        var yawRotation = THREE.Math.radToDeg(this.lookControls.yawObject.rotation.y);
        var offset = (heading - (cameraRotation - yawRotation)) % 360;
        this.lookControls.yawObject.rotation.y = THREE.Math.degToRad(offset);
    },

    /**
     * Calculate haversine distance between two lat/lon pairs.
     *
     * Taken from gps-camera
     */
    _haversineDist: function(src, dest) {
        var dlongitude = THREE.Math.degToRad(dest.longitude - src.longitude);
        var dlatitude = THREE.Math.degToRad(dest.latitude - src.latitude);

        var a = (Math.sin(dlatitude / 2) * Math.sin(dlatitude / 2)) + Math.cos(THREE.Math.degToRad(src.latitude)) * Math.cos(THREE.Math.degToRad(dest.latitude)) * (Math.sin(dlongitude / 2) * Math.sin(dlongitude / 2));
        var angle = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return angle * 6371000;
    },

    _onGpsEntityPlaceAdded: function() {
        // if places are added after camera initialization is finished
        if (this.originCoords) {
            window.dispatchEvent(new CustomEvent('gps-camera-origin-coord-set'));
        }
        if (this.loader && this.loader.parentElement) {
            document.body.removeChild(this.loader)
        }
    }
});


/***/ }),

/***/ "./aframe/src/location-based/gps-projected-entity-place.js":
/*!*****************************************************************!*\
  !*** ./aframe/src/location-based/gps-projected-entity-place.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var aframe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aframe */ "aframe");
/* harmony import */ var aframe__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(aframe__WEBPACK_IMPORTED_MODULE_0__);
/** gps-projected-entity-place
 *
 * based on the original gps-entity-place, modified by nickw 02/04/20
 *
 * Rather than keeping track of position by calculating the distance of
 * entities or the current location to the original location, this version
 * makes use of the "Google" Spherical Mercactor projection, aka epsg:3857.
 *
 * The original location on startup (lat/lon) is projected into Spherical 
 * Mercator and stored.
 *
 * When 'entity-places' are added, their Spherical Mercator coords are 
 * calculated and converted into world coordinates, relative to the original
 * position, using the Spherical Mercator projection calculation in
 * gps-projected-camera.
 *
 * Spherical Mercator units are close to, but not exactly, metres, and are
 * heavily distorted near the poles. Nonetheless they are a good approximation
 * for many areas of the world and appear not to cause unacceptable distortions
 * when used as the units for AR apps.
 */


aframe__WEBPACK_IMPORTED_MODULE_0__.registerComponent('gps-projected-entity-place', {
    _cameraGps: null,
    schema: {
        longitude: {
            type: 'number',
            default: 0,
        },
        latitude: {
            type: 'number',
            default: 0,
        }
    },
    remove: function() {
        // cleaning listeners when the entity is removed from the DOM
        window.removeEventListener('gps-camera-update-position', this.updatePositionListener);
    },
    init: function() {
        // Used now to get the GPS camera when it's been setup
        this.coordSetListener = () => {
            if (!this._cameraGps) {
                var camera = document.querySelector('[gps-projected-camera]');
                if (!camera.components['gps-projected-camera']) {
                    console.error('gps-projected-camera not initialized')
                    return;
                }
                this._cameraGps = camera.components['gps-projected-camera'];
                this._updatePosition();
            }
        };
        


        // update position needs to worry about distance but nothing else?
        this.updatePositionListener = (ev) => {
            if (!this.data || !this._cameraGps) {
                return;
            }

            var dstCoords = this.el.getAttribute('position');

            // it's actually a 'distance place', but we don't call it with last param, because we want to retrieve distance even if it's < minDistance property
            // _computeDistanceMeters is now going to use the projected
            var distanceForMsg = this._cameraGps.computeDistanceMeters(dstCoords);

            this.el.setAttribute('distance', distanceForMsg);
            this.el.setAttribute('distanceMsg', formatDistance(distanceForMsg));

            this.el.dispatchEvent(new CustomEvent('gps-entity-place-update-position', { detail: { distance: distanceForMsg } }));

            var actualDistance = this._cameraGps.computeDistanceMeters(dstCoords, true);

            if (actualDistance === Number.MAX_SAFE_INTEGER) {
                this.hideForMinDistance(this.el, true);
            } else {
                this.hideForMinDistance(this.el, false);
            }
        };

        // Retain as this event is fired when the GPS camera is set up
        window.addEventListener('gps-camera-origin-coord-set', this.coordSetListener);
        window.addEventListener('gps-camera-update-position', this.updatePositionListener);

        this._positionXDebug = 0;

        window.dispatchEvent(new CustomEvent('gps-entity-place-added', { detail: { component: this.el } }));
    },
    /**
     * Hide entity according to minDistance property
     * @returns {void}
     */
    hideForMinDistance: function(el, hideEntity) {
        if (hideEntity) {
            el.setAttribute('visible', 'false');
        } else {
            el.setAttribute('visible', 'true');
        }
    },
    /**
     * Update place position
     * @returns {void}
     */

    // set position to world coords using the lat/lon 
    _updatePosition: function() {
        var worldPos = this._cameraGps.latLonToWorld(this.data.latitude, this.data.longitude);
        var position = this.el.getAttribute('position');

        // update element's position in 3D world
        //this.el.setAttribute('position', position);
        this.el.setAttribute('position', {
            x: worldPos[0],
            y: position.y, 
            z: worldPos[1]
        }); 
    },
});

/**
 * Format distances string
 *
 * @param {String} distance
 */
function formatDistance(distance) {
    distance = distance.toFixed(0);

    if (distance >= 1000) {
        return (distance / 1000) + ' kilometers';
    }

    return distance + ' meters';
};


/***/ }),

/***/ "./aframe/src/system-arjs.js":
/*!***********************************!*\
  !*** ./aframe/src/system-arjs.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var aframe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aframe */ "aframe");
/* harmony import */ var aframe__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(aframe__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _three_js_src_threex_arjs_profile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../three.js/src/threex/arjs-profile */ "./three.js/src/threex/arjs-profile.js");
/* harmony import */ var _three_js_src_new_api_arjs_session__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../three.js/src/new-api/arjs-session */ "./three.js/src/new-api/arjs-session.js");
/* harmony import */ var _three_js_src_new_api_arjs_debugui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../three.js/src/new-api/arjs-debugui */ "./three.js/src/new-api/arjs-debugui.js");





aframe__WEBPACK_IMPORTED_MODULE_0__.registerSystem('arjs', {
    schema: {
        trackingMethod: {
            type: 'string',
            default: 'best',
        },
        debugUIEnabled: {
            type: 'boolean',
            default: false,
        },
        areaLearningButton: {
            type: 'boolean',
            default: true,
        },
        performanceProfile: {
            type: 'string',
            default: 'default',
        },
        labelingMode: {
            type: 'string',
            default: '',
        },
        // new video texture mode (location based only)
        videoTexture: {
            type: 'boolean',
            default: false
        },
        // old parameters
        debug: {
            type: 'boolean',
            default: false
        },
        detectionMode: {
            type: 'string',
            default: '',
        },
        matrixCodeType: {
            type: 'string',
            default: '',
        },
        patternRatio: {
            type: 'number',
            default: -1,
        },
        cameraParametersUrl: {
            type: 'string',
            default: '',
        },
        maxDetectionRate: {
            type: 'number',
            default: -1
        },
        sourceType: {
            type: 'string',
            default: '',
        },
        sourceUrl: {
            type: 'string',
            default: '',
        },
        sourceWidth: {
            type: 'number',
            default: -1
        },
        sourceHeight: {
            type: 'number',
            default: -1
        },
        deviceId: {
            type: 'string',
            default: ''
        },
        displayWidth: {
            type: 'number',
            default: -1
        },
        displayHeight: {
            type: 'number',
            default: -1
        },
        canvasWidth: {
            type: 'number',
            default: -1
        },
        canvasHeight: {
            type: 'number',
            default: -1
        },
        errorPopup: {
            type: 'string',
            default: ''
        }
    },

    //////////////////////////////////////////////////////////////////////////////
    //		Code Separator
    //////////////////////////////////////////////////////////////////////////////

    init: function () {
        var _this = this

        // If videoTexture is set, skip the remainder of the setup entirely and just use the arjs-webcam-texture component
        if(this.data.videoTexture === true && this.data.sourceType === 'webcam') {
            var webcamEntity = document.createElement("a-entity");
            webcamEntity.setAttribute("arjs-webcam-texture", true);
            this.el.sceneEl.appendChild(webcamEntity);
            return;
        }

        //////////////////////////////////////////////////////////////////////////////
        //		setup arProfile
        //////////////////////////////////////////////////////////////////////////////

        var arProfile = this._arProfile = new _three_js_src_threex_arjs_profile__WEBPACK_IMPORTED_MODULE_1__.default()
            .trackingMethod(this.data.trackingMethod)
            .performance(this.data.performanceProfile)
            .defaultMarker()

        //////////////////////////////////////////////////////////////////////////////
        //		honor this.data and setup arProfile with it
        //////////////////////////////////////////////////////////////////////////////

        // honor this.data and push what has been modified into arProfile
        if (this.data.debug !== false) arProfile.contextParameters.debug = this.data.debug
        if (this.data.detectionMode !== '') arProfile.contextParameters.detectionMode = this.data.detectionMode
        if (this.data.matrixCodeType !== '') arProfile.contextParameters.matrixCodeType = this.data.matrixCodeType
        if (this.data.patternRatio !== -1) arProfile.contextParameters.patternRatio = this.data.patternRatio
        if (this.data.labelingMode !== '') arProfile.contextParameters.labelingMode = this.data.labelingMode
        if (this.data.cameraParametersUrl !== '') arProfile.contextParameters.cameraParametersUrl = this.data.cameraParametersUrl
        if (this.data.maxDetectionRate !== -1) arProfile.contextParameters.maxDetectionRate = this.data.maxDetectionRate
        if (this.data.canvasWidth !== -1) arProfile.contextParameters.canvasWidth = this.data.canvasWidth
        if (this.data.canvasHeight !== -1) arProfile.contextParameters.canvasHeight = this.data.canvasHeight

        if (this.data.sourceType !== '') arProfile.sourceParameters.sourceType = this.data.sourceType
        if (this.data.sourceUrl !== '') arProfile.sourceParameters.sourceUrl = this.data.sourceUrl
        if (this.data.sourceWidth !== -1) arProfile.sourceParameters.sourceWidth = this.data.sourceWidth
        if (this.data.sourceHeight !== -1) arProfile.sourceParameters.sourceHeight = this.data.sourceHeight
        if (this.data.deviceId !== '') arProfile.sourceParameters.deviceId = this.data.deviceId
        if (this.data.displayWidth !== -1) arProfile.sourceParameters.displayWidth = this.data.displayWidth
        if (this.data.displayHeight !== -1) arProfile.sourceParameters.displayHeight = this.data.displayHeight

        arProfile.checkIfValid()

        //////////////////////////////////////////////////////////////////////////////
        //		Code Separator
        //////////////////////////////////////////////////////////////////////////////

        this._arSession = null

        _this.isReady = false
        _this.needsOverride = true

        // wait until the renderer is isReady
        this.el.sceneEl.addEventListener('renderstart', function () {
            var scene = _this.el.sceneEl.object3D
            var camera = _this.el.sceneEl.camera
            var renderer = _this.el.sceneEl.renderer

            //////////////////////////////////////////////////////////////////////////////
            //		build ARjs.Session
            //////////////////////////////////////////////////////////////////////////////
            var arSession = _this._arSession = new _three_js_src_new_api_arjs_session__WEBPACK_IMPORTED_MODULE_2__.default({
                scene: scene,
                renderer: renderer,
                camera: camera,
                sourceParameters: arProfile.sourceParameters,
                contextParameters: arProfile.contextParameters
            })

            //////////////////////////////////////////////////////////////////////////////
            //		Code Separator
            //////////////////////////////////////////////////////////////////////////////

            _this.isReady = true

            //////////////////////////////////////////////////////////////////////////////
            //		awful resize trick
            //////////////////////////////////////////////////////////////////////////////
            // KLUDGE
            window.addEventListener('resize', onResize)
            function onResize() {
                var arSource = _this._arSession.arSource

                // ugly kludge to get resize on aframe... not even sure it works
                if (arProfile.contextParameters.trackingBackend !== 'tango') {
                    arSource.copyElementSizeTo(document.body)
                }

                // fixing a-frame css
                var buttonElement = document.querySelector('.a-enter-vr')
                if (buttonElement) {
                    buttonElement.style.position = 'fixed'
                }
            }

            //////////////////////////////////////////////////////////////////////////////
            //		honor .debugUIEnabled
            //////////////////////////////////////////////////////////////////////////////
            if (_this.data.debugUIEnabled) initDebugUI()
            function initDebugUI() {
                // get or create containerElement
                var containerElement = document.querySelector('#arjsDebugUIContainer')
                if (containerElement === null) {
                    containerElement = document.createElement('div')
                    containerElement.id = 'arjsDebugUIContainer'
                    containerElement.setAttribute('style', 'position: fixed; bottom: 10px; width:100%; text-align: center; z-index: 1;color: grey;')
                    document.body.appendChild(containerElement)
                }

                // create sessionDebugUI
                var sessionDebugUI = new _three_js_src_new_api_arjs_debugui__WEBPACK_IMPORTED_MODULE_3__.SessionDebugUI(arSession)
                containerElement.appendChild(sessionDebugUI.domElement)
            }
        })

        //////////////////////////////////////////////////////////////////////////////
        //		Code Separator
        //////////////////////////////////////////////////////////////////////////////
        // TODO this is crappy - code an exponential backoff - max 1 seconds
        // KLUDGE: kludge to write a 'resize' event
        // var startedAt = Date.now()
        // var timerId = setInterval(function () {
        //     if (Date.now() - startedAt > 10000 * 1000) {
        //         clearInterval(timerId)
        //         return
        //     }
        //     // onResize()
        //     window.dispatchEvent(new Event('resize'));
        // }, 1000 / 30)

        function setBackoff(func, millisDuration = Infinity, limit = 1000) {
            if(func == null || !(Object.prototype.toString.call(func) == '[object Function]')) {
                return;
            } 
            let backoff = 33.3
            let start = Date.now()
            let repeat = function() {
              return (millisDuration == Infinity || (Date.now() - start) < millisDuration)
            }
            let next = function() {
                backoff = (backoff * 2) < limit ? (backoff * 2) : limit
                setTimeout(function() {
                    func()
                    if(repeat()) {
                        next()
                    }
                }, backoff)
            };
            next()
        }

        setBackoff(() => {
            window.dispatchEvent(new Event('resize'))
        })
    },

    tick: function () {
        // skip it if not yet isInitialised
        if (this.isReady === false || this.data.videoTexture === true) return

        // update arSession
        this._arSession.update()

        // copy projection matrix to camera
        this._arSession.onResize()
    },

    _displayErrorPopup: function(msg) {
        if (this.data.errorPopup !== '') {
            let errorPopup = document.getElementById(this.data.errorPopup);
            if (!errorPopup) {
                errorPopup = document.createElement('div');
                errorPopup.setAttribute('id', this.data.errorPopup);
                document.body.appendChild(errorPopup);
            }
            errorPopup.innerHTML = msg;
        } else {
            alert(msg);
        }
    }
})


/***/ }),

/***/ "./node_modules/@ar-js-org/artoolkit5-js/dist/ARToolkit.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ar-js-org/artoolkit5-js/dist/ARToolkit.js ***!
  \*****************************************************************/
/***/ (function(module) {

!function(A,I){ true?module.exports=I():0}("undefined"!=typeof self?self:this,(function(){return(()=>{var A={757:(A,I,g)=>{A.exports=g(666)},669:(A,I,g)=>{A.exports=g(609)},448:(A,I,g)=>{"use strict";var B=g(867),C=g(26),Q=g(372),E=g(327),i=g(97),o=g(109),D=g(985),a=g(61),w=g(655),F=g(263);A.exports=function(A){return new Promise((function(I,g){var G,h=A.data,s=A.headers,R=A.responseType;function U(){A.cancelToken&&A.cancelToken.unsubscribe(G),A.signal&&A.signal.removeEventListener("abort",G)}B.isFormData(h)&&delete s["Content-Type"];var y=new XMLHttpRequest;if(A.auth){var t=A.auth.username||"",S=A.auth.password?unescape(encodeURIComponent(A.auth.password)):"";s.Authorization="Basic "+btoa(t+":"+S)}var M=i(A.baseURL,A.url);function n(){if(y){var B="getAllResponseHeaders"in y?o(y.getAllResponseHeaders()):null,Q={data:R&&"text"!==R&&"json"!==R?y.response:y.responseText,status:y.status,statusText:y.statusText,headers:B,config:A,request:y};C((function(A){I(A),U()}),(function(A){g(A),U()}),Q),y=null}}if(y.open(A.method.toUpperCase(),E(M,A.params,A.paramsSerializer),!0),y.timeout=A.timeout,"onloadend"in y?y.onloadend=n:y.onreadystatechange=function(){y&&4===y.readyState&&(0!==y.status||y.responseURL&&0===y.responseURL.indexOf("file:"))&&setTimeout(n)},y.onabort=function(){y&&(g(a("Request aborted",A,"ECONNABORTED",y)),y=null)},y.onerror=function(){g(a("Network Error",A,null,y)),y=null},y.ontimeout=function(){var I=A.timeout?"timeout of "+A.timeout+"ms exceeded":"timeout exceeded",B=A.transitional||w.transitional;A.timeoutErrorMessage&&(I=A.timeoutErrorMessage),g(a(I,A,B.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",y)),y=null},B.isStandardBrowserEnv()){var c=(A.withCredentials||D(M))&&A.xsrfCookieName?Q.read(A.xsrfCookieName):void 0;c&&(s[A.xsrfHeaderName]=c)}"setRequestHeader"in y&&B.forEach(s,(function(A,I){void 0===h&&"content-type"===I.toLowerCase()?delete s[I]:y.setRequestHeader(I,A)})),B.isUndefined(A.withCredentials)||(y.withCredentials=!!A.withCredentials),R&&"json"!==R&&(y.responseType=A.responseType),"function"==typeof A.onDownloadProgress&&y.addEventListener("progress",A.onDownloadProgress),"function"==typeof A.onUploadProgress&&y.upload&&y.upload.addEventListener("progress",A.onUploadProgress),(A.cancelToken||A.signal)&&(G=function(A){y&&(g(!A||A&&A.type?new F("canceled"):A),y.abort(),y=null)},A.cancelToken&&A.cancelToken.subscribe(G),A.signal&&(A.signal.aborted?G():A.signal.addEventListener("abort",G))),h||(h=null),y.send(h)}))}},609:(A,I,g)=>{"use strict";var B=g(867),C=g(849),Q=g(321),E=g(185),i=function A(I){var g=new Q(I),i=C(Q.prototype.request,g);return B.extend(i,Q.prototype,g),B.extend(i,g),i.create=function(g){return A(E(I,g))},i}(g(655));i.Axios=Q,i.Cancel=g(263),i.CancelToken=g(972),i.isCancel=g(502),i.VERSION=g(288).version,i.all=function(A){return Promise.all(A)},i.spread=g(713),i.isAxiosError=g(268),A.exports=i,A.exports.default=i},263:A=>{"use strict";function I(A){this.message=A}I.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},I.prototype.__CANCEL__=!0,A.exports=I},972:(A,I,g)=>{"use strict";var B=g(263);function C(A){if("function"!=typeof A)throw new TypeError("executor must be a function.");var I;this.promise=new Promise((function(A){I=A}));var g=this;this.promise.then((function(A){if(g._listeners){var I,B=g._listeners.length;for(I=0;I<B;I++)g._listeners[I](A);g._listeners=null}})),this.promise.then=function(A){var I,B=new Promise((function(A){g.subscribe(A),I=A})).then(A);return B.cancel=function(){g.unsubscribe(I)},B},A((function(A){g.reason||(g.reason=new B(A),I(g.reason))}))}C.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},C.prototype.subscribe=function(A){this.reason?A(this.reason):this._listeners?this._listeners.push(A):this._listeners=[A]},C.prototype.unsubscribe=function(A){if(this._listeners){var I=this._listeners.indexOf(A);-1!==I&&this._listeners.splice(I,1)}},C.source=function(){var A;return{token:new C((function(I){A=I})),cancel:A}},A.exports=C},502:A=>{"use strict";A.exports=function(A){return!(!A||!A.__CANCEL__)}},321:(A,I,g)=>{"use strict";var B=g(867),C=g(327),Q=g(782),E=g(572),i=g(185),o=g(875),D=o.validators;function a(A){this.defaults=A,this.interceptors={request:new Q,response:new Q}}a.prototype.request=function(A){"string"==typeof A?(A=arguments[1]||{}).url=arguments[0]:A=A||{},(A=i(this.defaults,A)).method?A.method=A.method.toLowerCase():this.defaults.method?A.method=this.defaults.method.toLowerCase():A.method="get";var I=A.transitional;void 0!==I&&o.assertOptions(I,{silentJSONParsing:D.transitional(D.boolean),forcedJSONParsing:D.transitional(D.boolean),clarifyTimeoutError:D.transitional(D.boolean)},!1);var g=[],B=!0;this.interceptors.request.forEach((function(I){"function"==typeof I.runWhen&&!1===I.runWhen(A)||(B=B&&I.synchronous,g.unshift(I.fulfilled,I.rejected))}));var C,Q=[];if(this.interceptors.response.forEach((function(A){Q.push(A.fulfilled,A.rejected)})),!B){var a=[E,void 0];for(Array.prototype.unshift.apply(a,g),a=a.concat(Q),C=Promise.resolve(A);a.length;)C=C.then(a.shift(),a.shift());return C}for(var w=A;g.length;){var F=g.shift(),G=g.shift();try{w=F(w)}catch(A){G(A);break}}try{C=E(w)}catch(A){return Promise.reject(A)}for(;Q.length;)C=C.then(Q.shift(),Q.shift());return C},a.prototype.getUri=function(A){return A=i(this.defaults,A),C(A.url,A.params,A.paramsSerializer).replace(/^\?/,"")},B.forEach(["delete","get","head","options"],(function(A){a.prototype[A]=function(I,g){return this.request(i(g||{},{method:A,url:I,data:(g||{}).data}))}})),B.forEach(["post","put","patch"],(function(A){a.prototype[A]=function(I,g,B){return this.request(i(B||{},{method:A,url:I,data:g}))}})),A.exports=a},782:(A,I,g)=>{"use strict";var B=g(867);function C(){this.handlers=[]}C.prototype.use=function(A,I,g){return this.handlers.push({fulfilled:A,rejected:I,synchronous:!!g&&g.synchronous,runWhen:g?g.runWhen:null}),this.handlers.length-1},C.prototype.eject=function(A){this.handlers[A]&&(this.handlers[A]=null)},C.prototype.forEach=function(A){B.forEach(this.handlers,(function(I){null!==I&&A(I)}))},A.exports=C},97:(A,I,g)=>{"use strict";var B=g(793),C=g(303);A.exports=function(A,I){return A&&!B(I)?C(A,I):I}},61:(A,I,g)=>{"use strict";var B=g(481);A.exports=function(A,I,g,C,Q){var E=new Error(A);return B(E,I,g,C,Q)}},572:(A,I,g)=>{"use strict";var B=g(867),C=g(527),Q=g(502),E=g(655),i=g(263);function o(A){if(A.cancelToken&&A.cancelToken.throwIfRequested(),A.signal&&A.signal.aborted)throw new i("canceled")}A.exports=function(A){return o(A),A.headers=A.headers||{},A.data=C.call(A,A.data,A.headers,A.transformRequest),A.headers=B.merge(A.headers.common||{},A.headers[A.method]||{},A.headers),B.forEach(["delete","get","head","post","put","patch","common"],(function(I){delete A.headers[I]})),(A.adapter||E.adapter)(A).then((function(I){return o(A),I.data=C.call(A,I.data,I.headers,A.transformResponse),I}),(function(I){return Q(I)||(o(A),I&&I.response&&(I.response.data=C.call(A,I.response.data,I.response.headers,A.transformResponse))),Promise.reject(I)}))}},481:A=>{"use strict";A.exports=function(A,I,g,B,C){return A.config=I,g&&(A.code=g),A.request=B,A.response=C,A.isAxiosError=!0,A.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},A}},185:(A,I,g)=>{"use strict";var B=g(867);A.exports=function(A,I){I=I||{};var g={};function C(A,I){return B.isPlainObject(A)&&B.isPlainObject(I)?B.merge(A,I):B.isPlainObject(I)?B.merge({},I):B.isArray(I)?I.slice():I}function Q(g){return B.isUndefined(I[g])?B.isUndefined(A[g])?void 0:C(void 0,A[g]):C(A[g],I[g])}function E(A){if(!B.isUndefined(I[A]))return C(void 0,I[A])}function i(g){return B.isUndefined(I[g])?B.isUndefined(A[g])?void 0:C(void 0,A[g]):C(void 0,I[g])}function o(g){return g in I?C(A[g],I[g]):g in A?C(void 0,A[g]):void 0}var D={url:E,method:E,data:E,baseURL:i,transformRequest:i,transformResponse:i,paramsSerializer:i,timeout:i,timeoutMessage:i,withCredentials:i,adapter:i,responseType:i,xsrfCookieName:i,xsrfHeaderName:i,onUploadProgress:i,onDownloadProgress:i,decompress:i,maxContentLength:i,maxBodyLength:i,transport:i,httpAgent:i,httpsAgent:i,cancelToken:i,socketPath:i,responseEncoding:i,validateStatus:o};return B.forEach(Object.keys(A).concat(Object.keys(I)),(function(A){var I=D[A]||Q,C=I(A);B.isUndefined(C)&&I!==o||(g[A]=C)})),g}},26:(A,I,g)=>{"use strict";var B=g(61);A.exports=function(A,I,g){var C=g.config.validateStatus;g.status&&C&&!C(g.status)?I(B("Request failed with status code "+g.status,g.config,null,g.request,g)):A(g)}},527:(A,I,g)=>{"use strict";var B=g(867),C=g(655);A.exports=function(A,I,g){var Q=this||C;return B.forEach(g,(function(g){A=g.call(Q,A,I)})),A}},655:(A,I,g)=>{"use strict";var B=g(867),C=g(16),Q=g(481),E={"Content-Type":"application/x-www-form-urlencoded"};function i(A,I){!B.isUndefined(A)&&B.isUndefined(A["Content-Type"])&&(A["Content-Type"]=I)}var o,D={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(o=g(448)),o),transformRequest:[function(A,I){return C(I,"Accept"),C(I,"Content-Type"),B.isFormData(A)||B.isArrayBuffer(A)||B.isBuffer(A)||B.isStream(A)||B.isFile(A)||B.isBlob(A)?A:B.isArrayBufferView(A)?A.buffer:B.isURLSearchParams(A)?(i(I,"application/x-www-form-urlencoded;charset=utf-8"),A.toString()):B.isObject(A)||I&&"application/json"===I["Content-Type"]?(i(I,"application/json"),function(A,I,g){if(B.isString(A))try{return(0,JSON.parse)(A),B.trim(A)}catch(A){if("SyntaxError"!==A.name)throw A}return(0,JSON.stringify)(A)}(A)):A}],transformResponse:[function(A){var I=this.transitional||D.transitional,g=I&&I.silentJSONParsing,C=I&&I.forcedJSONParsing,E=!g&&"json"===this.responseType;if(E||C&&B.isString(A)&&A.length)try{return JSON.parse(A)}catch(A){if(E){if("SyntaxError"===A.name)throw Q(A,this,"E_JSON_PARSE");throw A}}return A}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(A){return A>=200&&A<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};B.forEach(["delete","get","head"],(function(A){D.headers[A]={}})),B.forEach(["post","put","patch"],(function(A){D.headers[A]=B.merge(E)})),A.exports=D},288:A=>{A.exports={version:"0.24.0"}},849:A=>{"use strict";A.exports=function(A,I){return function(){for(var g=new Array(arguments.length),B=0;B<g.length;B++)g[B]=arguments[B];return A.apply(I,g)}}},327:(A,I,g)=>{"use strict";var B=g(867);function C(A){return encodeURIComponent(A).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}A.exports=function(A,I,g){if(!I)return A;var Q;if(g)Q=g(I);else if(B.isURLSearchParams(I))Q=I.toString();else{var E=[];B.forEach(I,(function(A,I){null!=A&&(B.isArray(A)?I+="[]":A=[A],B.forEach(A,(function(A){B.isDate(A)?A=A.toISOString():B.isObject(A)&&(A=JSON.stringify(A)),E.push(C(I)+"="+C(A))})))})),Q=E.join("&")}if(Q){var i=A.indexOf("#");-1!==i&&(A=A.slice(0,i)),A+=(-1===A.indexOf("?")?"?":"&")+Q}return A}},303:A=>{"use strict";A.exports=function(A,I){return I?A.replace(/\/+$/,"")+"/"+I.replace(/^\/+/,""):A}},372:(A,I,g)=>{"use strict";var B=g(867);A.exports=B.isStandardBrowserEnv()?{write:function(A,I,g,C,Q,E){var i=[];i.push(A+"="+encodeURIComponent(I)),B.isNumber(g)&&i.push("expires="+new Date(g).toGMTString()),B.isString(C)&&i.push("path="+C),B.isString(Q)&&i.push("domain="+Q),!0===E&&i.push("secure"),document.cookie=i.join("; ")},read:function(A){var I=document.cookie.match(new RegExp("(^|;\\s*)("+A+")=([^;]*)"));return I?decodeURIComponent(I[3]):null},remove:function(A){this.write(A,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},793:A=>{"use strict";A.exports=function(A){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(A)}},268:A=>{"use strict";A.exports=function(A){return"object"==typeof A&&!0===A.isAxiosError}},985:(A,I,g)=>{"use strict";var B=g(867);A.exports=B.isStandardBrowserEnv()?function(){var A,I=/(msie|trident)/i.test(navigator.userAgent),g=document.createElement("a");function C(A){var B=A;return I&&(g.setAttribute("href",B),B=g.href),g.setAttribute("href",B),{href:g.href,protocol:g.protocol?g.protocol.replace(/:$/,""):"",host:g.host,search:g.search?g.search.replace(/^\?/,""):"",hash:g.hash?g.hash.replace(/^#/,""):"",hostname:g.hostname,port:g.port,pathname:"/"===g.pathname.charAt(0)?g.pathname:"/"+g.pathname}}return A=C(window.location.href),function(I){var g=B.isString(I)?C(I):I;return g.protocol===A.protocol&&g.host===A.host}}():function(){return!0}},16:(A,I,g)=>{"use strict";var B=g(867);A.exports=function(A,I){B.forEach(A,(function(g,B){B!==I&&B.toUpperCase()===I.toUpperCase()&&(A[I]=g,delete A[B])}))}},109:(A,I,g)=>{"use strict";var B=g(867),C=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];A.exports=function(A){var I,g,Q,E={};return A?(B.forEach(A.split("\n"),(function(A){if(Q=A.indexOf(":"),I=B.trim(A.substr(0,Q)).toLowerCase(),g=B.trim(A.substr(Q+1)),I){if(E[I]&&C.indexOf(I)>=0)return;E[I]="set-cookie"===I?(E[I]?E[I]:[]).concat([g]):E[I]?E[I]+", "+g:g}})),E):E}},713:A=>{"use strict";A.exports=function(A){return function(I){return A.apply(null,I)}}},875:(A,I,g)=>{"use strict";var B=g(288).version,C={};["object","boolean","number","function","string","symbol"].forEach((function(A,I){C[A]=function(g){return typeof g===A||"a"+(I<1?"n ":" ")+A}}));var Q={};C.transitional=function(A,I,g){function C(A,I){return"[Axios v"+B+"] Transitional option '"+A+"'"+I+(g?". "+g:"")}return function(g,B,E){if(!1===A)throw new Error(C(B," has been removed"+(I?" in "+I:"")));return I&&!Q[B]&&(Q[B]=!0,console.warn(C(B," has been deprecated since v"+I+" and will be removed in the near future"))),!A||A(g,B,E)}},A.exports={assertOptions:function(A,I,g){if("object"!=typeof A)throw new TypeError("options must be an object");for(var B=Object.keys(A),C=B.length;C-- >0;){var Q=B[C],E=I[Q];if(E){var i=A[Q],o=void 0===i||E(i,Q,A);if(!0!==o)throw new TypeError("option "+Q+" must be "+o)}else if(!0!==g)throw Error("Unknown option "+Q)}},validators:C}},867:(A,I,g)=>{"use strict";var B=g(849),C=Object.prototype.toString;function Q(A){return"[object Array]"===C.call(A)}function E(A){return void 0===A}function i(A){return null!==A&&"object"==typeof A}function o(A){if("[object Object]"!==C.call(A))return!1;var I=Object.getPrototypeOf(A);return null===I||I===Object.prototype}function D(A){return"[object Function]"===C.call(A)}function a(A,I){if(null!=A)if("object"!=typeof A&&(A=[A]),Q(A))for(var g=0,B=A.length;g<B;g++)I.call(null,A[g],g,A);else for(var C in A)Object.prototype.hasOwnProperty.call(A,C)&&I.call(null,A[C],C,A)}A.exports={isArray:Q,isArrayBuffer:function(A){return"[object ArrayBuffer]"===C.call(A)},isBuffer:function(A){return null!==A&&!E(A)&&null!==A.constructor&&!E(A.constructor)&&"function"==typeof A.constructor.isBuffer&&A.constructor.isBuffer(A)},isFormData:function(A){return"undefined"!=typeof FormData&&A instanceof FormData},isArrayBufferView:function(A){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(A):A&&A.buffer&&A.buffer instanceof ArrayBuffer},isString:function(A){return"string"==typeof A},isNumber:function(A){return"number"==typeof A},isObject:i,isPlainObject:o,isUndefined:E,isDate:function(A){return"[object Date]"===C.call(A)},isFile:function(A){return"[object File]"===C.call(A)},isBlob:function(A){return"[object Blob]"===C.call(A)},isFunction:D,isStream:function(A){return i(A)&&D(A.pipe)},isURLSearchParams:function(A){return"undefined"!=typeof URLSearchParams&&A instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:a,merge:function A(){var I={};function g(g,B){o(I[B])&&o(g)?I[B]=A(I[B],g):o(g)?I[B]=A({},g):Q(g)?I[B]=g.slice():I[B]=g}for(var B=0,C=arguments.length;B<C;B++)a(arguments[B],g);return I},extend:function(A,I,g){return a(I,(function(I,C){A[C]=g&&"function"==typeof I?B(I,g):I})),A},trim:function(A){return A.trim?A.trim():A.replace(/^\s+|\s+$/g,"")},stripBOM:function(A){return 65279===A.charCodeAt(0)&&(A=A.slice(1)),A}}},666:A=>{var I=function(A){"use strict";var I,g=Object.prototype,B=g.hasOwnProperty,C="function"==typeof Symbol?Symbol:{},Q=C.iterator||"@@iterator",E=C.asyncIterator||"@@asyncIterator",i=C.toStringTag||"@@toStringTag";function o(A,I,g){return Object.defineProperty(A,I,{value:g,enumerable:!0,configurable:!0,writable:!0}),A[I]}try{o({},"")}catch(A){o=function(A,I,g){return A[I]=g}}function D(A,I,g,B){var C=I&&I.prototype instanceof R?I:R,Q=Object.create(C.prototype),E=new Y(B||[]);return Q._invoke=function(A,I,g){var B=w;return function(C,Q){if(B===G)throw new Error("Generator is already running");if(B===h){if("throw"===C)throw Q;return J()}for(g.method=C,g.arg=Q;;){var E=g.delegate;if(E){var i=k(E,g);if(i){if(i===s)continue;return i}}if("next"===g.method)g.sent=g._sent=g.arg;else if("throw"===g.method){if(B===w)throw B=h,g.arg;g.dispatchException(g.arg)}else"return"===g.method&&g.abrupt("return",g.arg);B=G;var o=a(A,I,g);if("normal"===o.type){if(B=g.done?h:F,o.arg===s)continue;return{value:o.arg,done:g.done}}"throw"===o.type&&(B=h,g.method="throw",g.arg=o.arg)}}}(A,g,E),Q}function a(A,I,g){try{return{type:"normal",arg:A.call(I,g)}}catch(A){return{type:"throw",arg:A}}}A.wrap=D;var w="suspendedStart",F="suspendedYield",G="executing",h="completed",s={};function R(){}function U(){}function y(){}var t={};o(t,Q,(function(){return this}));var S=Object.getPrototypeOf,M=S&&S(S(e([])));M&&M!==g&&B.call(M,Q)&&(t=M);var n=y.prototype=R.prototype=Object.create(t);function c(A){["next","throw","return"].forEach((function(I){o(A,I,(function(A){return this._invoke(I,A)}))}))}function r(A,I){function g(C,Q,E,i){var o=a(A[C],A,Q);if("throw"!==o.type){var D=o.arg,w=D.value;return w&&"object"==typeof w&&B.call(w,"__await")?I.resolve(w.__await).then((function(A){g("next",A,E,i)}),(function(A){g("throw",A,E,i)})):I.resolve(w).then((function(A){D.value=A,E(D)}),(function(A){return g("throw",A,E,i)}))}i(o.arg)}var C;this._invoke=function(A,B){function Q(){return new I((function(I,C){g(A,B,I,C)}))}return C=C?C.then(Q,Q):Q()}}function k(A,g){var B=A.iterator[g.method];if(B===I){if(g.delegate=null,"throw"===g.method){if(A.iterator.return&&(g.method="return",g.arg=I,k(A,g),"throw"===g.method))return s;g.method="throw",g.arg=new TypeError("The iterator does not provide a 'throw' method")}return s}var C=a(B,A.iterator,g.arg);if("throw"===C.type)return g.method="throw",g.arg=C.arg,g.delegate=null,s;var Q=C.arg;return Q?Q.done?(g[A.resultName]=Q.value,g.next=A.nextLoc,"return"!==g.method&&(g.method="next",g.arg=I),g.delegate=null,s):Q:(g.method="throw",g.arg=new TypeError("iterator result is not an object"),g.delegate=null,s)}function K(A){var I={tryLoc:A[0]};1 in A&&(I.catchLoc=A[1]),2 in A&&(I.finallyLoc=A[2],I.afterLoc=A[3]),this.tryEntries.push(I)}function N(A){var I=A.completion||{};I.type="normal",delete I.arg,A.completion=I}function Y(A){this.tryEntries=[{tryLoc:"root"}],A.forEach(K,this),this.reset(!0)}function e(A){if(A){var g=A[Q];if(g)return g.call(A);if("function"==typeof A.next)return A;if(!isNaN(A.length)){var C=-1,E=function g(){for(;++C<A.length;)if(B.call(A,C))return g.value=A[C],g.done=!1,g;return g.value=I,g.done=!0,g};return E.next=E}}return{next:J}}function J(){return{value:I,done:!0}}return U.prototype=y,o(n,"constructor",y),o(y,"constructor",U),U.displayName=o(y,i,"GeneratorFunction"),A.isGeneratorFunction=function(A){var I="function"==typeof A&&A.constructor;return!!I&&(I===U||"GeneratorFunction"===(I.displayName||I.name))},A.mark=function(A){return Object.setPrototypeOf?Object.setPrototypeOf(A,y):(A.__proto__=y,o(A,i,"GeneratorFunction")),A.prototype=Object.create(n),A},A.awrap=function(A){return{__await:A}},c(r.prototype),o(r.prototype,E,(function(){return this})),A.AsyncIterator=r,A.async=function(I,g,B,C,Q){void 0===Q&&(Q=Promise);var E=new r(D(I,g,B,C),Q);return A.isGeneratorFunction(g)?E:E.next().then((function(A){return A.done?A.value:E.next()}))},c(n),o(n,i,"Generator"),o(n,Q,(function(){return this})),o(n,"toString",(function(){return"[object Generator]"})),A.keys=function(A){var I=[];for(var g in A)I.push(g);return I.reverse(),function g(){for(;I.length;){var B=I.pop();if(B in A)return g.value=B,g.done=!1,g}return g.done=!0,g}},A.values=e,Y.prototype={constructor:Y,reset:function(A){if(this.prev=0,this.next=0,this.sent=this._sent=I,this.done=!1,this.delegate=null,this.method="next",this.arg=I,this.tryEntries.forEach(N),!A)for(var g in this)"t"===g.charAt(0)&&B.call(this,g)&&!isNaN(+g.slice(1))&&(this[g]=I)},stop:function(){this.done=!0;var A=this.tryEntries[0].completion;if("throw"===A.type)throw A.arg;return this.rval},dispatchException:function(A){if(this.done)throw A;var g=this;function C(B,C){return i.type="throw",i.arg=A,g.next=B,C&&(g.method="next",g.arg=I),!!C}for(var Q=this.tryEntries.length-1;Q>=0;--Q){var E=this.tryEntries[Q],i=E.completion;if("root"===E.tryLoc)return C("end");if(E.tryLoc<=this.prev){var o=B.call(E,"catchLoc"),D=B.call(E,"finallyLoc");if(o&&D){if(this.prev<E.catchLoc)return C(E.catchLoc,!0);if(this.prev<E.finallyLoc)return C(E.finallyLoc)}else if(o){if(this.prev<E.catchLoc)return C(E.catchLoc,!0)}else{if(!D)throw new Error("try statement without catch or finally");if(this.prev<E.finallyLoc)return C(E.finallyLoc)}}}},abrupt:function(A,I){for(var g=this.tryEntries.length-1;g>=0;--g){var C=this.tryEntries[g];if(C.tryLoc<=this.prev&&B.call(C,"finallyLoc")&&this.prev<C.finallyLoc){var Q=C;break}}Q&&("break"===A||"continue"===A)&&Q.tryLoc<=I&&I<=Q.finallyLoc&&(Q=null);var E=Q?Q.completion:{};return E.type=A,E.arg=I,Q?(this.method="next",this.next=Q.finallyLoc,s):this.complete(E)},complete:function(A,I){if("throw"===A.type)throw A.arg;return"break"===A.type||"continue"===A.type?this.next=A.arg:"return"===A.type?(this.rval=this.arg=A.arg,this.method="return",this.next="end"):"normal"===A.type&&I&&(this.next=I),s},finish:function(A){for(var I=this.tryEntries.length-1;I>=0;--I){var g=this.tryEntries[I];if(g.finallyLoc===A)return this.complete(g.completion,g.afterLoc),N(g),s}},catch:function(A){for(var I=this.tryEntries.length-1;I>=0;--I){var g=this.tryEntries[I];if(g.tryLoc===A){var B=g.completion;if("throw"===B.type){var C=B.arg;N(g)}return C}}throw new Error("illegal catch attempt")},delegateYield:function(A,g,B){return this.delegate={iterator:e(A),resultName:g,nextLoc:B},"next"===this.method&&(this.arg=I),s}},A}(A.exports);try{regeneratorRuntime=I}catch(A){"object"==typeof globalThis?globalThis.regeneratorRuntime=I:Function("r","regeneratorRuntime = r")(I)}},654:()=>{},231:()=>{},703:()=>{}},I={};function g(B){var C=I[B];if(void 0!==C)return C.exports;var Q=I[B]={exports:{}};return A[B](Q,Q.exports,g),Q.exports}g.n=A=>{var I=A&&A.__esModule?()=>A.default:()=>A;return g.d(I,{a:I}),I},g.d=(A,I)=>{for(var B in I)g.o(I,B)&&!g.o(A,B)&&Object.defineProperty(A,B,{enumerable:!0,get:I[B]})},g.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(A){if("object"==typeof window)return window}}(),g.o=(A,I)=>Object.prototype.hasOwnProperty.call(A,I);var B={};return(()=>{"use strict";function A(A,I,g,B,C,Q,E){try{var i=A[Q](E),o=i.value}catch(A){return void g(A)}i.done?I(o):Promise.resolve(o).then(B,C)}function I(I){return function(){var g=this,B=arguments;return new Promise((function(C,Q){var E=I.apply(g,B);function i(I){A(E,C,Q,i,o,"next",I)}function o(I){A(E,C,Q,i,o,"throw",I)}i(void 0)}))}}function C(A,I){if(!(A instanceof I))throw new TypeError("Cannot call a class as a function")}function Q(A,I){for(var g=0;g<I.length;g++){var B=I[g];B.enumerable=B.enumerable||!1,B.configurable=!0,"value"in B&&(B.writable=!0),Object.defineProperty(A,B.key,B)}}function E(A,I,g){return I&&Q(A.prototype,I),g&&Q(A,g),A}g.d(B,{default:()=>n});var i=g(757),o=g.n(i);function D(A){return D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(A){return typeof A}:function(A){return A&&"function"==typeof Symbol&&A.constructor===Symbol&&A!==Symbol.prototype?"symbol":typeof A},D(A)}var a,w=(a=(a="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||"/index.js",function(A){A=void 0!==(A=A||{})?A:{};var I,B={};for(I in A)A.hasOwnProperty(I)&&(B[I]=A[I]);var C=[],Q="./this.program",E=function(A,I){throw I},i=!1,o=!1,w=!1,F=!1;i="object"===("undefined"==typeof window?"undefined":D(window)),o="function"==typeof importScripts,w="object"===("undefined"==typeof process?"undefined":D(process))&&"object"===D(process.versions)&&"string"==typeof process.versions.node,F=!i&&!w&&!o;var G,h,s,R,U="";function y(I){return A.locateFile?A.locateFile(I,U):U+I}w?(U=o?g(703).dirname(U)+"/":"//",G=function(A,I){var B=jg(A);return B?I?B:B.toString():(s||(s=g(231)),R||(R=g(703)),A=R.normalize(A),s.readFileSync(A,I?null:"utf8"))},h=function(A){var I=G(A,!0);return I.buffer||(I=new Uint8Array(I)),H(I.buffer),I},process.argv.length>1&&(Q=process.argv[1].replace(/\\/g,"/")),C=process.argv.slice(2),process.on("uncaughtException",(function(A){if(!(A instanceof NB))throw A})),process.on("unhandledRejection",JA),E=function(A){process.exit(A)},A.inspect=function(){return"[Emscripten Module object]"}):F?("undefined"!=typeof read&&(G=function(A){var I=jg(A);return I?Vg(I):read(A)}),h=function(A){var I;return(I=jg(A))?I:"function"==typeof readbuffer?new Uint8Array(readbuffer(A)):(H("object"===D(I=read(A,"binary"))),I)},"undefined"!=typeof scriptArgs?C=scriptArgs:void 0!==arguments&&(C=arguments),"function"==typeof quit&&(E=function(A){quit(A)}),"undefined"!=typeof print&&("undefined"==typeof console&&(console={}),console.log=print,console.warn=console.error="undefined"!=typeof printErr?printErr:print)):(i||o)&&(o?U=self.location.href:document.currentScript&&(U=document.currentScript.src),a&&(U=a),U=0!==U.indexOf("blob:")?U.substr(0,U.lastIndexOf("/")+1):"",G=function(A){try{var I=new XMLHttpRequest;return I.open("GET",A,!1),I.send(null),I.responseText}catch(I){var g=jg(A);if(g)return Vg(g);throw I}},o&&(h=function(A){try{var I=new XMLHttpRequest;return I.open("GET",A,!1),I.responseType="arraybuffer",I.send(null),new Uint8Array(I.response)}catch(I){var g=jg(A);if(g)return g;throw I}}));var t=A.print||console.log.bind(console),S=A.printErr||console.warn.bind(console);for(I in B)B.hasOwnProperty(I)&&(A[I]=B[I]);function M(A){var I=AA[iA>>2],g=I+A+15&-16;return g>Sg()&&JA(),AA[iA>>2]=g,I}B=null,A.arguments&&(C=A.arguments),A.thisProgram&&(Q=A.thisProgram),A.quit&&(E=A.quit);var n,c,r,k={"f64-rem":function(A,I){return A%I},debugger:function(){}},K=(new Array(0),0),N=function(A){K=A},Y=function(){return K};A.wasmBinary&&(n=A.wasmBinary),A.noExitRuntime&&(c=A.noExitRuntime),"object"!==("undefined"==typeof WebAssembly?"undefined":D(WebAssembly))&&S("no native wasm support detected");var e=new WebAssembly.Table({initial:878,maximum:878,element:"anyfunc"}),J=!1;function H(A,I){A||JA("Assertion failed: "+I)}function L(A){return hA?RB(A):M(A)}var q="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function d(A,I,g){for(var B=I+g,C=I;A[C]&&!(C>=B);)++C;if(C-I>16&&A.subarray&&q)return q.decode(A.subarray(I,C));for(var Q="";I<C;){var E=A[I++];if(128&E){var i=63&A[I++];if(192!=(224&E)){var o=63&A[I++];if((E=224==(240&E)?(15&E)<<12|i<<6|o:(7&E)<<18|i<<12|o<<6|63&A[I++])<65536)Q+=String.fromCharCode(E);else{var D=E-65536;Q+=String.fromCharCode(55296|D>>10,56320|1023&D)}}else Q+=String.fromCharCode((31&E)<<6|i)}else Q+=String.fromCharCode(E)}return Q}function f(A,I){return A?d(z,A,I):""}function l(A,I,g,B){if(!(B>0))return 0;for(var C=g,Q=g+B-1,E=0;E<A.length;++E){var i=A.charCodeAt(E);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&A.charCodeAt(++E)),i<=127){if(g>=Q)break;I[g++]=i}else if(i<=2047){if(g+1>=Q)break;I[g++]=192|i>>6,I[g++]=128|63&i}else if(i<=65535){if(g+2>=Q)break;I[g++]=224|i>>12,I[g++]=128|i>>6&63,I[g++]=128|63&i}else{if(g+3>=Q)break;I[g++]=240|i>>18,I[g++]=128|i>>12&63,I[g++]=128|i>>6&63,I[g++]=128|63&i}}return I[g]=0,g-C}function u(A,I,g){return l(A,z,I,g)}function W(A){for(var I=0,g=0;g<A.length;++g){var B=A.charCodeAt(g);B>=55296&&B<=57343&&(B=65536+((1023&B)<<10)|1023&A.charCodeAt(++g)),B<=127?++I:I+=B<=2047?2:B<=65535?3:4}return I}var p="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0;function Z(A){for(var I=A,g=I>>1;_[g];)++g;if((I=g<<1)-A>32&&p)return p.decode(z.subarray(A,I));for(var B=0,C="";;){var Q=_[A+2*B>>1];if(0==Q)return C;++B,C+=String.fromCharCode(Q)}}function b(A,I,g){if(void 0===g&&(g=2147483647),g<2)return 0;for(var B=I,C=(g-=2)<2*A.length?g/2:A.length,Q=0;Q<C;++Q){var E=A.charCodeAt(Q);_[I>>1]=E,I+=2}return _[I>>1]=0,I-B}function x(A){return 2*A.length}function m(A){for(var I=0,g="";;){var B=AA[A+4*I>>2];if(0==B)return g;if(++I,B>=65536){var C=B-65536;g+=String.fromCharCode(55296|C>>10,56320|1023&C)}else g+=String.fromCharCode(B)}}function X(A,I,g){if(void 0===g&&(g=2147483647),g<4)return 0;for(var B=I,C=B+g-4,Q=0;Q<A.length;++Q){var E=A.charCodeAt(Q);if(E>=55296&&E<=57343&&(E=65536+((1023&E)<<10)|1023&A.charCodeAt(++Q)),AA[I>>2]=E,(I+=4)+4>C)break}return AA[I>>2]=0,I-B}function V(A){for(var I=0,g=0;g<A.length;++g){var B=A.charCodeAt(g);B>=55296&&B<=57343&&++g,I+=4}return I}function O(A){var I=W(A)+1,g=RB(I);return g&&l(A,v,g,I),g}function T(A,I){v.set(A,I)}function j(A,I,g){for(var B=0;B<A.length;++B)v[I++>>0]=A.charCodeAt(B);g||(v[I>>0]=0)}var P,v,z,_,$,AA,IA,gA,BA,CA=65536;function QA(I){P=I,A.HEAP8=v=new Int8Array(I),A.HEAP16=_=new Int16Array(I),A.HEAP32=AA=new Int32Array(I),A.HEAPU8=z=new Uint8Array(I),A.HEAPU16=$=new Uint16Array(I),A.HEAPU32=IA=new Uint32Array(I),A.HEAPF32=gA=new Float32Array(I),A.HEAPF64=BA=new Float64Array(I)}var EA=5304176,iA=61104,oA=A.TOTAL_MEMORY||268435456;function DA(I){for(;I.length>0;){var g=I.shift();if("function"!=typeof g){var B=g.func;"number"==typeof B?void 0===g.arg?A.dynCall_v(B):A.dynCall_vi(B,g.arg):B(void 0===g.arg?null:g.arg)}else g()}}(r=A.wasmMemory?A.wasmMemory:new WebAssembly.Memory({initial:oA/CA,maximum:oA/CA}))&&(P=r.buffer),oA=P.byteLength,QA(P),AA[iA>>2]=EA;var aA=[],wA=[],FA=[],GA=[],hA=!1;function sA(){if(A.preRun)for("function"==typeof A.preRun&&(A.preRun=[A.preRun]);A.preRun.length;)tA(A.preRun.shift());DA(aA)}function RA(){hA=!0,A.noFSInit||iI.init.initialized||iI.init(),QI.init(),DA(wA)}function UA(){iI.ignorePermissions=!1,DA(FA)}function yA(){if(A.postRun)for("function"==typeof A.postRun&&(A.postRun=[A.postRun]);A.postRun.length;)SA(A.postRun.shift());DA(GA)}function tA(A){aA.unshift(A)}function SA(A){GA.unshift(A)}var MA=Math.abs,nA=Math.ceil,cA=Math.floor,rA=Math.min,kA=0,KA=null,NA=null;function YA(I){kA++,A.monitorRunDependencies&&A.monitorRunDependencies(kA)}function eA(I){if(kA--,A.monitorRunDependencies&&A.monitorRunDependencies(kA),0==kA&&(null!==KA&&(clearInterval(KA),KA=null),NA)){var g=NA;NA=null,g()}}function JA(I){throw A.onAbort&&A.onAbort(I),t(I+=""),S(I),J=!0,I="abort("+I+"). Build with -s ASSERTIONS=1 for more info.",new WebAssembly.RuntimeError(I)}A.preloadedImages={},A.preloadedAudios={};var HA="data:application/octet-stream;base64,";function LA(A){return String.prototype.startsWith?A.startsWith(HA):0===A.indexOf(HA)}var qA,dA,fA="data:application/octet-stream;base64,";function lA(){try{if(n)return new Uint8Array(n);var A=jg(fA);if(A)return A;if(h)return h(fA);throw"both async and sync fetching of the wasm failed"}catch(A){JA(A)}}function uA(){return n||!i&&!o||"function"!=typeof fetch?new Promise((function(A,I){A(lA())})):fetch(fA,{credentials:"same-origin"}).then((function(A){if(!A.ok)throw"failed to load wasm binary file at '"+fA+"'";return A.arrayBuffer()})).catch((function(){return lA()}))}function WA(){var I={env:BB,wasi_snapshot_preview1:BB,global:{NaN:NaN,Infinity:1/0},"global.Math":Math,asm2wasm:k};function g(I,g){var B=I.exports;A.asm=B,eA()}function B(A){g(A.instance)}function C(A){return uA().then((function(A){return WebAssembly.instantiate(A,I)})).then(A,(function(A){S("failed to asynchronously prepare wasm: "+A),JA(A)}))}if(YA(),A.instantiateWasm)try{return A.instantiateWasm(I,g)}catch(A){return S("Module.instantiateWasm callback failed with error: "+A),!1}return function(){if(n||"function"!=typeof WebAssembly.instantiateStreaming||LA(fA)||"function"!=typeof fetch)return C(B);fetch(fA,{credentials:"same-origin"}).then((function(A){return WebAssembly.instantiateStreaming(A,I).then(B,(function(A){S("wasm streaming compile failed: "+A),S("falling back to ArrayBuffer instantiation"),C(B)}))}))}(),{}}LA(fA)||(fA=y(fA)),A.asm=WA;var pA=[function(A,I,g,B,C,Q){artoolkit.frameMalloc||(artoolkit.frameMalloc={});var E=artoolkit.frameMalloc;E.framepointer=I,E.framesize=g,E.camera=B,E.transform=C,E.videoLumaPointer=Q},function(A,I,g,B){artoolkit.multiEachMarkerInfo||(artoolkit.multiEachMarkerInfo={});var C=artoolkit.multiEachMarkerInfo;C.visible=A,C.pattId=I,C.pattType=g,C.width=B},function(A,I,g,B,C,Q,E,i,o,D,a,w,F,G,h,s,R,U,y,t,S,M,n,c,r,k,K,N,Y,e,J,H,L){var q=arguments,d=12;artoolkit.markerInfo||(artoolkit.markerInfo={pos:[0,0],line:[[0,0,0],[0,0,0],[0,0,0],[0,0,0]],vertex:[[0,0],[0,0],[0,0],[0,0]]});var f=artoolkit.markerInfo;f.area=A,f.id=I,f.idPatt=g,f.idMatrix=B,f.dir=C,f.dirPatt=Q,f.dirMatrix=E,f.cf=i,f.cfPatt=o,f.cfMatrix=D,f.pos[0]=a,f.pos[1]=w,f.line[0][0]=q[d++],f.line[0][1]=q[d++],f.line[0][2]=q[d++],f.line[1][0]=q[d++],f.line[1][1]=q[d++],f.line[1][2]=q[d++],f.line[2][0]=q[d++],f.line[2][1]=q[d++],f.line[2][2]=q[d++],f.line[3][0]=q[d++],f.line[3][1]=q[d++],f.line[3][2]=q[d++],f.vertex[0][0]=q[d++],f.vertex[0][1]=q[d++],f.vertex[1][0]=q[d++],f.vertex[1][1]=q[d++],f.vertex[2][0]=q[d++],f.vertex[2][1]=q[d++],f.vertex[3][0]=q[d++],f.vertex[3][1]=q[d++],f.errorCorrected=q[d++]},function(A,I,g,B,C,Q,E,i,o,D,a,w,F,G){var h=arguments,s=0;artoolkit.NFTMarkerInfo||(artoolkit.NFTMarkerInfo={id:0,error:-1,found:0,pose:[0,0,0,0,0,0,0,0,0,0,0,0]});var R=artoolkit.NFTMarkerInfo;R.id=h[s++],R.error=h[s++],R.found=1,R.pose[0]=h[s++],R.pose[1]=h[s++],R.pose[2]=h[s++],R.pose[3]=h[s++],R.pose[4]=h[s++],R.pose[5]=h[s++],R.pose[6]=h[s++],R.pose[7]=h[s++],R.pose[8]=h[s++],R.pose[9]=h[s++],R.pose[10]=h[s++],R.pose[11]=h[s++]},function(A){var I=arguments,g=0;artoolkit.NFTMarkerInfo||(artoolkit.NFTMarkerInfo={id:0,error:-1,found:0,pose:[0,0,0,0,0,0,0,0,0,0,0,0]});var B=artoolkit.NFTMarkerInfo;B.id=I[g++],B.error=-1,B.found=0,B.pose[0]=0,B.pose[1]=0,B.pose[2]=0,B.pose[3]=0,B.pose[4]=0,B.pose[5]=0,B.pose[6]=0,B.pose[7]=0,B.pose[8]=0,B.pose[9]=0,B.pose[10]=0,B.pose[11]=0}];function ZA(A,I,g,B,C,Q,E){return pA[A](I,g,B,C,Q,E)}function bA(A,I,g,B,C){return pA[A](I,g,B,C)}function xA(A,I,g,B,C,Q,E,i,o,D,a,w,F,G,h){return pA[A](I,g,B,C,Q,E,i,o,D,a,w,F,G,h)}function mA(A,I){return pA[A](I)}function XA(A,I,g,B,C,Q,E,i,o,D,a,w,F,G,h,s,R,U,y,t,S,M,n,c,r,k,K,N,Y,e,J,H,L,q){return pA[A](I,g,B,C,Q,E,i,o,D,a,w,F,G,h,s,R,U,y,t,S,M,n,c,r,k,K,N,Y,e,J,H,L,q)}function VA(A){return A.replace(/\b__Z[\w\d_]+/g,(function(A){return A==A?A:A+" ["+A+"]"}))}function OA(){var A=new Error;if(!A.stack){try{throw new Error}catch(I){A=I}if(!A.stack)return"(no stack trace available)"}return A.stack.toString()}function TA(){var I=OA();return A.extraStackTrace&&(I+="\n"+A.extraStackTrace()),VA(I)}wA.push({func:function(){EB()}},{func:function(){aB()}},{func:function(){iB()}},{func:function(){oB()}});var jA={};function PA(){return Q||"./this.program"}function vA(A){var I,g;vA.called?(g=AA[A>>2],I=AA[g>>2]):(vA.called=!0,jA.USER="web_user",jA.LOGNAME="web_user",jA.PATH="/",jA.PWD="/",jA.HOME="/home/web_user",jA.LANG=("object"===("undefined"==typeof navigator?"undefined":D(navigator))&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",jA._=PA(),I=L(1024),g=L(256),AA[g>>2]=I,AA[A>>2]=g);var B=[],C=0;for(var Q in jA)if("string"==typeof jA[Q]){var E=Q+"="+jA[Q];B.push(E),C+=E.length}if(C>1024)throw new Error("Environment size exceeded TOTAL_ENV_SIZE!");for(var i=0;i<B.length;i++)j(E=B[i],I),AA[g+4*i>>2]=I,I+=E.length+1;AA[g+4*B.length>>2]=0}function zA(A){return RB(A)}var _A={};function $A(A,I,g){throw _A[A]={ptr:A,adjusted:[A],type:I,destructor:g,refcount:0,caught:!1,rethrown:!1},"uncaught_exception"in DB?DB.uncaught_exceptions++:DB.uncaught_exceptions=1,A}function AI(){}function II(I){return A.___errno_location&&(AA[A.___errno_location()>>2]=I),I}function gI(A,I){return II(63),-1}var BI={splitPath:function(A){return/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(A).slice(1)},normalizeArray:function(A,I){for(var g=0,B=A.length-1;B>=0;B--){var C=A[B];"."===C?A.splice(B,1):".."===C?(A.splice(B,1),g++):g&&(A.splice(B,1),g--)}if(I)for(;g;g--)A.unshift("..");return A},normalize:function(A){var I="/"===A.charAt(0),g="/"===A.substr(-1);return(A=BI.normalizeArray(A.split("/").filter((function(A){return!!A})),!I).join("/"))||I||(A="."),A&&g&&(A+="/"),(I?"/":"")+A},dirname:function(A){var I=BI.splitPath(A),g=I[0],B=I[1];return g||B?(B&&(B=B.substr(0,B.length-1)),g+B):"."},basename:function(A){if("/"===A)return"/";var I=A.lastIndexOf("/");return-1===I?A:A.substr(I+1)},extname:function(A){return BI.splitPath(A)[3]},join:function(){var A=Array.prototype.slice.call(arguments,0);return BI.normalize(A.join("/"))},join2:function(A,I){return BI.normalize(A+"/"+I)}},CI={resolve:function(){for(var A="",I=!1,g=arguments.length-1;g>=-1&&!I;g--){var B=g>=0?arguments[g]:iI.cwd();if("string"!=typeof B)throw new TypeError("Arguments to path.resolve must be strings");if(!B)return"";A=B+"/"+A,I="/"===B.charAt(0)}return(I?"/":"")+(A=BI.normalizeArray(A.split("/").filter((function(A){return!!A})),!I).join("/"))||"."},relative:function(A,I){function g(A){for(var I=0;I<A.length&&""===A[I];I++);for(var g=A.length-1;g>=0&&""===A[g];g--);return I>g?[]:A.slice(I,g-I+1)}A=CI.resolve(A).substr(1),I=CI.resolve(I).substr(1);for(var B=g(A.split("/")),C=g(I.split("/")),Q=Math.min(B.length,C.length),E=Q,i=0;i<Q;i++)if(B[i]!==C[i]){E=i;break}var o=[];for(i=E;i<B.length;i++)o.push("..");return(o=o.concat(C.slice(E))).join("/")}},QI={ttys:[],init:function(){},shutdown:function(){},register:function(A,I){QI.ttys[A]={input:[],output:[],ops:I},iI.registerDevice(A,QI.stream_ops)},stream_ops:{open:function(A){var I=QI.ttys[A.node.rdev];if(!I)throw new iI.ErrnoError(43);A.tty=I,A.seekable=!1},close:function(A){A.tty.ops.flush(A.tty)},flush:function(A){A.tty.ops.flush(A.tty)},read:function(A,I,g,B,C){if(!A.tty||!A.tty.ops.get_char)throw new iI.ErrnoError(60);for(var Q=0,E=0;E<B;E++){var i;try{i=A.tty.ops.get_char(A.tty)}catch(A){throw new iI.ErrnoError(29)}if(void 0===i&&0===Q)throw new iI.ErrnoError(6);if(null==i)break;Q++,I[g+E]=i}return Q&&(A.node.timestamp=Date.now()),Q},write:function(A,I,g,B,C){if(!A.tty||!A.tty.ops.put_char)throw new iI.ErrnoError(60);try{for(var Q=0;Q<B;Q++)A.tty.ops.put_char(A.tty,I[g+Q])}catch(A){throw new iI.ErrnoError(29)}return B&&(A.node.timestamp=Date.now()),Q}},default_tty_ops:{get_char:function(A){if(!A.input.length){var I=null;if(w){var g=Buffer.alloc?Buffer.alloc(256):new Buffer(256),B=0;try{B=s.readSync(process.stdin.fd,g,0,256,null)}catch(A){if(-1==A.toString().indexOf("EOF"))throw A;B=0}I=B>0?g.slice(0,B).toString("utf-8"):null}else"undefined"!=typeof window&&"function"==typeof window.prompt?null!==(I=window.prompt("Input: "))&&(I+="\n"):"function"==typeof readline&&null!==(I=readline())&&(I+="\n");if(!I)return null;A.input=Xg(I,!0)}return A.input.shift()},put_char:function(A,I){null===I||10===I?(t(d(A.output,0)),A.output=[]):0!=I&&A.output.push(I)},flush:function(A){A.output&&A.output.length>0&&(t(d(A.output,0)),A.output=[])}},default_tty1_ops:{put_char:function(A,I){null===I||10===I?(S(d(A.output,0)),A.output=[]):0!=I&&A.output.push(I)},flush:function(A){A.output&&A.output.length>0&&(S(d(A.output,0)),A.output=[])}}},EI={ops_table:null,mount:function(A){return EI.createNode(null,"/",16895,0)},createNode:function(A,I,g,B){if(iI.isBlkdev(g)||iI.isFIFO(g))throw new iI.ErrnoError(63);EI.ops_table||(EI.ops_table={dir:{node:{getattr:EI.node_ops.getattr,setattr:EI.node_ops.setattr,lookup:EI.node_ops.lookup,mknod:EI.node_ops.mknod,rename:EI.node_ops.rename,unlink:EI.node_ops.unlink,rmdir:EI.node_ops.rmdir,readdir:EI.node_ops.readdir,symlink:EI.node_ops.symlink},stream:{llseek:EI.stream_ops.llseek}},file:{node:{getattr:EI.node_ops.getattr,setattr:EI.node_ops.setattr},stream:{llseek:EI.stream_ops.llseek,read:EI.stream_ops.read,write:EI.stream_ops.write,allocate:EI.stream_ops.allocate,mmap:EI.stream_ops.mmap,msync:EI.stream_ops.msync}},link:{node:{getattr:EI.node_ops.getattr,setattr:EI.node_ops.setattr,readlink:EI.node_ops.readlink},stream:{}},chrdev:{node:{getattr:EI.node_ops.getattr,setattr:EI.node_ops.setattr},stream:iI.chrdev_stream_ops}});var C=iI.createNode(A,I,g,B);return iI.isDir(C.mode)?(C.node_ops=EI.ops_table.dir.node,C.stream_ops=EI.ops_table.dir.stream,C.contents={}):iI.isFile(C.mode)?(C.node_ops=EI.ops_table.file.node,C.stream_ops=EI.ops_table.file.stream,C.usedBytes=0,C.contents=null):iI.isLink(C.mode)?(C.node_ops=EI.ops_table.link.node,C.stream_ops=EI.ops_table.link.stream):iI.isChrdev(C.mode)&&(C.node_ops=EI.ops_table.chrdev.node,C.stream_ops=EI.ops_table.chrdev.stream),C.timestamp=Date.now(),A&&(A.contents[I]=C),C},getFileDataAsRegularArray:function(A){if(A.contents&&A.contents.subarray){for(var I=[],g=0;g<A.usedBytes;++g)I.push(A.contents[g]);return I}return A.contents},getFileDataAsTypedArray:function(A){return A.contents?A.contents.subarray?A.contents.subarray(0,A.usedBytes):new Uint8Array(A.contents):new Uint8Array},expandFileStorage:function(A,I){var g=A.contents?A.contents.length:0;if(!(g>=I)){I=Math.max(I,g*(g<1048576?2:1.125)|0),0!=g&&(I=Math.max(I,256));var B=A.contents;A.contents=new Uint8Array(I),A.usedBytes>0&&A.contents.set(B.subarray(0,A.usedBytes),0)}},resizeFileStorage:function(A,I){if(A.usedBytes!=I){if(0==I)return A.contents=null,void(A.usedBytes=0);if(!A.contents||A.contents.subarray){var g=A.contents;return A.contents=new Uint8Array(I),g&&A.contents.set(g.subarray(0,Math.min(I,A.usedBytes))),void(A.usedBytes=I)}if(A.contents||(A.contents=[]),A.contents.length>I)A.contents.length=I;else for(;A.contents.length<I;)A.contents.push(0);A.usedBytes=I}},node_ops:{getattr:function(A){var I={};return I.dev=iI.isChrdev(A.mode)?A.id:1,I.ino=A.id,I.mode=A.mode,I.nlink=1,I.uid=0,I.gid=0,I.rdev=A.rdev,iI.isDir(A.mode)?I.size=4096:iI.isFile(A.mode)?I.size=A.usedBytes:iI.isLink(A.mode)?I.size=A.link.length:I.size=0,I.atime=new Date(A.timestamp),I.mtime=new Date(A.timestamp),I.ctime=new Date(A.timestamp),I.blksize=4096,I.blocks=Math.ceil(I.size/I.blksize),I},setattr:function(A,I){void 0!==I.mode&&(A.mode=I.mode),void 0!==I.timestamp&&(A.timestamp=I.timestamp),void 0!==I.size&&EI.resizeFileStorage(A,I.size)},lookup:function(A,I){throw iI.genericErrors[44]},mknod:function(A,I,g,B){return EI.createNode(A,I,g,B)},rename:function(A,I,g){if(iI.isDir(A.mode)){var B;try{B=iI.lookupNode(I,g)}catch(A){}if(B)for(var C in B.contents)throw new iI.ErrnoError(55)}delete A.parent.contents[A.name],A.name=g,I.contents[g]=A,A.parent=I},unlink:function(A,I){delete A.contents[I]},rmdir:function(A,I){var g=iI.lookupNode(A,I);for(var B in g.contents)throw new iI.ErrnoError(55);delete A.contents[I]},readdir:function(A){var I=[".",".."];for(var g in A.contents)A.contents.hasOwnProperty(g)&&I.push(g);return I},symlink:function(A,I,g){var B=EI.createNode(A,I,41471,0);return B.link=g,B},readlink:function(A){if(!iI.isLink(A.mode))throw new iI.ErrnoError(28);return A.link}},stream_ops:{read:function(A,I,g,B,C){var Q=A.node.contents;if(C>=A.node.usedBytes)return 0;var E=Math.min(A.node.usedBytes-C,B);if(E>8&&Q.subarray)I.set(Q.subarray(C,C+E),g);else for(var i=0;i<E;i++)I[g+i]=Q[C+i];return E},write:function(A,I,g,B,C,Q){if(!B)return 0;var E=A.node;if(E.timestamp=Date.now(),I.subarray&&(!E.contents||E.contents.subarray)){if(Q)return E.contents=I.subarray(g,g+B),E.usedBytes=B,B;if(0===E.usedBytes&&0===C)return E.contents=I.slice(g,g+B),E.usedBytes=B,B;if(C+B<=E.usedBytes)return E.contents.set(I.subarray(g,g+B),C),B}if(EI.expandFileStorage(E,C+B),E.contents.subarray&&I.subarray)E.contents.set(I.subarray(g,g+B),C);else for(var i=0;i<B;i++)E.contents[C+i]=I[g+i];return E.usedBytes=Math.max(E.usedBytes,C+B),B},llseek:function(A,I,g){var B=I;if(1===g?B+=A.position:2===g&&iI.isFile(A.node.mode)&&(B+=A.node.usedBytes),B<0)throw new iI.ErrnoError(28);return B},allocate:function(A,I,g){EI.expandFileStorage(A.node,I+g),A.node.usedBytes=Math.max(A.node.usedBytes,I+g)},mmap:function(A,I,g,B,C,Q,E){if(!iI.isFile(A.node.mode))throw new iI.ErrnoError(43);var i,o,D=A.node.contents;if(2&E||D.buffer!==I.buffer){(C>0||C+B<A.node.usedBytes)&&(D=D.subarray?D.subarray(C,C+B):Array.prototype.slice.call(D,C,C+B)),o=!0;var a=I.buffer==v.buffer;if(!(i=RB(B)))throw new iI.ErrnoError(48);(a?v:I).set(D,i)}else o=!1,i=D.byteOffset;return{ptr:i,allocated:o}},msync:function(A,I,g,B,C){if(!iI.isFile(A.node.mode))throw new iI.ErrnoError(43);return 2&C||EI.stream_ops.write(A,I,0,B,g,!1),0}}},iI={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:!1,ignorePermissions:!0,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(A){if(!(A instanceof iI.ErrnoError))throw A+" : "+TA();return II(A.errno)},lookupPath:function(A,I){if(I=I||{},!(A=CI.resolve(iI.cwd(),A)))return{path:"",node:null};var g={follow_mount:!0,recurse_count:0};for(var B in g)void 0===I[B]&&(I[B]=g[B]);if(I.recurse_count>8)throw new iI.ErrnoError(32);for(var C=BI.normalizeArray(A.split("/").filter((function(A){return!!A})),!1),Q=iI.root,E="/",i=0;i<C.length;i++){var o=i===C.length-1;if(o&&I.parent)break;if(Q=iI.lookupNode(Q,C[i]),E=BI.join2(E,C[i]),iI.isMountpoint(Q)&&(!o||o&&I.follow_mount)&&(Q=Q.mounted.root),!o||I.follow)for(var D=0;iI.isLink(Q.mode);){var a=iI.readlink(E);if(E=CI.resolve(BI.dirname(E),a),Q=iI.lookupPath(E,{recurse_count:I.recurse_count}).node,D++>40)throw new iI.ErrnoError(32)}}return{path:E,node:Q}},getPath:function(A){for(var I;;){if(iI.isRoot(A)){var g=A.mount.mountpoint;return I?"/"!==g[g.length-1]?g+"/"+I:g+I:g}I=I?A.name+"/"+I:A.name,A=A.parent}},hashName:function(A,I){for(var g=0,B=0;B<I.length;B++)g=(g<<5)-g+I.charCodeAt(B)|0;return(A+g>>>0)%iI.nameTable.length},hashAddNode:function(A){var I=iI.hashName(A.parent.id,A.name);A.name_next=iI.nameTable[I],iI.nameTable[I]=A},hashRemoveNode:function(A){var I=iI.hashName(A.parent.id,A.name);if(iI.nameTable[I]===A)iI.nameTable[I]=A.name_next;else for(var g=iI.nameTable[I];g;){if(g.name_next===A){g.name_next=A.name_next;break}g=g.name_next}},lookupNode:function(A,I){var g=iI.mayLookup(A);if(g)throw new iI.ErrnoError(g,A);for(var B=iI.hashName(A.id,I),C=iI.nameTable[B];C;C=C.name_next){var Q=C.name;if(C.parent.id===A.id&&Q===I)return C}return iI.lookup(A,I)},createNode:function(A,I,g,B){if(!iI.FSNode){iI.FSNode=function(A,I,g,B){A||(A=this),this.parent=A,this.mount=A.mount,this.mounted=null,this.id=iI.nextInode++,this.name=I,this.mode=g,this.node_ops={},this.stream_ops={},this.rdev=B},iI.FSNode.prototype={};Object.defineProperties(iI.FSNode.prototype,{read:{get:function(){return 365==(365&this.mode)},set:function(A){A?this.mode|=365:this.mode&=-366}},write:{get:function(){return 146==(146&this.mode)},set:function(A){A?this.mode|=146:this.mode&=-147}},isFolder:{get:function(){return iI.isDir(this.mode)}},isDevice:{get:function(){return iI.isChrdev(this.mode)}}})}var C=new iI.FSNode(A,I,g,B);return iI.hashAddNode(C),C},destroyNode:function(A){iI.hashRemoveNode(A)},isRoot:function(A){return A===A.parent},isMountpoint:function(A){return!!A.mounted},isFile:function(A){return 32768==(61440&A)},isDir:function(A){return 16384==(61440&A)},isLink:function(A){return 40960==(61440&A)},isChrdev:function(A){return 8192==(61440&A)},isBlkdev:function(A){return 24576==(61440&A)},isFIFO:function(A){return 4096==(61440&A)},isSocket:function(A){return 49152==(49152&A)},flagModes:{r:0,rs:1052672,"r+":2,w:577,wx:705,xw:705,"w+":578,"wx+":706,"xw+":706,a:1089,ax:1217,xa:1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(A){var I=iI.flagModes[A];if(void 0===I)throw new Error("Unknown file open mode: "+A);return I},flagsToPermissionString:function(A){var I=["r","w","rw"][3&A];return 512&A&&(I+="w"),I},nodePermissions:function(A,I){return iI.ignorePermissions||(-1===I.indexOf("r")||292&A.mode)&&(-1===I.indexOf("w")||146&A.mode)&&(-1===I.indexOf("x")||73&A.mode)?0:2},mayLookup:function(A){return iI.nodePermissions(A,"x")||(A.node_ops.lookup?0:2)},mayCreate:function(A,I){try{return iI.lookupNode(A,I),20}catch(A){}return iI.nodePermissions(A,"wx")},mayDelete:function(A,I,g){var B;try{B=iI.lookupNode(A,I)}catch(A){return A.errno}var C=iI.nodePermissions(A,"wx");if(C)return C;if(g){if(!iI.isDir(B.mode))return 54;if(iI.isRoot(B)||iI.getPath(B)===iI.cwd())return 10}else if(iI.isDir(B.mode))return 31;return 0},mayOpen:function(A,I){return A?iI.isLink(A.mode)?32:iI.isDir(A.mode)&&("r"!==iI.flagsToPermissionString(I)||512&I)?31:iI.nodePermissions(A,iI.flagsToPermissionString(I)):44},MAX_OPEN_FDS:4096,nextfd:function(A,I){A=A||0,I=I||iI.MAX_OPEN_FDS;for(var g=A;g<=I;g++)if(!iI.streams[g])return g;throw new iI.ErrnoError(33)},getStream:function(A){return iI.streams[A]},createStream:function(A,I,g){iI.FSStream||(iI.FSStream=function(){},iI.FSStream.prototype={},Object.defineProperties(iI.FSStream.prototype,{object:{get:function(){return this.node},set:function(A){this.node=A}},isRead:{get:function(){return 1!=(2097155&this.flags)}},isWrite:{get:function(){return 0!=(2097155&this.flags)}},isAppend:{get:function(){return 1024&this.flags}}}));var B=new iI.FSStream;for(var C in A)B[C]=A[C];A=B;var Q=iI.nextfd(I,g);return A.fd=Q,iI.streams[Q]=A,A},closeStream:function(A){iI.streams[A]=null},chrdev_stream_ops:{open:function(A){var I=iI.getDevice(A.node.rdev);A.stream_ops=I.stream_ops,A.stream_ops.open&&A.stream_ops.open(A)},llseek:function(){throw new iI.ErrnoError(70)}},major:function(A){return A>>8},minor:function(A){return 255&A},makedev:function(A,I){return A<<8|I},registerDevice:function(A,I){iI.devices[A]={stream_ops:I}},getDevice:function(A){return iI.devices[A]},getMounts:function(A){for(var I=[],g=[A];g.length;){var B=g.pop();I.push(B),g.push.apply(g,B.mounts)}return I},syncfs:function(A,I){"function"==typeof A&&(I=A,A=!1),iI.syncFSRequests++,iI.syncFSRequests>1&&S("warning: "+iI.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work");var g=iI.getMounts(iI.root.mount),B=0;function C(A){return iI.syncFSRequests--,I(A)}function Q(A){if(A)return Q.errored?void 0:(Q.errored=!0,C(A));++B>=g.length&&C(null)}g.forEach((function(I){if(!I.type.syncfs)return Q(null);I.type.syncfs(I,A,Q)}))},mount:function(A,I,g){var B,C="/"===g,Q=!g;if(C&&iI.root)throw new iI.ErrnoError(10);if(!C&&!Q){var E=iI.lookupPath(g,{follow_mount:!1});if(g=E.path,B=E.node,iI.isMountpoint(B))throw new iI.ErrnoError(10);if(!iI.isDir(B.mode))throw new iI.ErrnoError(54)}var i={type:A,opts:I,mountpoint:g,mounts:[]},o=A.mount(i);return o.mount=i,i.root=o,C?iI.root=o:B&&(B.mounted=i,B.mount&&B.mount.mounts.push(i)),o},unmount:function(A){var I=iI.lookupPath(A,{follow_mount:!1});if(!iI.isMountpoint(I.node))throw new iI.ErrnoError(28);var g=I.node,B=g.mounted,C=iI.getMounts(B);Object.keys(iI.nameTable).forEach((function(A){for(var I=iI.nameTable[A];I;){var g=I.name_next;-1!==C.indexOf(I.mount)&&iI.destroyNode(I),I=g}})),g.mounted=null;var Q=g.mount.mounts.indexOf(B);g.mount.mounts.splice(Q,1)},lookup:function(A,I){return A.node_ops.lookup(A,I)},mknod:function(A,I,g){var B=iI.lookupPath(A,{parent:!0}).node,C=BI.basename(A);if(!C||"."===C||".."===C)throw new iI.ErrnoError(28);var Q=iI.mayCreate(B,C);if(Q)throw new iI.ErrnoError(Q);if(!B.node_ops.mknod)throw new iI.ErrnoError(63);return B.node_ops.mknod(B,C,I,g)},create:function(A,I){return I=void 0!==I?I:438,I&=4095,I|=32768,iI.mknod(A,I,0)},mkdir:function(A,I){return I=void 0!==I?I:511,I&=1023,I|=16384,iI.mknod(A,I,0)},mkdirTree:function(A,I){for(var g=A.split("/"),B="",C=0;C<g.length;++C)if(g[C]){B+="/"+g[C];try{iI.mkdir(B,I)}catch(A){if(20!=A.errno)throw A}}},mkdev:function(A,I,g){return void 0===g&&(g=I,I=438),I|=8192,iI.mknod(A,I,g)},symlink:function(A,I){if(!CI.resolve(A))throw new iI.ErrnoError(44);var g=iI.lookupPath(I,{parent:!0}).node;if(!g)throw new iI.ErrnoError(44);var B=BI.basename(I),C=iI.mayCreate(g,B);if(C)throw new iI.ErrnoError(C);if(!g.node_ops.symlink)throw new iI.ErrnoError(63);return g.node_ops.symlink(g,B,A)},rename:function(A,I){var g,B,C=BI.dirname(A),Q=BI.dirname(I),E=BI.basename(A),i=BI.basename(I);try{g=iI.lookupPath(A,{parent:!0}).node,B=iI.lookupPath(I,{parent:!0}).node}catch(A){throw new iI.ErrnoError(10)}if(!g||!B)throw new iI.ErrnoError(44);if(g.mount!==B.mount)throw new iI.ErrnoError(75);var o,D=iI.lookupNode(g,E),a=CI.relative(A,Q);if("."!==a.charAt(0))throw new iI.ErrnoError(28);if("."!==(a=CI.relative(I,C)).charAt(0))throw new iI.ErrnoError(55);try{o=iI.lookupNode(B,i)}catch(A){}if(D!==o){var w=iI.isDir(D.mode),F=iI.mayDelete(g,E,w);if(F)throw new iI.ErrnoError(F);if(F=o?iI.mayDelete(B,i,w):iI.mayCreate(B,i))throw new iI.ErrnoError(F);if(!g.node_ops.rename)throw new iI.ErrnoError(63);if(iI.isMountpoint(D)||o&&iI.isMountpoint(o))throw new iI.ErrnoError(10);if(B!==g&&(F=iI.nodePermissions(g,"w")))throw new iI.ErrnoError(F);try{iI.trackingDelegate.willMovePath&&iI.trackingDelegate.willMovePath(A,I)}catch(g){S("FS.trackingDelegate['willMovePath']('"+A+"', '"+I+"') threw an exception: "+g.message)}iI.hashRemoveNode(D);try{g.node_ops.rename(D,B,i)}catch(A){throw A}finally{iI.hashAddNode(D)}try{iI.trackingDelegate.onMovePath&&iI.trackingDelegate.onMovePath(A,I)}catch(g){S("FS.trackingDelegate['onMovePath']('"+A+"', '"+I+"') threw an exception: "+g.message)}}},rmdir:function(A){var I=iI.lookupPath(A,{parent:!0}).node,g=BI.basename(A),B=iI.lookupNode(I,g),C=iI.mayDelete(I,g,!0);if(C)throw new iI.ErrnoError(C);if(!I.node_ops.rmdir)throw new iI.ErrnoError(63);if(iI.isMountpoint(B))throw new iI.ErrnoError(10);try{iI.trackingDelegate.willDeletePath&&iI.trackingDelegate.willDeletePath(A)}catch(I){S("FS.trackingDelegate['willDeletePath']('"+A+"') threw an exception: "+I.message)}I.node_ops.rmdir(I,g),iI.destroyNode(B);try{iI.trackingDelegate.onDeletePath&&iI.trackingDelegate.onDeletePath(A)}catch(I){S("FS.trackingDelegate['onDeletePath']('"+A+"') threw an exception: "+I.message)}},readdir:function(A){var I=iI.lookupPath(A,{follow:!0}).node;if(!I.node_ops.readdir)throw new iI.ErrnoError(54);return I.node_ops.readdir(I)},unlink:function(A){var I=iI.lookupPath(A,{parent:!0}).node,g=BI.basename(A),B=iI.lookupNode(I,g),C=iI.mayDelete(I,g,!1);if(C)throw new iI.ErrnoError(C);if(!I.node_ops.unlink)throw new iI.ErrnoError(63);if(iI.isMountpoint(B))throw new iI.ErrnoError(10);try{iI.trackingDelegate.willDeletePath&&iI.trackingDelegate.willDeletePath(A)}catch(I){S("FS.trackingDelegate['willDeletePath']('"+A+"') threw an exception: "+I.message)}I.node_ops.unlink(I,g),iI.destroyNode(B);try{iI.trackingDelegate.onDeletePath&&iI.trackingDelegate.onDeletePath(A)}catch(I){S("FS.trackingDelegate['onDeletePath']('"+A+"') threw an exception: "+I.message)}},readlink:function(A){var I=iI.lookupPath(A).node;if(!I)throw new iI.ErrnoError(44);if(!I.node_ops.readlink)throw new iI.ErrnoError(28);return CI.resolve(iI.getPath(I.parent),I.node_ops.readlink(I))},stat:function(A,I){var g=iI.lookupPath(A,{follow:!I}).node;if(!g)throw new iI.ErrnoError(44);if(!g.node_ops.getattr)throw new iI.ErrnoError(63);return g.node_ops.getattr(g)},lstat:function(A){return iI.stat(A,!0)},chmod:function(A,I,g){var B;if(!(B="string"==typeof A?iI.lookupPath(A,{follow:!g}).node:A).node_ops.setattr)throw new iI.ErrnoError(63);B.node_ops.setattr(B,{mode:4095&I|-4096&B.mode,timestamp:Date.now()})},lchmod:function(A,I){iI.chmod(A,I,!0)},fchmod:function(A,I){var g=iI.getStream(A);if(!g)throw new iI.ErrnoError(8);iI.chmod(g.node,I)},chown:function(A,I,g,B){var C;if(!(C="string"==typeof A?iI.lookupPath(A,{follow:!B}).node:A).node_ops.setattr)throw new iI.ErrnoError(63);C.node_ops.setattr(C,{timestamp:Date.now()})},lchown:function(A,I,g){iI.chown(A,I,g,!0)},fchown:function(A,I,g){var B=iI.getStream(A);if(!B)throw new iI.ErrnoError(8);iI.chown(B.node,I,g)},truncate:function(A,I){if(I<0)throw new iI.ErrnoError(28);var g;if(!(g="string"==typeof A?iI.lookupPath(A,{follow:!0}).node:A).node_ops.setattr)throw new iI.ErrnoError(63);if(iI.isDir(g.mode))throw new iI.ErrnoError(31);if(!iI.isFile(g.mode))throw new iI.ErrnoError(28);var B=iI.nodePermissions(g,"w");if(B)throw new iI.ErrnoError(B);g.node_ops.setattr(g,{size:I,timestamp:Date.now()})},ftruncate:function(A,I){var g=iI.getStream(A);if(!g)throw new iI.ErrnoError(8);if(0==(2097155&g.flags))throw new iI.ErrnoError(28);iI.truncate(g.node,I)},utime:function(A,I,g){var B=iI.lookupPath(A,{follow:!0}).node;B.node_ops.setattr(B,{timestamp:Math.max(I,g)})},open:function(I,g,B,C,Q){if(""===I)throw new iI.ErrnoError(44);var E;if(B=void 0===B?438:B,B=64&(g="string"==typeof g?iI.modeStringToFlags(g):g)?4095&B|32768:0,"object"===D(I))E=I;else{I=BI.normalize(I);try{E=iI.lookupPath(I,{follow:!(131072&g)}).node}catch(A){}}var i=!1;if(64&g)if(E){if(128&g)throw new iI.ErrnoError(20)}else E=iI.mknod(I,B,0),i=!0;if(!E)throw new iI.ErrnoError(44);if(iI.isChrdev(E.mode)&&(g&=-513),65536&g&&!iI.isDir(E.mode))throw new iI.ErrnoError(54);if(!i){var o=iI.mayOpen(E,g);if(o)throw new iI.ErrnoError(o)}512&g&&iI.truncate(E,0),g&=-641;var a=iI.createStream({node:E,path:iI.getPath(E),flags:g,seekable:!0,position:0,stream_ops:E.stream_ops,ungotten:[],error:!1},C,Q);a.stream_ops.open&&a.stream_ops.open(a),!A.logReadFiles||1&g||(iI.readFiles||(iI.readFiles={}),I in iI.readFiles||(iI.readFiles[I]=1,S("FS.trackingDelegate error on read file: "+I)));try{if(iI.trackingDelegate.onOpenFile){var w=0;1!=(2097155&g)&&(w|=iI.tracking.openFlags.READ),0!=(2097155&g)&&(w|=iI.tracking.openFlags.WRITE),iI.trackingDelegate.onOpenFile(I,w)}}catch(A){S("FS.trackingDelegate['onOpenFile']('"+I+"', flags) threw an exception: "+A.message)}return a},close:function(A){if(iI.isClosed(A))throw new iI.ErrnoError(8);A.getdents&&(A.getdents=null);try{A.stream_ops.close&&A.stream_ops.close(A)}catch(A){throw A}finally{iI.closeStream(A.fd)}A.fd=null},isClosed:function(A){return null===A.fd},llseek:function(A,I,g){if(iI.isClosed(A))throw new iI.ErrnoError(8);if(!A.seekable||!A.stream_ops.llseek)throw new iI.ErrnoError(70);if(0!=g&&1!=g&&2!=g)throw new iI.ErrnoError(28);return A.position=A.stream_ops.llseek(A,I,g),A.ungotten=[],A.position},read:function(A,I,g,B,C){if(B<0||C<0)throw new iI.ErrnoError(28);if(iI.isClosed(A))throw new iI.ErrnoError(8);if(1==(2097155&A.flags))throw new iI.ErrnoError(8);if(iI.isDir(A.node.mode))throw new iI.ErrnoError(31);if(!A.stream_ops.read)throw new iI.ErrnoError(28);var Q=void 0!==C;if(Q){if(!A.seekable)throw new iI.ErrnoError(70)}else C=A.position;var E=A.stream_ops.read(A,I,g,B,C);return Q||(A.position+=E),E},write:function(A,I,g,B,C,Q){if(B<0||C<0)throw new iI.ErrnoError(28);if(iI.isClosed(A))throw new iI.ErrnoError(8);if(0==(2097155&A.flags))throw new iI.ErrnoError(8);if(iI.isDir(A.node.mode))throw new iI.ErrnoError(31);if(!A.stream_ops.write)throw new iI.ErrnoError(28);1024&A.flags&&iI.llseek(A,0,2);var E=void 0!==C;if(E){if(!A.seekable)throw new iI.ErrnoError(70)}else C=A.position;var i=A.stream_ops.write(A,I,g,B,C,Q);E||(A.position+=i);try{A.path&&iI.trackingDelegate.onWriteToFile&&iI.trackingDelegate.onWriteToFile(A.path)}catch(I){S("FS.trackingDelegate['onWriteToFile']('"+A.path+"') threw an exception: "+I.message)}return i},allocate:function(A,I,g){if(iI.isClosed(A))throw new iI.ErrnoError(8);if(I<0||g<=0)throw new iI.ErrnoError(28);if(0==(2097155&A.flags))throw new iI.ErrnoError(8);if(!iI.isFile(A.node.mode)&&!iI.isDir(A.node.mode))throw new iI.ErrnoError(43);if(!A.stream_ops.allocate)throw new iI.ErrnoError(138);A.stream_ops.allocate(A,I,g)},mmap:function(A,I,g,B,C,Q,E){if(0!=(2&Q)&&0==(2&E)&&2!=(2097155&A.flags))throw new iI.ErrnoError(2);if(1==(2097155&A.flags))throw new iI.ErrnoError(2);if(!A.stream_ops.mmap)throw new iI.ErrnoError(43);return A.stream_ops.mmap(A,I,g,B,C,Q,E)},msync:function(A,I,g,B,C){return A&&A.stream_ops.msync?A.stream_ops.msync(A,I,g,B,C):0},munmap:function(A){return 0},ioctl:function(A,I,g){if(!A.stream_ops.ioctl)throw new iI.ErrnoError(59);return A.stream_ops.ioctl(A,I,g)},readFile:function(A,I){if((I=I||{}).flags=I.flags||"r",I.encoding=I.encoding||"binary","utf8"!==I.encoding&&"binary"!==I.encoding)throw new Error('Invalid encoding type "'+I.encoding+'"');var g,B=iI.open(A,I.flags),C=iI.stat(A).size,Q=new Uint8Array(C);return iI.read(B,Q,0,C,0),"utf8"===I.encoding?g=d(Q,0):"binary"===I.encoding&&(g=Q),iI.close(B),g},writeFile:function(A,I,g){(g=g||{}).flags=g.flags||"w";var B=iI.open(A,g.flags,g.mode);if("string"==typeof I){var C=new Uint8Array(W(I)+1),Q=l(I,C,0,C.length);iI.write(B,C,0,Q,void 0,g.canOwn)}else{if(!ArrayBuffer.isView(I))throw new Error("Unsupported data type");iI.write(B,I,0,I.byteLength,void 0,g.canOwn)}iI.close(B)},cwd:function(){return iI.currentPath},chdir:function(A){var I=iI.lookupPath(A,{follow:!0});if(null===I.node)throw new iI.ErrnoError(44);if(!iI.isDir(I.node.mode))throw new iI.ErrnoError(54);var g=iI.nodePermissions(I.node,"x");if(g)throw new iI.ErrnoError(g);iI.currentPath=I.path},createDefaultDirectories:function(){iI.mkdir("/tmp"),iI.mkdir("/home"),iI.mkdir("/home/web_user")},createDefaultDevices:function(){var A;if(iI.mkdir("/dev"),iI.registerDevice(iI.makedev(1,3),{read:function(){return 0},write:function(A,I,g,B,C){return B}}),iI.mkdev("/dev/null",iI.makedev(1,3)),QI.register(iI.makedev(5,0),QI.default_tty_ops),QI.register(iI.makedev(6,0),QI.default_tty1_ops),iI.mkdev("/dev/tty",iI.makedev(5,0)),iI.mkdev("/dev/tty1",iI.makedev(6,0)),"object"===("undefined"==typeof crypto?"undefined":D(crypto))&&"function"==typeof crypto.getRandomValues){var I=new Uint8Array(1);A=function(){return crypto.getRandomValues(I),I[0]}}else if(w)try{var B=g(654);A=function(){return B.randomBytes(1)[0]}}catch(A){}A||(A=function(){JA("random_device")}),iI.createDevice("/dev","random",A),iI.createDevice("/dev","urandom",A),iI.mkdir("/dev/shm"),iI.mkdir("/dev/shm/tmp")},createSpecialDirectories:function(){iI.mkdir("/proc"),iI.mkdir("/proc/self"),iI.mkdir("/proc/self/fd"),iI.mount({mount:function(){var A=iI.createNode("/proc/self","fd",16895,73);return A.node_ops={lookup:function(A,I){var g=+I,B=iI.getStream(g);if(!B)throw new iI.ErrnoError(8);var C={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:function(){return B.path}}};return C.parent=C,C}},A}},{},"/proc/self/fd")},createStandardStreams:function(){A.stdin?iI.createDevice("/dev","stdin",A.stdin):iI.symlink("/dev/tty","/dev/stdin"),A.stdout?iI.createDevice("/dev","stdout",null,A.stdout):iI.symlink("/dev/tty","/dev/stdout"),A.stderr?iI.createDevice("/dev","stderr",null,A.stderr):iI.symlink("/dev/tty1","/dev/stderr"),iI.open("/dev/stdin","r"),iI.open("/dev/stdout","w"),iI.open("/dev/stderr","w")},ensureErrnoError:function(){iI.ErrnoError||(iI.ErrnoError=function(A,I){this.node=I,this.setErrno=function(A){this.errno=A},this.setErrno(A),this.message="FS error"},iI.ErrnoError.prototype=new Error,iI.ErrnoError.prototype.constructor=iI.ErrnoError,[44].forEach((function(A){iI.genericErrors[A]=new iI.ErrnoError(A),iI.genericErrors[A].stack="<generic error, no stack>"})))},staticInit:function(){iI.ensureErrnoError(),iI.nameTable=new Array(4096),iI.mount(EI,{},"/"),iI.createDefaultDirectories(),iI.createDefaultDevices(),iI.createSpecialDirectories(),iI.filesystems={MEMFS:EI}},init:function(I,g,B){iI.init.initialized=!0,iI.ensureErrnoError(),A.stdin=I||A.stdin,A.stdout=g||A.stdout,A.stderr=B||A.stderr,iI.createStandardStreams()},quit:function(){iI.init.initialized=!1;var I=A._fflush;I&&I(0);for(var g=0;g<iI.streams.length;g++){var B=iI.streams[g];B&&iI.close(B)}},getMode:function(A,I){var g=0;return A&&(g|=365),I&&(g|=146),g},joinPath:function(A,I){var g=BI.join.apply(null,A);return I&&"/"==g[0]&&(g=g.substr(1)),g},absolutePath:function(A,I){return CI.resolve(I,A)},standardizePath:function(A){return BI.normalize(A)},findObject:function(A,I){var g=iI.analyzePath(A,I);return g.exists?g.object:(II(g.error),null)},analyzePath:function(A,I){try{A=(B=iI.lookupPath(A,{follow:!I})).path}catch(A){}var g={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};try{var B=iI.lookupPath(A,{parent:!0});g.parentExists=!0,g.parentPath=B.path,g.parentObject=B.node,g.name=BI.basename(A),B=iI.lookupPath(A,{follow:!I}),g.exists=!0,g.path=B.path,g.object=B.node,g.name=B.node.name,g.isRoot="/"===B.path}catch(A){g.error=A.errno}return g},createFolder:function(A,I,g,B){var C=BI.join2("string"==typeof A?A:iI.getPath(A),I),Q=iI.getMode(g,B);return iI.mkdir(C,Q)},createPath:function(A,I,g,B){A="string"==typeof A?A:iI.getPath(A);for(var C=I.split("/").reverse();C.length;){var Q=C.pop();if(Q){var E=BI.join2(A,Q);try{iI.mkdir(E)}catch(A){}A=E}}return E},createFile:function(A,I,g,B,C){var Q=BI.join2("string"==typeof A?A:iI.getPath(A),I),E=iI.getMode(B,C);return iI.create(Q,E)},createDataFile:function(A,I,g,B,C,Q){var E=I?BI.join2("string"==typeof A?A:iI.getPath(A),I):A,i=iI.getMode(B,C),o=iI.create(E,i);if(g){if("string"==typeof g){for(var D=new Array(g.length),a=0,w=g.length;a<w;++a)D[a]=g.charCodeAt(a);g=D}iI.chmod(o,146|i);var F=iI.open(o,"w");iI.write(F,g,0,g.length,0,Q),iI.close(F),iI.chmod(o,i)}return o},createDevice:function(A,I,g,B){var C=BI.join2("string"==typeof A?A:iI.getPath(A),I),Q=iI.getMode(!!g,!!B);iI.createDevice.major||(iI.createDevice.major=64);var E=iI.makedev(iI.createDevice.major++,0);return iI.registerDevice(E,{open:function(A){A.seekable=!1},close:function(A){B&&B.buffer&&B.buffer.length&&B(10)},read:function(A,I,B,C,Q){for(var E=0,i=0;i<C;i++){var o;try{o=g()}catch(A){throw new iI.ErrnoError(29)}if(void 0===o&&0===E)throw new iI.ErrnoError(6);if(null==o)break;E++,I[B+i]=o}return E&&(A.node.timestamp=Date.now()),E},write:function(A,I,g,C,Q){for(var E=0;E<C;E++)try{B(I[g+E])}catch(A){throw new iI.ErrnoError(29)}return C&&(A.node.timestamp=Date.now()),E}}),iI.mkdev(C,Q,E)},createLink:function(A,I,g,B,C){var Q=BI.join2("string"==typeof A?A:iI.getPath(A),I);return iI.symlink(g,Q)},forceLoadFile:function(A){if(A.isDevice||A.isFolder||A.link||A.contents)return!0;var I=!0;if("undefined"!=typeof XMLHttpRequest)throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");if(!G)throw new Error("Cannot load without read() or XMLHttpRequest.");try{A.contents=Xg(G(A.url),!0),A.usedBytes=A.contents.length}catch(A){I=!1}return I||II(29),I},createLazyFile:function(A,I,g,B,C){function Q(){this.lengthKnown=!1,this.chunks=[]}if(Q.prototype.get=function(A){if(!(A>this.length-1||A<0)){var I=A%this.chunkSize,g=A/this.chunkSize|0;return this.getter(g)[I]}},Q.prototype.setDataGetter=function(A){this.getter=A},Q.prototype.cacheLength=function(){var A=new XMLHttpRequest;if(A.open("HEAD",g,!1),A.send(null),!(A.status>=200&&A.status<300||304===A.status))throw new Error("Couldn't load "+g+". Status: "+A.status);var I,B=Number(A.getResponseHeader("Content-length")),C=(I=A.getResponseHeader("Accept-Ranges"))&&"bytes"===I,Q=(I=A.getResponseHeader("Content-Encoding"))&&"gzip"===I,E=1048576;C||(E=B);var i=this;i.setDataGetter((function(A){var I=A*E,C=(A+1)*E-1;if(C=Math.min(C,B-1),void 0===i.chunks[A]&&(i.chunks[A]=function(A,I){if(A>I)throw new Error("invalid range ("+A+", "+I+") or no bytes requested!");if(I>B-1)throw new Error("only "+B+" bytes available! programmer error!");var C=new XMLHttpRequest;if(C.open("GET",g,!1),B!==E&&C.setRequestHeader("Range","bytes="+A+"-"+I),"undefined"!=typeof Uint8Array&&(C.responseType="arraybuffer"),C.overrideMimeType&&C.overrideMimeType("text/plain; charset=x-user-defined"),C.send(null),!(C.status>=200&&C.status<300||304===C.status))throw new Error("Couldn't load "+g+". Status: "+C.status);return void 0!==C.response?new Uint8Array(C.response||[]):Xg(C.responseText||"",!0)}(I,C)),void 0===i.chunks[A])throw new Error("doXHR failed!");return i.chunks[A]})),!Q&&B||(E=B=1,B=this.getter(0).length,E=B,t("LazyFiles on gzip forces download of the whole file when length is accessed")),this._length=B,this._chunkSize=E,this.lengthKnown=!0},"undefined"!=typeof XMLHttpRequest){if(!o)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var E=new Q;Object.defineProperties(E,{length:{get:function(){return this.lengthKnown||this.cacheLength(),this._length}},chunkSize:{get:function(){return this.lengthKnown||this.cacheLength(),this._chunkSize}}});var i={isDevice:!1,contents:E}}else i={isDevice:!1,url:g};var D=iI.createFile(A,I,i,B,C);i.contents?D.contents=i.contents:i.url&&(D.contents=null,D.url=i.url),Object.defineProperties(D,{usedBytes:{get:function(){return this.contents.length}}});var a={};return Object.keys(D.stream_ops).forEach((function(A){var I=D.stream_ops[A];a[A]=function(){if(!iI.forceLoadFile(D))throw new iI.ErrnoError(29);return I.apply(null,arguments)}})),a.read=function(A,I,g,B,C){if(!iI.forceLoadFile(D))throw new iI.ErrnoError(29);var Q=A.node.contents;if(C>=Q.length)return 0;var E=Math.min(Q.length-C,B);if(Q.slice)for(var i=0;i<E;i++)I[g+i]=Q[C+i];else for(i=0;i<E;i++)I[g+i]=Q.get(C+i);return E},D.stream_ops=a,D},createPreloadedFile:function(I,g,B,C,Q,E,i,o,D,a){Browser.init();var w=g?CI.resolve(BI.join2(I,g)):I;function F(B){function F(A){a&&a(),o||iI.createDataFile(I,g,A,C,Q,D),E&&E(),eA()}var G=!1;A.preloadPlugins.forEach((function(A){G||A.canHandle(w)&&(A.handle(B,w,F,(function(){i&&i(),eA()})),G=!0)})),G||F(B)}YA(),"string"==typeof B?Browser.asyncLoad(B,(function(A){F(A)}),i):F(B)},indexedDB:function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB},DB_NAME:function(){return"EM_FS_"+window.location.pathname},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(A,I,g){I=I||function(){},g=g||function(){};var B=iI.indexedDB();try{var C=B.open(iI.DB_NAME(),iI.DB_VERSION)}catch(A){return g(A)}C.onupgradeneeded=function(){t("creating db"),C.result.createObjectStore(iI.DB_STORE_NAME)},C.onsuccess=function(){var B=C.result.transaction([iI.DB_STORE_NAME],"readwrite"),Q=B.objectStore(iI.DB_STORE_NAME),E=0,i=0,o=A.length;function D(){0==i?I():g()}A.forEach((function(A){var I=Q.put(iI.analyzePath(A).object.contents,A);I.onsuccess=function(){++E+i==o&&D()},I.onerror=function(){i++,E+i==o&&D()}})),B.onerror=g},C.onerror=g},loadFilesFromDB:function(A,I,g){I=I||function(){},g=g||function(){};var B=iI.indexedDB();try{var C=B.open(iI.DB_NAME(),iI.DB_VERSION)}catch(A){return g(A)}C.onupgradeneeded=g,C.onsuccess=function(){var B=C.result;try{var Q=B.transaction([iI.DB_STORE_NAME],"readonly")}catch(A){return void g(A)}var E=Q.objectStore(iI.DB_STORE_NAME),i=0,o=0,D=A.length;function a(){0==o?I():g()}A.forEach((function(A){var I=E.get(A);I.onsuccess=function(){iI.analyzePath(A).exists&&iI.unlink(A),iI.createDataFile(BI.dirname(A),BI.basename(A),I.result,!0,!0,!0),++i+o==D&&a()},I.onerror=function(){o++,i+o==D&&a()}})),Q.onerror=g},C.onerror=g}},oI={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function(A,I){if("/"!==I[0]){var g;if(-100===A)g=iI.cwd();else{var B=iI.getStream(A);if(!B)throw new iI.ErrnoError(8);g=B.path}I=BI.join2(g,I)}return I},doStat:function(A,I,g){try{var B=A(I)}catch(A){if(A&&A.node&&BI.normalize(I)!==BI.normalize(iI.getPath(A.node)))return-54;throw A}return AA[g>>2]=B.dev,AA[g+4>>2]=0,AA[g+8>>2]=B.ino,AA[g+12>>2]=B.mode,AA[g+16>>2]=B.nlink,AA[g+20>>2]=B.uid,AA[g+24>>2]=B.gid,AA[g+28>>2]=B.rdev,AA[g+32>>2]=0,dA=[B.size>>>0,(qA=B.size,+MA(qA)>=1?qA>0?(0|rA(+cA(qA/4294967296),4294967295))>>>0:~~+nA((qA-+(~~qA>>>0))/4294967296)>>>0:0)],AA[g+40>>2]=dA[0],AA[g+44>>2]=dA[1],AA[g+48>>2]=4096,AA[g+52>>2]=B.blocks,AA[g+56>>2]=B.atime.getTime()/1e3|0,AA[g+60>>2]=0,AA[g+64>>2]=B.mtime.getTime()/1e3|0,AA[g+68>>2]=0,AA[g+72>>2]=B.ctime.getTime()/1e3|0,AA[g+76>>2]=0,dA=[B.ino>>>0,(qA=B.ino,+MA(qA)>=1?qA>0?(0|rA(+cA(qA/4294967296),4294967295))>>>0:~~+nA((qA-+(~~qA>>>0))/4294967296)>>>0:0)],AA[g+80>>2]=dA[0],AA[g+84>>2]=dA[1],0},doMsync:function(A,I,g,B,C){var Q=z.slice(A,A+g);iI.msync(I,Q,C,g,B)},doMkdir:function(A,I){return"/"===(A=BI.normalize(A))[A.length-1]&&(A=A.substr(0,A.length-1)),iI.mkdir(A,I,0),0},doMknod:function(A,I,g){switch(61440&I){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return-28}return iI.mknod(A,I,g),0},doReadlink:function(A,I,g){if(g<=0)return-28;var B=iI.readlink(A),C=Math.min(g,W(B)),Q=v[I+C];return u(B,I,g+1),v[I+C]=Q,C},doAccess:function(A,I){if(-8&I)return-28;var g;if(!(g=iI.lookupPath(A,{follow:!0}).node))return-44;var B="";return 4&I&&(B+="r"),2&I&&(B+="w"),1&I&&(B+="x"),B&&iI.nodePermissions(g,B)?-2:0},doDup:function(A,I,g){var B=iI.getStream(g);return B&&iI.close(B),iI.open(A,I,0,g,g).fd},doReadv:function(A,I,g,B){for(var C=0,Q=0;Q<g;Q++){var E=AA[I+8*Q>>2],i=AA[I+(8*Q+4)>>2],o=iI.read(A,v,E,i,B);if(o<0)return-1;if(C+=o,o<i)break}return C},doWritev:function(A,I,g,B){for(var C=0,Q=0;Q<g;Q++){var E=AA[I+8*Q>>2],i=AA[I+(8*Q+4)>>2],o=iI.write(A,v,E,i,B);if(o<0)return-1;C+=o}return C},varargs:0,get:function(A){return oI.varargs+=4,AA[oI.varargs-4>>2]},getStr:function(){return f(oI.get())},getStreamFromFD:function(A){void 0===A&&(A=oI.get());var I=iI.getStream(A);if(!I)throw new iI.ErrnoError(8);return I},get64:function(){var A=oI.get();return oI.get(),A},getZero:function(){oI.get()}};function DI(A,I){oI.varargs=I;try{var g=oI.getStreamFromFD();switch(oI.get()){case 0:return(B=oI.get())<0?-28:iI.open(g.path,g.flags,0,B).fd;case 1:case 2:case 13:case 14:return 0;case 3:return g.flags;case 4:var B=oI.get();return g.flags|=B,0;case 12:return B=oI.get(),_[B+0>>1]=2,0;default:return-28;case 9:return II(28),-1}}catch(A){return void 0!==iI&&A instanceof iI.ErrnoError||JA(A),-A.errno}}function aI(A,I){oI.varargs=I;try{var g=oI.getStr(),B=oI.get(),C=oI.get();return iI.open(g,B,C).fd}catch(A){return void 0!==iI&&A instanceof iI.ErrnoError||JA(A),-A.errno}}function wI(A,I){oI.varargs=I;try{var g=oI.getStreamFromFD(),B=oI.get();switch(B){case 21509:case 21505:case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:case 21523:case 21524:return g.tty?0:-59;case 21519:if(!g.tty)return-59;var C=oI.get();return AA[C>>2]=0,0;case 21520:return g.tty?-28:-59;case 21531:return C=oI.get(),iI.ioctl(g,B,C);default:JA("bad ioctl syscall "+B)}}catch(A){return void 0!==iI&&A instanceof iI.ErrnoError||JA(A),-A.errno}}function FI(A,I){if(-1===A||0===I)return-28;var g=oI.mappings[A];if(!g)return 0;if(I===g.len){var B=iI.getStream(g.fd);oI.doMsync(A,B,I,g.flags,g.offset),iI.munmap(B),oI.mappings[A]=null,g.allocated&&sB(g.malloc)}return 0}function GI(A,I){oI.varargs=I;try{return FI(oI.get(),oI.get())}catch(A){return void 0!==iI&&A instanceof iI.ErrnoError||JA(A),-A.errno}}function hI(){}function sI(A){try{var I=oI.getStreamFromFD(A);return iI.close(I),0}catch(A){return void 0!==iI&&A instanceof iI.ErrnoError||JA(A),A.errno}}function RI(){return sI.apply(null,arguments)}function UI(A,I,g,B){try{var C=oI.getStreamFromFD(A),Q=oI.doReadv(C,I,g);return AA[B>>2]=Q,0}catch(A){return void 0!==iI&&A instanceof iI.ErrnoError||JA(A),A.errno}}function yI(){return UI.apply(null,arguments)}function tI(A,I,g,B,C){try{var Q=oI.getStreamFromFD(A),E=4294967296*g+(I>>>0),i=9007199254740992;return E<=-i||E>=i?-61:(iI.llseek(Q,E,B),dA=[Q.position>>>0,(qA=Q.position,+MA(qA)>=1?qA>0?(0|rA(+cA(qA/4294967296),4294967295))>>>0:~~+nA((qA-+(~~qA>>>0))/4294967296)>>>0:0)],AA[C>>2]=dA[0],AA[C+4>>2]=dA[1],Q.getdents&&0===E&&0===B&&(Q.getdents=null),0)}catch(A){return void 0!==iI&&A instanceof iI.ErrnoError||JA(A),A.errno}}function SI(){return tI.apply(null,arguments)}function MI(A,I,g,B){try{var C=oI.getStreamFromFD(A),Q=oI.doWritev(C,I,g);return AA[B>>2]=Q,0}catch(A){return void 0!==iI&&A instanceof iI.ErrnoError||JA(A),A.errno}}function nI(){return MI.apply(null,arguments)}function cI(A){switch(A){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+A)}}function rI(){for(var A=new Array(256),I=0;I<256;++I)A[I]=String.fromCharCode(I);kI=A}var kI=void 0;function KI(A){for(var I="",g=A;z[g];)I+=kI[z[g++]];return I}var NI={},YI={},eI={},JI=48,HI=57;function LI(A){if(void 0===A)return"_unknown";var I=(A=A.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return I>=JI&&I<=HI?"_"+A:A}function qI(A,I){return A=LI(A),new Function("body","return function "+A+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(I)}function dI(A,I){var g=qI(I,(function(A){this.name=I,this.message=A;var g=new Error(A).stack;void 0!==g&&(this.stack=this.toString()+"\n"+g.replace(/^Error(:[^\n]*)?\n/,""))}));return g.prototype=Object.create(A.prototype),g.prototype.constructor=g,g.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},g}var fI=void 0;function lI(A){throw new fI(A)}var uI=void 0;function WI(A){throw new uI(A)}function pI(A,I,g){function B(I){var B=g(I);B.length!==A.length&&WI("Mismatched type converter count");for(var C=0;C<A.length;++C)ZI(A[C],B[C])}A.forEach((function(A){eI[A]=I}));var C=new Array(I.length),Q=[],E=0;I.forEach((function(A,I){YI.hasOwnProperty(A)?C[I]=YI[A]:(Q.push(A),NI.hasOwnProperty(A)||(NI[A]=[]),NI[A].push((function(){C[I]=YI[A],++E===Q.length&&B(C)})))})),0===Q.length&&B(C)}function ZI(A,I,g){if(g=g||{},!("argPackAdvance"in I))throw new TypeError("registerType registeredInstance requires argPackAdvance");var B=I.name;if(A||lI('type "'+B+'" must have a positive integer typeid pointer'),YI.hasOwnProperty(A)){if(g.ignoreDuplicateRegistrations)return;lI("Cannot register type '"+B+"' twice")}if(YI[A]=I,delete eI[A],NI.hasOwnProperty(A)){var C=NI[A];delete NI[A],C.forEach((function(A){A()}))}}function bI(A,I,g,B,C){var Q=cI(g);ZI(A,{name:I=KI(I),fromWireType:function(A){return!!A},toWireType:function(A,I){return I?B:C},argPackAdvance:8,readValueFromPointer:function(A){var B;if(1===g)B=v;else if(2===g)B=_;else{if(4!==g)throw new TypeError("Unknown boolean type size: "+I);B=AA}return this.fromWireType(B[A>>Q])},destructorFunction:null})}function xI(I,g,B){I=KI(I),pI([],[g],(function(g){return g=g[0],A[I]=g.fromWireType(B),[]}))}var mI=[],XI=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function VI(A){A>4&&0==--XI[A].refcount&&(XI[A]=void 0,mI.push(A))}function OI(){for(var A=0,I=5;I<XI.length;++I)void 0!==XI[I]&&++A;return A}function TI(){for(var A=5;A<XI.length;++A)if(void 0!==XI[A])return XI[A];return null}function jI(){A.count_emval_handles=OI,A.get_first_emval=TI}function PI(A){switch(A){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var I=mI.length?mI.pop():XI.length;return XI[I]={refcount:1,value:A},I}}function vI(A){return this.fromWireType(IA[A>>2])}function zI(A,I){ZI(A,{name:I=KI(I),fromWireType:function(A){var I=XI[A].value;return VI(A),I},toWireType:function(A,I){return PI(I)},argPackAdvance:8,readValueFromPointer:vI,destructorFunction:null})}function _I(A){if(null===A)return"null";var I=D(A);return"object"===I||"array"===I||"function"===I?A.toString():""+A}function $I(A,I){switch(I){case 2:return function(A){return this.fromWireType(gA[A>>2])};case 3:return function(A){return this.fromWireType(BA[A>>3])};default:throw new TypeError("Unknown float type: "+A)}}function Ag(A,I,g){var B=cI(g);ZI(A,{name:I=KI(I),fromWireType:function(A){return A},toWireType:function(A,I){if("number"!=typeof I&&"boolean"!=typeof I)throw new TypeError('Cannot convert "'+_I(I)+'" to '+this.name);return I},argPackAdvance:8,readValueFromPointer:$I(I,B),destructorFunction:null})}function Ig(A,I){if(!(A instanceof Function))throw new TypeError("new_ called with constructor type "+D(A)+" which is not a function");var g=qI(A.name||"unknownFunctionName",(function(){}));g.prototype=A.prototype;var B=new g,C=A.apply(B,I);return C instanceof Object?C:B}function gg(A){for(;A.length;){var I=A.pop();A.pop()(I)}}function Bg(A,I,g,B,C){var Q=I.length;Q<2&&lI("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var E=null!==I[1]&&null!==g,i=!1,o=1;o<I.length;++o)if(null!==I[o]&&void 0===I[o].destructorFunction){i=!0;break}var D="void"!==I[0].name,a="",w="";for(o=0;o<Q-2;++o)a+=(0!==o?", ":"")+"arg"+o,w+=(0!==o?", ":"")+"arg"+o+"Wired";var F="return function "+LI(A)+"("+a+") {\nif (arguments.length !== "+(Q-2)+") {\nthrowBindingError('function "+A+" called with ' + arguments.length + ' arguments, expected "+(Q-2)+" args!');\n}\n";i&&(F+="var destructors = [];\n");var G=i?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],s=[lI,B,C,gg,I[0],I[1]];for(E&&(F+="var thisWired = classParam.toWireType("+G+", this);\n"),o=0;o<Q-2;++o)F+="var arg"+o+"Wired = argType"+o+".toWireType("+G+", arg"+o+"); // "+I[o+2].name+"\n",h.push("argType"+o),s.push(I[o+2]);if(E&&(w="thisWired"+(w.length>0?", ":"")+w),F+=(D?"var rv = ":"")+"invoker(fn"+(w.length>0?", ":"")+w+");\n",i)F+="runDestructors(destructors);\n";else for(o=E?1:2;o<I.length;++o){var R=1===o?"thisWired":"arg"+(o-2)+"Wired";null!==I[o].destructorFunction&&(F+=R+"_dtor("+R+"); // "+I[o].name+"\n",h.push(R+"_dtor"),s.push(I[o].destructorFunction))}return D&&(F+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),F+="}\n",h.push(F),Ig(Function,h).apply(null,s)}function Cg(A,I,g){if(void 0===A[I].overloadTable){var B=A[I];A[I]=function(){return A[I].overloadTable.hasOwnProperty(arguments.length)||lI("Function '"+g+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+A[I].overloadTable+")!"),A[I].overloadTable[arguments.length].apply(this,arguments)},A[I].overloadTable=[],A[I].overloadTable[B.argCount]=B}}function Qg(I,g,B){A.hasOwnProperty(I)?((void 0===B||void 0!==A[I].overloadTable&&void 0!==A[I].overloadTable[B])&&lI("Cannot register public name '"+I+"' twice"),Cg(A,I,I),A.hasOwnProperty(B)&&lI("Cannot register multiple overloads of a function with the same number of arguments ("+B+")!"),A[I].overloadTable[B]=g):(A[I]=g,void 0!==B&&(A[I].numArguments=B))}function Eg(A,I){for(var g=[],B=0;B<A;B++)g.push(AA[(I>>2)+B]);return g}function ig(I,g,B){A.hasOwnProperty(I)||WI("Replacing nonexistant public symbol"),void 0!==A[I].overloadTable&&void 0!==B?A[I].overloadTable[B]=g:(A[I]=g,A[I].argCount=B)}function og(I,g){var B;if(I=KI(I),void 0!==A["FUNCTION_TABLE_"+I])B=A["FUNCTION_TABLE_"+I][g];else if("undefined"!=typeof FUNCTION_TABLE)B=FUNCTION_TABLE[g];else{var C=A["dynCall_"+I];void 0===C&&void 0===(C=A["dynCall_"+I.replace(/f/g,"d")])&&lI("No dynCall invoker for signature: "+I),B=function(A){for(var B=[],C=1;C<I.length;++C)B.push("a"+C);var Q="return function dynCall_"+I+"_"+g+"("+B.join(", ")+") {\n";return Q+="    return dynCall(rawFunction"+(B.length?", ":"")+B.join(", ")+");\n",Q+="};\n",new Function("dynCall","rawFunction",Q)(A,g)}(C)}return"function"!=typeof B&&lI("unknown function pointer with signature "+I+": "+g),B}var Dg=void 0;function ag(A){var I=wB(A),g=KI(I);return sB(I),g}function wg(A,I){var g=[],B={};throw I.forEach((function A(I){B[I]||YI[I]||(eI[I]?eI[I].forEach(A):(g.push(I),B[I]=!0))})),new Dg(A+": "+g.map(ag).join([", "]))}function Fg(A,I,g,B,C,Q){var E=Eg(I,g);A=KI(A),C=og(B,C),Qg(A,(function(){wg("Cannot call "+A+" due to unbound types",E)}),I-1),pI([],E,(function(g){var B=[g[0],null].concat(g.slice(1));return ig(A,Bg(A,B,null,C,Q),I-1),[]}))}function Gg(A,I,g){switch(I){case 0:return g?function(A){return v[A]}:function(A){return z[A]};case 1:return g?function(A){return _[A>>1]}:function(A){return $[A>>1]};case 2:return g?function(A){return AA[A>>2]}:function(A){return IA[A>>2]};default:throw new TypeError("Unknown integer type: "+A)}}function hg(A,I,g,B,C){I=KI(I),-1===C&&(C=4294967295);var Q=cI(g),E=function(A){return A};if(0===B){var i=32-8*g;E=function(A){return A<<i>>>i}}var o=-1!=I.indexOf("unsigned");ZI(A,{name:I,fromWireType:E,toWireType:function(A,g){if("number"!=typeof g&&"boolean"!=typeof g)throw new TypeError('Cannot convert "'+_I(g)+'" to '+this.name);if(g<B||g>C)throw new TypeError('Passing a number "'+_I(g)+'" from JS side to C/C++ side to an argument of type "'+I+'", which is outside the valid range ['+B+", "+C+"]!");return o?g>>>0:0|g},argPackAdvance:8,readValueFromPointer:Gg(I,Q,0!==B),destructorFunction:null})}function sg(A,I,g){var B=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][I];function C(A){var I=IA,g=I[A>>=2],C=I[A+1];return new B(I.buffer,C,g)}ZI(A,{name:g=KI(g),fromWireType:C,argPackAdvance:8,readValueFromPointer:C},{ignoreDuplicateRegistrations:!0})}function Rg(A,I){var g="std::string"===(I=KI(I));ZI(A,{name:I,fromWireType:function(A){var I,B=IA[A>>2];if(g){var C=z[A+4+B],Q=0;0!=C&&(Q=C,z[A+4+B]=0);for(var E=A+4,i=0;i<=B;++i){var o=A+4+i;if(0==z[o]){var D=f(E);void 0===I?I=D:(I+=String.fromCharCode(0),I+=D),E=o+1}}0!=Q&&(z[A+4+B]=Q)}else{var a=new Array(B);for(i=0;i<B;++i)a[i]=String.fromCharCode(z[A+4+i]);I=a.join("")}return sB(A),I},toWireType:function(A,I){I instanceof ArrayBuffer&&(I=new Uint8Array(I));var B="string"==typeof I;B||I instanceof Uint8Array||I instanceof Uint8ClampedArray||I instanceof Int8Array||lI("Cannot pass non-string to std::string");var C=(g&&B?function(){return W(I)}:function(){return I.length})(),Q=RB(4+C+1);if(IA[Q>>2]=C,g&&B)u(I,Q+4,C+1);else if(B)for(var E=0;E<C;++E){var i=I.charCodeAt(E);i>255&&(sB(Q),lI("String has UTF-16 code units that do not fit in 8 bits")),z[Q+4+E]=i}else for(E=0;E<C;++E)z[Q+4+E]=I[E];return null!==A&&A.push(sB,Q),Q},argPackAdvance:8,readValueFromPointer:vI,destructorFunction:function(A){sB(A)}})}function Ug(A,I,g){var B,C,Q,E,i;g=KI(g),2===I?(B=Z,C=b,E=x,Q=function(){return $},i=1):4===I&&(B=m,C=X,E=V,Q=function(){return IA},i=2),ZI(A,{name:g,fromWireType:function(A){var g,C=IA[A>>2],E=Q(),o=E[A+4+C*I>>i],D=0;0!=o&&(D=o,E[A+4+C*I>>i]=0);for(var a=A+4,w=0;w<=C;++w){var F=A+4+w*I;if(0==E[F>>i]){var G=B(a);void 0===g?g=G:(g+=String.fromCharCode(0),g+=G),a=F+I}}return 0!=D&&(E[A+4+C*I>>i]=D),sB(A),g},toWireType:function(A,B){"string"!=typeof B&&lI("Cannot pass non-string to C++ string type "+g);var Q=E(B),o=RB(4+Q+I);return IA[o>>2]=Q>>i,C(B,o+4,Q+I),null!==A&&A.push(sB,o),o},argPackAdvance:8,readValueFromPointer:vI,destructorFunction:function(A){sB(A)}})}function yg(A,I){ZI(A,{isVoid:!0,name:I=KI(I),argPackAdvance:0,fromWireType:function(){},toWireType:function(A,I){}})}function tg(){JA()}function Sg(){return z.length}function Mg(A){JA("OOM")}function ng(A){Mg()}function cg(A){eB(A)}function rg(A){return 0===A?0:(A=f(A),jA.hasOwnProperty(A)?(rg.ret&&sB(rg.ret),rg.ret=O(jA[A]),rg.ret):0)}function kg(A){var I=Date.now();return AA[A>>2]=I/1e3|0,AA[A+4>>2]=I%1e3*1e3|0,0}function Kg(A){return Math.pow(2,A)}function Ng(A){var I=Yg,g=I.LLVM_SAVEDSTACKS[A];I.LLVM_SAVEDSTACKS.splice(A,1),yB(g)}function Yg(){var A=Yg;return A.LLVM_SAVEDSTACKS||(A.LLVM_SAVEDSTACKS=[]),A.LLVM_SAVEDSTACKS.push(tB()),A.LLVM_SAVEDSTACKS.length-1}var eg=61136;function Jg(){if(!Jg.called){Jg.called=!0,AA[GB()>>2]=60*(new Date).getTimezoneOffset();var A=(new Date).getFullYear(),I=new Date(A,0,1),g=new Date(A,6,1);AA[FB()>>2]=Number(I.getTimezoneOffset()!=g.getTimezoneOffset());var B=i(I),C=i(g),Q=O(B),E=O(C);g.getTimezoneOffset()<I.getTimezoneOffset()?(AA[hB()>>2]=Q,AA[hB()+4>>2]=E):(AA[hB()>>2]=E,AA[hB()+4>>2]=Q)}function i(A){var I=A.toTimeString().match(/\(([A-Za-z ]+)\)$/);return I?I[1]:"GMT"}}function Hg(A,I){Jg();var g=new Date(1e3*AA[A>>2]);AA[I>>2]=g.getSeconds(),AA[I+4>>2]=g.getMinutes(),AA[I+8>>2]=g.getHours(),AA[I+12>>2]=g.getDate(),AA[I+16>>2]=g.getMonth(),AA[I+20>>2]=g.getFullYear()-1900,AA[I+24>>2]=g.getDay();var B=new Date(g.getFullYear(),0,1),C=(g.getTime()-B.getTime())/864e5|0;AA[I+28>>2]=C,AA[I+36>>2]=-60*g.getTimezoneOffset();var Q=new Date(g.getFullYear(),6,1).getTimezoneOffset(),E=B.getTimezoneOffset(),i=0|(Q!=E&&g.getTimezoneOffset()==Math.min(E,Q));AA[I+32>>2]=i;var o=AA[hB()+(i?4:0)>>2];return AA[I+40>>2]=o,I}function Lg(A){return Hg(A,eg)}function qg(A,I){throw UB(A,I||1),"longjmp"}function dg(A,I,g){z.set(z.subarray(I,I+g),A)}function fg(A){return A%4==0&&(A%100!=0||A%400==0)}function lg(A,I){for(var g=0,B=0;B<=I;g+=A[B++]);return g}u("GMT",61184,4);var ug=[31,29,31,30,31,30,31,31,30,31,30,31],Wg=[31,28,31,30,31,30,31,31,30,31,30,31];function pg(A,I){for(var g=new Date(A.getTime());I>0;){var B=fg(g.getFullYear()),C=g.getMonth(),Q=(B?ug:Wg)[C];if(!(I>Q-g.getDate()))return g.setDate(g.getDate()+I),g;I-=Q-g.getDate()+1,g.setDate(1),C<11?g.setMonth(C+1):(g.setMonth(0),g.setFullYear(g.getFullYear()+1))}return g}function Zg(A,I,g,B){var C=AA[B+40>>2],Q={tm_sec:AA[B>>2],tm_min:AA[B+4>>2],tm_hour:AA[B+8>>2],tm_mday:AA[B+12>>2],tm_mon:AA[B+16>>2],tm_year:AA[B+20>>2],tm_wday:AA[B+24>>2],tm_yday:AA[B+28>>2],tm_isdst:AA[B+32>>2],tm_gmtoff:AA[B+36>>2],tm_zone:C?f(C):""},E=f(g),i={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var o in i)E=E.replace(new RegExp(o,"g"),i[o]);var D=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],a=["January","February","March","April","May","June","July","August","September","October","November","December"];function w(A,I,g){for(var B="number"==typeof A?A.toString():A||"";B.length<I;)B=g[0]+B;return B}function F(A,I){return w(A,I,"0")}function G(A,I){function g(A){return A<0?-1:A>0?1:0}var B;return 0===(B=g(A.getFullYear()-I.getFullYear()))&&0===(B=g(A.getMonth()-I.getMonth()))&&(B=g(A.getDate()-I.getDate())),B}function h(A){switch(A.getDay()){case 0:return new Date(A.getFullYear()-1,11,29);case 1:return A;case 2:return new Date(A.getFullYear(),0,3);case 3:return new Date(A.getFullYear(),0,2);case 4:return new Date(A.getFullYear(),0,1);case 5:return new Date(A.getFullYear()-1,11,31);case 6:return new Date(A.getFullYear()-1,11,30)}}function s(A){var I=pg(new Date(A.tm_year+1900,0,1),A.tm_yday),g=new Date(I.getFullYear(),0,4),B=new Date(I.getFullYear()+1,0,4),C=h(g),Q=h(B);return G(C,I)<=0?G(Q,I)<=0?I.getFullYear()+1:I.getFullYear():I.getFullYear()-1}var R={"%a":function(A){return D[A.tm_wday].substring(0,3)},"%A":function(A){return D[A.tm_wday]},"%b":function(A){return a[A.tm_mon].substring(0,3)},"%B":function(A){return a[A.tm_mon]},"%C":function(A){return F((A.tm_year+1900)/100|0,2)},"%d":function(A){return F(A.tm_mday,2)},"%e":function(A){return w(A.tm_mday,2," ")},"%g":function(A){return s(A).toString().substring(2)},"%G":function(A){return s(A)},"%H":function(A){return F(A.tm_hour,2)},"%I":function(A){var I=A.tm_hour;return 0==I?I=12:I>12&&(I-=12),F(I,2)},"%j":function(A){return F(A.tm_mday+lg(fg(A.tm_year+1900)?ug:Wg,A.tm_mon-1),3)},"%m":function(A){return F(A.tm_mon+1,2)},"%M":function(A){return F(A.tm_min,2)},"%n":function(){return"\n"},"%p":function(A){return A.tm_hour>=0&&A.tm_hour<12?"AM":"PM"},"%S":function(A){return F(A.tm_sec,2)},"%t":function(){return"\t"},"%u":function(A){return A.tm_wday||7},"%U":function(A){var I=new Date(A.tm_year+1900,0,1),g=0===I.getDay()?I:pg(I,7-I.getDay()),B=new Date(A.tm_year+1900,A.tm_mon,A.tm_mday);if(G(g,B)<0){var C=lg(fg(B.getFullYear())?ug:Wg,B.getMonth()-1)-31,Q=31-g.getDate()+C+B.getDate();return F(Math.ceil(Q/7),2)}return 0===G(g,I)?"01":"00"},"%V":function(A){var I,g=new Date(A.tm_year+1900,0,4),B=new Date(A.tm_year+1901,0,4),C=h(g),Q=h(B),E=pg(new Date(A.tm_year+1900,0,1),A.tm_yday);return G(E,C)<0?"53":G(Q,E)<=0?"01":(I=C.getFullYear()<A.tm_year+1900?A.tm_yday+32-C.getDate():A.tm_yday+1-C.getDate(),F(Math.ceil(I/7),2))},"%w":function(A){return A.tm_wday},"%W":function(A){var I=new Date(A.tm_year,0,1),g=1===I.getDay()?I:pg(I,0===I.getDay()?1:7-I.getDay()+1),B=new Date(A.tm_year+1900,A.tm_mon,A.tm_mday);if(G(g,B)<0){var C=lg(fg(B.getFullYear())?ug:Wg,B.getMonth()-1)-31,Q=31-g.getDate()+C+B.getDate();return F(Math.ceil(Q/7),2)}return 0===G(g,I)?"01":"00"},"%y":function(A){return(A.tm_year+1900).toString().substring(2)},"%Y":function(A){return A.tm_year+1900},"%z":function(A){var I=A.tm_gmtoff,g=I>=0;return I=(I=Math.abs(I)/60)/60*100+I%60,(g?"+":"-")+String("0000"+I).slice(-4)},"%Z":function(A){return A.tm_zone},"%%":function(){return"%"}};for(var o in R)E.indexOf(o)>=0&&(E=E.replace(new RegExp(o,"g"),R[o](Q)));var U=Xg(E,!1);return U.length>I?0:(T(U,A),U.length-1)}function bg(A,I,g,B){return Zg(A,I,g,B)}function xg(A){var I=Date.now()/1e3|0;return A&&(AA[A>>2]=I),I}iI.staticInit(),rI(),fI=A.BindingError=dI(Error,"BindingError"),uI=A.InternalError=dI(Error,"InternalError"),jI(),Dg=A.UnboundTypeError=dI(Error,"UnboundTypeError");var mg=!1;function Xg(A,I,g){var B=g>0?g:W(A)+1,C=new Array(B),Q=l(A,C,0,C.length);return I&&(C.length=Q),C}function Vg(A){for(var I=[],g=0;g<A.length;g++){var B=A[g];B>255&&(mg&&H(!1,"Character code "+B+" ("+String.fromCharCode(B)+")  at offset "+g+" not in 0x00-0xFF."),B&=255),I.push(String.fromCharCode(B))}return I.join("")}var Og="function"==typeof atob?atob:function(A){var I,g,B,C,Q,E,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",o="",D=0;A=A.replace(/[^A-Za-z0-9\+\/\=]/g,"");do{I=i.indexOf(A.charAt(D++))<<2|(C=i.indexOf(A.charAt(D++)))>>4,g=(15&C)<<4|(Q=i.indexOf(A.charAt(D++)))>>2,B=(3&Q)<<6|(E=i.indexOf(A.charAt(D++))),o+=String.fromCharCode(I),64!==Q&&(o+=String.fromCharCode(g)),64!==E&&(o+=String.fromCharCode(B))}while(D<A.length);return o};function Tg(A){if("boolean"==typeof w&&w){var I;try{I=Buffer.from(A,"base64")}catch(g){I=new Buffer(A,"base64")}return new Uint8Array(I.buffer,I.byteOffset,I.byteLength)}try{for(var g=Og(A),B=new Uint8Array(g.length),C=0;C<g.length;++C)B[C]=g.charCodeAt(C);return B}catch(A){throw new Error("Converting base64 string to bytes failed.")}}function jg(A){if(LA(A))return Tg(A.slice(HA.length))}function Pg(A,I){var g=tB();try{return SB(A,I)}catch(A){if(yB(g),A!==A+0&&"longjmp"!==A)throw A;UB(1,0)}}function vg(A,I,g){var B=tB();try{return MB(A,I,g)}catch(A){if(yB(B),A!==A+0&&"longjmp"!==A)throw A;UB(1,0)}}function zg(A,I,g,B){var C=tB();try{return nB(A,I,g,B)}catch(A){if(yB(C),A!==A+0&&"longjmp"!==A)throw A;UB(1,0)}}function _g(A,I){var g=tB();try{cB(A,I)}catch(A){if(yB(g),A!==A+0&&"longjmp"!==A)throw A;UB(1,0)}}function $g(A,I,g){var B=tB();try{rB(A,I,g)}catch(A){if(yB(B),A!==A+0&&"longjmp"!==A)throw A;UB(1,0)}}function AB(A,I,g,B){var C=tB();try{kB(A,I,g,B)}catch(A){if(yB(C),A!==A+0&&"longjmp"!==A)throw A;UB(1,0)}}function IB(A,I,g,B,C){var Q=tB();try{KB(A,I,g,B,C)}catch(A){if(yB(Q),A!==A+0&&"longjmp"!==A)throw A;UB(1,0)}}var gB={},BB={$:vA,f:zA,e:$A,A:AI,_:gI,z:DI,Z:aI,Y:wI,X:GI,o:hI,y:RI,W:yI,D:SI,V:nI,U:bI,x:xI,T:zI,w:Ag,j:Fg,k:hg,i:sg,v:Rg,s:Ug,S:yg,__memory_base:1024,__table_base:0,a:tg,R:mA,Q:xA,P:bA,O:ZA,N:XA,M:Sg,K:dg,J:ng,b:cg,n:rg,u:kg,I:Kg,m:Ng,l:Yg,H:Lg,g:qg,F:Zg,E:bg,t:xg,c:JA,h:Y,q:Pg,L:vg,G:zg,p:_g,C:$g,B:AB,r:IB,memory:r,d:N,table:e},CB=A.asm(gB,BB,P);A.asm=CB;var QB,EB=A.__GLOBAL__sub_I_ARToolKitJS_cpp=function(){return A.asm.aa.apply(null,arguments)},iB=A.__GLOBAL__sub_I_bind_cpp=function(){return A.asm.ba.apply(null,arguments)},oB=A.__GLOBAL__sub_I_iostream_cpp=function(){return A.asm.ca.apply(null,arguments)},DB=A.__ZSt18uncaught_exceptionv=function(){return A.asm.da.apply(null,arguments)},aB=(A.___embind_register_native_and_builtin_types=function(){return A.asm.ea.apply(null,arguments)},A.___emscripten_environ_constructor=function(){return A.asm.fa.apply(null,arguments)}),wB=(A.___errno_location=function(){return A.asm.ga.apply(null,arguments)},A.___getTypeName=function(){return A.asm.ha.apply(null,arguments)}),FB=A.__get_daylight=function(){return A.asm.ia.apply(null,arguments)},GB=A.__get_timezone=function(){return A.asm.ja.apply(null,arguments)},hB=A.__get_tzname=function(){return A.asm.ka.apply(null,arguments)},sB=A._free=function(){return A.asm.la.apply(null,arguments)},RB=A._malloc=function(){return A.asm.ma.apply(null,arguments)},UB=A._setThrew=function(){return A.asm.na.apply(null,arguments)},yB=(A.stackAlloc=function(){return A.asm.Ra.apply(null,arguments)},A.stackRestore=function(){return A.asm.Sa.apply(null,arguments)}),tB=A.stackSave=function(){return A.asm.Ta.apply(null,arguments)},SB=(A.dynCall_di=function(){return A.asm.oa.apply(null,arguments)},A.dynCall_dii=function(){return A.asm.pa.apply(null,arguments)},A.dynCall_i=function(){return A.asm.qa.apply(null,arguments)},A.dynCall_ii=function(){return A.asm.ra.apply(null,arguments)}),MB=(A.dynCall_iidiiii=function(){return A.asm.sa.apply(null,arguments)},A.dynCall_iii=function(){return A.asm.ta.apply(null,arguments)}),nB=A.dynCall_iiii=function(){return A.asm.ua.apply(null,arguments)},cB=(A.dynCall_iiiii=function(){return A.asm.va.apply(null,arguments)},A.dynCall_iiiiid=function(){return A.asm.wa.apply(null,arguments)},A.dynCall_iiiiii=function(){return A.asm.xa.apply(null,arguments)},A.dynCall_iiiiiid=function(){return A.asm.ya.apply(null,arguments)},A.dynCall_iiiiiii=function(){return A.asm.za.apply(null,arguments)},A.dynCall_iiiiiiii=function(){return A.asm.Aa.apply(null,arguments)},A.dynCall_iiiiiiiii=function(){return A.asm.Ba.apply(null,arguments)},A.dynCall_iiiiij=function(){return A.asm.Ca.apply(null,arguments)},A.dynCall_jiji=function(){return A.asm.Da.apply(null,arguments)},A.dynCall_v=function(){return A.asm.Ea.apply(null,arguments)},A.dynCall_vi=function(){return A.asm.Fa.apply(null,arguments)}),rB=(A.dynCall_vid=function(){return A.asm.Ga.apply(null,arguments)},A.dynCall_vif=function(){return A.asm.Ha.apply(null,arguments)},A.dynCall_vii=function(){return A.asm.Ia.apply(null,arguments)}),kB=(A.dynCall_viid=function(){return A.asm.Ja.apply(null,arguments)},A.dynCall_viif=function(){return A.asm.Ka.apply(null,arguments)},A.dynCall_viii=function(){return A.asm.La.apply(null,arguments)}),KB=A.dynCall_viiii=function(){return A.asm.Ma.apply(null,arguments)};function NB(A){this.name="ExitStatus",this.message="Program terminated with exit("+A+")",this.status=A}function YB(I){function g(){QB||(QB=!0,J||(RA(),UA(),A.onRuntimeInitialized&&A.onRuntimeInitialized(),yA()))}I=I||C,kA>0||(sA(),kA>0||(A.setStatus?(A.setStatus("Running..."),setTimeout((function(){setTimeout((function(){A.setStatus("")}),1),g()}),1)):g()))}function eB(I,g){g&&c&&0===I||(c||(J=!0,A.onExit&&A.onExit(I)),E(I,new NB(I)))}if(A.dynCall_viiiii=function(){return A.asm.Na.apply(null,arguments)},A.dynCall_viiiiii=function(){return A.asm.Oa.apply(null,arguments)},A.dynCall_viiiiiii=function(){return A.asm.Pa.apply(null,arguments)},A.dynCall_viijii=function(){return A.asm.Qa.apply(null,arguments)},A.asm=CB,A.FS=iI,A.then=function(I){if(QB)I(A);else{var g=A.onRuntimeInitialized;A.onRuntimeInitialized=function(){g&&g(),I(A)}}return A},NA=function A(){QB||YB(),QB||(NA=A)},A.run=YB,A.preInit)for("function"==typeof A.preInit&&(A.preInit=[A.preInit]);A.preInit.length>0;)A.preInit.pop()();return c=!0,YB(),A});const F=w,G=function(){return new Promise((function(A){F({onRuntimeInitialized:function(){A({instance:this})}})}))};var h=g(669),s=g.n(h),R=function(){function A(){C(this,A)}var g;return E(A,null,[{key:"fetchRemoteData",value:(g=I(o().mark((function A(I){var g;return o().wrap((function(A){for(;;)switch(A.prev=A.next){case 0:return A.prev=0,A.next=3,s().get(I,{responseType:"arraybuffer"});case 3:return g=A.sent,A.abrupt("return",new Uint8Array(g.data));case 7:throw A.prev=7,A.t0=A.catch(0),A.t0;case 10:case"end":return A.stop()}}),A,null,[[0,7]])}))),function(A){return g.apply(this,arguments)})},{key:"string2Uint8Data",value:function(A){for(var I=new Uint8Array(A.length),g=0;g<I.length;g++)I[g]=255&A.charCodeAt(g);return I}},{key:"uint8Data2String",value:function(A){return String.fromCharCode.apply(String,A)}},{key:"parseMultiFile",value:function(I){var g=A.uint8Data2String(I).split("\n"),B=[],C=0;return g.forEach((function(A){if((A=A.trim())&&!A.startsWith("#"))switch(C){case 0:return void(C=1);case 1:A.match(/^\d+$/)||B.push(A);case 2:case 3:case 4:return void C++;case 5:return void(C=1)}})),B}}]),A}(),U=function(){function A(){C(this,A),this.instance,this.markerCount=0,this.multiMarkerCount=0,this.cameraCount=0,this.version="0.1.0",console.info("ARToolkit ",this.version)}var B,Q,i,D,a;return E(A,[{key:"init",value:(a=I(o().mark((function A(){var I;return o().wrap((function(A){for(;;)switch(A.prev=A.next){case 0:return A.next=2,G();case 2:return I=A.sent,this.instance=I.instance,this._decorate(),("undefined"!=typeof window?window:g.g).artoolkit=this,A.abrupt("return",this);case 8:case"end":return A.stop()}}),A,this)}))),function(){return a.apply(this,arguments)})},{key:"_decorate",value:function(){var A=this;for(var I in["setup","teardown","setupAR2","setLogLevel","getLogLevel","setDebugMode","getDebugMode","getProcessingImage","setMarkerInfoDir","setMarkerInfoVertex","getTransMatSquare","getTransMatSquareCont","getTransMatMultiSquare","getTransMatMultiSquareRobust","getMultiMarkerNum","getMultiMarkerCount","detectMarker","getMarkerNum","detectNFTMarker","getNFTMarker","getMarker","getMultiEachMarker","setProjectionNearPlane","getProjectionNearPlane","setProjectionFarPlane","getProjectionFarPlane","setThresholdMode","getThresholdMode","setThreshold","getThreshold","setPatternDetectionMode","getPatternDetectionMode","setMatrixCodeType","getMatrixCodeType","setLabelingMode","getLabelingMode","setPattRatio","getPattRatio","setImageProcMode","getImageProcMode"].forEach((function(I){A[I]=A.instance[I]})),this.instance)I.match(/^AR/)&&(this[I]=this.instance[I])}},{key:"loadCamera",value:(D=I(o().mark((function A(I){var g,B;return o().wrap((function(A){for(;;)switch(A.prev=A.next){case 0:if(g="/camera_param_"+this.cameraCount++,!(I instanceof Uint8Array)){A.next=5;break}B=I,A.next=14;break;case 5:return A.prev=5,A.next=8,R.fetchRemoteData(I);case 8:B=A.sent,A.next=14;break;case 11:throw A.prev=11,A.t0=A.catch(5),A.t0;case 14:return this._storeDataFile(B,g),A.abrupt("return",this.instance._loadCamera(g));case 16:case"end":return A.stop()}}),A,this,[[5,11]])}))),function(A){return D.apply(this,arguments)})},{key:"addMarker",value:(i=I(o().mark((function A(I,g){var B,C;return o().wrap((function(A){for(;;)switch(A.prev=A.next){case 0:if(B="/marker_"+this.markerCount++,-1===g.indexOf("\n")){A.next=5;break}C=R.string2Uint8Data(g),A.next=14;break;case 5:return A.prev=5,A.next=8,R.fetchRemoteData(g);case 8:C=A.sent,A.next=14;break;case 11:throw A.prev=11,A.t0=A.catch(5),A.t0;case 14:return this._storeDataFile(C,B),A.abrupt("return",this.instance._addMarker(I,B));case 16:case"end":return A.stop()}}),A,this,[[5,11]])}))),function(A,I){return i.apply(this,arguments)})},{key:"addMultiMarker",value:(Q=I(o().mark((function A(g,B){var C,Q,E,i,D,a,w;return o().wrap((function(A){for(;;)switch(A.prev=A.next){case 0:return C="/multi_marker_"+this.multiMarkerCount++,A.next=3,R.fetchRemoteData(B);case 3:return Q=A.sent,E=R.parseMultiFile(Q),i=function(){var A=I(o().mark((function A(I){var g,C;return o().wrap((function(A){for(;;)switch(A.prev=A.next){case 0:return g=new URL(I,B).toString(),A.next=3,R.fetchRemoteData(g);case 3:C=A.sent,this._storeDataFile(C,I);case 5:case"end":return A.stop()}}),A,this)})));return function(I){return A.apply(this,arguments)}}(),D=E.map(i,this),A.next=9,Promise.all(D);case 9:return a=this.instance._addMultiMarker(g,C),w=this.instance.getMultiMarkerNum(g,a),A.abrupt("return",[a,w]);case 12:case"end":return A.stop()}}),A,this)}))),function(A,I){return Q.apply(this,arguments)})},{key:"addNFTMarker",value:(B=I(o().mark((function A(g,B){var C,Q,E,i;return o().wrap((function(A){for(;;)switch(A.prev=A.next){case 0:return C="/markerNFT_"+this.markerCount++,Q=["fset","iset","fset3"],E=function(){var A=I(o().mark((function A(I){var g,Q,E;return o().wrap((function(A){for(;;)switch(A.prev=A.next){case 0:return g=B+"."+I,Q=C+"."+I,A.next=4,R.fetchRemoteData(g);case 4:E=A.sent,this._storeDataFile(E,Q);case 6:case"end":return A.stop()}}),A,this)})));return function(I){return A.apply(this,arguments)}}(),i=Q.map(E,this),A.next=6,Promise.all(i);case 6:return A.abrupt("return",this.instance._addNFTMarker(g,C));case 7:case"end":return A.stop()}}),A,this)}))),function(A,I){return B.apply(this,arguments)})},{key:"_storeDataFile",value:function(A,I){this.instance.FS.writeFile(I,A,{encoding:"binary"})}}],[{key:"UNKNOWN_MARKER",get:function(){return-1}},{key:"PATTERN_MARKER",get:function(){return 0}},{key:"BARCODE_MARKER",get:function(){return 1}},{key:"NFT_MARKER",get:function(){return 2}}]),A}();function y(A,I,g){return I in A?Object.defineProperty(A,I,{value:g,enumerable:!0,configurable:!0,writable:!0}):A[I]=g,A}function t(A,I){var g=Object.keys(A);if(Object.getOwnPropertySymbols){var B=Object.getOwnPropertySymbols(A);I&&(B=B.filter((function(I){return Object.getOwnPropertyDescriptor(A,I).enumerable}))),g.push.apply(g,B)}return g}function S(A){for(var I=1;I<arguments.length;I++){var g=null!=arguments[I]?arguments[I]:{};I%2?t(Object(g),!0).forEach((function(I){y(A,I,g[I])})):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(g)):t(Object(g)).forEach((function(I){Object.defineProperty(A,I,Object.getOwnPropertyDescriptor(g,I))}))}return A}var M=function(){function A(I,g,B,Q){C(this,A),this.options=S(S({},{canvas:null,orientation:"landscape"}),Q),this.id=-1,this.width=I,this.height=g,this.image,this.orientation=this.options.orientation,this.cameraParam=B,this.cameraId=-1,this.cameraLoaded=!1,this.artoolkit,this.listeners={},this.defaultMarkerWidth=1,this.patternMarkers={},this.barcodeMarkers={},this.nftMarkers={},this.transform_mat=new Float32Array(16),this.transformGL_RH=new Float64Array(16),this.videoWidth=I,this.videoHeight=g,this.videoSize=this.videoWidth*this.videoHeight,this.framepointer=null,this.framesize=null,this.dataHeap=null,this.videoLuma=null,this.camera_mat=null,this.marker_transform_mat=null,this.videoLumaPointer=null,this.options.canvas?this.canvas=this.options.canvas:"undefined"!=typeof document&&(this.canvas=document.createElement("canvas")),this.canvas?(this.canvas.width=I,this.canvas.height=g,this.ctx=this.canvas.getContext("2d")):console.warn("No canvas available"),this.nftMarkerFound=!1,this.nftMarkerFoundTime=!1,this.nftMarkerCount=0,this._bwpointer=!1}var g,B,Q,i,D,a;return E(A,[{key:"dispose",value:function(){for(var A in this.cameraId=-1,this.cameraParam="",this.cameraLoaded=!1,this.id>-1&&this.artoolkit.teardown(this.id),this.image&&this.image.srcObject,this)this[A]=null}},{key:"process",value:function(A){var I=this.detectMarker(A);0!=I&&console.error("[ARController]","detectMarker error:",I);var g,B,C=this.getMarkerNum();for(g in this.patternMarkers)(B=this.patternMarkers[g]).inPrevious=B.inCurrent,B.inCurrent=!1;for(g in this.barcodeMarkers)(B=this.barcodeMarkers[g]).inPrevious=B.inCurrent,B.inCurrent=!1;for(g in this.nftMarkers)(B=this.nftMarkers[g]).inPrevious=B.inCurrent,B.inCurrent=!1;for(var Q=0;Q<C;Q++){var E=this.getMarker(Q),i=U.UNKNOWN_MARKER,o=this.trackPatternMarkerId(-1);E.idPatt>-1&&(E.id===E.idPatt||-1===E.idMatrix)?(o=this.trackPatternMarkerId(E.idPatt),i=U.PATTERN_MARKER,E.dir!==E.dirPatt&&this.setMarkerInfoDir(Q,E.dirPatt)):E.idMatrix>-1&&(o=this.trackBarcodeMarkerId(E.idMatrix),i=U.BARCODE_MARKER,E.dir!==E.dirMatrix&&this.setMarkerInfoDir(Q,E.dirMatrix)),i!==U.UNKNOWN_MARKER&&o.inPrevious?this.getTransMatSquareCont(Q,o.markerWidth,o.matrix,o.matrix):this.getTransMatSquare(Q,o.markerWidth,o.matrix),o.inCurrent=!0,this.transMatToGLMat(o.matrix,this.transform_mat),this.transformGL_RH=this.arglCameraViewRHf(this.transform_mat),this.dispatchEvent({name:"getMarker",target:this,data:{index:Q,type:i,marker:E,matrix:this.transform_mat,matrixGL_RH:this.transformGL_RH}})}var D=this.nftMarkerCount;this.detectNFTMarker();for(var a=0;a<D;a++){var w=this.getNFTMarker(a),F=U.NFT_MARKER;if(w.found){this.nftMarkerFound=a,this.nftMarkerFoundTime=Date.now();var G=this.trackNFTMarkerId(a);G.matrix.set(w.pose),G.inCurrent=!0,this.transMatToGLMat(G.matrix,this.transform_mat),this.transformGL_RH=this.arglCameraViewRHf(this.transform_mat),this.dispatchEvent({name:"getNFTMarker",target:this,data:{index:a,type:F,marker:w,matrix:this.transform_mat,matrixGL_RH:this.transformGL_RH}})}else self.nftMarkerFound===a&&Date.now()-this.nftMarkerFoundTime>200&&(this.nftMarkerFound=!1,this.dispatchEvent({name:"lostNFTMarker",target:this,data:{index:a,type:F,marker:w,matrix:this.transform_mat,matrixGL_RH:this.transformGL_RH}}))}for(var h=this.getMultiMarkerCount(),s=0;s<h;s++){var R=this.getMultiMarkerPatternCount(s),y=!1;this.artoolkit.getTransMatMultiSquareRobust(this.id,s),this.transMatToGLMat(this.marker_transform_mat,this.transform_mat),this.transformGL_RH=this.arglCameraViewRHf(this.transform_mat);for(var t=0;t<R;t++)if((M=this.getMultiEachMarker(s,t)).visible>=0){y=!0,this.dispatchEvent({name:"getMultiMarker",target:this,data:{multiMarkerId:s,matrix:this.transform_mat,matrixGL_RH:this.transformGL_RH}});break}if(y)for(var S=0;S<R;S++){var M=this.getMultiEachMarker(s,S);this.transMatToGLMat(this.marker_transform_mat,this.transform_mat),this.transformGL_RH=this.arglCameraViewRHf(this.transform_mat),this.dispatchEvent({name:"getMultiMarkerSub",target:this,data:{multiMarkerId:s,markerIndex:S,marker:M,matrix:this.transform_mat,matrixGL_RH:this.transformGL_RH}})}}this._bwpointer&&this.debugDraw()}},{key:"detectNFTMarker",value:function(){this.artoolkit.detectNFTMarker(this.id)}},{key:"trackPatternMarkerId",value:function(A,I){var g=this.patternMarkers[A];return g||(this.patternMarkers[A]=g={inPrevious:!1,inCurrent:!1,matrix:new Float64Array(12),matrixGL_RH:new Float64Array(12),markerWidth:I||this.defaultMarkerWidth}),I&&(g.markerWidth=I),g}},{key:"trackBarcodeMarkerId",value:function(A,I){var g=this.barcodeMarkers[A];return g||(this.barcodeMarkers[A]=g={inPrevious:!1,inCurrent:!1,matrix:new Float64Array(12),matrixGL_RH:new Float64Array(12),markerWidth:I||this.defaultMarkerWidth}),I&&(g.markerWidth=I),g}},{key:"trackNFTMarkerId",value:function(A,I){var g=this.nftMarkers[A];return g||(this.nftMarkers[A]=g={inPrevious:!1,inCurrent:!1,matrix:new Float64Array(12),matrixGL_RH:new Float64Array(12),markerWidth:I||this.defaultMarkerWidth}),I&&(g.markerWidth=I),g}},{key:"getMultiMarkerCount",value:function(){return this.artoolkit.getMultiMarkerCount(this.id)}},{key:"getMultiMarkerPatternCount",value:function(A){return this.artoolkit.getMultiMarkerNum(this.id,A)}},{key:"addEventListener",value:function(A,I){this.listeners[A]||(this.listeners[A]=[]),this.listeners[A].push(I)}},{key:"removeEventListener",value:function(A,I){if(this.listeners[A]){var g=this.listeners[A].indexOf(I);g>-1&&this.listeners[A].splice(g,1)}}},{key:"dispatchEvent",value:function(A){var I=this.listeners[A.name];if(I)for(var g=0;g<I.length;g++)I[g].call(this,A)}},{key:"debugSetup",value:function(){"undefined"!=typeof document?(document.body.appendChild(this.canvas),this.setDebugMode(!0),this._bwpointer=this.getProcessingImage()):console.log("debugSetup() currently only supports Browser environments")}},{key:"debugDraw",value:function(){for(var A=new Uint8ClampedArray(this.artoolkit.instance.HEAPU8.buffer,this._bwpointer,this.framesize),I=new ImageData(new Uint8ClampedArray(this.canvas.width*this.canvas.height*4),this.canvas.width,this.canvas.height),g=0,B=0;g<A.length;g++,B+=4){var C=A[g];I.data[B+0]=C,I.data[B+1]=C,I.data[B+2]=C,I.data[B+3]=255}this.ctx.putImageData(I,0,0);for(var Q=this.getMarkerNum(),E=0;E<Q;E++)this.drawDebugMarker(this.getMarker(E))}},{key:"drawDebugMarker",value:function(A){var I=A.vertex,g=A.pos,B=this.ctx;B.lineWidth=5,B.strokeStyle="red",B.beginPath(),B.moveTo(I[0][0],I[0][1]),B.lineTo(I[1][0],I[1][1]),B.stroke(),B.beginPath(),B.moveTo(I[2][0],I[2][1]),B.lineTo(I[3][0],I[3][1]),B.stroke(),B.strokeStyle="green",B.beginPath(),B.lineTo(I[1][0],I[1][1]),B.lineTo(I[2][0],I[2][1]),B.stroke(),B.beginPath(),B.moveTo(I[3][0],I[3][1]),B.lineTo(I[0][0],I[0][1]),B.stroke(),B.beginPath(),B.arc(g[0],g[1],8,0,2*Math.PI),B.fillStyle="red",B.fill()}},{key:"loadMarker",value:(a=I(o().mark((function A(I){return o().wrap((function(A){for(;;)switch(A.prev=A.next){case 0:return A.next=2,this.artoolkit.addMarker(this.id,I);case 2:return A.abrupt("return",A.sent);case 3:case"end":return A.stop()}}),A,this)}))),function(A){return a.apply(this,arguments)})},{key:"loadMultiMarker",value:(D=I(o().mark((function A(I){return o().wrap((function(A){for(;;)switch(A.prev=A.next){case 0:return A.next=2,this.artoolkit.addMultiMarker(this.id,I);case 2:return A.abrupt("return",A.sent);case 3:case"end":return A.stop()}}),A,this)}))),function(A){return D.apply(this,arguments)})},{key:"loadNFTMarker",value:(i=I(o().mark((function A(I){var g;return o().wrap((function(A){for(;;)switch(A.prev=A.next){case 0:return A.next=2,this.artoolkit.addNFTMarker(this.id,I);case 2:return g=A.sent,this.nftMarkerCount=g+1,A.abrupt("return",g);case 5:case"end":return A.stop()}}),A,this)}))),function(A){return i.apply(this,arguments)})},{key:"getTransMatSquare",value:function(A,I,g){return this.artoolkit.getTransMatSquare(this.id,A,I),g.set(this.marker_transform_mat),g}},{key:"getTransMatSquareCont",value:function(A,I,g,B){return this.marker_transform_mat.set(g),this.artoolkit.getTransMatSquareCont(this.id,A,I),B.set(this.marker_transform_mat),B}},{key:"getTransMatMultiSquare",value:function(A,I){return this.artoolkit.getTransMatMultiSquare(this.id,A),I.set(this.marker_transform_mat),I}},{key:"getTransMatMultiSquareRobust",value:function(A,I){return this.artoolkit.getTransMatMultiSquare(this.id,A),I.set(this.marker_transform_mat),I}},{key:"transMatToGLMat",value:function(A,I,g){return null==I&&(I=new Float64Array(16)),I[0]=A[0],I[4]=A[1],I[8]=A[2],I[12]=A[3],I[1]=A[4],I[5]=A[5],I[9]=A[6],I[13]=A[7],I[2]=A[8],I[6]=A[9],I[10]=A[10],I[14]=A[11],I[3]=0,I[7]=0,I[11]=0,I[15]=1,null!=g&&0!==g&&(I[12]*=g,I[13]*=g,I[14]*=g),I}},{key:"arglCameraViewRHf",value:function(A,I,g){var B;return(B=null==I?new Float64Array(16):I)[0]=A[0],B[4]=A[4],B[8]=A[8],B[12]=A[12],B[1]=-A[1],B[5]=-A[5],B[9]=-A[9],B[13]=-A[13],B[2]=-A[2],B[6]=-A[6],B[10]=-A[10],B[14]=-A[14],B[3]=0,B[7]=0,B[11]=0,B[15]=1,null!=g&&0!==g&&(B[12]*=g,B[13]*=g,B[14]*=g),B}},{key:"detectMarker",value:function(A){return this._copyImageToHeap(A)?this.artoolkit.detectMarker(this.id):-99}},{key:"getMarkerNum",value:function(){return this.artoolkit.getMarkerNum(this.id)}},{key:"getMarker",value:function(A){if(0===this.artoolkit.getMarker(this.id,A))return this.artoolkit.markerInfo}},{key:"getNFTMarker",value:function(A){if(0===this.artoolkit.getNFTMarker(this.id,A))return this.artoolkit.NFTMarkerInfo}},{key:"setMarkerInfoVertex",value:function(A,I){for(var g=0;g<I.length;g++)this.marker_transform_mat[2*g+0]=I[g][0],this.marker_transform_mat[2*g+1]=I[g][1];return this.artoolkit.setMarkerInfoVertex(this.id,A)}},{key:"cloneMarkerInfo",value:function(A){return JSON.parse(JSON.stringify(A))}},{key:"getMultiEachMarker",value:function(A,I){if(0===this.artoolkit.getMultiEachMarker(this.id,A,I))return this.artoolkit.multiEachMarkerInfo}},{key:"getTransformationMatrix",value:function(){return this.transform_mat}},{key:"getCameraMatrix",value:function(){return this.camera_mat}},{key:"getMarkerTransformationMatrix",value:function(){return this.marker_transform_mat}},{key:"setDebugMode",value:function(A){return this.artoolkit.setDebugMode(this.id,A)}},{key:"getDebugMode",value:function(){return this.artoolkit.getDebugMode(this.id)}},{key:"getProcessingImage",value:function(){return this.artoolkit.getProcessingImage(this.id)}},{key:"setLogLevel",value:function(A){return this.artoolkit.setLogLevel(A)}},{key:"getLogLevel",value:function(){return this.artoolkit.getLogLevel()}},{key:"setMarkerInfoDir",value:function(A,I){return this.artoolkit.setMarkerInfoDir(this.id,A,I)}},{key:"setProjectionNearPlane",value:function(A){return this.artoolkit.setProjectionNearPlane(this.id,A)}},{key:"getProjectionNearPlane",value:function(){return this.artoolkit.getProjectionNearPlane(this.id)}},{key:"setProjectionFarPlane",value:function(A){return this.artoolkit.setProjectionFarPlane(this.id,A)}},{key:"getProjectionFarPlane",value:function(){return this.artoolkit.getProjectionFarPlane(this.id)}},{key:"setThresholdMode",value:function(A){return this.artoolkit.setThresholdMode(this.id,A)}},{key:"getThresholdMode",value:function(){return this.artoolkit.getThresholdMode(this.id)}},{key:"setThreshold",value:function(A){return this.artoolkit.setThreshold(this.id,A)}},{key:"getThreshold",value:function(){return this.artoolkit.getThreshold(this.id)}},{key:"setPatternDetectionMode",value:function(A){return this.artoolkit.setPatternDetectionMode(this.id,A)}},{key:"getPatternDetectionMode",value:function(){return this.artoolkit.getPatternDetectionMode(this.id)}},{key:"setMatrixCodeType",value:function(A){return this.artoolkit.setMatrixCodeType(this.id,A)}},{key:"getMatrixCodeType",value:function(){return this.artoolkit.getMatrixCodeType(this.id)}},{key:"setLabelingMode",value:function(A){return this.artoolkit.setLabelingMode(this.id,A)}},{key:"getLabelingMode",value:function(){return this.artoolkit.getLabelingMode(this.id)}},{key:"setPattRatio",value:function(A){return this.artoolkit.setPattRatio(this.id,A)}},{key:"getPattRatio",value:function(){return this.artoolkit.getPattRatio(this.id)}},{key:"setImageProcMode",value:function(A){return this.artoolkit.setImageProcMode(this.id,A)}},{key:"getImageProcMode",value:function(){return this.artoolkit.getImageProcMode(this.id)}},{key:"_initialize",value:(Q=I(o().mark((function A(){var I,g=this;return o().wrap((function(A){for(;;)switch(A.prev=A.next){case 0:return A.next=2,(new U).init();case 2:return this.artoolkit=A.sent,console.log("[ARController]","ARToolkit initialized"),A.next=6,this.artoolkit.loadCamera(this.cameraParam);case 6:return this.cameraId=A.sent,console.log("[ARController]","Camera params loaded with ID",this.cameraId),this.id=this.artoolkit.setup(this.width,this.height,this.cameraId),console.log("[ARController]","Got ID from setup",this.id),this._initNFT(),I=artoolkit.frameMalloc,this.framepointer=I.framepointer,this.framesize=I.framesize,this.videoLumaPointer=I.videoLumaPointer,this.dataHeap=new Uint8Array(this.artoolkit.instance.HEAPU8.buffer,this.framepointer,this.framesize),this.videoLuma=new Uint8Array(this.artoolkit.instance.HEAPU8.buffer,this.videoLumaPointer,this.framesize/4),this.camera_mat=new Float64Array(this.artoolkit.instance.HEAPU8.buffer,I.camera,16),this.marker_transform_mat=new Float64Array(this.artoolkit.instance.HEAPU8.buffer,I.transform,12),this.setProjectionNearPlane(.1),this.setProjectionFarPlane(1e3),setTimeout((function(){g.dispatchEvent({name:"load",target:g})}),1),A.abrupt("return",this);case 23:case"end":return A.stop()}}),A,this)}))),function(){return Q.apply(this,arguments)})},{key:"_initNFT",value:function(){this.artoolkit.setupAR2(this.id)}},{key:"_copyImageToHeap",value:function(A){var I;if(A||(A=this.image),A.data?I=A.data:(this.ctx.save(),"portrait"===this.orientation?this.ctx.drawImage(A,0,0,this.canvas.height,this.canvas.width):this.ctx.drawImage(A,0,0,this.canvas.width,this.canvas.height),this.ctx.restore(),I=this.ctx.getImageData(0,0,this.canvas.width,this.canvas.height).data),this.videoLuma)for(var g=0,B=0;B<this.videoSize;B++){var C=I[g+0],Q=I[g+1],E=I[g+2];this.videoLuma[B]=C+C+C+E+Q+Q+Q+Q>>3,g+=4}return!!this.dataHeap&&(this.dataHeap.set(I),!0)}}],[{key:"initWithDimensions",value:(B=I(o().mark((function I(g,B,C,Q){var E;return o().wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return E=new A(g,B,C,Q),I.next=3,E._initialize();case 3:return I.abrupt("return",I.sent);case 4:case"end":return I.stop()}}),I)}))),function(A,I,g,C){return B.apply(this,arguments)})},{key:"initWithImage",value:(g=I(o().mark((function I(g,B,C){var Q,E,i;return o().wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return Q=g.videoWidth||g.width,E=g.videoHeight||g.height,I.next=4,A.initWithDimensions(Q,E,B,C);case 4:return(i=I.sent).image=g,I.abrupt("return",i);case 7:case"end":return I.stop()}}),I)}))),function(A,I,B){return g.apply(this,arguments)})}]),A}();const n={ARToolkit:U,ARController:M}})(),B.default})()}));

/***/ }),

/***/ "./three.js/src/markers-area/arjs-markersareacontrols.js":
/*!***************************************************************!*\
  !*** ./three.js/src/markers-area/arjs-markersareacontrols.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _threex_threex_arbasecontrols__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../threex/threex-arbasecontrols */ "./three.js/src/threex/threex-arbasecontrols.js");
/* harmony import */ var _threex_arjs_markercontrols__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../threex/arjs-markercontrols */ "./three.js/src/threex/arjs-markercontrols.js");
/* harmony import */ var _arjs_markersareacontrols__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./arjs-markersareacontrols */ "./three.js/src/markers-area/arjs-markersareacontrols.js");





const MarkersAreaControls = function(arToolkitContext, object3d, parameters){
	var _this = this
	_threex_threex_arbasecontrols__WEBPACK_IMPORTED_MODULE_1__.default.call(this, object3d)

	if( arguments.length > 3 )	console.assert('wrong api for', MarkersAreaControls)

	// have a parameters in argument
	this.parameters = {
		// list of controls for each subMarker
		subMarkersControls: parameters.subMarkersControls,
		// list of pose for each subMarker relative to the origin
		subMarkerPoses: parameters.subMarkerPoses,
		// change matrix mode - [modelViewMatrix, cameraTransformMatrix]
		changeMatrixMode : parameters.changeMatrixMode !== undefined ? parameters.changeMatrixMode : 'modelViewMatrix',
	}
	
	this.object3d.visible = false
	// honor obsolete stuff - add a warning to use
	this.subMarkersControls = this.parameters.subMarkersControls
	this.subMarkerPoses = this.parameters.subMarkerPoses

	// listen to arToolkitContext event 'sourceProcessed'
	// - after we fully processed one image, aka when we know all detected poses in it
	arToolkitContext.addEventListener('sourceProcessed', function(){
		_this._onSourceProcessed()
	})
}

MarkersAreaControls.prototype = Object.create( _threex_threex_arbasecontrols__WEBPACK_IMPORTED_MODULE_1__.default.prototype );
MarkersAreaControls.prototype.constructor = MarkersAreaControls;

//////////////////////////////////////////////////////////////////////////////
//		Code Separator
//////////////////////////////////////////////////////////////////////////////


/**
 * What to do when a image source is fully processed
 */
MarkersAreaControls.prototype._onSourceProcessed = function(){
	var _this = this
	var stats = {
		count: 0,
		position : {
			sum: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0,0,0),
			average: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0,0,0),
		},
		quaternion : {
			sum: new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion(0,0,0,0),
			average: new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion(0,0,0,0),
		},
		scale : {
			sum: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0,0,0),
			average: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0,0,0),
		},
	}

	var firstQuaternion = _this.parameters.subMarkersControls[0].object3d.quaternion

	this.parameters.subMarkersControls.forEach(function(markerControls, markerIndex){
		
		var markerObject3d = markerControls.object3d
		// if this marker is not visible, ignore it
		if( markerObject3d.visible === false )	return

		// transformation matrix of this.object3d according to this sub-markers
		var matrix = markerObject3d.matrix.clone()
		var markerPose = _this.parameters.subMarkerPoses[markerIndex]
		matrix.multiply(new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().getInverse(markerPose))

		// decompose the matrix into .position, .quaternion, .scale
		var position = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3
		var quaternion = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion()
		var scale = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3
		matrix.decompose(position, quaternion, scale)

		// http://wiki.unity3d.com/index.php/Averaging_Quaternions_and_Vectors
		stats.count++

		MarkersAreaControls.averageVector3(stats.position.sum, position, stats.count, stats.position.average)
		MarkersAreaControls.averageQuaternion(stats.quaternion.sum, quaternion, firstQuaternion, stats.count, stats.quaternion.average)
		MarkersAreaControls.averageVector3(stats.scale.sum, scale, stats.count, stats.scale.average)
	})

	// honor _this.object3d.visible
	if( stats.count > 0 ){
		_this.object3d.visible = true
	}else{
		_this.object3d.visible = false			
	}

	// if at least one sub-marker has been detected, make the average of all detected markers
	if( stats.count > 0 ){
		// compute modelViewMatrix
		var modelViewMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4()
		modelViewMatrix.compose(stats.position.average, stats.quaternion.average, stats.scale.average)

		// change _this.object3d.matrix based on parameters.changeMatrixMode
		if( this.parameters.changeMatrixMode === 'modelViewMatrix' ){
			_this.object3d.matrix.copy(modelViewMatrix)
		}else if( this.parameters.changeMatrixMode === 'cameraTransformMatrix' ){
			_this.object3d.matrix.getInverse( modelViewMatrix )
		}else {
			console.assert(false)
		}

		// decompose - the matrix into .position, .quaternion, .scale
		_this.object3d.matrix.decompose(_this.object3d.position, _this.object3d.quaternion, _this.object3d.scale)
	}

}

//////////////////////////////////////////////////////////////////////////////
//		Utility functions
//////////////////////////////////////////////////////////////////////////////

/**
 * from http://wiki.unity3d.com/index.php/Averaging_Quaternions_and_Vectors
 */
MarkersAreaControls.averageQuaternion = function(quaternionSum, newQuaternion, firstQuaternion, count, quaternionAverage){
	quaternionAverage = quaternionAverage || new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion()
	// sanity check
	console.assert(firstQuaternion instanceof three__WEBPACK_IMPORTED_MODULE_0__.Quaternion === true)
	
	// from http://wiki.unity3d.com/index.php/Averaging_Quaternions_and_Vectors
	if( newQuaternion.dot(firstQuaternion) > 0 ){
		newQuaternion = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion(-newQuaternion.x, -newQuaternion.y, -newQuaternion.z, -newQuaternion.w)
	}

	quaternionSum.x += newQuaternion.x
	quaternionSum.y += newQuaternion.y
	quaternionSum.z += newQuaternion.z
	quaternionSum.w += newQuaternion.w
	
	quaternionAverage.x = quaternionSum.x/count
	quaternionAverage.y = quaternionSum.y/count
	quaternionAverage.z = quaternionSum.z/count
	quaternionAverage.w = quaternionSum.w/count
	
	quaternionAverage.normalize()

	return quaternionAverage
}


MarkersAreaControls.averageVector3 = function(vector3Sum, vector3, count, vector3Average){
	vector3Average = vector3Average || new three__WEBPACK_IMPORTED_MODULE_0__.Vector3()
	
	vector3Sum.x += vector3.x
	vector3Sum.y += vector3.y
	vector3Sum.z += vector3.z
	
	vector3Average.x = vector3Sum.x / count
	vector3Average.y = vector3Sum.y / count
	vector3Average.z = vector3Sum.z / count
	
	return vector3Average
}

//////////////////////////////////////////////////////////////////////////////
//		Utility function
//////////////////////////////////////////////////////////////////////////////

/**
 * compute the center of this multimarker file
 */
MarkersAreaControls.computeCenter = function(jsonData){
	var multiMarkerFile = JSON.parse(jsonData)
	var stats = {
		count : 0,
		position : {
			sum: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0,0,0),
			average: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0,0,0),						
		},
		quaternion : {
			sum: new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion(0,0,0,0),
			average: new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion(0,0,0,0),						
		},
		scale : {
			sum: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0,0,0),
			average: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0,0,0),						
		},
	}
	var firstQuaternion = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion() // FIXME ???
	
	multiMarkerFile.subMarkersControls.forEach(function(item){
		var poseMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().fromArray(item.poseMatrix)
		
		var position = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3
		var quaternion = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion
		var scale = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3
		poseMatrix.decompose(position, quaternion, scale)
		
		// http://wiki.unity3d.com/index.php/Averaging_Quaternions_and_Vectors
		stats.count++

		MarkersAreaControls.averageVector3(stats.position.sum, position, stats.count, stats.position.average)
		MarkersAreaControls.averageQuaternion(stats.quaternion.sum, quaternion, firstQuaternion, stats.count, stats.quaternion.average)
		MarkersAreaControls.averageVector3(stats.scale.sum, scale, stats.count, stats.scale.average)
	})
	
	var averageMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4()
	averageMatrix.compose(stats.position.average, stats.quaternion.average, stats.scale.average)

	return averageMatrix
}

MarkersAreaControls.computeBoundingBox = function(jsonData){
	var multiMarkerFile = JSON.parse(jsonData)
	var boundingBox = new three__WEBPACK_IMPORTED_MODULE_0__.Box3()

	multiMarkerFile.subMarkersControls.forEach(function(item){
		var poseMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().fromArray(item.poseMatrix)
		
		var position = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3
		var quaternion = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion
		var scale = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3
		poseMatrix.decompose(position, quaternion, scale)

		boundingBox.expandByPoint(position)
	})

	return boundingBox
}
//////////////////////////////////////////////////////////////////////////////
//		updateSmoothedControls
//////////////////////////////////////////////////////////////////////////////

MarkersAreaControls.prototype.updateSmoothedControls = function(smoothedControls, lerpsValues){
	// handle default values
	if( lerpsValues === undefined ){
		// FIXME this parameter format is uselessly cryptic
		// lerpValues = [
		// {lerpPosition: 0.5, lerpQuaternion: 0.2, lerpQuaternion: 0.7}
		// ]
		lerpsValues = [
			[0.3+.1, 0.1, 0.3],
			[0.4+.1, 0.1, 0.4],
			[0.4+.1, 0.2, 0.5],
			[0.5+.1, 0.2, 0.7],
			[0.5+.1, 0.2, 0.7],
		]
	}
	// count how many subMarkersControls are visible
	var nVisible = 0
	this.parameters.subMarkersControls.forEach(function(markerControls, markerIndex){
		var markerObject3d = markerControls.object3d
		if( markerObject3d.visible === true )	nVisible ++
	})

	// find the good lerpValues
	if( lerpsValues[nVisible-1] !== undefined ){
		var lerpValues = lerpsValues[nVisible-1]
	}else{
		var lerpValues = lerpsValues[lerpsValues.length-1]
	}

	// modify lerpValues in smoothedControls
	smoothedControls.parameters.lerpPosition = lerpValues[0]
	smoothedControls.parameters.lerpQuaternion = lerpValues[1]
	smoothedControls.parameters.lerpScale = lerpValues[2]
}


//////////////////////////////////////////////////////////////////////////////
//		Create ArMultiMarkerControls from JSON
//////////////////////////////////////////////////////////////////////////////

MarkersAreaControls.fromJSON = function(arToolkitContext, parent3D, markerRoot, jsonData, parameters){
	var multiMarkerFile = JSON.parse(jsonData)
	// declare variables
	var subMarkersControls = []
	var subMarkerPoses = []
	// handle default arguments
	parameters = parameters || {}

	// prepare the parameters
	multiMarkerFile.subMarkersControls.forEach(function(item){
		// create a markerRoot
		var markerRoot = new three__WEBPACK_IMPORTED_MODULE_0__.Object3D()
		parent3D.add(markerRoot)

		// create markerControls for our markerRoot
		var subMarkerControls = new _threex_arjs_markercontrols__WEBPACK_IMPORTED_MODULE_2__.default(arToolkitContext, markerRoot, item.parameters)

// if( true ){
		// store it in the parameters
		subMarkersControls.push(subMarkerControls)
		subMarkerPoses.push(new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().fromArray(item.poseMatrix))	
// }else{
// 		// build a smoothedControls
// 		var smoothedRoot = new THREE.Group()
// 		parent3D.add(smoothedRoot)
// 		var smoothedControls = new THREEx.ArSmoothedControls(smoothedRoot, {
// 			lerpPosition : 0.1,
// 			lerpQuaternion : 0.1, 
// 			lerpScale : 0.1,
// 			minVisibleDelay: 0,
// 			minUnvisibleDelay: 0,
// 		})
// 		onRenderFcts.push(function(delta){
// 			smoothedControls.update(markerRoot)	// TODO this is a global
// 		})
// 	
// 
// 		// store it in the parameters
// 		subMarkersControls.push(smoothedControls)
// 		subMarkerPoses.push(new THREE.Matrix4().fromArray(item.poseMatrix))
// }
	})
	
	parameters.subMarkersControls = subMarkersControls
	parameters.subMarkerPoses = subMarkerPoses
	// create a new ArMultiMarkerControls
	var multiMarkerControls = new _arjs_markersareacontrols__WEBPACK_IMPORTED_MODULE_3__.default(arToolkitContext, markerRoot, parameters)

	// return it
	return multiMarkerControls	
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MarkersAreaControls);

/***/ }),

/***/ "./three.js/src/markers-area/arjs-markersareautils.js":
/*!************************************************************!*\
  !*** ./three.js/src/markers-area/arjs-markersareautils.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _threex_arjs_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../threex/arjs-context */ "./three.js/src/threex/arjs-context.js");

 // TODO context build-dependent

const MarkersAreaUtils = {};

//////////////////////////////////////////////////////////////////////////////
//		navigateToLearnerPage
//////////////////////////////////////////////////////////////////////////////

/**
 * Navigate to the multi-marker learner page
 *
 * @param {String} learnerBaseURL  - the base url for the learner
 * @param {String} trackingBackend - the tracking backend to use
 */
MarkersAreaUtils.navigateToLearnerPage = function(learnerBaseURL, trackingBackend){
	var learnerParameters = {
		backURL : location.href,
		trackingBackend: trackingBackend,
		markersControlsParameters: MarkersAreaUtils.createDefaultMarkersControlsParameters(trackingBackend),
	}
	location.href = learnerBaseURL + '?' + encodeURIComponent(JSON.stringify(learnerParameters))
}

//////////////////////////////////////////////////////////////////////////////
//		DefaultMultiMarkerFile
//////////////////////////////////////////////////////////////////////////////

/**
 * Create and store a default multi-marker file
 *
 * @param {String} trackingBackend - the tracking backend to use
 */
MarkersAreaUtils.storeDefaultMultiMarkerFile = function(trackingBackend){
	var file = MarkersAreaUtils.createDefaultMultiMarkerFile(trackingBackend)
	// json.strinfy the value and store it in localStorage
	localStorage.setItem('ARjsMultiMarkerFile', JSON.stringify(file))
}



/**
 * Create a default multi-marker file
 * @param {String} trackingBackend - the tracking backend to use
 * @return {Object} - json object of the multi-marker file
 */
MarkersAreaUtils.createDefaultMultiMarkerFile = function(trackingBackend){
	console.assert(trackingBackend)
	if( trackingBackend === undefined )	debugger

	// create absoluteBaseURL
	var link = document.createElement('a')
	link.href = _threex_arjs_context__WEBPACK_IMPORTED_MODULE_1__.default.baseURL
	var absoluteBaseURL = link.href

	// create the base file
	var file = {
		meta : {
			createdBy : 'AR.js ' + _threex_arjs_context__WEBPACK_IMPORTED_MODULE_1__.default.REVISION + ' - Default Marker',
			createdAt : new Date().toJSON(),
		},
		trackingBackend : trackingBackend,
		subMarkersControls : [
			// empty for now... being filled
		]
	}
	// add a subMarkersControls
	file.subMarkersControls[0] = {
		parameters: {},
		poseMatrix: new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().makeTranslation(0,0, 0).toArray(),
	}
	if( trackingBackend === 'artoolkit' ){
		file.subMarkersControls[0].parameters.type = 'pattern'
		file.subMarkersControls[0].parameters.patternUrl = absoluteBaseURL + 'examples/marker-training/examples/pattern-files/pattern-hiro.patt'
	}else console.assert(false)

	// json.strinfy the value and store it in localStorage
	return file
}

//////////////////////////////////////////////////////////////////////////////
//		createDefaultMarkersControlsParameters
//////////////////////////////////////////////////////////////////////////////

/**
 * Create a default controls parameters for the multi-marker learner
 *
 * @param {String} trackingBackend - the tracking backend to use
 * @return {Object} - json object containing the controls parameters
 */
MarkersAreaUtils.createDefaultMarkersControlsParameters = function(trackingBackend){
	// create absoluteBaseURL
	var link = document.createElement('a')
	link.href = _threex_arjs_context__WEBPACK_IMPORTED_MODULE_1__.default.baseURL
	var absoluteBaseURL = link.href


	if( trackingBackend === 'artoolkit' ){
		// pattern hiro/kanji/a/b/c/f
		var markersControlsParameters = [
			{
				type : 'pattern',
				patternUrl : absoluteBaseURL + 'examples/marker-training/examples/pattern-files/pattern-hiro.patt',
			},
			{
				type : 'pattern',
				patternUrl : absoluteBaseURL + 'examples/marker-training/examples/pattern-files/pattern-kanji.patt',
			},
			{
				type : 'pattern',
				patternUrl : absoluteBaseURL + 'examples/marker-training/examples/pattern-files/pattern-letterA.patt',
			},
			{
				type : 'pattern',
				patternUrl : absoluteBaseURL + 'examples/marker-training/examples/pattern-files/pattern-letterB.patt',
			},
			{
				type : 'pattern',
				patternUrl : absoluteBaseURL + 'examples/marker-training/examples/pattern-files/pattern-letterC.patt',
			},
			{
				type : 'pattern',
				patternUrl : absoluteBaseURL + 'examples/marker-training/examples/pattern-files/pattern-letterF.patt',
			},
		]
	}else console.assert(false)
	return markersControlsParameters
}


//////////////////////////////////////////////////////////////////////////////
//		Code Separator
//////////////////////////////////////////////////////////////////////////////
/**
 * generate areaFile
 */
MarkersAreaUtils.storeMarkersAreaFileFromResolution = function (trackingBackend, resolutionW, resolutionH) {
	// generate areaFile
	var areaFile = this.buildMarkersAreaFileFromResolution(trackingBackend, resolutionW, resolutionH)
	// store areaFile in localStorage
	localStorage.setItem('ARjsMultiMarkerFile', JSON.stringify(areaFile))
}


//////////////////////////////////////////////////////////////////////////////
//		Code Separator
//////////////////////////////////////////////////////////////////////////////

MarkersAreaUtils.buildMarkersAreaFileFromResolution = function(trackingBackend, resolutionW, resolutionH){
	// create the base file
	var file = {
		meta : {
			createdBy : 'AR.js - Augmented Website',
			createdAt : new Date().toJSON(),
		},
		trackingBackend : trackingBackend,
		subMarkersControls : [
			// empty for now...
		]
	}

	var whiteMargin = 0.1
	if( resolutionW > resolutionH ){
		var markerImageSize = 0.4 * resolutionH
	}else if( resolutionW < resolutionH ){
		var markerImageSize = 0.4 * resolutionW
	}else if( resolutionW === resolutionH ){
		// specific for twitter player - https://dev.twitter.com/cards/types/player
		var markerImageSize = 0.33 * resolutionW
	}else console.assert(false)

	// console.warn('using new markerImageSize computation')
	var actualMarkerSize = markerImageSize * (1 - 2*whiteMargin)

	var deltaX = (resolutionW - markerImageSize)/2 / actualMarkerSize
	var deltaZ = (resolutionH - markerImageSize)/2 / actualMarkerSize

	var subMarkerControls = buildSubMarkerControls('center', 0, 0)
	file.subMarkersControls.push(subMarkerControls)

	var subMarkerControls = buildSubMarkerControls('topleft', -deltaX, -deltaZ)
	file.subMarkersControls.push(subMarkerControls)

	var subMarkerControls = buildSubMarkerControls('topright', +deltaX, -deltaZ)
	file.subMarkersControls.push(subMarkerControls)

	var subMarkerControls = buildSubMarkerControls('bottomleft', -deltaX, +deltaZ)
	file.subMarkersControls.push(subMarkerControls)

	var subMarkerControls = buildSubMarkerControls('bottomright', +deltaX, +deltaZ)
	file.subMarkersControls.push(subMarkerControls)

	return file

	//////////////////////////////////////////////////////////////////////////////
	//		Code Separator
	//////////////////////////////////////////////////////////////////////////////

	function buildSubMarkerControls(layout, positionX, positionZ){
		console.log('buildSubMarkerControls', layout, positionX, positionZ)
		// create subMarkersControls
		var subMarkersControls = {
			parameters: {},
			poseMatrix: new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().makeTranslation(positionX,0, positionZ).toArray(),
		}
		// fill the parameters
		if( trackingBackend === 'artoolkit' ){
			layout2MarkerParametersArtoolkit(subMarkersControls.parameters, layout)
		}else console.assert(false)
		// return subMarkersControls
		return subMarkersControls
	}

	function layout2MarkerParametersArtoolkit(parameters, layout){
		// create absoluteBaseURL
		var link = document.createElement('a')
		link.href = _threex_arjs_context__WEBPACK_IMPORTED_MODULE_1__.default.baseURL
		var absoluteBaseURL = link.href

		var layout2PatternUrl = {
			'center' : convertRelativeUrlToAbsolute(absoluteBaseURL + 'examples/marker-training/examples/pattern-files/pattern-hiro.patt'),
			'topleft' : convertRelativeUrlToAbsolute(absoluteBaseURL + 'examples/marker-training/examples/pattern-files/pattern-letterA.patt'),
			'topright' : convertRelativeUrlToAbsolute(absoluteBaseURL + 'examples/marker-training/examples/pattern-files/pattern-letterB.patt'),
			'bottomleft' : convertRelativeUrlToAbsolute(absoluteBaseURL + 'examples/marker-training/examples/pattern-files/pattern-letterC.patt'),
			'bottomright' : convertRelativeUrlToAbsolute(absoluteBaseURL + 'examples/marker-training/examples/pattern-files/pattern-letterF.patt'),
		}
		console.assert(layout2PatternUrl[layout] !== undefined )
		parameters.type = 'pattern'
		parameters.patternUrl = layout2PatternUrl[layout]
		return
		function convertRelativeUrlToAbsolute(relativeUrl){
			var tmpLink = document.createElement('a');
			tmpLink.href = relativeUrl
			return tmpLink.href
		}
	}
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MarkersAreaUtils);


/***/ }),

/***/ "./three.js/src/new-api/arjs-anchor.js":
/*!*********************************************!*\
  !*** ./three.js/src/new-api/arjs-anchor.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var threexArmarkercontrols__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! threexArmarkercontrols */ "./three.js/src/threex/arjs-markercontrols.js");
/* harmony import */ var _threex_threex_armarkerhelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../threex/threex-armarkerhelper */ "./three.js/src/threex/threex-armarkerhelper.js");
/* harmony import */ var _threex_threex_arsmoothedcontrols__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../threex/threex-arsmoothedcontrols */ "./three.js/src/threex/threex-arsmoothedcontrols.js");
/* harmony import */ var _markers_area_arjs_markersareacontrols__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../markers-area/arjs-markersareacontrols */ "./three.js/src/markers-area/arjs-markersareacontrols.js");
/* harmony import */ var _markers_area_arjs_markersareautils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../markers-area/arjs-markersareautils */ "./three.js/src/markers-area/arjs-markersareautils.js");

 // Alias for dynamic importing





// TODO this is a controls... should i give the object3d here ?
// not according to 'no three.js dependancy'

/**
 * Create an anchor in the real world
 *
 * @param {ARjs.Session} arSession - the session on which we create the anchor
 * @param {Object} markerParameters - parameter of this anchor
 */
const Anchor = function(arSession, markerParameters){
	var _this = this
	var arContext = arSession.arContext
	var scene = arSession.parameters.scene
	var camera = arSession.parameters.camera

	this.arSession = arSession
	this.parameters = markerParameters

	// log to debug
	console.log('ARjs.Anchor -', 'changeMatrixMode:', this.parameters.changeMatrixMode, '/ markersAreaEnabled:', markerParameters.markersAreaEnabled)

	var markerRoot = new three__WEBPACK_IMPORTED_MODULE_0__.Group()
	scene.add(markerRoot)

	// set controlledObject depending on changeMatrixMode
	if( markerParameters.changeMatrixMode === 'modelViewMatrix' ){
		var controlledObject = markerRoot
	}else if( markerParameters.changeMatrixMode === 'cameraTransformMatrix' ){
		var controlledObject = camera
	}else console.assert(false)

	if( markerParameters.markersAreaEnabled === false ){
		var markerControls = new threexArmarkercontrols__WEBPACK_IMPORTED_MODULE_1__.default(arContext, controlledObject, markerParameters)
		this.controls = markerControls
	}else{
		// sanity check - MUST be a trackingBackend with markers
		console.assert( arContext.parameters.trackingBackend === 'artoolkit' )

		// honor markers-page-resolution for https://webxr.io/augmented-website
		if( location.hash.substring(1).startsWith('markers-page-resolution=') === true ){
			// get resolutionW/resolutionH from url
			var markerPageResolution = location.hash.substring(1)
			var matches = markerPageResolution.match(/markers-page-resolution=(\d+)x(\d+)/)
			console.assert(matches.length === 3)
			var resolutionW = parseInt(matches[1])
			var resolutionH = parseInt(matches[2])
			var arContext = arSession.arContext
			// generate and store the ARjsMultiMarkerFile
			_markers_area_arjs_markersareautils__WEBPACK_IMPORTED_MODULE_5__.default.storeMarkersAreaFileFromResolution(arContext.parameters.trackingBackend, resolutionW, resolutionH)
		}

		// if there is no ARjsMultiMarkerFile, build a default one
		if( localStorage.getItem('ARjsMultiMarkerFile') === null ){
			_markers_area_arjs_markersareautils__WEBPACK_IMPORTED_MODULE_5__.default.storeDefaultMultiMarkerFile(arContext.parameters.trackingBackend)
		}

		// get multiMarkerFile from localStorage
		console.assert( localStorage.getItem('ARjsMultiMarkerFile') !== null )
		var multiMarkerFile = localStorage.getItem('ARjsMultiMarkerFile')

		// set controlledObject depending on changeMatrixMode
		if( markerParameters.changeMatrixMode === 'modelViewMatrix' ){
			var parent3D = scene
		}else if( markerParameters.changeMatrixMode === 'cameraTransformMatrix' ){
			var parent3D = camera
		}else console.assert(false)

		// build a multiMarkerControls
		var multiMarkerControls = _markers_area_arjs_markersareacontrols__WEBPACK_IMPORTED_MODULE_4__.default.fromJSON(arContext, parent3D, controlledObject, multiMarkerFile)
		this.controls = multiMarkerControls

		// honor markerParameters.changeMatrixMode
		multiMarkerControls.parameters.changeMatrixMode = markerParameters.changeMatrixMode

// TODO put subMarkerControls visibility into an external file. with 2 handling for three.js and babylon.js
		// create ArMarkerHelper - useful to debug - super three.js specific
		var markerHelpers = []
		multiMarkerControls.subMarkersControls.forEach(function(subMarkerControls){
			// add an helper to visuable each sub-marker
			var markerHelper = new _threex_threex_armarkerhelper__WEBPACK_IMPORTED_MODULE_2__.default(subMarkerControls)
			markerHelper.object3d.visible = false
			// subMarkerControls.object3d.add( markerHelper.object3d )
			subMarkerControls.object3d.add( markerHelper.object3d )
			// add it to markerHelpers
			markerHelpers.push(markerHelper)
		})
		// define API specific to markersArea
		this.markersArea = {}
		this.markersArea.setSubMarkersVisibility = function(visible){
			markerHelpers.forEach(function(markerHelper){
				markerHelper.object3d.visible = visible
			})
		}
	}

	this.object3d = new three__WEBPACK_IMPORTED_MODULE_0__.Group()

	//////////////////////////////////////////////////////////////////////////////
	//		THREEx.ArSmoothedControls
	//////////////////////////////////////////////////////////////////////////////

	var shouldBeSmoothed = true

	if( shouldBeSmoothed === true ){
		// build a smoothedControls
		var smoothedRoot = new three__WEBPACK_IMPORTED_MODULE_0__.Group()
		scene.add(smoothedRoot)
		var smoothedControls = new _threex_threex_arsmoothedcontrols__WEBPACK_IMPORTED_MODULE_3__.default(smoothedRoot)
		smoothedRoot.add(this.object3d)
	}else{
		markerRoot.add(this.object3d)
	}


	//////////////////////////////////////////////////////////////////////////////
	//		Code Separator
	//////////////////////////////////////////////////////////////////////////////
	this.update = function(){
		// update _this.object3d.visible
		_this.object3d.visible = _this.object3d.parent.visible

		// console.log('controlledObject.visible', _this.object3d.parent.visible)
		if( smoothedControls !== undefined ){
			// update smoothedControls parameters depending on how many markers are visible in multiMarkerControls
			if( multiMarkerControls !== undefined ){
				multiMarkerControls.updateSmoothedControls(smoothedControls)
			}

			// update smoothedControls
			smoothedControls.update(markerRoot)
		}
	}
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Anchor);

/***/ }),

/***/ "./three.js/src/new-api/arjs-debugui.js":
/*!**********************************************!*\
  !*** ./three.js/src/new-api/arjs-debugui.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SessionDebugUI": () => (/* binding */ SessionDebugUI),
/* harmony export */   "AnchorDebugUI": () => (/* binding */ AnchorDebugUI)
/* harmony export */ });
/* harmony import */ var _markers_area_arjs_markersareautils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../markers-area/arjs-markersareautils */ "./three.js/src/markers-area/arjs-markersareautils.js");
/* harmony import */ var _threex_arjs_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../threex/arjs-context */ "./three.js/src/threex/arjs-context.js");

 // TODO context build-dependent

/**
 * Create an debug UI for an ARjs.Anchor
 *
 * @param {ARjs.Anchor} arAnchor - the anchor to user
 */
const SessionDebugUI = function (arSession) {
    var trackingBackend = arSession.arContext.parameters.trackingBackend

    this.domElement = document.createElement('div')
    this.domElement.style.color = 'rgba(0,0,0,0.9)'
    this.domElement.style.backgroundColor = 'rgba(127,127,127,0.5)'
    this.domElement.style.display = 'block'
    this.domElement.style.padding = '0.5em'
    this.domElement.style.position = 'fixed'
    this.domElement.style.left = '5px'
    this.domElement.style.bottom = '10px'
    this.domElement.style.textAlign = 'right'

    //////////////////////////////////////////////////////////////////////////////
    //		current-tracking-backend
    //////////////////////////////////////////////////////////////////////////////

    var domElement = document.createElement('span')
    domElement.style.display = 'block'
    domElement.innerHTML = '<b>trackingBackend</b> : ' + trackingBackend
    this.domElement.appendChild(domElement)
}

/**
 * Url of augmented-website service - if === '' then dont include augmented-website link
 * @type {String}
 */
SessionDebugUI.AugmentedWebsiteURL = 'https://webxr.io/augmented-website'

//////////////////////////////////////////////////////////////////////////////
//		AnchorDebugUI
//////////////////////////////////////////////////////////////////////////////

/**
 * Create an debug UI for an ARjs.Anchor
 *
 * @param {ARjs.Anchor} arAnchor - the anchor to user
 */
const AnchorDebugUI = function (arAnchor) {
    var arSession = arAnchor.arSession
    var trackingBackend = arSession.arContext.parameters.trackingBackend

    this.domElement = document.createElement('div')
    this.domElement.style.color = 'rgba(0,0,0,0.9)'
    this.domElement.style.backgroundColor = 'rgba(127,127,127,0.5)'
    this.domElement.style.display = 'inline-block'
    this.domElement.style.padding = '0.5em'
    this.domElement.style.margin = '0.5em'
    this.domElement.style.textAlign = 'left'

    //////////////////////////////////////////////////////////////////////////////
    //		current-tracking-backend
    //////////////////////////////////////////////////////////////////////////////

    var domElement = document.createElement('span')
    domElement.style.display = 'block'
    domElement.style.padding = '0.5em'
    domElement.style.color = 'rgba(0,0,0,0.9)'
    domElement.style.backgroundColor = 'rgba(127,127,127,0.5)'
    domElement.style.position = 'fixed'
    domElement.style.left = '5px'
    domElement.style.bottom = '40px'

    this.domElement.appendChild(domElement)
    domElement.innerHTML = '<b>markersAreaEnabled</b> :' + arAnchor.parameters.markersAreaEnabled

    //////////////////////////////////////////////////////////////////////////////
    //		toggle-marker-helper
    //////////////////////////////////////////////////////////////////////////////

    if (arAnchor.parameters.markersAreaEnabled) {
        var domElement = document.createElement('button')
        domElement.style.display = 'block'
        this.domElement.style.padding = '0.5em'
        this.domElement.style.position = 'fixed'
        this.domElement.style.textAlign = 'left'
        this.domElement.appendChild(domElement)

        domElement.id = 'buttonToggleMarkerHelpers'
        domElement.innerHTML = 'toggle-marker-helper'
        domElement.href = 'javascript:void(0)'

        var subMarkerHelpersVisible = false
        domElement.addEventListener('click', function () {
            subMarkerHelpersVisible = subMarkerHelpersVisible ? false : true
            arAnchor.markersArea.setSubMarkersVisibility(subMarkerHelpersVisible)
        })
    }

    //////////////////////////////////////////////////////////////////////////////
    //		Learn-new-marker-area
    //////////////////////////////////////////////////////////////////////////////

    if (arAnchor.parameters.markersAreaEnabled) {
        var domElement = document.createElement('button')
        domElement.style.display = 'block'
        this.domElement.appendChild(domElement)

        domElement.id = 'buttonMarkersAreaLearner'
        domElement.innerHTML = 'Learn-new-marker-area'
        domElement.href = 'javascript:void(0)'

        domElement.addEventListener('click', function () {
            if (AnchorDebugUI.MarkersAreaLearnerURL !== null) {
                var learnerURL = AnchorDebugUI.MarkersAreaLearnerURL
            } else {
                var learnerURL = _threex_arjs_context__WEBPACK_IMPORTED_MODULE_1__.default.baseURL + 'examples/multi-markers/examples/learner.html'
            }
            _markers_area_arjs_markersareautils__WEBPACK_IMPORTED_MODULE_0__.default.navigateToLearnerPage(learnerURL, trackingBackend)
        })
    }

    //////////////////////////////////////////////////////////////////////////////
    //		Reset-marker-area
    //////////////////////////////////////////////////////////////////////////////

    if (arAnchor.parameters.markersAreaEnabled) {
        var domElement = document.createElement('button')
        domElement.style.display = 'block'
        this.domElement.appendChild(domElement)

        domElement.id = 'buttonMarkersAreaReset'
        domElement.innerHTML = 'Reset-marker-area'
        domElement.href = 'javascript:void(0)'

        domElement.addEventListener('click', function () {
            _markers_area_arjs_markersareautils__WEBPACK_IMPORTED_MODULE_0__.default.storeDefaultMultiMarkerFile(trackingBackend)
            location.reload()
        })
    }
}

/**
 * url for the markers-area learner. if not set, take the default one
 * @type {String}
 */
AnchorDebugUI.MarkersAreaLearnerURL = null




/***/ }),

/***/ "./three.js/src/new-api/arjs-hittesting.js":
/*!*************************************************!*\
  !*** ./three.js/src/new-api/arjs-hittesting.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _threex_threex_hittesting_plane__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../threex/threex-hittesting-plane */ "./three.js/src/threex/threex-hittesting-plane.js");


/**
 * Create an anchor in the real world
 *
 * @param {ARjs.Session} arSession - the session on which we create the anchor
 * @param {Object} markerParameters - parameter of this anchor
 */
const HitTesting = function (arSession) {
    var _this = this
    var arContext = arSession.arContext
    var trackingBackend = arContext.parameters.trackingBackend

    this.enabled = true
    this._arSession = arSession
    this._hitTestingPlane = null
    _this._hitTestingPlane = new _threex_threex_hittesting_plane__WEBPACK_IMPORTED_MODULE_0__.default(arSession.arSource.domElement)
}

//////////////////////////////////////////////////////////////////////////////
//		update function
//////////////////////////////////////////////////////////////////////////////
/**
 * update
 *
 * @param {THREE.Camera} camera   - the camera to use
 * @param {THREE.Object3D} object3d -
 */
HitTesting.prototype.update = function (camera, pickingRoot, changeMatrixMode) {
    // if it isnt enabled, do nothing
    if (this.enabled === false) return


    if (this._hitTestingPlane !== null) {
        this._hitTestingPlane.update(camera, pickingRoot, changeMatrixMode)
    } else console.assert(false)
}

//////////////////////////////////////////////////////////////////////////////
//		actual hit testing
//////////////////////////////////////////////////////////////////////////////

/**
 * Test the real world for intersections directly from a DomEvent
 *
 * @param {Number} mouseX - position X of the hit [-1, +1]
 * @param {Number} mouseY - position Y of the hit [-1, +1]
 * @return {[HitTesting.Result]} - array of result
 */
HitTesting.prototype.testDomEvent = function (domEvent) {
    var trackingBackend = this._arSession.arContext.parameters.trackingBackend
    var arSource = this._arSession.arSource

    // if it isnt enabled, do nothing
    if (this.enabled === false) return []
    var mouseX = domEvent.clientX / arSource.domElementWidth()
    var mouseY = domEvent.clientY / arSource.domElementHeight()

    return this.test(mouseX, mouseY)
}

/**
 * Test the real world for intersections.
 *
 * @param {Number} mouseX - position X of the hit [0, +1]
 * @param {Number} mouseY - position Y of the hit [0, +1]
 * @return {[HitTesting.Result]} - array of result
 */
HitTesting.prototype.test = function (mouseX, mouseY) {
    var arContext = this._arSession.arContext
    var trackingBackend = arContext.parameters.trackingBackend
    var hitTestResults = []

    // if it isnt enabled, do nothing
    if (this.enabled === false) return []

    var result = this._hitTestingPlane.test(mouseX, mouseY)

    // if no result is found, return now
    if (result === null) return hitTestResults

    // build a HitTesting.Result
    var hitTestResult = new HitTesting.Result(result.position, result.quaternion, result.scale)
    hitTestResults.push(hitTestResult)

    return hitTestResults
}

//////////////////////////////////////////////////////////////////////////////
//		HitTesting.Result
//////////////////////////////////////////////////////////////////////////////
/**
 * Contains the result of HitTesting.test()
 *
 * @param {THREE.Vector3} position - position to use
 * @param {THREE.Quaternion} quaternion - quaternion to use
 * @param {THREE.Vector3} scale - scale
 */
HitTesting.Result = function (position, quaternion, scale) {
    this.position = position
    this.quaternion = quaternion
    this.scale = scale
}

/**
 * Apply to a controlled object3d
 *
 * @param {THREE.Object3D} object3d - the result to apply
 */
HitTesting.Result.prototype.apply = function (object3d) {
    object3d.position.copy(this.position)
    object3d.quaternion.copy(this.quaternion)
    object3d.scale.copy(this.scale)

    object3d.updateMatrix()
}

/**
 * Apply to a controlled object3d
 *
 * @param {THREE.Object3D} object3d - the result to apply
 */
HitTesting.Result.prototype.applyPosition = function (object3d) {
    object3d.position.copy(this.position)

    object3d.updateMatrix()

    return this
}

/**
 * Apply to a controlled object3d
 *
 * @param {THREE.Object3D} object3d - the result to apply
 */
HitTesting.Result.prototype.applyQuaternion = function (object3d) {
    object3d.quaternion.copy(this.quaternion)

    object3d.updateMatrix()

    return this
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (HitTesting);


/***/ }),

/***/ "./three.js/src/new-api/arjs-session.js":
/*!**********************************************!*\
  !*** ./three.js/src/new-api/arjs-session.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _threex_arjs_source__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../threex/arjs-source */ "./three.js/src/threex/arjs-source.js");
/* harmony import */ var _threex_arjs_context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../threex/arjs-context */ "./three.js/src/threex/arjs-context.js");


 // TODO context build-dependent

/**
 *  * define a Session
 *
 * @param {Object} parameters - parameters for this session
 */
const Session = function(parameters){
	var _this = this
	// handle default parameters
	this.parameters = {
		renderer: null,
		camera: null,
		scene: null,
		sourceParameters: {},
		contextParameters: {},
	}

	//////////////////////////////////////////////////////////////////////////////
	//		setParameters
	//////////////////////////////////////////////////////////////////////////////
	setParameters(parameters)
	function setParameters(parameters){
		if( parameters === undefined )	return
		for( var key in parameters ){
			var newValue = parameters[ key ]

			if( newValue === undefined ){
				console.warn( "THREEx.Session: '" + key + "' parameter is undefined." )
				continue
			}

			var currentValue = _this.parameters[ key ]

			if( currentValue === undefined ){
				console.warn( "THREEx.Session: '" + key + "' is not a property of this material." )
				continue
			}

			_this.parameters[ key ] = newValue
		}
	}
	// sanity check
	console.assert(this.parameters.renderer instanceof three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderer)
	console.assert(this.parameters.camera instanceof three__WEBPACK_IMPORTED_MODULE_0__.Camera)
	console.assert(this.parameters.scene instanceof three__WEBPACK_IMPORTED_MODULE_0__.Scene)


	// backward emulation
	Object.defineProperty(this, 'renderer', {get: function(){
		console.warn('use .parameters.renderer renderer')
		return this.parameters.renderer;
	}});
	Object.defineProperty(this, 'camera', {get: function(){
		console.warn('use .parameters.camera instead')
		return this.parameters.camera;
	}});
	Object.defineProperty(this, 'scene', {get: function(){
		console.warn('use .parameters.scene instead')
		return this.parameters.scene;
	}});


	// log the version
	console.log('AR.js', _threex_arjs_context__WEBPACK_IMPORTED_MODULE_2__.default.REVISION, '- trackingBackend:', parameters.contextParameters.trackingBackend)

	//////////////////////////////////////////////////////////////////////////////
	//		init arSource
	//////////////////////////////////////////////////////////////////////////////
	var arSource = _this.arSource = new _threex_arjs_source__WEBPACK_IMPORTED_MODULE_1__.default(parameters.sourceParameters)

	arSource.init(function onReady(){
		arSource.onResize(arContext, _this.parameters.renderer, _this.parameters.camera)
	})

	// handle resize
	window.addEventListener('resize', function(){
		arSource.onResize(arContext, _this.parameters.renderer, _this.parameters.camera)
	})

	//////////////////////////////////////////////////////////////////////////////
	//		init arContext
	//////////////////////////////////////////////////////////////////////////////

	// create atToolkitContext
	var arContext = _this.arContext = new _threex_arjs_context__WEBPACK_IMPORTED_MODULE_2__.default(parameters.contextParameters)

	// initialize it
	_this.arContext.init()

	arContext.addEventListener('initialized', function(event){
		arSource.onResize(arContext, _this.parameters.renderer, _this.parameters.camera)
	})

	//////////////////////////////////////////////////////////////////////////////
	//		update function
	//////////////////////////////////////////////////////////////////////////////
	// update artoolkit on every frame
	this.update = function(){
		if( arSource.ready === false )	return

		arContext.update( arSource.domElement )
	}
}

Session.prototype.onResize = function () {
	this.arSource.onResize(this.arContext, this.parameters.renderer, this.parameters.camera)
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Session);

/***/ }),

/***/ "./three.js/src/new-api/arjs-utils.js":
/*!********************************************!*\
  !*** ./three.js/src/new-api/arjs-utils.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);


const Utils = {};

/**
 * Create a default rendering camera for this trackingBackend. They may be modified later. to fit physical camera parameters
 *
 * @param {string} trackingBackend - the tracking to user
 * @return {THREE.Camera} the created camera
 */
Utils.createDefaultCamera = function (trackingMethod) {
    var trackingBackend = this.parseTrackingMethod(trackingMethod).trackingBackend
    // Create a camera
    if (trackingBackend === 'artoolkit') {
        var camera = new three__WEBPACK_IMPORTED_MODULE_0__.Camera();
    } else console.assert(false, 'unknown trackingBackend: ' + trackingBackend)

    return camera
}

/**
 * parse tracking method
 *
 * @param {String} trackingMethod - the tracking method to parse
 * @return {Object} - various field of the tracking method
 */
Utils.parseTrackingMethod = function (trackingMethod) {

    if (trackingMethod === 'best') {
        trackingMethod = 'area-artoolkit';
    }

    if (trackingMethod.startsWith('area-')) {
        return {
            trackingBackend: trackingMethod.replace('area-', ''),
            markersAreaEnabled: true,
        }
    } else {
        return {
            trackingBackend: trackingMethod,
            markersAreaEnabled: false,
        }
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Utils);


/***/ }),

/***/ "./three.js/src/threex/arjs-context.js":
/*!*********************************************!*\
  !*** ./three.js/src/threex/arjs-context.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var threexArmarkercontrols__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! threexArmarkercontrols */ "./three.js/src/threex/arjs-markercontrols.js");
/* harmony import */ var jsartoolkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jsartoolkit */ "./node_modules/@ar-js-org/artoolkit5-js/dist/ARToolkit.js");
/* harmony import */ var jsartoolkit__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jsartoolkit__WEBPACK_IMPORTED_MODULE_2__);

 // Alias for dynamic importing
 // TODO comment explanation
const { ARToolkit, ARController } = (jsartoolkit__WEBPACK_IMPORTED_MODULE_2___default());
const artoolkit = new ARToolkit();

const Context = function (parameters) {
    var _this = this

    _this._updatedAt = null

    // handle default parameters
    this.parameters = {
        // AR backend - ['artoolkit']
        trackingBackend: 'artoolkit',
        // debug - true if one should display artoolkit debug canvas, false otherwise
        debug: false,
        // the mode of detection - ['color', 'color_and_matrix', 'mono', 'mono_and_matrix']
        detectionMode: 'mono',
        // type of matrix code - valid iif detectionMode end with 'matrix' - [3x3, 3x3_HAMMING63, 3x3_PARITY65, 4x4, 4x4_BCH_13_9_3, 4x4_BCH_13_5_5]
        matrixCodeType: '3x3',

        // url of the camera parameters
        cameraParametersUrl: Context.baseURL + '../data/data/camera_para.dat',

        // tune the maximum rate of pose detection in the source image
        maxDetectionRate: 60,
        // resolution of at which we detect pose in the source image
        canvasWidth: 640,
        canvasHeight: 480,

        // the patternRatio inside the artoolkit marker - artoolkit only
        patternRatio: 0.5,

        // enable image smoothing or not for canvas copy - default to true
        // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled
        imageSmoothingEnabled: false,
    }
    // parameters sanity check
    console.assert(['artoolkit'].indexOf(this.parameters.trackingBackend) !== -1, 'invalid parameter trackingBackend', this.parameters.trackingBackend)
    console.assert(['color', 'color_and_matrix', 'mono', 'mono_and_matrix'].indexOf(this.parameters.detectionMode) !== -1, 'invalid parameter detectionMode', this.parameters.detectionMode)

    this.arController = null;

    _this.initialized = false


    this._arMarkersControls = []

    //////////////////////////////////////////////////////////////////////////////
    //		setParameters
    //////////////////////////////////////////////////////////////////////////////
    setParameters(parameters)
    function setParameters(parameters) {
        if (parameters === undefined) return
        for (var key in parameters) {
            var newValue = parameters[key]

            if (newValue === undefined) {
                console.warn("Context: '" + key + "' parameter is undefined.")
                continue
            }

            var currentValue = _this.parameters[key]

            if (currentValue === undefined) {
                console.warn("Context: '" + key + "' is not a property of this material.")
                continue
            }

            _this.parameters[key] = newValue
        }
    }
}

Context.prototype.dispatchEvent = three__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher.prototype.dispatchEvent;
Context.prototype.addEventListener = three__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher.prototype.addEventListener;
Context.prototype.hasEventListener = three__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher.prototype.hasEventListener;
Context.prototype.removeEventListener = three__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher.prototype.removeEventListener;

// default to github page
Context.baseURL = 'https://ar-js-org.github.io/AR.js/three.js/'
Context.REVISION = '3.3.3-es6-beta-01'
/**
 * Create a default camera for this trackingBackend
 * @param {string} trackingBackend - the tracking to user
 * @return {THREE.Camera} the created camera
 */
Context.createDefaultCamera = function (trackingBackend) {
    console.assert(false, 'use ARjs.Utils.createDefaultCamera instead')
    // Create a camera
    if (trackingBackend === 'artoolkit') {
        var camera = new three__WEBPACK_IMPORTED_MODULE_0__.Camera();
    } else console.assert(false);
    return camera
}


//////////////////////////////////////////////////////////////////////////////
//		init functions
//////////////////////////////////////////////////////////////////////////////
Context.prototype.init = function (onCompleted) {
    var _this = this
    if (this.parameters.trackingBackend === 'artoolkit') {
        this._initArtoolkit(done);
    } else console.assert(false);
    return

    function done() {
        // dispatch event
        _this.dispatchEvent({
            type: 'initialized'
        });

        _this.initialized = true

        onCompleted && onCompleted()
    }

}
////////////////////////////////////////////////////////////////////////////////
//          update function
////////////////////////////////////////////////////////////////////////////////
Context.prototype.update = function (srcElement) {

    // be sure arController is fully initialized
    if (this.parameters.trackingBackend === 'artoolkit' && this.arController === null) return false;

    // honor this.parameters.maxDetectionRate
    var present = performance.now()
    if (this._updatedAt !== null && present - this._updatedAt < 1000 / this.parameters.maxDetectionRate) {
        return false
    }
    this._updatedAt = present

    var prevVisibleMarkers = []

    // mark all markers to invisible before processing this frame
    this._arMarkersControls.forEach(function (markerControls) {
        if (markerControls.object3d.visible) {
            prevVisibleMarkers.push(markerControls)
        }
        markerControls.object3d.visible = false
    })

    // process this frame
    if (this.parameters.trackingBackend === 'artoolkit') {
        this._updateArtoolkit(srcElement);
    }  else {
        console.assert(false);
    }

    // dispatch event
    this.dispatchEvent({
        type: 'sourceProcessed'
    });

    // After frame is processed, check visibility of each marker to determine if it was found or lost
    this._arMarkersControls.forEach(function (markerControls) {
        var wasVisible = prevVisibleMarkers.includes(markerControls);
        var isVisible = markerControls.object3d.visible;
    
        if (isVisible === true && wasVisible === false) {
            window.dispatchEvent(new CustomEvent('markerFound', {
                detail: markerControls,
            }))
        } else if (isVisible === false && wasVisible === true) {
            window.dispatchEvent(new CustomEvent('markerLost', {
                detail: markerControls,
            }))
        }
    })


    // return true as we processed the frame
    return true;
}

////////////////////////////////////////////////////////////////////////////////
//          Add/Remove markerControls
////////////////////////////////////////////////////////////////////////////////
Context.prototype.addMarker = function (arMarkerControls) {
    console.assert(arMarkerControls instanceof threexArmarkercontrols__WEBPACK_IMPORTED_MODULE_1__.default)
    this._arMarkersControls.push(arMarkerControls)
}

Context.prototype.removeMarker = function (arMarkerControls) {
    console.assert(arMarkerControls instanceof threexArmarkercontrols__WEBPACK_IMPORTED_MODULE_1__.default)
    var index = this._arMarkersControls.indexOf(arMarkerControls);
    if( index < 0 ) {
    	return;
    }
    this._arMarkersControls.splice(index, 1)
}

//////////////////////////////////////////////////////////////////////////////
//		artoolkit specific
//////////////////////////////////////////////////////////////////////////////
Context.prototype._initArtoolkit = function (onCompleted) {
    var _this = this

    // set this._artoolkitProjectionAxisTransformMatrix to change artoolkit projection matrix axis to match usual webgl one
    this._artoolkitProjectionAxisTransformMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4()
    this._artoolkitProjectionAxisTransformMatrix.multiply(new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().makeRotationY(Math.PI))
    this._artoolkitProjectionAxisTransformMatrix.multiply(new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().makeRotationZ(Math.PI))

    // init ARToolkit
    artoolkit.init().then(_ => {
        // init controller
        ARController.initWithDimensions(_this.parameters.canvasWidth, _this.parameters.canvasHeight, _this.parameters.cameraParametersUrl).then((arController) => {
            _this.arController = arController

            // honor this.parameters.imageSmoothingEnabled
            arController.ctx.mozImageSmoothingEnabled = _this.parameters.imageSmoothingEnabled;
            arController.ctx.webkitImageSmoothingEnabled = _this.parameters.imageSmoothingEnabled;
            arController.ctx.msImageSmoothingEnabled = _this.parameters.imageSmoothingEnabled;
            arController.ctx.imageSmoothingEnabled = _this.parameters.imageSmoothingEnabled;

            // honor this.parameters.debug
            if (_this.parameters.debug === true) {
                arController.debugSetup();
                arController.canvas.style.position = 'absolute'
                arController.canvas.style.top = '0px'
                arController.canvas.style.opacity = '0.6'
                arController.canvas.style.pointerEvents = 'none'
                arController.canvas.style.zIndex = '-1'
            }

            // setPatternDetectionMode
            var detectionModes = {
                'color': artoolkit.AR_TEMPLATE_MATCHING_COLOR,
                'color_and_matrix': artoolkit.AR_TEMPLATE_MATCHING_COLOR_AND_MATRIX,
                'mono': artoolkit.AR_TEMPLATE_MATCHING_MONO,
                'mono_and_matrix': artoolkit.AR_TEMPLATE_MATCHING_MONO_AND_MATRIX,
            }
            var detectionMode = detectionModes[_this.parameters.detectionMode]
            console.assert(detectionMode !== undefined)
            arController.setPatternDetectionMode(detectionMode);

            // setMatrixCodeType
            var matrixCodeTypes = {
                '3x3': artoolkit.AR_MATRIX_CODE_3x3,
                '3x3_HAMMING63': artoolkit.AR_MATRIX_CODE_3x3_HAMMING63,
                '3x3_PARITY65': artoolkit.AR_MATRIX_CODE_3x3_PARITY65,
                '4x4': artoolkit.AR_MATRIX_CODE_4x4,
                '4x4_BCH_13_9_3': artoolkit.AR_MATRIX_CODE_4x4_BCH_13_9_3,
                '4x4_BCH_13_5_5': artoolkit.AR_MATRIX_CODE_4x4_BCH_13_5_5,
            }
            var matrixCodeType = matrixCodeTypes[_this.parameters.matrixCodeType]
            console.assert(matrixCodeType !== undefined)
            arController.setMatrixCodeType(matrixCodeType);

            // set the patternRatio for artoolkit
            arController.setPattRatio(_this.parameters.patternRatio);

            // set thresholding in artoolkit
            // this seems to be the default
            // arController.setThresholdMode(artoolkit.AR_LABELING_THRESH_MODE_MANUAL)
            // adatative consume a LOT of cpu...
            // arController.setThresholdMode(artoolkit.AR_LABELING_THRESH_MODE_AUTO_ADAPTIVE)
            // arController.setThresholdMode(artoolkit.AR_LABELING_THRESH_MODE_AUTO_OTSU)

            // notify
            onCompleted()
        });
    });
    return this
}

/**
 * return the projection matrix
 */
Context.prototype.getProjectionMatrix = function (srcElement) {


    // FIXME rename this function to say it is artoolkit specific - getArtoolkitProjectMatrix
    // keep a backward compatibility with a console.warn

    console.assert(this.parameters.trackingBackend === 'artoolkit')
    console.assert(this.arController, 'arController MUST be initialized to call this function')
    // get projectionMatrixArr from artoolkit
    var projectionMatrixArr = this.arController.getCameraMatrix();
    var projectionMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().fromArray(projectionMatrixArr)

    // return the result
    return projectionMatrix
}

Context.prototype._updateArtoolkit = function (srcElement) {
    this.arController.process(srcElement)
}

//////////////////////////////////////////////////////////////////////////////
//		dispose function
//////////////////////////////////////////////////////////////////////////////
Context.prototype.dispose = function () {
	this.initialized = false;

	// markers
	this._arMarkersControls.forEach(function (markerControls) {
		console.assert(markerControls instanceof threexArmarkercontrols__WEBPACK_IMPORTED_MODULE_1__.default);
		markerControls.dispose();
	} );
	this._arMarkersControls = [];

	// cameraParam
	if (this.arController && this.arController.cameraParam && this.arController.cameraParam.dispose) {
		this.arController.cameraParam.dispose();
	}

	
	// ARController
	if( this.arController && this.arController.dispose ) {
		this.arController.dispose();
	}
	this.arController = null;

    // class properties
    this._artoolkitProjectionAxisTransformMatrix = null;

	// artoolkit
	// NOTE: since the instance of ARToolkit is created globally 
	// we should probably do not call .teardown() ... ?
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Context);

/***/ }),

/***/ "./three.js/src/threex/arjs-markercontrols.js":
/*!****************************************************!*\
  !*** ./three.js/src/threex/arjs-markercontrols.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _threex_arbasecontrols__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./threex-arbasecontrols */ "./three.js/src/threex/threex-arbasecontrols.js");
/* harmony import */ var jsartoolkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jsartoolkit */ "./node_modules/@ar-js-org/artoolkit5-js/dist/ARToolkit.js");
/* harmony import */ var jsartoolkit__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jsartoolkit__WEBPACK_IMPORTED_MODULE_2__);


 // TODO comment explanation
const { ARToolkit } = (jsartoolkit__WEBPACK_IMPORTED_MODULE_2___default());

const MarkerControls = function(context, object3d, parameters){
	var _this = this

	_threex_arbasecontrols__WEBPACK_IMPORTED_MODULE_1__.default.call(this, object3d)

	this.context = context
	// handle default parameters
	this.parameters = {
		// size of the marker in meter
		size : 1,
		// type of marker - ['pattern', 'barcode', 'unknown' ]
		type : 'unknown',
		// url of the pattern - IIF type='pattern'
		patternUrl : null,
		// value of the barcode - IIF type='barcode'
		barcodeValue : null,
		// change matrix mode - [modelViewMatrix, cameraTransformMatrix]
		changeMatrixMode : 'modelViewMatrix',
		// minimal confidence in the marke recognition - between [0, 1] - default to 1
		minConfidence: 0.6,
		// turn on/off camera smoothing
		smooth: false,
		// number of matrices to smooth tracking over, more = smoother but slower follow
		smoothCount: 5,
		// distance tolerance for smoothing, if smoothThreshold # of matrices are under tolerance, tracking will stay still
		smoothTolerance: 0.01,
		// threshold for smoothing, will keep still unless enough matrices are over tolerance
		smoothThreshold: 2,
	}

	// sanity check
	var possibleValues = ['pattern', 'barcode', 'unknown']
	console.assert(possibleValues.indexOf(this.parameters.type) !== -1, 'illegal value', this.parameters.type)
	var possibleValues = ['modelViewMatrix', 'cameraTransformMatrix' ]
	console.assert(possibleValues.indexOf(this.parameters.changeMatrixMode) !== -1, 'illegal value', this.parameters.changeMatrixMode)


        // create the marker Root
	this.object3d = object3d
	this.object3d.matrixAutoUpdate = false;
	this.object3d.visible = false

	//////////////////////////////////////////////////////////////////////////////
	//		setParameters
	//////////////////////////////////////////////////////////////////////////////
	setParameters(parameters)
	function setParameters(parameters){
		if( parameters === undefined )	return
		for( var key in parameters ){
			var newValue = parameters[ key ]

			if( newValue === undefined ){
				console.warn( "ArMarkerControls: '" + key + "' parameter is undefined." )
				continue
			}

			var currentValue = _this.parameters[ key ]

			if( currentValue === undefined ){
				console.warn( "ArMarkerControls: '" + key + "' is not a property of this material." )
				continue
			}

			_this.parameters[ key ] = newValue
		}
	}

	if (this.parameters.smooth) {
		this.smoothMatrices = []; // last DEBOUNCE_COUNT modelViewMatrix
	}

	//////////////////////////////////////////////////////////////////////////////
	//		Code Separator
	//////////////////////////////////////////////////////////////////////////////
	// add this marker to artoolkitsystem
	// TODO rename that .addMarkerControls
	context.addMarker(this)

	if( _this.context.parameters.trackingBackend === 'artoolkit' ){
		this._initArtoolkit()
	}else console.assert(false)
}

MarkerControls.prototype = Object.create( _threex_arbasecontrols__WEBPACK_IMPORTED_MODULE_1__.default.prototype );
MarkerControls.prototype.constructor = MarkerControls;


//////////////////////////////////////////////////////////////////////////////
//		dispose instance
//////////////////////////////////////////////////////////////////////////////
MarkerControls.prototype.dispose = function(){
	if( this.context && this.context.arController ) {
		this.context.arController.removeEventListener('getMarker', this.onGetMarker);
	}

	this.context.removeMarker(this);
	
	this.object3d = null;
	this.smoothMatrices = [];
}

//////////////////////////////////////////////////////////////////////////////
//		update controls with new modelViewMatrix
//////////////////////////////////////////////////////////////////////////////

/**
 * When you actually got a new modelViewMatrix, you need to perfom a whole bunch
 * of things. it is done here.
 */
MarkerControls.prototype.updateWithModelViewMatrix = function(modelViewMatrix){
	var markerObject3D = this.object3d;

	// mark object as visible
	markerObject3D.visible = true

	if( this.context.parameters.trackingBackend === 'artoolkit' ){
		// apply context._axisTransformMatrix - change artoolkit axis to match usual webgl one
		var tmpMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().copy(this.context._artoolkitProjectionAxisTransformMatrix)
		tmpMatrix.multiply(modelViewMatrix)

		modelViewMatrix.copy(tmpMatrix)
	}else console.assert(false)

	// change axis orientation on marker - artoolkit say Z is normal to the marker - ar.js say Y is normal to the marker
	var markerAxisTransformMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().makeRotationX(Math.PI/2)
	modelViewMatrix.multiply(markerAxisTransformMatrix)

	var renderReqd = false;

	// change markerObject3D.matrix based on parameters.changeMatrixMode
	if( this.parameters.changeMatrixMode === 'modelViewMatrix' ){
		if (this.parameters.smooth) {
			var sum,
					i, j,
					averages, // average values for matrix over last smoothCount
					exceedsAverageTolerance = 0;

			this.smoothMatrices.push(modelViewMatrix.elements.slice()); // add latest

			if (this.smoothMatrices.length < (this.parameters.smoothCount + 1)) {
				markerObject3D.matrix.copy(modelViewMatrix); // not enough for average
			} else {
				this.smoothMatrices.shift(); // remove oldest entry
				averages = [];

				for (i in modelViewMatrix.elements) { // loop over entries in matrix
					sum = 0;
					for (j in this.smoothMatrices) { // calculate average for this entry
						sum += this.smoothMatrices[j][i];
					}
					averages[i] = sum / this.parameters.smoothCount;
					// check how many elements vary from the average by at least AVERAGE_MATRIX_TOLERANCE
					if (Math.abs(averages[i] - modelViewMatrix.elements[i]) >= this.parameters.smoothTolerance) {
						exceedsAverageTolerance++;
					}
				}

				// if moving (i.e. at least AVERAGE_MATRIX_THRESHOLD entries are over AVERAGE_MATRIX_TOLERANCE)
				if (exceedsAverageTolerance >= this.parameters.smoothThreshold) {
					// then update matrix values to average, otherwise, don't render to minimize jitter
					for (i in modelViewMatrix.elements) {
						modelViewMatrix.elements[i] = averages[i];
					}
					markerObject3D.matrix.copy(modelViewMatrix);
					renderReqd = true; // render required in animation loop
				}
			}
		} else {
			markerObject3D.matrix.copy(modelViewMatrix)
		}
	}else if( this.parameters.changeMatrixMode === 'cameraTransformMatrix' ){
		markerObject3D.matrix.copy(modelViewMatrix).invert()
	}else {
		console.assert(false)
	}

	// decompose - the matrix into .position, .quaternion, .scale
	markerObject3D.matrix.decompose(markerObject3D.position, markerObject3D.quaternion, markerObject3D.scale)

	// dispatchEvent
	this.dispatchEvent( { type: 'markerFound' } );

	return renderReqd;
}

//////////////////////////////////////////////////////////////////////////////
//		utility functions
//////////////////////////////////////////////////////////////////////////////

/**
 * provide a name for a marker
 * - silly heuristic for now
 * - should be improved
 */
MarkerControls.prototype.name = function(){
	var name = ''
	name += this.parameters.type;
	if( this.parameters.type === 'pattern' ){
		var url = this.parameters.patternUrl
		var basename = url.replace(/^.*\//g, '')
		name += ' - ' + basename
	}else if( this.parameters.type === 'barcode' ){
		name += ' - ' + this.parameters.barcodeValue
	}else{
		console.assert(false, 'no .name() implemented for this marker controls')
	}
	return name
}

//////////////////////////////////////////////////////////////////////////////
//		init for Artoolkit
//////////////////////////////////////////////////////////////////////////////
MarkerControls.prototype._initArtoolkit = function(){
	var _this = this

	var artoolkitMarkerId = null

	var delayedInitTimerId = setInterval(function(){
		// check if arController is init
		var arController = _this.context.arController
		if( arController === null )	return
		// stop looping if it is init
		clearInterval(delayedInitTimerId)
		delayedInitTimerId = null
		// launch the _postInitArtoolkit
		postInit()
	}, 1000/50)

	return

	function postInit(){
		// check if arController is init
		var arController = _this.context.arController
		console.assert(arController !== null )

		// start tracking this pattern
		if( _this.parameters.type === 'pattern' ){
	                arController.loadMarker(_this.parameters.patternUrl).then(function(markerId) {
				artoolkitMarkerId = markerId
	                        arController.trackPatternMarkerId(artoolkitMarkerId, _this.parameters.size);
	                });
		}else if( _this.parameters.type === 'barcode' ){
			artoolkitMarkerId = _this.parameters.barcodeValue
			arController.trackBarcodeMarkerId(artoolkitMarkerId, _this.parameters.size);
		}else if( _this.parameters.type === 'unknown' ){
			artoolkitMarkerId = null
		}else{
			console.log(false, 'invalid marker type', _this.parameters.type)
		}

		// listen to the event
		arController.addEventListener('getMarker', onGetMarker)

	}

	function onMarkerFound(event){
		// honor his.parameters.minConfidence
		if( event.data.type === ARToolkit.PATTERN_MARKER && event.data.marker.cfPatt < _this.parameters.minConfidence )	return
		if( event.data.type === ARToolkit.BARCODE_MARKER && event.data.marker.cfMatrix < _this.parameters.minConfidence )	return

		var modelViewMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().fromArray(event.data.matrix)
		_this.updateWithModelViewMatrix(modelViewMatrix)
	}

	function onGetMarker(event){
		if( event.data.type === ARToolkit.PATTERN_MARKER && _this.parameters.type === 'pattern' ){
			if( artoolkitMarkerId === null )	return
			if( event.data.marker.idPatt === artoolkitMarkerId ) onMarkerFound(event)
		}else if( event.data.type === ARToolkit.BARCODE_MARKER && _this.parameters.type === 'barcode' ){
			// console.log('BARCODE_MARKER idMatrix', event.data.marker.idMatrix, artoolkitMarkerId )
			if( artoolkitMarkerId === null )	return
			if( event.data.marker.idMatrix === artoolkitMarkerId )  onMarkerFound(event)
		}else if( event.data.type === ARToolkit.UNKNOWN_MARKER && _this.parameters.type === 'unknown'){
			onMarkerFound(event)
		}
	}

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MarkerControls);


/***/ }),

/***/ "./three.js/src/threex/arjs-profile.js":
/*!*********************************************!*\
  !*** ./three.js/src/threex/arjs-profile.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _new_api_arjs_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../new-api/arjs-utils */ "./three.js/src/new-api/arjs-utils.js");
/* harmony import */ var _arjs_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./arjs-context */ "./three.js/src/threex/arjs-context.js");

 // TODO context build-dependent

/**
 * ArToolkitProfile helps you build parameters for artoolkit
 * - it is fully independent of the rest of the code
 * - all the other classes are still expecting normal parameters
 * - you can use this class to understand how to tune your specific usecase
 * - it is made to help people to build parameters without understanding all the underlying details.
 */
const Profile = function () {
    this.reset()

    this.performance('default')
}

Profile.prototype._guessPerformanceLabel = function () {
    var isMobile = navigator.userAgent.match(/Android/i)
        || navigator.userAgent.match(/webOS/i)
        || navigator.userAgent.match(/iPhone/i)
        || navigator.userAgent.match(/iPad/i)
        || navigator.userAgent.match(/iPod/i)
        || navigator.userAgent.match(/BlackBerry/i)
        || navigator.userAgent.match(/Windows Phone/i)
        ? true : false
    if (isMobile === true) {
        return 'phone-normal'
    }
    return 'desktop-normal'
}

//////////////////////////////////////////////////////////////////////////////
//		Code Separator
//////////////////////////////////////////////////////////////////////////////

/**
 * reset all parameters
 */
Profile.prototype.reset = function () {
    this.sourceParameters = {
        // to read from the webcam
        sourceType: 'webcam',
    }

    this.contextParameters = {
        cameraParametersUrl: _arjs_context__WEBPACK_IMPORTED_MODULE_1__.default.baseURL + '../data/data/camera_para.dat', // TODO dependent of build?
        detectionMode: 'mono',
    }
    this.defaultMarkerParameters = {
        type: 'pattern',
        patternUrl: _arjs_context__WEBPACK_IMPORTED_MODULE_1__.default.baseURL + '../data/data/patt.hiro', // TODO dependent of build?
        changeMatrixMode: 'modelViewMatrix',
    }
    return this
};

//////////////////////////////////////////////////////////////////////////////
//		Performance
//////////////////////////////////////////////////////////////////////////////



Profile.prototype.performance = function (label) {

    if (label === 'default') {
        label = this._guessPerformanceLabel()
    }

    if (label === 'desktop-fast') {
        this.contextParameters.canvasWidth = 640 * 3
        this.contextParameters.canvasHeight = 480 * 3

        this.contextParameters.maxDetectionRate = 30
    } else if (label === 'desktop-normal') {
        this.contextParameters.canvasWidth = 640
        this.contextParameters.canvasHeight = 480

        this.contextParameters.maxDetectionRate = 60
    } else if (label === 'phone-normal') {
        this.contextParameters.canvasWidth = 80 * 4
        this.contextParameters.canvasHeight = 60 * 4

        this.contextParameters.maxDetectionRate = 30
    } else if (label === 'phone-slow') {
        this.contextParameters.canvasWidth = 80 * 3
        this.contextParameters.canvasHeight = 60 * 3

        this.contextParameters.maxDetectionRate = 30
    } else {
        console.assert(false, 'unknonwn label ' + label)
    }
    return this
}

//////////////////////////////////////////////////////////////////////////////
//		Marker
//////////////////////////////////////////////////////////////////////////////


Profile.prototype.defaultMarker = function (trackingBackend) {
    trackingBackend = trackingBackend || this.contextParameters.trackingBackend

    if (trackingBackend === 'artoolkit') {
        this.contextParameters.detectionMode = 'mono'
        this.defaultMarkerParameters.type = 'pattern'
        this.defaultMarkerParameters.patternUrl = _arjs_context__WEBPACK_IMPORTED_MODULE_1__.default.baseURL + '../data/data/patt.hiro' // TODO dependent of build?
    } else console.assert(false)

    return this
}
//////////////////////////////////////////////////////////////////////////////
//		Source
//////////////////////////////////////////////////////////////////////////////
Profile.prototype.sourceWebcam = function () {
    this.sourceParameters.sourceType = 'webcam'
    delete this.sourceParameters.sourceUrl
    return this
}

Profile.prototype.sourceVideo = function (url) {
    this.sourceParameters.sourceType = 'video'
    this.sourceParameters.sourceUrl = url
    return this
}

Profile.prototype.sourceImage = function (url) {
    this.sourceParameters.sourceType = 'image'
    this.sourceParameters.sourceUrl = url
    return this
}

//////////////////////////////////////////////////////////////////////////////
//		trackingBackend
//////////////////////////////////////////////////////////////////////////////
Profile.prototype.trackingBackend = function (trackingBackend) {
    console.warn('stop profile.trackingBackend() obsolete function. use .trackingMethod instead')
    this.contextParameters.trackingBackend = trackingBackend
    return this
}

//////////////////////////////////////////////////////////////////////////////
//		trackingBackend
//////////////////////////////////////////////////////////////////////////////
Profile.prototype.changeMatrixMode = function (changeMatrixMode) {
    this.defaultMarkerParameters.changeMatrixMode = changeMatrixMode
    return this
}

//////////////////////////////////////////////////////////////////////////////
//		trackingBackend
//////////////////////////////////////////////////////////////////////////////
Profile.prototype.trackingMethod = function (trackingMethod) {
    var data = _new_api_arjs_utils__WEBPACK_IMPORTED_MODULE_0__.default.parseTrackingMethod(trackingMethod)
    this.defaultMarkerParameters.markersAreaEnabled = data.markersAreaEnabled
    this.contextParameters.trackingBackend = data.trackingBackend
    return this
}

/**
 * check if the profile is valid. Throw an exception is not valid
 */
Profile.prototype.checkIfValid = function () {
    return this
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Profile);


/***/ }),

/***/ "./three.js/src/threex/arjs-source.js":
/*!********************************************!*\
  !*** ./three.js/src/threex/arjs-source.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const Source = function (parameters) {
    var _this = this

    this.ready = false
    this.domElement = null

    // handle default parameters
    this.parameters = {
        // type of source - ['webcam', 'image', 'video']
        sourceType: 'webcam',
        // url of the source - valid if sourceType = image|video
        sourceUrl: null,

        // Device id of the camera to use (optional)
        deviceId: null,

        // resolution of at which we initialize in the source image
        sourceWidth: 640,
        sourceHeight: 480,
        // resolution displayed for the source
        displayWidth: 640,
        displayHeight: 480,
    }
    //////////////////////////////////////////////////////////////////////////////
    //		setParameters
    //////////////////////////////////////////////////////////////////////////////
    setParameters(parameters)
    function setParameters(parameters) {
        if (parameters === undefined) return
        for (var key in parameters) {
            var newValue = parameters[key]

            if (newValue === undefined) {
                console.warn("ArToolkitSource: '" + key + "' parameter is undefined.")
                continue
            }

            var currentValue = _this.parameters[key]

            if (currentValue === undefined) {
                console.warn("ArToolkitSource: '" + key + "' is not a property of this material.")
                continue
            }

            _this.parameters[key] = newValue
        }
    }

    this.onInitialClick = function() {
        if( this.domElement && this.domElement.play ) {
            this.domElement.play().then( () => {});
        }
    }
}

//////////////////////////////////////////////////////////////////////////////
//		Code Separator
//////////////////////////////////////////////////////////////////////////////
Source.prototype.init = function (onReady, onError) {
    var _this = this

    if (this.parameters.sourceType === 'image') {
        var domElement = this._initSourceImage(onSourceReady, onError)
    } else if (this.parameters.sourceType === 'video') {
        var domElement = this._initSourceVideo(onSourceReady, onError)
    } else if (this.parameters.sourceType === 'webcam') {
        // var domElement = this._initSourceWebcamOld(onSourceReady)
        var domElement = this._initSourceWebcam(onSourceReady, onError)
    } else {
        console.assert(false)
    }

    // attach
    this.domElement = domElement
    this.domElement.style.position = 'absolute'
    this.domElement.style.top = '0px'
    this.domElement.style.left = '0px'
    this.domElement.style.zIndex = '-2'
    this.domElement.setAttribute('id', 'arjs-video');

    return this
    function onSourceReady() {
        if( !_this.domElement ) {
            return;
        }

        document.body.appendChild(_this.domElement);
        window.dispatchEvent(new CustomEvent('arjs-video-loaded', {
            detail: {
                component: document.querySelector('#arjs-video'),
            },
        }));

        _this.ready = true

        onReady && onReady()
    }
}

////////////////////////////////////////////////////////////////////////////////
//          init image source
////////////////////////////////////////////////////////////////////////////////


Source.prototype._initSourceImage = function (onReady) {
    // TODO make it static
    var domElement = document.createElement('img');
    domElement.src = this.parameters.sourceUrl;

    domElement.width = this.parameters.sourceWidth;
    domElement.height = this.parameters.sourceHeight;
    domElement.style.width = this.parameters.displayWidth + 'px';
    domElement.style.height = this.parameters.displayHeight + 'px';

    domElement.onload = onReady;
    return domElement
}

////////////////////////////////////////////////////////////////////////////////
//          init video source
////////////////////////////////////////////////////////////////////////////////


Source.prototype._initSourceVideo = function (onReady) {
    // TODO make it static
    var domElement = document.createElement('video');
    domElement.src = this.parameters.sourceUrl;

    domElement.style.objectFit = 'initial';

    domElement.autoplay = true;
    domElement.webkitPlaysinline = true;
    domElement.controls = false;
    domElement.loop = true;
    domElement.muted = true;

    // start the video on first click if not started automatically
    document.body.addEventListener('click', this.onInitialClick, {once:true});

    domElement.width = this.parameters.sourceWidth;
    domElement.height = this.parameters.sourceHeight;
    domElement.style.width = this.parameters.displayWidth + 'px';
    domElement.style.height = this.parameters.displayHeight + 'px';

    domElement.onloadeddata = onReady;
    return domElement
}

////////////////////////////////////////////////////////////////////////////////
//          init webcam source
////////////////////////////////////////////////////////////////////////////////

Source.prototype._initSourceWebcam = function (onReady, onError) {
    var _this = this

    // init default value
    onError = onError || function (error) {
        var event = new CustomEvent('camera-error', { error: error });
        window.dispatchEvent(event);

        setTimeout(() => {
            if (!document.getElementById('error-popup')) {
                var errorPopup = document.createElement('div');
                errorPopup.innerHTML = 'Webcam Error\nName: ' + error.name + '\nMessage: ' + error.message
                errorPopup.setAttribute('id', 'error-popup');
                document.body.appendChild(errorPopup);
            }
        }, 1000);
    }

    var domElement = document.createElement('video');
    domElement.setAttribute('autoplay', '');
    domElement.setAttribute('muted', '');
    domElement.setAttribute('playsinline', '');
    domElement.style.width = this.parameters.displayWidth + 'px'
    domElement.style.height = this.parameters.displayHeight + 'px'

    // check API is available
    if (navigator.mediaDevices === undefined
        || navigator.mediaDevices.enumerateDevices === undefined
        || navigator.mediaDevices.getUserMedia === undefined) {
        if (navigator.mediaDevices === undefined) var fctName = 'navigator.mediaDevices'
        else if (navigator.mediaDevices.enumerateDevices === undefined) var fctName = 'navigator.mediaDevices.enumerateDevices'
        else if (navigator.mediaDevices.getUserMedia === undefined) var fctName = 'navigator.mediaDevices.getUserMedia'
        else console.assert(false)
        onError({
            name: '',
            message: 'WebRTC issue-! ' + fctName + ' not present in your browser'
        });
        return null
    }

    // get available devices
    navigator.mediaDevices.enumerateDevices().then(function (devices) {
        var userMediaConstraints = {
            audio: false,
            video: {
                facingMode: 'environment',
                width: {
                    ideal: _this.parameters.sourceWidth,
                    // min: 1024,
                    // max: 1920
                },
                height: {
                    ideal: _this.parameters.sourceHeight,
                    // min: 776,
                    // max: 1080
                }
            }
        };

        if (null !== _this.parameters.deviceId) {
            userMediaConstraints.video.deviceId = {
                exact: _this.parameters.deviceId
            };
        }

        // get a device which satisfy the constraints
        navigator.mediaDevices.getUserMedia(userMediaConstraints).then(function success(stream) {
            // set the .src of the domElement
            domElement.srcObject = stream;

            var event = new CustomEvent('camera-init', { stream: stream });
            window.dispatchEvent(event);

            // start the video on first click if not started automatically
            document.body.addEventListener('click', _this.onInitialClick, {once:true});            

            onReady();
        }).catch(function (error) {
            onError({
                name: error.name,
                message: error.message
            });
        });
    }).catch(function (error) {
        onError({
            message: error.message
        });
    });

    return domElement
}

////////////////////////////////////////////////////////////////////////////////
//          dispose source
////////////////////////////////////////////////////////////////////////////////

Source.prototype.dispose = function () {
    this.ready = false;

    switch (this.parameters.sourceType) {
        case 'image':
            this._disposeSourceImage();
            break;

        case 'video':
            this._disposeSourceVideo();
            break;

        case 'webcam':
            this._disposeSourceWebcam();
            break;
    }

    this.domElement = null;

    document.body.removeEventListener('click', this.onInitialClick, {once:true});            
}	

////////////////////////////////////////////////////////////////////////////////
//          dispose image source
////////////////////////////////////////////////////////////////////////////////

Source.prototype._disposeSourceImage = function () {
    var domElement = document.querySelector('#arjs-video');

    if( !domElement ) {
        return;
    }

    domElement.remove();
}

////////////////////////////////////////////////////////////////////////////////
//          dispose video source
////////////////////////////////////////////////////////////////////////////////

Source.prototype._disposeSourceVideo = function () {
    var domElement = document.querySelector('#arjs-video');
    
    if( !domElement ) {
        return;
    }

    // https://html.spec.whatwg.org/multipage/media.html#best-practices-for-authors-using-media-elements
    domElement.pause();
    domElement.removeAttribute('src'); 
    domElement.load(); 

    domElement.remove();    
}

////////////////////////////////////////////////////////////////////////////////
//          dispose webcam source
////////////////////////////////////////////////////////////////////////////////

Source.prototype._disposeSourceWebcam = function () {
    var domElement = document.querySelector('#arjs-video');

    if( !domElement ) {
        return;
    }

    // https://stackoverflow.com/a/12436772
    if( domElement.srcObject && domElement.srcObject.getTracks ) {
        domElement.srcObject.getTracks().map((track) => track.stop());    
    }	

    domElement.remove();	
}

//////////////////////////////////////////////////////////////////////////////
//		Handle Mobile Torch
//////////////////////////////////////////////////////////////////////////////
Source.prototype.hasMobileTorch = function () {
    var stream = arToolkitSource.domElement.srcObject
    if (stream instanceof MediaStream === false) return false

    if (this._currentTorchStatus === undefined) {
        this._currentTorchStatus = false
    }

    var videoTrack = stream.getVideoTracks()[0];

    // if videoTrack.getCapabilities() doesnt exist, return false now
    if (videoTrack.getCapabilities === undefined) return false

    var capabilities = videoTrack.getCapabilities()

    return capabilities.torch ? true : false
}

/**
 * toggle the flash/torch of the mobile fun if applicable.
 * Great post about it https://www.oberhofer.co/mediastreamtrack-and-its-capabilities/
 */
Source.prototype.toggleMobileTorch = function () {
    // sanity check
    console.assert(this.hasMobileTorch() === true)

    var stream = arToolkitSource.domElement.srcObject
    if (stream instanceof MediaStream === false) {
        if (!document.getElementById('error-popup')) {
            var errorPopup = document.createElement('div');
            errorPopup.innerHTML = 'enabling mobile torch is available only on webcam'
            errorPopup.setAttribute('id', 'error-popup');
            document.body.appendChild(errorPopup);
        }
        return
    }
});

    if (this._currentTorchStatus === undefined) {
        this._currentTorchStatus = false
    }

    var videoTrack = stream.getVideoTracks()[0];
    var capabilities = videoTrack.getCapabilities()

    if (!capabilities.torch) {
        if (!document.getElementById('error-popup')) {
            var errorPopup = document.createElement('div');
            errorPopup.innerHTML = 'no mobile torch is available on your camera'
            errorPopup.setAttribute('id', 'error-popup');
            document.body.appendChild(errorPopup);
        }
        return
    }

    this._currentTorchStatus = this._currentTorchStatus === false ? true : false
    videoTrack.applyConstraints({
        advanced: [{
            torch: this._currentTorchStatus
        }]
    }).catch(function (error) {
        console.log(error)
    });
}

Source.prototype.domElementWidth = function () {
    return parseInt(this.domElement.style.width)
}
Source.prototype.domElementHeight = function () {
    return parseInt(this.domElement.style.height)
}

////////////////////////////////////////////////////////////////////////////////
//          handle resize
////////////////////////////////////////////////////////////////////////////////

Source.prototype.onResizeElement = function () {
    var _this = this
    var screenWidth = window.innerWidth
    var screenHeight = window.innerHeight

    // sanity check
    console.assert(arguments.length === 0)

    // compute sourceWidth, sourceHeight
    if (this.domElement.nodeName === "IMG") {
        var sourceWidth = this.domElement.naturalWidth
        var sourceHeight = this.domElement.naturalHeight
    } else if (this.domElement.nodeName === "VIDEO") {
        var sourceWidth = this.domElement.videoWidth
        var sourceHeight = this.domElement.videoHeight
    } else {
        console.assert(false)
    }

    // compute sourceAspect
    var sourceAspect = sourceWidth / sourceHeight
    // compute screenAspect
    var screenAspect = screenWidth / screenHeight

    // if screenAspect < sourceAspect, then change the width, else change the height
    if (screenAspect < sourceAspect) {
        // compute newWidth and set .width/.marginLeft
        var newWidth = sourceAspect * screenHeight
        this.domElement.style.width = newWidth + 'px'
        this.domElement.style.marginLeft = -(newWidth - screenWidth) / 2 + 'px'

        // init style.height/.marginTop to normal value
        this.domElement.style.height = screenHeight + 'px'
        this.domElement.style.marginTop = '0px'
    } else {
        // compute newHeight and set .height/.marginTop
        var newHeight = 1 / (sourceAspect / screenWidth)
        this.domElement.style.height = newHeight + 'px'
        this.domElement.style.marginTop = -(newHeight - screenHeight) / 2 + 'px'

        // init style.width/.marginLeft to normal value
        this.domElement.style.width = screenWidth + 'px'
        this.domElement.style.marginLeft = '0px'
    }
}
/*
Source.prototype.copyElementSizeTo = function(otherElement){
	otherElement.style.width = this.domElement.style.width
	otherElement.style.height = this.domElement.style.height
	otherElement.style.marginLeft = this.domElement.style.marginLeft
	otherElement.style.marginTop = this.domElement.style.marginTop
}
*/

Source.prototype.copyElementSizeTo = function (otherElement) {

    if (window.innerWidth > window.innerHeight) {
        //landscape
        otherElement.style.width = this.domElement.style.width
        otherElement.style.height = this.domElement.style.height
        otherElement.style.marginLeft = this.domElement.style.marginLeft
        otherElement.style.marginTop = this.domElement.style.marginTop
    }
    else {
        //portrait
        otherElement.style.height = this.domElement.style.height
        otherElement.style.width = (parseInt(otherElement.style.height) * 4 / 3) + "px";
        otherElement.style.marginLeft = ((window.innerWidth - parseInt(otherElement.style.width)) / 2) + "px";
        otherElement.style.marginTop = 0;
    }

}

//////////////////////////////////////////////////////////////////////////////
//		Code Separator
//////////////////////////////////////////////////////////////////////////////

Source.prototype.copySizeTo = function () {
    console.warn('obsolete function arToolkitSource.copySizeTo. Use arToolkitSource.copyElementSizeTo')
    this.copyElementSizeTo.apply(this, arguments)
}

//////////////////////////////////////////////////////////////////////////////
//		Code Separator
//////////////////////////////////////////////////////////////////////////////

Source.prototype.onResize = function (arToolkitContext, renderer, camera) {
    if (arguments.length !== 3) {
        console.warn('obsolete function arToolkitSource.onResize. Use arToolkitSource.onResizeElement')
        return this.onResizeElement.apply(this, arguments)
    }

    var trackingBackend = arToolkitContext.parameters.trackingBackend


    // RESIZE DOMELEMENT
    if (trackingBackend === 'artoolkit') {

        this.onResizeElement()

        var isAframe = renderer.domElement.dataset.aframeCanvas ? true : false
        if (isAframe === false) {
            this.copyElementSizeTo(renderer.domElement)
        } else {

        }

        if (arToolkitContext.arController !== null) {
            this.copyElementSizeTo(arToolkitContext.arController.canvas)
        }
    } else console.assert(false, 'unhandled trackingBackend ' + trackingBackend)


    // UPDATE CAMERA
    if (trackingBackend === 'artoolkit') {
        if (arToolkitContext.arController !== null) {
            camera.projectionMatrix.copy(arToolkitContext.getProjectionMatrix());
        }
    } else console.assert(false, 'unhandled trackingBackend ' + trackingBackend)
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Source);

/***/ }),

/***/ "./three.js/src/threex/threex-arbasecontrols.js":
/*!******************************************************!*\
  !*** ./three.js/src/threex/threex-arbasecontrols.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);


const ArBaseControls = function(object3d) {
	this.id = ArBaseControls.id++

	this.object3d = object3d
	this.object3d.matrixAutoUpdate = false;
	this.object3d.visible = false

	// Events to honor
	// this.dispatchEvent({ type: 'becameVisible' })
	// this.dispatchEvent({ type: 'markerVisible' })	// replace markerFound
	// this.dispatchEvent({ type: 'becameUnVisible' })
}

ArBaseControls.id = 0

ArBaseControls.prototype = Object.create(three__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher.prototype);

//////////////////////////////////////////////////////////////////////////////
//		Functions
//////////////////////////////////////////////////////////////////////////////
/**
 * error catching function for update()
 */
ArBaseControls.prototype.update = function(){
	console.assert(false, 'you need to implement your own update')
}

/**
 * error catching function for name()
 */
ArBaseControls.prototype.name = function(){
	console.assert(false, 'you need to implement your own .name()')
	return 'Not yet implemented - name()'
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ArBaseControls);


/***/ }),

/***/ "./three.js/src/threex/threex-armarkerhelper.js":
/*!******************************************************!*\
  !*** ./three.js/src/threex/threex-armarkerhelper.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);


const ArMarkerHelper = function(markerControls){
	this.object3d = new three__WEBPACK_IMPORTED_MODULE_0__.Group

	var mesh = new three__WEBPACK_IMPORTED_MODULE_0__.AxesHelper()
	this.object3d.add(mesh)

	var text = markerControls.id
	// debugger
	// var text = markerControls.parameters.patternUrl.slice(-1).toUpperCase();

	var canvas = document.createElement( 'canvas' );
	canvas.width =  64;
	canvas.height = 64;

	var context = canvas.getContext( '2d' );
	var texture = new three__WEBPACK_IMPORTED_MODULE_0__.CanvasTexture( canvas );

	// put the text in the sprite
	context.font = '48px monospace';
	context.fillStyle = 'rgba(192,192,255, 0.5)';
	context.fillRect( 0, 0, canvas.width, canvas.height );
	context.fillStyle = 'darkblue';
	context.fillText(text, canvas.width/4, 3*canvas.height/4 )
	texture.needsUpdate = true

	// var geometry = new THREE.CubeGeometry(1, 1, 1)
	var geometry = new three__WEBPACK_IMPORTED_MODULE_0__.PlaneGeometry(1, 1)
	var material = new three__WEBPACK_IMPORTED_MODULE_0__.MeshBasicMaterial({
		map: texture,
		transparent: true
	});
	var mesh = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, material)
	mesh.rotation.x = -Math.PI/2

	this.object3d.add(mesh)

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ArMarkerHelper);


/***/ }),

/***/ "./three.js/src/threex/threex-arsmoothedcontrols.js":
/*!**********************************************************!*\
  !*** ./three.js/src/threex/threex-arsmoothedcontrols.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _threex_arbasecontrols__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./threex-arbasecontrols */ "./three.js/src/threex/threex-arbasecontrols.js");


/**
 * - lerp position/quaternino/scale
 * - minDelayDetected
 * - minDelayUndetected
 * @param {[type]} object3d   [description]
 * @param {[type]} parameters [description]
 */
const ArSmoothedControls = function(object3d, parameters){
	var _this = this
	
	_threex_arbasecontrols__WEBPACK_IMPORTED_MODULE_0__.default.call(this, object3d)
	
	// copy parameters
	this.object3d.visible = false
	
	this._lastLerpStepAt = null
	this._visibleStartedAt = null
	this._unvisibleStartedAt = null

	// handle default parameters
	parameters = parameters || {}
	this.parameters = {
		// lerp coeficient for the position - between [0,1] - default to 1
		lerpPosition: 0.8,
		// lerp coeficient for the quaternion - between [0,1] - default to 1
		lerpQuaternion: 0.2,
		// lerp coeficient for the scale - between [0,1] - default to 1
		lerpScale: 0.7,
		// delay for lerp fixed steps - in seconds - default to 1/120
		lerpStepDelay: 1/60,
		// minimum delay the sub-control must be visible before this controls become visible - default to 0 seconds
		minVisibleDelay: 0.0,
		// minimum delay the sub-control must be unvisible before this controls become unvisible - default to 0 seconds
		minUnvisibleDelay: 0.2,
	}
	
	//////////////////////////////////////////////////////////////////////////////
	//		setParameters
	//////////////////////////////////////////////////////////////////////////////
	setParameters(parameters)
	function setParameters(parameters){
		if( parameters === undefined )	return
		for( var key in parameters ){
			var newValue = parameters[ key ]

			if( newValue === undefined ){
				console.warn( "ArSmoothedControls: '" + key + "' parameter is undefined." )
				continue
			}

			var currentValue = _this.parameters[ key ]

			if( currentValue === undefined ){
				console.warn( "ArSmoothedControls: '" + key + "' is not a property of this material." )
				continue
			}

			_this.parameters[ key ] = newValue
		}
	}
}
	
ArSmoothedControls.prototype = Object.create( _threex_arbasecontrols__WEBPACK_IMPORTED_MODULE_0__.default.prototype );
ArSmoothedControls.prototype.constructor = ArSmoothedControls;

//////////////////////////////////////////////////////////////////////////////
//		update function
//////////////////////////////////////////////////////////////////////////////

ArSmoothedControls.prototype.update = function(targetObject3d){
	var object3d = this.object3d
	var parameters = this.parameters
	var wasVisible = object3d.visible
	var present = performance.now()/1000


	//////////////////////////////////////////////////////////////////////////////
	//		handle object3d.visible with minVisibleDelay/minUnvisibleDelay
	//////////////////////////////////////////////////////////////////////////////
	if( targetObject3d.visible === false )	this._visibleStartedAt = null
	if( targetObject3d.visible === true )	this._unvisibleStartedAt = null

	if( targetObject3d.visible === true && this._visibleStartedAt === null )	this._visibleStartedAt = present
	if( targetObject3d.visible === false && this._unvisibleStartedAt === null )	this._unvisibleStartedAt = present

	if( wasVisible === false && targetObject3d.visible === true ){
		var visibleFor = present - this._visibleStartedAt
		if( visibleFor >= this.parameters.minVisibleDelay ){
			object3d.visible = true
			snapDirectlyToTarget()
		}
		// console.log('visibleFor', visibleFor)
	}

	if( wasVisible === true && targetObject3d.visible === false ){
		var unvisibleFor = present - this._unvisibleStartedAt
		if( unvisibleFor >= this.parameters.minUnvisibleDelay ){
			object3d.visible = false			
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////
	//		apply lerp on positon/quaternion/scale
	//////////////////////////////////////////////////////////////////////////////

	// apply lerp steps - require fix time steps to behave the same no matter the fps
	if( this._lastLerpStepAt === null ){
		applyOneSlerpStep()
		this._lastLerpStepAt = present
	}else{
		var nStepsToDo = Math.floor( (present - this._lastLerpStepAt)/this.parameters.lerpStepDelay )
		for(var i = 0; i < nStepsToDo; i++){
			applyOneSlerpStep()
			this._lastLerpStepAt += this.parameters.lerpStepDelay
		}
	}

	// disable the lerp by directly copying targetObject3d position/quaternion/scale
	if( false ){}

	// update the matrix
	this.object3d.updateMatrix()

	//////////////////////////////////////////////////////////////////////////////
	//		honor becameVisible/becameUnVisible event
	//////////////////////////////////////////////////////////////////////////////
	// honor becameVisible event
	if( wasVisible === false && object3d.visible === true ){
		this.dispatchEvent({ type: 'becameVisible' })
	}
	// honor becameUnVisible event
	if( wasVisible === true && object3d.visible === false ){
		this.dispatchEvent({ type: 'becameUnVisible' })
	}
	return

	function snapDirectlyToTarget(){
		object3d.position.copy( targetObject3d.position )
		object3d.quaternion.copy( targetObject3d.quaternion )
		object3d.scale.copy( targetObject3d.scale )
	}	
	
	function applyOneSlerpStep(){
		object3d.position.lerp(targetObject3d.position, parameters.lerpPosition)
		object3d.quaternion.slerp(targetObject3d.quaternion, parameters.lerpQuaternion)
		object3d.scale.lerp(targetObject3d.scale, parameters.lerpScale)
	}
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ArSmoothedControls);


/***/ }),

/***/ "./three.js/src/threex/threex-hittesting-plane.js":
/*!********************************************************!*\
  !*** ./three.js/src/threex/threex-hittesting-plane.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ "three");
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);


// TODO this is useless - prefere arjs-HitTesting.js

/**
 * - maybe support .onClickFcts in each object3d
 * - seems an easy light layer for clickable object
 * - up to 
 */
const HitTestingPlane = function(sourceElement){
	this._sourceElement = sourceElement

	// create _pickingScene
	this._pickingScene = new three__WEBPACK_IMPORTED_MODULE_0__.Scene
	
	// create _pickingPlane
	var geometry = new three__WEBPACK_IMPORTED_MODULE_0__.PlaneGeometry(20,20,19,19).rotateX(-Math.PI/2)
	// var geometry = new THREE.PlaneGeometry(20,20).rotateX(-Math.PI/2)
	var material = new three__WEBPACK_IMPORTED_MODULE_0__.MeshBasicMaterial({
		// opacity: 0.5,
		// transparent: true,
		wireframe: true
	})
	// material.visible = false
	this._pickingPlane = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, material)
	this._pickingScene.add(this._pickingPlane)

	// Create pickingCamera
	var fullWidth = parseInt(sourceElement.style.width)
	var fullHeight = parseInt(sourceElement.style.height)
	// TODO hardcoded fov - couch
	this._pickingCamera = new three__WEBPACK_IMPORTED_MODULE_0__.PerspectiveCamera(42, fullWidth / fullHeight, 0.1, 30);	
}

//////////////////////////////////////////////////////////////////////////////
//		update function
//////////////////////////////////////////////////////////////////////////////

HitTestingPlane.prototype.update = function(camera, pickingRoot, changeMatrixMode){

	this.onResize()
	

	if( changeMatrixMode === 'modelViewMatrix' ){
		// set pickingPlane position
		var pickingPlane = this._pickingPlane
		pickingRoot.parent.updateMatrixWorld()
		pickingPlane.matrix.copy(pickingRoot.parent.matrixWorld)
		// set position/quaternion/scale from pickingPlane.matrix
		pickingPlane.matrix.decompose(pickingPlane.position, pickingPlane.quaternion, pickingPlane.scale)
	}else if( changeMatrixMode === 'cameraTransformMatrix' ){
		// set pickingPlane position
		var pickingCamera = this._pickingCamera
		camera.updateMatrixWorld()
		pickingCamera.matrix.copy(camera.matrixWorld)
		// set position/quaternion/scale from pickingCamera.matrix
		pickingCamera.matrix.decompose(pickingCamera.position, pickingCamera.quaternion, pickingCamera.scale)
	}else console.assert(false)


// var position = this._pickingPlane.position
// console.log('pickingPlane position', position.x.toFixed(2), position.y.toFixed(2), position.z.toFixed(2))
// var position = this._pickingCamera.position
// console.log('his._pickingCamera position', position.x.toFixed(2), position.y.toFixed(2), position.z.toFixed(2))
	
}

//////////////////////////////////////////////////////////////////////////////
//		resize camera
//////////////////////////////////////////////////////////////////////////////

HitTestingPlane.prototype.onResize = function(){
	var sourceElement = this._sourceElement
	var pickingCamera = this._pickingCamera
	
// FIXME why using css here ??? not even computed style
// should get the size of the elment directly independantly 
	var fullWidth = parseInt(sourceElement.style.width)
	var fullHeight = parseInt(sourceElement.style.height)
	pickingCamera.aspect = fullWidth / fullHeight

	pickingCamera.updateProjectionMatrix()
}

//////////////////////////////////////////////////////////////////////////////
//		Perform test
//////////////////////////////////////////////////////////////////////////////
HitTestingPlane.prototype.test = function(mouseX, mouseY){
	// convert mouseX, mouseY to [-1, +1]
	mouseX = (mouseX-0.5)*2
	mouseY =-(mouseY-0.5)*2
	
	this._pickingScene.updateMatrixWorld(true)

	// compute intersections between mouseVector3 and pickingPlane
	var raycaster = new three__WEBPACK_IMPORTED_MODULE_0__.Raycaster();
	var mouseVector3 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(mouseX, mouseY, 1);
	raycaster.setFromCamera( mouseVector3, this._pickingCamera )
	var intersects = raycaster.intersectObjects( [this._pickingPlane] )

	if( intersects.length === 0 )	return null

	// set new demoRoot position
	var position = this._pickingPlane.worldToLocal( intersects[0].point.clone() )
	// TODO here do a look at the camera ?
	var quaternion = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion
	var scale = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(1,1,1)//.multiplyScalar(1)
	
	return {
		position : position,
		quaternion : quaternion,
		scale : scale
	}
}

//////////////////////////////////////////////////////////////////////////////
//		render the pickingPlane for debug
//////////////////////////////////////////////////////////////////////////////

HitTestingPlane.prototype.renderDebug = function(renderer){
	// render sceneOrtho
	renderer.render( this._pickingScene, this._pickingCamera )
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (HitTestingPlane);


/***/ }),

/***/ "aframe":
/*!******************************************************************************************!*\
  !*** external {"commonjs":"aframe","commonjs2":"aframe","amd":"aframe","root":"AFRAME"} ***!
  \******************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_aframe__;

/***/ }),

/***/ "three":
/*!**************************************************************************************!*\
  !*** external {"commonjs":"three","commonjs2":"three","amd":"three","root":"THREE"} ***!
  \**************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_three__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!*****************************!*\
  !*** ./aframe/src/index.js ***!
  \*****************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _component_anchor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component-anchor */ "./aframe/src/component-anchor.js");
/* harmony import */ var _component_hit_testing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./component-hit-testing */ "./aframe/src/component-hit-testing.js");
/* harmony import */ var _location_based_arjs_look_controls__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./location-based/arjs-look-controls */ "./aframe/src/location-based/arjs-look-controls.js");
/* harmony import */ var _location_based_arjs_webcam_texture__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./location-based/arjs-webcam-texture */ "./aframe/src/location-based/arjs-webcam-texture.js");
/* harmony import */ var _location_based_ArjsDeviceOrientationControls__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./location-based/ArjsDeviceOrientationControls */ "./aframe/src/location-based/ArjsDeviceOrientationControls.js");
/* harmony import */ var _location_based_gps_camera__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./location-based/gps-camera */ "./aframe/src/location-based/gps-camera.js");
/* harmony import */ var _location_based_gps_entity_place__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./location-based/gps-entity-place */ "./aframe/src/location-based/gps-entity-place.js");
/* harmony import */ var _location_based_gps_projected_camera__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./location-based/gps-projected-camera */ "./aframe/src/location-based/gps-projected-camera.js");
/* harmony import */ var _location_based_gps_projected_entity_place__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./location-based/gps-projected-entity-place */ "./aframe/src/location-based/gps-projected-entity-place.js");
/* harmony import */ var _system_arjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./system-arjs */ "./aframe/src/system-arjs.js");
// Components



// Location-based components








// System


})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BUmpzL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9BUmpzLy4vYWZyYW1lL3NyYy9jb21wb25lbnQtYW5jaG9yLmpzIiwid2VicGFjazovL0FSanMvLi9hZnJhbWUvc3JjL2NvbXBvbmVudC1oaXQtdGVzdGluZy5qcyIsIndlYnBhY2s6Ly9BUmpzLy4vYWZyYW1lL3NyYy9sb2NhdGlvbi1iYXNlZC9BcmpzRGV2aWNlT3JpZW50YXRpb25Db250cm9scy5qcyIsIndlYnBhY2s6Ly9BUmpzLy4vYWZyYW1lL3NyYy9sb2NhdGlvbi1iYXNlZC9hcmpzLWxvb2stY29udHJvbHMuanMiLCJ3ZWJwYWNrOi8vQVJqcy8uL2FmcmFtZS9zcmMvbG9jYXRpb24tYmFzZWQvYXJqcy13ZWJjYW0tdGV4dHVyZS5qcyIsIndlYnBhY2s6Ly9BUmpzLy4vYWZyYW1lL3NyYy9sb2NhdGlvbi1iYXNlZC9ncHMtY2FtZXJhLmpzIiwid2VicGFjazovL0FSanMvLi9hZnJhbWUvc3JjL2xvY2F0aW9uLWJhc2VkL2dwcy1lbnRpdHktcGxhY2UuanMiLCJ3ZWJwYWNrOi8vQVJqcy8uL2FmcmFtZS9zcmMvbG9jYXRpb24tYmFzZWQvZ3BzLXByb2plY3RlZC1jYW1lcmEuanMiLCJ3ZWJwYWNrOi8vQVJqcy8uL2FmcmFtZS9zcmMvbG9jYXRpb24tYmFzZWQvZ3BzLXByb2plY3RlZC1lbnRpdHktcGxhY2UuanMiLCJ3ZWJwYWNrOi8vQVJqcy8uL2FmcmFtZS9zcmMvc3lzdGVtLWFyanMuanMiLCJ3ZWJwYWNrOi8vQVJqcy8uL25vZGVfbW9kdWxlcy9AYXItanMtb3JnL2FydG9vbGtpdDUtanMvZGlzdC9BUlRvb2xraXQuanMiLCJ3ZWJwYWNrOi8vQVJqcy8uL3RocmVlLmpzL3NyYy9tYXJrZXJzLWFyZWEvYXJqcy1tYXJrZXJzYXJlYWNvbnRyb2xzLmpzIiwid2VicGFjazovL0FSanMvLi90aHJlZS5qcy9zcmMvbWFya2Vycy1hcmVhL2FyanMtbWFya2Vyc2FyZWF1dGlscy5qcyIsIndlYnBhY2s6Ly9BUmpzLy4vdGhyZWUuanMvc3JjL25ldy1hcGkvYXJqcy1hbmNob3IuanMiLCJ3ZWJwYWNrOi8vQVJqcy8uL3RocmVlLmpzL3NyYy9uZXctYXBpL2FyanMtZGVidWd1aS5qcyIsIndlYnBhY2s6Ly9BUmpzLy4vdGhyZWUuanMvc3JjL25ldy1hcGkvYXJqcy1oaXR0ZXN0aW5nLmpzIiwid2VicGFjazovL0FSanMvLi90aHJlZS5qcy9zcmMvbmV3LWFwaS9hcmpzLXNlc3Npb24uanMiLCJ3ZWJwYWNrOi8vQVJqcy8uL3RocmVlLmpzL3NyYy9uZXctYXBpL2FyanMtdXRpbHMuanMiLCJ3ZWJwYWNrOi8vQVJqcy8uL3RocmVlLmpzL3NyYy90aHJlZXgvYXJqcy1jb250ZXh0LmpzIiwid2VicGFjazovL0FSanMvLi90aHJlZS5qcy9zcmMvdGhyZWV4L2FyanMtbWFya2VyY29udHJvbHMuanMiLCJ3ZWJwYWNrOi8vQVJqcy8uL3RocmVlLmpzL3NyYy90aHJlZXgvYXJqcy1wcm9maWxlLmpzIiwid2VicGFjazovL0FSanMvLi90aHJlZS5qcy9zcmMvdGhyZWV4L2FyanMtc291cmNlLmpzIiwid2VicGFjazovL0FSanMvLi90aHJlZS5qcy9zcmMvdGhyZWV4L3RocmVleC1hcmJhc2Vjb250cm9scy5qcyIsIndlYnBhY2s6Ly9BUmpzLy4vdGhyZWUuanMvc3JjL3RocmVleC90aHJlZXgtYXJtYXJrZXJoZWxwZXIuanMiLCJ3ZWJwYWNrOi8vQVJqcy8uL3RocmVlLmpzL3NyYy90aHJlZXgvdGhyZWV4LWFyc21vb3RoZWRjb250cm9scy5qcyIsIndlYnBhY2s6Ly9BUmpzLy4vdGhyZWUuanMvc3JjL3RocmVleC90aHJlZXgtaGl0dGVzdGluZy1wbGFuZS5qcyIsIndlYnBhY2s6Ly9BUmpzL2V4dGVybmFsIHtcImNvbW1vbmpzXCI6XCJhZnJhbWVcIixcImNvbW1vbmpzMlwiOlwiYWZyYW1lXCIsXCJhbWRcIjpcImFmcmFtZVwiLFwicm9vdFwiOlwiQUZSQU1FXCJ9Iiwid2VicGFjazovL0FSanMvZXh0ZXJuYWwge1wiY29tbW9uanNcIjpcInRocmVlXCIsXCJjb21tb25qczJcIjpcInRocmVlXCIsXCJhbWRcIjpcInRocmVlXCIsXCJyb290XCI6XCJUSFJFRVwifSIsIndlYnBhY2s6Ly9BUmpzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0FSanMvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vQVJqcy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vQVJqcy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL0FSanMvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9BUmpzLy4vYWZyYW1lL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsTzs7Ozs7Ozs7Ozs7Ozs7OztBQ1ZpQztBQUMyQjtBQUNZO0FBQ0Y7O0FBRXRFO0FBQ0E7QUFDQTtBQUNBLHFEQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLG1EQUFtRDs7QUFFbkQ7QUFDQTtBQUNBLDhDQUE4Qyw4RUFBd0I7QUFDdEU7QUFDQSxhQUFhO0FBQ2I7QUFDQSw4Q0FBOEMsOEVBQXdCO0FBQ3RFO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpREFBaUQsc0VBQU07O0FBRXZEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFLGNBQWMsWUFBWSxvQkFBb0IsWUFBWSxhQUFhO0FBQ25KO0FBQ0E7QUFDQTtBQUNBLHdDQUF3Qyw2RUFBYTtBQUNyRDtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBLHFEQUF3QixhQUFhLG9EQUF1QixHQUFHLEVBQUUsMkRBQThCO0FBQy9GO0FBQ0EseUJBQXlCO0FBQ3pCLDhCQUE4QjtBQUM5QixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQscURBQXdCLG9CQUFvQixvREFBdUIsR0FBRyxFQUFFLDJEQUE4QjtBQUN0RztBQUNBLG9CQUFvQjtBQUNwQixLQUFLO0FBQ0w7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBd0IsYUFBYSxvREFBdUIsR0FBRyxFQUFFLDJEQUE4QjtBQUMvRjtBQUNBLHlCQUF5QjtBQUN6Qiw4QkFBOEI7QUFDOUIsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVELHFEQUF3QixvQkFBb0Isb0RBQXVCLEdBQUcsRUFBRSwyREFBOEI7QUFDdEc7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULG9CQUFvQjtBQUNwQixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7OztBQ3BSZ0M7QUFDbUM7O0FBRXBFO0FBQ0E7QUFDQTtBQUNBLHFEQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDhDQUE4QywwRUFBVTtBQUN4RDs7QUFFQTtBQUNBLEdBQUc7QUFDSCxFQUFFO0FBQ0Y7QUFDQSxFQUFFO0FBQ0Y7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDeEVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUrQjs7QUFFL0I7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLHVCQUF1Qjs7QUFFdkI7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSxrQkFBa0IsMENBQWE7O0FBRS9CLG9CQUFvQix3Q0FBVzs7QUFFL0IsaUJBQWlCLDZDQUFnQjs7QUFFakMsaUJBQWlCLDZDQUFnQiwrQ0FBK0M7O0FBRWhGOztBQUVBLCtDQUErQzs7QUFFL0MsdUNBQXVDOztBQUV2QyxnQ0FBZ0M7O0FBRWhDLGtFQUFrRTs7QUFFbEU7O0FBRUEsR0FBRzs7QUFFSDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEsaUNBQWlDLGdEQUFtQix5Q0FBeUM7O0FBRTdGLCtCQUErQixnREFBbUIsb0JBQW9COztBQUV0RSxpQ0FBaUMsZ0RBQW1CLHFCQUFxQjs7QUFFekUsNkNBQTZDLGdEQUFtQixnQ0FBZ0M7O0FBRWhHO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLEtBQUssTztBQUNMLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQSxpRUFBZSw2QkFBNkIsRUFBQzs7Ozs7Ozs7Ozs7Ozs7OztBQ3BLN0M7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWdDO0FBQzJDOztBQUUzRSxxREFBd0I7QUFDeEI7O0FBRUE7QUFDQSxjQUFjLGNBQWM7QUFDNUIsaUNBQWlDLGNBQWM7QUFDL0MseUJBQXlCLGVBQWU7QUFDeEMsdUJBQXVCLGVBQWU7QUFDdEMsdUJBQXVCLGVBQWU7QUFDdEMsbUJBQW1CLGNBQWM7QUFDakMsc0JBQXNCO0FBQ3RCLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3Q0FBd0Msa0JBQWtCO0FBQzFELEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0EsUUFBUSx5REFBNEI7QUFDcEMsMkRBQTJELG1FQUE2QjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLHdCQUF3QjtBQUN2RDtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLHdCQUF3QixRQUFRO0FBQ2hDO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsNkJBQTZCLHdCQUF3QjtBQUNyRCxHQUFHOztBQUVIO0FBQ0E7QUFDQSw2QkFBNkIsd0JBQXdCO0FBQ3JELEdBQUc7O0FBRUg7QUFDQSx1QkFBdUIsOENBQWlCO0FBQ3hDLHVCQUF1Qiw4Q0FBaUI7QUFDeEMscUJBQXFCLDhDQUFpQjtBQUN0Qyx3QkFBd0IsOENBQWlCO0FBQ3pDLHVCQUF1Qiw4Q0FBaUI7QUFDeEMsc0JBQXNCLDhDQUFpQjtBQUN2QyxxQkFBcUIsOENBQWlCO0FBQ3RDLG9CQUFvQiw4Q0FBaUI7QUFDckMsK0JBQStCLDhDQUFpQjtBQUNoRCw4QkFBOEIsOENBQWlCO0FBQy9DLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVEQUF1RCw4Q0FBaUI7QUFDeEU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLFFBQVE7O0FBRTVCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlFQUF5RSxRQUFROztBQUVqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyRkFBMkYsUUFBUTtBQUNuRztBQUNBLDJCQUEyQixRQUFROztBQUVuQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxRQUFRO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0RBQXdELFFBQVE7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFFBQVE7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELFFBQVE7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQ0FBa0MsK0NBQStDO0FBQ2pGLG1DQUFtQyxrREFBa0Q7O0FBRXJGO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDZCQUE2QixRQUFROztBQUVyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN6ZStCO0FBQ0Y7O0FBRTlCLHFEQUF3Qjs7QUFFeEI7QUFDQTtBQUNBLDZCQUE2QixxREFBd0I7QUFDckQsNEJBQTRCLHdDQUFXOztBQUV2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isc0RBQXlCLEdBQUc7QUFDcEQsMkJBQTJCLCtDQUFrQjtBQUM3Qyw0QkFBNEIsb0RBQXVCLEdBQUcsb0JBQW9CO0FBQzFFLHlCQUF5Qix1Q0FBVTtBQUNuQztBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQSw4QztBQUNBO0FBQ0EsYUFBYTtBQUNiLHlCO0FBQ0Esb0ZBQW9GLEVBQUU7QUFDdEYsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDekREO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWlDO0FBQ0Y7O0FBRS9CLHFEQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBLGdEQUFnRCwwQkFBMEI7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsdUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtRUFBbUUsWUFBWTs7QUFFL0U7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7O0FBRUE7O0FBRUEsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsZ0RBQWdELDBCQUEwQjtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxlQUFlLFNBQVM7QUFDeEIsZUFBZSxTQUFTO0FBQ3hCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EscUJBQXFCLG1FQUFtRTtBQUN4RjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw0RUFBNEUsVUFBVSwwREFBMEQsRUFBRTtBQUNsSixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsU0FBUztBQUN4QixlQUFlLFFBQVE7QUFDdkI7QUFDQSxpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLHlCQUF5QixnREFBbUI7QUFDNUMsd0JBQXdCLGdEQUFtQjs7QUFFM0MsK0VBQStFLGdEQUFtQiwyQkFBMkIsZ0RBQW1CO0FBQ2hKO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsZUFBZSxNQUFNO0FBQ3JCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixnREFBbUI7QUFDN0M7QUFDQSxpREFBaUQsZ0RBQW1CO0FBQ3BFLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFOzs7Ozs7Ozs7Ozs7OztBQzNhZ0M7O0FBRWpDLHFEQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1RkFBdUYsVUFBVSwyQkFBMkIsRUFBRTs7QUFFOUg7O0FBRUE7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSx3RUFBd0UsVUFBVSxxQkFBcUIsRUFBRTtBQUN6RyxLQUFLO0FBQ0w7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLHdCQUF3Qjs7QUFFeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7QUNoSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWdDOztBQUVoQyxxREFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBLGdEQUFnRCwwQkFBMEI7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrRUFBa0UsWUFBWTs7QUFFOUU7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnREFBZ0QsMEJBQTBCO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxlQUFlLFNBQVM7QUFDeEIsZUFBZSxTQUFTO0FBQ3hCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnTTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EscUJBQXFCLG1FQUFtRTtBQUN4RjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSw0RUFBNEUsVUFBVSwwREFBMEQsRUFBRTtBQUNsSixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsU0FBUztBQUN4QixlQUFlLFFBQVE7QUFDdkI7QUFDQSxpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEI7QUFDQSxpQkFBaUIsTUFBTTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QjtBQUNBLGlCQUFpQixNQUFNO0FBQ3ZCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QjtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEI7QUFDQSxpQkFBaUIsT0FBTztBQUN4QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU07QUFDckIsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7O0FDMWVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNnQzs7QUFFaEMscURBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx1RkFBdUYsVUFBVSwyQkFBMkIsRUFBRTs7QUFFOUg7O0FBRUE7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBLHdFQUF3RSxVQUFVLHFCQUFxQixFQUFFO0FBQ3pHLEtBQUs7QUFDTDtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLEU7QUFDVCxLQUFLO0FBQ0wsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNySWlDO0FBQzRCO0FBQ0M7QUFDVzs7QUFFekUsa0RBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsOENBQThDLHNFQUFPO0FBQ3JEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsdUVBQU87QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRFQUE0RSxjQUFjLFlBQVksb0JBQW9CLFlBQVksWUFBWTtBQUNsSjtBQUNBOztBQUVBO0FBQ0EseUNBQXlDLDhFQUFjO0FBQ3ZEO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQSxhO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7Ozs7Ozs7O0FDN1JELGVBQWUsS0FBaUQsb0JBQW9CLENBQWlILENBQUMsZ0RBQWdELFlBQVksT0FBTyxjQUFjLGlCQUFpQixlQUFlLGlCQUFpQixlQUFlLGFBQWEsMkZBQTJGLHNCQUFzQixrQ0FBa0MsNENBQTRDLGFBQWEsOEZBQThGLDBDQUEwQyx5QkFBeUIsV0FBVyw2RkFBNkYsdUNBQXVDLHlCQUF5QixhQUFhLE1BQU0sdUVBQXVFLCtIQUErSCxlQUFlLFNBQVMsZUFBZSxTQUFTLGFBQWEsd0pBQXdKLHNHQUFzRyxzQkFBc0IsdURBQXVELHNCQUFzQixzQ0FBc0Msd0JBQXdCLDBHQUEwRyxxSEFBcUgsMkJBQTJCLGtGQUFrRiwyQkFBMkIsbURBQW1ELGlGQUFpRiw2V0FBNlcsMkRBQTJELHdJQUF3SSxJQUFJLGVBQWUsYUFBYSx3REFBd0QsMENBQTBDLG9FQUFvRSxpQkFBaUIsR0FBRyxTQUFTLDRHQUE0RyxzQkFBc0IsdUVBQXVFLFNBQVMsYUFBYSxjQUFjLGVBQWUsZ0NBQWdDLG1EQUFtRCx1Q0FBdUMsZUFBZSxhQUFhLGFBQWEsY0FBYyw0RUFBNEUsTUFBTSxzQ0FBc0MsSUFBSSxHQUFHLFdBQVcsK0JBQStCLGlCQUFpQiw0QkFBNEIsUUFBUSxJQUFJLHVCQUF1QixtQkFBbUIsaUNBQWlDLGlDQUFpQyxtQkFBbUIsV0FBVywyQkFBMkIsaUJBQWlCLEdBQUcsZ0JBQWdCLDBDQUEwQyxHQUFHLHdDQUF3QyxpQ0FBaUMsbUNBQW1DLHVGQUF1RixxQ0FBcUMsb0JBQW9CLGlDQUFpQyxxQ0FBcUMscUJBQXFCLE1BQU0sT0FBTyx5QkFBeUIsSUFBSSxhQUFhLGFBQWEsU0FBUyxhQUFhLHNCQUFzQiw0QkFBNEIsZUFBZSxhQUFhLHlFQUF5RSxjQUFjLG1DQUFtQyw4QkFBOEIsZ0NBQWdDLHNDQUFzQywwQkFBMEIsK0lBQStJLHFCQUFxQiwrQkFBK0Isc0lBQXNJLEtBQUssY0FBYywrQ0FBK0Msd0dBQXdHLEdBQUcsV0FBVyxtREFBbUQsK0JBQStCLE9BQU8saUJBQWlCLDBFQUEwRSxTQUFTLCtCQUErQixTQUFTLFlBQVksU0FBUyxFQUFFLDRCQUE0QixJQUFJLE9BQU8sU0FBUyxLQUFLLE9BQU8sSUFBSSxPQUFPLFNBQVMseUJBQXlCLEtBQUssU0FBUywrQkFBK0IsU0FBUyxnQ0FBZ0MsbUZBQW1GLDBEQUEwRCw2QkFBNkIsMkJBQTJCLEVBQUUsMEJBQTBCLE9BQU8sSUFBSSxpREFBaUQsK0JBQStCLDJCQUEyQixFQUFFLHNCQUFzQixJQUFJLGVBQWUsZUFBZSxhQUFhLGFBQWEsYUFBYSxpQkFBaUIsZ0NBQWdDLDJCQUEyQiwrRUFBK0UseUJBQXlCLCtCQUErQiwwQ0FBMEMsaUNBQWlDLHFDQUFxQyxlQUFlLEdBQUcsYUFBYSxjQUFjLGFBQWEsc0JBQXNCLHdCQUF3QiwwQkFBMEIsY0FBYyxhQUFhLGFBQWEsOEJBQThCLG1CQUFtQixxQkFBcUIsZUFBZSxhQUFhLGlEQUFpRCxjQUFjLHNHQUFzRyxzQkFBc0IsbUNBQW1DLDRGQUE0Rix3QkFBd0IseUZBQXlGLG9CQUFvQiwrQ0FBK0Msb0VBQW9FLGVBQWUsd0lBQXdJLElBQUksU0FBUyxhQUFhLDhCQUE4QiwrRkFBK0YsT0FBTyw4UkFBOFIsSUFBSSxlQUFlLGFBQWEsYUFBYSx3QkFBd0IsUUFBUSxTQUFTLGdCQUFnQix3RkFBd0YsNkJBQTZCLGNBQWMsa0ZBQWtGLGNBQWMsOENBQThDLGNBQWMsb0ZBQW9GLGNBQWMsd0RBQXdELE9BQU8sK1hBQStYLG9FQUFvRSxxQkFBcUIsa0NBQWtDLE1BQU0sY0FBYyxhQUFhLFlBQVksMEJBQTBCLDhCQUE4Qiw0R0FBNEcsZUFBZSxhQUFhLHNCQUFzQiwwQkFBMEIsY0FBYyxnQ0FBZ0MsZ0JBQWdCLE1BQU0sZUFBZSxhQUFhLGlDQUFpQyxvREFBb0QsZ0JBQWdCLDJFQUEyRSxTQUFTLGNBQWMsaUVBQWlFLHlMQUF5TCxzT0FBc08sZ0lBQWdJLHFCQUFxQixrQ0FBa0MsU0FBUyxrQ0FBa0MsNEJBQTRCLE9BQU8saUNBQWlDLDJIQUEySCxxQ0FBcUMscUJBQXFCLFNBQVMsTUFBTSx5REFBeUQsU0FBUyxTQUFTLHNJQUFzSSxxQkFBcUIsVUFBVSxRQUFRLDhDQUE4QywrQ0FBK0MsZ0JBQWdCLGlEQUFpRCx3QkFBd0IsZUFBZSxTQUFTLFdBQVcsa0JBQWtCLFNBQVMsYUFBYSx3QkFBd0Isa0JBQWtCLDBDQUEwQyxXQUFXLHNCQUFzQixzQkFBc0IsZUFBZSxhQUFhLGFBQWEsY0FBYyx5SkFBeUosMEJBQTBCLGVBQWUsTUFBTSxZQUFZLDhDQUE4QyxLQUFLLFNBQVMsMkJBQTJCLDhEQUE4RCx5RkFBeUYsSUFBSSxpQkFBaUIsTUFBTSxxQkFBcUIsNERBQTRELFVBQVUsU0FBUyxhQUFhLHdCQUF3QiwwREFBMEQsZUFBZSxhQUFhLGFBQWEsb0NBQW9DLDRCQUE0QixTQUFTLHNOQUFzTixJQUFJLGtCQUFrQiw0Q0FBNEMsaUJBQWlCLE9BQU8sdUNBQXVDLG9CQUFvQixtQ0FBbUMsRUFBRSxrQkFBa0IsaUJBQWlCLFlBQVksc0JBQXNCLFNBQVMsYUFBYSxzQkFBc0IsK0NBQStDLFNBQVMsYUFBYSxzQkFBc0IsK0NBQStDLGVBQWUsYUFBYSxhQUFhLDhDQUE4QyxrRkFBa0YsY0FBYyxRQUFRLHdFQUF3RSwrUEFBK1AsNkNBQTZDLDJCQUEyQixpREFBaUQsY0FBYyxVQUFVLGNBQWMsYUFBYSxhQUFhLHdCQUF3QiwyQkFBMkIsK0RBQStELElBQUksZUFBZSxhQUFhLHFQQUFxUCxzQkFBc0IsZUFBZSwrQ0FBK0MscUZBQXFGLGdDQUFnQyxxRUFBcUUsU0FBUyxTQUFTLGFBQWEsc0JBQXNCLG1CQUFtQix5QkFBeUIsZUFBZSxhQUFhLDBCQUEwQixrRkFBa0YsaUJBQWlCLDJDQUEyQyxHQUFHLFNBQVMsK0JBQStCLGdCQUFnQixtRUFBbUUsdUJBQXVCLG9FQUFvRSx1SUFBdUksWUFBWSw4QkFBOEIsdUVBQXVFLG9DQUFvQyxPQUFPLEVBQUUsa0JBQWtCLE1BQU0sa0NBQWtDLHlEQUF5RCxpREFBaUQsZUFBZSxlQUFlLGFBQWEseUNBQXlDLGNBQWMsbUNBQW1DLGNBQWMsa0JBQWtCLGNBQWMsb0NBQW9DLGNBQWMsMENBQTBDLCtCQUErQixzQ0FBc0MsY0FBYyxzQ0FBc0MsZ0JBQWdCLHNFQUFzRSxJQUFJLDBCQUEwQixxRkFBcUYsV0FBVyxvQ0FBb0MseUNBQXlDLHNCQUFzQixzSUFBc0ksd0JBQXdCLDBEQUEwRCwrQkFBK0IsNkhBQTZILHNCQUFzQix5QkFBeUIsc0JBQXNCLHlCQUF5Qiw2REFBNkQsa0NBQWtDLG9CQUFvQixrQ0FBa0Msb0JBQW9CLGtDQUFrQyxtQ0FBbUMsdUJBQXVCLCtCQUErQix3RUFBd0UsaUNBQWlDLGlNQUFpTSw4QkFBOEIsU0FBUyxnQkFBZ0IsMkNBQTJDLCtCQUErQiwrQkFBK0IsSUFBSSxzQkFBc0IsU0FBUyx3QkFBd0IsMEJBQTBCLHNDQUFzQyxLQUFLLGtCQUFrQixrREFBa0Qsc0JBQXNCLG1EQUFtRCxTQUFTLGtCQUFrQixhQUFhLGlGQUFpRixrR0FBa0csa0JBQWtCLGtDQUFrQyxrREFBa0QsT0FBTyxJQUFJLElBQUksS0FBSyxTQUFTLGtCQUFrQixlQUFlLG9CQUFvQixrRkFBa0YsaUNBQWlDLFFBQVEscUJBQXFCLHlEQUF5RCxVQUFVLHVCQUF1QixXQUFXLHdCQUF3QixFQUFFLGlCQUFpQixNQUFNLGFBQWEsTUFBTSxrQkFBa0IsVUFBVSwwQ0FBMEMsNEJBQTRCLHlCQUF5QiwyQkFBMkIsa0RBQWtELElBQUksZUFBZSxzQkFBc0IsbUNBQW1DLE9BQU8seUJBQXlCLHVEQUF1RCxVQUFVLGtCQUFrQixJQUFJLE9BQU8sK0JBQStCLFNBQVMsT0FBTyxxQkFBcUIsU0FBUywyRUFBMkUsY0FBYyxjQUFjLGNBQWMsU0FBUyxrQkFBa0IsWUFBWSxHQUFHLDZDQUE2Qyw2QkFBNkIsK0NBQStDLGNBQWMsK0NBQStDLG1CQUFtQix5QkFBeUIsR0FBRyxHQUFHLGdCQUFnQixvQkFBb0Isa0JBQWtCLHFCQUFxQixzQkFBc0IseUZBQXlGLGdCQUFnQixlQUFlLGlCQUFpQixrQ0FBa0MsZUFBZSxlQUFlLHdCQUF3QixHQUFHLFNBQVMsTUFBTSwyQkFBMkIsYUFBYSw0QkFBNEIsV0FBVyxHQUFHLDRCQUE0QixnQkFBZ0IsMkJBQTJCLFVBQVUsdUNBQXVDLHFGQUFxRix1RkFBdUYsU0FBUyw0QkFBNEIsMEVBQTBFLFlBQVksMk5BQTJOLGNBQWMsT0FBTyxhQUFhLDhGQUE4RixjQUFjLHVCQUF1Qiw0Q0FBNEMsY0FBYyxrQkFBa0IsY0FBYyxtQ0FBbUMsY0FBYyxNQUFNLFdBQVcsc0JBQXNCLHNDQUFzQyxxQkFBcUIsd0JBQXdCLEtBQUssYUFBYSxnREFBZ0QsOEJBQThCLGlCQUFpQixPQUFPLFFBQVEsYUFBYSxPQUFPLGlCQUFpQiwwSUFBMEksMENBQTBDLGtFQUFrRSxvQkFBb0Isa0lBQWtJLHFCQUFxQixPQUFPLFdBQVcsNENBQTRDLFlBQVksaURBQWlELHdCQUF3QiwwQkFBMEIsNkRBQTZELCtCQUErQixHQUFHLDJDQUEyQyxZQUFZLDhCQUE4QiwyQkFBMkIsc0JBQXNCLFNBQVMseUJBQXlCLGdDQUFnQyxLQUFLLFNBQVMsRUFBRSxjQUFjLHVDQUF1QyxvQkFBb0IseUJBQXlCLGdDQUFnQyxvT0FBb08saUJBQWlCLGFBQWEsb0NBQW9DLGdDQUFnQyxpQkFBaUIsK0JBQStCLHFCQUFxQixXQUFXLGdCQUFnQix3RUFBd0UsbUNBQW1DLEtBQUssS0FBSyx3Q0FBd0MscUNBQXFDLHdCQUF3QixvREFBb0QsU0FBUyxnREFBZ0QsaURBQWlELFdBQVcsZ0RBQWdELEtBQUssZ0VBQWdFLG9EQUFvRCxzQkFBc0IsbUNBQW1DLEtBQUssS0FBSyx5QkFBeUIsd0VBQXdFLFFBQVEsT0FBTyx5RUFBeUUsd0JBQXdCLHlGQUF5Rix3QkFBd0IsZ0NBQWdDLG9MQUFvTCxvQkFBb0IsbUNBQW1DLEtBQUssS0FBSyx5QkFBeUIsMEVBQTBFLG1CQUFtQixtQ0FBbUMsS0FBSyxLQUFLLHlCQUF5QixpQkFBaUIsbUJBQW1CLHFCQUFxQixZQUFZLEtBQUssVUFBVSx5Q0FBeUMsK0JBQStCLHNCQUFzQixxQ0FBcUMsdUNBQXVDLEdBQUcsWUFBWSxJQUFJLHFCQUFxQixTQUFTLHVHQUF1RyxXQUFXLFdBQVcsWUFBWSxNQUFNLGNBQWMsV0FBVywrQkFBK0IsWUFBWSxZQUFZLHFDQUFxQyxRQUFRLDBDQUEwQyxjQUFjLElBQUksSUFBSSxhQUFhLCtEQUErRCx1QkFBdUIsRUFBRSxnQkFBZ0IsaURBQWlELElBQUksMkNBQTJDLFNBQVMsMENBQTBDLHdEQUF3RCxTQUFTLFlBQVksYUFBYSwwQkFBMEIsSUFBSSx3QkFBd0IsU0FBUyxpQkFBaUIseUNBQXlDLGNBQWMsa0JBQWtCLHVCQUF1QixrQ0FBa0MsbUJBQW1CLGNBQWMsc0JBQXNCLGNBQWMsdUJBQXVCLFVBQVUsSUFBSSxnQkFBZ0IsOEVBQThFLGdCQUFnQixZQUFZLFdBQVcsS0FBSyxXQUFXLCtHQUErRyxrQkFBa0IsdUNBQXVDLE9BQU8sY0FBYyxFQUFFLHNCQUFzQixjQUFjLGlGQUFpRixnQkFBZ0IsYUFBYSxvR0FBb0csTUFBTSwrSEFBK0gsbUJBQW1CLE9BQU8sV0FBVyw0Q0FBNEMsNENBQTRDLFFBQVEscUJBQXFCLDBQQUEwUCxpQkFBaUIsY0FBYywwQ0FBMEMsa0RBQWtELFlBQVkseUdBQXlHLGVBQWUsY0FBYyxxREFBcUQsbUlBQW1JLDhCQUE4QixxREFBcUQsZ0JBQWdCLHNCQUFzQixtQ0FBbUMsOENBQThDLFlBQVksdUJBQXVCLGdCQUFnQixNQUFNLHNIQUFzSCx1SEFBdUgsUUFBUSxzRUFBc0Usd1FBQXdRLElBQUkseUJBQXlCLHNEQUFzRCxTQUFTLFlBQVksa0JBQWtCLFNBQVMsbUJBQW1CLElBQUkseUJBQXlCLCtGQUErRixTQUFTLFlBQVksY0FBYyxTQUFTLEdBQUcsa0ZBQWtGLDRDQUE0QyxjQUFjLDZCQUE2QixrQ0FBa0Msd0ZBQXdGLGFBQWEsd0JBQXdCLFdBQVcsdUJBQXVCLGtDQUFrQyxJQUFJLGNBQWMsVUFBVSxrTEFBa0wsNkJBQTZCLDBDQUEwQyxPQUFPLGdCQUFnQiw4QkFBOEIsY0FBYyxxQkFBcUIscUVBQXFFLGtCQUFrQixrQkFBa0IsY0FBYyxLQUFLLDBEQUEwRCxhQUFhLElBQUksRUFBRSxhQUFhLFVBQVUsZ0JBQWdCLGlCQUFpQixnQkFBZ0IscUdBQXFHLEtBQUssY0FBYyxrREFBa0QseUNBQXlDLCtCQUErQixTQUFTLGdCQUFnQixxQkFBcUIsb0JBQW9CLG1CQUFtQix3QkFBd0IsV0FBVyxLQUFLLHNCQUFzQiwrRUFBK0UsY0FBYyxTQUFTLGlCQUFpQixnQkFBZ0IsZ0NBQWdDLGtCQUFrQixnQkFBZ0Isb0RBQW9ELEtBQUssZ0JBQWdCLHlFQUF5RSxrQkFBa0Isa0JBQWtCLGtCQUFrQixjQUFjLGdCQUFnQixXQUFXLEtBQUssc0JBQXNCLHlHQUF5RyxTQUFTLHlFQUF5RSxjQUFjLG1CQUFtQixLQUFLLEtBQUsscURBQXFELGtCQUFrQixFQUFFLGtCQUFrQixpQkFBaUIsK0JBQStCLGtCQUFrQiwyQ0FBMkMsaURBQWlELElBQUksS0FBSyxzQkFBc0IsZUFBZSxxQkFBcUIsY0FBYyxrQkFBa0IsY0FBYyxrQkFBa0IsRUFBRSxtQkFBbUIsaUJBQWlCLGlCQUFpQixjQUFjLGlEQUFpRCxnQ0FBZ0Msa0JBQWtCLDJDQUEyQyx3QkFBd0IsV0FBVyxLQUFLLHNCQUFzQixtR0FBbUcsc0JBQXNCLGNBQWMsZ0JBQWdCLFdBQVcsS0FBSyxzQkFBc0IsNkJBQTZCLFNBQVMsY0FBYyxxQkFBcUIsdUJBQXVCLGdCQUFnQixXQUFXLGtCQUFrQixZQUFZLFdBQVcsOEJBQThCLGVBQWUsbUNBQW1DLGVBQWUsd1BBQXdQLHFEQUFxRCxlQUFlLEtBQUssV0FBVyxFQUFFLGdCQUFnQix5QkFBeUIsYUFBYSxvR0FBb0csVUFBVSxxREFBcUQsNEJBQTRCLG9EQUFvRCxrQ0FBa0MsY0FBYyxtRUFBbUUsZ0JBQWdCLHNCQUFzQixPQUFPLGNBQWMsa0VBQWtFLGNBQWMsK0JBQStCLGNBQWMsdUVBQXVFLGlCQUFpQix1QkFBdUIsT0FBTyxlQUFlLGNBQWMsZUFBZSxjQUFjLDRFQUE0RSxlQUFlLDREQUE0RCxlQUFlLG1IQUFtSCxTQUFTLGFBQWEsZUFBZSw2SUFBNkksb0JBQW9CLHNCQUFzQixzQ0FBc0MsU0FBUyxlQUFlLHNFQUFzRSw0Q0FBNEMsaWswc0JBQWlrMHNCLGNBQWMsSUFBSSw4QkFBOEIsYUFBYSxjQUFjLGtCQUFrQix1REFBdUQsU0FBUyxPQUFPLGNBQWMsc0VBQXNFLFFBQVEsYUFBYSwwQkFBMEIsb0JBQW9CLDREQUE0RCx1QkFBdUIscUJBQXFCLFlBQVksR0FBRyxjQUFjLE9BQU8seUNBQXlDLHFCQUFxQixnQ0FBZ0MsZ0JBQWdCLGdCQUFnQixhQUFhLGNBQWMsY0FBYyxjQUFjLDhCQUE4QixvQ0FBb0MsdUJBQXVCLHFEQUFxRCxHQUFHLDhCQUE4Qiw4QkFBOEIsU0FBUyxxRUFBcUUsa0JBQWtCLHdHQUF3RyxVQUFVLDBCQUEwQixvQkFBb0IsaUVBQWlFLDJGQUEyRixHQUFHLEdBQUcsTUFBTSw0QkFBNEIsOEJBQThCLGdEQUFnRCxFQUFFLDRCQUE0Qiw2RUFBNkUsbUJBQW1CLGdFQUFnRSxFQUFFLG9DQUFvQyw4Q0FBOEMsNkVBQTZFLHFCQUFxQiw2Q0FBNkMsa0ZBQWtGLEVBQUUsMkJBQTJCLHVqQkFBdWpCLHVDQUF1QyxvQkFBb0IsbURBQW1ELHFEQUFxRCxFQUFFLDhCQUE4QixtUEFBbVAsYUFBYSxvQkFBb0IsbURBQW1ELHFEQUFxRCxFQUFFLDhCQUE4QixtTEFBbUwsRUFBRSwyQkFBMkIsMEJBQTBCLHVCQUF1QixzQkFBc0IsMkNBQTJDLDBDQUEwQyxpQkFBaUIsZ0JBQWdCLGlGQUFpRixnRkFBZ0YsZUFBZSwrQ0FBK0MsMkJBQTJCLEdBQUcsY0FBYyxnQkFBZ0IsYUFBYSxJQUFJLGdCQUFnQixTQUFTLElBQUksK0NBQStDLDBCQUEwQixjQUFjLFdBQVcsOERBQThELFNBQVMsZ0JBQWdCLE1BQU0sRUFBRSxnQkFBZ0IsTUFBTSxFQUFFLGdCQUFnQixNQUFNLEVBQUUsZ0JBQWdCLE1BQU0sRUFBRSxVQUFVLGNBQWMsMkJBQTJCLGVBQWUsUUFBUSx1VkFBdVYsYUFBYSwyQ0FBMkMsa0JBQWtCLHNCQUFzQix1RUFBdUUsWUFBWSxXQUFXLDZDQUE2QyxzQkFBc0IsZUFBZSxhQUFhLFVBQVUsbUJBQW1CLGFBQWEsd0VBQXdFLCtFQUErRSxlQUFlLGVBQWUsK0RBQStELGlCQUFpQixpQkFBaUIsUUFBUSxzQkFBc0IsK0JBQStCLElBQUksb0RBQW9ELDhCQUE4Qix5QkFBeUIsS0FBSyxLQUFLLFdBQVcsMEVBQTBFLFVBQVUsRUFBRSxvQkFBb0IsU0FBUyx1QkFBdUIsNkNBQTZDLDREQUE0RCxVQUFVLDBEQUEwRCxxQkFBcUIsb0NBQW9DLG9EQUFvRCxzQkFBc0IscUJBQXFCLHlCQUF5Qiw2QkFBNkIscUJBQXFCLDBCQUEwQixpQkFBaUIsOENBQThDLGlDQUFpQyxxQkFBcUIsOEJBQThCLEtBQUssbUJBQW1CLHVDQUF1QyxVQUFVLEtBQUssaUNBQWlDLHVGQUF1RixlQUFlLDhCQUE4Qix1RUFBdUUsVUFBVSx1QkFBdUIsd0JBQXdCLGNBQWMsWUFBWSxzQkFBc0IsS0FBSyxxQkFBcUIsZ0JBQWdCLEtBQUssK0JBQStCLG9EQUFvRCxrRkFBa0YsSUFBSSxvQkFBb0IsSUFBSSxNQUFNLFNBQVMsUUFBUSxXQUFXLGlCQUFpQiwwQ0FBMEMsS0FBSyx5QkFBeUIsc0JBQXNCLHdCQUF3QixZQUFZLHlCQUF5QixvQ0FBb0MsYUFBYSxpQkFBaUIsMkJBQTJCLGtDQUFrQyxzQkFBc0IsbUJBQW1CLHVCQUF1QixtQkFBbUIsdUJBQXVCLDBCQUEwQiwyREFBMkQsZ0JBQWdCLElBQUksS0FBSyxNQUFNLElBQUksNEJBQTRCLFNBQVMsNEJBQTRCLGdEQUFnRCxpQkFBaUIsYUFBYSwwQ0FBMEMsMkJBQTJCLDJEQUEyRCxJQUFJLFlBQVksSUFBSSxxQ0FBcUMsU0FBUyw0QkFBNEIsMkNBQTJDLGtCQUFrQixxQkFBcUIsb0JBQW9CLFdBQVcsTUFBTSx5REFBeUQsSUFBSSw0Q0FBNEMsU0FBUywyQ0FBMkMsSUFBSSwwQ0FBMEMsOEtBQThLLGtCQUFrQixpQkFBaUIsdUJBQXVCLHdCQUF3Qix1RUFBdUUsbUJBQW1CLDZEQUE2RCxtQkFBbUIsdUJBQXVCLHVFQUF1RSxtQkFBbUIsOERBQThELEtBQUssaUNBQWlDLHVDQUF1Qyw4QkFBOEIsNERBQTRELDZCQUE2QixLQUFLLE1BQU0sOE9BQThPLFNBQVMsNkJBQTZCLE9BQU8sTUFBTSx3REFBd0QsU0FBUyxpS0FBaUssT0FBTyxNQUFNLHNGQUFzRixXQUFXLFNBQVMsTUFBTSx3REFBd0QsOEJBQThCLEVBQUUsNkJBQTZCLDRHQUE0Ryx5V0FBeVcsdUNBQXVDLG9DQUFvQyxpQkFBaUIsY0FBYywwQkFBMEIsU0FBUyxrQkFBa0IscUNBQXFDLG1IQUFtSCxpQ0FBaUMscUNBQXFDLFlBQVksZ0VBQWdFLGlCQUFpQix5RkFBeUYsaUNBQWlDLG1CQUFtQixtREFBbUQscUNBQXFDLGlCQUFpQixpSEFBaUgsdUVBQXVFLFVBQVUsb0JBQW9CLG9CQUFvQixlQUFlLFdBQVcsb0JBQW9CLFNBQVMsMldBQTJXLHVCQUF1QixpSUFBaUksc0JBQXNCLDJCQUEyQix5QkFBeUIsOEJBQThCLHdCQUF3QixxQkFBcUIsTUFBTSxJQUFJLHFCQUFxQixVQUFVLHlEQUF5RCxxRUFBcUUsc0JBQXNCLHFCQUFxQixxQkFBcUIseUJBQXlCLG9EQUFvRCxxQkFBcUIscUJBQXFCLGlCQUFpQixnRUFBZ0UsU0FBUyx5QkFBeUIsaUNBQWlDLGtCQUFrQixzQkFBc0Isa0RBQWtELGVBQWUsYUFBYSx5QkFBeUIsc0JBQXNCLGdDQUFnQyxxQ0FBcUMsOENBQThDLGlCQUFpQixJQUFJLGtCQUFrQixTQUFTLDZCQUE2QixlQUFlLGFBQWEsMEVBQTBFLHlEQUF5RCwyRUFBMkUsaUVBQWlFLG1HQUFtRyxpQkFBaUIsSUFBSSwyQkFBMkIsK0NBQStDLHdCQUF3QixRQUFRLDRHQUE0RyxTQUFTLDBCQUEwQixpRkFBaUYsOEJBQThCLHVEQUF1RCwwQkFBMEIsNkJBQTZCLHVHQUF1Ryx5QkFBeUIsMENBQTBDLGlCQUFpQix5QkFBeUIsT0FBTyxtQkFBbUIsMkJBQTJCLHVEQUF1RCxrREFBa0QsS0FBSyw4QkFBOEIsOEdBQThHLFdBQVcsV0FBVyxnQkFBZ0IsaUNBQWlDLDZEQUE2RCxvREFBb0QsbUJBQW1CLDBCQUEwQixVQUFVLG9DQUFvQyxtQkFBbUIsT0FBTyxpQ0FBaUMsMENBQTBDLGlEQUFpRCw2REFBNkQsVUFBVSwyQkFBMkIsV0FBVyxLQUFLLHFCQUFxQixxQkFBcUIsdUlBQXVJLGtCQUFrQixFQUFFLHFCQUFxQixvREFBb0QsOEJBQThCLDJDQUEyQyxPQUFPLGVBQWUscUJBQXFCLFdBQVcsRUFBRSxpQkFBaUIseUJBQXlCLDJDQUEyQyxvQ0FBb0Msd0JBQXdCLGdCQUFnQixXQUFXLGlDQUFpQyxvQ0FBb0MseUJBQXlCLHNDQUFzQyw4Q0FBOEMsNEJBQTRCLHNDQUFzQyxtREFBbUQsK0JBQStCLEVBQUUsRUFBRSxvQkFBb0Isd0JBQXdCLE1BQU0sZUFBZSwwQkFBMEIsc0JBQXNCLGtDQUFrQyxnREFBZ0QsRUFBRSxlQUFlLGFBQWEsc0NBQXNDLHNCQUFzQiw4QkFBOEIsZUFBZSw0QkFBNEIsOEhBQThILG1CQUFtQixhQUFhLHdCQUF3Qiw2Q0FBNkMsTUFBTSxlQUFlLDRCQUE0QixpQkFBaUIsa0NBQWtDLFFBQVEsZUFBZSw0QkFBNEIsaUJBQWlCLGtDQUFrQyxXQUFXLGVBQWUsNEJBQTRCLFdBQVcsZUFBZSxnQ0FBZ0MsRUFBRSw2QkFBNkIsMkJBQTJCLHlCQUF5QixxQkFBcUIsb0JBQW9CLG9CQUFvQiwwQkFBMEIsa0JBQWtCLG9CQUFvQix3QkFBd0IsbUJBQW1CLHdCQUF3QixvQkFBb0Isd0JBQXdCLHNCQUFzQix1QkFBdUIsc0JBQXNCLHdCQUF3QixvQkFBb0IsdUJBQXVCLHNCQUFzQix3QkFBd0IsWUFBWSw4SEFBOEgsK0JBQStCLHNCQUFzQiw0REFBNEQsU0FBUyxxQ0FBcUMsMEJBQTBCLHlCQUF5QiwrQkFBK0Isd0lBQXdJLHVCQUF1QiwwREFBMEQseUJBQXlCLElBQUksNkJBQTZCLFVBQVUsa0NBQWtDLDJCQUEyQixNQUFNLElBQUkscUJBQXFCLFNBQVMsZUFBZSxpQ0FBaUMsY0FBYyxNQUFNLCtCQUErQixvREFBb0QsbUNBQW1DLFNBQVMsdUJBQXVCLHVKQUF1Six3Q0FBd0MsNEJBQTRCLFlBQVksS0FBSywrQkFBK0IsNEJBQTRCLHVCQUF1QixxQkFBcUIsOEJBQThCLHNDQUFzQyx5QkFBeUIsZ0RBQWdELFFBQVEsZUFBZSxpQkFBaUIsaUJBQWlCLGFBQWEsU0FBUyxlQUFlLGdDQUFnQyxVQUFVLGVBQWUsZ0NBQWdDLFdBQVcsZUFBZSx5QkFBeUIsR0FBRyxzQkFBc0IseUJBQXlCLElBQUkscUJBQXFCLGdDQUFnQyx5QkFBeUIsbUJBQW1CLG9CQUFvQixpQkFBaUIsZ0NBQWdDLGtFQUFrRSxtQkFBbUIsNkJBQTZCLG1CQUFtQixZQUFZLG1CQUFtQixhQUFhLHVCQUF1QixjQUFjLDhCQUE4QixlQUFlLGNBQWMsdUJBQXVCLHFCQUFxQix1QkFBdUIsbUJBQW1CLFNBQVMsRUFBRSxjQUFjLG1DQUFtQyxTQUFTLHNCQUFzQixxTEFBcUwsc0NBQXNDLGNBQWMsZ0NBQWdDLGNBQWMsaURBQWlELHVCQUF1Qix1QkFBdUIsaUNBQWlDLHFCQUFxQixHQUFHLHVCQUF1QixxQkFBcUIsMENBQTBDLFdBQVcsdUJBQXVCLGdCQUFnQixFQUFFLG9FQUFvRSxpREFBaUQsT0FBTyxxQ0FBcUMsY0FBYyx5RkFBeUYscUJBQXFCLHVCQUF1QixnQkFBZ0IsRUFBRSx3REFBd0QsMkNBQTJDLCtDQUErQywwQkFBMEIsRUFBRSxFQUFFLGtCQUFrQixnREFBZ0Qsa0JBQWtCLGdDQUFnQywyQkFBMkIsc0JBQXNCLDhCQUE4Qix1QkFBdUIsdUJBQXVCLFVBQVUsd0JBQXdCLHFEQUFxRCx3QkFBd0IsZ0NBQWdDLGlEQUFpRCxpQ0FBaUMsc0JBQXNCLDJEQUEyRCxxQkFBcUIsMkRBQTJELHlCQUF5QixnQ0FBZ0MsV0FBVyxhQUFhLFlBQVksSUFBSSxjQUFjLFNBQVMseUJBQXlCLHVCQUF1Qix1REFBdUQsdUJBQXVCLDhDQUE4Qyx1QkFBdUIsVUFBVSxPQUFPLGtDQUFrQyx5Q0FBeUMsZ0NBQWdDLG1EQUFtRCxpQ0FBaUMsc0JBQXNCLDBFQUEwRSxJQUFJLG1CQUFtQixVQUFVLDBCQUEwQixVQUFVLE9BQU8sU0FBUyw0QkFBNEIsc0NBQXNDLGlEQUFpRCw4Q0FBOEMsaURBQWlELG9FQUFvRSxJQUFJLHFCQUFxQixVQUFVLFVBQVUsNkNBQTZDLGdDQUFnQyx3RUFBd0Usa0RBQWtELHlFQUF5RSxtRUFBbUUsSUFBSSx3RUFBd0UsU0FBUywwRkFBMEYscUJBQXFCLElBQUkseUJBQXlCLFNBQVMsUUFBUSxRQUFRLGtCQUFrQixJQUFJLG9FQUFvRSxTQUFTLDBGQUEwRixtQkFBbUIsdUJBQXVCLFVBQVUsb0VBQW9FLGdDQUFnQyxpREFBaUQsa0RBQWtELElBQUksMEVBQTBFLFNBQVMsbUZBQW1GLHdDQUF3QyxJQUFJLHNFQUFzRSxTQUFTLGtGQUFrRixxQkFBcUIsdUJBQXVCLFVBQVUsT0FBTyxtREFBbUQsNkJBQTZCLG9CQUFvQix1QkFBdUIsVUFBVSxvRUFBb0UsZ0NBQWdDLGtEQUFrRCxrREFBa0QsSUFBSSwwRUFBMEUsU0FBUyxtRkFBbUYseUNBQXlDLElBQUksc0VBQXNFLFNBQVMsa0ZBQWtGLHNCQUFzQiw0QkFBNEIsa0NBQWtDLG9EQUFvRCwrREFBK0Qsb0JBQW9CLHVCQUF1QixVQUFVLE9BQU8sa0NBQWtDLG1EQUFtRCw2QkFBNkIsbUJBQW1CLHFCQUFxQix1QkFBdUIsTUFBTSwyQ0FBMkMsVUFBVSx1REFBdUQsc0JBQXNCLDhDQUE4QyxFQUFFLHNCQUFzQixpQkFBaUIsc0JBQXNCLHNCQUFzQixpQ0FBaUMsbUJBQW1CLHlCQUF5QixNQUFNLDJDQUEyQyxVQUFVLHVEQUF1RCxzQkFBc0IscUJBQXFCLEVBQUUsd0JBQXdCLG1CQUFtQix3QkFBd0Isc0JBQXNCLGlDQUFpQyxxQkFBcUIsd0JBQXdCLG1DQUFtQyxNQUFNLDJDQUEyQyxVQUFVLHVEQUF1RCxnREFBZ0Qsa0RBQWtELGdDQUFnQyxnQ0FBZ0Msc0JBQXNCLDRCQUE0QixFQUFFLHlCQUF5QixzQkFBc0IsaUNBQWlDLG9EQUFvRCxzQkFBc0IsdUJBQXVCLHVCQUF1QixVQUFVLE9BQU8sc0JBQXNCLHdCQUF3QixFQUFFLDBCQUEwQixzQ0FBc0MsTUFBTSwrR0FBK0csS0FBSyxrQkFBa0IsSUFBSSxtQkFBbUIsbUJBQW1CLE9BQU8sV0FBVyxTQUFTLGNBQWMscUNBQXFDLDRCQUE0QixrQ0FBa0MseUZBQXlGLE9BQU8sc0JBQXNCLGdDQUFnQyxnQ0FBZ0MsdUJBQXVCLHNHQUFzRyxNQUFNLDZGQUE2RiwwRkFBMEYsSUFBSSxtQ0FBbUMsUUFBUSxzSUFBc0ksU0FBUyxzRkFBc0YsU0FBUyxtQkFBbUIsNkNBQTZDLDhCQUE4QixJQUFJLDBDQUEwQyxTQUFTLFFBQVEsUUFBUSxxQkFBcUIsVUFBVSxzQkFBc0IsbUJBQW1CLHdCQUF3Qiw2Q0FBNkMsaUVBQWlFLGdEQUFnRCxzRUFBc0UsMEJBQTBCLHdDQUF3Qyw2Q0FBNkMsbURBQW1ELHFEQUFxRCxrREFBa0QsaUJBQWlCLE1BQU0sMkNBQTJDLGtCQUFrQixtQ0FBbUMsNEJBQTRCLDZCQUE2Qix3Q0FBd0MsNkNBQTZDLG1EQUFtRCxxREFBcUQsbURBQW1ELCtCQUErQixpQkFBaUIsTUFBTSwyQ0FBMkMsa0JBQWtCLHNDQUFzQyxtQkFBbUIsSUFBSSxxRkFBcUYsU0FBUyx1RkFBdUYsU0FBUywwQkFBMEIsNkNBQTZDLHlDQUF5QyxtREFBbUQsK0VBQStFLHVEQUF1RCw2QkFBNkIsOEJBQThCLHVFQUF1RSxtREFBbUQsa0RBQWtELHdDQUF3QywyQkFBMkIsNkRBQTZELG9CQUFvQixTQUFTLHVCQUF1QixtREFBbUQsaUNBQWlDLHdCQUF3QixXQUFXLDBKQUEwSixpRUFBaUUsa0dBQWtHLDJCQUEyQixRQUFRLHFCQUFxQixnQ0FBZ0MsdUJBQXVCLGlEQUFpRCxrQ0FBa0MsS0FBSyxtRUFBbUUsNkNBQTZDLFlBQVksZ0JBQWdCLHNCQUFzQixtQkFBbUIsdUJBQXVCLFVBQVUsRUFBRSw2Q0FBNkMsc0RBQXNELHFDQUFxQyxnQ0FBZ0Msc0JBQXNCLHFDQUFxQyw4REFBOEQsaUNBQWlDLE1BQU0sdURBQXVELGdCQUFnQixTQUFTLDJCQUEyQixVQUFVLDhUQUE4VCx3QkFBd0IsYUFBYSx1Q0FBdUMsY0FBYyxhQUFhLGFBQWEsNEJBQTRCLFVBQVUsaUJBQWlCLG9CQUFvQix1SEFBdUgscUNBQXFDLDZFQUE2RSxpQkFBaUIsZ0RBQWdELG1CQUFtQixxQkFBcUIsMkJBQTJCLGlDQUFpQyxPQUFPLG1CQUFtQixrQkFBa0IsV0FBVyxvQkFBb0IsaUJBQWlCLHFCQUFxQixJQUFJLEdBQUcsa0JBQWtCLGtDQUFrQywrVkFBK1YsNkJBQTZCLDRDQUE0QyxzQ0FBc0MsYUFBYSwwQ0FBMEMsK0dBQStHLCtGQUErRixJQUFJLHVCQUF1QixpRUFBaUUsNEdBQTRHLFVBQVUsc0JBQXNCLHFJQUFxSSxpQkFBaUIsdUJBQXVCLGdCQUFnQixRQUFRLFlBQVksb0JBQW9CLEtBQUssb0JBQW9CLGdCQUFnQix1QkFBdUIsUUFBUSxpQ0FBaUMsd0JBQXdCLDRCQUE0Qix1Q0FBdUMsNEJBQTRCLHVCQUF1Qiw2QkFBNkIsdUJBQXVCLDBCQUEwQiwwQkFBMEIsNENBQTRDLDJCQUEyQixJQUFJLHNCQUFzQixVQUFVLFFBQVEsVUFBVSxPQUFPLCtHQUErRyxJQUFJLHVCQUF1QixVQUFVLEVBQUUscUdBQXFHLFVBQVUscUZBQXFGLFNBQVMsZ0JBQWdCLFNBQVMsZ0NBQWdDLHVFQUF1RSxxQkFBcUIsOEJBQThCLHFDQUFxQyxpQ0FBaUMsU0FBUyxFQUFFLGNBQWMsTUFBTSxvQkFBb0IsSUFBSSxZQUFZLFVBQVUsS0FBSyxTQUFTLGdDQUFnQyx1RUFBdUUsc0JBQXNCLHNDQUFzQyw0RkFBNEYsTUFBTSx1QkFBdUIsNkNBQTZDLElBQUkseUJBQXlCLElBQUksa0JBQWtCLHFCQUFxQix1REFBdUQsU0FBUyxnQ0FBZ0MsMkVBQTJFLGtEQUFrRCw0Q0FBNEMsNEJBQTRCLGlCQUFpQixjQUFjLG1CQUFtQixvQ0FBb0MsMEJBQTBCLGdCQUFnQixJQUFJLEtBQUssTUFBTSxJQUFJLE1BQU0sU0FBUyw0QkFBNEIsZ0RBQWdELGlCQUFpQixhQUFhLDBDQUEwQywyQkFBMkIsWUFBWSxJQUFJLFFBQVEsVUFBVSxTQUFTLDRCQUE0QiwyQ0FBMkMsa0JBQWtCLGdDQUFnQyxxREFBcUQsdUJBQXVCLDJCQUEyQix1REFBdUQsU0FBUywwUEFBMFAsdUVBQXVFLElBQUkseURBQXlELFNBQVMsS0FBSyxtQkFBbUIsb0NBQW9DLGFBQWEsbUNBQW1DLCtCQUErQiw0QkFBNEIsNENBQTRDLDBCQUEwQix1Q0FBdUMsY0FBYyxvQ0FBb0MseUJBQXlCLDZJQUE2SSxrTEFBa0wsU0FBUyxXQUFXLDZCQUE2QixzQkFBc0Isc0VBQXNFLDhFQUE4RSwwRUFBMEUseUJBQXlCLDRMQUE0TCxnSkFBZ0osb0ZBQW9GLDZEQUE2RCxtQkFBbUIsb0xBQW9MLHFDQUFxQyxpSUFBaUksWUFBWSwyQkFBMkIsUUFBUSxlQUFlLDBEQUEwRCxZQUFZLGVBQWUsOERBQThELEVBQUUsT0FBTyx3QkFBd0IsUUFBUSxtQkFBbUIsK0JBQStCLGlHQUFpRyxXQUFXLGVBQWUsOEJBQThCLEVBQUUsU0FBUyxzREFBc0Qsc0JBQXNCLGdCQUFnQixvREFBb0QsZ0NBQWdDLDhCQUE4QixvREFBb0Qsc0JBQXNCLHdCQUF3Qiw2QkFBNkIsdUJBQXVCLElBQUksa0JBQWtCLGFBQWEsSUFBSSxzQkFBc0IsU0FBUyxrQkFBa0IsbURBQW1ELGVBQWUsb0NBQW9DLGNBQWMsY0FBYyxxREFBcUQsU0FBUyxzQ0FBc0MsK0NBQStDLFlBQVksU0FBUyxXQUFXLHlEQUF5RCxLQUFLLFVBQVUsc0JBQXNCLHlGQUF5RixvQkFBb0Isd0NBQXdDLHVFQUF1RSxpQkFBaUIsbUJBQW1CLHFCQUFxQixJQUFJLHlDQUF5QyxTQUFTLFlBQVksNkJBQTZCLDhEQUE4RCx3QkFBd0IsZ0hBQWdILGFBQWEsYUFBYSx1QkFBdUIsaURBQWlELHVCQUF1QixjQUFjLHNCQUFzQixpQkFBaUIsZUFBZSxhQUFhLGlDQUFpQyxpQkFBaUIsbUJBQW1CLHFCQUFxQixJQUFJLHlDQUF5QyxTQUFTLFlBQVksMkNBQTJDLGVBQWUsSUFBSSxtREFBbUQsU0FBUyxpQkFBaUIseURBQXlELGFBQWEsYUFBYSx1QkFBdUIsZUFBZSx1QkFBdUIsdUhBQXVILHNCQUFzQixpQkFBaUIsZUFBZSxjQUFjLEtBQUssOEJBQThCLHFDQUFxQyxlQUFlLE1BQU0sdUJBQXVCLEtBQUssc0JBQXNCLGlDQUFpQyxTQUFTLGdCQUFnQixTQUFTLHdCQUF3QixJQUFJLFdBQVcsU0FBUywyRUFBMkUsUUFBUSxrcUJBQWtxQiw2QkFBNkIscUJBQXFCLG9CQUFvQix1QkFBdUIsMEZBQTBGLHlCQUF5QixnQkFBZ0IsMkRBQTJELGtCQUFrQix5QkFBeUIsNEJBQTRCLGtCQUFrQixpREFBaUQsNkJBQTZCLHdCQUF3QixrQkFBa0IsTUFBTSx3QkFBd0IsVUFBVSxrQkFBa0IsU0FBUyxpRkFBaUYsdUJBQXVCLHNCQUFzQiw0Q0FBNEMsMkJBQTJCLGdCQUFnQixJQUFJLEtBQUssMkRBQTJELGdCQUFnQixrQkFBa0IsU0FBUyw0QkFBNEIsZ0JBQWdCLElBQUksS0FBSyw0REFBNEQsZ0JBQWdCLEtBQUssU0FBUywyQkFBMkIseUNBQXlDLG1CQUFtQixtQkFBbUIsNkJBQTZCLHlCQUF5QixzQkFBc0IsaUNBQWlDLFNBQVMsa0JBQWtCLGVBQWUsa0JBQWtCLG9CQUFvQixXQUFXLGlCQUFpQixhQUFhLElBQUksMkJBQTJCLGlCQUFpQiwrREFBK0QsdUNBQXVDLHNCQUFzQixzQkFBc0Isb0JBQW9CLHdDQUF3QyxrQkFBa0IseUJBQXlCLFNBQVMsZ0VBQWdFLGlCQUFpQixhQUFhLElBQUksd0NBQXdDLHlCQUF5QixTQUFTLGdFQUFnRSxpQkFBaUIsYUFBYSxJQUFJLHNDQUFzQyxVQUFVLGlJQUFpSSwrQkFBK0IsZUFBZSxvQkFBb0IsZ0NBQWdDLDZDQUE2QyxvQ0FBb0MsU0FBUyxnRUFBZ0UsaUJBQWlCLDJCQUEyQixxQkFBcUIsZUFBZSxjQUFjLHlCQUF5Qiw4RkFBOEYsU0FBUyxpQkFBaUIsYUFBYSxJQUFJLDZCQUE2QixTQUFTLGdFQUFnRSxlQUFlLGVBQWUsSUFBSSw0QkFBNEIscUJBQXFCLFNBQVMsK0RBQStELGNBQWMsZ0NBQWdDLHFCQUFxQixJQUFJLGdEQUFnRCxvQkFBb0IsU0FBUywrREFBK0QsY0FBYyxnQ0FBZ0MsdUJBQXVCLElBQUksc0VBQXNFLCtQQUErUCxTQUFTLCtEQUErRCxjQUFjLGdDQUFnQyxxQkFBcUIsSUFBSSxpREFBaUQsb0JBQW9CLFNBQVMsK0RBQStELGNBQWMsZ0NBQWdDLGVBQWUsVUFBVSxnQkFBZ0IsZ0JBQWdCLGdCQUFnQixnQkFBZ0Isc0RBQXNELGNBQWMsNkJBQTZCLE1BQU0sZ0NBQWdDLEtBQUssY0FBYyxlQUFlLGlCQUFpQixLQUFLLGVBQWUsU0FBUyxTQUFTLE1BQU0sTUFBTSxhQUFhLGVBQWUsK0JBQStCLHdEQUF3RCw0QkFBNEIsaUJBQWlCLDZEQUE2RCxtQkFBbUIsdUNBQXVDLElBQUksUUFBUSxpQkFBaUIsd0JBQXdCLDJCQUEyQix5QkFBeUIsaUZBQWlGLEdBQUcsd0dBQXdHLG1FQUFtRSxHQUFHLGNBQWMsZUFBZSxnQkFBZ0IsY0FBYyxlQUFlLGdCQUFnQixtQkFBbUIsY0FBYyxXQUFXLDJEQUEyRCxZQUFZLFdBQVcsa0JBQWtCLHVCQUF1QixRQUFRLEdBQUcsbUNBQW1DLHlCQUF5QixtR0FBbUcsZ0NBQWdDLElBQUksc0JBQXNCLG1CQUFtQixVQUFVLHdHQUF3RyxhQUFhLDJGQUEyRix5Q0FBeUMseUNBQXlDLDhDQUE4QyxZQUFZLG9DQUFvQyxJQUFJLElBQUksdUJBQXVCLFlBQVksTUFBTSxzQ0FBc0MsVUFBVSwwQkFBMEIsYUFBYSxtREFBbUQsTUFBTSxhQUFhLGtCQUFrQixLQUFLLDhEQUE4RCxLQUFLLGtDQUFrQyx5QkFBeUIsRUFBRSxtQkFBbUIsK0JBQStCLHdDQUF3QyxHQUFHLGdCQUFnQixFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxlQUFlLG9EQUFvRCxjQUFjLGdCQUFnQixZQUFZLHdCQUF3QixTQUFTLGNBQWMsWUFBWSxZQUFZLG1DQUFtQyxZQUFZLGNBQWMsOENBQThDLGVBQWUsVUFBVSxxQkFBcUIsbUJBQW1CLGdCQUFnQixnQkFBZ0IsMkNBQTJDLGNBQWMsbUJBQW1CLElBQUksZUFBZSxtQ0FBbUMsaUJBQWlCLE1BQU0sc0NBQXNDLGtCQUFrQixlQUFlLDBCQUEwQixhQUFhLGtFQUFrRSxFQUFFLGVBQWUseUJBQXlCLFdBQVcsa0VBQWtFLGlCQUFpQixVQUFVLDBCQUEwQixvQ0FBb0MsMEJBQTBCLG9DQUFvQyx1REFBdUQsbUJBQW1CLFlBQVksTUFBTSxzQ0FBc0MsU0FBUywwQkFBMEIsMkdBQTJHLFNBQVMsdUVBQXVFLEVBQUUsaUJBQWlCLHNIQUFzSCxvREFBb0QsR0FBRyx3QkFBd0IsMkJBQTJCLCtCQUErQixlQUFlLEtBQUssU0FBUyxFQUFFLGNBQWMsWUFBWSx1QkFBdUIsZUFBZSwwRkFBMEYseUNBQXlDLFdBQVcsc0RBQXNELEtBQUssTUFBTSxtQ0FBbUMsUUFBUSxNQUFNLGtFQUFrRSx5Q0FBeUMsdUNBQXVDLCtHQUErRyxHQUFHLElBQUksNkJBQTZCLEtBQUssb0lBQW9JLCtEQUErRCxTQUFTLE1BQU0scUVBQXFFLDBEQUEwRCwwR0FBMEcsc0NBQXNDLElBQUksaUJBQWlCLFdBQVcsS0FBSyw0Q0FBNEMsb0RBQW9ELHdFQUF3RSxrREFBa0QsYUFBYSxVQUFVLDJDQUEyQyxtQkFBbUIsZ0NBQWdDLFdBQVcsZ0JBQWdCLDJQQUEyUCx5REFBeUQsbUJBQW1CLHFWQUFxVixpQkFBaUIsaUJBQWlCLElBQUkseUJBQXlCLFNBQVMsbUJBQW1CLHdKQUF3SixpQkFBaUIsTUFBTSx1RUFBdUUsK0RBQStELEtBQUssc0JBQXNCLHFIQUFxSCxpQkFBaUIsV0FBVyxrQkFBa0IsOERBQThELElBQUksOEVBQThFLFVBQVUsaURBQWlELElBQUksc0ZBQXNGLGNBQWMsZUFBZSxvQkFBb0IsZUFBZSxpQkFBaUIsY0FBYywrQkFBK0IsMERBQTBELHlDQUF5Qyx5QkFBeUIsY0FBYyxtQ0FBbUMsK0NBQStDLDRCQUE0QixxQ0FBcUMscUNBQXFDLEdBQUcsbUJBQW1CLFVBQVUsNEJBQTRCLFlBQVksYUFBYSxhQUFhLDRCQUE0QixlQUFlLGFBQWEsZ0JBQWdCLDRCQUE0QixnQkFBZ0IsYUFBYSxpQkFBaUIseURBQXlELHVCQUF1QiwrQkFBK0IsMEJBQTBCLFVBQVUsVUFBVSxhQUFhLGNBQWMsaUJBQWlCLGdDQUFnQyxNQUFNLCtDQUErQywyR0FBMkcsNEtBQTRLLG1CQUFtQiw2RUFBNkUsRUFBRSxtQkFBbUIsd0dBQXdHLGNBQWMsNkJBQTZCLDJCQUEyQixNQUFNLG9FQUFvRSxFQUFFLGdDQUFnQyxFQUFFLGlCQUFpQixnQ0FBZ0MsTUFBTSxnQ0FBZ0MsaUJBQWlCLE1BQU0sbUJBQW1CLHVCQUF1QixrQkFBa0IsS0FBSyxLQUFLLFlBQVksWUFBWSxXQUFXLHVEQUF1RCxtQkFBbUIsS0FBSyxtQkFBbUIsUUFBUSxJQUFJLHVDQUF1QyxhQUFhLGVBQWUsMEJBQTBCLGdEQUFnRCx5QkFBeUIsZ0lBQWdJLHVCQUF1QixZQUFZLFlBQVksZ0JBQWdCLGdCQUFnQixnQ0FBZ0Msc0JBQXNCLElBQUksS0FBSyxzQkFBc0IsdUZBQXVGLGFBQWEsSUFBSSxrQkFBa0IsZ0NBQWdDLHlFQUF5RSxPQUFPLEVBQUUsbUJBQW1CLGNBQWMsd0NBQXdDLFNBQVMsdUNBQXVDLFVBQVUsWUFBWSxnQ0FBZ0MsMkNBQTJDLDRCQUE0QixrQkFBa0IsS0FBSyxLQUFLLGNBQWMsZUFBZSxXQUFXLHVEQUF1RCx1Q0FBdUMsMEJBQTBCLHVFQUF1RSx1QkFBdUIsMkRBQTJELHlFQUF5RSxPQUFPLEVBQUUsaUJBQWlCLE1BQU0saUVBQWlFLDRCQUE0QixFQUFFLGNBQWMsS0FBSyxjQUFjLGdCQUFnQixlQUFlLFVBQVUsZUFBZSxLQUFLLGVBQWUsTUFBTSxlQUFlLDJGQUEyRixlQUFlLGlCQUFpQixpREFBaUQsZUFBZSxxQkFBcUIsZUFBZSxpQ0FBaUMscUNBQXFDLGNBQWMsU0FBUyw2R0FBNkcsYUFBYSxjQUFjLGVBQWUsMkRBQTJELG1FQUFtRSxpRUFBaUUsZ0NBQWdDLDRHQUE0RyxjQUFjLGtEQUFrRCxxQkFBcUIsaUJBQWlCLEtBQUssNkJBQTZCLG1MQUFtTCx3RUFBd0Usb0RBQW9ELGlJQUFpSSxjQUFjLDBCQUEwQix1QkFBdUIsZUFBZSxnQkFBZ0IsaUJBQWlCLDJCQUEyQixtQkFBbUIsMkJBQTJCLGVBQWUsb0NBQW9DLGlCQUFpQixnQkFBZ0IsS0FBSyxXQUFXLFNBQVMsaUJBQWlCLHNGQUFzRixpQkFBaUIsZ0NBQWdDLElBQUksRUFBRSx3REFBd0Qsd0RBQXdELHNHQUFzRyxTQUFTLHFCQUFxQixxQkFBcUIscU5BQXFOLFdBQVcsb1hBQW9YLG1EQUFtRCxpTUFBaU0sa0JBQWtCLGdEQUFnRCxXQUFXLFVBQVUsU0FBUyxnQkFBZ0Isa0JBQWtCLGdCQUFnQixjQUFjLHNCQUFzQixNQUFNLDBIQUEwSCxjQUFjLG1CQUFtQixnREFBZ0QsZ0JBQWdCLDRDQUE0Qyw0Q0FBNEMsNENBQTRDLGdEQUFnRCxpREFBaUQsY0FBYyxpSUFBaUksK0VBQStFLE9BQU8saUJBQWlCLG1DQUFtQyxrQkFBa0Isb0JBQW9CLGtCQUFrQixrQ0FBa0Msa0JBQWtCLG1CQUFtQixrQkFBa0IsbUNBQW1DLGtCQUFrQixzQkFBc0Isa0JBQWtCLDBCQUEwQixrQkFBa0Isb0NBQW9DLGtCQUFrQixZQUFZLGtCQUFrQixzQkFBc0Isa0JBQWtCLGdCQUFnQixzQ0FBc0Msa0JBQWtCLDhEQUE4RCxrQkFBa0IsdUJBQXVCLGtCQUFrQixxQkFBcUIsaUJBQWlCLFdBQVcsa0JBQWtCLDRDQUE0QyxrQkFBa0IscUJBQXFCLGlCQUFpQixXQUFXLGtCQUFrQixvQkFBb0Isa0JBQWtCLHVIQUF1SCxhQUFhLHFGQUFxRiwyQkFBMkIsNEJBQTRCLGtCQUFrQiwrSEFBK0gsNElBQTRJLGtCQUFrQixpQkFBaUIsa0JBQWtCLHFJQUFxSSxhQUFhLHFGQUFxRiwyQkFBMkIsNEJBQTRCLGtCQUFrQiwrQ0FBK0Msa0JBQWtCLHNCQUFzQixrQkFBa0IseUJBQXlCLCtFQUErRSxrQkFBa0IsaUJBQWlCLGlCQUFpQixZQUFZLHlFQUF5RSxlQUFlLHdDQUF3QyxxQkFBcUIsbUJBQW1CLGVBQWUsdUJBQXVCLHlCQUF5QixxS0FBcUssVUFBVSxtQkFBbUIsc0RBQXNELHlCQUF5QixlQUFlLGlCQUFpQixXQUFXLEtBQUssV0FBVyxnSkFBZ0osa0JBQWtCLGdEQUFnRCwrRkFBK0Ysc0NBQXNDLEdBQUcsb1BBQW9QLGtCQUFrQixVQUFVLGVBQWUsMkJBQTJCLE1BQU0sSUFBSSwwQkFBMEIsU0FBUyx5QkFBeUIsMERBQTBELElBQUksK0NBQStDLFdBQVcseUJBQXlCLFNBQVMsU0FBUyw4REFBOEQsZUFBZSx1Q0FBdUMsaUJBQWlCLFdBQVcsSUFBSSxlQUFlLFNBQVMsd0NBQXdDLFNBQVMsbUJBQW1CLFdBQVcsSUFBSSxpQkFBaUIsU0FBUyx3Q0FBd0MsU0FBUyxxQkFBcUIsV0FBVyxJQUFJLG1CQUFtQixTQUFTLHdDQUF3QyxTQUFTLGlCQUFpQixXQUFXLElBQUksUUFBUSxTQUFTLHdDQUF3QyxTQUFTLG1CQUFtQixXQUFXLElBQUksVUFBVSxTQUFTLHdDQUF3QyxTQUFTLHFCQUFxQixXQUFXLElBQUksWUFBWSxTQUFTLHdDQUF3QyxTQUFTLHVCQUF1QixXQUFXLElBQUksY0FBYyxTQUFTLHdDQUF3QyxTQUFTLFNBQVMsS0FBSywrVEFBK1QsbUJBQW1CLFNBQVMsdURBQXVELHNDQUFzQywwQ0FBMEMsc0NBQXNDLDhDQUE4QyxzQ0FBc0MsNENBQTRDLHNDQUFzQyw4REFBOEQsc0NBQXNDLGdEQUFnRCxzQ0FBc0MscUNBQXFDLHNDQUFzQyw2QkFBNkIsc0NBQXNDLGlDQUFpQyxzQ0FBc0MsZ0NBQWdDLHNDQUFzQyw4QkFBOEIsc0NBQXNDLHVCQUF1QixzQ0FBc0MseUJBQXlCLHNDQUFzQywyQkFBMkIsc0NBQXNDLDZCQUE2QixzQ0FBc0MsMkJBQTJCLHNDQUFzQyw0QkFBNEIsc0NBQXNDLDZCQUE2QixzQ0FBc0MsMEJBQTBCLHNDQUFzQyx3QkFBd0Isc0NBQXNDLHlCQUF5QixzQ0FBc0MsbUNBQW1DLHNDQUFzQywwQkFBMEIsc0NBQXNDLCtCQUErQixzQ0FBc0MsZ0NBQWdDLHNDQUFzQyw2QkFBNkIsc0NBQXNDLDZCQUE2QixzQ0FBc0MsOEJBQThCLHNDQUFzQyw4QkFBOEIsc0NBQXNDLCtCQUErQixzQ0FBc0MsZ0NBQWdDLHNDQUFzQyw2QkFBNkIsc0NBQXNDLDJCQUEyQixzQ0FBc0Msd0JBQXdCLHNDQUFzQyx5QkFBeUIsc0NBQXNDLCtCQUErQixzQ0FBc0MsMEJBQTBCLHNDQUFzQywwQkFBMEIsc0NBQXNDLGdDQUFnQyxzQ0FBc0MsMkJBQTJCLHNDQUFzQywyQkFBMkIsc0NBQXNDLGdDQUFnQyx1Q0FBdUMsZUFBZSx3RkFBd0YsZUFBZSxhQUFhLGlGQUFpRix3RkFBd0YsdUJBQXVCLGdCQUFnQixTQUFTLFlBQVksaUJBQWlCLDhEQUE4RCwrQkFBK0Isc0NBQXNDLDhCQUE4QixzQ0FBc0MsK0JBQStCLHNDQUFzQyw2QkFBNkIsc0NBQXNDLHFDQUFxQyxXQUFXLEtBQUssNkJBQTZCLGtDQUFrQyxhQUFhLFNBQVMsaUJBQWlCLG9CQUFvQiw4RUFBOEUsbUJBQW1CLG1CQUFtQixtQkFBbUIsRUFBRSx1QkFBdUIsZ0NBQWdDLEdBQUcsZ0NBQWdDLEdBQUcsY0FBYyxHQUFHLEVBQUUsSUFBSSxtQ0FBbUMsYUFBYSxVQUFVLE1BQU0sa0JBQWtCLHlEQUF5RCxNQUFNLDZCQUE2QixNQUFNLHVCQUF1QiwyQ0FBMkMsMkJBQTJCLEVBQUUsaUVBQWlFLDJDQUEyQyxtQ0FBbUMsa0JBQWtCLGdCQUFnQiwrQkFBK0IsRUFBRSxFQUFFLHlDQUF5Qyx1Q0FBdUMsV0FBVyw2QkFBNkIsVUFBVSxFQUFFLHlDQUF5Qyw0Q0FBNEMsRUFBRSx1Q0FBdUMsaURBQWlELDhCQUE4Qiw4Q0FBOEMsd0JBQXdCLG1DQUFtQyxxQ0FBcUMseUJBQXlCLE1BQU0sS0FBSyxnQkFBZ0IsYUFBYSxtSkFBbUosY0FBYyxhQUFhLDZDQUE2QyxNQUFNLDZCQUE2QixNQUFNLHVCQUF1QiwyQkFBMkIsZ0pBQWdKLGtDQUFrQyxVQUFVLGVBQWUsK0JBQStCLEVBQUUsRUFBRSxpQ0FBaUMsV0FBVyxpeEJBQWl4QixtQkFBbUIsNkRBQTZELEVBQUUsb0RBQW9ELFFBQVEsNkJBQTZCLE1BQU0sdUJBQXVCLDRFQUE0RSxTQUFTLE1BQU0sY0FBYyxNQUFNLHFEQUFxRCwwQkFBMEIsTUFBTSw2Q0FBNkMsd0ZBQXdGLG1DQUFtQyxtQkFBbUIsZ0JBQWdCLCtCQUErQixFQUFFLEVBQUUscURBQXFELFFBQVEsNkJBQTZCLE1BQU0sdUJBQXVCLGdFQUFnRSxTQUFTLE1BQU0sa0NBQWtDLE1BQU0scURBQXFELDBCQUEwQixNQUFNLDZDQUE2Qyx5RkFBeUYsbUNBQW1DLG1CQUFtQixrQkFBa0IsK0JBQStCLEVBQUUsRUFBRSwwREFBMEQsa0JBQWtCLDZCQUE2QixNQUFNLHVCQUF1Qix1RkFBdUYsMERBQTBELGdDQUFnQyxRQUFRLDZCQUE2QixNQUFNLHVCQUF1QixzRUFBc0UseUNBQXlDLGtDQUFrQyxVQUFVLElBQUksbUJBQW1CLGdDQUFnQywyQ0FBMkMsbUhBQW1ILG1DQUFtQyxVQUFVLGtCQUFrQiwrQkFBK0IsRUFBRSxFQUFFLHdEQUF3RCxZQUFZLDZCQUE2QixNQUFNLHVCQUF1Qix3RkFBd0YsZ0NBQWdDLFVBQVUsNkJBQTZCLE1BQU0sdUJBQXVCLGdFQUFnRSx5Q0FBeUMsa0NBQWtDLFVBQVUsSUFBSSxtQkFBbUIsZ0NBQWdDLDJDQUEyQyxrRUFBa0Usa0NBQWtDLFVBQVUsa0JBQWtCLCtCQUErQixFQUFFLEVBQUUseUNBQXlDLGdDQUFnQyxrQkFBa0IsR0FBRyxJQUFJLG9DQUFvQyxVQUFVLEVBQUUsb0NBQW9DLFVBQVUsRUFBRSxvQ0FBb0MsVUFBVSxFQUFFLGdDQUFnQyxVQUFVLEtBQUssR0FBRyxrQkFBa0IseUNBQXlDLGtEQUFrRCxXQUFXLGdCQUFnQixxQkFBcUIsaUNBQWlDLHNDQUFzQyw0QkFBNEIsdURBQXVELHNCQUFzQixTQUFTLGNBQWMsWUFBWSxtQkFBbUIsS0FBSyx5Q0FBeUMseUNBQXlDLFlBQVkscUlBQXFJLGdFQUFnRSxHQUFHLFNBQVMsaUJBQWlCLG9CQUFvQiw2QkFBNkIsRUFBRSxvQ0FBb0MseUxBQXlMLGlEQUFpRCx1QkFBdUIsbUJBQW1CLHFxQkFBcXFCLGdCQUFnQixhQUFhLCtCQUErQix3S0FBd0ssRUFBRSxnQ0FBZ0MsMkJBQTJCLDhEQUE4RCw4QkFBOEIsOEZBQThGLDhGQUE4RixzRkFBc0YsWUFBWSxJQUFJLEtBQUssMkVBQTJFLDZrQkFBNmtCLG1DQUFtQyxtRkFBbUYsRUFBRSwwQkFBMEIsdUJBQXVCLFlBQVksSUFBSSxLQUFLLDBDQUEwQyxZQUFZLHlEQUF5RCwrQkFBK0IseUtBQXlLLHNDQUFzQyxtRkFBbUYsRUFBRSxrSEFBa0gsdUNBQXVDLG1GQUFtRixHQUFHLHlDQUF5QyxJQUFJLEtBQUssOENBQThDLHlMQUF5TCxZQUFZLElBQUksb0RBQW9ELHlCQUF5Qix3Q0FBd0MsMkVBQTJFLEVBQUUsTUFBTSxpQkFBaUIsSUFBSSxLQUFLLG1DQUFtQyxzSkFBc0osMkNBQTJDLGtHQUFrRyxHQUFHLG1DQUFtQyxFQUFFLHVDQUF1Qyx5Q0FBeUMsRUFBRSwrQ0FBK0MsNkJBQTZCLHFDQUFxQywrSEFBK0gsMEJBQTBCLEVBQUUsK0NBQStDLDZCQUE2QixxQ0FBcUMsK0hBQStILDBCQUEwQixFQUFFLDJDQUEyQyx5QkFBeUIsaUNBQWlDLCtIQUErSCwwQkFBMEIsRUFBRSwyQ0FBMkMsb0RBQW9ELEVBQUUsbURBQW1ELG9EQUFvRCxFQUFFLDJDQUEyQyxxRUFBcUUsRUFBRSw4Q0FBOEMsc0JBQXNCLG1DQUFtQyxzQ0FBc0MsRUFBRSxzQ0FBc0MsNkJBQTZCLGlCQUFpQixXQUFXLHVCQUF1QixFQUFFLGtDQUFrQyxnTkFBZ04sRUFBRSxpQ0FBaUMsa09BQWtPLFdBQVcsVUFBVSxXQUFXLDBEQUEwRCw2QkFBNkIsa0NBQWtDLElBQUksNkNBQTZDLEVBQUUsd0NBQXdDLGtDQUFrQyxxYkFBcWIsRUFBRSxvREFBb0QsNkJBQTZCLE1BQU0sdUJBQXVCLDJEQUEyRCx3Q0FBd0Msa0NBQWtDLFVBQVUsZ0JBQWdCLCtCQUErQixFQUFFLEVBQUUseURBQXlELDZCQUE2QixNQUFNLHVCQUF1QixnRUFBZ0Usd0NBQXdDLGtDQUFrQyxVQUFVLGdCQUFnQiwrQkFBK0IsRUFBRSxFQUFFLHVEQUF1RCxNQUFNLDZCQUE2QixNQUFNLHVCQUF1Qiw4REFBOEQsb0VBQW9FLGtDQUFrQyxVQUFVLGdCQUFnQiwrQkFBK0IsRUFBRSxFQUFFLDhDQUE4Qyx5RkFBeUYsRUFBRSxvREFBb0QsOEhBQThILEVBQUUsaURBQWlELDRGQUE0RixFQUFFLHVEQUF1RCw0RkFBNEYsRUFBRSw0Q0FBNEMscVBBQXFQLEVBQUUsOENBQThDLE1BQU0sNlBBQTZQLEVBQUUscUNBQXFDLDBFQUEwRSxFQUFFLG9DQUFvQyw2Q0FBNkMsRUFBRSxrQ0FBa0MsNkVBQTZFLEVBQUUscUNBQXFDLG1GQUFtRixFQUFFLDhDQUE4QyxZQUFZLFdBQVcsc0ZBQXNGLHNEQUFzRCxFQUFFLHdDQUF3QyxzQ0FBc0MsRUFBRSw2Q0FBNkMsaUdBQWlHLEVBQUUsK0NBQStDLDJCQUEyQixFQUFFLHVDQUF1Qyx3QkFBd0IsRUFBRSxxREFBcUQsa0NBQWtDLEVBQUUscUNBQXFDLCtDQUErQyxFQUFFLG9DQUFvQyw2Q0FBNkMsRUFBRSwwQ0FBMEMsbURBQW1ELEVBQUUsb0NBQW9DLHNDQUFzQyxFQUFFLG1DQUFtQyxxQ0FBcUMsRUFBRSwyQ0FBMkMscURBQXFELEVBQUUsK0NBQStDLHlEQUF5RCxFQUFFLDhDQUE4Qyx1REFBdUQsRUFBRSw4Q0FBOEMsd0RBQXdELEVBQUUsNkNBQTZDLHNEQUFzRCxFQUFFLHlDQUF5QyxtREFBbUQsRUFBRSx3Q0FBd0MsaURBQWlELEVBQUUscUNBQXFDLCtDQUErQyxFQUFFLG9DQUFvQyw2Q0FBNkMsRUFBRSxnREFBZ0QsMERBQTBELEVBQUUsK0NBQStDLHdEQUF3RCxFQUFFLDBDQUEwQyxvREFBb0QsRUFBRSx5Q0FBeUMsa0RBQWtELEVBQUUsd0NBQXdDLGtEQUFrRCxFQUFFLHVDQUF1QyxnREFBZ0QsRUFBRSxxQ0FBcUMsK0NBQStDLEVBQUUsb0NBQW9DLDZDQUE2QyxFQUFFLHlDQUF5QyxtREFBbUQsRUFBRSx3Q0FBd0MsaURBQWlELEVBQUUsb0RBQW9ELGFBQWEsNkJBQTZCLE1BQU0sdUJBQXVCLHNDQUFzQywrSUFBK0kscTFCQUFxMUIsaUJBQWlCLHFCQUFxQixFQUFFLDZCQUE2QixtQ0FBbUMsVUFBVSxlQUFlLCtCQUErQixFQUFFLEVBQUUsZ0NBQWdDLGtDQUFrQyxFQUFFLHlDQUF5QyxNQUFNLDRVQUE0VSxpQkFBaUIsS0FBSywrQkFBK0IsMENBQTBDLGtEQUFrRCxJQUFJLGtFQUFrRSxNQUFNLDZCQUE2QixNQUFNLHVCQUF1Qix3REFBd0Qsd0NBQXdDLGtDQUFrQyxLQUFLLHNCQUFzQiwrQkFBK0IsRUFBRSxFQUFFLDJEQUEyRCxVQUFVLDZCQUE2QixNQUFNLHVCQUF1Qix1R0FBdUcscURBQXFELGtDQUFrQyxLQUFLLG9CQUFvQiwrQkFBK0IsRUFBRSxLQUFLLEdBQUcsU0FBUyw0QkFBNEIsY0FBYyxJQUFJLEc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDQTdvaDBCO0FBQzhCO0FBQ0E7QUFDRTs7QUFFL0Q7QUFDQTtBQUNBLENBQUMsdUVBQW1COztBQUVwQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUEsK0NBQStDLDRFQUF3QjtBQUN2RTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDBDQUFhO0FBQ3pCLGdCQUFnQiwwQ0FBYTtBQUM3QixHQUFHO0FBQ0g7QUFDQSxZQUFZLDZDQUFnQjtBQUM1QixnQkFBZ0IsNkNBQWdCO0FBQ2hDLEdBQUc7QUFDSDtBQUNBLFlBQVksMENBQWE7QUFDekIsZ0JBQWdCLDBDQUFhO0FBQzdCLEdBQUc7QUFDSDs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDBDQUFhOztBQUVuQztBQUNBLHFCQUFxQiwwQ0FBYTtBQUNsQyx1QkFBdUIsNkNBQWdCO0FBQ3ZDLGtCQUFrQiwwQ0FBYTtBQUMvQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDBDQUFhO0FBQ3pDOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsNkNBQWdCO0FBQzlEO0FBQ0EsMkNBQTJDLDZDQUFnQjs7QUFFM0Q7QUFDQTtBQUNBLHNCQUFzQiw2Q0FBZ0I7QUFDdEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQSx3Q0FBd0MsMENBQWE7O0FBRXJEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksMENBQWE7QUFDekIsZ0JBQWdCLDBDQUFhO0FBQzdCLEdBQUc7QUFDSDtBQUNBLFlBQVksNkNBQWdCO0FBQzVCLGdCQUFnQiw2Q0FBZ0I7QUFDaEMsR0FBRztBQUNIO0FBQ0EsWUFBWSwwQ0FBYTtBQUN6QixnQkFBZ0IsMENBQWE7QUFDN0IsR0FBRztBQUNIO0FBQ0EsMkJBQTJCLDZDQUFnQjs7QUFFM0M7QUFDQSx1QkFBdUIsMENBQWE7O0FBRXBDLHFCQUFxQiwwQ0FBYTtBQUNsQyx1QkFBdUIsNkNBQWdCO0FBQ3ZDLGtCQUFrQiwwQ0FBYTtBQUMvQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUYseUJBQXlCLDBDQUFhO0FBQ3RDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUF1Qix1Q0FBVTs7QUFFakM7QUFDQSx1QkFBdUIsMENBQWE7O0FBRXBDLHFCQUFxQiwwQ0FBYTtBQUNsQyx1QkFBdUIsNkNBQWdCO0FBQ3ZDLGtCQUFrQiwwQ0FBYTtBQUMvQjs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsMkNBQWM7QUFDckM7O0FBRUE7QUFDQSw4QkFBOEIsZ0VBQWdCOztBQUU5QztBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsMENBQWE7QUFDdkMsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLDhEQUFxQjs7QUFFcEQ7QUFDQTtBQUNBOztBQUVBLGlFQUFlLG1CQUFtQixFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNyVUg7QUFDYzs7QUFFN0M7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsaUVBQWU7QUFDNUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGtFQUFnQjtBQUMxQztBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQixrQkFBa0IsMENBQWE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsaUVBQWU7QUFDNUI7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixtQkFBbUIsMENBQWE7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsaUVBQWU7QUFDN0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlFQUFlLGdCQUFnQixFQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzlPRDtBQUN1QjtBQUNPO0FBQ1E7QUFDTTtBQUNOOztBQUVyRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsYUFBYTtBQUN4QixXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxzQkFBc0Isd0NBQVc7QUFDakM7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0EsRUFBRTs7QUFFRjtBQUNBLDJCQUEyQiwyREFBZ0I7QUFDM0M7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsMkdBQW1EO0FBQ3REOztBQUVBO0FBQ0E7QUFDQSxHQUFHLG9HQUE0QztBQUMvQzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLDRCQUE0QixvRkFBNEI7QUFDeEQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGtFQUFjO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBLHFCQUFxQix3Q0FBVzs7QUFFaEM7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSx5QkFBeUIsd0NBQVc7QUFDcEM7QUFDQSw2QkFBNkIsc0VBQWtCO0FBQy9DO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpRUFBZSxNQUFNLEU7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzdJZ0Q7QUFDeEI7O0FBRTdDO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxZQUFZO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixpQ0FBaUMsaUVBQWU7QUFDaEQ7QUFDQSxZQUFZLDhGQUFzQztBQUNsRCxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFlBQVksb0dBQTRDO0FBQ3hEO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUtFOzs7Ozs7Ozs7Ozs7Ozs7OztBQ3JKOEQ7O0FBRWhFO0FBQ0E7QUFDQTtBQUNBLFdBQVcsYUFBYTtBQUN4QixXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsb0VBQWU7QUFDaEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxhQUFhO0FBQ3hCLFdBQVcsZUFBZTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixZQUFZLG9CQUFvQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsWUFBWSxvQkFBb0I7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsaUJBQWlCO0FBQzVCLFdBQVcsY0FBYztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUI7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLGlFQUFlLFVBQVUsRUFBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMvSUs7QUFDWTtBQUNFOztBQUU3QztBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0Qix1QkFBdUI7QUFDdkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxnREFBbUI7QUFDdkUsa0RBQWtELHlDQUFZO0FBQzlELGlEQUFpRCx3Q0FBVzs7O0FBRzVEO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQSxHQUFHOzs7QUFHSDtBQUNBLHNCQUFzQixrRUFBZ0I7O0FBRXRDO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyx3REFBTTs7QUFFM0M7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx1Q0FBdUMseURBQU87O0FBRTlDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsaUVBQWUsT0FBTyxFOzs7Ozs7Ozs7Ozs7Ozs7OztBQy9HUzs7QUFFL0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVksYUFBYTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHlDQUFZO0FBQ3JDLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlFQUFlLEtBQUssRUFBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDN0NVO0FBQ3VCO0FBQ2hCO0FBQ3RDLE9BQU8sMEJBQTBCLEdBQUcsb0RBQVc7QUFDL0M7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQ0FBa0MsMEVBQTZDO0FBQy9FLHFDQUFxQyw2RUFBZ0Q7QUFDckYscUNBQXFDLDZFQUFnRDtBQUNyRix3Q0FBd0MsZ0ZBQW1EOztBQUUzRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVksYUFBYTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHlDQUFZO0FBQ3JDLEtBQUs7QUFDTDtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLOzs7QUFHTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsMkRBQWdCO0FBQy9EO0FBQ0E7O0FBRUE7QUFDQSwrQ0FBK0MsMkRBQWdCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdURBQXVELDBDQUFhO0FBQ3BFLDhEQUE4RCwwQ0FBYTtBQUMzRSw4REFBOEQsMENBQWE7O0FBRTNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsMENBQWE7O0FBRTVDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkNBQTJDLDJEQUFnQjtBQUMzRDtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlFQUFlLE9BQU8sRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNyVVM7QUFDc0I7QUFDZjtBQUN0QyxPQUFPLFlBQVksR0FBRyxvREFBVzs7QUFFakM7QUFDQTs7QUFFQSxDQUFDLGdFQUFtQjs7QUFFcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCO0FBQzNCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBLDBDQUEwQyxxRUFBd0I7QUFDbEU7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNCQUFzQiwwQ0FBYTtBQUNuQzs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQSxxQ0FBcUMsMENBQWE7QUFDbEQ7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsOERBQThEOztBQUU5RDtBQUNBLGdEQUFnRDtBQUNoRCxJQUFJO0FBQ0osZ0NBQWdDO0FBQ2hDOztBQUVBLHlDQUF5QztBQUN6QztBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxzQkFBc0Isc0JBQXNCOztBQUU1QztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDRCQUE0QiwwQ0FBYTtBQUN6QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsaUVBQWUsY0FBYyxFQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM1Ulk7QUFDSTs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDZCQUE2QiwwREFBd0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsMERBQXdCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7OztBQUlBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCwwREFBd0I7QUFDMUUsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsNEVBQXlCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpRUFBZSxPQUFPLEVBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7QUNyS3ZCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTOztBQUVUOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrRUFBa0UsVUFBVTs7QUFFNUU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxxREFBcUQsZUFBZTtBQUNwRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0RBQXdELGlCQUFpQjtBQUN6RTs7QUFFQTtBQUNBLDJFQUEyRSxVQUFVLEU7O0FBRXJGO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxxRUFBcUUsVUFBVSxFO0FBQy9FLEM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzQztBQUNBLHNCOztBQUVBLHdCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzRTtBQUNBLEs7O0FBRUEsd0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7O0FBR0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7OztBQUdMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUEsaUVBQWUsTUFBTSxFOzs7Ozs7Ozs7Ozs7Ozs7OztBQ3pnQlU7O0FBRS9CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0JBQXdCLHdCQUF3QjtBQUNoRCx3QkFBd0Isd0JBQXdCO0FBQ2hELHdCQUF3QiwwQkFBMEI7QUFDbEQ7O0FBRUE7O0FBRUEseUNBQXlDLDREQUErQjs7QUFFeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlFQUFlLGNBQWMsRUFBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDckNDOztBQUUvQjtBQUNBLHFCQUFxQix3Q0FBVzs7QUFFaEMsZ0JBQWdCLDZDQUFnQjtBQUNoQzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLGdEQUFtQjs7QUFFdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQkFBb0IsZ0RBQW1CO0FBQ3ZDLG9CQUFvQixvREFBdUI7QUFDM0M7QUFDQTtBQUNBLEVBQUU7QUFDRixnQkFBZ0IsdUNBQVU7QUFDMUI7O0FBRUE7O0FBRUE7O0FBRUEsaUVBQWUsY0FBYyxFQUFDOzs7Ozs7Ozs7Ozs7Ozs7OztBQ3hDdUI7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7O0FBRUEsQ0FBQyxnRUFBbUI7O0FBRXBCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsOENBQThDLHFFQUF3QjtBQUN0RTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBLGdCQUFnQixnQkFBZ0I7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLLEtBQUssRUFBRSxFQUVWOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix3QkFBd0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDBCQUEwQjtBQUNoRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUVBQWUsa0JBQWtCLEVBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3pKSDs7QUFFL0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQkFBMEIsd0NBQVc7O0FBRXJDO0FBQ0Esb0JBQW9CLGdEQUFtQjtBQUN2QztBQUNBLG9CQUFvQixvREFBdUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0EsMEJBQTBCLHVDQUFVO0FBQ3BDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLG9EQUF1QixzQztBQUNsRDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7OztBQUdGO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EscUJBQXFCLDRDQUFlO0FBQ3BDLHdCQUF3QiwwQ0FBYTtBQUNyQztBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiw2Q0FBZ0I7QUFDdEMsaUJBQWlCLDBDQUFhOztBQUU5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlFQUFlLGVBQWUsRUFBQzs7Ozs7Ozs7Ozs7O0FDNUgvQixvRDs7Ozs7Ozs7Ozs7QUNBQSxtRDs7Ozs7O1VDQUE7VUFDQTs7VUFFQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTs7VUFFQTtVQUNBOztVQUVBO1VBQ0E7VUFDQTs7Ozs7V0N0QkE7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLGdDQUFnQyxZQUFZO1dBQzVDO1dBQ0EsRTs7Ozs7V0NQQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLHdDQUF3Qyx5Q0FBeUM7V0FDakY7V0FDQTtXQUNBLEU7Ozs7O1dDUEEsd0Y7Ozs7O1dDQUE7V0FDQTtXQUNBO1dBQ0Esc0RBQXNELGtCQUFrQjtXQUN4RTtXQUNBLCtDQUErQyxjQUFjO1dBQzdELEU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNOQTtBQUM0QjtBQUNLOztBQUVqQztBQUM0QztBQUNDO0FBQ1U7QUFDbkI7QUFDTTtBQUNJO0FBQ007O0FBRXBEO0FBQ3VCIiwiZmlsZSI6ImFmcmFtZS1hci5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcImFmcmFtZVwiKSwgcmVxdWlyZShcInRocmVlXCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcImFmcmFtZVwiLCBcInRocmVlXCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIkFSanNcIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJhZnJhbWVcIiksIHJlcXVpcmUoXCJ0aHJlZVwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wiQVJqc1wiXSA9IGZhY3Rvcnkocm9vdFtcIkFGUkFNRVwiXSwgcm9vdFtcIlRIUkVFXCJdKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfYWZyYW1lX18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfdGhyZWVfXykge1xucmV0dXJuICIsImltcG9ydCAqIGFzIEFGUkFNRSBmcm9tICdhZnJhbWUnO1xuaW1wb3J0IEFuY2hvciBmcm9tICcuLi8uLi90aHJlZS5qcy9zcmMvbmV3LWFwaS9hcmpzLWFuY2hvcic7XG5pbXBvcnQgeyBBbmNob3JEZWJ1Z1VJIH0gZnJvbSAnLi4vLi4vdGhyZWUuanMvc3JjL25ldy1hcGkvYXJqcy1kZWJ1Z3VpJztcbmltcG9ydCBBclRvb2xraXRDb250ZXh0IGZyb20gJy4uLy4uL3RocmVlLmpzL3NyYy90aHJlZXgvYXJqcy1jb250ZXh0JztcblxuLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vL1x0XHRhcmpzLWFuY2hvclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5BRlJBTUUucmVnaXN0ZXJDb21wb25lbnQoJ2FyanMtYW5jaG9yJywge1xuICAgIGRlcGVuZGVuY2llczogWydhcmpzJywgJ2FydG9vbGtpdCddLFxuICAgIHNjaGVtYToge1xuICAgICAgICBwcmVzZXQ6IHtcbiAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICB9LFxuICAgICAgICBtYXJrZXJoZWxwZXJzOiB7XHQvLyBJSUYgcHJlc2V0ID09PSAnYXJlYSdcbiAgICAgICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICB9LFxuXG4gICAgICAgIC8vIGNvbnRyb2xzIHBhcmFtZXRlcnNcbiAgICAgICAgc2l6ZToge1xuICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICBkZWZhdWx0OiAxXG4gICAgICAgIH0sXG4gICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICB9LFxuICAgICAgICBwYXR0ZXJuVXJsOiB7XG4gICAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgfSxcbiAgICAgICAgYmFyY29kZVZhbHVlOiB7XG4gICAgICAgICAgICB0eXBlOiAnbnVtYmVyJ1xuICAgICAgICB9LFxuICAgICAgICBjaGFuZ2VNYXRyaXhNb2RlOiB7XG4gICAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdtb2RlbFZpZXdNYXRyaXgnLFxuICAgICAgICB9LFxuICAgICAgICBtaW5Db25maWRlbmNlOiB7XG4gICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICAgIGRlZmF1bHQ6IDAuNixcbiAgICAgICAgfSxcbiAgICAgICAgc21vb3RoOiB7XG4gICAgICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgICAgc21vb3RoQ291bnQ6IHtcbiAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgZGVmYXVsdDogNSxcbiAgICAgICAgfSxcbiAgICAgICAgc21vb3RoVG9sZXJhbmNlOiB7XG4gICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICAgIGRlZmF1bHQ6IDAuMDEsXG4gICAgICAgIH0sXG4gICAgICAgIHNtb290aFRocmVzaG9sZDoge1xuICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICBkZWZhdWx0OiAyLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzXG5cbiAgICAgICAgLy8gZ2V0IGFyanNTeXN0ZW1cbiAgICAgICAgdmFyIGFyanNTeXN0ZW0gPSB0aGlzLmVsLnNjZW5lRWwuc3lzdGVtcy5hcmpzIHx8IHRoaXMuZWwuc2NlbmVFbC5zeXN0ZW1zLmFydG9vbGtpdFxuXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAvL1x0XHRDb2RlIFNlcGFyYXRvclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICBfdGhpcy5pc1JlYWR5ID0gZmFsc2VcbiAgICAgICAgX3RoaXMuX2FyQW5jaG9yID0gbnVsbFxuXG4gICAgICAgIC8vIGhvbm9yIG9iamVjdCB2aXNpYmlsaXR5XG4gICAgICAgIGlmIChfdGhpcy5kYXRhLmNoYW5nZU1hdHJpeE1vZGUgPT09ICdtb2RlbFZpZXdNYXRyaXgnKSB7XG4gICAgICAgICAgICBfdGhpcy5lbC5vYmplY3QzRC52aXNpYmxlID0gZmFsc2VcbiAgICAgICAgfSBlbHNlIGlmIChfdGhpcy5kYXRhLmNoYW5nZU1hdHJpeE1vZGUgPT09ICdjYW1lcmFUcmFuc2Zvcm1NYXRyaXgnKSB7XG4gICAgICAgICAgICBfdGhpcy5lbC5zY2VuZUVsLm9iamVjdDNELnZpc2libGUgPSBmYWxzZVxuICAgICAgICB9IGVsc2UgY29uc29sZS5hc3NlcnQoZmFsc2UpXG5cbiAgICAgICAgLy8gdHJpY2sgdG8gd2FpdCB1bnRpbCBhcmpzU3lzdGVtIGlzIGlzUmVhZHlcbiAgICAgICAgdmFyIHN0YXJ0ZWRBdCA9IERhdGUubm93KClcbiAgICAgICAgdmFyIHRpbWVySWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyB3YWl0IHVudGlsIHRoZSBzeXN0ZW0gaXMgaXNSZWFkeVxuICAgICAgICAgICAgaWYgKGFyanNTeXN0ZW0uaXNSZWFkeSA9PT0gZmFsc2UpIHJldHVyblxuXG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRpbWVySWQpXG5cbiAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgLy9cdFx0dXBkYXRlIGFyUHJvZmlsZVxuICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICB2YXIgYXJQcm9maWxlID0gYXJqc1N5c3RlbS5fYXJQcm9maWxlXG5cbiAgICAgICAgICAgIC8vIGFyUHJvZmlsZS5jaGFuZ2VNYXRyaXhNb2RlKCdtb2RlbFZpZXdNYXRyaXgnKVxuICAgICAgICAgICAgYXJQcm9maWxlLmNoYW5nZU1hdHJpeE1vZGUoX3RoaXMuZGF0YS5jaGFuZ2VNYXRyaXhNb2RlKVxuXG4gICAgICAgICAgICAvLyBob25vciB0aGlzLmRhdGEucHJlc2V0XG4gICAgICAgICAgICB2YXIgbWFya2VyUGFyYW1ldGVycyA9IE9iamVjdC5hc3NpZ24oe30sIGFyUHJvZmlsZS5kZWZhdWx0TWFya2VyUGFyYW1ldGVycylcblxuICAgICAgICAgICAgaWYgKF90aGlzLmRhdGEucHJlc2V0ID09PSAnaGlybycpIHtcbiAgICAgICAgICAgICAgICBtYXJrZXJQYXJhbWV0ZXJzLnR5cGUgPSAncGF0dGVybidcbiAgICAgICAgICAgICAgICBtYXJrZXJQYXJhbWV0ZXJzLnBhdHRlcm5VcmwgPSBBclRvb2xraXRDb250ZXh0LmJhc2VVUkwgKyAnZXhhbXBsZXMvbWFya2VyLXRyYWluaW5nL2V4YW1wbGVzL3BhdHRlcm4tZmlsZXMvcGF0dGVybi1oaXJvLnBhdHQnXG4gICAgICAgICAgICAgICAgbWFya2VyUGFyYW1ldGVycy5tYXJrZXJzQXJlYUVuYWJsZWQgPSBmYWxzZVxuICAgICAgICAgICAgfSBlbHNlIGlmIChfdGhpcy5kYXRhLnByZXNldCA9PT0gJ2thbmppJykge1xuICAgICAgICAgICAgICAgIG1hcmtlclBhcmFtZXRlcnMudHlwZSA9ICdwYXR0ZXJuJ1xuICAgICAgICAgICAgICAgIG1hcmtlclBhcmFtZXRlcnMucGF0dGVyblVybCA9IEFyVG9vbGtpdENvbnRleHQuYmFzZVVSTCArICdleGFtcGxlcy9tYXJrZXItdHJhaW5pbmcvZXhhbXBsZXMvcGF0dGVybi1maWxlcy9wYXR0ZXJuLWthbmppLnBhdHQnXG4gICAgICAgICAgICAgICAgbWFya2VyUGFyYW1ldGVycy5tYXJrZXJzQXJlYUVuYWJsZWQgPSBmYWxzZVxuICAgICAgICAgICAgfSBlbHNlIGlmIChfdGhpcy5kYXRhLnByZXNldCA9PT0gJ2FyZWEnKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyUGFyYW1ldGVycy50eXBlID0gJ2JhcmNvZGUnXG4gICAgICAgICAgICAgICAgbWFya2VyUGFyYW1ldGVycy5iYXJjb2RlVmFsdWUgPSAxMDAxXG4gICAgICAgICAgICAgICAgbWFya2VyUGFyYW1ldGVycy5tYXJrZXJzQXJlYUVuYWJsZWQgPSB0cnVlXG4gICAgICAgICAgICB9IGVsc2UgaWYgKF90aGlzLmRhdGEudHlwZSA9PT0gJ2JhcmNvZGUnKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyUGFyYW1ldGVycyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogX3RoaXMuZGF0YS50eXBlLFxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VNYXRyaXhNb2RlOiAnbW9kZWxWaWV3TWF0cml4JyxcbiAgICAgICAgICAgICAgICAgICAgYmFyY29kZVZhbHVlOiBfdGhpcy5kYXRhLmJhcmNvZGVWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgbWFya2Vyc0FyZWFFbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoX3RoaXMuZGF0YS50eXBlID09PSAncGF0dGVybicpIHtcbiAgICAgICAgICAgICAgICBtYXJrZXJQYXJhbWV0ZXJzLnR5cGUgPSBfdGhpcy5kYXRhLnR5cGVcbiAgICAgICAgICAgICAgICBtYXJrZXJQYXJhbWV0ZXJzLnBhdHRlcm5VcmwgPSBfdGhpcy5kYXRhLnBhdHRlcm5Vcmw7XG4gICAgICAgICAgICAgICAgbWFya2VyUGFyYW1ldGVycy5tYXJrZXJzQXJlYUVuYWJsZWQgPSBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBtYXJrZXJQYXJhbWV0ZXJzLm1pbkNvbmZpZGVuY2UgPSBfdGhpcy5kYXRhLm1pbkNvbmZpZGVuY2U7XG4gICAgICAgICAgICBtYXJrZXJQYXJhbWV0ZXJzLnNtb290aCA9IF90aGlzLmRhdGEuc21vb3RoO1xuICAgICAgICAgICAgbWFya2VyUGFyYW1ldGVycy5zbW9vdGhDb3VudCA9IF90aGlzLmRhdGEuc21vb3RoQ291bnQ7XG4gICAgICAgICAgICBtYXJrZXJQYXJhbWV0ZXJzLnNtb290aFRvbGVyYW5jZSA9IF90aGlzLmRhdGEuc21vb3RoVG9sZXJhbmNlO1xuICAgICAgICAgICAgbWFya2VyUGFyYW1ldGVycy5zbW9vdGhUaHJlc2hvbGQgPSBfdGhpcy5kYXRhLnNtb290aFRocmVzaG9sZDtcblxuICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAvL1x0XHRjcmVhdGUgYXJBbmNob3JcbiAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgICAgICB2YXIgYXJTZXNzaW9uID0gYXJqc1N5c3RlbS5fYXJTZXNzaW9uXG4gICAgICAgICAgICB2YXIgYXJBbmNob3IgPSBfdGhpcy5fYXJBbmNob3IgPSBuZXcgQW5jaG9yKGFyU2Vzc2lvbiwgbWFya2VyUGFyYW1ldGVycylcblxuICAgICAgICAgICAgLy8gaXQgaXMgbm93IGNvbnNpZGVyZWQgaXNSZWFkeVxuICAgICAgICAgICAgX3RoaXMuaXNSZWFkeSA9IHRydWVcblxuICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAvL1x0XHRob25vciAuZGVidWdVSUVuYWJsZWRcbiAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgaWYgKGFyanNTeXN0ZW0uZGF0YS5kZWJ1Z1VJRW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIC8vIGdldCBvciBjcmVhdGUgY29udGFpbmVyRWxlbWVudFxuICAgICAgICAgICAgICAgIHZhciBjb250YWluZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2FyanNEZWJ1Z1VJQ29udGFpbmVyJylcbiAgICAgICAgICAgICAgICBpZiAoY29udGFpbmVyRWxlbWVudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudC5pZCA9ICdhcmpzRGVidWdVSUNvbnRhaW5lcidcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ3Bvc2l0aW9uOiBmaXhlZDsgYm90dG9tOiAxMHB4OyB3aWR0aDoxMDAlOyB0ZXh0LWFsaWduOiBjZW50ZXI7IHotaW5kZXg6IDE7IGNvbG9yOiBncmV5OycpXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29udGFpbmVyRWxlbWVudClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIGFuY2hvckRlYnVnVUlcbiAgICAgICAgICAgICAgICB2YXIgYW5jaG9yRGVidWdVSSA9IG5ldyBBbmNob3JEZWJ1Z1VJKGFyQW5jaG9yKVxuICAgICAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQoYW5jaG9yRGVidWdVSS5kb21FbGVtZW50KVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCAxMDAwIC8gNjApXG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uICgpIHtcbiAgICB9LFxuICAgIHVwZGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIH0sXG4gICAgdGljazogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzXG4gICAgICAgIC8vIGlmIG5vdCB5ZXQgaXNSZWFkeSwgZG8gbm90aGluZ1xuICAgICAgICBpZiAodGhpcy5pc1JlYWR5ID09PSBmYWxzZSkgcmV0dXJuXG5cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgIC8vXHRcdHVwZGF0ZSBhckFuY2hvclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgdmFyIGFyanNTeXN0ZW0gPSB0aGlzLmVsLnNjZW5lRWwuc3lzdGVtcy5hcmpzIHx8IHRoaXMuZWwuc2NlbmVFbC5zeXN0ZW1zLmFydG9vbGtpdFxuICAgICAgICB0aGlzLl9hckFuY2hvci51cGRhdGUoKVxuXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAvL1x0XHRob25vciBwb3NlXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICB2YXIgYXJXb3JsZFJvb3QgPSB0aGlzLl9hckFuY2hvci5vYmplY3QzZFxuICAgICAgICBhcldvcmxkUm9vdC51cGRhdGVNYXRyaXhXb3JsZCh0cnVlKVxuICAgICAgICBhcldvcmxkUm9vdC5tYXRyaXhXb3JsZC5kZWNvbXBvc2UodGhpcy5lbC5vYmplY3QzRC5wb3NpdGlvbiwgdGhpcy5lbC5vYmplY3QzRC5xdWF0ZXJuaW9uLCB0aGlzLmVsLm9iamVjdDNELnNjYWxlKVxuXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAvL1x0XHRob25vciB2aXNpYmlsaXR5XG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICBpZiAoX3RoaXMuX2FyQW5jaG9yLnBhcmFtZXRlcnMuY2hhbmdlTWF0cml4TW9kZSA9PT0gJ21vZGVsVmlld01hdHJpeCcpIHtcbiAgICAgICAgICAgIHZhciB3YXNWaXNpYmxlID0gX3RoaXMuZWwub2JqZWN0M0QudmlzaWJsZVxuICAgICAgICAgICAgX3RoaXMuZWwub2JqZWN0M0QudmlzaWJsZSA9IHRoaXMuX2FyQW5jaG9yLm9iamVjdDNkLnZpc2libGVcbiAgICAgICAgfSBlbHNlIGlmIChfdGhpcy5fYXJBbmNob3IucGFyYW1ldGVycy5jaGFuZ2VNYXRyaXhNb2RlID09PSAnY2FtZXJhVHJhbnNmb3JtTWF0cml4Jykge1xuICAgICAgICAgICAgdmFyIHdhc1Zpc2libGUgPSBfdGhpcy5lbC5zY2VuZUVsLm9iamVjdDNELnZpc2libGVcbiAgICAgICAgICAgIF90aGlzLmVsLnNjZW5lRWwub2JqZWN0M0QudmlzaWJsZSA9IHRoaXMuX2FyQW5jaG9yLm9iamVjdDNkLnZpc2libGVcbiAgICAgICAgfSBlbHNlIGNvbnNvbGUuYXNzZXJ0KGZhbHNlKVxuXG4gICAgICAgIC8vIGVtaXQgbWFya2VyRm91bmQgbWFya2VyTG9zdFxuICAgICAgICBpZiAoX3RoaXMuX2FyQW5jaG9yLm9iamVjdDNkLnZpc2libGUgPT09IHRydWUgJiYgd2FzVmlzaWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF90aGlzLmVsLmVtaXQoJ21hcmtlckZvdW5kJylcbiAgICAgICAgfSBlbHNlIGlmIChfdGhpcy5fYXJBbmNob3Iub2JqZWN0M2QudmlzaWJsZSA9PT0gZmFsc2UgJiYgd2FzVmlzaWJsZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgX3RoaXMuZWwuZW1pdCgnbWFya2VyTG9zdCcpXG4gICAgICAgIH1cbiAgICB9XG59KVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vICAgICAgICAgICAgICAgIGRlZmluZSBzb21lIHByaW1pdGl2ZXMgc2hvcnRjdXRzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuQUZSQU1FLnJlZ2lzdGVyUHJpbWl0aXZlKCdhLWFuY2hvcicsIEFGUkFNRS51dGlscy5leHRlbmREZWVwKHt9LCBBRlJBTUUucHJpbWl0aXZlcy5nZXRNZXNoTWl4aW4oKSwge1xuICAgIGRlZmF1bHRDb21wb25lbnRzOiB7XG4gICAgICAgICdhcmpzLWFuY2hvcic6IHt9LFxuICAgICAgICAnYXJqcy1oaXQtdGVzdGluZyc6IHt9LFxuICAgIH0sXG4gICAgbWFwcGluZ3M6IHtcbiAgICAgICAgJ3R5cGUnOiAnYXJqcy1hbmNob3IudHlwZScsXG4gICAgICAgICdzaXplJzogJ2FyanMtYW5jaG9yLnNpemUnLFxuICAgICAgICAndXJsJzogJ2FyanMtYW5jaG9yLnBhdHRlcm5VcmwnLFxuICAgICAgICAndmFsdWUnOiAnYXJqcy1hbmNob3IuYmFyY29kZVZhbHVlJyxcbiAgICAgICAgJ3ByZXNldCc6ICdhcmpzLWFuY2hvci5wcmVzZXQnLFxuICAgICAgICAnbWluLWNvbmZpZGVuY2UnOiAnYXJqcy1hbmNob3IubWluQ29uZmlkZW5jZScsXG4gICAgICAgICdtYXJrZXItaGVscGVycyc6ICdhcmpzLWFuY2hvci5tYXJrZXJoZWxwZXJzJyxcbiAgICAgICAgJ3Ntb290aCc6ICdhcmpzLWFuY2hvci5zbW9vdGgnLFxuICAgICAgICAnc21vb3RoLWNvdW50JzogJ2FyanMtYW5jaG9yLnNtb290aENvdW50JyxcbiAgICAgICAgJ3Ntb290aC10b2xlcmFuY2UnOiAnYXJqcy1hbmNob3Iuc21vb3RoVG9sZXJhbmNlJyxcbiAgICAgICAgJ3Ntb290aC10aHJlc2hvbGQnOiAnYXJqcy1hbmNob3Iuc21vb3RoVGhyZXNob2xkJyxcblxuICAgICAgICAnaGl0LXRlc3RpbmctcmVuZGVyLWRlYnVnJzogJ2FyanMtaGl0LXRlc3RpbmcucmVuZGVyRGVidWcnLFxuICAgICAgICAnaGl0LXRlc3RpbmctZW5hYmxlZCc6ICdhcmpzLWhpdC10ZXN0aW5nLmVuYWJsZWQnLFxuICAgIH1cbn0pKVxuXG5BRlJBTUUucmVnaXN0ZXJQcmltaXRpdmUoJ2EtY2FtZXJhLXN0YXRpYycsIEFGUkFNRS51dGlscy5leHRlbmREZWVwKHt9LCBBRlJBTUUucHJpbWl0aXZlcy5nZXRNZXNoTWl4aW4oKSwge1xuICAgIGRlZmF1bHRDb21wb25lbnRzOiB7XG4gICAgICAgICdjYW1lcmEnOiB7fSxcbiAgICB9LFxuICAgIG1hcHBpbmdzOiB7XG4gICAgfVxufSkpXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy9cdFx0YmFja3dhcmQgY29tcGF0aWJpbGl0eVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBGSVhNRVxuQUZSQU1FLnJlZ2lzdGVyUHJpbWl0aXZlKCdhLW1hcmtlcicsIEFGUkFNRS51dGlscy5leHRlbmREZWVwKHt9LCBBRlJBTUUucHJpbWl0aXZlcy5nZXRNZXNoTWl4aW4oKSwge1xuICAgIGRlZmF1bHRDb21wb25lbnRzOiB7XG4gICAgICAgICdhcmpzLWFuY2hvcic6IHt9LFxuICAgICAgICAnYXJqcy1oaXQtdGVzdGluZyc6IHt9LFxuICAgIH0sXG4gICAgbWFwcGluZ3M6IHtcbiAgICAgICAgJ3R5cGUnOiAnYXJqcy1hbmNob3IudHlwZScsXG4gICAgICAgICdzaXplJzogJ2FyanMtYW5jaG9yLnNpemUnLFxuICAgICAgICAndXJsJzogJ2FyanMtYW5jaG9yLnBhdHRlcm5VcmwnLFxuICAgICAgICAndmFsdWUnOiAnYXJqcy1hbmNob3IuYmFyY29kZVZhbHVlJyxcbiAgICAgICAgJ3ByZXNldCc6ICdhcmpzLWFuY2hvci5wcmVzZXQnLFxuICAgICAgICAnbWluLWNvbmZpZGVuY2UnOiAnYXJqcy1hbmNob3IubWluQ29uZmlkZW5jZScsXG4gICAgICAgICdtYXJrZXItaGVscGVycyc6ICdhcmpzLWFuY2hvci5tYXJrZXJoZWxwZXJzJyxcbiAgICAgICAgJ3Ntb290aCc6ICdhcmpzLWFuY2hvci5zbW9vdGgnLFxuICAgICAgICAnc21vb3RoLWNvdW50JzogJ2FyanMtYW5jaG9yLnNtb290aENvdW50JyxcbiAgICAgICAgJ3Ntb290aC10b2xlcmFuY2UnOiAnYXJqcy1hbmNob3Iuc21vb3RoVG9sZXJhbmNlJyxcbiAgICAgICAgJ3Ntb290aC10aHJlc2hvbGQnOiAnYXJqcy1hbmNob3Iuc21vb3RoVGhyZXNob2xkJyxcblxuICAgICAgICAnaGl0LXRlc3RpbmctcmVuZGVyLWRlYnVnJzogJ2FyanMtaGl0LXRlc3RpbmcucmVuZGVyRGVidWcnLFxuICAgICAgICAnaGl0LXRlc3RpbmctZW5hYmxlZCc6ICdhcmpzLWhpdC10ZXN0aW5nLmVuYWJsZWQnLFxuICAgIH1cbn0pKVxuXG5BRlJBTUUucmVnaXN0ZXJQcmltaXRpdmUoJ2EtbWFya2VyLWNhbWVyYScsIEFGUkFNRS51dGlscy5leHRlbmREZWVwKHt9LCBBRlJBTUUucHJpbWl0aXZlcy5nZXRNZXNoTWl4aW4oKSwge1xuICAgIGRlZmF1bHRDb21wb25lbnRzOiB7XG4gICAgICAgICdhcmpzLWFuY2hvcic6IHtcbiAgICAgICAgICAgIGNoYW5nZU1hdHJpeE1vZGU6ICdjYW1lcmFUcmFuc2Zvcm1NYXRyaXgnXG4gICAgICAgIH0sXG4gICAgICAgICdjYW1lcmEnOiB7fSxcbiAgICB9LFxuICAgIG1hcHBpbmdzOiB7XG4gICAgICAgICd0eXBlJzogJ2FyanMtYW5jaG9yLnR5cGUnLFxuICAgICAgICAnc2l6ZSc6ICdhcmpzLWFuY2hvci5zaXplJyxcbiAgICAgICAgJ3VybCc6ICdhcmpzLWFuY2hvci5wYXR0ZXJuVXJsJyxcbiAgICAgICAgJ3ZhbHVlJzogJ2FyanMtYW5jaG9yLmJhcmNvZGVWYWx1ZScsXG4gICAgICAgICdwcmVzZXQnOiAnYXJqcy1hbmNob3IucHJlc2V0JyxcbiAgICAgICAgJ21pbi1jb25maWRlbmNlJzogJ2FyanMtYW5jaG9yLm1pbkNvbmZpZGVuY2UnLFxuICAgICAgICAnbWFya2VyLWhlbHBlcnMnOiAnYXJqcy1hbmNob3IubWFya2VyaGVscGVycycsXG4gICAgfVxufSkpXG4iLCJpbXBvcnQgKiBhcyBBRlJBTUUgZnJvbSAnYWZyYW1lJztcbmltcG9ydCBIaXRUZXN0aW5nIGZyb20gJy4uLy4uL3RocmVlLmpzL3NyYy9uZXctYXBpL2FyanMtaGl0dGVzdGluZyc7XG5cbi8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy9cdFx0YXJqcy1oaXQtdGVzdGluZ1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5BRlJBTUUucmVnaXN0ZXJDb21wb25lbnQoJ2FyanMtaGl0LXRlc3RpbmcnLCB7XG5cdGRlcGVuZGVuY2llczogWydhcmpzJywgJ2FydG9vbGtpdCddLFxuXHRzY2hlbWE6IHtcblx0XHRlbmFibGVkIDoge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0ZGVmYXVsdDogZmFsc2UsXG5cdFx0fSxcblx0XHRyZW5kZXJEZWJ1ZyA6IHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdGRlZmF1bHQ6IGZhbHNlLFxuXHRcdH0sXG5cdH0sXG5cdGluaXQ6IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgX3RoaXMgPSB0aGlzXG5cdFx0dmFyIGFyanNTeXN0ZW0gPSB0aGlzLmVsLnNjZW5lRWwuc3lzdGVtcy5hcmpzIHx8IHRoaXMuZWwuc2NlbmVFbC5zeXN0ZW1zLmFydG9vbGtpdFxuXG4vLyBUT0RPIG1ha2UgaXQgd29yayBvbiBjYW1lcmFUcmFuc2Zvcm1NYXRyaXggdG9vXG4vL1xuXHRcdF90aGlzLmlzUmVhZHkgPSBmYWxzZVxuXHRcdF90aGlzLl9hckFuY2hvciA9IG51bGxcblx0XHRfdGhpcy5fYXJIaXRUZXN0aW5nID0gbnVsbFxuXG5cdFx0Ly8gdHJpY2sgdG8gd2FpdCB1bnRpbCBhcmpzU3lzdGVtIGlzIGlzUmVhZHlcblx0XHR2YXIgc3RhcnRlZEF0ID0gRGF0ZS5ub3coKVxuXHRcdHZhciB0aW1lcklkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtcblx0XHRcdHZhciBhbmNob3JFbCA9IF90aGlzLmVsXG5cdFx0XHR2YXIgYW5jaG9yQ29tcG9uZW50ID0gYW5jaG9yRWwuY29tcG9uZW50c1snYXJqcy1hbmNob3InXVxuXHRcdFx0Ly8gd2FpdCB1bnRpbCBhbmNob3JDb21wb25lbnQgaXMgaXNSZWFkeVxuXHRcdFx0aWYoIGFuY2hvckNvbXBvbmVudCA9PT0gdW5kZWZpbmVkIHx8IGFuY2hvckNvbXBvbmVudC5pc1JlYWR5ID09PSBmYWxzZSApXHRyZXR1cm5cblxuXHRcdFx0Y2xlYXJJbnRlcnZhbCh0aW1lcklkKVxuXG5cdFx0XHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XHRcdC8vXHRcdGNyZWF0ZSBhckFuY2hvclxuXHRcdFx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFx0XHR2YXIgYXJBbmNob3IgPSBhbmNob3JDb21wb25lbnQuX2FyQW5jaG9yXG5cdFx0XHR2YXIgYXJTZXNzaW9uID0gYXJqc1N5c3RlbS5fYXJTZXNzaW9uXG5cdFx0XHR2YXIgcmVuZGVyZXIgPSBhclNlc3Npb24ucGFyYW1ldGVycy5yZW5kZXJlclxuXG5cdFx0XHR2YXIgaGl0VGVzdGluZyA9IF90aGlzLl9hckhpdFRlc3RpbmcgPSBuZXcgSGl0VGVzdGluZyhhclNlc3Npb24pXG5cdFx0XHRoaXRUZXN0aW5nLmVuYWJsZWQgPSBfdGhpcy5kYXRhLmVuYWJsZWRcblxuXHRcdFx0X3RoaXMuaXNSZWFkeSA9IHRydWVcblx0XHR9LCAxMDAwLzYwKVxuXHR9LFxuXHRyZW1vdmUgOiBmdW5jdGlvbigpe1xuXHR9LFxuXHR1cGRhdGU6IGZ1bmN0aW9uICgpIHtcblx0fSxcblx0dGljazogZnVuY3Rpb24oKXtcblx0XHR2YXIgX3RoaXMgPSB0aGlzXG5cdFx0Ly8gaWYgbm90IHlldCBpc1JlYWR5LCBkbyBub3RoaW5nXG5cdFx0aWYoIHRoaXMuaXNSZWFkeSA9PT0gZmFsc2UgKVx0cmV0dXJuXG5cblx0XHR2YXIgYXJqc1N5c3RlbSA9IHRoaXMuZWwuc2NlbmVFbC5zeXN0ZW1zLmFyanMgfHwgdGhpcy5lbC5zY2VuZUVsLnN5c3RlbXMuYXJ0b29sa2l0XG5cdFx0dmFyIGFyU2Vzc2lvbiA9IGFyanNTeXN0ZW0uX2FyU2Vzc2lvblxuXG5cdFx0dmFyIGFuY2hvckVsID0gX3RoaXMuZWxcblx0XHR2YXIgYW5jaG9yQ29tcG9uZW50ID0gYW5jaG9yRWwuY29tcG9uZW50c1snYXJqcy1hbmNob3InXVxuXHRcdHZhciBhckFuY2hvciA9IGFuY2hvckNvbXBvbmVudC5fYXJBbmNob3JcblxuXG5cdFx0dmFyIGhpdFRlc3RpbmcgPSB0aGlzLl9hckhpdFRlc3Rpbmdcblx0XHR2YXIgY2FtZXJhID0gYXJTZXNzaW9uLnBhcmFtZXRlcnMuY2FtZXJhXG4vLyBjb25zb2xlLmxvZyhjYW1lcmEucG9zaXRpb24pXG5cdFx0aGl0VGVzdGluZy51cGRhdGUoY2FtZXJhLCBhckFuY2hvci5vYmplY3QzZCwgYXJBbmNob3IucGFyYW1ldGVycy5jaGFuZ2VNYXRyaXhNb2RlKVxuXHR9XG59KTtcbiIsIlxuLyoqXG4gKiBAYXV0aG9yIHJpY2h0IC8gaHR0cDovL3JpY2h0Lm1lXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqXG4gKiBXM0MgRGV2aWNlIE9yaWVudGF0aW9uIGNvbnRyb2wgKGh0dHA6Ly93M2MuZ2l0aHViLmlvL2RldmljZW9yaWVudGF0aW9uL3NwZWMtc291cmNlLW9yaWVudGF0aW9uLmh0bWwpXG4gKi9cblxuLyogTk9URSB0aGF0IHRoaXMgaXMgYSBtb2RpZmllZCB2ZXJzaW9uIG9mIFRIUkVFLkRldmljZU9yaWVudGF0aW9uQ29udHJvbHMgdG8gXG4gKiBhbGxvdyBleHBvbmVudGlhbCBzbW9vdGhpbmcsIGZvciB1c2UgaW4gQVIuanMuXG4gKlxuICogTW9kaWZpY2F0aW9ucyBOaWNrIFdoaXRlbGVnZyAobmlja3cxIGdpdGh1YilcbiAqL1xuXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tIFwidGhyZWVcIjtcblxuY29uc3QgQXJqc0RldmljZU9yaWVudGF0aW9uQ29udHJvbHMgPSBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuICB2YXIgc2NvcGUgPSB0aGlzO1xuXG4gIHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuICB0aGlzLm9iamVjdC5yb3RhdGlvbi5yZW9yZGVyKCAnWVhaJyApO1xuXG4gIHRoaXMuZW5hYmxlZCA9IHRydWU7XG5cbiAgdGhpcy5kZXZpY2VPcmllbnRhdGlvbiA9IHt9O1xuICB0aGlzLnNjcmVlbk9yaWVudGF0aW9uID0gMDtcblxuICB0aGlzLmFscGhhT2Zmc2V0ID0gMDsgLy8gcmFkaWFuc1xuXG4gIHRoaXMuc21vb3RoaW5nRmFjdG9yID0gMTtcblxuICB0aGlzLlRXT19QSSA9IDIgKiBNYXRoLlBJO1xuICB0aGlzLkhBTEZfUEkgPSAwLjUgKiBNYXRoLlBJO1xuXG4gIHZhciBvbkRldmljZU9yaWVudGF0aW9uQ2hhbmdlRXZlbnQgPSBmdW5jdGlvbiAoIGV2ZW50ICkge1xuXG4gICAgc2NvcGUuZGV2aWNlT3JpZW50YXRpb24gPSBldmVudDtcblxuICB9O1xuXG4gIHZhciBvblNjcmVlbk9yaWVudGF0aW9uQ2hhbmdlRXZlbnQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICBzY29wZS5zY3JlZW5PcmllbnRhdGlvbiA9IHdpbmRvdy5vcmllbnRhdGlvbiB8fCAwO1xuXG4gIH07XG5cbiAgLy8gVGhlIGFuZ2xlcyBhbHBoYSwgYmV0YSBhbmQgZ2FtbWEgZm9ybSBhIHNldCBvZiBpbnRyaW5zaWMgVGFpdC1CcnlhbiBhbmdsZXMgb2YgdHlwZSBaLVgnLVknJ1xuXG4gIHZhciBzZXRPYmplY3RRdWF0ZXJuaW9uID0gZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIHplZSA9IG5ldyBUSFJFRS5WZWN0b3IzKCAwLCAwLCAxICk7XG5cbiAgICB2YXIgZXVsZXIgPSBuZXcgVEhSRUUuRXVsZXIoKTtcblxuICAgIHZhciBxMCA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCk7XG5cbiAgICB2YXIgcTEgPSBuZXcgVEhSRUUuUXVhdGVybmlvbiggLSBNYXRoLnNxcnQoIDAuNSApLCAwLCAwLCBNYXRoLnNxcnQoIDAuNSApICk7IC8vIC0gUEkvMiBhcm91bmQgdGhlIHgtYXhpc1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICggcXVhdGVybmlvbiwgYWxwaGEsIGJldGEsIGdhbW1hLCBvcmllbnQgKSB7XG5cbiAgICAgIGV1bGVyLnNldCggYmV0YSwgYWxwaGEsIC0gZ2FtbWEsICdZWFonICk7IC8vICdaWFknIGZvciB0aGUgZGV2aWNlLCBidXQgJ1lYWicgZm9yIHVzXG5cbiAgICAgIHF1YXRlcm5pb24uc2V0RnJvbUV1bGVyKCBldWxlciApOyAvLyBvcmllbnQgdGhlIGRldmljZVxuXG4gICAgICBxdWF0ZXJuaW9uLm11bHRpcGx5KCBxMSApOyAvLyBjYW1lcmEgbG9va3Mgb3V0IHRoZSBiYWNrIG9mIHRoZSBkZXZpY2UsIG5vdCB0aGUgdG9wXG5cbiAgICAgIHF1YXRlcm5pb24ubXVsdGlwbHkoIHEwLnNldEZyb21BeGlzQW5nbGUoIHplZSwgLSBvcmllbnQgKSApOyAvLyBhZGp1c3QgZm9yIHNjcmVlbiBvcmllbnRhdGlvblxuXG4gICAgfTtcblxuICB9KCk7XG5cbiAgdGhpcy5jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuIFxuICAgIG9uU2NyZWVuT3JpZW50YXRpb25DaGFuZ2VFdmVudCgpO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdvcmllbnRhdGlvbmNoYW5nZScsIG9uU2NyZWVuT3JpZW50YXRpb25DaGFuZ2VFdmVudCwgZmFsc2UgKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ2RldmljZW9yaWVudGF0aW9uJywgb25EZXZpY2VPcmllbnRhdGlvbkNoYW5nZUV2ZW50LCBmYWxzZSApO1xuXG4gICAgc2NvcGUuZW5hYmxlZCA9IHRydWU7XG5cbiAgfTtcblxuICB0aGlzLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ29yaWVudGF0aW9uY2hhbmdlJywgb25TY3JlZW5PcmllbnRhdGlvbkNoYW5nZUV2ZW50LCBmYWxzZSApO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGV2aWNlb3JpZW50YXRpb24nLCBvbkRldmljZU9yaWVudGF0aW9uQ2hhbmdlRXZlbnQsIGZhbHNlICk7XG5cbiAgICBzY29wZS5lbmFibGVkID0gZmFsc2U7XG5cbiAgfTtcblxuICB0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcblxuICAgIGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cbiAgICB2YXIgZGV2aWNlID0gc2NvcGUuZGV2aWNlT3JpZW50YXRpb247XG5cbiAgICBpZiAoIGRldmljZSApIHtcblxuICAgICAgdmFyIGFscGhhID0gZGV2aWNlLmFscGhhID8gVEhSRUUuTWF0aC5kZWdUb1JhZCggZGV2aWNlLmFscGhhICkgKyBzY29wZS5hbHBoYU9mZnNldCA6IDA7IC8vIFpcblxuICAgICAgdmFyIGJldGEgPSBkZXZpY2UuYmV0YSA/IFRIUkVFLk1hdGguZGVnVG9SYWQoIGRldmljZS5iZXRhICkgOiAwOyAvLyBYJ1xuXG4gICAgICB2YXIgZ2FtbWEgPSBkZXZpY2UuZ2FtbWEgPyBUSFJFRS5NYXRoLmRlZ1RvUmFkKCBkZXZpY2UuZ2FtbWEgKSA6IDA7IC8vIFknJ1xuXG4gICAgICB2YXIgb3JpZW50ID0gc2NvcGUuc2NyZWVuT3JpZW50YXRpb24gPyBUSFJFRS5NYXRoLmRlZ1RvUmFkKCBzY29wZS5zY3JlZW5PcmllbnRhdGlvbiApIDogMDsgLy8gT1xuXG4gICAgICAvLyBOVyBBZGRlZCBzbW9vdGhpbmcgY29kZVxuICAgICAgdmFyIGsgPSB0aGlzLnNtb290aGluZ0ZhY3RvcjtcblxuICAgICAgaWYodGhpcy5sYXN0T3JpZW50YXRpb24pIHtcbiAgICAgICAgYWxwaGEgPSB0aGlzLl9nZXRTbW9vdGhlZEFuZ2xlKGFscGhhLCB0aGlzLmxhc3RPcmllbnRhdGlvbi5hbHBoYSwgayk7XG4gICAgICAgIGJldGEgPSB0aGlzLl9nZXRTbW9vdGhlZEFuZ2xlKGJldGEgKyBNYXRoLlBJLCB0aGlzLmxhc3RPcmllbnRhdGlvbi5iZXRhLCBrKTtcbiAgICAgICAgZ2FtbWEgPSB0aGlzLl9nZXRTbW9vdGhlZEFuZ2xlKGdhbW1hICsgdGhpcy5IQUxGX1BJLCB0aGlzLmxhc3RPcmllbnRhdGlvbi5nYW1tYSwgaywgTWF0aC5QSSk7XG4gICAgXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiZXRhICs9IE1hdGguUEk7XG4gICAgICAgIGdhbW1hICs9IHRoaXMuSEFMRl9QSTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sYXN0T3JpZW50YXRpb24gPSB7XG4gICAgICAgIGFscGhhOiBhbHBoYSxcbiAgICAgICAgYmV0YTogYmV0YSxcbiAgICAgICAgZ2FtbWE6IGdhbW1hXG4gICAgICB9O1xuICAgICAgc2V0T2JqZWN0UXVhdGVybmlvbiggc2NvcGUub2JqZWN0LnF1YXRlcm5pb24sIGFscGhhLCBiZXRhIC0gTWF0aC5QSSwgZ2FtbWEgLSB0aGlzLkhBTEZfUEksIG9yaWVudCApO1xuXG4gICAgfVxuICB9O1xuXG4gICBcbiAgIC8vIE5XIEFkZGVkXG4gIHRoaXMuX29yZGVyQW5nbGUgPSBmdW5jdGlvbihhLCBiLCByYW5nZSA9IHRoaXMuVFdPX1BJKSB7XG4gICAgaWYgKChiID4gYSAmJiBNYXRoLmFicyhiIC0gYSkgPCByYW5nZSAvIDIpIHx8IChhID4gYiAmJiBNYXRoLmFicyhiIC0gYSkgPiByYW5nZSAvIDIpKSB7XG4gICAgICByZXR1cm4geyBsZWZ0OiBhLCByaWdodDogYiB9XG4gICAgfSBlbHNlIHsgXG4gICAgICByZXR1cm4geyBsZWZ0OiBiLCByaWdodDogYSB9XG4gICAgfVxuICB9O1xuXG4gICAvLyBOVyBBZGRlZFxuICB0aGlzLl9nZXRTbW9vdGhlZEFuZ2xlID0gZnVuY3Rpb24oYSwgYiwgaywgcmFuZ2UgPSB0aGlzLlRXT19QSSkge1xuICAgIGNvbnN0IGFuZ2xlcyA9IHRoaXMuX29yZGVyQW5nbGUoYSwgYiwgcmFuZ2UpO1xuICAgIGNvbnN0IGFuZ2xlc2hpZnQgPSBhbmdsZXMubGVmdDtcbiAgICBjb25zdCBvcmlnQW5nbGVzUmlnaHQgPSBhbmdsZXMucmlnaHQ7XG4gICAgYW5nbGVzLmxlZnQgPSAwO1xuICAgIGFuZ2xlcy5yaWdodCAtPSBhbmdsZXNoaWZ0O1xuICAgIGlmKGFuZ2xlcy5yaWdodCA8IDApIGFuZ2xlcy5yaWdodCArPSByYW5nZTtcbiAgICBsZXQgbmV3YW5nbGUgPSBvcmlnQW5nbGVzUmlnaHQgPT0gYiA/ICgxIC0gaykqYW5nbGVzLnJpZ2h0ICsgayAqIGFuZ2xlcy5sZWZ0IDogayAqIGFuZ2xlcy5yaWdodCArICgxIC0gaykgKiBhbmdsZXMubGVmdDtcbiAgICBuZXdhbmdsZSArPSBhbmdsZXNoaWZ0O1xuICAgIGlmKG5ld2FuZ2xlID49IHJhbmdlKSBuZXdhbmdsZSAtPSByYW5nZTtcbiAgICByZXR1cm4gbmV3YW5nbGU7XG4gIH07XG5cbiAgdGhpcy5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgIHNjb3BlLmRpc2Nvbm5lY3QoKTtcbiAgfTtcblxuICB0aGlzLmNvbm5lY3QoKTtcblxufTtcblxuZXhwb3J0IGRlZmF1bHQgQXJqc0RldmljZU9yaWVudGF0aW9uQ29udHJvbHM7XG4iLCIvLyBUbyBhdm9pZCByZWNhbGN1bGF0aW9uIGF0IGV2ZXJ5IG1vdXNlIG1vdmVtZW50IHRpY2tcbnZhciBQSV8yID0gTWF0aC5QSSAvIDI7XG5cblxuLyoqXG4gKiBsb29rLWNvbnRyb2xzLiBVcGRhdGUgZW50aXR5IHBvc2UsIGZhY3RvcmluZyBtb3VzZSwgdG91Y2gsIGFuZCBXZWJWUiBBUEkgZGF0YS5cbiAqL1xuXG4vKiBOT1RFIHRoYXQgdGhpcyBpcyBhIG1vZGlmaWVkIHZlcnNpb24gb2YgQS1GcmFtZSdzIGxvb2stY29udHJvbHMgdG8gXG4gKiBhbGxvdyBleHBvbmVudGlhbCBzbW9vdGhpbmcsIGZvciB1c2UgaW4gQVIuanMuXG4gKlxuICogTW9kaWZpY2F0aW9ucyBOaWNrIFdoaXRlbGVnZyAobmlja3cxIGdpdGh1YilcbiAqL1xuXG5pbXBvcnQgKiBhcyBBRlJBTUUgZnJvbSAnYWZyYW1lJ1xuaW1wb3J0IEFyanNEZXZpY2VPcmllbnRhdGlvbkNvbnRyb2xzIGZyb20gJy4vQXJqc0RldmljZU9yaWVudGF0aW9uQ29udHJvbHMnXG5cbkFGUkFNRS5yZWdpc3RlckNvbXBvbmVudCgnYXJqcy1sb29rLWNvbnRyb2xzJywge1xuICBkZXBlbmRlbmNpZXM6IFsncG9zaXRpb24nLCAncm90YXRpb24nXSxcblxuICBzY2hlbWE6IHtcbiAgICBlbmFibGVkOiB7ZGVmYXVsdDogdHJ1ZX0sXG4gICAgbWFnaWNXaW5kb3dUcmFja2luZ0VuYWJsZWQ6IHtkZWZhdWx0OiB0cnVlfSxcbiAgICBwb2ludGVyTG9ja0VuYWJsZWQ6IHtkZWZhdWx0OiBmYWxzZX0sXG4gICAgcmV2ZXJzZU1vdXNlRHJhZzoge2RlZmF1bHQ6IGZhbHNlfSxcbiAgICByZXZlcnNlVG91Y2hEcmFnOiB7ZGVmYXVsdDogZmFsc2V9LFxuICAgIHRvdWNoRW5hYmxlZDoge2RlZmF1bHQ6IHRydWV9LFxuICAgIHNtb290aGluZ0ZhY3RvcjogeyB0eXBlOiAnbnVtYmVyJywgZGVmYXVsdDogMSB9XG4gIH0sXG5cbiAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZGVsdGFZYXcgPSAwO1xuICAgIHRoaXMucHJldmlvdXNITURQb3NpdGlvbiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG4gICAgdGhpcy5obWRRdWF0ZXJuaW9uID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTtcbiAgICB0aGlzLm1hZ2ljV2luZG93QWJzb2x1dGVFdWxlciA9IG5ldyBUSFJFRS5FdWxlcigpO1xuICAgIHRoaXMubWFnaWNXaW5kb3dEZWx0YUV1bGVyID0gbmV3IFRIUkVFLkV1bGVyKCk7XG4gICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG4gICAgdGhpcy5tYWdpY1dpbmRvd09iamVjdCA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuICAgIHRoaXMucm90YXRpb24gPSB7fTtcbiAgICB0aGlzLmRlbHRhUm90YXRpb24gPSB7fTtcbiAgICB0aGlzLnNhdmVkUG9zZSA9IG51bGw7XG4gICAgdGhpcy5wb2ludGVyTG9ja2VkID0gZmFsc2U7XG4gICAgdGhpcy5zZXR1cE1vdXNlQ29udHJvbHMoKTtcbiAgICB0aGlzLmJpbmRNZXRob2RzKCk7XG4gICAgdGhpcy5wcmV2aW91c01vdXNlRXZlbnQgPSB7fTtcblxuICAgIHRoaXMuc2V0dXBNYWdpY1dpbmRvd0NvbnRyb2xzKCk7XG5cbiAgICAvLyBUbyBzYXZlIC8gcmVzdG9yZSBjYW1lcmEgcG9zZVxuICAgIHRoaXMuc2F2ZWRQb3NlID0ge1xuICAgICAgcG9zaXRpb246IG5ldyBUSFJFRS5WZWN0b3IzKCksXG4gICAgICByb3RhdGlvbjogbmV3IFRIUkVFLkV1bGVyKClcbiAgICB9O1xuXG4gICAgLy8gQ2FsbCBlbnRlciBWUiBoYW5kbGVyIGlmIHRoZSBzY2VuZSBoYXMgZW50ZXJlZCBWUiBiZWZvcmUgdGhlIGV2ZW50IGxpc3RlbmVycyBhdHRhY2hlZC5cbiAgICBpZiAodGhpcy5lbC5zY2VuZUVsLmlzKCd2ci1tb2RlJykpIHsgdGhpcy5vbkVudGVyVlIoKTsgfVxuICB9LFxuXG4gIHNldHVwTWFnaWNXaW5kb3dDb250cm9sczogZnVuY3Rpb24gKCkge1xuICAgIHZhciBtYWdpY1dpbmRvd0NvbnRyb2xzO1xuICAgIHZhciBkYXRhID0gdGhpcy5kYXRhO1xuXG4gICAgLy8gT25seSBvbiBtb2JpbGUgZGV2aWNlcyBhbmQgb25seSBlbmFibGVkIGlmIERldmljZU9yaWVudGF0aW9uIHBlcm1pc3Npb24gaGFzIGJlZW4gZ3JhbnRlZC5cbiAgICBpZiAoQUZSQU1FLnV0aWxzLmRldmljZS5pc01vYmlsZSgpKSB7XG4gICAgICBtYWdpY1dpbmRvd0NvbnRyb2xzID0gdGhpcy5tYWdpY1dpbmRvd0NvbnRyb2xzID0gbmV3IEFyanNEZXZpY2VPcmllbnRhdGlvbkNvbnRyb2xzKHRoaXMubWFnaWNXaW5kb3dPYmplY3QpO1xuICAgICAgaWYgKHR5cGVvZiBEZXZpY2VPcmllbnRhdGlvbkV2ZW50ICE9PSAndW5kZWZpbmVkJyAmJiBEZXZpY2VPcmllbnRhdGlvbkV2ZW50LnJlcXVlc3RQZXJtaXNzaW9uKSB7XG4gICAgICAgIG1hZ2ljV2luZG93Q29udHJvbHMuZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5lbC5zY2VuZUVsLmNvbXBvbmVudHNbJ2RldmljZS1vcmllbnRhdGlvbi1wZXJtaXNzaW9uLXVpJ10ucGVybWlzc2lvbkdyYW50ZWQpIHtcbiAgICAgICAgICBtYWdpY1dpbmRvd0NvbnRyb2xzLmVuYWJsZWQgPSBkYXRhLm1hZ2ljV2luZG93VHJhY2tpbmdFbmFibGVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZWwuc2NlbmVFbC5hZGRFdmVudExpc3RlbmVyKCdkZXZpY2VvcmllbnRhdGlvbnBlcm1pc3Npb25ncmFudGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbWFnaWNXaW5kb3dDb250cm9scy5lbmFibGVkID0gZGF0YS5tYWdpY1dpbmRvd1RyYWNraW5nRW5hYmxlZDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICB1cGRhdGU6IGZ1bmN0aW9uIChvbGREYXRhKSB7XG4gICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7XG5cbiAgICAvLyBEaXNhYmxlIGdyYWIgY3Vyc29yIGNsYXNzZXMgaWYgbm8gbG9uZ2VyIGVuYWJsZWQuXG4gICAgaWYgKGRhdGEuZW5hYmxlZCAhPT0gb2xkRGF0YS5lbmFibGVkKSB7XG4gICAgICB0aGlzLnVwZGF0ZUdyYWJDdXJzb3IoZGF0YS5lbmFibGVkKTtcbiAgICB9XG5cbiAgICAvLyBSZXNldCBtYWdpYyB3aW5kb3cgZXVsZXJzIGlmIHRyYWNraW5nIGlzIGRpc2FibGVkLlxuICAgIGlmIChvbGREYXRhICYmICFkYXRhLm1hZ2ljV2luZG93VHJhY2tpbmdFbmFibGVkICYmIG9sZERhdGEubWFnaWNXaW5kb3dUcmFja2luZ0VuYWJsZWQpIHtcbiAgICAgIHRoaXMubWFnaWNXaW5kb3dBYnNvbHV0ZUV1bGVyLnNldCgwLCAwLCAwKTtcbiAgICAgIHRoaXMubWFnaWNXaW5kb3dEZWx0YUV1bGVyLnNldCgwLCAwLCAwKTtcbiAgICB9XG5cbiAgICAvLyBQYXNzIG9uIG1hZ2ljIHdpbmRvdyB0cmFja2luZyBzZXR0aW5nIHRvIG1hZ2ljV2luZG93Q29udHJvbHMuXG4gICAgaWYgKHRoaXMubWFnaWNXaW5kb3dDb250cm9scykge1xuICAgICAgdGhpcy5tYWdpY1dpbmRvd0NvbnRyb2xzLmVuYWJsZWQgPSBkYXRhLm1hZ2ljV2luZG93VHJhY2tpbmdFbmFibGVkO1xuICAgICAgdGhpcy5tYWdpY1dpbmRvd0NvbnRyb2xzLnNtb290aGluZ0ZhY3RvciA9IGRhdGEuc21vb3RoaW5nRmFjdG9yO1xuICAgIH1cblxuICAgIGlmIChvbGREYXRhICYmICFkYXRhLnBvaW50ZXJMb2NrRW5hYmxlZCAhPT0gb2xkRGF0YS5wb2ludGVyTG9ja0VuYWJsZWQpIHtcbiAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgIGlmICh0aGlzLnBvaW50ZXJMb2NrZWQpIHsgdGhpcy5leGl0UG9pbnRlckxvY2soKTsgfVxuICAgIH1cbiAgfSxcblxuICB0aWNrOiBmdW5jdGlvbiAodCkge1xuICAgIHZhciBkYXRhID0gdGhpcy5kYXRhO1xuICAgIGlmICghZGF0YS5lbmFibGVkKSB7IHJldHVybjsgfVxuICAgIHRoaXMudXBkYXRlT3JpZW50YXRpb24oKTtcbiAgfSxcblxuICBwbGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuICB9LFxuXG4gIHBhdXNlOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xuICAgIGlmICh0aGlzLnBvaW50ZXJMb2NrZWQpIHsgdGhpcy5leGl0UG9pbnRlckxvY2soKTsgfVxuICB9LFxuXG4gIHJlbW92ZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICBpZiAodGhpcy5wb2ludGVyTG9ja2VkKSB7IHRoaXMuZXhpdFBvaW50ZXJMb2NrKCk7IH1cbiAgfSxcblxuICBiaW5kTWV0aG9kczogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMub25Nb3VzZURvd24gPSBBRlJBTUUudXRpbHMuYmluZCh0aGlzLm9uTW91c2VEb3duLCB0aGlzKTtcbiAgICB0aGlzLm9uTW91c2VNb3ZlID0gQUZSQU1FLnV0aWxzLmJpbmQodGhpcy5vbk1vdXNlTW92ZSwgdGhpcyk7XG4gICAgdGhpcy5vbk1vdXNlVXAgPSBBRlJBTUUudXRpbHMuYmluZCh0aGlzLm9uTW91c2VVcCwgdGhpcyk7XG4gICAgdGhpcy5vblRvdWNoU3RhcnQgPSBBRlJBTUUudXRpbHMuYmluZCh0aGlzLm9uVG91Y2hTdGFydCwgdGhpcyk7XG4gICAgdGhpcy5vblRvdWNoTW92ZSA9IEFGUkFNRS51dGlscy5iaW5kKHRoaXMub25Ub3VjaE1vdmUsIHRoaXMpO1xuICAgIHRoaXMub25Ub3VjaEVuZCA9IEFGUkFNRS51dGlscy5iaW5kKHRoaXMub25Ub3VjaEVuZCwgdGhpcyk7XG4gICAgdGhpcy5vbkVudGVyVlIgPSBBRlJBTUUudXRpbHMuYmluZCh0aGlzLm9uRW50ZXJWUiwgdGhpcyk7XG4gICAgdGhpcy5vbkV4aXRWUiA9IEFGUkFNRS51dGlscy5iaW5kKHRoaXMub25FeGl0VlIsIHRoaXMpO1xuICAgIHRoaXMub25Qb2ludGVyTG9ja0NoYW5nZSA9IEFGUkFNRS51dGlscy5iaW5kKHRoaXMub25Qb2ludGVyTG9ja0NoYW5nZSwgdGhpcyk7XG4gICAgdGhpcy5vblBvaW50ZXJMb2NrRXJyb3IgPSBBRlJBTUUudXRpbHMuYmluZCh0aGlzLm9uUG9pbnRlckxvY2tFcnJvciwgdGhpcyk7XG4gIH0sXG5cbiAvKipcbiAgKiBTZXQgdXAgc3RhdGVzIGFuZCBPYmplY3QzRHMgbmVlZGVkIHRvIHN0b3JlIHJvdGF0aW9uIGRhdGEuXG4gICovXG4gIHNldHVwTW91c2VDb250cm9sczogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMubW91c2VEb3duID0gZmFsc2U7XG4gICAgdGhpcy5waXRjaE9iamVjdCA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuICAgIHRoaXMueWF3T2JqZWN0ID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gICAgdGhpcy55YXdPYmplY3QucG9zaXRpb24ueSA9IDEwO1xuICAgIHRoaXMueWF3T2JqZWN0LmFkZCh0aGlzLnBpdGNoT2JqZWN0KTtcbiAgfSxcblxuICAvKipcbiAgICogQWRkIG1vdXNlIGFuZCB0b3VjaCBldmVudCBsaXN0ZW5lcnMgdG8gY2FudmFzLlxuICAgKi9cbiAgYWRkRXZlbnRMaXN0ZW5lcnM6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2NlbmVFbCA9IHRoaXMuZWwuc2NlbmVFbDtcbiAgICB2YXIgY2FudmFzRWwgPSBzY2VuZUVsLmNhbnZhcztcblxuICAgIC8vIFdhaXQgZm9yIGNhbnZhcyB0byBsb2FkLlxuICAgIGlmICghY2FudmFzRWwpIHtcbiAgICAgIHNjZW5lRWwuYWRkRXZlbnRMaXN0ZW5lcigncmVuZGVyLXRhcmdldC1sb2FkZWQnLCBBRlJBTUUudXRpbHMuYmluZCh0aGlzLmFkZEV2ZW50TGlzdGVuZXJzLCB0aGlzKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gTW91c2UgZXZlbnRzLlxuICAgIGNhbnZhc0VsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd24sIGZhbHNlKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5vbk1vdXNlTW92ZSwgZmFsc2UpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5vbk1vdXNlVXAsIGZhbHNlKTtcblxuICAgIC8vIFRvdWNoIGV2ZW50cy5cbiAgICBjYW52YXNFbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vblRvdWNoU3RhcnQpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLm9uVG91Y2hNb3ZlKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLm9uVG91Y2hFbmQpO1xuXG4gICAgLy8gc2NlbmVFbCBldmVudHMuXG4gICAgc2NlbmVFbC5hZGRFdmVudExpc3RlbmVyKCdlbnRlci12cicsIHRoaXMub25FbnRlclZSKTtcbiAgICBzY2VuZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2V4aXQtdnInLCB0aGlzLm9uRXhpdFZSKTtcblxuICAgIC8vIFBvaW50ZXIgTG9jayBldmVudHMuXG4gICAgaWYgKHRoaXMuZGF0YS5wb2ludGVyTG9ja0VuYWJsZWQpIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJsb2NrY2hhbmdlJywgdGhpcy5vblBvaW50ZXJMb2NrQ2hhbmdlLCBmYWxzZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3pwb2ludGVybG9ja2NoYW5nZScsIHRoaXMub25Qb2ludGVyTG9ja0NoYW5nZSwgZmFsc2UpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmxvY2tlcnJvcicsIHRoaXMub25Qb2ludGVyTG9ja0Vycm9yLCBmYWxzZSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZW1vdmUgbW91c2UgYW5kIHRvdWNoIGV2ZW50IGxpc3RlbmVycyBmcm9tIGNhbnZhcy5cbiAgICovXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNjZW5lRWwgPSB0aGlzLmVsLnNjZW5lRWw7XG4gICAgdmFyIGNhbnZhc0VsID0gc2NlbmVFbCAmJiBzY2VuZUVsLmNhbnZhcztcblxuICAgIGlmICghY2FudmFzRWwpIHsgcmV0dXJuOyB9XG5cbiAgICAvLyBNb3VzZSBldmVudHMuXG4gICAgY2FudmFzRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5vbk1vdXNlRG93bik7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZU1vdmUpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5vbk1vdXNlVXApO1xuXG4gICAgLy8gVG91Y2ggZXZlbnRzLlxuICAgIGNhbnZhc0VsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uVG91Y2hTdGFydCk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMub25Ub3VjaE1vdmUpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMub25Ub3VjaEVuZCk7XG5cbiAgICAvLyBzY2VuZUVsIGV2ZW50cy5cbiAgICBzY2VuZUVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2VudGVyLXZyJywgdGhpcy5vbkVudGVyVlIpO1xuICAgIHNjZW5lRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXhpdC12cicsIHRoaXMub25FeGl0VlIpO1xuXG4gICAgLy8gUG9pbnRlciBMb2NrIGV2ZW50cy5cbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVybG9ja2NoYW5nZScsIHRoaXMub25Qb2ludGVyTG9ja0NoYW5nZSwgZmFsc2UpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21venBvaW50ZXJsb2NrY2hhbmdlJywgdGhpcy5vblBvaW50ZXJMb2NrQ2hhbmdlLCBmYWxzZSk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmxvY2tlcnJvcicsIHRoaXMub25Qb2ludGVyTG9ja0Vycm9yLCBmYWxzZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBvcmllbnRhdGlvbiBmb3IgbW9iaWxlLCBtb3VzZSBkcmFnLCBhbmQgaGVhZHNldC5cbiAgICogTW91c2UtZHJhZyBvbmx5IGVuYWJsZWQgaWYgSE1EIGlzIG5vdCBhY3RpdmUuXG4gICAqL1xuICB1cGRhdGVPcmllbnRhdGlvbjogKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcG9zZU1hdHJpeCA9IG5ldyBUSFJFRS5NYXRyaXg0KCk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG9iamVjdDNEID0gdGhpcy5lbC5vYmplY3QzRDtcbiAgICAgIHZhciBwaXRjaE9iamVjdCA9IHRoaXMucGl0Y2hPYmplY3Q7XG4gICAgICB2YXIgeWF3T2JqZWN0ID0gdGhpcy55YXdPYmplY3Q7XG4gICAgICB2YXIgcG9zZTtcbiAgICAgIHZhciBzY2VuZUVsID0gdGhpcy5lbC5zY2VuZUVsO1xuXG4gICAgICAvLyBJbiBWUiBtb2RlLCBUSFJFRSBpcyBpbiBjaGFyZ2Ugb2YgdXBkYXRpbmcgdGhlIGNhbWVyYSBwb3NlLlxuICAgICAgaWYgKHNjZW5lRWwuaXMoJ3ZyLW1vZGUnKSAmJiBzY2VuZUVsLmNoZWNrSGVhZHNldENvbm5lY3RlZCgpKSB7XG4gICAgICAgIC8vIFdpdGggV2ViWFIgVEhSRUUgYXBwbGllcyBoZWFkc2V0IHBvc2UgdG8gdGhlIG9iamVjdDNEIG1hdHJpeFdvcmxkIGludGVybmFsbHkuXG4gICAgICAgIC8vIFJlZmxlY3QgdmFsdWVzIGJhY2sgb24gcG9zaXRpb24sIHJvdGF0aW9uLCBzY2FsZSBmb3IgZ2V0QXR0cmlidXRlIHRvIHJldHVybiB0aGUgZXhwZWN0ZWQgdmFsdWVzLlxuICAgICAgICBpZiAoc2NlbmVFbC5oYXNXZWJYUikge1xuICAgICAgICAgIHBvc2UgPSBzY2VuZUVsLnJlbmRlcmVyLnhyLmdldENhbWVyYVBvc2UoKTtcbiAgICAgICAgICBpZiAocG9zZSkge1xuICAgICAgICAgICAgcG9zZU1hdHJpeC5lbGVtZW50cyA9IHBvc2UudHJhbnNmb3JtLm1hdHJpeDtcbiAgICAgICAgICAgIHBvc2VNYXRyaXguZGVjb21wb3NlKG9iamVjdDNELnBvc2l0aW9uLCBvYmplY3QzRC5yb3RhdGlvbiwgb2JqZWN0M0Quc2NhbGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMudXBkYXRlTWFnaWNXaW5kb3dPcmllbnRhdGlvbigpO1xuXG4gICAgICAvLyBPbiBtb2JpbGUsIGRvIGNhbWVyYSByb3RhdGlvbiB3aXRoIHRvdWNoIGV2ZW50cyBhbmQgc2Vuc29ycy5cbiAgICAgIG9iamVjdDNELnJvdGF0aW9uLnggPSB0aGlzLm1hZ2ljV2luZG93RGVsdGFFdWxlci54ICsgcGl0Y2hPYmplY3Qucm90YXRpb24ueDtcbiAgICAgIG9iamVjdDNELnJvdGF0aW9uLnkgPSB0aGlzLm1hZ2ljV2luZG93RGVsdGFFdWxlci55ICsgeWF3T2JqZWN0LnJvdGF0aW9uLnk7XG4gICAgICBvYmplY3QzRC5yb3RhdGlvbi56ID0gdGhpcy5tYWdpY1dpbmRvd0RlbHRhRXVsZXIuejtcbiAgICB9O1xuICB9KSgpLFxuXG4gIHVwZGF0ZU1hZ2ljV2luZG93T3JpZW50YXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbWFnaWNXaW5kb3dBYnNvbHV0ZUV1bGVyID0gdGhpcy5tYWdpY1dpbmRvd0Fic29sdXRlRXVsZXI7XG4gICAgdmFyIG1hZ2ljV2luZG93RGVsdGFFdWxlciA9IHRoaXMubWFnaWNXaW5kb3dEZWx0YUV1bGVyO1xuICAgIC8vIENhbGN1bGF0ZSBtYWdpYyB3aW5kb3cgSE1EIHF1YXRlcm5pb24uXG4gICAgaWYgKHRoaXMubWFnaWNXaW5kb3dDb250cm9scyAmJiB0aGlzLm1hZ2ljV2luZG93Q29udHJvbHMuZW5hYmxlZCkge1xuICAgICAgdGhpcy5tYWdpY1dpbmRvd0NvbnRyb2xzLnVwZGF0ZSgpO1xuICAgICAgbWFnaWNXaW5kb3dBYnNvbHV0ZUV1bGVyLnNldEZyb21RdWF0ZXJuaW9uKHRoaXMubWFnaWNXaW5kb3dPYmplY3QucXVhdGVybmlvbiwgJ1lYWicpO1xuICAgICAgaWYgKCF0aGlzLnByZXZpb3VzTWFnaWNXaW5kb3dZYXcgJiYgbWFnaWNXaW5kb3dBYnNvbHV0ZUV1bGVyLnkgIT09IDApIHtcbiAgICAgICAgdGhpcy5wcmV2aW91c01hZ2ljV2luZG93WWF3ID0gbWFnaWNXaW5kb3dBYnNvbHV0ZUV1bGVyLnk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5wcmV2aW91c01hZ2ljV2luZG93WWF3KSB7XG4gICAgICAgIG1hZ2ljV2luZG93RGVsdGFFdWxlci54ID0gbWFnaWNXaW5kb3dBYnNvbHV0ZUV1bGVyLng7XG4gICAgICAgIG1hZ2ljV2luZG93RGVsdGFFdWxlci55ICs9IG1hZ2ljV2luZG93QWJzb2x1dGVFdWxlci55IC0gdGhpcy5wcmV2aW91c01hZ2ljV2luZG93WWF3O1xuICAgICAgICBtYWdpY1dpbmRvd0RlbHRhRXVsZXIueiA9IG1hZ2ljV2luZG93QWJzb2x1dGVFdWxlci56O1xuICAgICAgICB0aGlzLnByZXZpb3VzTWFnaWNXaW5kb3dZYXcgPSBtYWdpY1dpbmRvd0Fic29sdXRlRXVsZXIueTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyYW5zbGF0ZSBtb3VzZSBkcmFnIGludG8gcm90YXRpb24uXG4gICAqXG4gICAqIERyYWdnaW5nIHVwIGFuZCBkb3duIHJvdGF0ZXMgdGhlIGNhbWVyYSBhcm91bmQgdGhlIFgtYXhpcyAoeWF3KS5cbiAgICogRHJhZ2dpbmcgbGVmdCBhbmQgcmlnaHQgcm90YXRlcyB0aGUgY2FtZXJhIGFyb3VuZCB0aGUgWS1heGlzIChwaXRjaCkuXG4gICAqL1xuICBvbk1vdXNlTW92ZTogZnVuY3Rpb24gKGV2dCkge1xuICAgIHZhciBkaXJlY3Rpb247XG4gICAgdmFyIG1vdmVtZW50WDtcbiAgICB2YXIgbW92ZW1lbnRZO1xuICAgIHZhciBwaXRjaE9iamVjdCA9IHRoaXMucGl0Y2hPYmplY3Q7XG4gICAgdmFyIHByZXZpb3VzTW91c2VFdmVudCA9IHRoaXMucHJldmlvdXNNb3VzZUV2ZW50O1xuICAgIHZhciB5YXdPYmplY3QgPSB0aGlzLnlhd09iamVjdDtcblxuICAgIC8vIE5vdCBkcmFnZ2luZyBvciBub3QgZW5hYmxlZC5cbiAgICBpZiAoIXRoaXMuZGF0YS5lbmFibGVkIHx8ICghdGhpcy5tb3VzZURvd24gJiYgIXRoaXMucG9pbnRlckxvY2tlZCkpIHsgcmV0dXJuOyB9XG5cbiAgICAvLyBDYWxjdWxhdGUgZGVsdGEuXG4gICAgaWYgKHRoaXMucG9pbnRlckxvY2tlZCkge1xuICAgICAgbW92ZW1lbnRYID0gZXZ0Lm1vdmVtZW50WCB8fCBldnQubW96TW92ZW1lbnRYIHx8IDA7XG4gICAgICBtb3ZlbWVudFkgPSBldnQubW92ZW1lbnRZIHx8IGV2dC5tb3pNb3ZlbWVudFkgfHwgMDtcbiAgICB9IGVsc2Uge1xuICAgICAgbW92ZW1lbnRYID0gZXZ0LnNjcmVlblggLSBwcmV2aW91c01vdXNlRXZlbnQuc2NyZWVuWDtcbiAgICAgIG1vdmVtZW50WSA9IGV2dC5zY3JlZW5ZIC0gcHJldmlvdXNNb3VzZUV2ZW50LnNjcmVlblk7XG4gICAgfVxuICAgIHRoaXMucHJldmlvdXNNb3VzZUV2ZW50LnNjcmVlblggPSBldnQuc2NyZWVuWDtcbiAgICB0aGlzLnByZXZpb3VzTW91c2VFdmVudC5zY3JlZW5ZID0gZXZ0LnNjcmVlblk7XG5cbiAgICAvLyBDYWxjdWxhdGUgcm90YXRpb24uXG4gICAgZGlyZWN0aW9uID0gdGhpcy5kYXRhLnJldmVyc2VNb3VzZURyYWcgPyAxIDogLTE7XG4gICAgeWF3T2JqZWN0LnJvdGF0aW9uLnkgKz0gbW92ZW1lbnRYICogMC4wMDIgKiBkaXJlY3Rpb247XG4gICAgcGl0Y2hPYmplY3Qucm90YXRpb24ueCArPSBtb3ZlbWVudFkgKiAwLjAwMiAqIGRpcmVjdGlvbjtcbiAgICBwaXRjaE9iamVjdC5yb3RhdGlvbi54ID0gTWF0aC5tYXgoLVBJXzIsIE1hdGgubWluKFBJXzIsIHBpdGNoT2JqZWN0LnJvdGF0aW9uLngpKTtcbiAgfSxcblxuICAvKipcbiAgICogUmVnaXN0ZXIgbW91c2UgZG93biB0byBkZXRlY3QgbW91c2UgZHJhZy5cbiAgICovXG4gIG9uTW91c2VEb3duOiBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgdmFyIHNjZW5lRWwgPSB0aGlzLmVsLnNjZW5lRWw7XG4gICAgaWYgKCF0aGlzLmRhdGEuZW5hYmxlZCB8fCAoc2NlbmVFbC5pcygndnItbW9kZScpICYmIHNjZW5lRWwuY2hlY2tIZWFkc2V0Q29ubmVjdGVkKCkpKSB7IHJldHVybjsgfVxuICAgIC8vIEhhbmRsZSBvbmx5IHByaW1hcnkgYnV0dG9uLlxuICAgIGlmIChldnQuYnV0dG9uICE9PSAwKSB7IHJldHVybjsgfVxuXG4gICAgdmFyIGNhbnZhc0VsID0gc2NlbmVFbCAmJiBzY2VuZUVsLmNhbnZhcztcblxuICAgIHRoaXMubW91c2VEb3duID0gdHJ1ZTtcbiAgICB0aGlzLnByZXZpb3VzTW91c2VFdmVudC5zY3JlZW5YID0gZXZ0LnNjcmVlblg7XG4gICAgdGhpcy5wcmV2aW91c01vdXNlRXZlbnQuc2NyZWVuWSA9IGV2dC5zY3JlZW5ZO1xuICAgIHRoaXMuc2hvd0dyYWJiaW5nQ3Vyc29yKCk7XG5cbiAgICBpZiAodGhpcy5kYXRhLnBvaW50ZXJMb2NrRW5hYmxlZCAmJiAhdGhpcy5wb2ludGVyTG9ja2VkKSB7XG4gICAgICBpZiAoY2FudmFzRWwucmVxdWVzdFBvaW50ZXJMb2NrKSB7XG4gICAgICAgIGNhbnZhc0VsLnJlcXVlc3RQb2ludGVyTG9jaygpO1xuICAgICAgfSBlbHNlIGlmIChjYW52YXNFbC5tb3pSZXF1ZXN0UG9pbnRlckxvY2spIHtcbiAgICAgICAgY2FudmFzRWwubW96UmVxdWVzdFBvaW50ZXJMb2NrKCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBTaG93cyBncmFiYmluZyBjdXJzb3Igb24gc2NlbmVcbiAgICovXG4gIHNob3dHcmFiYmluZ0N1cnNvcjogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZWwuc2NlbmVFbC5jYW52YXMuc3R5bGUuY3Vyc29yID0gJ2dyYWJiaW5nJztcbiAgfSxcblxuICAvKipcbiAgICogSGlkZXMgZ3JhYmJpbmcgY3Vyc29yIG9uIHNjZW5lXG4gICAqL1xuICBoaWRlR3JhYmJpbmdDdXJzb3I6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVsLnNjZW5lRWwuY2FudmFzLnN0eWxlLmN1cnNvciA9ICcnO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBtb3VzZSB1cCB0byBkZXRlY3QgcmVsZWFzZSBvZiBtb3VzZSBkcmFnLlxuICAgKi9cbiAgb25Nb3VzZVVwOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5tb3VzZURvd24gPSBmYWxzZTtcbiAgICB0aGlzLmhpZGVHcmFiYmluZ0N1cnNvcigpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciB0b3VjaCBkb3duIHRvIGRldGVjdCB0b3VjaCBkcmFnLlxuICAgKi9cbiAgb25Ub3VjaFN0YXJ0OiBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgaWYgKGV2dC50b3VjaGVzLmxlbmd0aCAhPT0gMSB8fFxuICAgICAgICAhdGhpcy5kYXRhLnRvdWNoRW5hYmxlZCB8fFxuICAgICAgICB0aGlzLmVsLnNjZW5lRWwuaXMoJ3ZyLW1vZGUnKSkgeyByZXR1cm47IH1cbiAgICB0aGlzLnRvdWNoU3RhcnQgPSB7XG4gICAgICB4OiBldnQudG91Y2hlc1swXS5wYWdlWCxcbiAgICAgIHk6IGV2dC50b3VjaGVzWzBdLnBhZ2VZXG4gICAgfTtcbiAgICB0aGlzLnRvdWNoU3RhcnRlZCA9IHRydWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyYW5zbGF0ZSB0b3VjaCBtb3ZlIHRvIFktYXhpcyByb3RhdGlvbi5cbiAgICovXG4gIG9uVG91Y2hNb3ZlOiBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgdmFyIGRpcmVjdGlvbjtcbiAgICB2YXIgY2FudmFzID0gdGhpcy5lbC5zY2VuZUVsLmNhbnZhcztcbiAgICB2YXIgZGVsdGFZO1xuICAgIHZhciB5YXdPYmplY3QgPSB0aGlzLnlhd09iamVjdDtcblxuICAgIGlmICghdGhpcy50b3VjaFN0YXJ0ZWQgfHwgIXRoaXMuZGF0YS50b3VjaEVuYWJsZWQpIHsgcmV0dXJuOyB9XG5cbiAgICBkZWx0YVkgPSAyICogTWF0aC5QSSAqIChldnQudG91Y2hlc1swXS5wYWdlWCAtIHRoaXMudG91Y2hTdGFydC54KSAvIGNhbnZhcy5jbGllbnRXaWR0aDtcblxuICAgIGRpcmVjdGlvbiA9IHRoaXMuZGF0YS5yZXZlcnNlVG91Y2hEcmFnID8gMSA6IC0xO1xuICAgIC8vIExpbWl0IHRvdWNoIG9yaWVudGFpb24gdG8gdG8geWF3ICh5IGF4aXMpLlxuICAgIHlhd09iamVjdC5yb3RhdGlvbi55IC09IGRlbHRhWSAqIDAuNSAqIGRpcmVjdGlvbjtcbiAgICB0aGlzLnRvdWNoU3RhcnQgPSB7XG4gICAgICB4OiBldnQudG91Y2hlc1swXS5wYWdlWCxcbiAgICAgIHk6IGV2dC50b3VjaGVzWzBdLnBhZ2VZXG4gICAgfTtcbiAgfSxcblxuICAvKipcbiAgICogUmVnaXN0ZXIgdG91Y2ggZW5kIHRvIGRldGVjdCByZWxlYXNlIG9mIHRvdWNoIGRyYWcuXG4gICAqL1xuICBvblRvdWNoRW5kOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy50b3VjaFN0YXJ0ZWQgPSBmYWxzZTtcbiAgfSxcblxuICAvKipcbiAgICogU2F2ZSBwb3NlLlxuICAgKi9cbiAgb25FbnRlclZSOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNjZW5lRWwgPSB0aGlzLmVsLnNjZW5lRWw7XG4gICAgaWYgKCFzY2VuZUVsLmNoZWNrSGVhZHNldENvbm5lY3RlZCgpKSB7IHJldHVybjsgfVxuICAgIHRoaXMuc2F2ZUNhbWVyYVBvc2UoKTtcbiAgICB0aGlzLmVsLm9iamVjdDNELnBvc2l0aW9uLnNldCgwLCAwLCAwKTtcbiAgICB0aGlzLmVsLm9iamVjdDNELnJvdGF0aW9uLnNldCgwLCAwLCAwKTtcbiAgICBpZiAoc2NlbmVFbC5oYXNXZWJYUikge1xuICAgICAgdGhpcy5lbC5vYmplY3QzRC5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG4gICAgICB0aGlzLmVsLm9iamVjdDNELnVwZGF0ZU1hdHJpeCgpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogUmVzdG9yZSB0aGUgcG9zZS5cbiAgICovXG4gIG9uRXhpdFZSOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLmVsLnNjZW5lRWwuY2hlY2tIZWFkc2V0Q29ubmVjdGVkKCkpIHsgcmV0dXJuOyB9XG4gICAgdGhpcy5yZXN0b3JlQ2FtZXJhUG9zZSgpO1xuICAgIHRoaXMucHJldmlvdXNITURQb3NpdGlvbi5zZXQoMCwgMCwgMCk7XG4gICAgdGhpcy5lbC5vYmplY3QzRC5tYXRyaXhBdXRvVXBkYXRlID0gdHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlIFBvaW50ZXIgTG9jayBzdGF0ZS5cbiAgICovXG4gIG9uUG9pbnRlckxvY2tDaGFuZ2U6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnBvaW50ZXJMb2NrZWQgPSAhIShkb2N1bWVudC5wb2ludGVyTG9ja0VsZW1lbnQgfHwgZG9jdW1lbnQubW96UG9pbnRlckxvY2tFbGVtZW50KTtcbiAgfSxcblxuICAvKipcbiAgICogUmVjb3ZlciBmcm9tIFBvaW50ZXIgTG9jayBlcnJvci5cbiAgICovXG4gIG9uUG9pbnRlckxvY2tFcnJvcjogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucG9pbnRlckxvY2tlZCA9IGZhbHNlO1xuICB9LFxuXG4gIC8vIEV4aXRzIHBvaW50ZXItbG9ja2VkIG1vZGUuXG4gIGV4aXRQb2ludGVyTG9jazogZnVuY3Rpb24gKCkge1xuICAgIGRvY3VtZW50LmV4aXRQb2ludGVyTG9jaygpO1xuICAgIHRoaXMucG9pbnRlckxvY2tlZCA9IGZhbHNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUb2dnbGUgdGhlIGZlYXR1cmUgb2Ygc2hvd2luZy9oaWRpbmcgdGhlIGdyYWIgY3Vyc29yLlxuICAgKi9cbiAgdXBkYXRlR3JhYkN1cnNvcjogZnVuY3Rpb24gKGVuYWJsZWQpIHtcbiAgICB2YXIgc2NlbmVFbCA9IHRoaXMuZWwuc2NlbmVFbDtcblxuICAgIGZ1bmN0aW9uIGVuYWJsZUdyYWJDdXJzb3IgKCkgeyBzY2VuZUVsLmNhbnZhcy5jbGFzc0xpc3QuYWRkKCdhLWdyYWItY3Vyc29yJyk7IH1cbiAgICBmdW5jdGlvbiBkaXNhYmxlR3JhYkN1cnNvciAoKSB7IHNjZW5lRWwuY2FudmFzLmNsYXNzTGlzdC5yZW1vdmUoJ2EtZ3JhYi1jdXJzb3InKTsgfVxuXG4gICAgaWYgKCFzY2VuZUVsLmNhbnZhcykge1xuICAgICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgICAgc2NlbmVFbC5hZGRFdmVudExpc3RlbmVyKCdyZW5kZXItdGFyZ2V0LWxvYWRlZCcsIGVuYWJsZUdyYWJDdXJzb3IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2NlbmVFbC5hZGRFdmVudExpc3RlbmVyKCdyZW5kZXItdGFyZ2V0LWxvYWRlZCcsIGRpc2FibGVHcmFiQ3Vyc29yKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgZW5hYmxlR3JhYkN1cnNvcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkaXNhYmxlR3JhYkN1cnNvcigpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTYXZlIGNhbWVyYSBwb3NlIGJlZm9yZSBlbnRlcmluZyBWUiB0byByZXN0b3JlIGxhdGVyIGlmIGV4aXRpbmcuXG4gICAqL1xuICBzYXZlQ2FtZXJhUG9zZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbCA9IHRoaXMuZWw7XG5cbiAgICB0aGlzLnNhdmVkUG9zZS5wb3NpdGlvbi5jb3B5KGVsLm9iamVjdDNELnBvc2l0aW9uKTtcbiAgICB0aGlzLnNhdmVkUG9zZS5yb3RhdGlvbi5jb3B5KGVsLm9iamVjdDNELnJvdGF0aW9uKTtcbiAgICB0aGlzLmhhc1NhdmVkUG9zZSA9IHRydWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlc2V0IGNhbWVyYSBwb3NlIHRvIGJlZm9yZSBlbnRlcmluZyBWUi5cbiAgICovXG4gIHJlc3RvcmVDYW1lcmFQb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVsID0gdGhpcy5lbDtcbiAgICB2YXIgc2F2ZWRQb3NlID0gdGhpcy5zYXZlZFBvc2U7XG5cbiAgICBpZiAoIXRoaXMuaGFzU2F2ZWRQb3NlKSB7IHJldHVybjsgfVxuXG4gICAgLy8gUmVzZXQgY2FtZXJhIG9yaWVudGF0aW9uLlxuICAgIGVsLm9iamVjdDNELnBvc2l0aW9uLmNvcHkoc2F2ZWRQb3NlLnBvc2l0aW9uKTtcbiAgICBlbC5vYmplY3QzRC5yb3RhdGlvbi5jb3B5KHNhdmVkUG9zZS5yb3RhdGlvbik7XG4gICAgdGhpcy5oYXNTYXZlZFBvc2UgPSBmYWxzZTtcbiAgfVxufSk7XG4iLCJpbXBvcnQgKiBhcyBBRlJBTUUgZnJvbSAnYWZyYW1lJ1xuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnXG5cbkFGUkFNRS5yZWdpc3RlckNvbXBvbmVudCgnYXJqcy13ZWJjYW0tdGV4dHVyZScsIHtcblxuICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnNjZW5lID0gdGhpcy5lbC5zY2VuZUVsO1xuICAgICAgICB0aGlzLnRleENhbWVyYSA9IG5ldyBUSFJFRS5PcnRob2dyYXBoaWNDYW1lcmEoLTAuNSwgMC41LCAwLjUsIC0wLjUsIDAsIDEwKTtcbiAgICAgICAgdGhpcy50ZXhTY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xuXG4gICAgICAgIHRoaXMuc2NlbmUucmVuZGVyZXIuYXV0b0NsZWFyID0gZmFsc2U7XG4gICAgICAgIHRoaXMudmlkZW8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidmlkZW9cIik7XG4gICAgICAgIHRoaXMudmlkZW8uc2V0QXR0cmlidXRlKFwiYXV0b3BsYXlcIiwgdHJ1ZSk7XG4gICAgICAgIHRoaXMudmlkZW8uc2V0QXR0cmlidXRlKFwicGxheXNpbmxpbmVcIiwgdHJ1ZSk7XG4gICAgICAgIHRoaXMudmlkZW8uc2V0QXR0cmlidXRlKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy52aWRlbyk7XG4gICAgICAgIHRoaXMuZ2VvbSA9IG5ldyBUSFJFRS5QbGFuZUJ1ZmZlckdlb21ldHJ5KCk7IC8vMC41LCAwLjUpO1xuICAgICAgICB0aGlzLnRleHR1cmUgPSBuZXcgVEhSRUUuVmlkZW9UZXh0dXJlKHRoaXMudmlkZW8pO1xuICAgICAgICB0aGlzLm1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCB7IG1hcDogdGhpcy50ZXh0dXJlIH0gKTtcbiAgICAgICAgY29uc3QgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKHRoaXMuZ2VvbSwgdGhpcy5tYXRlcmlhbCk7XG4gICAgICAgIHRoaXMudGV4U2NlbmUuYWRkKG1lc2gpO1xuICAgIH0sXG5cbiAgICBwbGF5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYobmF2aWdhdG9yLm1lZGlhRGV2aWNlcyAmJiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSkge1xuICAgICAgICAgICAgY29uc3QgY29uc3RyYWludHMgPSB7IHZpZGVvOiB7XG4gICAgICAgICAgICAgICAgZmFjaW5nTW9kZTogJ2Vudmlyb25tZW50JyB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoY29uc3RyYWludHMpLnRoZW4oIHN0cmVhbT0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZGVvLnNyY09iamVjdCA9IHN0cmVhbTsgICAgXG4gICAgICAgICAgICAgICAgdGhpcy52aWRlby5wbGF5KCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGUgPT4geyAgXG4gICAgICAgICAgICAgICAgdGhpcy5lbC5zY2VuZUVsLnN5c3RlbXNbJ2FyanMnXS5fZGlzcGxheUVycm9yUG9wdXAoYFdlYmNhbSBlcnJvcjogJHtlfWApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmVsLnNjZW5lRWwuc3lzdGVtc1snYXJqcyddLl9kaXNwbGF5RXJyb3JQb3B1cCgnc29ycnkgLSBtZWRpYSBkZXZpY2VzIEFQSSBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdGljazogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuc2NlbmUucmVuZGVyZXIuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5zY2VuZS5yZW5kZXJlci5yZW5kZXIodGhpcy50ZXhTY2VuZSwgdGhpcy50ZXhDYW1lcmEpO1xuICAgICAgICB0aGlzLnNjZW5lLnJlbmRlcmVyLmNsZWFyRGVwdGgoKTtcbiAgICB9LFxuXG4gICAgcGF1c2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnZpZGVvLnNyY09iamVjdC5nZXRUcmFja3MoKS5mb3JFYWNoICggdHJhY2sgPT4ge1xuICAgICAgICAgICAgdHJhY2suc3RvcCgpO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5tYXRlcmlhbC5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMudGV4dHVyZS5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuZ2VvbS5kaXNwb3NlKCk7XG4gICAgfVxufSk7XG4iLCIvKlxuICogVVBEQVRFUyAyOC8wOC8yMDpcbiAqXG4gKiAtIGFkZCBncHNNaW5EaXN0YW5jZSBhbmQgZ3BzVGltZUludGVydmFsIHByb3BlcnRpZXMgdG8gY29udHJvbCBob3dcbiAqIGZyZXF1ZW50bHkgR1BTIHVwZGF0ZXMgYXJlIHByb2Nlc3NlZC4gQWltIGlzIHRvIHByZXZlbnQgJ3N0dXR0ZXJpbmcnXG4gKiBlZmZlY3RzIHdoZW4gY2xvc2UgdG8gQVIgY29udGVudCBkdWUgdG8gY29udGludW91cyBzbWFsbCBjaGFuZ2VzIGluXG4gKiBsb2NhdGlvbi5cbiAqL1xuXG5pbXBvcnQgKiBhcyBBRlJBTUUgZnJvbSAnYWZyYW1lJztcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcblxuQUZSQU1FLnJlZ2lzdGVyQ29tcG9uZW50KCdncHMtY2FtZXJhJywge1xuICAgIF93YXRjaFBvc2l0aW9uSWQ6IG51bGwsXG4gICAgb3JpZ2luQ29vcmRzOiBudWxsLFxuICAgIGN1cnJlbnRDb29yZHM6IG51bGwsXG4gICAgbG9va0NvbnRyb2xzOiBudWxsLFxuICAgIGhlYWRpbmc6IG51bGwsXG4gICAgc2NoZW1hOiB7XG4gICAgICAgIHNpbXVsYXRlTGF0aXR1ZGU6IHtcbiAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgZGVmYXVsdDogMCxcbiAgICAgICAgfSxcbiAgICAgICAgc2ltdWxhdGVMb25naXR1ZGU6IHtcbiAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgZGVmYXVsdDogMCxcbiAgICAgICAgfSxcbiAgICAgICAgc2ltdWxhdGVBbHRpdHVkZToge1xuICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICBkZWZhdWx0OiAwLFxuICAgICAgICB9LFxuICAgICAgICBwb3NpdGlvbk1pbkFjY3VyYWN5OiB7XG4gICAgICAgICAgICB0eXBlOiAnaW50JyxcbiAgICAgICAgICAgIGRlZmF1bHQ6IDEwMCxcbiAgICAgICAgfSxcbiAgICAgICAgYWxlcnQ6IHtcbiAgICAgICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICBtaW5EaXN0YW5jZToge1xuICAgICAgICAgICAgdHlwZTogJ2ludCcsXG4gICAgICAgICAgICBkZWZhdWx0OiAwLFxuICAgICAgICB9LFxuICAgICAgICBtYXhEaXN0YW5jZToge1xuICAgICAgICAgICAgdHlwZTogJ2ludCcsXG4gICAgICAgICAgICBkZWZhdWx0OiAwLFxuICAgICAgICB9LFxuICAgICAgICBncHNNaW5EaXN0YW5jZToge1xuICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICBkZWZhdWx0OiA1LFxuICAgICAgICB9LFxuICAgICAgICBncHNUaW1lSW50ZXJ2YWw6IHtcbiAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgZGVmYXVsdDogMCxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHVwZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmRhdGEuc2ltdWxhdGVMYXRpdHVkZSAhPT0gMCAmJiB0aGlzLmRhdGEuc2ltdWxhdGVMb25naXR1ZGUgIT09IDApIHtcbiAgICAgICAgICAgIHZhciBsb2NhbFBvc2l0aW9uID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jdXJyZW50Q29vcmRzIHx8IHt9KTtcbiAgICAgICAgICAgIGxvY2FsUG9zaXRpb24ubG9uZ2l0dWRlID0gdGhpcy5kYXRhLnNpbXVsYXRlTG9uZ2l0dWRlO1xuICAgICAgICAgICAgbG9jYWxQb3NpdGlvbi5sYXRpdHVkZSA9IHRoaXMuZGF0YS5zaW11bGF0ZUxhdGl0dWRlO1xuICAgICAgICAgICAgbG9jYWxQb3NpdGlvbi5hbHRpdHVkZSA9IHRoaXMuZGF0YS5zaW11bGF0ZUFsdGl0dWRlO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50Q29vcmRzID0gbG9jYWxQb3NpdGlvbjtcblxuICAgICAgICAgICAgLy8gcmUtdHJpZ2dlciBpbml0aWFsaXphdGlvbiBmb3IgbmV3IG9yaWdpblxuICAgICAgICAgICAgdGhpcy5vcmlnaW5Db29yZHMgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlUG9zaXRpb24oKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgaW5pdDogZnVuY3Rpb24gKCkgeyAgICAgIFxuICAgICAgICBpZiAoIXRoaXMuZWwuY29tcG9uZW50c1snYXJqcy1sb29rLWNvbnRyb2xzJ10gJiYgIXRoaXMuZWwuY29tcG9uZW50c1snbG9vay1jb250cm9scyddKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxhc3RQb3NpdGlvbiA9IHtcbiAgICAgICAgICAgIGxhdGl0dWRlOiAwLFxuICAgICAgICAgICAgbG9uZ2l0dWRlOiAwXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5sb2FkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdESVYnKTtcbiAgICAgICAgdGhpcy5sb2FkZXIuY2xhc3NMaXN0LmFkZCgnYXJqcy1sb2FkZXInKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmxvYWRlcik7XG5cbiAgICAgICAgdGhpcy5vbkdwc0VudGl0eVBsYWNlQWRkZWQgPSB0aGlzLl9vbkdwc0VudGl0eVBsYWNlQWRkZWQuYmluZCh0aGlzKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2dwcy1lbnRpdHktcGxhY2UtYWRkZWQnLCB0aGlzLm9uR3BzRW50aXR5UGxhY2VBZGRlZCk7XG5cbiAgICAgICAgdGhpcy5sb29rQ29udHJvbHMgPSB0aGlzLmVsLmNvbXBvbmVudHNbJ2FyanMtbG9vay1jb250cm9scyddIHx8IHRoaXMuZWwuY29tcG9uZW50c1snbG9vay1jb250cm9scyddO1xuXG4gICAgICAgIC8vIGxpc3RlbiB0byBkZXZpY2VvcmllbnRhdGlvbiBldmVudFxuICAgICAgICB2YXIgZXZlbnROYW1lID0gdGhpcy5fZ2V0RGV2aWNlT3JpZW50YXRpb25FdmVudE5hbWUoKTtcbiAgICAgICAgdGhpcy5fb25EZXZpY2VPcmllbnRhdGlvbiA9IHRoaXMuX29uRGV2aWNlT3JpZW50YXRpb24uYmluZCh0aGlzKTtcblxuICAgICAgICAvLyBpZiBTYWZhcmlcbiAgICAgICAgaWYgKCEhbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvVmVyc2lvblxcL1tcXGQuXSsuKlNhZmFyaS8pKSB7XG4gICAgICAgICAgICAvLyBpT1MgMTMrXG4gICAgICAgICAgICBpZiAodHlwZW9mIERldmljZU9yaWVudGF0aW9uRXZlbnQucmVxdWVzdFBlcm1pc3Npb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1JlcXVlc3RpbmcgZGV2aWNlIG9yaWVudGF0aW9uIHBlcm1pc3Npb25zLi4uJylcbiAgICAgICAgICAgICAgICAgICAgRGV2aWNlT3JpZW50YXRpb25FdmVudC5yZXF1ZXN0UGVybWlzc2lvbigpO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGZ1bmN0aW9uICgpIHsgaGFuZGxlcigpIH0sIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZWwuc2NlbmVFbC5zeXN0ZW1zWydhcmpzJ10uX2Rpc3BsYXlFcnJvclBvcHVwKCAnQWZ0ZXIgY2FtZXJhIHBlcm1pc3Npb24gcHJvbXB0LCBwbGVhc2UgdGFwIHRoZSBzY3JlZW4gdG8gYWN0aXZhdGUgZ2VvbG9jYXRpb24uJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWwuc2NlbmVFbC5zeXN0ZW1zWydhcmpzJ10uX2Rpc3BsYXlFcnJvclBvcHVwKCdQbGVhc2UgZW5hYmxlIGRldmljZSBvcmllbnRhdGlvbiBpbiBTZXR0aW5ncyA+IFNhZmFyaSA+IE1vdGlvbiAmIE9yaWVudGF0aW9uIEFjY2Vzcy4nKTtcbiAgICAgICAgICAgICAgICB9LCA3NTApO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHRoaXMuX29uRGV2aWNlT3JpZW50YXRpb24sIGZhbHNlKTtcblxuICAgIH0sXG5cbiAgICBwbGF5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5zaW11bGF0ZUxhdGl0dWRlICE9PSAwICYmIHRoaXMuZGF0YS5zaW11bGF0ZUxvbmdpdHVkZSAhPT0gMCkge1xuICAgICAgICAgICAgdmFyIGxvY2FsUG9zaXRpb24gPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmN1cnJlbnRDb29yZHMgfHwge30pO1xuICAgICAgICAgICAgbG9jYWxQb3NpdGlvbi5sYXRpdHVkZSA9IHRoaXMuZGF0YS5zaW11bGF0ZUxhdGl0dWRlO1xuICAgICAgICAgICAgbG9jYWxQb3NpdGlvbi5sb25naXR1ZGUgPSB0aGlzLmRhdGEuc2ltdWxhdGVMb25naXR1ZGU7XG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhLnNpbXVsYXRlQWx0aXR1ZGUgIT09IDApIHtcbiAgICAgICAgICAgICAgICBsb2NhbFBvc2l0aW9uLmFsdGl0dWRlID0gdGhpcy5kYXRhLnNpbXVsYXRlQWx0aXR1ZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRDb29yZHMgPSBsb2NhbFBvc2l0aW9uO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlUG9zaXRpb24oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3dhdGNoUG9zaXRpb25JZCA9IHRoaXMuX2luaXRXYXRjaEdQUyhmdW5jdGlvbiAocG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICB2YXIgbG9jYWxQb3NpdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGU6IHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZSxcbiAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlOiBwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlLFxuICAgICAgICAgICAgICAgICAgICBhbHRpdHVkZTogcG9zaXRpb24uY29vcmRzLmFsdGl0dWRlLFxuICAgICAgICAgICAgICAgICAgICBhY2N1cmFjeTogcG9zaXRpb24uY29vcmRzLmFjY3VyYWN5LFxuICAgICAgICAgICAgICAgICAgICBhbHRpdHVkZUFjY3VyYWN5OiBwb3NpdGlvbi5jb29yZHMuYWx0aXR1ZGVBY2N1cmFjeSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRhdGEuc2ltdWxhdGVBbHRpdHVkZSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbFBvc2l0aW9uLmFsdGl0dWRlID0gdGhpcy5kYXRhLnNpbXVsYXRlQWx0aXR1ZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Q29vcmRzID0gbG9jYWxQb3NpdGlvbjtcbiAgICAgICAgICAgICAgICB2YXIgZGlzdE1vdmVkID0gdGhpcy5faGF2ZXJzaW5lRGlzdChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0UG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudENvb3Jkc1xuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBpZihkaXN0TW92ZWQgPj0gdGhpcy5kYXRhLmdwc01pbkRpc3RhbmNlIHx8ICF0aGlzLm9yaWdpbkNvb3Jkcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RQb3NpdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZTogdGhpcy5jdXJyZW50Q29vcmRzLmxvbmdpdHVkZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlOiB0aGlzLmN1cnJlbnRDb29yZHMubGF0aXR1ZGVcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHRpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaGVhZGluZyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3VwZGF0ZVJvdGF0aW9uKCk7XG4gICAgfSxcblxuICAgIHBhdXNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dhdGNoUG9zaXRpb25JZCkge1xuICAgICAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmNsZWFyV2F0Y2godGhpcy5fd2F0Y2hQb3NpdGlvbklkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl93YXRjaFBvc2l0aW9uSWQgPSBudWxsO1xuICAgIH0sXG5cbiAgICByZW1vdmU6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgZXZlbnROYW1lID0gdGhpcy5fZ2V0RGV2aWNlT3JpZW50YXRpb25FdmVudE5hbWUoKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCB0aGlzLl9vbkRldmljZU9yaWVudGF0aW9uLCBmYWxzZSk7XG5cbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2dwcy1lbnRpdHktcGxhY2UtYWRkZWQnLCB0aGlzLm9uR3BzRW50aXR5UGxhY2VBZGRlZCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldCBkZXZpY2Ugb3JpZW50YXRpb24gZXZlbnQgbmFtZSwgZGVwZW5kcyBvbiBicm93c2VyIGltcGxlbWVudGF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IGV2ZW50IG5hbWVcbiAgICAgKi9cbiAgICBfZ2V0RGV2aWNlT3JpZW50YXRpb25FdmVudE5hbWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCdvbmRldmljZW9yaWVudGF0aW9uYWJzb2x1dGUnIGluIHdpbmRvdykge1xuICAgICAgICAgICAgdmFyIGV2ZW50TmFtZSA9ICdkZXZpY2VvcmllbnRhdGlvbmFic29sdXRlJ1xuICAgICAgICB9IGVsc2UgaWYgKCdvbmRldmljZW9yaWVudGF0aW9uJyBpbiB3aW5kb3cpIHtcbiAgICAgICAgICAgIHZhciBldmVudE5hbWUgPSAnZGV2aWNlb3JpZW50YXRpb24nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgZXZlbnROYW1lID0gJydcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0NvbXBhc3Mgbm90IHN1cHBvcnRlZCcpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXZlbnROYW1lXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldCBjdXJyZW50IHVzZXIgcG9zaXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvblN1Y2Nlc3NcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvbkVycm9yXG4gICAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAgICovXG4gICAgX2luaXRXYXRjaEdQUzogZnVuY3Rpb24gKG9uU3VjY2Vzcywgb25FcnJvcikge1xuICAgICAgICBpZiAoIW9uRXJyb3IpIHtcbiAgICAgICAgICAgIG9uRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdFUlJPUignICsgZXJyLmNvZGUgKyAnKTogJyArIGVyci5tZXNzYWdlKVxuXG4gICAgICAgICAgICAgICAgaWYgKGVyci5jb2RlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVzZXIgZGVuaWVkIEdlb0xvY2F0aW9uLCBsZXQgdGhlaXIga25vdyB0aGF0XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWwuc2NlbmVFbC5zeXN0ZW1zWydhcmpzJ10uX2Rpc3BsYXlFcnJvclBvcHVwKCdQbGVhc2UgYWN0aXZhdGUgR2VvbG9jYXRpb24gYW5kIHJlZnJlc2ggdGhlIHBhZ2UuIElmIGl0IGlzIGFscmVhZHkgYWN0aXZlLCBwbGVhc2UgY2hlY2sgcGVybWlzc2lvbnMgZm9yIHRoaXMgd2Vic2l0ZS4nKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChlcnIuY29kZSA9PT0gMykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsLnNjZW5lRWwuc3lzdGVtc1snYXJqcyddLl9kaXNwbGF5RXJyb3JQb3B1cCgnQ2Fubm90IHJldHJpZXZlIEdQUyBwb3NpdGlvbi4gU2lnbmFsIGlzIGFic2VudC4nKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJ2dlb2xvY2F0aW9uJyBpbiBuYXZpZ2F0b3IgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBvbkVycm9yKHsgY29kZTogMCwgbWVzc2FnZTogJ0dlb2xvY2F0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgYnkgeW91ciBicm93c2VyJyB9KTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9HZW9sb2NhdGlvbi93YXRjaFBvc2l0aW9uXG4gICAgICAgIHJldHVybiBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24ud2F0Y2hQb3NpdGlvbihvblN1Y2Nlc3MsIG9uRXJyb3IsIHtcbiAgICAgICAgICAgIGVuYWJsZUhpZ2hBY2N1cmFjeTogdHJ1ZSxcbiAgICAgICAgICAgIG1heGltdW1BZ2U6IHRoaXMuZGF0YS5ncHNUaW1lSW50ZXJ2YWwsXG4gICAgICAgICAgICB0aW1lb3V0OiAyNzAwMCxcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB1c2VyIHBvc2l0aW9uLlxuICAgICAqXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG4gICAgX3VwZGF0ZVBvc2l0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGRvbid0IHVwZGF0ZSBpZiBhY2N1cmFjeSBpcyBub3QgZ29vZCBlbm91Z2hcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudENvb3Jkcy5hY2N1cmFjeSA+IHRoaXMuZGF0YS5wb3NpdGlvbk1pbkFjY3VyYWN5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhLmFsZXJ0ICYmICFkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWxlcnQtcG9wdXAnKSkge1xuICAgICAgICAgICAgICAgIHZhciBwb3B1cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIHBvcHVwLmlubmVySFRNTCA9ICdHUFMgc2lnbmFsIGlzIHZlcnkgcG9vci4gVHJ5IG1vdmUgb3V0ZG9vciBvciB0byBhbiBhcmVhIHdpdGggYSBiZXR0ZXIgc2lnbmFsLidcbiAgICAgICAgICAgICAgICBwb3B1cC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2FsZXJ0LXBvcHVwJyk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChwb3B1cCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYWxlcnRQb3B1cCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhbGVydC1wb3B1cCcpO1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50Q29vcmRzLmFjY3VyYWN5IDw9IHRoaXMuZGF0YS5wb3NpdGlvbk1pbkFjY3VyYWN5ICYmIGFsZXJ0UG9wdXApIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoYWxlcnRQb3B1cCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMub3JpZ2luQ29vcmRzKSB7XG4gICAgICAgICAgICAvLyBmaXJzdCBjYW1lcmEgaW5pdGlhbGl6YXRpb25cbiAgICAgICAgICAgIHRoaXMub3JpZ2luQ29vcmRzID0gdGhpcy5jdXJyZW50Q29vcmRzO1xuICAgICAgICAgICAgdGhpcy5fc2V0UG9zaXRpb24oKTtcblxuICAgICAgICAgICAgdmFyIGxvYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hcmpzLWxvYWRlcicpO1xuICAgICAgICAgICAgaWYgKGxvYWRlcikge1xuICAgICAgICAgICAgICAgIGxvYWRlci5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnZ3BzLWNhbWVyYS1vcmlnaW4tY29vcmQtc2V0JykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc2V0UG9zaXRpb24oKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgX3NldFBvc2l0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuZWwuZ2V0QXR0cmlidXRlKCdwb3NpdGlvbicpO1xuXG4gICAgICAgIC8vIGNvbXB1dGUgcG9zaXRpb24ueFxuICAgICAgICB2YXIgZHN0Q29vcmRzID0ge1xuICAgICAgICAgICAgbG9uZ2l0dWRlOiB0aGlzLmN1cnJlbnRDb29yZHMubG9uZ2l0dWRlLFxuICAgICAgICAgICAgbGF0aXR1ZGU6IHRoaXMub3JpZ2luQ29vcmRzLmxhdGl0dWRlLFxuICAgICAgICB9O1xuXG4gICAgICAgIHBvc2l0aW9uLnggPSB0aGlzLmNvbXB1dGVEaXN0YW5jZU1ldGVycyh0aGlzLm9yaWdpbkNvb3JkcywgZHN0Q29vcmRzKTtcbiAgICAgICAgcG9zaXRpb24ueCAqPSB0aGlzLmN1cnJlbnRDb29yZHMubG9uZ2l0dWRlID4gdGhpcy5vcmlnaW5Db29yZHMubG9uZ2l0dWRlID8gMSA6IC0xO1xuXG4gICAgICAgIC8vIGNvbXB1dGUgcG9zaXRpb24uelxuICAgICAgICB2YXIgZHN0Q29vcmRzID0ge1xuICAgICAgICAgICAgbG9uZ2l0dWRlOiB0aGlzLm9yaWdpbkNvb3Jkcy5sb25naXR1ZGUsXG4gICAgICAgICAgICBsYXRpdHVkZTogdGhpcy5jdXJyZW50Q29vcmRzLmxhdGl0dWRlLFxuICAgICAgICB9XG5cbiAgICAgICAgcG9zaXRpb24ueiA9IHRoaXMuY29tcHV0ZURpc3RhbmNlTWV0ZXJzKHRoaXMub3JpZ2luQ29vcmRzLCBkc3RDb29yZHMpO1xuICAgICAgICBwb3NpdGlvbi56ICo9IHRoaXMuY3VycmVudENvb3Jkcy5sYXRpdHVkZSA+IHRoaXMub3JpZ2luQ29vcmRzLmxhdGl0dWRlID8gLTEgOiAxO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBwb3NpdGlvblxuICAgICAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZSgncG9zaXRpb24nLCBwb3NpdGlvbik7XG5cbiAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdncHMtY2FtZXJhLXVwZGF0ZS1wb3NpdGlvbicsIHsgZGV0YWlsOiB7IHBvc2l0aW9uOiB0aGlzLmN1cnJlbnRDb29yZHMsIG9yaWdpbjogdGhpcy5vcmlnaW5Db29yZHMgfSB9KSk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGRpc3RhbmNlIGluIG1ldGVycyBiZXR3ZWVuIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gaW5wdXRzLlxuICAgICAqXG4gICAgICogIENhbGN1bGF0ZSBkaXN0YW5jZSwgYmVhcmluZyBhbmQgbW9yZSBiZXR3ZWVuIExhdGl0dWRlL0xvbmdpdHVkZSBwb2ludHNcbiAgICAgKiAgRGV0YWlsczogaHR0cHM6Ly93d3cubW92YWJsZS10eXBlLmNvLnVrL3NjcmlwdHMvbGF0bG9uZy5odG1sXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1Bvc2l0aW9ufSBzcmNcbiAgICAgKiBAcGFyYW0ge1Bvc2l0aW9ufSBkZXN0XG4gICAgICogQHBhcmFtIHtCb29sZWFufSBpc1BsYWNlXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBkaXN0YW5jZSB8IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG4gICAgICovXG4gICAgY29tcHV0ZURpc3RhbmNlTWV0ZXJzOiBmdW5jdGlvbiAoc3JjLCBkZXN0LCBpc1BsYWNlKSB7XG4gICAgICAgIHZhciBkaXN0YW5jZSA9IHRoaXMuX2hhdmVyc2luZURpc3QgKHNyYywgZGVzdCk7XG5cbiAgICAgICAgLy8gaWYgZnVuY3Rpb24gaGFzIGJlZW4gY2FsbGVkIGZvciBhIHBsYWNlLCBhbmQgaWYgaXQncyB0b28gbmVhciBhbmQgYSBtaW4gZGlzdGFuY2UgaGFzIGJlZW4gc2V0LFxuICAgICAgICAvLyByZXR1cm4gbWF4IGRpc3RhbmNlIHBvc3NpYmxlIC0gdG8gYmUgaGFuZGxlZCBieSB0aGUgY2FsbGVyXG4gICAgICAgIGlmIChpc1BsYWNlICYmIHRoaXMuZGF0YS5taW5EaXN0YW5jZSAmJiB0aGlzLmRhdGEubWluRGlzdGFuY2UgPiAwICYmIGRpc3RhbmNlIDwgdGhpcy5kYXRhLm1pbkRpc3RhbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiBmdW5jdGlvbiBoYXMgYmVlbiBjYWxsZWQgZm9yIGEgcGxhY2UsIGFuZCBpZiBpdCdzIHRvbyBmYXIgYW5kIGEgbWF4IGRpc3RhbmNlIGhhcyBiZWVuIHNldCxcbiAgICAgICAgLy8gcmV0dXJuIG1heCBkaXN0YW5jZSBwb3NzaWJsZSAtIHRvIGJlIGhhbmRsZWQgYnkgdGhlIGNhbGxlclxuICAgICAgICBpZiAoaXNQbGFjZSAmJiB0aGlzLmRhdGEubWF4RGlzdGFuY2UgJiYgdGhpcy5kYXRhLm1heERpc3RhbmNlID4gMCAmJiBkaXN0YW5jZSA+IHRoaXMuZGF0YS5tYXhEaXN0YW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRpc3RhbmNlO1xuICAgIH0sXG5cbiAgICBfaGF2ZXJzaW5lRGlzdDogZnVuY3Rpb24gKHNyYywgZGVzdCkge1xuICAgICAgICB2YXIgZGxvbmdpdHVkZSA9IFRIUkVFLk1hdGguZGVnVG9SYWQoZGVzdC5sb25naXR1ZGUgLSBzcmMubG9uZ2l0dWRlKTtcbiAgICAgICAgdmFyIGRsYXRpdHVkZSA9IFRIUkVFLk1hdGguZGVnVG9SYWQoZGVzdC5sYXRpdHVkZSAtIHNyYy5sYXRpdHVkZSk7XG5cbiAgICAgICAgdmFyIGEgPSAoTWF0aC5zaW4oZGxhdGl0dWRlIC8gMikgKiBNYXRoLnNpbihkbGF0aXR1ZGUgLyAyKSkgKyBNYXRoLmNvcyhUSFJFRS5NYXRoLmRlZ1RvUmFkKHNyYy5sYXRpdHVkZSkpICogTWF0aC5jb3MoVEhSRUUuTWF0aC5kZWdUb1JhZChkZXN0LmxhdGl0dWRlKSkgKiAoTWF0aC5zaW4oZGxvbmdpdHVkZSAvIDIpICogTWF0aC5zaW4oZGxvbmdpdHVkZSAvIDIpKTtcbiAgICAgICAgdmFyIGFuZ2xlID0gMiAqIE1hdGguYXRhbjIoTWF0aC5zcXJ0KGEpLCBNYXRoLnNxcnQoMSAtIGEpKTtcbiAgICAgICAgcmV0dXJuIGFuZ2xlICogNjM3MTAwMDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSBjb21wYXNzIGhlYWRpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYWxwaGFcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYmV0YVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBnYW1tYVxuICAgICAqXG4gICAgICogQHJldHVybnMge251bWJlcn0gY29tcGFzcyBoZWFkaW5nXG4gICAgICovXG4gICAgX2NvbXB1dGVDb21wYXNzSGVhZGluZzogZnVuY3Rpb24gKGFscGhhLCBiZXRhLCBnYW1tYSkge1xuXG4gICAgICAgIC8vIENvbnZlcnQgZGVncmVlcyB0byByYWRpYW5zXG4gICAgICAgIHZhciBhbHBoYVJhZCA9IGFscGhhICogKE1hdGguUEkgLyAxODApO1xuICAgICAgICB2YXIgYmV0YVJhZCA9IGJldGEgKiAoTWF0aC5QSSAvIDE4MCk7XG4gICAgICAgIHZhciBnYW1tYVJhZCA9IGdhbW1hICogKE1hdGguUEkgLyAxODApO1xuXG4gICAgICAgIC8vIENhbGN1bGF0ZSBlcXVhdGlvbiBjb21wb25lbnRzXG4gICAgICAgIHZhciBjQSA9IE1hdGguY29zKGFscGhhUmFkKTtcbiAgICAgICAgdmFyIHNBID0gTWF0aC5zaW4oYWxwaGFSYWQpO1xuICAgICAgICB2YXIgc0IgPSBNYXRoLnNpbihiZXRhUmFkKTtcbiAgICAgICAgdmFyIGNHID0gTWF0aC5jb3MoZ2FtbWFSYWQpO1xuICAgICAgICB2YXIgc0cgPSBNYXRoLnNpbihnYW1tYVJhZCk7XG5cbiAgICAgICAgLy8gQ2FsY3VsYXRlIEEsIEIsIEMgcm90YXRpb24gY29tcG9uZW50c1xuICAgICAgICB2YXIgckEgPSAtIGNBICogc0cgLSBzQSAqIHNCICogY0c7XG4gICAgICAgIHZhciByQiA9IC0gc0EgKiBzRyArIGNBICogc0IgKiBjRztcblxuICAgICAgICAvLyBDYWxjdWxhdGUgY29tcGFzcyBoZWFkaW5nXG4gICAgICAgIHZhciBjb21wYXNzSGVhZGluZyA9IE1hdGguYXRhbihyQSAvIHJCKTtcblxuICAgICAgICAvLyBDb252ZXJ0IGZyb20gaGFsZiB1bml0IGNpcmNsZSB0byB3aG9sZSB1bml0IGNpcmNsZVxuICAgICAgICBpZiAockIgPCAwKSB7XG4gICAgICAgICAgICBjb21wYXNzSGVhZGluZyArPSBNYXRoLlBJO1xuICAgICAgICB9IGVsc2UgaWYgKHJBIDwgMCkge1xuICAgICAgICAgICAgY29tcGFzc0hlYWRpbmcgKz0gMiAqIE1hdGguUEk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb252ZXJ0IHJhZGlhbnMgdG8gZGVncmVlc1xuICAgICAgICBjb21wYXNzSGVhZGluZyAqPSAxODAgLyBNYXRoLlBJO1xuXG4gICAgICAgIHJldHVybiBjb21wYXNzSGVhZGluZztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlciBmb3IgZGV2aWNlIG9yaWVudGF0aW9uIGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgKi9cbiAgICBfb25EZXZpY2VPcmllbnRhdGlvbjogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC53ZWJraXRDb21wYXNzSGVhZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQud2Via2l0Q29tcGFzc0FjY3VyYWN5IDwgNTApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhlYWRpbmcgPSBldmVudC53ZWJraXRDb21wYXNzSGVhZGluZztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCd3ZWJraXRDb21wYXNzQWNjdXJhY3kgaXMgZXZlbnQud2Via2l0Q29tcGFzc0FjY3VyYWN5Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQuYWxwaGEgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5hYnNvbHV0ZSA9PT0gdHJ1ZSB8fCBldmVudC5hYnNvbHV0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oZWFkaW5nID0gdGhpcy5fY29tcHV0ZUNvbXBhc3NIZWFkaW5nKGV2ZW50LmFscGhhLCBldmVudC5iZXRhLCBldmVudC5nYW1tYSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignZXZlbnQuYWJzb2x1dGUgPT09IGZhbHNlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ2V2ZW50LmFscGhhID09PSBudWxsJyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHVzZXIgcm90YXRpb24gZGF0YS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIF91cGRhdGVSb3RhdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaGVhZGluZyA9IDM2MCAtIHRoaXMuaGVhZGluZztcbiAgICAgICAgdmFyIGNhbWVyYVJvdGF0aW9uID0gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoJ3JvdGF0aW9uJykueTtcbiAgICAgICAgdmFyIHlhd1JvdGF0aW9uID0gVEhSRUUuTWF0aC5yYWRUb0RlZyh0aGlzLmxvb2tDb250cm9scy55YXdPYmplY3Qucm90YXRpb24ueSk7XG4gICAgICAgIHZhciBvZmZzZXQgPSAoaGVhZGluZyAtIChjYW1lcmFSb3RhdGlvbiAtIHlhd1JvdGF0aW9uKSkgJSAzNjA7XG4gICAgICAgIHRoaXMubG9va0NvbnRyb2xzLnlhd09iamVjdC5yb3RhdGlvbi55ID0gVEhSRUUuTWF0aC5kZWdUb1JhZChvZmZzZXQpO1xuICAgIH0sXG4gICAgXG4gICAgX29uR3BzRW50aXR5UGxhY2VBZGRlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIGlmIHBsYWNlcyBhcmUgYWRkZWQgYWZ0ZXIgY2FtZXJhIGluaXRpYWxpemF0aW9uIGlzIGZpbmlzaGVkXG4gICAgICAgIGlmICh0aGlzLm9yaWdpbkNvb3Jkcykge1xuICAgICAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdncHMtY2FtZXJhLW9yaWdpbi1jb29yZC1zZXQnKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubG9hZGVyICYmIHRoaXMubG9hZGVyLnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5sb2FkZXIpXG4gICAgICAgIH1cbiAgICB9XG59KTsiLCJpbXBvcnQgKiBhcyBBRlJBTUUgZnJvbSAnYWZyYW1lJztcblxuQUZSQU1FLnJlZ2lzdGVyQ29tcG9uZW50KCdncHMtZW50aXR5LXBsYWNlJywge1xuICAgIF9jYW1lcmFHcHM6IG51bGwsXG4gICAgc2NoZW1hOiB7XG4gICAgICAgIGxvbmdpdHVkZToge1xuICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICBkZWZhdWx0OiAwLFxuICAgICAgICB9LFxuICAgICAgICBsYXRpdHVkZToge1xuICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICBkZWZhdWx0OiAwLFxuICAgICAgICB9XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBjbGVhbmluZyBsaXN0ZW5lcnMgd2hlbiB0aGUgZW50aXR5IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NXG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdncHMtY2FtZXJhLW9yaWdpbi1jb29yZC1zZXQnLCB0aGlzLmNvb3JkU2V0TGlzdGVuZXIpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignZ3BzLWNhbWVyYS11cGRhdGUtcG9zaXRpb24nLCB0aGlzLnVwZGF0ZVBvc2l0aW9uTGlzdGVuZXIpO1xuICAgIH0sXG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuY29vcmRTZXRMaXN0ZW5lciA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fY2FtZXJhR3BzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNhbWVyYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tncHMtY2FtZXJhXScpO1xuICAgICAgICAgICAgICAgIGlmICghY2FtZXJhLmNvbXBvbmVudHNbJ2dwcy1jYW1lcmEnXSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdncHMtY2FtZXJhIG5vdCBpbml0aWFsaXplZCcpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FtZXJhR3BzID0gY2FtZXJhLmNvbXBvbmVudHNbJ2dwcy1jYW1lcmEnXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVBvc2l0aW9uKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy51cGRhdGVQb3NpdGlvbkxpc3RlbmVyID0gKGV2KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZGF0YSB8fCAhdGhpcy5fY2FtZXJhR3BzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZHN0Q29vcmRzID0ge1xuICAgICAgICAgICAgICAgIGxvbmdpdHVkZTogdGhpcy5kYXRhLmxvbmdpdHVkZSxcbiAgICAgICAgICAgICAgICBsYXRpdHVkZTogdGhpcy5kYXRhLmxhdGl0dWRlLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gaXQncyBhY3R1YWxseSBhICdkaXN0YW5jZSBwbGFjZScsIGJ1dCB3ZSBkb24ndCBjYWxsIGl0IHdpdGggbGFzdCBwYXJhbSwgYmVjYXVzZSB3ZSB3YW50IHRvIHJldHJpZXZlIGRpc3RhbmNlIGV2ZW4gaWYgaXQncyA8IG1pbkRpc3RhbmNlIHByb3BlcnR5XG4gICAgICAgICAgICB2YXIgZGlzdGFuY2VGb3JNc2cgPSB0aGlzLl9jYW1lcmFHcHMuY29tcHV0ZURpc3RhbmNlTWV0ZXJzKGV2LmRldGFpbC5wb3NpdGlvbiwgZHN0Q29vcmRzKTtcblxuICAgICAgICAgICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoJ2Rpc3RhbmNlJywgZGlzdGFuY2VGb3JNc2cpO1xuICAgICAgICAgICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoJ2Rpc3RhbmNlTXNnJywgZm9ybWF0RGlzdGFuY2UoZGlzdGFuY2VGb3JNc2cpKTtcbiAgICAgICAgICAgIHRoaXMuZWwuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2dwcy1lbnRpdHktcGxhY2UtdXBkYXRlLXBvc2l0aW9uJywgeyBkZXRhaWw6IHsgZGlzdGFuY2U6IGRpc3RhbmNlRm9yTXNnIH0gfSkpO1xuXG4gICAgICAgICAgICB2YXIgYWN0dWFsRGlzdGFuY2UgPSB0aGlzLl9jYW1lcmFHcHMuY29tcHV0ZURpc3RhbmNlTWV0ZXJzKGV2LmRldGFpbC5wb3NpdGlvbiwgZHN0Q29vcmRzLCB0cnVlKTtcblxuICAgICAgICAgICAgaWYgKGFjdHVhbERpc3RhbmNlID09PSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZUZvck1pbkRpc3RhbmNlKHRoaXMuZWwsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVGb3JNaW5EaXN0YW5jZSh0aGlzLmVsLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2dwcy1jYW1lcmEtb3JpZ2luLWNvb3JkLXNldCcsIHRoaXMuY29vcmRTZXRMaXN0ZW5lcik7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdncHMtY2FtZXJhLXVwZGF0ZS1wb3NpdGlvbicsIHRoaXMudXBkYXRlUG9zaXRpb25MaXN0ZW5lcik7XG5cbiAgICAgICAgdGhpcy5fcG9zaXRpb25YRGVidWcgPSAwO1xuXG4gICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnZ3BzLWVudGl0eS1wbGFjZS1hZGRlZCcsIHsgZGV0YWlsOiB7IGNvbXBvbmVudDogdGhpcy5lbCB9IH0pKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEhpZGUgZW50aXR5IGFjY29yZGluZyB0byBtaW5EaXN0YW5jZSBwcm9wZXJ0eVxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIGhpZGVGb3JNaW5EaXN0YW5jZTogZnVuY3Rpb24oZWwsIGhpZGVFbnRpdHkpIHtcbiAgICAgICAgaWYgKGhpZGVFbnRpdHkpIHtcbiAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgndmlzaWJsZScsICdmYWxzZScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKCd2aXNpYmxlJywgJ3RydWUnKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHBsYWNlIHBvc2l0aW9uXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG4gICAgX3VwZGF0ZVBvc2l0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0geyB4OiAwLCB5OiB0aGlzLmVsLmdldEF0dHJpYnV0ZSgncG9zaXRpb24nKS55IHx8IDAsIHo6IDAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSBwb3NpdGlvbi54XG4gICAgICAgIHZhciBkc3RDb29yZHMgPSB7XG4gICAgICAgICAgICBsb25naXR1ZGU6IHRoaXMuZGF0YS5sb25naXR1ZGUsXG4gICAgICAgICAgICBsYXRpdHVkZTogdGhpcy5fY2FtZXJhR3BzLm9yaWdpbkNvb3Jkcy5sYXRpdHVkZSxcbiAgICAgICAgfTtcblxuICAgICAgICBwb3NpdGlvbi54ID0gdGhpcy5fY2FtZXJhR3BzLmNvbXB1dGVEaXN0YW5jZU1ldGVycyh0aGlzLl9jYW1lcmFHcHMub3JpZ2luQ29vcmRzLCBkc3RDb29yZHMpO1xuXG4gICAgICAgIHRoaXMuX3Bvc2l0aW9uWERlYnVnID0gcG9zaXRpb24ueDtcblxuICAgICAgICBwb3NpdGlvbi54ICo9IHRoaXMuZGF0YS5sb25naXR1ZGUgPiB0aGlzLl9jYW1lcmFHcHMub3JpZ2luQ29vcmRzLmxvbmdpdHVkZSA/IDEgOiAtMTtcblxuICAgICAgICAvLyB1cGRhdGUgcG9zaXRpb24uelxuICAgICAgICB2YXIgZHN0Q29vcmRzID0ge1xuICAgICAgICAgICAgbG9uZ2l0dWRlOiB0aGlzLl9jYW1lcmFHcHMub3JpZ2luQ29vcmRzLmxvbmdpdHVkZSxcbiAgICAgICAgICAgIGxhdGl0dWRlOiB0aGlzLmRhdGEubGF0aXR1ZGUsXG4gICAgICAgIH07XG5cbiAgICAgICAgcG9zaXRpb24ueiA9IHRoaXMuX2NhbWVyYUdwcy5jb21wdXRlRGlzdGFuY2VNZXRlcnModGhpcy5fY2FtZXJhR3BzLm9yaWdpbkNvb3JkcywgZHN0Q29vcmRzKTtcblxuICAgICAgICBwb3NpdGlvbi56ICo9IHRoaXMuZGF0YS5sYXRpdHVkZSA+IHRoaXMuX2NhbWVyYUdwcy5vcmlnaW5Db29yZHMubGF0aXR1ZGUgPyAtMSA6IDE7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uLnkgIT09IDApIHtcbiAgICAgICAgICAgIHZhciBhbHRpdHVkZSA9IHRoaXMuX2NhbWVyYUdwcy5vcmlnaW5Db29yZHMuYWx0aXR1ZGUgIT09IHVuZGVmaW5lZCA/IHRoaXMuX2NhbWVyYUdwcy5vcmlnaW5Db29yZHMuYWx0aXR1ZGUgOiAwO1xuICAgICAgICAgICAgcG9zaXRpb24ueSA9IHBvc2l0aW9uLnkgLSBhbHRpdHVkZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSBlbGVtZW50J3MgcG9zaXRpb24gaW4gM0Qgd29ybGRcbiAgICAgICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgcG9zaXRpb24pO1xuICAgIH0sXG59KTtcblxuLyoqXG4gKiBGb3JtYXQgZGlzdGFuY2VzIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkaXN0YW5jZVxuICovXG5mdW5jdGlvbiBmb3JtYXREaXN0YW5jZShkaXN0YW5jZSkge1xuICAgIGRpc3RhbmNlID0gZGlzdGFuY2UudG9GaXhlZCgwKTtcblxuICAgIGlmIChkaXN0YW5jZSA+PSAxMDAwKSB7XG4gICAgICAgIHJldHVybiAoZGlzdGFuY2UgLyAxMDAwKSArICcga2lsb21ldGVycyc7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpc3RhbmNlICsgJyBtZXRlcnMnO1xufTtcbiIsIi8qKiBncHMtcHJvamVjdGVkLWNhbWVyYVxuICpcbiAqIGJhc2VkIG9uIHRoZSBvcmlnaW5hbCBncHMtY2FtZXJhLCBtb2RpZmllZCBieSBuaWNrdyAwMi8wNC8yMFxuICpcbiAqIFJhdGhlciB0aGFuIGtlZXBpbmcgdHJhY2sgb2YgcG9zaXRpb24gYnkgY2FsY3VsYXRpbmcgdGhlIGRpc3RhbmNlIG9mXG4gKiBlbnRpdGllcyBvciB0aGUgY3VycmVudCBsb2NhdGlvbiB0byB0aGUgb3JpZ2luYWwgbG9jYXRpb24sIHRoaXMgdmVyc2lvblxuICogbWFrZXMgdXNlIG9mIHRoZSBcIkdvb2dsZVwiIFNwaGVyaWNhbCBNZXJjYWN0b3IgcHJvamVjdGlvbiwgYWthIGVwc2c6Mzg1Ny5cbiAqXG4gKiBUaGUgb3JpZ2luYWwgcG9zaXRpb24gKGxhdC9sb24pIGlzIHByb2plY3RlZCBpbnRvIFNwaGVyaWNhbCBNZXJjYXRvciBhbmRcbiAqIHN0b3JlZC5cbiAqXG4gKiBUaGVuLCB3aGVuIHdlIHJlY2VpdmUgYSBuZXcgcG9zaXRpb24gKGxhdC9sb24pLCB0aGlzIG5ldyBwb3NpdGlvbiBpc1xuICogcHJvamVjdGVkIGludG8gU3BoZXJpY2FsIE1lcmNhdG9yIGFuZCB0aGVuIGl0cyB3b3JsZCBwb3NpdGlvbiBjYWxjdWxhdGVkXG4gKiBieSBjb21wYXJpbmcgYWdhaW5zdCB0aGUgb3JpZ2luYWwgcG9zaXRpb24uXG4gKlxuICogVGhlIHNhbWUgaXMgYWxzbyB0aGUgY2FzZSBmb3IgJ2VudGl0eS1wbGFjZXMnOyB3aGVuIHRoZXNlIGFyZSBhZGRlZCwgdGhlaXJcbiAqIFNwaGVyaWNhbCBNZXJjYXRvciBjb29yZHMgYXJlIGNhbGN1bGF0ZWQgKHNlZSBncHMtcHJvamVjdGVkLWVudGl0eS1wbGFjZSkuXG4gKlxuICogU3BoZXJpY2FsIE1lcmNhdG9yIHVuaXRzIGFyZSBjbG9zZSB0bywgYnV0IG5vdCBleGFjdGx5LCBtZXRyZXMsIGFuZCBhcmVcbiAqIGhlYXZpbHkgZGlzdG9ydGVkIG5lYXIgdGhlIHBvbGVzLiBOb25ldGhlbGVzcyB0aGV5IGFyZSBhIGdvb2QgYXBwcm94aW1hdGlvblxuICogZm9yIG1hbnkgYXJlYXMgb2YgdGhlIHdvcmxkIGFuZCBhcHBlYXIgbm90IHRvIGNhdXNlIHVuYWNjZXB0YWJsZSBkaXN0b3J0aW9uc1xuICogd2hlbiB1c2VkIGFzIHRoZSB1bml0cyBmb3IgQVIgYXBwcy5cbiAqXG4gKiBVUERBVEVTIDI4LzA4LzIwOlxuICpcbiAqIC0gYWRkIGdwc01pbkRpc3RhbmNlIGFuZCBncHNUaW1lSW50ZXJ2YWwgcHJvcGVydGllcyB0byBjb250cm9sIGhvd1xuICogZnJlcXVlbnRseSBHUFMgdXBkYXRlcyBhcmUgcHJvY2Vzc2VkLiBBaW0gaXMgdG8gcHJldmVudCAnc3R1dHRlcmluZydcbiAqIGVmZmVjdHMgd2hlbiBjbG9zZSB0byBBUiBjb250ZW50IGR1ZSB0byBjb250aW51b3VzIHNtYWxsIGNoYW5nZXMgaW5cbiAqIGxvY2F0aW9uLlxuICovXG5cbmltcG9ydCAqIGFzIEFGUkFNRSBmcm9tICdhZnJhbWUnXG5cbkFGUkFNRS5yZWdpc3RlckNvbXBvbmVudCgnZ3BzLXByb2plY3RlZC1jYW1lcmEnLCB7XG4gICAgX3dhdGNoUG9zaXRpb25JZDogbnVsbCxcbiAgICBvcmlnaW5Db29yZHM6IG51bGwsIC8vIG9yaWdpbmFsIGNvb3JkcyBub3cgaW4gU3BoZXJpY2FsIE1lcmNhdG9yXG4gICAgY3VycmVudENvb3JkczogbnVsbCxcbiAgICBsb29rQ29udHJvbHM6IG51bGwsXG4gICAgaGVhZGluZzogbnVsbCxcbiAgICBzY2hlbWE6IHtcbiAgICAgICAgc2ltdWxhdGVMYXRpdHVkZToge1xuICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICBkZWZhdWx0OiAwLFxuICAgICAgICB9LFxuICAgICAgICBzaW11bGF0ZUxvbmdpdHVkZToge1xuICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICBkZWZhdWx0OiAwLFxuICAgICAgICB9LFxuICAgICAgICBzaW11bGF0ZUFsdGl0dWRlOiB7XG4gICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICAgIGRlZmF1bHQ6IDAsXG4gICAgICAgIH0sXG4gICAgICAgIHBvc2l0aW9uTWluQWNjdXJhY3k6IHtcbiAgICAgICAgICAgIHR5cGU6ICdpbnQnLFxuICAgICAgICAgICAgZGVmYXVsdDogMTAwLFxuICAgICAgICB9LFxuICAgICAgICBhbGVydDoge1xuICAgICAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICAgIG1pbkRpc3RhbmNlOiB7XG4gICAgICAgICAgICB0eXBlOiAnaW50JyxcbiAgICAgICAgICAgIGRlZmF1bHQ6IDAsXG4gICAgICAgIH0sXG4gICAgICAgIGdwc01pbkRpc3RhbmNlOiB7XG4gICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICAgIGRlZmF1bHQ6IDBcbiAgICAgICAgfSxcbiAgICAgICAgZ3BzVGltZUludGVydmFsOiB7XG4gICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICAgIGRlZmF1bHQ6IDBcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHVwZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmRhdGEuc2ltdWxhdGVMYXRpdHVkZSAhPT0gMCAmJiB0aGlzLmRhdGEuc2ltdWxhdGVMb25naXR1ZGUgIT09IDApIHtcbiAgICAgICAgICAgIHZhciBsb2NhbFBvc2l0aW9uID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jdXJyZW50Q29vcmRzIHx8IHt9KTtcbiAgICAgICAgICAgIGxvY2FsUG9zaXRpb24ubG9uZ2l0dWRlID0gdGhpcy5kYXRhLnNpbXVsYXRlTG9uZ2l0dWRlO1xuICAgICAgICAgICAgbG9jYWxQb3NpdGlvbi5sYXRpdHVkZSA9IHRoaXMuZGF0YS5zaW11bGF0ZUxhdGl0dWRlO1xuICAgICAgICAgICAgbG9jYWxQb3NpdGlvbi5hbHRpdHVkZSA9IHRoaXMuZGF0YS5zaW11bGF0ZUFsdGl0dWRlO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50Q29vcmRzID0gbG9jYWxQb3NpdGlvbjtcblxuICAgICAgICAgICAgLy8gcmUtdHJpZ2dlciBpbml0aWFsaXphdGlvbiBmb3IgbmV3IG9yaWdpblxuICAgICAgICAgICAgdGhpcy5vcmlnaW5Db29yZHMgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlUG9zaXRpb24oKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghdGhpcy5lbC5jb21wb25lbnRzWydhcmpzLWxvb2stY29udHJvbHMnXSAmJiAhdGhpcy5lbC5jb21wb25lbnRzWydsb29rLWNvbnRyb2xzJ10pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubGFzdFBvc2l0aW9uID0ge1xuICAgICAgICAgICAgbGF0aXR1ZGU6IDAsXG4gICAgICAgICAgICBsb25naXR1ZGU6IDBcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmxvYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xuICAgICAgICB0aGlzLmxvYWRlci5jbGFzc0xpc3QuYWRkKCdhcmpzLWxvYWRlcicpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMubG9hZGVyKTtcblxuICAgICAgICB0aGlzLm9uR3BzRW50aXR5UGxhY2VBZGRlZCA9IHRoaXMuX29uR3BzRW50aXR5UGxhY2VBZGRlZC5iaW5kKHRoaXMpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZ3BzLWVudGl0eS1wbGFjZS1hZGRlZCcsIHRoaXMub25HcHNFbnRpdHlQbGFjZUFkZGVkKTtcblxuICAgICAgICB0aGlzLmxvb2tDb250cm9scyA9IHRoaXMuZWwuY29tcG9uZW50c1snYXJqcy1sb29rLWNvbnRyb2xzJ10gfHwgdGhpcy5lbC5jb21wb25lbnRzWydsb29rLWNvbnRyb2xzJ107XG5cbiAgICAgICAgLy8gbGlzdGVuIHRvIGRldmljZW9yaWVudGF0aW9uIGV2ZW50XG4gICAgICAgIHZhciBldmVudE5hbWUgPSB0aGlzLl9nZXREZXZpY2VPcmllbnRhdGlvbkV2ZW50TmFtZSgpO1xuICAgICAgICB0aGlzLl9vbkRldmljZU9yaWVudGF0aW9uID0gdGhpcy5fb25EZXZpY2VPcmllbnRhdGlvbi5iaW5kKHRoaXMpO1xuXG4gICAgICAgIC8vIGlmIFNhZmFyaVxuICAgICAgICBpZiAoISFuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9WZXJzaW9uXFwvW1xcZC5dKy4qU2FmYXJpLykpIHtcbiAgICAgICAgICAgIC8vIGlPUyAxMytcbiAgICAgICAgICAgIGlmICh0eXBlb2YgRGV2aWNlT3JpZW50YXRpb25FdmVudC5yZXF1ZXN0UGVybWlzc2lvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSZXF1ZXN0aW5nIGRldmljZSBvcmllbnRhdGlvbiBwZXJtaXNzaW9ucy4uLicpXG4gICAgICAgICAgICAgICAgICAgIERldmljZU9yaWVudGF0aW9uRXZlbnQucmVxdWVzdFBlcm1pc3Npb24oKTtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBoYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBmdW5jdGlvbigpIHsgaGFuZGxlcigpIH0sIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZWwuc2NlbmVFbC5zeXN0ZW1zWydhcmpzJ10uX2Rpc3BsYXlFcnJvclBvcHVwKCdBZnRlciBjYW1lcmEgcGVybWlzc2lvbiBwcm9tcHQsIHBsZWFzZSB0YXAgdGhlIHNjcmVlbiB0byBhY3RpdmF0ZSBnZW9sb2NhdGlvbi4nKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsLnNjZW5lRWwuc3lzdGVtc1snYXJqcyddLl9kaXNwbGF5RXJyb3JQb3B1cCgnUGxlYXNlIGVuYWJsZSBkZXZpY2Ugb3JpZW50YXRpb24gaW4gU2V0dGluZ3MgPiBTYWZhcmkgPiBNb3Rpb24gJiBPcmllbnRhdGlvbiBBY2Nlc3MuJyk7XG4gICAgICAgICAgICAgICAgfSwgNzUwKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHRoaXMuX29uRGV2aWNlT3JpZW50YXRpb24sIGZhbHNlKTtcbiAgICB9LFxuXG4gICAgcGxheTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmRhdGEuc2ltdWxhdGVMYXRpdHVkZSAhPT0gMCAmJiB0aGlzLmRhdGEuc2ltdWxhdGVMb25naXR1ZGUgIT09IDApIHtcbiAgICAgICAgICAgIHZhciBsb2NhbFBvc2l0aW9uID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jdXJyZW50Q29vcmRzIHx8IHt9KTtcbiAgICAgICAgICAgIGxvY2FsUG9zaXRpb24ubGF0aXR1ZGUgPSB0aGlzLmRhdGEuc2ltdWxhdGVMYXRpdHVkZTtcbiAgICAgICAgICAgIGxvY2FsUG9zaXRpb24ubG9uZ2l0dWRlID0gdGhpcy5kYXRhLnNpbXVsYXRlTG9uZ2l0dWRlO1xuICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5zaW11bGF0ZUFsdGl0dWRlICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxQb3NpdGlvbi5hbHRpdHVkZSA9IHRoaXMuZGF0YS5zaW11bGF0ZUFsdGl0dWRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jdXJyZW50Q29vcmRzID0gbG9jYWxQb3NpdGlvbjtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVBvc2l0aW9uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl93YXRjaFBvc2l0aW9uSWQgPSB0aGlzLl9pbml0V2F0Y2hHUFMoZnVuY3Rpb24gKHBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxvY2FsUG9zaXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlOiBwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUsXG4gICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZTogcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSxcbiAgICAgICAgICAgICAgICAgICAgYWx0aXR1ZGU6IHBvc2l0aW9uLmNvb3Jkcy5hbHRpdHVkZSxcbiAgICAgICAgICAgICAgICAgICAgYWNjdXJhY3k6IHBvc2l0aW9uLmNvb3Jkcy5hY2N1cmFjeSxcbiAgICAgICAgICAgICAgICAgICAgYWx0aXR1ZGVBY2N1cmFjeTogcG9zaXRpb24uY29vcmRzLmFsdGl0dWRlQWNjdXJhY3ksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXRhLnNpbXVsYXRlQWx0aXR1ZGUgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxQb3NpdGlvbi5hbHRpdHVkZSA9IHRoaXMuZGF0YS5zaW11bGF0ZUFsdGl0dWRlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudENvb3JkcyA9IGxvY2FsUG9zaXRpb247XG4gICAgICAgICAgICAgICAgdmFyIGRpc3RNb3ZlZCA9IHRoaXMuX2hhdmVyc2luZURpc3QoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGFzdFBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRDb29yZHNcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgaWYoZGlzdE1vdmVkID49IHRoaXMuZGF0YS5ncHNNaW5EaXN0YW5jZSB8fCAhdGhpcy5vcmlnaW5Db29yZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlUG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0UG9zaXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IHRoaXMuY3VycmVudENvb3Jkcy5sb25naXR1ZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZTogdGhpcy5jdXJyZW50Q29vcmRzLmxhdGl0dWRlXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB0aWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuaGVhZGluZyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3VwZGF0ZVJvdGF0aW9uKCk7XG4gICAgfSxcblxuICAgIHBhdXNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dhdGNoUG9zaXRpb25JZCkge1xuICAgICAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmNsZWFyV2F0Y2godGhpcy5fd2F0Y2hQb3NpdGlvbklkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl93YXRjaFBvc2l0aW9uSWQgPSBudWxsO1xuICAgIH0sXG5cbiAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZXZlbnROYW1lID0gdGhpcy5fZ2V0RGV2aWNlT3JpZW50YXRpb25FdmVudE5hbWUoKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCB0aGlzLl9vbkRldmljZU9yaWVudGF0aW9uLCBmYWxzZSk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdncHMtZW50aXR5LXBsYWNlLWFkZGVkJywgdGhpcy5vbkdwc0VudGl0eVBsYWNlQWRkZWQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgZGV2aWNlIG9yaWVudGF0aW9uIGV2ZW50IG5hbWUsIGRlcGVuZHMgb24gYnJvd3NlciBpbXBsZW1lbnRhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBldmVudCBuYW1lXG4gICAgICovXG4gICAgX2dldERldmljZU9yaWVudGF0aW9uRXZlbnROYW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCdvbmRldmljZW9yaWVudGF0aW9uYWJzb2x1dGUnIGluIHdpbmRvdykge1xuICAgICAgICAgICAgdmFyIGV2ZW50TmFtZSA9ICdkZXZpY2VvcmllbnRhdGlvbmFic29sdXRlJ1xuICAgICAgICB9IGVsc2UgaWYgKCdvbmRldmljZW9yaWVudGF0aW9uJyBpbiB3aW5kb3cpIHtcbiAgICAgICAgICAgIHZhciBldmVudE5hbWUgPSAnZGV2aWNlb3JpZW50YXRpb24nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgZXZlbnROYW1lID0gJydcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0NvbXBhc3Mgbm90IHN1cHBvcnRlZCcpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXZlbnROYW1lXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldCBjdXJyZW50IHVzZXIgcG9zaXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvblN1Y2Nlc3NcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvbkVycm9yXG4gICAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAgICovXG4gICAgX2luaXRXYXRjaEdQUzogZnVuY3Rpb24ob25TdWNjZXNzLCBvbkVycm9yKSB7XG4gICAgICAgIGlmICghb25FcnJvcikge1xuICAgICAgICAgICAgb25FcnJvciA9IGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignRVJST1IoJyArIGVyci5jb2RlICsgJyk6ICcgKyBlcnIubWVzc2FnZSlcblxuICAgICAgICAgICAgICAgIGlmIChlcnIuY29kZSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBVc2VyIGRlbmllZCBHZW9Mb2NhdGlvbiwgbGV0IHRoZWlyIGtub3cgdGhhdFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsLnNjZW5lRWwuc3lzdGVtc1snYXJqcyddLl9kaXNwbGF5RXJyb3JQb3B1cCgnUGxlYXNlIGFjdGl2YXRlIEdlb2xvY2F0aW9uIGFuZCByZWZyZXNoIHRoZSBwYWdlLiBJZiBpdCBpcyBhbHJlYWR5IGFjdGl2ZSwgcGxlYXNlIGNoZWNrIHBlcm1pc3Npb25zIGZvciB0aGlzIHdlYnNpdGUuJyk7ICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChlcnIuY29kZSA9PT0gMykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsLnNjZW5lRWwuc3lzdGVtc1snYXJqcyddLl9kaXNwbGF5RXJyb3JQb3B1cCgnQ2Fubm90IHJldHJpZXZlIEdQUyBwb3NpdGlvbi4gU2lnbmFsIGlzIGFic2VudC4nKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJ2dlb2xvY2F0aW9uJyBpbiBuYXZpZ2F0b3IgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBvbkVycm9yKHsgY29kZTogMCwgbWVzc2FnZTogJ0dlb2xvY2F0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgYnkgeW91ciBicm93c2VyJyB9KTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9HZW9sb2NhdGlvbi93YXRjaFBvc2l0aW9uXG4gICAgICAgIHJldHVybiBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24ud2F0Y2hQb3NpdGlvbihvblN1Y2Nlc3MsIG9uRXJyb3IsIHtcbiAgICAgICAgICAgIGVuYWJsZUhpZ2hBY2N1cmFjeTogdHJ1ZSxcbiAgICAgICAgICAgIG1heGltdW1BZ2U6IHRoaXMuZGF0YS5ncHNUaW1lSW50ZXJ2YWwsXG4gICAgICAgICAgICB0aW1lb3V0OiAyNzAwMCxcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB1c2VyIHBvc2l0aW9uLlxuICAgICAqXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG4gICAgX3VwZGF0ZVBvc2l0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gZG9uJ3QgdXBkYXRlIGlmIGFjY3VyYWN5IGlzIG5vdCBnb29kIGVub3VnaFxuICAgICAgICBpZiAodGhpcy5jdXJyZW50Q29vcmRzLmFjY3VyYWN5ID4gdGhpcy5kYXRhLnBvc2l0aW9uTWluQWNjdXJhY3kpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGEuYWxlcnQgJiYgIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhbGVydC1wb3B1cCcpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvcHVwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgcG9wdXAuaW5uZXJIVE1MID0gJ0dQUyBzaWduYWwgaXMgdmVyeSBwb29yLiBUcnkgbW92ZSBvdXRkb29yIG9yIHRvIGFuIGFyZWEgd2l0aCBhIGJldHRlciBzaWduYWwuJ1xuICAgICAgICAgICAgICAgIHBvcHVwLnNldEF0dHJpYnV0ZSgnaWQnLCAnYWxlcnQtcG9wdXAnKTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHBvcHVwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhbGVydFBvcHVwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FsZXJ0LXBvcHVwJyk7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRDb29yZHMuYWNjdXJhY3kgPD0gdGhpcy5kYXRhLnBvc2l0aW9uTWluQWNjdXJhY3kgJiYgYWxlcnRQb3B1cCkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChhbGVydFBvcHVwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5vcmlnaW5Db29yZHMpIHtcbiAgICAgICAgICAgIC8vIGZpcnN0IGNhbWVyYSBpbml0aWFsaXphdGlvblxuICAgICAgICAgICAgLy8gTm93IHN0b3JlIG9yaWdpbkNvb3JkcyBhcyBQUk9KRUNURUQgb3JpZ2luYWwgbGF0L2xvbiwgc28gdGhhdFxuICAgICAgICAgICAgLy8gd2UgY2FuIHNldCB0aGUgd29ybGQgb3JpZ2luIHRvIHRoZSBvcmlnaW5hbCBwb3NpdGlvbiBpbiBcIm1ldHJlc1wiXG4gICAgICAgICAgICB0aGlzLm9yaWdpbkNvb3JkcyA9IHRoaXMuX3Byb2plY3QodGhpcy5jdXJyZW50Q29vcmRzLmxhdGl0dWRlLCB0aGlzLmN1cnJlbnRDb29yZHMubG9uZ2l0dWRlKTtcbiAgICAgICAgICAgIHRoaXMuX3NldFBvc2l0aW9uKCk7XG5cbiAgICAgICAgICAgIHZhciBsb2FkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYXJqcy1sb2FkZXInKTtcbiAgICAgICAgICAgIGlmIChsb2FkZXIpIHtcbiAgICAgICAgICAgICAgICBsb2FkZXIucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2dwcy1jYW1lcmEtb3JpZ2luLWNvb3JkLXNldCcpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3NldFBvc2l0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgY3VycmVudCBwb3NpdGlvbiAoaW4gd29ybGQgY29vcmRzLCBiYXNlZCBvbiBTcGhlcmljYWwgTWVyY2F0b3IpXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgKi9cbiAgICBfc2V0UG9zaXRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcG9zaXRpb24gPSB0aGlzLmVsLmdldEF0dHJpYnV0ZSgncG9zaXRpb24nKTtcblxuICAgICAgICB2YXIgd29ybGRDb29yZHMgPSB0aGlzLmxhdExvblRvV29ybGQodGhpcy5jdXJyZW50Q29vcmRzLmxhdGl0dWRlLCB0aGlzLmN1cnJlbnRDb29yZHMubG9uZ2l0dWRlKTtcblxuICAgICAgICBwb3NpdGlvbi54ID0gd29ybGRDb29yZHNbMF07XG4gICAgICAgIHBvc2l0aW9uLnogPSB3b3JsZENvb3Jkc1sxXTtcblxuICAgICAgICAvLyB1cGRhdGUgcG9zaXRpb25cbiAgICAgICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgcG9zaXRpb24pO1xuXG4gICAgICAgIC8vIGFkZCB0aGUgc3BobWVyYyBwb3NpdGlvbiB0byB0aGUgZXZlbnQgKGZvciB0ZXN0aW5nIG9ubHkpXG4gICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnZ3BzLWNhbWVyYS11cGRhdGUtcG9zaXRpb24nLCB7IGRldGFpbDogeyBwb3NpdGlvbjogdGhpcy5jdXJyZW50Q29vcmRzLCBvcmlnaW46IHRoaXMub3JpZ2luQ29vcmRzIH0gfSkpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBkaXN0YW5jZSBpbiBtZXRlcnMgYmV0d2VlbiBjYW1lcmEgYW5kIGRlc3RpbmF0aW9uIGlucHV0LlxuICAgICAqXG4gICAgICogQXNzdW1lIHdlIGFyZSB1c2luZyBhIG1ldHJlLWJhc2VkIHByb2plY3Rpb24uIE5vdCBhbGwgJ21ldHJlLWJhc2VkJ1xuICAgICAqIHByb2plY3Rpb25zIGdpdmUgZXhhY3QgbWV0cmVzLCBlLmcuIFNwaGVyaWNhbCBNZXJjYXRvciwgYnV0IGl0IGFwcGVhcnNcbiAgICAgKiBjbG9zZSBlbm91Z2ggdG8gYmUgdXNlZCBmb3IgQVIgYXQgbGVhc3QgaW4gbWlkZGxlIHRlbXBlcmF0ZVxuICAgICAqIGxhdGl0dWRlcyAoNDAgLSA1NSkuIEl0IGlzIGhlYXZpbHkgZGlzdG9ydGVkIG5lYXIgdGhlIHBvbGVzLCBob3dldmVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtQb3NpdGlvbn0gZGVzdFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNQbGFjZVxuICAgICAqXG4gICAgICogQHJldHVybnMge251bWJlcn0gZGlzdGFuY2UgfCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxuICAgICAqL1xuICAgIGNvbXB1dGVEaXN0YW5jZU1ldGVyczogZnVuY3Rpb24oZGVzdCwgaXNQbGFjZSkge1xuICAgICAgICB2YXIgc3JjID0gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiKTtcbiAgICAgICAgdmFyIGR4ID0gZGVzdC54IC0gc3JjLng7XG4gICAgICAgIHZhciBkeiA9IGRlc3QueiAtIHNyYy56O1xuICAgICAgICB2YXIgZGlzdGFuY2UgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR6ICogZHopO1xuXG4gICAgICAgIC8vIGlmIGZ1bmN0aW9uIGhhcyBiZWVuIGNhbGxlZCBmb3IgYSBwbGFjZSwgYW5kIGlmIGl0J3MgdG9vIG5lYXIgYW5kIGEgbWluIGRpc3RhbmNlIGhhcyBiZWVuIHNldCxcbiAgICAgICAgLy8gcmV0dXJuIG1heCBkaXN0YW5jZSBwb3NzaWJsZSAtIHRvIGJlIGhhbmRsZWQgYnkgdGhlICBtZXRob2QgY2FsbGVyXG4gICAgICAgIGlmIChpc1BsYWNlICYmIHRoaXMuZGF0YS5taW5EaXN0YW5jZSAmJiB0aGlzLmRhdGEubWluRGlzdGFuY2UgPiAwICYmIGRpc3RhbmNlIDwgdGhpcy5kYXRhLm1pbkRpc3RhbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGlzdGFuY2U7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBsYXRpdHVkZS9sb25naXR1ZGUgdG8gT3BlbkdMIHdvcmxkIGNvb3JkaW5hdGVzLlxuICAgICAqXG4gICAgICogRmlyc3QgcHJvamVjdHMgbGF0L2xvbiB0byBhYnNvbHV0ZSBTcGhlcmljYWwgTWVyY2F0b3IgYW5kIHRoZW5cbiAgICAgKiBjYWxjdWxhdGVzIHRoZSB3b3JsZCBjb29yZGluYXRlcyBieSBjb21wYXJpbmcgdGhlIFNwaGVyaWNhbCBNZXJjYXRvclxuICAgICAqIGNvb3JkaW5hdGVzIHdpdGggdGhlIFNwaGVyaWNhbCBNZXJjYXRvciBjb29yZGluYXRlcyBvZiB0aGUgb3JpZ2luIHBvaW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxhdFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsb25cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHthcnJheX0gd29ybGQgY29vcmRpbmF0ZXNcbiAgICAgKi9cbiAgICBsYXRMb25Ub1dvcmxkOiBmdW5jdGlvbihsYXQsIGxvbikge1xuICAgICAgICB2YXIgcHJvamVjdGVkID0gdGhpcy5fcHJvamVjdChsYXQsIGxvbik7XG4gICAgICAgIC8vIFNpZ24gb2YgeiBuZWVkcyB0byBiZSByZXZlcnNlZCBjb21wYXJlZCB0byBwcm9qZWN0ZWQgY29vcmRpbmF0ZXNcbiAgICAgICAgcmV0dXJuIFtwcm9qZWN0ZWRbMF0gLSB0aGlzLm9yaWdpbkNvb3Jkc1swXSwgLShwcm9qZWN0ZWRbMV0gLSB0aGlzLm9yaWdpbkNvb3Jkc1sxXSldO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgbGF0aXR1ZGUvbG9uZ2l0dWRlIHRvIFNwaGVyaWNhbCBNZXJjYXRvciBjb29yZGluYXRlcy5cbiAgICAgKiBBbGdvcml0aG0gaXMgdXNlZCBpbiBzZXZlcmFsIE9wZW5TdHJlZXRNYXAtcmVsYXRlZCBhcHBsaWNhdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGF0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxvblxuICAgICAqXG4gICAgICogQHJldHVybnMge2FycmF5fSBTcGhlcmljYWwgTWVyY2F0b3IgY29vcmRpbmF0ZXNcbiAgICAgKi9cbiAgICBfcHJvamVjdDogZnVuY3Rpb24obGF0LCBsb24pIHtcbiAgICAgICAgY29uc3QgSEFMRl9FQVJUSCA9IDIwMDM3NTA4LjM0O1xuXG4gICAgICAgIC8vIENvbnZlcnQgdGhlIHN1cHBsaWVkIGNvb3JkcyB0byBTcGhlcmljYWwgTWVyY2F0b3IgKEVQU0c6Mzg1NyksIGFsc29cbiAgICAgICAgLy8ga25vd24gYXMgJ0dvb2dsZSBQcm9qZWN0aW9uJywgdXNpbmcgdGhlIGFsZ29yaXRobSB1c2VkIGV4dGVuc2l2ZWx5XG4gICAgICAgIC8vIGluIHZhcmlvdXMgT3BlblN0cmVldE1hcCBzb2Z0d2FyZS5cbiAgICAgICAgdmFyIHkgPSBNYXRoLmxvZyhNYXRoLnRhbigoOTAgKyBsYXQpICogTWF0aC5QSSAvIDM2MC4wKSkgLyAoTWF0aC5QSSAvIDE4MC4wKTtcbiAgICAgICAgcmV0dXJuIFsobG9uIC8gMTgwLjApICogSEFMRl9FQVJUSCwgeSAqIEhBTEZfRUFSVEggLyAxODAuMF07XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBTcGhlcmljYWwgTWVyY2F0b3IgY29vcmRpbmF0ZXMgdG8gbGF0aXR1ZGUvbG9uZ2l0dWRlLlxuICAgICAqIEFsZ29yaXRobSBpcyB1c2VkIGluIHNldmVyYWwgT3BlblN0cmVldE1hcC1yZWxhdGVkIGFwcGxpY2F0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzcGhlcmljYWwgbWVyY2F0b3IgZWFzdGluZ1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzcGhlcmljYWwgbWVyY2F0b3Igbm9ydGhpbmdcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9IGxvbi9sYXRcbiAgICAgKi9cbiAgICBfdW5wcm9qZWN0OiBmdW5jdGlvbihlLCBuKSB7XG4gICAgICAgIGNvbnN0IEhBTEZfRUFSVEggPSAyMDAzNzUwOC4zNDtcbiAgICAgICAgdmFyIHlwID0gKG4gLyBIQUxGX0VBUlRIKSAqIDE4MC4wO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbG9uZ2l0dWRlOiAoZSAvIEhBTEZfRUFSVEgpICogMTgwLjAsXG4gICAgICAgICAgICBsYXRpdHVkZTogMTgwLjAgLyBNYXRoLlBJICogKDIgKiBNYXRoLmF0YW4oTWF0aC5leHAoeXAgKiBNYXRoLlBJIC8gMTgwLjApKSAtIE1hdGguUEkgLyAyKVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSBjb21wYXNzIGhlYWRpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYWxwaGFcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYmV0YVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBnYW1tYVxuICAgICAqXG4gICAgICogQHJldHVybnMge251bWJlcn0gY29tcGFzcyBoZWFkaW5nXG4gICAgICovXG4gICAgX2NvbXB1dGVDb21wYXNzSGVhZGluZzogZnVuY3Rpb24oYWxwaGEsIGJldGEsIGdhbW1hKSB7XG5cbiAgICAgICAgLy8gQ29udmVydCBkZWdyZWVzIHRvIHJhZGlhbnNcbiAgICAgICAgdmFyIGFscGhhUmFkID0gYWxwaGEgKiAoTWF0aC5QSSAvIDE4MCk7XG4gICAgICAgIHZhciBiZXRhUmFkID0gYmV0YSAqIChNYXRoLlBJIC8gMTgwKTtcbiAgICAgICAgdmFyIGdhbW1hUmFkID0gZ2FtbWEgKiAoTWF0aC5QSSAvIDE4MCk7XG5cbiAgICAgICAgLy8gQ2FsY3VsYXRlIGVxdWF0aW9uIGNvbXBvbmVudHNcbiAgICAgICAgdmFyIGNBID0gTWF0aC5jb3MoYWxwaGFSYWQpO1xuICAgICAgICB2YXIgc0EgPSBNYXRoLnNpbihhbHBoYVJhZCk7XG4gICAgICAgIHZhciBzQiA9IE1hdGguc2luKGJldGFSYWQpO1xuICAgICAgICB2YXIgY0cgPSBNYXRoLmNvcyhnYW1tYVJhZCk7XG4gICAgICAgIHZhciBzRyA9IE1hdGguc2luKGdhbW1hUmFkKTtcblxuICAgICAgICAvLyBDYWxjdWxhdGUgQSwgQiwgQyByb3RhdGlvbiBjb21wb25lbnRzXG4gICAgICAgIHZhciByQSA9IC0gY0EgKiBzRyAtIHNBICogc0IgKiBjRztcbiAgICAgICAgdmFyIHJCID0gLSBzQSAqIHNHICsgY0EgKiBzQiAqIGNHO1xuXG4gICAgICAgIC8vIENhbGN1bGF0ZSBjb21wYXNzIGhlYWRpbmdcbiAgICAgICAgdmFyIGNvbXBhc3NIZWFkaW5nID0gTWF0aC5hdGFuKHJBIC8gckIpO1xuXG4gICAgICAgIC8vIENvbnZlcnQgZnJvbSBoYWxmIHVuaXQgY2lyY2xlIHRvIHdob2xlIHVuaXQgY2lyY2xlXG4gICAgICAgIGlmIChyQiA8IDApIHtcbiAgICAgICAgICAgIGNvbXBhc3NIZWFkaW5nICs9IE1hdGguUEk7XG4gICAgICAgIH0gZWxzZSBpZiAockEgPCAwKSB7XG4gICAgICAgICAgICBjb21wYXNzSGVhZGluZyArPSAyICogTWF0aC5QSTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbnZlcnQgcmFkaWFucyB0byBkZWdyZWVzXG4gICAgICAgIGNvbXBhc3NIZWFkaW5nICo9IDE4MCAvIE1hdGguUEk7XG5cbiAgICAgICAgcmV0dXJuIGNvbXBhc3NIZWFkaW5nO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVyIGZvciBkZXZpY2Ugb3JpZW50YXRpb24gZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIF9vbkRldmljZU9yaWVudGF0aW9uOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQud2Via2l0Q29tcGFzc0hlYWRpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LndlYmtpdENvbXBhc3NBY2N1cmFjeSA8IDUwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oZWFkaW5nID0gZXZlbnQud2Via2l0Q29tcGFzc0hlYWRpbmc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybignd2Via2l0Q29tcGFzc0FjY3VyYWN5IGlzIGV2ZW50LndlYmtpdENvbXBhc3NBY2N1cmFjeScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmFscGhhICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuYWJzb2x1dGUgPT09IHRydWUgfHwgZXZlbnQuYWJzb2x1dGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGVhZGluZyA9IHRoaXMuX2NvbXB1dGVDb21wYXNzSGVhZGluZyhldmVudC5hbHBoYSwgZXZlbnQuYmV0YSwgZXZlbnQuZ2FtbWEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2V2ZW50LmFic29sdXRlID09PSBmYWxzZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdldmVudC5hbHBoYSA9PT0gbnVsbCcpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB1c2VyIHJvdGF0aW9uIGRhdGEuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgKi9cbiAgICBfdXBkYXRlUm90YXRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaGVhZGluZyA9IDM2MCAtIHRoaXMuaGVhZGluZztcbiAgICAgICAgdmFyIGNhbWVyYVJvdGF0aW9uID0gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoJ3JvdGF0aW9uJykueTtcbiAgICAgICAgdmFyIHlhd1JvdGF0aW9uID0gVEhSRUUuTWF0aC5yYWRUb0RlZyh0aGlzLmxvb2tDb250cm9scy55YXdPYmplY3Qucm90YXRpb24ueSk7XG4gICAgICAgIHZhciBvZmZzZXQgPSAoaGVhZGluZyAtIChjYW1lcmFSb3RhdGlvbiAtIHlhd1JvdGF0aW9uKSkgJSAzNjA7XG4gICAgICAgIHRoaXMubG9va0NvbnRyb2xzLnlhd09iamVjdC5yb3RhdGlvbi55ID0gVEhSRUUuTWF0aC5kZWdUb1JhZChvZmZzZXQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgaGF2ZXJzaW5lIGRpc3RhbmNlIGJldHdlZW4gdHdvIGxhdC9sb24gcGFpcnMuXG4gICAgICpcbiAgICAgKiBUYWtlbiBmcm9tIGdwcy1jYW1lcmFcbiAgICAgKi9cbiAgICBfaGF2ZXJzaW5lRGlzdDogZnVuY3Rpb24oc3JjLCBkZXN0KSB7XG4gICAgICAgIHZhciBkbG9uZ2l0dWRlID0gVEhSRUUuTWF0aC5kZWdUb1JhZChkZXN0LmxvbmdpdHVkZSAtIHNyYy5sb25naXR1ZGUpO1xuICAgICAgICB2YXIgZGxhdGl0dWRlID0gVEhSRUUuTWF0aC5kZWdUb1JhZChkZXN0LmxhdGl0dWRlIC0gc3JjLmxhdGl0dWRlKTtcblxuICAgICAgICB2YXIgYSA9IChNYXRoLnNpbihkbGF0aXR1ZGUgLyAyKSAqIE1hdGguc2luKGRsYXRpdHVkZSAvIDIpKSArIE1hdGguY29zKFRIUkVFLk1hdGguZGVnVG9SYWQoc3JjLmxhdGl0dWRlKSkgKiBNYXRoLmNvcyhUSFJFRS5NYXRoLmRlZ1RvUmFkKGRlc3QubGF0aXR1ZGUpKSAqIChNYXRoLnNpbihkbG9uZ2l0dWRlIC8gMikgKiBNYXRoLnNpbihkbG9uZ2l0dWRlIC8gMikpO1xuICAgICAgICB2YXIgYW5nbGUgPSAyICogTWF0aC5hdGFuMihNYXRoLnNxcnQoYSksIE1hdGguc3FydCgxIC0gYSkpO1xuICAgICAgICByZXR1cm4gYW5nbGUgKiA2MzcxMDAwO1xuICAgIH0sXG5cbiAgICBfb25HcHNFbnRpdHlQbGFjZUFkZGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gaWYgcGxhY2VzIGFyZSBhZGRlZCBhZnRlciBjYW1lcmEgaW5pdGlhbGl6YXRpb24gaXMgZmluaXNoZWRcbiAgICAgICAgaWYgKHRoaXMub3JpZ2luQ29vcmRzKSB7XG4gICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2dwcy1jYW1lcmEtb3JpZ2luLWNvb3JkLXNldCcpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5sb2FkZXIgJiYgdGhpcy5sb2FkZXIucGFyZW50RWxlbWVudCkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLmxvYWRlcilcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuIiwiLyoqIGdwcy1wcm9qZWN0ZWQtZW50aXR5LXBsYWNlXG4gKlxuICogYmFzZWQgb24gdGhlIG9yaWdpbmFsIGdwcy1lbnRpdHktcGxhY2UsIG1vZGlmaWVkIGJ5IG5pY2t3IDAyLzA0LzIwXG4gKlxuICogUmF0aGVyIHRoYW4ga2VlcGluZyB0cmFjayBvZiBwb3NpdGlvbiBieSBjYWxjdWxhdGluZyB0aGUgZGlzdGFuY2Ugb2ZcbiAqIGVudGl0aWVzIG9yIHRoZSBjdXJyZW50IGxvY2F0aW9uIHRvIHRoZSBvcmlnaW5hbCBsb2NhdGlvbiwgdGhpcyB2ZXJzaW9uXG4gKiBtYWtlcyB1c2Ugb2YgdGhlIFwiR29vZ2xlXCIgU3BoZXJpY2FsIE1lcmNhY3RvciBwcm9qZWN0aW9uLCBha2EgZXBzZzozODU3LlxuICpcbiAqIFRoZSBvcmlnaW5hbCBsb2NhdGlvbiBvbiBzdGFydHVwIChsYXQvbG9uKSBpcyBwcm9qZWN0ZWQgaW50byBTcGhlcmljYWwgXG4gKiBNZXJjYXRvciBhbmQgc3RvcmVkLlxuICpcbiAqIFdoZW4gJ2VudGl0eS1wbGFjZXMnIGFyZSBhZGRlZCwgdGhlaXIgU3BoZXJpY2FsIE1lcmNhdG9yIGNvb3JkcyBhcmUgXG4gKiBjYWxjdWxhdGVkIGFuZCBjb252ZXJ0ZWQgaW50byB3b3JsZCBjb29yZGluYXRlcywgcmVsYXRpdmUgdG8gdGhlIG9yaWdpbmFsXG4gKiBwb3NpdGlvbiwgdXNpbmcgdGhlIFNwaGVyaWNhbCBNZXJjYXRvciBwcm9qZWN0aW9uIGNhbGN1bGF0aW9uIGluXG4gKiBncHMtcHJvamVjdGVkLWNhbWVyYS5cbiAqXG4gKiBTcGhlcmljYWwgTWVyY2F0b3IgdW5pdHMgYXJlIGNsb3NlIHRvLCBidXQgbm90IGV4YWN0bHksIG1ldHJlcywgYW5kIGFyZVxuICogaGVhdmlseSBkaXN0b3J0ZWQgbmVhciB0aGUgcG9sZXMuIE5vbmV0aGVsZXNzIHRoZXkgYXJlIGEgZ29vZCBhcHByb3hpbWF0aW9uXG4gKiBmb3IgbWFueSBhcmVhcyBvZiB0aGUgd29ybGQgYW5kIGFwcGVhciBub3QgdG8gY2F1c2UgdW5hY2NlcHRhYmxlIGRpc3RvcnRpb25zXG4gKiB3aGVuIHVzZWQgYXMgdGhlIHVuaXRzIGZvciBBUiBhcHBzLlxuICovXG5pbXBvcnQgKiBhcyBBRlJBTUUgZnJvbSAnYWZyYW1lJ1xuXG5BRlJBTUUucmVnaXN0ZXJDb21wb25lbnQoJ2dwcy1wcm9qZWN0ZWQtZW50aXR5LXBsYWNlJywge1xuICAgIF9jYW1lcmFHcHM6IG51bGwsXG4gICAgc2NoZW1hOiB7XG4gICAgICAgIGxvbmdpdHVkZToge1xuICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICBkZWZhdWx0OiAwLFxuICAgICAgICB9LFxuICAgICAgICBsYXRpdHVkZToge1xuICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICBkZWZhdWx0OiAwLFxuICAgICAgICB9XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBjbGVhbmluZyBsaXN0ZW5lcnMgd2hlbiB0aGUgZW50aXR5IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NXG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdncHMtY2FtZXJhLXVwZGF0ZS1wb3NpdGlvbicsIHRoaXMudXBkYXRlUG9zaXRpb25MaXN0ZW5lcik7XG4gICAgfSxcbiAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVXNlZCBub3cgdG8gZ2V0IHRoZSBHUFMgY2FtZXJhIHdoZW4gaXQncyBiZWVuIHNldHVwXG4gICAgICAgIHRoaXMuY29vcmRTZXRMaXN0ZW5lciA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fY2FtZXJhR3BzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNhbWVyYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tncHMtcHJvamVjdGVkLWNhbWVyYV0nKTtcbiAgICAgICAgICAgICAgICBpZiAoIWNhbWVyYS5jb21wb25lbnRzWydncHMtcHJvamVjdGVkLWNhbWVyYSddKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2dwcy1wcm9qZWN0ZWQtY2FtZXJhIG5vdCBpbml0aWFsaXplZCcpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FtZXJhR3BzID0gY2FtZXJhLmNvbXBvbmVudHNbJ2dwcy1wcm9qZWN0ZWQtY2FtZXJhJ107XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlUG9zaXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG5cblxuICAgICAgICAvLyB1cGRhdGUgcG9zaXRpb24gbmVlZHMgdG8gd29ycnkgYWJvdXQgZGlzdGFuY2UgYnV0IG5vdGhpbmcgZWxzZT9cbiAgICAgICAgdGhpcy51cGRhdGVQb3NpdGlvbkxpc3RlbmVyID0gKGV2KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZGF0YSB8fCAhdGhpcy5fY2FtZXJhR3BzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZHN0Q29vcmRzID0gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJyk7XG5cbiAgICAgICAgICAgIC8vIGl0J3MgYWN0dWFsbHkgYSAnZGlzdGFuY2UgcGxhY2UnLCBidXQgd2UgZG9uJ3QgY2FsbCBpdCB3aXRoIGxhc3QgcGFyYW0sIGJlY2F1c2Ugd2Ugd2FudCB0byByZXRyaWV2ZSBkaXN0YW5jZSBldmVuIGlmIGl0J3MgPCBtaW5EaXN0YW5jZSBwcm9wZXJ0eVxuICAgICAgICAgICAgLy8gX2NvbXB1dGVEaXN0YW5jZU1ldGVycyBpcyBub3cgZ29pbmcgdG8gdXNlIHRoZSBwcm9qZWN0ZWRcbiAgICAgICAgICAgIHZhciBkaXN0YW5jZUZvck1zZyA9IHRoaXMuX2NhbWVyYUdwcy5jb21wdXRlRGlzdGFuY2VNZXRlcnMoZHN0Q29vcmRzKTtcblxuICAgICAgICAgICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoJ2Rpc3RhbmNlJywgZGlzdGFuY2VGb3JNc2cpO1xuICAgICAgICAgICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoJ2Rpc3RhbmNlTXNnJywgZm9ybWF0RGlzdGFuY2UoZGlzdGFuY2VGb3JNc2cpKTtcblxuICAgICAgICAgICAgdGhpcy5lbC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnZ3BzLWVudGl0eS1wbGFjZS11cGRhdGUtcG9zaXRpb24nLCB7IGRldGFpbDogeyBkaXN0YW5jZTogZGlzdGFuY2VGb3JNc2cgfSB9KSk7XG5cbiAgICAgICAgICAgIHZhciBhY3R1YWxEaXN0YW5jZSA9IHRoaXMuX2NhbWVyYUdwcy5jb21wdXRlRGlzdGFuY2VNZXRlcnMoZHN0Q29vcmRzLCB0cnVlKTtcblxuICAgICAgICAgICAgaWYgKGFjdHVhbERpc3RhbmNlID09PSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZUZvck1pbkRpc3RhbmNlKHRoaXMuZWwsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVGb3JNaW5EaXN0YW5jZSh0aGlzLmVsLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gUmV0YWluIGFzIHRoaXMgZXZlbnQgaXMgZmlyZWQgd2hlbiB0aGUgR1BTIGNhbWVyYSBpcyBzZXQgdXBcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2dwcy1jYW1lcmEtb3JpZ2luLWNvb3JkLXNldCcsIHRoaXMuY29vcmRTZXRMaXN0ZW5lcik7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdncHMtY2FtZXJhLXVwZGF0ZS1wb3NpdGlvbicsIHRoaXMudXBkYXRlUG9zaXRpb25MaXN0ZW5lcik7XG5cbiAgICAgICAgdGhpcy5fcG9zaXRpb25YRGVidWcgPSAwO1xuXG4gICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnZ3BzLWVudGl0eS1wbGFjZS1hZGRlZCcsIHsgZGV0YWlsOiB7IGNvbXBvbmVudDogdGhpcy5lbCB9IH0pKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEhpZGUgZW50aXR5IGFjY29yZGluZyB0byBtaW5EaXN0YW5jZSBwcm9wZXJ0eVxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIGhpZGVGb3JNaW5EaXN0YW5jZTogZnVuY3Rpb24oZWwsIGhpZGVFbnRpdHkpIHtcbiAgICAgICAgaWYgKGhpZGVFbnRpdHkpIHtcbiAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgndmlzaWJsZScsICdmYWxzZScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKCd2aXNpYmxlJywgJ3RydWUnKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHBsYWNlIHBvc2l0aW9uXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG5cbiAgICAvLyBzZXQgcG9zaXRpb24gdG8gd29ybGQgY29vcmRzIHVzaW5nIHRoZSBsYXQvbG9uIFxuICAgIF91cGRhdGVQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB3b3JsZFBvcyA9IHRoaXMuX2NhbWVyYUdwcy5sYXRMb25Ub1dvcmxkKHRoaXMuZGF0YS5sYXRpdHVkZSwgdGhpcy5kYXRhLmxvbmdpdHVkZSk7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuZWwuZ2V0QXR0cmlidXRlKCdwb3NpdGlvbicpO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBlbGVtZW50J3MgcG9zaXRpb24gaW4gM0Qgd29ybGRcbiAgICAgICAgLy90aGlzLmVsLnNldEF0dHJpYnV0ZSgncG9zaXRpb24nLCBwb3NpdGlvbik7XG4gICAgICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKCdwb3NpdGlvbicsIHtcbiAgICAgICAgICAgIHg6IHdvcmxkUG9zWzBdLFxuICAgICAgICAgICAgeTogcG9zaXRpb24ueSwgXG4gICAgICAgICAgICB6OiB3b3JsZFBvc1sxXVxuICAgICAgICB9KTsgXG4gICAgfSxcbn0pO1xuXG4vKipcbiAqIEZvcm1hdCBkaXN0YW5jZXMgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRpc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlKGRpc3RhbmNlKSB7XG4gICAgZGlzdGFuY2UgPSBkaXN0YW5jZS50b0ZpeGVkKDApO1xuXG4gICAgaWYgKGRpc3RhbmNlID49IDEwMDApIHtcbiAgICAgICAgcmV0dXJuIChkaXN0YW5jZSAvIDEwMDApICsgJyBraWxvbWV0ZXJzJztcbiAgICB9XG5cbiAgICByZXR1cm4gZGlzdGFuY2UgKyAnIG1ldGVycyc7XG59O1xuIiwiaW1wb3J0ICogYXMgQUZSQU1FIGZyb20gJ2FmcmFtZSc7XG5pbXBvcnQgUHJvZmlsZSBmcm9tICcuLi8uLi90aHJlZS5qcy9zcmMvdGhyZWV4L2FyanMtcHJvZmlsZSc7XG5pbXBvcnQgU2Vzc2lvbiBmcm9tICcuLi8uLi90aHJlZS5qcy9zcmMvbmV3LWFwaS9hcmpzLXNlc3Npb24nO1xuaW1wb3J0IHsgU2Vzc2lvbkRlYnVnVUkgfSBmcm9tICcuLi8uLi90aHJlZS5qcy9zcmMvbmV3LWFwaS9hcmpzLWRlYnVndWknO1xuXG5BRlJBTUUucmVnaXN0ZXJTeXN0ZW0oJ2FyanMnLCB7XG4gICAgc2NoZW1hOiB7XG4gICAgICAgIHRyYWNraW5nTWV0aG9kOiB7XG4gICAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdiZXN0JyxcbiAgICAgICAgfSxcbiAgICAgICAgZGVidWdVSUVuYWJsZWQ6IHtcbiAgICAgICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICBhcmVhTGVhcm5pbmdCdXR0b246IHtcbiAgICAgICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIHBlcmZvcm1hbmNlUHJvZmlsZToge1xuICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICBkZWZhdWx0OiAnZGVmYXVsdCcsXG4gICAgICAgIH0sXG4gICAgICAgIGxhYmVsaW5nTW9kZToge1xuICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICBkZWZhdWx0OiAnJyxcbiAgICAgICAgfSxcbiAgICAgICAgLy8gbmV3IHZpZGVvIHRleHR1cmUgbW9kZSAobG9jYXRpb24gYmFzZWQgb25seSlcbiAgICAgICAgdmlkZW9UZXh0dXJlOiB7XG4gICAgICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgICAgICBkZWZhdWx0OiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICAvLyBvbGQgcGFyYW1ldGVyc1xuICAgICAgICBkZWJ1Zzoge1xuICAgICAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgZGV0ZWN0aW9uTW9kZToge1xuICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICBkZWZhdWx0OiAnJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWF0cml4Q29kZVR5cGU6IHtcbiAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgZGVmYXVsdDogJycsXG4gICAgICAgIH0sXG4gICAgICAgIHBhdHRlcm5SYXRpbzoge1xuICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICBkZWZhdWx0OiAtMSxcbiAgICAgICAgfSxcbiAgICAgICAgY2FtZXJhUGFyYW1ldGVyc1VybDoge1xuICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICBkZWZhdWx0OiAnJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWF4RGV0ZWN0aW9uUmF0ZToge1xuICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICBkZWZhdWx0OiAtMVxuICAgICAgICB9LFxuICAgICAgICBzb3VyY2VUeXBlOiB7XG4gICAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICcnLFxuICAgICAgICB9LFxuICAgICAgICBzb3VyY2VVcmw6IHtcbiAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgZGVmYXVsdDogJycsXG4gICAgICAgIH0sXG4gICAgICAgIHNvdXJjZVdpZHRoOiB7XG4gICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICAgIGRlZmF1bHQ6IC0xXG4gICAgICAgIH0sXG4gICAgICAgIHNvdXJjZUhlaWdodDoge1xuICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICBkZWZhdWx0OiAtMVxuICAgICAgICB9LFxuICAgICAgICBkZXZpY2VJZDoge1xuICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICBkZWZhdWx0OiAnJ1xuICAgICAgICB9LFxuICAgICAgICBkaXNwbGF5V2lkdGg6IHtcbiAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgZGVmYXVsdDogLTFcbiAgICAgICAgfSxcbiAgICAgICAgZGlzcGxheUhlaWdodDoge1xuICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICBkZWZhdWx0OiAtMVxuICAgICAgICB9LFxuICAgICAgICBjYW52YXNXaWR0aDoge1xuICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICBkZWZhdWx0OiAtMVxuICAgICAgICB9LFxuICAgICAgICBjYW52YXNIZWlnaHQ6IHtcbiAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgZGVmYXVsdDogLTFcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3JQb3B1cDoge1xuICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICBkZWZhdWx0OiAnJ1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vXHRcdENvZGUgU2VwYXJhdG9yXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXNcblxuICAgICAgICAvLyBJZiB2aWRlb1RleHR1cmUgaXMgc2V0LCBza2lwIHRoZSByZW1haW5kZXIgb2YgdGhlIHNldHVwIGVudGlyZWx5IGFuZCBqdXN0IHVzZSB0aGUgYXJqcy13ZWJjYW0tdGV4dHVyZSBjb21wb25lbnRcbiAgICAgICAgaWYodGhpcy5kYXRhLnZpZGVvVGV4dHVyZSA9PT0gdHJ1ZSAmJiB0aGlzLmRhdGEuc291cmNlVHlwZSA9PT0gJ3dlYmNhbScpIHtcbiAgICAgICAgICAgIHZhciB3ZWJjYW1FbnRpdHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYS1lbnRpdHlcIik7XG4gICAgICAgICAgICB3ZWJjYW1FbnRpdHkuc2V0QXR0cmlidXRlKFwiYXJqcy13ZWJjYW0tdGV4dHVyZVwiLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuZWwuc2NlbmVFbC5hcHBlbmRDaGlsZCh3ZWJjYW1FbnRpdHkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgIC8vXHRcdHNldHVwIGFyUHJvZmlsZVxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICB2YXIgYXJQcm9maWxlID0gdGhpcy5fYXJQcm9maWxlID0gbmV3IFByb2ZpbGUoKVxuICAgICAgICAgICAgLnRyYWNraW5nTWV0aG9kKHRoaXMuZGF0YS50cmFja2luZ01ldGhvZClcbiAgICAgICAgICAgIC5wZXJmb3JtYW5jZSh0aGlzLmRhdGEucGVyZm9ybWFuY2VQcm9maWxlKVxuICAgICAgICAgICAgLmRlZmF1bHRNYXJrZXIoKVxuXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAvL1x0XHRob25vciB0aGlzLmRhdGEgYW5kIHNldHVwIGFyUHJvZmlsZSB3aXRoIGl0XG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIC8vIGhvbm9yIHRoaXMuZGF0YSBhbmQgcHVzaCB3aGF0IGhhcyBiZWVuIG1vZGlmaWVkIGludG8gYXJQcm9maWxlXG4gICAgICAgIGlmICh0aGlzLmRhdGEuZGVidWcgIT09IGZhbHNlKSBhclByb2ZpbGUuY29udGV4dFBhcmFtZXRlcnMuZGVidWcgPSB0aGlzLmRhdGEuZGVidWdcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5kZXRlY3Rpb25Nb2RlICE9PSAnJykgYXJQcm9maWxlLmNvbnRleHRQYXJhbWV0ZXJzLmRldGVjdGlvbk1vZGUgPSB0aGlzLmRhdGEuZGV0ZWN0aW9uTW9kZVxuICAgICAgICBpZiAodGhpcy5kYXRhLm1hdHJpeENvZGVUeXBlICE9PSAnJykgYXJQcm9maWxlLmNvbnRleHRQYXJhbWV0ZXJzLm1hdHJpeENvZGVUeXBlID0gdGhpcy5kYXRhLm1hdHJpeENvZGVUeXBlXG4gICAgICAgIGlmICh0aGlzLmRhdGEucGF0dGVyblJhdGlvICE9PSAtMSkgYXJQcm9maWxlLmNvbnRleHRQYXJhbWV0ZXJzLnBhdHRlcm5SYXRpbyA9IHRoaXMuZGF0YS5wYXR0ZXJuUmF0aW9cbiAgICAgICAgaWYgKHRoaXMuZGF0YS5sYWJlbGluZ01vZGUgIT09ICcnKSBhclByb2ZpbGUuY29udGV4dFBhcmFtZXRlcnMubGFiZWxpbmdNb2RlID0gdGhpcy5kYXRhLmxhYmVsaW5nTW9kZVxuICAgICAgICBpZiAodGhpcy5kYXRhLmNhbWVyYVBhcmFtZXRlcnNVcmwgIT09ICcnKSBhclByb2ZpbGUuY29udGV4dFBhcmFtZXRlcnMuY2FtZXJhUGFyYW1ldGVyc1VybCA9IHRoaXMuZGF0YS5jYW1lcmFQYXJhbWV0ZXJzVXJsXG4gICAgICAgIGlmICh0aGlzLmRhdGEubWF4RGV0ZWN0aW9uUmF0ZSAhPT0gLTEpIGFyUHJvZmlsZS5jb250ZXh0UGFyYW1ldGVycy5tYXhEZXRlY3Rpb25SYXRlID0gdGhpcy5kYXRhLm1heERldGVjdGlvblJhdGVcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5jYW52YXNXaWR0aCAhPT0gLTEpIGFyUHJvZmlsZS5jb250ZXh0UGFyYW1ldGVycy5jYW52YXNXaWR0aCA9IHRoaXMuZGF0YS5jYW52YXNXaWR0aFxuICAgICAgICBpZiAodGhpcy5kYXRhLmNhbnZhc0hlaWdodCAhPT0gLTEpIGFyUHJvZmlsZS5jb250ZXh0UGFyYW1ldGVycy5jYW52YXNIZWlnaHQgPSB0aGlzLmRhdGEuY2FudmFzSGVpZ2h0XG5cbiAgICAgICAgaWYgKHRoaXMuZGF0YS5zb3VyY2VUeXBlICE9PSAnJykgYXJQcm9maWxlLnNvdXJjZVBhcmFtZXRlcnMuc291cmNlVHlwZSA9IHRoaXMuZGF0YS5zb3VyY2VUeXBlXG4gICAgICAgIGlmICh0aGlzLmRhdGEuc291cmNlVXJsICE9PSAnJykgYXJQcm9maWxlLnNvdXJjZVBhcmFtZXRlcnMuc291cmNlVXJsID0gdGhpcy5kYXRhLnNvdXJjZVVybFxuICAgICAgICBpZiAodGhpcy5kYXRhLnNvdXJjZVdpZHRoICE9PSAtMSkgYXJQcm9maWxlLnNvdXJjZVBhcmFtZXRlcnMuc291cmNlV2lkdGggPSB0aGlzLmRhdGEuc291cmNlV2lkdGhcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5zb3VyY2VIZWlnaHQgIT09IC0xKSBhclByb2ZpbGUuc291cmNlUGFyYW1ldGVycy5zb3VyY2VIZWlnaHQgPSB0aGlzLmRhdGEuc291cmNlSGVpZ2h0XG4gICAgICAgIGlmICh0aGlzLmRhdGEuZGV2aWNlSWQgIT09ICcnKSBhclByb2ZpbGUuc291cmNlUGFyYW1ldGVycy5kZXZpY2VJZCA9IHRoaXMuZGF0YS5kZXZpY2VJZFxuICAgICAgICBpZiAodGhpcy5kYXRhLmRpc3BsYXlXaWR0aCAhPT0gLTEpIGFyUHJvZmlsZS5zb3VyY2VQYXJhbWV0ZXJzLmRpc3BsYXlXaWR0aCA9IHRoaXMuZGF0YS5kaXNwbGF5V2lkdGhcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5kaXNwbGF5SGVpZ2h0ICE9PSAtMSkgYXJQcm9maWxlLnNvdXJjZVBhcmFtZXRlcnMuZGlzcGxheUhlaWdodCA9IHRoaXMuZGF0YS5kaXNwbGF5SGVpZ2h0XG5cbiAgICAgICAgYXJQcm9maWxlLmNoZWNrSWZWYWxpZCgpXG5cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgIC8vXHRcdENvZGUgU2VwYXJhdG9yXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIHRoaXMuX2FyU2Vzc2lvbiA9IG51bGxcblxuICAgICAgICBfdGhpcy5pc1JlYWR5ID0gZmFsc2VcbiAgICAgICAgX3RoaXMubmVlZHNPdmVycmlkZSA9IHRydWVcblxuICAgICAgICAvLyB3YWl0IHVudGlsIHRoZSByZW5kZXJlciBpcyBpc1JlYWR5XG4gICAgICAgIHRoaXMuZWwuc2NlbmVFbC5hZGRFdmVudExpc3RlbmVyKCdyZW5kZXJzdGFydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzY2VuZSA9IF90aGlzLmVsLnNjZW5lRWwub2JqZWN0M0RcbiAgICAgICAgICAgIHZhciBjYW1lcmEgPSBfdGhpcy5lbC5zY2VuZUVsLmNhbWVyYVxuICAgICAgICAgICAgdmFyIHJlbmRlcmVyID0gX3RoaXMuZWwuc2NlbmVFbC5yZW5kZXJlclxuXG4gICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgIC8vXHRcdGJ1aWxkIEFSanMuU2Vzc2lvblxuICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICB2YXIgYXJTZXNzaW9uID0gX3RoaXMuX2FyU2Vzc2lvbiA9IG5ldyBTZXNzaW9uKHtcbiAgICAgICAgICAgICAgICBzY2VuZTogc2NlbmUsXG4gICAgICAgICAgICAgICAgcmVuZGVyZXI6IHJlbmRlcmVyLFxuICAgICAgICAgICAgICAgIGNhbWVyYTogY2FtZXJhLFxuICAgICAgICAgICAgICAgIHNvdXJjZVBhcmFtZXRlcnM6IGFyUHJvZmlsZS5zb3VyY2VQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgIGNvbnRleHRQYXJhbWV0ZXJzOiBhclByb2ZpbGUuY29udGV4dFBhcmFtZXRlcnNcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgLy9cdFx0Q29kZSBTZXBhcmF0b3JcbiAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgICAgICBfdGhpcy5pc1JlYWR5ID0gdHJ1ZVxuXG4gICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgIC8vXHRcdGF3ZnVsIHJlc2l6ZSB0cmlja1xuICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAvLyBLTFVER0VcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvblJlc2l6ZSlcbiAgICAgICAgICAgIGZ1bmN0aW9uIG9uUmVzaXplKCkge1xuICAgICAgICAgICAgICAgIHZhciBhclNvdXJjZSA9IF90aGlzLl9hclNlc3Npb24uYXJTb3VyY2VcblxuICAgICAgICAgICAgICAgIC8vIHVnbHkga2x1ZGdlIHRvIGdldCByZXNpemUgb24gYWZyYW1lLi4uIG5vdCBldmVuIHN1cmUgaXQgd29ya3NcbiAgICAgICAgICAgICAgICBpZiAoYXJQcm9maWxlLmNvbnRleHRQYXJhbWV0ZXJzLnRyYWNraW5nQmFja2VuZCAhPT0gJ3RhbmdvJykge1xuICAgICAgICAgICAgICAgICAgICBhclNvdXJjZS5jb3B5RWxlbWVudFNpemVUbyhkb2N1bWVudC5ib2R5KVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGZpeGluZyBhLWZyYW1lIGNzc1xuICAgICAgICAgICAgICAgIHZhciBidXR0b25FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmEtZW50ZXItdnInKVxuICAgICAgICAgICAgICAgIGlmIChidXR0b25FbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbkVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgIC8vXHRcdGhvbm9yIC5kZWJ1Z1VJRW5hYmxlZFxuICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICBpZiAoX3RoaXMuZGF0YS5kZWJ1Z1VJRW5hYmxlZCkgaW5pdERlYnVnVUkoKVxuICAgICAgICAgICAgZnVuY3Rpb24gaW5pdERlYnVnVUkoKSB7XG4gICAgICAgICAgICAgICAgLy8gZ2V0IG9yIGNyZWF0ZSBjb250YWluZXJFbGVtZW50XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYXJqc0RlYnVnVUlDb250YWluZXInKVxuICAgICAgICAgICAgICAgIGlmIChjb250YWluZXJFbGVtZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJFbGVtZW50LmlkID0gJ2FyanNEZWJ1Z1VJQ29udGFpbmVyJ1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAncG9zaXRpb246IGZpeGVkOyBib3R0b206IDEwcHg7IHdpZHRoOjEwMCU7IHRleHQtYWxpZ246IGNlbnRlcjsgei1pbmRleDogMTtjb2xvcjogZ3JleTsnKVxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lckVsZW1lbnQpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIHNlc3Npb25EZWJ1Z1VJXG4gICAgICAgICAgICAgICAgdmFyIHNlc3Npb25EZWJ1Z1VJID0gbmV3IFNlc3Npb25EZWJ1Z1VJKGFyU2Vzc2lvbilcbiAgICAgICAgICAgICAgICBjb250YWluZXJFbGVtZW50LmFwcGVuZENoaWxkKHNlc3Npb25EZWJ1Z1VJLmRvbUVsZW1lbnQpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgIC8vXHRcdENvZGUgU2VwYXJhdG9yXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAvLyBUT0RPIHRoaXMgaXMgY3JhcHB5IC0gY29kZSBhbiBleHBvbmVudGlhbCBiYWNrb2ZmIC0gbWF4IDEgc2Vjb25kc1xuICAgICAgICAvLyBLTFVER0U6IGtsdWRnZSB0byB3cml0ZSBhICdyZXNpemUnIGV2ZW50XG4gICAgICAgIC8vIHZhciBzdGFydGVkQXQgPSBEYXRlLm5vdygpXG4gICAgICAgIC8vIHZhciB0aW1lcklkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyAgICAgaWYgKERhdGUubm93KCkgLSBzdGFydGVkQXQgPiAxMDAwMCAqIDEwMDApIHtcbiAgICAgICAgLy8gICAgICAgICBjbGVhckludGVydmFsKHRpbWVySWQpXG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuXG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vICAgICAvLyBvblJlc2l6ZSgpXG4gICAgICAgIC8vICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3Jlc2l6ZScpKTtcbiAgICAgICAgLy8gfSwgMTAwMCAvIDMwKVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldEJhY2tvZmYoZnVuYywgbWlsbGlzRHVyYXRpb24gPSBJbmZpbml0eSwgbGltaXQgPSAxMDAwKSB7XG4gICAgICAgICAgICBpZihmdW5jID09IG51bGwgfHwgIShPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZnVuYykgPT0gJ1tvYmplY3QgRnVuY3Rpb25dJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IFxuICAgICAgICAgICAgbGV0IGJhY2tvZmYgPSAzMy4zXG4gICAgICAgICAgICBsZXQgc3RhcnQgPSBEYXRlLm5vdygpXG4gICAgICAgICAgICBsZXQgcmVwZWF0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiAobWlsbGlzRHVyYXRpb24gPT0gSW5maW5pdHkgfHwgKERhdGUubm93KCkgLSBzdGFydCkgPCBtaWxsaXNEdXJhdGlvbilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBuZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgYmFja29mZiA9IChiYWNrb2ZmICogMikgPCBsaW1pdCA/IChiYWNrb2ZmICogMikgOiBsaW1pdFxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmMoKVxuICAgICAgICAgICAgICAgICAgICBpZihyZXBlYXQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCgpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBiYWNrb2ZmKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG5leHQoKVxuICAgICAgICB9XG5cbiAgICAgICAgc2V0QmFja29mZigoKSA9PiB7XG4gICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3Jlc2l6ZScpKVxuICAgICAgICB9KVxuICAgIH0sXG5cbiAgICB0aWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIHNraXAgaXQgaWYgbm90IHlldCBpc0luaXRpYWxpc2VkXG4gICAgICAgIGlmICh0aGlzLmlzUmVhZHkgPT09IGZhbHNlIHx8IHRoaXMuZGF0YS52aWRlb1RleHR1cmUgPT09IHRydWUpIHJldHVyblxuXG4gICAgICAgIC8vIHVwZGF0ZSBhclNlc3Npb25cbiAgICAgICAgdGhpcy5fYXJTZXNzaW9uLnVwZGF0ZSgpXG5cbiAgICAgICAgLy8gY29weSBwcm9qZWN0aW9uIG1hdHJpeCB0byBjYW1lcmFcbiAgICAgICAgdGhpcy5fYXJTZXNzaW9uLm9uUmVzaXplKClcbiAgICB9LFxuXG4gICAgX2Rpc3BsYXlFcnJvclBvcHVwOiBmdW5jdGlvbihtc2cpIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5lcnJvclBvcHVwICE9PSAnJykge1xuICAgICAgICAgICAgbGV0IGVycm9yUG9wdXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmRhdGEuZXJyb3JQb3B1cCk7XG4gICAgICAgICAgICBpZiAoIWVycm9yUG9wdXApIHtcbiAgICAgICAgICAgICAgICBlcnJvclBvcHVwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgZXJyb3JQb3B1cC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGhpcy5kYXRhLmVycm9yUG9wdXApO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZXJyb3JQb3B1cCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlcnJvclBvcHVwLmlubmVySFRNTCA9IG1zZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFsZXJ0KG1zZyk7XG4gICAgICAgIH1cbiAgICB9XG59KVxuIiwiIWZ1bmN0aW9uKEEsSSl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9SSgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sSSk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5BUlRvb2xraXQ9SSgpOkEuQVJUb29sa2l0PUkoKX0oXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjp0aGlzLChmdW5jdGlvbigpe3JldHVybigoKT0+e3ZhciBBPXs3NTc6KEEsSSxnKT0+e0EuZXhwb3J0cz1nKDY2Nil9LDY2OTooQSxJLGcpPT57QS5leHBvcnRzPWcoNjA5KX0sNDQ4OihBLEksZyk9PntcInVzZSBzdHJpY3RcIjt2YXIgQj1nKDg2NyksQz1nKDI2KSxRPWcoMzcyKSxFPWcoMzI3KSxpPWcoOTcpLG89ZygxMDkpLEQ9Zyg5ODUpLGE9Zyg2MSksdz1nKDY1NSksRj1nKDI2Myk7QS5leHBvcnRzPWZ1bmN0aW9uKEEpe3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24oSSxnKXt2YXIgRyxoPUEuZGF0YSxzPUEuaGVhZGVycyxSPUEucmVzcG9uc2VUeXBlO2Z1bmN0aW9uIFUoKXtBLmNhbmNlbFRva2VuJiZBLmNhbmNlbFRva2VuLnVuc3Vic2NyaWJlKEcpLEEuc2lnbmFsJiZBLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIixHKX1CLmlzRm9ybURhdGEoaCkmJmRlbGV0ZSBzW1wiQ29udGVudC1UeXBlXCJdO3ZhciB5PW5ldyBYTUxIdHRwUmVxdWVzdDtpZihBLmF1dGgpe3ZhciB0PUEuYXV0aC51c2VybmFtZXx8XCJcIixTPUEuYXV0aC5wYXNzd29yZD91bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoQS5hdXRoLnBhc3N3b3JkKSk6XCJcIjtzLkF1dGhvcml6YXRpb249XCJCYXNpYyBcIitidG9hKHQrXCI6XCIrUyl9dmFyIE09aShBLmJhc2VVUkwsQS51cmwpO2Z1bmN0aW9uIG4oKXtpZih5KXt2YXIgQj1cImdldEFsbFJlc3BvbnNlSGVhZGVyc1wiaW4geT9vKHkuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpOm51bGwsUT17ZGF0YTpSJiZcInRleHRcIiE9PVImJlwianNvblwiIT09Uj95LnJlc3BvbnNlOnkucmVzcG9uc2VUZXh0LHN0YXR1czp5LnN0YXR1cyxzdGF0dXNUZXh0Onkuc3RhdHVzVGV4dCxoZWFkZXJzOkIsY29uZmlnOkEscmVxdWVzdDp5fTtDKChmdW5jdGlvbihBKXtJKEEpLFUoKX0pLChmdW5jdGlvbihBKXtnKEEpLFUoKX0pLFEpLHk9bnVsbH19aWYoeS5vcGVuKEEubWV0aG9kLnRvVXBwZXJDYXNlKCksRShNLEEucGFyYW1zLEEucGFyYW1zU2VyaWFsaXplciksITApLHkudGltZW91dD1BLnRpbWVvdXQsXCJvbmxvYWRlbmRcImluIHk/eS5vbmxvYWRlbmQ9bjp5Lm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe3kmJjQ9PT15LnJlYWR5U3RhdGUmJigwIT09eS5zdGF0dXN8fHkucmVzcG9uc2VVUkwmJjA9PT15LnJlc3BvbnNlVVJMLmluZGV4T2YoXCJmaWxlOlwiKSkmJnNldFRpbWVvdXQobil9LHkub25hYm9ydD1mdW5jdGlvbigpe3kmJihnKGEoXCJSZXF1ZXN0IGFib3J0ZWRcIixBLFwiRUNPTk5BQk9SVEVEXCIseSkpLHk9bnVsbCl9LHkub25lcnJvcj1mdW5jdGlvbigpe2coYShcIk5ldHdvcmsgRXJyb3JcIixBLG51bGwseSkpLHk9bnVsbH0seS5vbnRpbWVvdXQ9ZnVuY3Rpb24oKXt2YXIgST1BLnRpbWVvdXQ/XCJ0aW1lb3V0IG9mIFwiK0EudGltZW91dCtcIm1zIGV4Y2VlZGVkXCI6XCJ0aW1lb3V0IGV4Y2VlZGVkXCIsQj1BLnRyYW5zaXRpb25hbHx8dy50cmFuc2l0aW9uYWw7QS50aW1lb3V0RXJyb3JNZXNzYWdlJiYoST1BLnRpbWVvdXRFcnJvck1lc3NhZ2UpLGcoYShJLEEsQi5jbGFyaWZ5VGltZW91dEVycm9yP1wiRVRJTUVET1VUXCI6XCJFQ09OTkFCT1JURURcIix5KSkseT1udWxsfSxCLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpe3ZhciBjPShBLndpdGhDcmVkZW50aWFsc3x8RChNKSkmJkEueHNyZkNvb2tpZU5hbWU/US5yZWFkKEEueHNyZkNvb2tpZU5hbWUpOnZvaWQgMDtjJiYoc1tBLnhzcmZIZWFkZXJOYW1lXT1jKX1cInNldFJlcXVlc3RIZWFkZXJcImluIHkmJkIuZm9yRWFjaChzLChmdW5jdGlvbihBLEkpe3ZvaWQgMD09PWgmJlwiY29udGVudC10eXBlXCI9PT1JLnRvTG93ZXJDYXNlKCk/ZGVsZXRlIHNbSV06eS5zZXRSZXF1ZXN0SGVhZGVyKEksQSl9KSksQi5pc1VuZGVmaW5lZChBLndpdGhDcmVkZW50aWFscyl8fCh5LndpdGhDcmVkZW50aWFscz0hIUEud2l0aENyZWRlbnRpYWxzKSxSJiZcImpzb25cIiE9PVImJih5LnJlc3BvbnNlVHlwZT1BLnJlc3BvbnNlVHlwZSksXCJmdW5jdGlvblwiPT10eXBlb2YgQS5vbkRvd25sb2FkUHJvZ3Jlc3MmJnkuYWRkRXZlbnRMaXN0ZW5lcihcInByb2dyZXNzXCIsQS5vbkRvd25sb2FkUHJvZ3Jlc3MpLFwiZnVuY3Rpb25cIj09dHlwZW9mIEEub25VcGxvYWRQcm9ncmVzcyYmeS51cGxvYWQmJnkudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoXCJwcm9ncmVzc1wiLEEub25VcGxvYWRQcm9ncmVzcyksKEEuY2FuY2VsVG9rZW58fEEuc2lnbmFsKSYmKEc9ZnVuY3Rpb24oQSl7eSYmKGcoIUF8fEEmJkEudHlwZT9uZXcgRihcImNhbmNlbGVkXCIpOkEpLHkuYWJvcnQoKSx5PW51bGwpfSxBLmNhbmNlbFRva2VuJiZBLmNhbmNlbFRva2VuLnN1YnNjcmliZShHKSxBLnNpZ25hbCYmKEEuc2lnbmFsLmFib3J0ZWQ/RygpOkEuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLEcpKSksaHx8KGg9bnVsbCkseS5zZW5kKGgpfSkpfX0sNjA5OihBLEksZyk9PntcInVzZSBzdHJpY3RcIjt2YXIgQj1nKDg2NyksQz1nKDg0OSksUT1nKDMyMSksRT1nKDE4NSksaT1mdW5jdGlvbiBBKEkpe3ZhciBnPW5ldyBRKEkpLGk9QyhRLnByb3RvdHlwZS5yZXF1ZXN0LGcpO3JldHVybiBCLmV4dGVuZChpLFEucHJvdG90eXBlLGcpLEIuZXh0ZW5kKGksZyksaS5jcmVhdGU9ZnVuY3Rpb24oZyl7cmV0dXJuIEEoRShJLGcpKX0saX0oZyg2NTUpKTtpLkF4aW9zPVEsaS5DYW5jZWw9ZygyNjMpLGkuQ2FuY2VsVG9rZW49Zyg5NzIpLGkuaXNDYW5jZWw9Zyg1MDIpLGkuVkVSU0lPTj1nKDI4OCkudmVyc2lvbixpLmFsbD1mdW5jdGlvbihBKXtyZXR1cm4gUHJvbWlzZS5hbGwoQSl9LGkuc3ByZWFkPWcoNzEzKSxpLmlzQXhpb3NFcnJvcj1nKDI2OCksQS5leHBvcnRzPWksQS5leHBvcnRzLmRlZmF1bHQ9aX0sMjYzOkE9PntcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBJKEEpe3RoaXMubWVzc2FnZT1BfUkucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJDYW5jZWxcIisodGhpcy5tZXNzYWdlP1wiOiBcIit0aGlzLm1lc3NhZ2U6XCJcIil9LEkucHJvdG90eXBlLl9fQ0FOQ0VMX189ITAsQS5leHBvcnRzPUl9LDk3MjooQSxJLGcpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIEI9ZygyNjMpO2Z1bmN0aW9uIEMoQSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgQSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLlwiKTt2YXIgSTt0aGlzLnByb21pc2U9bmV3IFByb21pc2UoKGZ1bmN0aW9uKEEpe0k9QX0pKTt2YXIgZz10aGlzO3RoaXMucHJvbWlzZS50aGVuKChmdW5jdGlvbihBKXtpZihnLl9saXN0ZW5lcnMpe3ZhciBJLEI9Zy5fbGlzdGVuZXJzLmxlbmd0aDtmb3IoST0wO0k8QjtJKyspZy5fbGlzdGVuZXJzW0ldKEEpO2cuX2xpc3RlbmVycz1udWxsfX0pKSx0aGlzLnByb21pc2UudGhlbj1mdW5jdGlvbihBKXt2YXIgSSxCPW5ldyBQcm9taXNlKChmdW5jdGlvbihBKXtnLnN1YnNjcmliZShBKSxJPUF9KSkudGhlbihBKTtyZXR1cm4gQi5jYW5jZWw9ZnVuY3Rpb24oKXtnLnVuc3Vic2NyaWJlKEkpfSxCfSxBKChmdW5jdGlvbihBKXtnLnJlYXNvbnx8KGcucmVhc29uPW5ldyBCKEEpLEkoZy5yZWFzb24pKX0pKX1DLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkPWZ1bmN0aW9uKCl7aWYodGhpcy5yZWFzb24pdGhyb3cgdGhpcy5yZWFzb259LEMucHJvdG90eXBlLnN1YnNjcmliZT1mdW5jdGlvbihBKXt0aGlzLnJlYXNvbj9BKHRoaXMucmVhc29uKTp0aGlzLl9saXN0ZW5lcnM/dGhpcy5fbGlzdGVuZXJzLnB1c2goQSk6dGhpcy5fbGlzdGVuZXJzPVtBXX0sQy5wcm90b3R5cGUudW5zdWJzY3JpYmU9ZnVuY3Rpb24oQSl7aWYodGhpcy5fbGlzdGVuZXJzKXt2YXIgST10aGlzLl9saXN0ZW5lcnMuaW5kZXhPZihBKTstMSE9PUkmJnRoaXMuX2xpc3RlbmVycy5zcGxpY2UoSSwxKX19LEMuc291cmNlPWZ1bmN0aW9uKCl7dmFyIEE7cmV0dXJue3Rva2VuOm5ldyBDKChmdW5jdGlvbihJKXtBPUl9KSksY2FuY2VsOkF9fSxBLmV4cG9ydHM9Q30sNTAyOkE9PntcInVzZSBzdHJpY3RcIjtBLmV4cG9ydHM9ZnVuY3Rpb24oQSl7cmV0dXJuISghQXx8IUEuX19DQU5DRUxfXyl9fSwzMjE6KEEsSSxnKT0+e1widXNlIHN0cmljdFwiO3ZhciBCPWcoODY3KSxDPWcoMzI3KSxRPWcoNzgyKSxFPWcoNTcyKSxpPWcoMTg1KSxvPWcoODc1KSxEPW8udmFsaWRhdG9ycztmdW5jdGlvbiBhKEEpe3RoaXMuZGVmYXVsdHM9QSx0aGlzLmludGVyY2VwdG9ycz17cmVxdWVzdDpuZXcgUSxyZXNwb25zZTpuZXcgUX19YS5wcm90b3R5cGUucmVxdWVzdD1mdW5jdGlvbihBKXtcInN0cmluZ1wiPT10eXBlb2YgQT8oQT1hcmd1bWVudHNbMV18fHt9KS51cmw9YXJndW1lbnRzWzBdOkE9QXx8e30sKEE9aSh0aGlzLmRlZmF1bHRzLEEpKS5tZXRob2Q/QS5tZXRob2Q9QS5tZXRob2QudG9Mb3dlckNhc2UoKTp0aGlzLmRlZmF1bHRzLm1ldGhvZD9BLm1ldGhvZD10aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpOkEubWV0aG9kPVwiZ2V0XCI7dmFyIEk9QS50cmFuc2l0aW9uYWw7dm9pZCAwIT09SSYmby5hc3NlcnRPcHRpb25zKEkse3NpbGVudEpTT05QYXJzaW5nOkQudHJhbnNpdGlvbmFsKEQuYm9vbGVhbiksZm9yY2VkSlNPTlBhcnNpbmc6RC50cmFuc2l0aW9uYWwoRC5ib29sZWFuKSxjbGFyaWZ5VGltZW91dEVycm9yOkQudHJhbnNpdGlvbmFsKEQuYm9vbGVhbil9LCExKTt2YXIgZz1bXSxCPSEwO3RoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaCgoZnVuY3Rpb24oSSl7XCJmdW5jdGlvblwiPT10eXBlb2YgSS5ydW5XaGVuJiYhMT09PUkucnVuV2hlbihBKXx8KEI9QiYmSS5zeW5jaHJvbm91cyxnLnVuc2hpZnQoSS5mdWxmaWxsZWQsSS5yZWplY3RlZCkpfSkpO3ZhciBDLFE9W107aWYodGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaCgoZnVuY3Rpb24oQSl7US5wdXNoKEEuZnVsZmlsbGVkLEEucmVqZWN0ZWQpfSkpLCFCKXt2YXIgYT1bRSx2b2lkIDBdO2ZvcihBcnJheS5wcm90b3R5cGUudW5zaGlmdC5hcHBseShhLGcpLGE9YS5jb25jYXQoUSksQz1Qcm9taXNlLnJlc29sdmUoQSk7YS5sZW5ndGg7KUM9Qy50aGVuKGEuc2hpZnQoKSxhLnNoaWZ0KCkpO3JldHVybiBDfWZvcih2YXIgdz1BO2cubGVuZ3RoOyl7dmFyIEY9Zy5zaGlmdCgpLEc9Zy5zaGlmdCgpO3RyeXt3PUYodyl9Y2F0Y2goQSl7RyhBKTticmVha319dHJ5e0M9RSh3KX1jYXRjaChBKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoQSl9Zm9yKDtRLmxlbmd0aDspQz1DLnRoZW4oUS5zaGlmdCgpLFEuc2hpZnQoKSk7cmV0dXJuIEN9LGEucHJvdG90eXBlLmdldFVyaT1mdW5jdGlvbihBKXtyZXR1cm4gQT1pKHRoaXMuZGVmYXVsdHMsQSksQyhBLnVybCxBLnBhcmFtcyxBLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLFwiXCIpfSxCLmZvckVhY2goW1wiZGVsZXRlXCIsXCJnZXRcIixcImhlYWRcIixcIm9wdGlvbnNcIl0sKGZ1bmN0aW9uKEEpe2EucHJvdG90eXBlW0FdPWZ1bmN0aW9uKEksZyl7cmV0dXJuIHRoaXMucmVxdWVzdChpKGd8fHt9LHttZXRob2Q6QSx1cmw6SSxkYXRhOihnfHx7fSkuZGF0YX0pKX19KSksQi5mb3JFYWNoKFtcInBvc3RcIixcInB1dFwiLFwicGF0Y2hcIl0sKGZ1bmN0aW9uKEEpe2EucHJvdG90eXBlW0FdPWZ1bmN0aW9uKEksZyxCKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KGkoQnx8e30se21ldGhvZDpBLHVybDpJLGRhdGE6Z30pKX19KSksQS5leHBvcnRzPWF9LDc4MjooQSxJLGcpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIEI9Zyg4NjcpO2Z1bmN0aW9uIEMoKXt0aGlzLmhhbmRsZXJzPVtdfUMucHJvdG90eXBlLnVzZT1mdW5jdGlvbihBLEksZyl7cmV0dXJuIHRoaXMuaGFuZGxlcnMucHVzaCh7ZnVsZmlsbGVkOkEscmVqZWN0ZWQ6SSxzeW5jaHJvbm91czohIWcmJmcuc3luY2hyb25vdXMscnVuV2hlbjpnP2cucnVuV2hlbjpudWxsfSksdGhpcy5oYW5kbGVycy5sZW5ndGgtMX0sQy5wcm90b3R5cGUuZWplY3Q9ZnVuY3Rpb24oQSl7dGhpcy5oYW5kbGVyc1tBXSYmKHRoaXMuaGFuZGxlcnNbQV09bnVsbCl9LEMucHJvdG90eXBlLmZvckVhY2g9ZnVuY3Rpb24oQSl7Qi5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsKGZ1bmN0aW9uKEkpe251bGwhPT1JJiZBKEkpfSkpfSxBLmV4cG9ydHM9Q30sOTc6KEEsSSxnKT0+e1widXNlIHN0cmljdFwiO3ZhciBCPWcoNzkzKSxDPWcoMzAzKTtBLmV4cG9ydHM9ZnVuY3Rpb24oQSxJKXtyZXR1cm4gQSYmIUIoSSk/QyhBLEkpOkl9fSw2MTooQSxJLGcpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIEI9Zyg0ODEpO0EuZXhwb3J0cz1mdW5jdGlvbihBLEksZyxDLFEpe3ZhciBFPW5ldyBFcnJvcihBKTtyZXR1cm4gQihFLEksZyxDLFEpfX0sNTcyOihBLEksZyk9PntcInVzZSBzdHJpY3RcIjt2YXIgQj1nKDg2NyksQz1nKDUyNyksUT1nKDUwMiksRT1nKDY1NSksaT1nKDI2Myk7ZnVuY3Rpb24gbyhBKXtpZihBLmNhbmNlbFRva2VuJiZBLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKSxBLnNpZ25hbCYmQS5zaWduYWwuYWJvcnRlZCl0aHJvdyBuZXcgaShcImNhbmNlbGVkXCIpfUEuZXhwb3J0cz1mdW5jdGlvbihBKXtyZXR1cm4gbyhBKSxBLmhlYWRlcnM9QS5oZWFkZXJzfHx7fSxBLmRhdGE9Qy5jYWxsKEEsQS5kYXRhLEEuaGVhZGVycyxBLnRyYW5zZm9ybVJlcXVlc3QpLEEuaGVhZGVycz1CLm1lcmdlKEEuaGVhZGVycy5jb21tb258fHt9LEEuaGVhZGVyc1tBLm1ldGhvZF18fHt9LEEuaGVhZGVycyksQi5mb3JFYWNoKFtcImRlbGV0ZVwiLFwiZ2V0XCIsXCJoZWFkXCIsXCJwb3N0XCIsXCJwdXRcIixcInBhdGNoXCIsXCJjb21tb25cIl0sKGZ1bmN0aW9uKEkpe2RlbGV0ZSBBLmhlYWRlcnNbSV19KSksKEEuYWRhcHRlcnx8RS5hZGFwdGVyKShBKS50aGVuKChmdW5jdGlvbihJKXtyZXR1cm4gbyhBKSxJLmRhdGE9Qy5jYWxsKEEsSS5kYXRhLEkuaGVhZGVycyxBLnRyYW5zZm9ybVJlc3BvbnNlKSxJfSksKGZ1bmN0aW9uKEkpe3JldHVybiBRKEkpfHwobyhBKSxJJiZJLnJlc3BvbnNlJiYoSS5yZXNwb25zZS5kYXRhPUMuY2FsbChBLEkucmVzcG9uc2UuZGF0YSxJLnJlc3BvbnNlLmhlYWRlcnMsQS50cmFuc2Zvcm1SZXNwb25zZSkpKSxQcm9taXNlLnJlamVjdChJKX0pKX19LDQ4MTpBPT57XCJ1c2Ugc3RyaWN0XCI7QS5leHBvcnRzPWZ1bmN0aW9uKEEsSSxnLEIsQyl7cmV0dXJuIEEuY29uZmlnPUksZyYmKEEuY29kZT1nKSxBLnJlcXVlc3Q9QixBLnJlc3BvbnNlPUMsQS5pc0F4aW9zRXJyb3I9ITAsQS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm57bWVzc2FnZTp0aGlzLm1lc3NhZ2UsbmFtZTp0aGlzLm5hbWUsZGVzY3JpcHRpb246dGhpcy5kZXNjcmlwdGlvbixudW1iZXI6dGhpcy5udW1iZXIsZmlsZU5hbWU6dGhpcy5maWxlTmFtZSxsaW5lTnVtYmVyOnRoaXMubGluZU51bWJlcixjb2x1bW5OdW1iZXI6dGhpcy5jb2x1bW5OdW1iZXIsc3RhY2s6dGhpcy5zdGFjayxjb25maWc6dGhpcy5jb25maWcsY29kZTp0aGlzLmNvZGUsc3RhdHVzOnRoaXMucmVzcG9uc2UmJnRoaXMucmVzcG9uc2Uuc3RhdHVzP3RoaXMucmVzcG9uc2Uuc3RhdHVzOm51bGx9fSxBfX0sMTg1OihBLEksZyk9PntcInVzZSBzdHJpY3RcIjt2YXIgQj1nKDg2Nyk7QS5leHBvcnRzPWZ1bmN0aW9uKEEsSSl7ST1JfHx7fTt2YXIgZz17fTtmdW5jdGlvbiBDKEEsSSl7cmV0dXJuIEIuaXNQbGFpbk9iamVjdChBKSYmQi5pc1BsYWluT2JqZWN0KEkpP0IubWVyZ2UoQSxJKTpCLmlzUGxhaW5PYmplY3QoSSk/Qi5tZXJnZSh7fSxJKTpCLmlzQXJyYXkoSSk/SS5zbGljZSgpOkl9ZnVuY3Rpb24gUShnKXtyZXR1cm4gQi5pc1VuZGVmaW5lZChJW2ddKT9CLmlzVW5kZWZpbmVkKEFbZ10pP3ZvaWQgMDpDKHZvaWQgMCxBW2ddKTpDKEFbZ10sSVtnXSl9ZnVuY3Rpb24gRShBKXtpZighQi5pc1VuZGVmaW5lZChJW0FdKSlyZXR1cm4gQyh2b2lkIDAsSVtBXSl9ZnVuY3Rpb24gaShnKXtyZXR1cm4gQi5pc1VuZGVmaW5lZChJW2ddKT9CLmlzVW5kZWZpbmVkKEFbZ10pP3ZvaWQgMDpDKHZvaWQgMCxBW2ddKTpDKHZvaWQgMCxJW2ddKX1mdW5jdGlvbiBvKGcpe3JldHVybiBnIGluIEk/QyhBW2ddLElbZ10pOmcgaW4gQT9DKHZvaWQgMCxBW2ddKTp2b2lkIDB9dmFyIEQ9e3VybDpFLG1ldGhvZDpFLGRhdGE6RSxiYXNlVVJMOmksdHJhbnNmb3JtUmVxdWVzdDppLHRyYW5zZm9ybVJlc3BvbnNlOmkscGFyYW1zU2VyaWFsaXplcjppLHRpbWVvdXQ6aSx0aW1lb3V0TWVzc2FnZTppLHdpdGhDcmVkZW50aWFsczppLGFkYXB0ZXI6aSxyZXNwb25zZVR5cGU6aSx4c3JmQ29va2llTmFtZTppLHhzcmZIZWFkZXJOYW1lOmksb25VcGxvYWRQcm9ncmVzczppLG9uRG93bmxvYWRQcm9ncmVzczppLGRlY29tcHJlc3M6aSxtYXhDb250ZW50TGVuZ3RoOmksbWF4Qm9keUxlbmd0aDppLHRyYW5zcG9ydDppLGh0dHBBZ2VudDppLGh0dHBzQWdlbnQ6aSxjYW5jZWxUb2tlbjppLHNvY2tldFBhdGg6aSxyZXNwb25zZUVuY29kaW5nOmksdmFsaWRhdGVTdGF0dXM6b307cmV0dXJuIEIuZm9yRWFjaChPYmplY3Qua2V5cyhBKS5jb25jYXQoT2JqZWN0LmtleXMoSSkpLChmdW5jdGlvbihBKXt2YXIgST1EW0FdfHxRLEM9SShBKTtCLmlzVW5kZWZpbmVkKEMpJiZJIT09b3x8KGdbQV09Qyl9KSksZ319LDI2OihBLEksZyk9PntcInVzZSBzdHJpY3RcIjt2YXIgQj1nKDYxKTtBLmV4cG9ydHM9ZnVuY3Rpb24oQSxJLGcpe3ZhciBDPWcuY29uZmlnLnZhbGlkYXRlU3RhdHVzO2cuc3RhdHVzJiZDJiYhQyhnLnN0YXR1cyk/SShCKFwiUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSBcIitnLnN0YXR1cyxnLmNvbmZpZyxudWxsLGcucmVxdWVzdCxnKSk6QShnKX19LDUyNzooQSxJLGcpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIEI9Zyg4NjcpLEM9Zyg2NTUpO0EuZXhwb3J0cz1mdW5jdGlvbihBLEksZyl7dmFyIFE9dGhpc3x8QztyZXR1cm4gQi5mb3JFYWNoKGcsKGZ1bmN0aW9uKGcpe0E9Zy5jYWxsKFEsQSxJKX0pKSxBfX0sNjU1OihBLEksZyk9PntcInVzZSBzdHJpY3RcIjt2YXIgQj1nKDg2NyksQz1nKDE2KSxRPWcoNDgxKSxFPXtcIkNvbnRlbnQtVHlwZVwiOlwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCJ9O2Z1bmN0aW9uIGkoQSxJKXshQi5pc1VuZGVmaW5lZChBKSYmQi5pc1VuZGVmaW5lZChBW1wiQ29udGVudC1UeXBlXCJdKSYmKEFbXCJDb250ZW50LVR5cGVcIl09SSl9dmFyIG8sRD17dHJhbnNpdGlvbmFsOntzaWxlbnRKU09OUGFyc2luZzohMCxmb3JjZWRKU09OUGFyc2luZzohMCxjbGFyaWZ5VGltZW91dEVycm9yOiExfSxhZGFwdGVyOigoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFhNTEh0dHBSZXF1ZXN0fHxcInVuZGVmaW5lZFwiIT10eXBlb2YgcHJvY2VzcyYmXCJbb2JqZWN0IHByb2Nlc3NdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykpJiYobz1nKDQ0OCkpLG8pLHRyYW5zZm9ybVJlcXVlc3Q6W2Z1bmN0aW9uKEEsSSl7cmV0dXJuIEMoSSxcIkFjY2VwdFwiKSxDKEksXCJDb250ZW50LVR5cGVcIiksQi5pc0Zvcm1EYXRhKEEpfHxCLmlzQXJyYXlCdWZmZXIoQSl8fEIuaXNCdWZmZXIoQSl8fEIuaXNTdHJlYW0oQSl8fEIuaXNGaWxlKEEpfHxCLmlzQmxvYihBKT9BOkIuaXNBcnJheUJ1ZmZlclZpZXcoQSk/QS5idWZmZXI6Qi5pc1VSTFNlYXJjaFBhcmFtcyhBKT8oaShJLFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLThcIiksQS50b1N0cmluZygpKTpCLmlzT2JqZWN0KEEpfHxJJiZcImFwcGxpY2F0aW9uL2pzb25cIj09PUlbXCJDb250ZW50LVR5cGVcIl0/KGkoSSxcImFwcGxpY2F0aW9uL2pzb25cIiksZnVuY3Rpb24oQSxJLGcpe2lmKEIuaXNTdHJpbmcoQSkpdHJ5e3JldHVybigwLEpTT04ucGFyc2UpKEEpLEIudHJpbShBKX1jYXRjaChBKXtpZihcIlN5bnRheEVycm9yXCIhPT1BLm5hbWUpdGhyb3cgQX1yZXR1cm4oMCxKU09OLnN0cmluZ2lmeSkoQSl9KEEpKTpBfV0sdHJhbnNmb3JtUmVzcG9uc2U6W2Z1bmN0aW9uKEEpe3ZhciBJPXRoaXMudHJhbnNpdGlvbmFsfHxELnRyYW5zaXRpb25hbCxnPUkmJkkuc2lsZW50SlNPTlBhcnNpbmcsQz1JJiZJLmZvcmNlZEpTT05QYXJzaW5nLEU9IWcmJlwianNvblwiPT09dGhpcy5yZXNwb25zZVR5cGU7aWYoRXx8QyYmQi5pc1N0cmluZyhBKSYmQS5sZW5ndGgpdHJ5e3JldHVybiBKU09OLnBhcnNlKEEpfWNhdGNoKEEpe2lmKEUpe2lmKFwiU3ludGF4RXJyb3JcIj09PUEubmFtZSl0aHJvdyBRKEEsdGhpcyxcIkVfSlNPTl9QQVJTRVwiKTt0aHJvdyBBfX1yZXR1cm4gQX1dLHRpbWVvdXQ6MCx4c3JmQ29va2llTmFtZTpcIlhTUkYtVE9LRU5cIix4c3JmSGVhZGVyTmFtZTpcIlgtWFNSRi1UT0tFTlwiLG1heENvbnRlbnRMZW5ndGg6LTEsbWF4Qm9keUxlbmd0aDotMSx2YWxpZGF0ZVN0YXR1czpmdW5jdGlvbihBKXtyZXR1cm4gQT49MjAwJiZBPDMwMH0saGVhZGVyczp7Y29tbW9uOntBY2NlcHQ6XCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLypcIn19fTtCLmZvckVhY2goW1wiZGVsZXRlXCIsXCJnZXRcIixcImhlYWRcIl0sKGZ1bmN0aW9uKEEpe0QuaGVhZGVyc1tBXT17fX0pKSxCLmZvckVhY2goW1wicG9zdFwiLFwicHV0XCIsXCJwYXRjaFwiXSwoZnVuY3Rpb24oQSl7RC5oZWFkZXJzW0FdPUIubWVyZ2UoRSl9KSksQS5leHBvcnRzPUR9LDI4ODpBPT57QS5leHBvcnRzPXt2ZXJzaW9uOlwiMC4yNC4wXCJ9fSw4NDk6QT0+e1widXNlIHN0cmljdFwiO0EuZXhwb3J0cz1mdW5jdGlvbihBLEkpe3JldHVybiBmdW5jdGlvbigpe2Zvcih2YXIgZz1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCksQj0wO0I8Zy5sZW5ndGg7QisrKWdbQl09YXJndW1lbnRzW0JdO3JldHVybiBBLmFwcGx5KEksZyl9fX0sMzI3OihBLEksZyk9PntcInVzZSBzdHJpY3RcIjt2YXIgQj1nKDg2Nyk7ZnVuY3Rpb24gQyhBKXtyZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KEEpLnJlcGxhY2UoLyUzQS9naSxcIjpcIikucmVwbGFjZSgvJTI0L2csXCIkXCIpLnJlcGxhY2UoLyUyQy9naSxcIixcIikucmVwbGFjZSgvJTIwL2csXCIrXCIpLnJlcGxhY2UoLyU1Qi9naSxcIltcIikucmVwbGFjZSgvJTVEL2dpLFwiXVwiKX1BLmV4cG9ydHM9ZnVuY3Rpb24oQSxJLGcpe2lmKCFJKXJldHVybiBBO3ZhciBRO2lmKGcpUT1nKEkpO2Vsc2UgaWYoQi5pc1VSTFNlYXJjaFBhcmFtcyhJKSlRPUkudG9TdHJpbmcoKTtlbHNle3ZhciBFPVtdO0IuZm9yRWFjaChJLChmdW5jdGlvbihBLEkpe251bGwhPUEmJihCLmlzQXJyYXkoQSk/SSs9XCJbXVwiOkE9W0FdLEIuZm9yRWFjaChBLChmdW5jdGlvbihBKXtCLmlzRGF0ZShBKT9BPUEudG9JU09TdHJpbmcoKTpCLmlzT2JqZWN0KEEpJiYoQT1KU09OLnN0cmluZ2lmeShBKSksRS5wdXNoKEMoSSkrXCI9XCIrQyhBKSl9KSkpfSkpLFE9RS5qb2luKFwiJlwiKX1pZihRKXt2YXIgaT1BLmluZGV4T2YoXCIjXCIpOy0xIT09aSYmKEE9QS5zbGljZSgwLGkpKSxBKz0oLTE9PT1BLmluZGV4T2YoXCI/XCIpP1wiP1wiOlwiJlwiKStRfXJldHVybiBBfX0sMzAzOkE9PntcInVzZSBzdHJpY3RcIjtBLmV4cG9ydHM9ZnVuY3Rpb24oQSxJKXtyZXR1cm4gST9BLnJlcGxhY2UoL1xcLyskLyxcIlwiKStcIi9cIitJLnJlcGxhY2UoL15cXC8rLyxcIlwiKTpBfX0sMzcyOihBLEksZyk9PntcInVzZSBzdHJpY3RcIjt2YXIgQj1nKDg2Nyk7QS5leHBvcnRzPUIuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKT97d3JpdGU6ZnVuY3Rpb24oQSxJLGcsQyxRLEUpe3ZhciBpPVtdO2kucHVzaChBK1wiPVwiK2VuY29kZVVSSUNvbXBvbmVudChJKSksQi5pc051bWJlcihnKSYmaS5wdXNoKFwiZXhwaXJlcz1cIituZXcgRGF0ZShnKS50b0dNVFN0cmluZygpKSxCLmlzU3RyaW5nKEMpJiZpLnB1c2goXCJwYXRoPVwiK0MpLEIuaXNTdHJpbmcoUSkmJmkucHVzaChcImRvbWFpbj1cIitRKSwhMD09PUUmJmkucHVzaChcInNlY3VyZVwiKSxkb2N1bWVudC5jb29raWU9aS5qb2luKFwiOyBcIil9LHJlYWQ6ZnVuY3Rpb24oQSl7dmFyIEk9ZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoXCIoXnw7XFxcXHMqKShcIitBK1wiKT0oW147XSopXCIpKTtyZXR1cm4gST9kZWNvZGVVUklDb21wb25lbnQoSVszXSk6bnVsbH0scmVtb3ZlOmZ1bmN0aW9uKEEpe3RoaXMud3JpdGUoQSxcIlwiLERhdGUubm93KCktODY0ZTUpfX06e3dyaXRlOmZ1bmN0aW9uKCl7fSxyZWFkOmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LHJlbW92ZTpmdW5jdGlvbigpe319fSw3OTM6QT0+e1widXNlIHN0cmljdFwiO0EuZXhwb3J0cz1mdW5jdGlvbihBKXtyZXR1cm4vXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QoQSl9fSwyNjg6QT0+e1widXNlIHN0cmljdFwiO0EuZXhwb3J0cz1mdW5jdGlvbihBKXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgQSYmITA9PT1BLmlzQXhpb3NFcnJvcn19LDk4NTooQSxJLGcpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIEI9Zyg4NjcpO0EuZXhwb3J0cz1CLmlzU3RhbmRhcmRCcm93c2VyRW52KCk/ZnVuY3Rpb24oKXt2YXIgQSxJPS8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksZz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtmdW5jdGlvbiBDKEEpe3ZhciBCPUE7cmV0dXJuIEkmJihnLnNldEF0dHJpYnV0ZShcImhyZWZcIixCKSxCPWcuaHJlZiksZy5zZXRBdHRyaWJ1dGUoXCJocmVmXCIsQikse2hyZWY6Zy5ocmVmLHByb3RvY29sOmcucHJvdG9jb2w/Zy5wcm90b2NvbC5yZXBsYWNlKC86JC8sXCJcIik6XCJcIixob3N0OmcuaG9zdCxzZWFyY2g6Zy5zZWFyY2g/Zy5zZWFyY2gucmVwbGFjZSgvXlxcPy8sXCJcIik6XCJcIixoYXNoOmcuaGFzaD9nLmhhc2gucmVwbGFjZSgvXiMvLFwiXCIpOlwiXCIsaG9zdG5hbWU6Zy5ob3N0bmFtZSxwb3J0OmcucG9ydCxwYXRobmFtZTpcIi9cIj09PWcucGF0aG5hbWUuY2hhckF0KDApP2cucGF0aG5hbWU6XCIvXCIrZy5wYXRobmFtZX19cmV0dXJuIEE9Qyh3aW5kb3cubG9jYXRpb24uaHJlZiksZnVuY3Rpb24oSSl7dmFyIGc9Qi5pc1N0cmluZyhJKT9DKEkpOkk7cmV0dXJuIGcucHJvdG9jb2w9PT1BLnByb3RvY29sJiZnLmhvc3Q9PT1BLmhvc3R9fSgpOmZ1bmN0aW9uKCl7cmV0dXJuITB9fSwxNjooQSxJLGcpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIEI9Zyg4NjcpO0EuZXhwb3J0cz1mdW5jdGlvbihBLEkpe0IuZm9yRWFjaChBLChmdW5jdGlvbihnLEIpe0IhPT1JJiZCLnRvVXBwZXJDYXNlKCk9PT1JLnRvVXBwZXJDYXNlKCkmJihBW0ldPWcsZGVsZXRlIEFbQl0pfSkpfX0sMTA5OihBLEksZyk9PntcInVzZSBzdHJpY3RcIjt2YXIgQj1nKDg2NyksQz1bXCJhZ2VcIixcImF1dGhvcml6YXRpb25cIixcImNvbnRlbnQtbGVuZ3RoXCIsXCJjb250ZW50LXR5cGVcIixcImV0YWdcIixcImV4cGlyZXNcIixcImZyb21cIixcImhvc3RcIixcImlmLW1vZGlmaWVkLXNpbmNlXCIsXCJpZi11bm1vZGlmaWVkLXNpbmNlXCIsXCJsYXN0LW1vZGlmaWVkXCIsXCJsb2NhdGlvblwiLFwibWF4LWZvcndhcmRzXCIsXCJwcm94eS1hdXRob3JpemF0aW9uXCIsXCJyZWZlcmVyXCIsXCJyZXRyeS1hZnRlclwiLFwidXNlci1hZ2VudFwiXTtBLmV4cG9ydHM9ZnVuY3Rpb24oQSl7dmFyIEksZyxRLEU9e307cmV0dXJuIEE/KEIuZm9yRWFjaChBLnNwbGl0KFwiXFxuXCIpLChmdW5jdGlvbihBKXtpZihRPUEuaW5kZXhPZihcIjpcIiksST1CLnRyaW0oQS5zdWJzdHIoMCxRKSkudG9Mb3dlckNhc2UoKSxnPUIudHJpbShBLnN1YnN0cihRKzEpKSxJKXtpZihFW0ldJiZDLmluZGV4T2YoSSk+PTApcmV0dXJuO0VbSV09XCJzZXQtY29va2llXCI9PT1JPyhFW0ldP0VbSV06W10pLmNvbmNhdChbZ10pOkVbSV0/RVtJXStcIiwgXCIrZzpnfX0pKSxFKTpFfX0sNzEzOkE9PntcInVzZSBzdHJpY3RcIjtBLmV4cG9ydHM9ZnVuY3Rpb24oQSl7cmV0dXJuIGZ1bmN0aW9uKEkpe3JldHVybiBBLmFwcGx5KG51bGwsSSl9fX0sODc1OihBLEksZyk9PntcInVzZSBzdHJpY3RcIjt2YXIgQj1nKDI4OCkudmVyc2lvbixDPXt9O1tcIm9iamVjdFwiLFwiYm9vbGVhblwiLFwibnVtYmVyXCIsXCJmdW5jdGlvblwiLFwic3RyaW5nXCIsXCJzeW1ib2xcIl0uZm9yRWFjaCgoZnVuY3Rpb24oQSxJKXtDW0FdPWZ1bmN0aW9uKGcpe3JldHVybiB0eXBlb2YgZz09PUF8fFwiYVwiKyhJPDE/XCJuIFwiOlwiIFwiKStBfX0pKTt2YXIgUT17fTtDLnRyYW5zaXRpb25hbD1mdW5jdGlvbihBLEksZyl7ZnVuY3Rpb24gQyhBLEkpe3JldHVyblwiW0F4aW9zIHZcIitCK1wiXSBUcmFuc2l0aW9uYWwgb3B0aW9uICdcIitBK1wiJ1wiK0krKGc/XCIuIFwiK2c6XCJcIil9cmV0dXJuIGZ1bmN0aW9uKGcsQixFKXtpZighMT09PUEpdGhyb3cgbmV3IEVycm9yKEMoQixcIiBoYXMgYmVlbiByZW1vdmVkXCIrKEk/XCIgaW4gXCIrSTpcIlwiKSkpO3JldHVybiBJJiYhUVtCXSYmKFFbQl09ITAsY29uc29sZS53YXJuKEMoQixcIiBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHZcIitJK1wiIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlXCIpKSksIUF8fEEoZyxCLEUpfX0sQS5leHBvcnRzPXthc3NlcnRPcHRpb25zOmZ1bmN0aW9uKEEsSSxnKXtpZihcIm9iamVjdFwiIT10eXBlb2YgQSl0aHJvdyBuZXcgVHlwZUVycm9yKFwib3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdFwiKTtmb3IodmFyIEI9T2JqZWN0LmtleXMoQSksQz1CLmxlbmd0aDtDLS0gPjA7KXt2YXIgUT1CW0NdLEU9SVtRXTtpZihFKXt2YXIgaT1BW1FdLG89dm9pZCAwPT09aXx8RShpLFEsQSk7aWYoITAhPT1vKXRocm93IG5ldyBUeXBlRXJyb3IoXCJvcHRpb24gXCIrUStcIiBtdXN0IGJlIFwiK28pfWVsc2UgaWYoITAhPT1nKXRocm93IEVycm9yKFwiVW5rbm93biBvcHRpb24gXCIrUSl9fSx2YWxpZGF0b3JzOkN9fSw4Njc6KEEsSSxnKT0+e1widXNlIHN0cmljdFwiO3ZhciBCPWcoODQ5KSxDPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7ZnVuY3Rpb24gUShBKXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PT1DLmNhbGwoQSl9ZnVuY3Rpb24gRShBKXtyZXR1cm4gdm9pZCAwPT09QX1mdW5jdGlvbiBpKEEpe3JldHVybiBudWxsIT09QSYmXCJvYmplY3RcIj09dHlwZW9mIEF9ZnVuY3Rpb24gbyhBKXtpZihcIltvYmplY3QgT2JqZWN0XVwiIT09Qy5jYWxsKEEpKXJldHVybiExO3ZhciBJPU9iamVjdC5nZXRQcm90b3R5cGVPZihBKTtyZXR1cm4gbnVsbD09PUl8fEk9PT1PYmplY3QucHJvdG90eXBlfWZ1bmN0aW9uIEQoQSl7cmV0dXJuXCJbb2JqZWN0IEZ1bmN0aW9uXVwiPT09Qy5jYWxsKEEpfWZ1bmN0aW9uIGEoQSxJKXtpZihudWxsIT1BKWlmKFwib2JqZWN0XCIhPXR5cGVvZiBBJiYoQT1bQV0pLFEoQSkpZm9yKHZhciBnPTAsQj1BLmxlbmd0aDtnPEI7ZysrKUkuY2FsbChudWxsLEFbZ10sZyxBKTtlbHNlIGZvcih2YXIgQyBpbiBBKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChBLEMpJiZJLmNhbGwobnVsbCxBW0NdLEMsQSl9QS5leHBvcnRzPXtpc0FycmF5OlEsaXNBcnJheUJ1ZmZlcjpmdW5jdGlvbihBKXtyZXR1cm5cIltvYmplY3QgQXJyYXlCdWZmZXJdXCI9PT1DLmNhbGwoQSl9LGlzQnVmZmVyOmZ1bmN0aW9uKEEpe3JldHVybiBudWxsIT09QSYmIUUoQSkmJm51bGwhPT1BLmNvbnN0cnVjdG9yJiYhRShBLmNvbnN0cnVjdG9yKSYmXCJmdW5jdGlvblwiPT10eXBlb2YgQS5jb25zdHJ1Y3Rvci5pc0J1ZmZlciYmQS5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihBKX0saXNGb3JtRGF0YTpmdW5jdGlvbihBKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgRm9ybURhdGEmJkEgaW5zdGFuY2VvZiBGb3JtRGF0YX0saXNBcnJheUJ1ZmZlclZpZXc6ZnVuY3Rpb24oQSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEFycmF5QnVmZmVyJiZBcnJheUJ1ZmZlci5pc1ZpZXc/QXJyYXlCdWZmZXIuaXNWaWV3KEEpOkEmJkEuYnVmZmVyJiZBLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyfSxpc1N0cmluZzpmdW5jdGlvbihBKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgQX0saXNOdW1iZXI6ZnVuY3Rpb24oQSl7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIEF9LGlzT2JqZWN0OmksaXNQbGFpbk9iamVjdDpvLGlzVW5kZWZpbmVkOkUsaXNEYXRlOmZ1bmN0aW9uKEEpe3JldHVyblwiW29iamVjdCBEYXRlXVwiPT09Qy5jYWxsKEEpfSxpc0ZpbGU6ZnVuY3Rpb24oQSl7cmV0dXJuXCJbb2JqZWN0IEZpbGVdXCI9PT1DLmNhbGwoQSl9LGlzQmxvYjpmdW5jdGlvbihBKXtyZXR1cm5cIltvYmplY3QgQmxvYl1cIj09PUMuY2FsbChBKX0saXNGdW5jdGlvbjpELGlzU3RyZWFtOmZ1bmN0aW9uKEEpe3JldHVybiBpKEEpJiZEKEEucGlwZSl9LGlzVVJMU2VhcmNoUGFyYW1zOmZ1bmN0aW9uKEEpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBVUkxTZWFyY2hQYXJhbXMmJkEgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXN9LGlzU3RhbmRhcmRCcm93c2VyRW52OmZ1bmN0aW9uKCl7cmV0dXJuKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBuYXZpZ2F0b3J8fFwiUmVhY3ROYXRpdmVcIiE9PW5hdmlnYXRvci5wcm9kdWN0JiZcIk5hdGl2ZVNjcmlwdFwiIT09bmF2aWdhdG9yLnByb2R1Y3QmJlwiTlNcIiE9PW5hdmlnYXRvci5wcm9kdWN0KSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50fSxmb3JFYWNoOmEsbWVyZ2U6ZnVuY3Rpb24gQSgpe3ZhciBJPXt9O2Z1bmN0aW9uIGcoZyxCKXtvKElbQl0pJiZvKGcpP0lbQl09QShJW0JdLGcpOm8oZyk/SVtCXT1BKHt9LGcpOlEoZyk/SVtCXT1nLnNsaWNlKCk6SVtCXT1nfWZvcih2YXIgQj0wLEM9YXJndW1lbnRzLmxlbmd0aDtCPEM7QisrKWEoYXJndW1lbnRzW0JdLGcpO3JldHVybiBJfSxleHRlbmQ6ZnVuY3Rpb24oQSxJLGcpe3JldHVybiBhKEksKGZ1bmN0aW9uKEksQyl7QVtDXT1nJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBJP0IoSSxnKTpJfSkpLEF9LHRyaW06ZnVuY3Rpb24oQSl7cmV0dXJuIEEudHJpbT9BLnRyaW0oKTpBLnJlcGxhY2UoL15cXHMrfFxccyskL2csXCJcIil9LHN0cmlwQk9NOmZ1bmN0aW9uKEEpe3JldHVybiA2NTI3OT09PUEuY2hhckNvZGVBdCgwKSYmKEE9QS5zbGljZSgxKSksQX19fSw2NjY6QT0+e3ZhciBJPWZ1bmN0aW9uKEEpe1widXNlIHN0cmljdFwiO3ZhciBJLGc9T2JqZWN0LnByb3RvdHlwZSxCPWcuaGFzT3duUHJvcGVydHksQz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2w/U3ltYm9sOnt9LFE9Qy5pdGVyYXRvcnx8XCJAQGl0ZXJhdG9yXCIsRT1DLmFzeW5jSXRlcmF0b3J8fFwiQEBhc3luY0l0ZXJhdG9yXCIsaT1DLnRvU3RyaW5nVGFnfHxcIkBAdG9TdHJpbmdUYWdcIjtmdW5jdGlvbiBvKEEsSSxnKXtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KEEsSSx7dmFsdWU6ZyxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pLEFbSV19dHJ5e28oe30sXCJcIil9Y2F0Y2goQSl7bz1mdW5jdGlvbihBLEksZyl7cmV0dXJuIEFbSV09Z319ZnVuY3Rpb24gRChBLEksZyxCKXt2YXIgQz1JJiZJLnByb3RvdHlwZSBpbnN0YW5jZW9mIFI/STpSLFE9T2JqZWN0LmNyZWF0ZShDLnByb3RvdHlwZSksRT1uZXcgWShCfHxbXSk7cmV0dXJuIFEuX2ludm9rZT1mdW5jdGlvbihBLEksZyl7dmFyIEI9dztyZXR1cm4gZnVuY3Rpb24oQyxRKXtpZihCPT09Ryl0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO2lmKEI9PT1oKXtpZihcInRocm93XCI9PT1DKXRocm93IFE7cmV0dXJuIEooKX1mb3IoZy5tZXRob2Q9QyxnLmFyZz1ROzspe3ZhciBFPWcuZGVsZWdhdGU7aWYoRSl7dmFyIGk9ayhFLGcpO2lmKGkpe2lmKGk9PT1zKWNvbnRpbnVlO3JldHVybiBpfX1pZihcIm5leHRcIj09PWcubWV0aG9kKWcuc2VudD1nLl9zZW50PWcuYXJnO2Vsc2UgaWYoXCJ0aHJvd1wiPT09Zy5tZXRob2Qpe2lmKEI9PT13KXRocm93IEI9aCxnLmFyZztnLmRpc3BhdGNoRXhjZXB0aW9uKGcuYXJnKX1lbHNlXCJyZXR1cm5cIj09PWcubWV0aG9kJiZnLmFicnVwdChcInJldHVyblwiLGcuYXJnKTtCPUc7dmFyIG89YShBLEksZyk7aWYoXCJub3JtYWxcIj09PW8udHlwZSl7aWYoQj1nLmRvbmU/aDpGLG8uYXJnPT09cyljb250aW51ZTtyZXR1cm57dmFsdWU6by5hcmcsZG9uZTpnLmRvbmV9fVwidGhyb3dcIj09PW8udHlwZSYmKEI9aCxnLm1ldGhvZD1cInRocm93XCIsZy5hcmc9by5hcmcpfX19KEEsZyxFKSxRfWZ1bmN0aW9uIGEoQSxJLGcpe3RyeXtyZXR1cm57dHlwZTpcIm5vcm1hbFwiLGFyZzpBLmNhbGwoSSxnKX19Y2F0Y2goQSl7cmV0dXJue3R5cGU6XCJ0aHJvd1wiLGFyZzpBfX19QS53cmFwPUQ7dmFyIHc9XCJzdXNwZW5kZWRTdGFydFwiLEY9XCJzdXNwZW5kZWRZaWVsZFwiLEc9XCJleGVjdXRpbmdcIixoPVwiY29tcGxldGVkXCIscz17fTtmdW5jdGlvbiBSKCl7fWZ1bmN0aW9uIFUoKXt9ZnVuY3Rpb24geSgpe312YXIgdD17fTtvKHQsUSwoZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pKTt2YXIgUz1PYmplY3QuZ2V0UHJvdG90eXBlT2YsTT1TJiZTKFMoZShbXSkpKTtNJiZNIT09ZyYmQi5jYWxsKE0sUSkmJih0PU0pO3ZhciBuPXkucHJvdG90eXBlPVIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCk7ZnVuY3Rpb24gYyhBKXtbXCJuZXh0XCIsXCJ0aHJvd1wiLFwicmV0dXJuXCJdLmZvckVhY2goKGZ1bmN0aW9uKEkpe28oQSxJLChmdW5jdGlvbihBKXtyZXR1cm4gdGhpcy5faW52b2tlKEksQSl9KSl9KSl9ZnVuY3Rpb24gcihBLEkpe2Z1bmN0aW9uIGcoQyxRLEUsaSl7dmFyIG89YShBW0NdLEEsUSk7aWYoXCJ0aHJvd1wiIT09by50eXBlKXt2YXIgRD1vLmFyZyx3PUQudmFsdWU7cmV0dXJuIHcmJlwib2JqZWN0XCI9PXR5cGVvZiB3JiZCLmNhbGwodyxcIl9fYXdhaXRcIik/SS5yZXNvbHZlKHcuX19hd2FpdCkudGhlbigoZnVuY3Rpb24oQSl7ZyhcIm5leHRcIixBLEUsaSl9KSwoZnVuY3Rpb24oQSl7ZyhcInRocm93XCIsQSxFLGkpfSkpOkkucmVzb2x2ZSh3KS50aGVuKChmdW5jdGlvbihBKXtELnZhbHVlPUEsRShEKX0pLChmdW5jdGlvbihBKXtyZXR1cm4gZyhcInRocm93XCIsQSxFLGkpfSkpfWkoby5hcmcpfXZhciBDO3RoaXMuX2ludm9rZT1mdW5jdGlvbihBLEIpe2Z1bmN0aW9uIFEoKXtyZXR1cm4gbmV3IEkoKGZ1bmN0aW9uKEksQyl7ZyhBLEIsSSxDKX0pKX1yZXR1cm4gQz1DP0MudGhlbihRLFEpOlEoKX19ZnVuY3Rpb24gayhBLGcpe3ZhciBCPUEuaXRlcmF0b3JbZy5tZXRob2RdO2lmKEI9PT1JKXtpZihnLmRlbGVnYXRlPW51bGwsXCJ0aHJvd1wiPT09Zy5tZXRob2Qpe2lmKEEuaXRlcmF0b3IucmV0dXJuJiYoZy5tZXRob2Q9XCJyZXR1cm5cIixnLmFyZz1JLGsoQSxnKSxcInRocm93XCI9PT1nLm1ldGhvZCkpcmV0dXJuIHM7Zy5tZXRob2Q9XCJ0aHJvd1wiLGcuYXJnPW5ldyBUeXBlRXJyb3IoXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpfXJldHVybiBzfXZhciBDPWEoQixBLml0ZXJhdG9yLGcuYXJnKTtpZihcInRocm93XCI9PT1DLnR5cGUpcmV0dXJuIGcubWV0aG9kPVwidGhyb3dcIixnLmFyZz1DLmFyZyxnLmRlbGVnYXRlPW51bGwsczt2YXIgUT1DLmFyZztyZXR1cm4gUT9RLmRvbmU/KGdbQS5yZXN1bHROYW1lXT1RLnZhbHVlLGcubmV4dD1BLm5leHRMb2MsXCJyZXR1cm5cIiE9PWcubWV0aG9kJiYoZy5tZXRob2Q9XCJuZXh0XCIsZy5hcmc9SSksZy5kZWxlZ2F0ZT1udWxsLHMpOlE6KGcubWV0aG9kPVwidGhyb3dcIixnLmFyZz1uZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIiksZy5kZWxlZ2F0ZT1udWxsLHMpfWZ1bmN0aW9uIEsoQSl7dmFyIEk9e3RyeUxvYzpBWzBdfTsxIGluIEEmJihJLmNhdGNoTG9jPUFbMV0pLDIgaW4gQSYmKEkuZmluYWxseUxvYz1BWzJdLEkuYWZ0ZXJMb2M9QVszXSksdGhpcy50cnlFbnRyaWVzLnB1c2goSSl9ZnVuY3Rpb24gTihBKXt2YXIgST1BLmNvbXBsZXRpb258fHt9O0kudHlwZT1cIm5vcm1hbFwiLGRlbGV0ZSBJLmFyZyxBLmNvbXBsZXRpb249SX1mdW5jdGlvbiBZKEEpe3RoaXMudHJ5RW50cmllcz1be3RyeUxvYzpcInJvb3RcIn1dLEEuZm9yRWFjaChLLHRoaXMpLHRoaXMucmVzZXQoITApfWZ1bmN0aW9uIGUoQSl7aWYoQSl7dmFyIGc9QVtRXTtpZihnKXJldHVybiBnLmNhbGwoQSk7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgQS5uZXh0KXJldHVybiBBO2lmKCFpc05hTihBLmxlbmd0aCkpe3ZhciBDPS0xLEU9ZnVuY3Rpb24gZygpe2Zvcig7KytDPEEubGVuZ3RoOylpZihCLmNhbGwoQSxDKSlyZXR1cm4gZy52YWx1ZT1BW0NdLGcuZG9uZT0hMSxnO3JldHVybiBnLnZhbHVlPUksZy5kb25lPSEwLGd9O3JldHVybiBFLm5leHQ9RX19cmV0dXJue25leHQ6Sn19ZnVuY3Rpb24gSigpe3JldHVybnt2YWx1ZTpJLGRvbmU6ITB9fXJldHVybiBVLnByb3RvdHlwZT15LG8obixcImNvbnN0cnVjdG9yXCIseSksbyh5LFwiY29uc3RydWN0b3JcIixVKSxVLmRpc3BsYXlOYW1lPW8oeSxpLFwiR2VuZXJhdG9yRnVuY3Rpb25cIiksQS5pc0dlbmVyYXRvckZ1bmN0aW9uPWZ1bmN0aW9uKEEpe3ZhciBJPVwiZnVuY3Rpb25cIj09dHlwZW9mIEEmJkEuY29uc3RydWN0b3I7cmV0dXJuISFJJiYoST09PVV8fFwiR2VuZXJhdG9yRnVuY3Rpb25cIj09PShJLmRpc3BsYXlOYW1lfHxJLm5hbWUpKX0sQS5tYXJrPWZ1bmN0aW9uKEEpe3JldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKEEseSk6KEEuX19wcm90b19fPXksbyhBLGksXCJHZW5lcmF0b3JGdW5jdGlvblwiKSksQS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShuKSxBfSxBLmF3cmFwPWZ1bmN0aW9uKEEpe3JldHVybntfX2F3YWl0OkF9fSxjKHIucHJvdG90eXBlKSxvKHIucHJvdG90eXBlLEUsKGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSksQS5Bc3luY0l0ZXJhdG9yPXIsQS5hc3luYz1mdW5jdGlvbihJLGcsQixDLFEpe3ZvaWQgMD09PVEmJihRPVByb21pc2UpO3ZhciBFPW5ldyByKEQoSSxnLEIsQyksUSk7cmV0dXJuIEEuaXNHZW5lcmF0b3JGdW5jdGlvbihnKT9FOkUubmV4dCgpLnRoZW4oKGZ1bmN0aW9uKEEpe3JldHVybiBBLmRvbmU/QS52YWx1ZTpFLm5leHQoKX0pKX0sYyhuKSxvKG4saSxcIkdlbmVyYXRvclwiKSxvKG4sUSwoZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pKSxvKG4sXCJ0b1N0cmluZ1wiLChmdW5jdGlvbigpe3JldHVyblwiW29iamVjdCBHZW5lcmF0b3JdXCJ9KSksQS5rZXlzPWZ1bmN0aW9uKEEpe3ZhciBJPVtdO2Zvcih2YXIgZyBpbiBBKUkucHVzaChnKTtyZXR1cm4gSS5yZXZlcnNlKCksZnVuY3Rpb24gZygpe2Zvcig7SS5sZW5ndGg7KXt2YXIgQj1JLnBvcCgpO2lmKEIgaW4gQSlyZXR1cm4gZy52YWx1ZT1CLGcuZG9uZT0hMSxnfXJldHVybiBnLmRvbmU9ITAsZ319LEEudmFsdWVzPWUsWS5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlkscmVzZXQ6ZnVuY3Rpb24oQSl7aWYodGhpcy5wcmV2PTAsdGhpcy5uZXh0PTAsdGhpcy5zZW50PXRoaXMuX3NlbnQ9SSx0aGlzLmRvbmU9ITEsdGhpcy5kZWxlZ2F0ZT1udWxsLHRoaXMubWV0aG9kPVwibmV4dFwiLHRoaXMuYXJnPUksdGhpcy50cnlFbnRyaWVzLmZvckVhY2goTiksIUEpZm9yKHZhciBnIGluIHRoaXMpXCJ0XCI9PT1nLmNoYXJBdCgwKSYmQi5jYWxsKHRoaXMsZykmJiFpc05hTigrZy5zbGljZSgxKSkmJih0aGlzW2ddPUkpfSxzdG9wOmZ1bmN0aW9uKCl7dGhpcy5kb25lPSEwO3ZhciBBPXRoaXMudHJ5RW50cmllc1swXS5jb21wbGV0aW9uO2lmKFwidGhyb3dcIj09PUEudHlwZSl0aHJvdyBBLmFyZztyZXR1cm4gdGhpcy5ydmFsfSxkaXNwYXRjaEV4Y2VwdGlvbjpmdW5jdGlvbihBKXtpZih0aGlzLmRvbmUpdGhyb3cgQTt2YXIgZz10aGlzO2Z1bmN0aW9uIEMoQixDKXtyZXR1cm4gaS50eXBlPVwidGhyb3dcIixpLmFyZz1BLGcubmV4dD1CLEMmJihnLm1ldGhvZD1cIm5leHRcIixnLmFyZz1JKSwhIUN9Zm9yKHZhciBRPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTtRPj0wOy0tUSl7dmFyIEU9dGhpcy50cnlFbnRyaWVzW1FdLGk9RS5jb21wbGV0aW9uO2lmKFwicm9vdFwiPT09RS50cnlMb2MpcmV0dXJuIEMoXCJlbmRcIik7aWYoRS50cnlMb2M8PXRoaXMucHJldil7dmFyIG89Qi5jYWxsKEUsXCJjYXRjaExvY1wiKSxEPUIuY2FsbChFLFwiZmluYWxseUxvY1wiKTtpZihvJiZEKXtpZih0aGlzLnByZXY8RS5jYXRjaExvYylyZXR1cm4gQyhFLmNhdGNoTG9jLCEwKTtpZih0aGlzLnByZXY8RS5maW5hbGx5TG9jKXJldHVybiBDKEUuZmluYWxseUxvYyl9ZWxzZSBpZihvKXtpZih0aGlzLnByZXY8RS5jYXRjaExvYylyZXR1cm4gQyhFLmNhdGNoTG9jLCEwKX1lbHNle2lmKCFEKXRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO2lmKHRoaXMucHJldjxFLmZpbmFsbHlMb2MpcmV0dXJuIEMoRS5maW5hbGx5TG9jKX19fX0sYWJydXB0OmZ1bmN0aW9uKEEsSSl7Zm9yKHZhciBnPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTtnPj0wOy0tZyl7dmFyIEM9dGhpcy50cnlFbnRyaWVzW2ddO2lmKEMudHJ5TG9jPD10aGlzLnByZXYmJkIuY2FsbChDLFwiZmluYWxseUxvY1wiKSYmdGhpcy5wcmV2PEMuZmluYWxseUxvYyl7dmFyIFE9QzticmVha319USYmKFwiYnJlYWtcIj09PUF8fFwiY29udGludWVcIj09PUEpJiZRLnRyeUxvYzw9SSYmSTw9US5maW5hbGx5TG9jJiYoUT1udWxsKTt2YXIgRT1RP1EuY29tcGxldGlvbjp7fTtyZXR1cm4gRS50eXBlPUEsRS5hcmc9SSxRPyh0aGlzLm1ldGhvZD1cIm5leHRcIix0aGlzLm5leHQ9US5maW5hbGx5TG9jLHMpOnRoaXMuY29tcGxldGUoRSl9LGNvbXBsZXRlOmZ1bmN0aW9uKEEsSSl7aWYoXCJ0aHJvd1wiPT09QS50eXBlKXRocm93IEEuYXJnO3JldHVyblwiYnJlYWtcIj09PUEudHlwZXx8XCJjb250aW51ZVwiPT09QS50eXBlP3RoaXMubmV4dD1BLmFyZzpcInJldHVyblwiPT09QS50eXBlPyh0aGlzLnJ2YWw9dGhpcy5hcmc9QS5hcmcsdGhpcy5tZXRob2Q9XCJyZXR1cm5cIix0aGlzLm5leHQ9XCJlbmRcIik6XCJub3JtYWxcIj09PUEudHlwZSYmSSYmKHRoaXMubmV4dD1JKSxzfSxmaW5pc2g6ZnVuY3Rpb24oQSl7Zm9yKHZhciBJPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTtJPj0wOy0tSSl7dmFyIGc9dGhpcy50cnlFbnRyaWVzW0ldO2lmKGcuZmluYWxseUxvYz09PUEpcmV0dXJuIHRoaXMuY29tcGxldGUoZy5jb21wbGV0aW9uLGcuYWZ0ZXJMb2MpLE4oZyksc319LGNhdGNoOmZ1bmN0aW9uKEEpe2Zvcih2YXIgST10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7ST49MDstLUkpe3ZhciBnPXRoaXMudHJ5RW50cmllc1tJXTtpZihnLnRyeUxvYz09PUEpe3ZhciBCPWcuY29tcGxldGlvbjtpZihcInRocm93XCI9PT1CLnR5cGUpe3ZhciBDPUIuYXJnO04oZyl9cmV0dXJuIEN9fXRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKX0sZGVsZWdhdGVZaWVsZDpmdW5jdGlvbihBLGcsQil7cmV0dXJuIHRoaXMuZGVsZWdhdGU9e2l0ZXJhdG9yOmUoQSkscmVzdWx0TmFtZTpnLG5leHRMb2M6Qn0sXCJuZXh0XCI9PT10aGlzLm1ldGhvZCYmKHRoaXMuYXJnPUkpLHN9fSxBfShBLmV4cG9ydHMpO3RyeXtyZWdlbmVyYXRvclJ1bnRpbWU9SX1jYXRjaChBKXtcIm9iamVjdFwiPT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzLnJlZ2VuZXJhdG9yUnVudGltZT1JOkZ1bmN0aW9uKFwiclwiLFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShJKX19LDY1NDooKT0+e30sMjMxOigpPT57fSw3MDM6KCk9Pnt9fSxJPXt9O2Z1bmN0aW9uIGcoQil7dmFyIEM9SVtCXTtpZih2b2lkIDAhPT1DKXJldHVybiBDLmV4cG9ydHM7dmFyIFE9SVtCXT17ZXhwb3J0czp7fX07cmV0dXJuIEFbQl0oUSxRLmV4cG9ydHMsZyksUS5leHBvcnRzfWcubj1BPT57dmFyIEk9QSYmQS5fX2VzTW9kdWxlPygpPT5BLmRlZmF1bHQ6KCk9PkE7cmV0dXJuIGcuZChJLHthOkl9KSxJfSxnLmQ9KEEsSSk9Pntmb3IodmFyIEIgaW4gSSlnLm8oSSxCKSYmIWcubyhBLEIpJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoQSxCLHtlbnVtZXJhYmxlOiEwLGdldDpJW0JdfSl9LGcuZz1mdW5jdGlvbigpe2lmKFwib2JqZWN0XCI9PXR5cGVvZiBnbG9iYWxUaGlzKXJldHVybiBnbG9iYWxUaGlzO3RyeXtyZXR1cm4gdGhpc3x8bmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKX1jYXRjaChBKXtpZihcIm9iamVjdFwiPT10eXBlb2Ygd2luZG93KXJldHVybiB3aW5kb3d9fSgpLGcubz0oQSxJKT0+T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKEEsSSk7dmFyIEI9e307cmV0dXJuKCgpPT57XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gQShBLEksZyxCLEMsUSxFKXt0cnl7dmFyIGk9QVtRXShFKSxvPWkudmFsdWV9Y2F0Y2goQSl7cmV0dXJuIHZvaWQgZyhBKX1pLmRvbmU/SShvKTpQcm9taXNlLnJlc29sdmUobykudGhlbihCLEMpfWZ1bmN0aW9uIEkoSSl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGc9dGhpcyxCPWFyZ3VtZW50cztyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKEMsUSl7dmFyIEU9SS5hcHBseShnLEIpO2Z1bmN0aW9uIGkoSSl7QShFLEMsUSxpLG8sXCJuZXh0XCIsSSl9ZnVuY3Rpb24gbyhJKXtBKEUsQyxRLGksbyxcInRocm93XCIsSSl9aSh2b2lkIDApfSkpfX1mdW5jdGlvbiBDKEEsSSl7aWYoIShBIGluc3RhbmNlb2YgSSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1mdW5jdGlvbiBRKEEsSSl7Zm9yKHZhciBnPTA7ZzxJLmxlbmd0aDtnKyspe3ZhciBCPUlbZ107Qi5lbnVtZXJhYmxlPUIuZW51bWVyYWJsZXx8ITEsQi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gQiYmKEIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBLEIua2V5LEIpfX1mdW5jdGlvbiBFKEEsSSxnKXtyZXR1cm4gSSYmUShBLnByb3RvdHlwZSxJKSxnJiZRKEEsZyksQX1nLmQoQix7ZGVmYXVsdDooKT0+bn0pO3ZhciBpPWcoNzU3KSxvPWcubihpKTtmdW5jdGlvbiBEKEEpe3JldHVybiBEPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihBKXtyZXR1cm4gdHlwZW9mIEF9OmZ1bmN0aW9uKEEpe3JldHVybiBBJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJkEuY29uc3RydWN0b3I9PT1TeW1ib2wmJkEhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIEF9LEQoQSl9dmFyIGEsdz0oYT0oYT1cInVuZGVmaW5lZFwiIT10eXBlb2YgZG9jdW1lbnQmJmRvY3VtZW50LmN1cnJlbnRTY3JpcHQ/ZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM6dm9pZCAwKXx8XCIvaW5kZXguanNcIixmdW5jdGlvbihBKXtBPXZvaWQgMCE9PShBPUF8fHt9KT9BOnt9O3ZhciBJLEI9e307Zm9yKEkgaW4gQSlBLmhhc093blByb3BlcnR5KEkpJiYoQltJXT1BW0ldKTt2YXIgQz1bXSxRPVwiLi90aGlzLnByb2dyYW1cIixFPWZ1bmN0aW9uKEEsSSl7dGhyb3cgSX0saT0hMSxvPSExLHc9ITEsRj0hMTtpPVwib2JqZWN0XCI9PT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIHdpbmRvdz9cInVuZGVmaW5lZFwiOkQod2luZG93KSksbz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpbXBvcnRTY3JpcHRzLHc9XCJvYmplY3RcIj09PShcInVuZGVmaW5lZFwiPT10eXBlb2YgcHJvY2Vzcz9cInVuZGVmaW5lZFwiOkQocHJvY2VzcykpJiZcIm9iamVjdFwiPT09RChwcm9jZXNzLnZlcnNpb25zKSYmXCJzdHJpbmdcIj09dHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZSxGPSFpJiYhdyYmIW87dmFyIEcsaCxzLFIsVT1cIlwiO2Z1bmN0aW9uIHkoSSl7cmV0dXJuIEEubG9jYXRlRmlsZT9BLmxvY2F0ZUZpbGUoSSxVKTpVK0l9dz8oVT1vP2coNzAzKS5kaXJuYW1lKFUpK1wiL1wiOlwiLy9cIixHPWZ1bmN0aW9uKEEsSSl7dmFyIEI9amcoQSk7cmV0dXJuIEI/ST9COkIudG9TdHJpbmcoKTooc3x8KHM9ZygyMzEpKSxSfHwoUj1nKDcwMykpLEE9Ui5ub3JtYWxpemUoQSkscy5yZWFkRmlsZVN5bmMoQSxJP251bGw6XCJ1dGY4XCIpKX0saD1mdW5jdGlvbihBKXt2YXIgST1HKEEsITApO3JldHVybiBJLmJ1ZmZlcnx8KEk9bmV3IFVpbnQ4QXJyYXkoSSkpLEgoSS5idWZmZXIpLEl9LHByb2Nlc3MuYXJndi5sZW5ndGg+MSYmKFE9cHJvY2Vzcy5hcmd2WzFdLnJlcGxhY2UoL1xcXFwvZyxcIi9cIikpLEM9cHJvY2Vzcy5hcmd2LnNsaWNlKDIpLHByb2Nlc3Mub24oXCJ1bmNhdWdodEV4Y2VwdGlvblwiLChmdW5jdGlvbihBKXtpZighKEEgaW5zdGFuY2VvZiBOQikpdGhyb3cgQX0pKSxwcm9jZXNzLm9uKFwidW5oYW5kbGVkUmVqZWN0aW9uXCIsSkEpLEU9ZnVuY3Rpb24oQSl7cHJvY2Vzcy5leGl0KEEpfSxBLmluc3BlY3Q9ZnVuY3Rpb24oKXtyZXR1cm5cIltFbXNjcmlwdGVuIE1vZHVsZSBvYmplY3RdXCJ9KTpGPyhcInVuZGVmaW5lZFwiIT10eXBlb2YgcmVhZCYmKEc9ZnVuY3Rpb24oQSl7dmFyIEk9amcoQSk7cmV0dXJuIEk/VmcoSSk6cmVhZChBKX0pLGg9ZnVuY3Rpb24oQSl7dmFyIEk7cmV0dXJuKEk9amcoQSkpP0k6XCJmdW5jdGlvblwiPT10eXBlb2YgcmVhZGJ1ZmZlcj9uZXcgVWludDhBcnJheShyZWFkYnVmZmVyKEEpKTooSChcIm9iamVjdFwiPT09RChJPXJlYWQoQSxcImJpbmFyeVwiKSkpLEkpfSxcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2NyaXB0QXJncz9DPXNjcmlwdEFyZ3M6dm9pZCAwIT09YXJndW1lbnRzJiYoQz1hcmd1bWVudHMpLFwiZnVuY3Rpb25cIj09dHlwZW9mIHF1aXQmJihFPWZ1bmN0aW9uKEEpe3F1aXQoQSl9KSxcInVuZGVmaW5lZFwiIT10eXBlb2YgcHJpbnQmJihcInVuZGVmaW5lZFwiPT10eXBlb2YgY29uc29sZSYmKGNvbnNvbGU9e30pLGNvbnNvbGUubG9nPXByaW50LGNvbnNvbGUud2Fybj1jb25zb2xlLmVycm9yPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBwcmludEVycj9wcmludEVycjpwcmludCkpOihpfHxvKSYmKG8/VT1zZWxmLmxvY2F0aW9uLmhyZWY6ZG9jdW1lbnQuY3VycmVudFNjcmlwdCYmKFU9ZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmMpLGEmJihVPWEpLFU9MCE9PVUuaW5kZXhPZihcImJsb2I6XCIpP1Uuc3Vic3RyKDAsVS5sYXN0SW5kZXhPZihcIi9cIikrMSk6XCJcIixHPWZ1bmN0aW9uKEEpe3RyeXt2YXIgST1uZXcgWE1MSHR0cFJlcXVlc3Q7cmV0dXJuIEkub3BlbihcIkdFVFwiLEEsITEpLEkuc2VuZChudWxsKSxJLnJlc3BvbnNlVGV4dH1jYXRjaChJKXt2YXIgZz1qZyhBKTtpZihnKXJldHVybiBWZyhnKTt0aHJvdyBJfX0sbyYmKGg9ZnVuY3Rpb24oQSl7dHJ5e3ZhciBJPW5ldyBYTUxIdHRwUmVxdWVzdDtyZXR1cm4gSS5vcGVuKFwiR0VUXCIsQSwhMSksSS5yZXNwb25zZVR5cGU9XCJhcnJheWJ1ZmZlclwiLEkuc2VuZChudWxsKSxuZXcgVWludDhBcnJheShJLnJlc3BvbnNlKX1jYXRjaChJKXt2YXIgZz1qZyhBKTtpZihnKXJldHVybiBnO3Rocm93IEl9fSkpO3ZhciB0PUEucHJpbnR8fGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksUz1BLnByaW50RXJyfHxjb25zb2xlLndhcm4uYmluZChjb25zb2xlKTtmb3IoSSBpbiBCKUIuaGFzT3duUHJvcGVydHkoSSkmJihBW0ldPUJbSV0pO2Z1bmN0aW9uIE0oQSl7dmFyIEk9QUFbaUE+PjJdLGc9SStBKzE1Ji0xNjtyZXR1cm4gZz5TZygpJiZKQSgpLEFBW2lBPj4yXT1nLEl9Qj1udWxsLEEuYXJndW1lbnRzJiYoQz1BLmFyZ3VtZW50cyksQS50aGlzUHJvZ3JhbSYmKFE9QS50aGlzUHJvZ3JhbSksQS5xdWl0JiYoRT1BLnF1aXQpO3ZhciBuLGMscixrPXtcImY2NC1yZW1cIjpmdW5jdGlvbihBLEkpe3JldHVybiBBJUl9LGRlYnVnZ2VyOmZ1bmN0aW9uKCl7fX0sSz0obmV3IEFycmF5KDApLDApLE49ZnVuY3Rpb24oQSl7Sz1BfSxZPWZ1bmN0aW9uKCl7cmV0dXJuIEt9O0Eud2FzbUJpbmFyeSYmKG49QS53YXNtQmluYXJ5KSxBLm5vRXhpdFJ1bnRpbWUmJihjPUEubm9FeGl0UnVudGltZSksXCJvYmplY3RcIiE9PShcInVuZGVmaW5lZFwiPT10eXBlb2YgV2ViQXNzZW1ibHk/XCJ1bmRlZmluZWRcIjpEKFdlYkFzc2VtYmx5KSkmJlMoXCJubyBuYXRpdmUgd2FzbSBzdXBwb3J0IGRldGVjdGVkXCIpO3ZhciBlPW5ldyBXZWJBc3NlbWJseS5UYWJsZSh7aW5pdGlhbDo4NzgsbWF4aW11bTo4NzgsZWxlbWVudDpcImFueWZ1bmNcIn0pLEo9ITE7ZnVuY3Rpb24gSChBLEkpe0F8fEpBKFwiQXNzZXJ0aW9uIGZhaWxlZDogXCIrSSl9ZnVuY3Rpb24gTChBKXtyZXR1cm4gaEE/UkIoQSk6TShBKX12YXIgcT1cInVuZGVmaW5lZFwiIT10eXBlb2YgVGV4dERlY29kZXI/bmV3IFRleHREZWNvZGVyKFwidXRmOFwiKTp2b2lkIDA7ZnVuY3Rpb24gZChBLEksZyl7Zm9yKHZhciBCPUkrZyxDPUk7QVtDXSYmIShDPj1CKTspKytDO2lmKEMtST4xNiYmQS5zdWJhcnJheSYmcSlyZXR1cm4gcS5kZWNvZGUoQS5zdWJhcnJheShJLEMpKTtmb3IodmFyIFE9XCJcIjtJPEM7KXt2YXIgRT1BW0krK107aWYoMTI4JkUpe3ZhciBpPTYzJkFbSSsrXTtpZigxOTIhPSgyMjQmRSkpe3ZhciBvPTYzJkFbSSsrXTtpZigoRT0yMjQ9PSgyNDAmRSk/KDE1JkUpPDwxMnxpPDw2fG86KDcmRSk8PDE4fGk8PDEyfG88PDZ8NjMmQVtJKytdKTw2NTUzNilRKz1TdHJpbmcuZnJvbUNoYXJDb2RlKEUpO2Vsc2V7dmFyIEQ9RS02NTUzNjtRKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2fEQ+PjEwLDU2MzIwfDEwMjMmRCl9fWVsc2UgUSs9U3RyaW5nLmZyb21DaGFyQ29kZSgoMzEmRSk8PDZ8aSl9ZWxzZSBRKz1TdHJpbmcuZnJvbUNoYXJDb2RlKEUpfXJldHVybiBRfWZ1bmN0aW9uIGYoQSxJKXtyZXR1cm4gQT9kKHosQSxJKTpcIlwifWZ1bmN0aW9uIGwoQSxJLGcsQil7aWYoIShCPjApKXJldHVybiAwO2Zvcih2YXIgQz1nLFE9ZytCLTEsRT0wO0U8QS5sZW5ndGg7KytFKXt2YXIgaT1BLmNoYXJDb2RlQXQoRSk7aWYoaT49NTUyOTYmJmk8PTU3MzQzJiYoaT02NTUzNisoKDEwMjMmaSk8PDEwKXwxMDIzJkEuY2hhckNvZGVBdCgrK0UpKSxpPD0xMjcpe2lmKGc+PVEpYnJlYWs7SVtnKytdPWl9ZWxzZSBpZihpPD0yMDQ3KXtpZihnKzE+PVEpYnJlYWs7SVtnKytdPTE5MnxpPj42LElbZysrXT0xMjh8NjMmaX1lbHNlIGlmKGk8PTY1NTM1KXtpZihnKzI+PVEpYnJlYWs7SVtnKytdPTIyNHxpPj4xMixJW2crK109MTI4fGk+PjYmNjMsSVtnKytdPTEyOHw2MyZpfWVsc2V7aWYoZyszPj1RKWJyZWFrO0lbZysrXT0yNDB8aT4+MTgsSVtnKytdPTEyOHxpPj4xMiY2MyxJW2crK109MTI4fGk+PjYmNjMsSVtnKytdPTEyOHw2MyZpfX1yZXR1cm4gSVtnXT0wLGctQ31mdW5jdGlvbiB1KEEsSSxnKXtyZXR1cm4gbChBLHosSSxnKX1mdW5jdGlvbiBXKEEpe2Zvcih2YXIgST0wLGc9MDtnPEEubGVuZ3RoOysrZyl7dmFyIEI9QS5jaGFyQ29kZUF0KGcpO0I+PTU1Mjk2JiZCPD01NzM0MyYmKEI9NjU1MzYrKCgxMDIzJkIpPDwxMCl8MTAyMyZBLmNoYXJDb2RlQXQoKytnKSksQjw9MTI3PysrSTpJKz1CPD0yMDQ3PzI6Qjw9NjU1MzU/Mzo0fXJldHVybiBJfXZhciBwPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBUZXh0RGVjb2Rlcj9uZXcgVGV4dERlY29kZXIoXCJ1dGYtMTZsZVwiKTp2b2lkIDA7ZnVuY3Rpb24gWihBKXtmb3IodmFyIEk9QSxnPUk+PjE7X1tnXTspKytnO2lmKChJPWc8PDEpLUE+MzImJnApcmV0dXJuIHAuZGVjb2RlKHouc3ViYXJyYXkoQSxJKSk7Zm9yKHZhciBCPTAsQz1cIlwiOzspe3ZhciBRPV9bQSsyKkI+PjFdO2lmKDA9PVEpcmV0dXJuIEM7KytCLEMrPVN0cmluZy5mcm9tQ2hhckNvZGUoUSl9fWZ1bmN0aW9uIGIoQSxJLGcpe2lmKHZvaWQgMD09PWcmJihnPTIxNDc0ODM2NDcpLGc8MilyZXR1cm4gMDtmb3IodmFyIEI9SSxDPShnLT0yKTwyKkEubGVuZ3RoP2cvMjpBLmxlbmd0aCxRPTA7UTxDOysrUSl7dmFyIEU9QS5jaGFyQ29kZUF0KFEpO19bST4+MV09RSxJKz0yfXJldHVybiBfW0k+PjFdPTAsSS1CfWZ1bmN0aW9uIHgoQSl7cmV0dXJuIDIqQS5sZW5ndGh9ZnVuY3Rpb24gbShBKXtmb3IodmFyIEk9MCxnPVwiXCI7Oyl7dmFyIEI9QUFbQSs0Kkk+PjJdO2lmKDA9PUIpcmV0dXJuIGc7aWYoKytJLEI+PTY1NTM2KXt2YXIgQz1CLTY1NTM2O2crPVN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTZ8Qz4+MTAsNTYzMjB8MTAyMyZDKX1lbHNlIGcrPVN0cmluZy5mcm9tQ2hhckNvZGUoQil9fWZ1bmN0aW9uIFgoQSxJLGcpe2lmKHZvaWQgMD09PWcmJihnPTIxNDc0ODM2NDcpLGc8NClyZXR1cm4gMDtmb3IodmFyIEI9SSxDPUIrZy00LFE9MDtRPEEubGVuZ3RoOysrUSl7dmFyIEU9QS5jaGFyQ29kZUF0KFEpO2lmKEU+PTU1Mjk2JiZFPD01NzM0MyYmKEU9NjU1MzYrKCgxMDIzJkUpPDwxMCl8MTAyMyZBLmNoYXJDb2RlQXQoKytRKSksQUFbST4+Ml09RSwoSSs9NCkrND5DKWJyZWFrfXJldHVybiBBQVtJPj4yXT0wLEktQn1mdW5jdGlvbiBWKEEpe2Zvcih2YXIgST0wLGc9MDtnPEEubGVuZ3RoOysrZyl7dmFyIEI9QS5jaGFyQ29kZUF0KGcpO0I+PTU1Mjk2JiZCPD01NzM0MyYmKytnLEkrPTR9cmV0dXJuIEl9ZnVuY3Rpb24gTyhBKXt2YXIgST1XKEEpKzEsZz1SQihJKTtyZXR1cm4gZyYmbChBLHYsZyxJKSxnfWZ1bmN0aW9uIFQoQSxJKXt2LnNldChBLEkpfWZ1bmN0aW9uIGooQSxJLGcpe2Zvcih2YXIgQj0wO0I8QS5sZW5ndGg7KytCKXZbSSsrPj4wXT1BLmNoYXJDb2RlQXQoQik7Z3x8KHZbST4+MF09MCl9dmFyIFAsdix6LF8sJCxBQSxJQSxnQSxCQSxDQT02NTUzNjtmdW5jdGlvbiBRQShJKXtQPUksQS5IRUFQOD12PW5ldyBJbnQ4QXJyYXkoSSksQS5IRUFQMTY9Xz1uZXcgSW50MTZBcnJheShJKSxBLkhFQVAzMj1BQT1uZXcgSW50MzJBcnJheShJKSxBLkhFQVBVOD16PW5ldyBVaW50OEFycmF5KEkpLEEuSEVBUFUxNj0kPW5ldyBVaW50MTZBcnJheShJKSxBLkhFQVBVMzI9SUE9bmV3IFVpbnQzMkFycmF5KEkpLEEuSEVBUEYzMj1nQT1uZXcgRmxvYXQzMkFycmF5KEkpLEEuSEVBUEY2ND1CQT1uZXcgRmxvYXQ2NEFycmF5KEkpfXZhciBFQT01MzA0MTc2LGlBPTYxMTA0LG9BPUEuVE9UQUxfTUVNT1JZfHwyNjg0MzU0NTY7ZnVuY3Rpb24gREEoSSl7Zm9yKDtJLmxlbmd0aD4wOyl7dmFyIGc9SS5zaGlmdCgpO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGcpe3ZhciBCPWcuZnVuYztcIm51bWJlclwiPT10eXBlb2YgQj92b2lkIDA9PT1nLmFyZz9BLmR5bkNhbGxfdihCKTpBLmR5bkNhbGxfdmkoQixnLmFyZyk6Qih2b2lkIDA9PT1nLmFyZz9udWxsOmcuYXJnKX1lbHNlIGcoKX19KHI9QS53YXNtTWVtb3J5P0Eud2FzbU1lbW9yeTpuZXcgV2ViQXNzZW1ibHkuTWVtb3J5KHtpbml0aWFsOm9BL0NBLG1heGltdW06b0EvQ0F9KSkmJihQPXIuYnVmZmVyKSxvQT1QLmJ5dGVMZW5ndGgsUUEoUCksQUFbaUE+PjJdPUVBO3ZhciBhQT1bXSx3QT1bXSxGQT1bXSxHQT1bXSxoQT0hMTtmdW5jdGlvbiBzQSgpe2lmKEEucHJlUnVuKWZvcihcImZ1bmN0aW9uXCI9PXR5cGVvZiBBLnByZVJ1biYmKEEucHJlUnVuPVtBLnByZVJ1bl0pO0EucHJlUnVuLmxlbmd0aDspdEEoQS5wcmVSdW4uc2hpZnQoKSk7REEoYUEpfWZ1bmN0aW9uIFJBKCl7aEE9ITAsQS5ub0ZTSW5pdHx8aUkuaW5pdC5pbml0aWFsaXplZHx8aUkuaW5pdCgpLFFJLmluaXQoKSxEQSh3QSl9ZnVuY3Rpb24gVUEoKXtpSS5pZ25vcmVQZXJtaXNzaW9ucz0hMSxEQShGQSl9ZnVuY3Rpb24geUEoKXtpZihBLnBvc3RSdW4pZm9yKFwiZnVuY3Rpb25cIj09dHlwZW9mIEEucG9zdFJ1biYmKEEucG9zdFJ1bj1bQS5wb3N0UnVuXSk7QS5wb3N0UnVuLmxlbmd0aDspU0EoQS5wb3N0UnVuLnNoaWZ0KCkpO0RBKEdBKX1mdW5jdGlvbiB0QShBKXthQS51bnNoaWZ0KEEpfWZ1bmN0aW9uIFNBKEEpe0dBLnVuc2hpZnQoQSl9dmFyIE1BPU1hdGguYWJzLG5BPU1hdGguY2VpbCxjQT1NYXRoLmZsb29yLHJBPU1hdGgubWluLGtBPTAsS0E9bnVsbCxOQT1udWxsO2Z1bmN0aW9uIFlBKEkpe2tBKyssQS5tb25pdG9yUnVuRGVwZW5kZW5jaWVzJiZBLm1vbml0b3JSdW5EZXBlbmRlbmNpZXMoa0EpfWZ1bmN0aW9uIGVBKEkpe2lmKGtBLS0sQS5tb25pdG9yUnVuRGVwZW5kZW5jaWVzJiZBLm1vbml0b3JSdW5EZXBlbmRlbmNpZXMoa0EpLDA9PWtBJiYobnVsbCE9PUtBJiYoY2xlYXJJbnRlcnZhbChLQSksS0E9bnVsbCksTkEpKXt2YXIgZz1OQTtOQT1udWxsLGcoKX19ZnVuY3Rpb24gSkEoSSl7dGhyb3cgQS5vbkFib3J0JiZBLm9uQWJvcnQoSSksdChJKz1cIlwiKSxTKEkpLEo9ITAsST1cImFib3J0KFwiK0krXCIpLiBCdWlsZCB3aXRoIC1zIEFTU0VSVElPTlM9MSBmb3IgbW9yZSBpbmZvLlwiLG5ldyBXZWJBc3NlbWJseS5SdW50aW1lRXJyb3IoSSl9QS5wcmVsb2FkZWRJbWFnZXM9e30sQS5wcmVsb2FkZWRBdWRpb3M9e307dmFyIEhBPVwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LFwiO2Z1bmN0aW9uIExBKEEpe3JldHVybiBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGg/QS5zdGFydHNXaXRoKEhBKTowPT09QS5pbmRleE9mKEhBKX12YXIgcUEsZEEsZkE9XCJkYXRhOmFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTtiYXNlNjQsQUdGemJRRUFBQUFCandoellBRi9BWDlnQVg4QVlBSi9md0YvWUFKL2Z3QmdBMzkvZndGL1lBVi9mMzkvZndCZ0EzOS9md0JnQkg5L2YzOEFZQVYvZjM5L2Z3Ri9ZQVIvZjM5L0FYOWdCbjkvZjM5L2Z3Ri9ZQUFBWUFaL2YzOS9mMzhBWUFkL2YzOS9mMzkvQUdBSWYzOS9mMzkvZjM4QmYyQUhmMzkvZjM5L2Z3Ri9ZQUFCZjJBQmZRRjlZQUYvQVh4Z0JYOS9mMzk4QVg5Z0EzOStmd0YrWUFWL2YzOS9mZ0YvWUFoL2YzOS9mMzkvZndCZ0NuOS9mMzkvZjM5L2YzOEFZQU4vZjMwQVlBTi9mM3dBWUFKL2ZBQmdCbjkvZjM5L2ZBRi9ZQU4vZjM4QmZXQUNmWDBCZldBQ2YzOEJmR0FEZjM5L0FYeGdBbng4QVh4Z0NYOS9mMzkvZjM5L2Z3Ri9ZQVovZkg5L2YzOEJmMkFFZjM5L2Z3RitZQUY4QVh4Z0JYOS9mbjkvQUdBQ2YzMEFZQXAvZjM5L2YzOS9mMzkvQVg5Z0RIOS9mMzkvZjM5L2YzOS9md0YvWUFWL2ZYMS9md0YvWUFGOUFYOWdBWDhCZldBR2YzOS9mMzkvQVh4Z0FueC9BWHhnRDM5L2YzOS9mMzkvZjM5L2YzOS9md0JnRFg5L2YzOS9mWDE5ZlgxOWZYMEFZQVIvZjM5OUFHQUZmMzk5Zlg4QVlBVi9mWDE5ZlFCZ0JuOThmSDkvZndCZ0MzOS9mMzkvZjM5L2YzOS9BWDlnRVg5L2YzOS9mMzkvZjMxOWZYMTlmWDE5QVg5Z0JuOS9mWDEvZndGL1lBSitmd0YvWUFGOEFYOWdCSDkvZjM0QmZtQUNmMzhCZldBRWYzOS9md0Y5WUFOL2ZYMEJmV0FCZkFGOVlBbC9mMzkvZjM5L2YzOEFZQkYvZjM5L2YzOS9mMzk5ZlgxOWZYMTlmUUJnQm45L2YzOS9mUUJnQ0g5L2YzOS9mWDE5QUdBSmYzOS9mMzk5ZlgxOUFHQUZmMzkvZlgwQVlBZC9mMzk5ZlgxL0FHQUVmMzkvZkFCZ0EzOS9mZ0JnQm45L2ZYOTlmd0JnQW45K0FHQURmMzUvQUdBRGYzMTlBR0FFZjMxOWZ3QmdCbjk5ZlgxOWZ3QmdCSDk4Zkg4QVlBeC9mMzkvZjM5L2YzOS9mSDhCZjJBT2YzOS9mMzkvZjM5L2YzeC9mMzhCZjJBVGYzOS9mMzkvZjM5L2ZIOS9mMzkvZjM5L2Z3Ri9ZQXgvZjM5L2YzOS9mMzEvZjM4QmYyQWlmMzkvZjM5L2YzOThmSHg4Zkh4OGZIeDhmSHg4Zkh4OGZIeDhmSHg4Zkh4OGZ3Ri9ZQWQvZjM5L2YzOThBWDlnQjM5L2YzOThmMzhCZjJBRGYzOTlBWDlnQlg5L2ZYMS9BWDlnQjM5L2ZIOS9mMzhCZjJBUGYzOThmSHg4Zkh4OGZIeDhmSHg4QVg5Z0JIOStmMzhCZjJBQ2YzMEJmMkFGZjMxOWZYMEJmMkFDZjN3QmYyQURmbjkvQVg5Z0FuMS9BWDlnQW54L0FYOWdBWDhCZm1BQ2YzOEJmbUFDZm40QmZtQUZmMzkvZjM4QmZXQUhmMzkvZjM5L2Z3RjlZQWQvZjM5L2YzOTlBWDFnQm45L2YzOS9mUUY5WUFaL2YzOS9mWDBCZldBRWYzOS9mUUY5WUFOL2YzMEJmV0FGZjMxOWYzOEJmV0FDZlg4QmZXQURmWDE5QVgxZ0JIMTlmWDBCZldBRmYzOS9mMzhCZkdBRWYzOThmd0Y4WUFOOGZIOEJmR0FEZkh4OEFYeGdCbng4Zkh4OGZBRjhBcHNFUEFObGJuWUJZUUFMQTJWdWRnRmlBQUVEWlc1MkFXTUFBUU5sYm5ZQlpBQUJBMlZ1ZGdGbEFBWURaVzUyQVdZQUFBTmxibllCWndBREEyVnVkZ0ZvQUJBRFpXNTJBV2tBQmdObGJuWUJhZ0FNQTJWdWRnRnJBQVVEWlc1MkFXd0FFQU5sYm5ZQmJRQUJBMlZ1ZGdGdUFBQURaVzUyQVc4QUFRTmxibllCY0FBREEyVnVkZ0Z4QUFJRFpXNTJBWElBQlFObGJuWUJjd0FHQTJWdWRnRjBBQUFEWlc1MkFYVUFBZ05sYm5ZQmRnQURBMlZ1ZGdGM0FBWURaVzUyQVhnQUdRTmxibllCZVFBQUEyVnVkZ0Y2QUFJRFpXNTJBVUVBQVFObGJuWUJRZ0FIQTJWdWRnRkRBQVlEWlc1MkFVUUFDQWhoYzIweWQyRnpiUWRtTmpRdGNtVnRBQ0FEWlc1MkFVVUFDQU5sYm5ZQlJnQUpBMlZ1ZGdGSEFBa0RaVzUyQVVnQUFBTmxibllCU1FBa0EyVnVkZ0ZLQUFBRFpXNTJBVXNBQkFObGJuWUJUQUFFQTJWdWRnRk5BQkFEWlc1MkFVNEFVZ05sYm5ZQlR3QVBBMlZ1ZGdGUUFCTURaVzUyQVZFQVdBTmxibllCVWdBQ0EyVnVkZ0ZUQUFNRFpXNTJBVlFBQXdObGJuWUJWUUFGQTJWdWRnRldBQWtEWlc1MkFWY0FDUU5sYm5ZQldBQUNBMlZ1ZGdGWkFBSURaVzUyQVZvQUFnTmxibllCWHdBQ0EyVnVkZ0VrQUFFRFpXNTJERjlmZEdGaWJHVmZZbUZ6WlFOL0FBWm5iRzlpWVd3RFRtRk9BM3dBQm1kc2IySmhiQWhKYm1acGJtbDBlUU44QUFObGJuWUdiV1Z0YjNKNUFnR0FJSUFnQTJWdWRnVjBZV0pzWlFGd0FlNEc3Z1lEeUF2R0N3SUJBZ0lEQVFjQ0FRTUNBQ29BQkFFQkFnRURBd1E4QWdJQ0FBQUFBQUVEQXdCcUt3WVFBZ0VEQUFrQUFRUUdDZ2tDRVFFQkFpa0RBUUFBQmpnQUJRVUlCd01DQXdnRUJnQnRCRWdFQXh3QUF3RUVBQUlER2l3RFBUMHFDUmdCQXdvSUNBZ0pBQjBDTFFnY0F3NE9DaWtHQmdrR1ZBUUpBd2NDQWdBQ0FBUURNQVlZQUNvR0FEY0NBd0lHQWdJQUFnRUhCdzRHQXdZbkFTY0FFU0J3QmdBSkNRSmxaQU1CSFFZR01RTWRBellDQkFJRENBWUNCZ01DQXcwREFBWUFZZ3dDQndaT0Jnb2RPZ01BQWdNREFnTnBCd01DRlJNQ0F3Y0FBQTBOQkE4UEFRTUJBUUlEQVFVREh5TUZDUWdFQkFBQUFBSVFBQVFEQkFNQUJnWUJBd01GQVFBaEJ3SkRBeXdBQndNQ0FRTUJBUUlXYkRFQkF3RURCd01CQVFNSEFRTUhBUXdIREFVREFBTUlBUUFvQlI0QUtBVUJBUUVCY2d4eEJ3WUdFUkVSQUFBQlhnaGZJd2tHQUFBSEFqa0NBQUVBU1MwQ0JnQXRJQ0JoSHpsR0JBSUVBQUVBRUFRQkFRTUFBUWNDQVFJQUFRa0JBZ0VBQXdNWkJoZ0JBUU5aRHdZTUFBRUJBd0VCQmdBREFUb25Bd01yVlVBUEJ3NEhCd0VIQXdFQkFRTURBd0VEYndJREJrOEFEQUFERUFNREF3RUNBUUVCQ2dFR0FSRVJCQU1EQXdNREFRTUhBa3dEQmdFQVZqWU5IQW9KQnlVTkJob1VEeHNKQXdVV0JoWUdCZ1VJQVFFQkFRZ0JEZ0FFTGhjdUZ6UUdOQU1EQVF3QkFRVU1EQU1KQlF3TUFBMEpEUVFLQ1NNSkNTTWNIeDhFQ2dZQ0FnQUJBUUVCQXdFQUJ5VUVBd0VFQVFFQkFRRUJBVE1MQndFQkJCMGtKQWtHQWdZR0FBQmdDQUlCQkFSckJBQUVCZ1lMQXhBSkFnSUJCQUkzWFFJRUF5STRBd1FDSUN4dUJBZ0NCQVFDQVFJQUFnUUJDUlFFRUJRRUFBQUFBZ0VHQVFNQkF3RUFBQUFIQUFBQ0FBQUJBUUVJQUFnQkNnb0pDUUVFQndjSEJ3Y0JBd2NIQVFjQkF3Y05Cd2dOQVFVRkJRVUZCUVVGQUFVSEJ3Y0hCdzBCRFEwTkF3Y0hCd01CQXdFQkFRRUJBUUVCQVFBQkFnSUNBZ0lCQWdJQkFnQUJBUU1CQVFFQ0FBRUJBZ0lDQUFJQ0FnRUJBUUlEQXdBQkF3VUZCUVVGQlFVREJRVUZCUVVGQlFVRkJRZ0ZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRRUJEd0ptWXd3RkNBUURBZ0FEQ1FNQkFRSUVCQWtFQkFFR0FnSUFIZ0VCQ0FFR0FBTUFBd0FERWdzbUFBTUFBd0FERWhvU0dnc1FVQXNCQUFBQ0FnSUVBQUFHQ0FBQ0FnUUVBZ1FMQUFBQ0FnSUNBQUFFQ3dzU0FRRUdBd0lCQXdJQkF3OERBd1lHQmp3eUJnTTFOVDhIRUFFR0hFb0hRbHNCTHdjSE1nRUJBd01DQmdZSEJnTUJBd1lEQXdjSEF5OE1BZ2dEQUFBQUFBQUVBQUFDQkFJQ0FnSUNBZ0lDQWo1SElRY0JhQUloQWc1UkNUc0VDZ2tFQ1FNREF3SUhBd01CQXdNREF3TUdCZ1lEQmcwREFRSUJBUUVaQ0FFREF3WUdEd2NHQXdNRkR3TUZCZ2NDQVFjQ0F3TURBUUVCQVFFQ0FRRUJBUW9HQ2tzUlFRTUZBUWNBQVFNQkF3TUhBd01EQndFREFRY0ZCUUlCQVFJREF3Tm5EUTBOS3dNR0FnSUVEd05jQXdZV0EwUURBUU1HQXdFREFRTURBd01CQWdNREF3RUJBZ1lEQVFFREF3Y0RBd01DQ0FFSUNBZ0lDZ29EQVFFREF3TURBZ1FDQWdBQ0FRUXBBUW9DRncwb0F3QUFPd0FCQ0FnQURRZ0JEeGdaQUNZTEFDSVFIaEphRmcwTUJRY3dSUUVoRGdBUFV3b2JDQWtFVndJQUJoOGVKQU1BQWdZR0JnTUNDQVlCQXdFRENBUUpBZ1FDQVFRQ0NRa0pCQU1EQXdBQUFRTURBd0FBQVFJSUJBa0NCQUlFQWdFQkFRb0tCQWdPRGdFQUNBQUlEZzRJQ2dvRUNBNE9EQXdLR3dvYkZ3WVBEeGNHRHdnUERBOFBCd1VGQlFNTUJ3VUZCUVVGQlFNTEN3c0FBQUFBQUFBQURnb0tDZ29LQndVRkJRd0hCUVVGQlFVQkJRc0xDd0FBQUFRQUFBQUFEZ29LQ2dvS0J3Z1RFeFVJRlFnSUNBZ1RFeFVJRlFnSUNBZ0VDQWdDQ0FnSUNBb0tDZ29LQ2dvU0Nnb0lDQWdJQ0FnSUNBRUJCZ0VBQ2dvS0Nnb0tDZ29LQkFjSUJBRUhDQUVDQUFBREFnQUFBQU1DQkFNQ0JBTk5DQVFFQUFRRUFBUUJBUkFBQ3dzTEN3c3pDd3NMQ3dzTEN3c0xDd3NMQ3hBUUVBc0hCUXdFQVFBSEJRd0VCd1VNQkFzSENCQUFCaGNFZndGQkFBdC9BVUVBQzM4QlFRQUxmd0ZCOE40REN3ZVRBaTRDWVdFQW5RY0NZbUVBNVFzQ1kyRUErd1FDWkdFQTBRc0NaV0VBNEFRQ1ptRUE2UXNDWjJFQW9BVUNhR0VBMGdzQ2FXRUE1d3NDYW1FQTVnc0NhMkVBNkFzQ2JHRUFPQUp0WVFCRUFtNWhBTjRKQW05aEFOd0pBbkJoQU5zSkFuRmhBTmtKQW5KaEFOZ0pBbk5oQU5jSkFuUmhBTllKQW5WaEFOVUpBblpoQU5RSkFuZGhBTk1KQW5oaEFOSUpBbmxoQU5FSkFucGhBTkFKQWtGaEFNNEpBa0poQU0wSkFrTmhBTGtKQWtSaEFMY0pBa1ZoQU13SkFrWmhBSzREQWtkaEFLOERBa2hoQUxFREFrbGhBTEFEQWtwaEFNc0pBa3RoQU1vSkFreGhBTWtKQWsxaEFNZ0pBazVoQU1jSkFrOWhBTVlKQWxCaEFNVUpBbEZoQUxZSkFsSmhBUHdMQWxOaEFKZ0pBbFJoQVBzTENhRUxBUUFqQUF2dUJzTUorZ2I0QnU4R3dnbmpCc0VKL1FaWXhnaWpCWC92QzM5LzBRVE5DMzkvMFFUS0M4b0V5Z1MrQzcwTHVRdTRDN2NFN0FyckN1b0s2UXJuQ3VZSzVRcTNCTTRLelFyTUNzc0t5Z3JKQ3NnS2tRS1JBbitSQXBFQ2Y1QUNrQUova0FLUUFuOS9mNkFFbWdwL21BcURDb0lLL1FuOENkOEMzd0xmQW45L29BU3VCZnNGUktRRm1nZVpCNVFIa3dlTEI0Z0hod2VDQjRFSDlnYjBCdklHN1FickJ1a0c0Z2FmQm84R2h3Wi90Z1cxQmJNRnNnVllXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFl3QW1KQlhxVkNLWUhvd2ViQXBzQ213S2JBc01Md0F1N0M3Y0xqUXFMQ29rSzlBbnhDZThKaFFxbUJaZ0hsd2VXQjVVSGtBZU5CNHdIaFFlRUI0TUgyQWJnQnNrR25BYVlCcGNHbGdhVUJwTUdrZ2FHQm9RR2d3YUJCb0FHL3dYK0JmMEZlbnA2ZW5wNmVucDZlbnA2ZW5wNmVtU2lCWjhGZ2dYM0MrMEwxQVRPQzh3TDFBVExDOGtMeEF2QkM3SUxyd3VoQktFRWpBcUtDb2NLK0FuekNmQUo3UW5EQlpzSGtRZVBCNDRIaGdmYUJ0MEd0UUd2QXBVRlpHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pLMEJpQXIzQ2ZZSjlRbnVDZFFHd1FYQUJhMEJyUUd0QWEwQnJRR3RBYTBCakFML0N2NEs5Z3IxQ293Q2pBS01BcGdCdFF1eEM0UUxnd3VCQy93Syt3cjZDdmdLOUFyaEFxSUttd3FaQ29ZSzdBbmhBcDRLNFFLVUNyd0Z1Z1dZQVpnQm1BR1lBWmdCbUFHWUFaZ0JtQUdPQktvS3FBcU9CR2F1QzYwTHJBdXJDOFlFeGdTcUM2a0xxQXVuQzZZTG1BdVhDNVVMbEF1OEJMd0Vrd3VTQzVFTGtBdVBDL0lLOFFyd0N1OEs3Z3JVQ3RNSzBnclJDdEFLcVFxbkNyOEZ2Z1ZtWm1abVptWm1abVptWm1abVptWm1abVptWm1abVptWm1abWFOQkxZS3RRcXpDckVLcmdxdENvMEV5Z0h0Q3M4S3BBcWpDcDBLbkFxZkJKOEVsZ3FWQ3NvQnlnSEtBY29CeWdHTEFvSUxnQXY1Q3ZjS2l3S0xBb3NDakFTaEJaNEZqQVMrQ2ZnTFJzY0MyUWpHQXRnSTdRUEhDR05lbGdoZVhxY0hYbDZrQjE1alhtTmpYdU1FNGdUaUJGNWVuUUxQQzlZRTdRTFFCT3dDbWdMckFzNEV6UVNhQXVzQ3pnVE5CSmtDNmdMTUJNc0VtUUxxQXN3RXl3VHNBdTBDN0FMdEFtTmV0Z3RqWG1OZVkxNWpYbU5lWTE1alhxNEVyUVN1QkswRVkxNWpYbU5lWTE1alhtTmVZMTVqWG1OZVkxNWpYbDZlQkpjS25BU1FDcHNFamdxYUJJUUttUVQrQ1Y1ZVhsNWVzZ21uQllBSHhnYWdCbU9hQnBrR2pRYW5BNHdHZ2daamlRYUlCdmtGK0FWanlRWFBCZFlGWStjRnpRVmp2UVc1QmJjRnJRV3JCYWtGcEF1aUMyTTRSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSb3NFK3diNUJvc0V2UW54QnFJQm5BS2NBc1VMd2d1L0M3b0xqd0dQQVk4QnFnU3VBYTRCandHUEFZOEJxZ1N1QWE0Qmp3R1BBWThCcVFTdUFhNEJqd0dQQVk4QnFRU3VBYTRCbkFLY0FvRUtnQXIvQ2ZzSitnbjVDYUVHOXdiMUJ2TUc3Z2JzQnVvR3JnT2RCc29GMEFYckJlOEZyZ0tzQmFvRmlBV2lBYUlCb2dHaUFhSUJvZ0dpQWFJQnV3bXZBN29Kc1FPS0JLZ0ZzQU9LQk1rQjlBdndDK29MMGdUU0JMUUxzQXM5MHdYUkJlVUY1QVhqQmVJRjRRWHVCZTBGN0FYT0Jjd0Z5d1hJQmNjRnhnWEZCY1FGeVFISkFja0J5UUhKQVhiMUMvRUw2d3VqQnFRR3BRYW1CcWNHcUFhcUJxc0dyQWF0QnE0R3J3YXdCckVHc2dhekJyVUd0Z2EzQnJnR3VRYTZCcnNHdkFhOUJyNEd2d2JBQnNFR3dnYkRCcUlHeEFiRkJ1QUYzZ1hkQmR3RjJ3WGFCZGtGMkFYWEJYWjJkbloyZG5aMmRuWjJkbloyZG5aMjNBTDJDL0lMN0F1bUNxVUszQUxjQW9rRTFRWFNCZVlGNmdYcEJlZ0ZpUVNJQk5NRTB3U0lCQXFxaXg3R0N3MEFJQUFnQVNBQkVHQVFud2tMeVEwQkNYOGdBRVVFUUE4TFFielJBeWdDQUNFRUlBQkJlR29pQXlBQVFYeHFLQUlBSWdKQmVIRWlBR29oQlNBQ1FRRnhCSDhnQXdVQ2Z5QURLQUlBSVFFZ0FrRURjVVVFUUE4TElBTWdBV3NpQXlBRVNRUkFEd3NnQUNBQmFpRUFJQU5Cd05FREtBSUFSZ1JBSUFNZ0JTZ0NCQ0lCUVFOeFFRTkhEUUVhUWJUUkF5QUFOZ0lBSUFVZ0FVRitjVFlDQkNBRElBQkJBWEkyQWdRZ0FDQURhaUFBTmdJQUR3c2dBVUVEZGlFRUlBRkJnQUpKQkVBZ0F5Z0NDQ0lCSUFNb0Fnd2lBa1lFUUVHczBRTkJyTkVES0FJQVFRRWdCSFJCZjNOeE5nSUFCU0FCSUFJMkFnd2dBaUFCTmdJSUN5QUREQUVMSUFNb0FoZ2hCeUFESUFNb0Fnd2lBVVlFUUFKQUlBTkJFR29pQWtFRWFpSUVLQUlBSWdFRVFDQUVJUUlGSUFJb0FnQWlBVVVFUUVFQUlRRU1BZ3NMQTBBQ1FDQUJRUlJxSWdRb0FnQWlCa1VFUUNBQlFSQnFJZ1FvQWdBaUJrVU5BUXNnQkNFQ0lBWWhBUXdCQ3dzZ0FrRUFOZ0lBQ3dVZ0F5Z0NDQ0lDSUFFMkFnd2dBU0FDTmdJSUN5QUhCSDhnQXlBREtBSWNJZ0pCQW5SQjNOTURhaUlFS0FJQVJnUkFJQVFnQVRZQ0FDQUJSUVJBUWJEUkEwR3cwUU1vQWdCQkFTQUNkRUYvYzNFMkFnQWdBd3dEQ3dVZ0IwRVFhaUlDSUFkQkZHb2dBeUFDS0FJQVJoc2dBVFlDQUNBRElBRkZEUUlhQ3lBQklBYzJBaGdnQXlnQ0VDSUNCRUFnQVNBQ05nSVFJQUlnQVRZQ0dBc2dBeWdDRkNJQ0JFQWdBU0FDTmdJVUlBSWdBVFlDR0FzZ0F3VWdBd3NMQ3lJSElBVlBCRUFQQ3lBRktBSUVJZ2hCQVhGRkJFQVBDeUFJUVFKeEJFQWdCU0FJUVg1eE5nSUVJQU1nQUVFQmNqWUNCQ0FBSUFkcUlBQTJBZ0FnQUNFQ0JTQUZRY1RSQXlnQ0FFWUVRRUc0MFFNZ0FFRzQwUU1vQWdCcUlnQTJBZ0JCeE5FRElBTTJBZ0FnQXlBQVFRRnlOZ0lFUWNEUkF5Z0NBQ0FEUndSQUR3dEJ3TkVEUVFBMkFnQkJ0TkVEUVFBMkFnQVBDMEhBMFFNb0FnQWdCVVlFUUVHMDBRTWdBRUcwMFFNb0FnQnFJZ0EyQWdCQndORURJQWMyQWdBZ0F5QUFRUUZ5TmdJRUlBQWdCMm9nQURZQ0FBOExJQWhCQTNZaEJDQUlRWUFDU1FSQUlBVW9BZ2dpQVNBRktBSU1JZ0pHQkVCQnJORURRYXpSQXlnQ0FFRUJJQVIwUVg5emNUWUNBQVVnQVNBQ05nSU1JQUlnQVRZQ0NBc0ZBa0FnQlNnQ0dDRUpJQVVvQWd3aUFTQUZSZ1JBQWtBZ0JVRVFhaUlDUVFScUlnUW9BZ0FpQVFSQUlBUWhBZ1VnQWlnQ0FDSUJSUVJBUVFBaEFRd0NDd3NEUUFKQUlBRkJGR29pQkNnQ0FDSUdSUVJBSUFGQkVHb2lCQ2dDQUNJR1JRMEJDeUFFSVFJZ0JpRUJEQUVMQ3lBQ1FRQTJBZ0FMQlNBRktBSUlJZ0lnQVRZQ0RDQUJJQUkyQWdnTElBa0VRQ0FGS0FJY0lnSkJBblJCM05NRGFpSUVLQUlBSUFWR0JFQWdCQ0FCTmdJQUlBRkZCRUJCc05FRFFiRFJBeWdDQUVFQklBSjBRWDl6Y1RZQ0FBd0RDd1VnQ1VFUWFpSUNJQWxCRkdvZ0FpZ0NBQ0FGUmhzZ0FUWUNBQ0FCUlEwQ0N5QUJJQWsyQWhnZ0JTZ0NFQ0lDQkVBZ0FTQUNOZ0lRSUFJZ0FUWUNHQXNnQlNnQ0ZDSUNCRUFnQVNBQ05nSVVJQUlnQVRZQ0dBc0xDd3NnQXlBQUlBaEJlSEZxSWdKQkFYSTJBZ1FnQWlBSGFpQUNOZ0lBSUFOQndORURLQUlBUmdSQVFiVFJBeUFDTmdJQUR3c0xJQUpCQTNZaEFTQUNRWUFDU1FSQUlBRkJBM1JCMU5FRGFpRUFRYXpSQXlnQ0FDSUNRUUVnQVhRaUFYRUVmeUFBUVFocUlnSW9BZ0FGUWF6UkF5QUJJQUp5TmdJQUlBQkJDR29oQWlBQUN5RUJJQUlnQXpZQ0FDQUJJQU0yQWd3Z0F5QUJOZ0lJSUFNZ0FEWUNEQThMSUFKQkNIWWlBQVIvSUFKQi8vLy9CMHNFZjBFZkJTQUFJQUJCZ1A0L2FrRVFka0VJY1NJQmRDSUVRWURnSDJwQkVIWkJCSEVoQUVFT0lBQWdBWElnQkNBQWRDSUFRWUNBRDJwQkVIWkJBbkVpQVhKcklBQWdBWFJCRDNacUlnQkJBWFFnQWlBQVFRZHFka0VCY1hJTEJVRUFDeUlCUVFKMFFkelRBMm9oQUNBRElBRTJBaHdnQTBFQU5nSVVJQU5CQURZQ0VFR3cwUU1vQWdBaUJFRUJJQUYwSWdaeEJFQUNRQ0FDSUFBb0FnQWlBQ2dDQkVGNGNVWUVRQ0FBSVFFRkFrQWdBa0VBUVJrZ0FVRUJkbXNnQVVFZlJodDBJUVFEUUNBQVFSQnFJQVJCSDNaQkFuUnFJZ1lvQWdBaUFRUkFJQVJCQVhRaEJDQUNJQUVvQWdSQmVIRkdEUUlnQVNFQURBRUxDeUFHSUFNMkFnQWdBeUFBTmdJWUlBTWdBellDRENBRElBTTJBZ2dNQWdzTElBRW9BZ2dpQUNBRE5nSU1JQUVnQXpZQ0NDQURJQUEyQWdnZ0F5QUJOZ0lNSUFOQkFEWUNHQXNGUWJEUkF5QUVJQVp5TmdJQUlBQWdBellDQUNBRElBQTJBaGdnQXlBRE5nSU1JQU1nQXpZQ0NBdEJ6TkVEUWN6UkF5Z0NBRUYvYWlJQU5nSUFJQUFFUUE4TFFmVFVBeUVBQTBBZ0FDZ0NBQ0lEUVFocUlRQWdBdzBBQzBITTBRTkJmellDQUFza0FDQUJCSDhnQUVHQWdJQ0FlRVlnQVVGL1JuRUVmMEVBQlNBQUlBRnRDd1ZCQUFzTElBRUJmeUFBS0FJQUlRSWdBUkNsQ3lFQklBSW9BZ2dnQVVFQ2RHb29BZ0FMREFBZ0FDQUJRUnhxRU9zSkN6a0JBWDhnQUNnQ0FDSUFLQUlFSVFFZ0FDQUJRWDlxTmdJRUlBRkZCRUFnQUNnQ0FDZ0NDQ0VCSUFBZ0FVSC9BWEZCckFOcUVRRUFDd3M4QUNNR0lRQWpCa0VRYWlRR0lBSkJBRWRCMElVQktBSUFJQUZNY1FSQUlBSXNBQUFFUUNBQUlBTTJBZ0FnQVNBQ0lBQVEyZ2tMQ3lBQUpBWUxpZ0lCQjM4akJpRURJd1pCRUdva0JpQURRUXhxSVFJZ0F5QUFFSmdDSUFNc0FBQUVRQ0FDSUFBZ0FDZ0NBRUYwYWlnQ0FHb1FPeUFDUWJqT0F4QTZJUWNnQWhBOElBQWdBQ2dDQUVGMGFpZ0NBR29pQlNnQ0dDRUlRWDhnQlNnQ1RCQkJCRUFnQWlBRkVEc2dBa0dBemdNUU9pSUVLQUlBS0FJY0lRWWdCRUVnSUFaQlAzRkJpZ0ZxRVFJQUlRUWdBaEE4SUFVZ0JFRVlkRUVZZFNJRU5nSk1CU0FGS0FKTUlRUUxJQWNvQWdBb0FoQWhCaUFESUFnMkFnZ2dBaUFES0FJSU5nSUFJQWNnQWlBRklBUkIvd0Z4SUFFZ0JrRWZjVUdpQW1vUkNBQkZCRUFnQUNBQUtBSUFRWFJxS0FJQWFpSUJJQUVvQWhCQkJYSVE3Z0VMQ3lBREVKY0NJQU1rQmlBQUM0VUJBUU4vSXdZaEFTTUdRUkJxSkFZZ0FDQUFLQUlBUVhScUtBSUFhaWdDR0FSQUlBRWdBQkNZQWlBQkxBQUFCRUFnQUNBQUtBSUFRWFJxS0FJQWFpZ0NHQ0lDS0FJQUtBSVlJUU1nQWlBRFFmOEFjVUVJYWhFQUFFRi9SZ1JBSUFBZ0FDZ0NBRUYwYWlnQ0FHb2lBQ0FBS0FJUVFRRnlFTzRCQ3dzZ0FSQ1hBZ3NnQVNRR0M2Z0JBUVIvSXdZaEFpTUdRUkJxSkFZZ0FpQUFFSmdDSUFJc0FBQUVRQUpBSUFBZ0FDZ0NBRUYwYWlnQ0FHb29BaGdpQXlFRUlBTUVRQ0FFS0FJWUlnVWdCQ2dDSEVZRWZ5QURLQUlBS0FJMElRTWdCQ0FCRUVJZ0EwRS9jVUdLQVdvUkFnQUZJQVFnQlVFQmFqWUNHQ0FGSUFFNkFBQWdBUkJDQzBGL0VFRkZEUUVMSUFBZ0FDZ0NBRUYwYWlnQ0FHb2lBQ0FBS0FJUVFRRnlFTzRCQ3dzZ0FoQ1hBaUFDSkFZTEJ3QWdBQ0FCUmdzSUFDQUFRZjhCY1FzNEFDQUFJQUJjQkg5QmdJQ0FnSGdGSUFCREFBQUFUMkFFZjBHQWdJQ0FlQVVnQUVNQUFBRFBYd1IvUVlDQWdJQjRCU0FBcUFzTEN3dTNOUUVNZnlNR0lRb2pCa0VRYWlRR0lBQkI5UUZKQkVCQnJORURLQUlBSWdWQkVDQUFRUXRxUVhoeElBQkJDMGtiSWdKQkEzWWlBSFlpQVVFRGNRUkFJQUZCQVhGQkFYTWdBR29pQWtFRGRFSFUwUU5xSWdBb0FnZ2lBMEVJYWlJRUtBSUFJUUVnQUNBQlJnUkFRYXpSQTBFQklBSjBRWDl6SUFWeE5nSUFCU0FCSUFBMkFnd2dBQ0FCTmdJSUN5QURJQUpCQTNRaUFFRURjallDQkNBQUlBTnFJZ0FnQUNnQ0JFRUJjallDQkNBS0pBWWdCQThMSUFKQnRORURLQUlBSWdsTEJIOGdBUVJBUVFJZ0FIUWlBMEVBSUFOcmNpQUJJQUIwY1NJQVFRQWdBR3R4UVg5cUlnQkJESFpCRUhFaUFTQUFJQUYySWdCQkJYWkJDSEVpQVhJZ0FDQUJkaUlBUVFKMlFRUnhJZ0Z5SUFBZ0FYWWlBRUVCZGtFQ2NTSUJjaUFBSUFGMklnQkJBWFpCQVhFaUFYSWdBQ0FCZG1vaUJFRURkRUhVMFFOcUlnQW9BZ2dpQVVFSWFpSUdLQUlBSVFNZ0FDQURSZ1JBUWF6UkEwRUJJQVIwUVg5eklBVnhJZ0EyQWdBRklBTWdBRFlDRENBQUlBTTJBZ2dnQlNFQUN5QUJJQUpCQTNJMkFnUWdBU0FDYWlJRklBUkJBM1FpQXlBQ2F5SUVRUUZ5TmdJRUlBRWdBMm9nQkRZQ0FDQUpCRUJCd05FREtBSUFJUUVnQ1VFRGRpSUNRUU4wUWRUUkEyb2hBMEVCSUFKMElnSWdBSEVFZnlBRFFRaHFJZ0lvQWdBRlFhelJBeUFBSUFKeU5nSUFJQU5CQ0dvaEFpQURDeUVBSUFJZ0FUWUNBQ0FBSUFFMkFnd2dBU0FBTmdJSUlBRWdBellDREF0QnRORURJQVEyQWdCQndORURJQVUyQWdBZ0NpUUdJQVlQQzBHdzBRTW9BZ0FpQ3dSL1FRQWdDMnNnQzNGQmYyb2lBRUVNZGtFUWNTSUJJQUFnQVhZaUFFRUZka0VJY1NJQmNpQUFJQUYySWdCQkFuWkJCSEVpQVhJZ0FDQUJkaUlBUVFGMlFRSnhJZ0Z5SUFBZ0FYWWlBRUVCZGtFQmNTSUJjaUFBSUFGMmFrRUNkRUhjMHdOcUtBSUFJZ1FoQUNBRUtBSUVRWGh4SUFKcklRZ0RRQUpBSUFBb0FoQWlBUVJBSUFFaEFBVWdBQ2dDRkNJQVJRMEJDeUFBSUFRZ0FDZ0NCRUY0Y1NBQ2F5SUJJQWhKSWdNYklRUWdBU0FJSUFNYklRZ01BUXNMSUFJZ0JHb2lEQ0FFU3dSL0lBUW9BaGdoQnlBRUlBUW9BZ3dpQUVZRVFBSkFJQVJCRkdvaUFTZ0NBQ0lBUlFSQUlBUkJFR29pQVNnQ0FDSUFSUVJBUVFBaEFBd0NDd3NEUUFKQUlBQkJGR29pQXlnQ0FDSUdSUVJBSUFCQkVHb2lBeWdDQUNJR1JRMEJDeUFESVFFZ0JpRUFEQUVMQ3lBQlFRQTJBZ0FMQlNBRUtBSUlJZ0VnQURZQ0RDQUFJQUUyQWdnTElBY0VRQUpBSUFRZ0JDZ0NIQ0lCUVFKMFFkelRBMm9pQXlnQ0FFWUVRQ0FESUFBMkFnQWdBRVVFUUVHdzBRTkJBU0FCZEVGL2N5QUxjVFlDQUF3Q0N3VWdCMEVRYWlBSFFSUnFJQVFnQnlnQ0VFWWJJQUEyQWdBZ0FFVU5BUXNnQUNBSE5nSVlJQVFvQWhBaUFRUkFJQUFnQVRZQ0VDQUJJQUEyQWhnTElBUW9BaFFpQVFSQUlBQWdBVFlDRkNBQklBQTJBaGdMQ3dzZ0NFRVFTUVJBSUFRZ0FpQUlhaUlBUVFOeU5nSUVJQUFnQkdvaUFDQUFLQUlFUVFGeU5nSUVCU0FFSUFKQkEzSTJBZ1FnRENBSVFRRnlOZ0lFSUFnZ0RHb2dDRFlDQUNBSkJFQkJ3TkVES0FJQUlRQWdDVUVEZGlJQ1FRTjBRZFRSQTJvaEFVRUJJQUowSWdJZ0JYRUVmeUFCUVFocUlnSW9BZ0FGUWF6UkF5QUNJQVZ5TmdJQUlBRkJDR29oQWlBQkN5RURJQUlnQURZQ0FDQURJQUEyQWd3Z0FDQUROZ0lJSUFBZ0FUWUNEQXRCdE5FRElBZzJBZ0JCd05FRElBdzJBZ0FMSUFva0JpQUVRUWhxRHdVZ0Fnc0ZJQUlMQlNBQ0N5RUFCU0FBUWI5L1N3UkFRWDhoQUFVQ1FDQUFRUXRxSWdGQmVIRWhBRUd3MFFNb0FnQWlCUVJBUVFBZ0FHc2hCQUpBQWtBZ0FVRUlkaUlCQkg4Z0FFSC8vLzhIU3dSL1FSOEZJQUVnQVVHQS9qOXFRUkIyUVFoeElnSjBJZ1pCZ09BZmFrRVFka0VFY1NFQlFRNGdCaUFCZENJR1FZQ0FEMnBCRUhaQkFuRWlDQ0FCSUFKeWNtc2dCaUFJZEVFUGRtb2lBVUVCZENBQUlBRkJCMnAyUVFGeGNnc0ZRUUFMSWdkQkFuUkIzTk1EYWlnQ0FDSUJCSDlCQUNFQ0lBQkJBRUVaSUFkQkFYWnJJQWRCSDBZYmRDRUdBMzhnQVNnQ0JFRjRjU0FBYXlJSUlBUkpCRUFnQ0FSL0lBZ2hCQ0FCQlVFQUlRUWdBU0VDREFRTElRSUxJQU1nQVNnQ0ZDSURJQU5GSUFNZ0FVRVFhaUFHUVI5MlFRSjBhaWdDQUNJQlJuSWJJUU1nQmtFQmRDRUdJQUVOQUNBQ0N3VkJBQXNpQVNBRGNnUi9JQU1GSUFWQkFpQUhkQ0lCUVFBZ0FXdHljU0lDUlEwRVFRQWhBU0FDUVFBZ0FtdHhRWDlxSWdKQkRIWkJFSEVpQXlBQ0lBTjJJZ0pCQlhaQkNIRWlBM0lnQWlBRGRpSUNRUUoyUVFSeElnTnlJQUlnQTNZaUFrRUJka0VDY1NJRGNpQUNJQU4ySWdKQkFYWkJBWEVpQTNJZ0FpQURkbXBCQW5SQjNOTURhaWdDQUFzaUFnMEFJQUVoQXd3QkN5QUJJUU1nQkNFQkEzOGdBaWdDQkVGNGNTQUFheUlJSUFGSklRWWdDQ0FCSUFZYklRRWdBaUFESUFZYklRTWdBaWdDRUNJRVJRUkFJQUlvQWhRaEJBc2dCQVIvSUFRaEFnd0JCU0FCQ3dzaEJBc2dBd1JBSUFSQnRORURLQUlBSUFCclNRUkFJQUFnQTJvaUJ5QURTd1JBSUFNb0FoZ2hDU0FESUFNb0Fnd2lBVVlFUUFKQUlBTkJGR29pQWlnQ0FDSUJSUVJBSUFOQkVHb2lBaWdDQUNJQlJRUkFRUUFoQVF3Q0N3c0RRQUpBSUFGQkZHb2lCaWdDQUNJSVJRUkFJQUZCRUdvaUJpZ0NBQ0lJUlEwQkN5QUdJUUlnQ0NFQkRBRUxDeUFDUVFBMkFnQUxCU0FES0FJSUlnSWdBVFlDRENBQklBSTJBZ2dMSUFrRVFBSkFJQU1nQXlnQ0hDSUNRUUowUWR6VEEyb2lCaWdDQUVZRVFDQUdJQUUyQWdBZ0FVVUVRRUd3MFFNZ0JVRUJJQUowUVg5emNTSUJOZ0lBREFJTEJTQUpRUkJxSUFsQkZHb2dBeUFKS0FJUVJoc2dBVFlDQUNBQlJRUkFJQVVoQVF3Q0N3c2dBU0FKTmdJWUlBTW9BaEFpQWdSQUlBRWdBallDRUNBQ0lBRTJBaGdMSUFNb0FoUWlBZ1JBSUFFZ0FqWUNGQ0FDSUFFMkFoZ0xJQVVoQVFzRklBVWhBUXNnQkVFUVNRUkFJQU1nQUNBRWFpSUFRUU55TmdJRUlBQWdBMm9pQUNBQUtBSUVRUUZ5TmdJRUJRSkFJQU1nQUVFRGNqWUNCQ0FISUFSQkFYSTJBZ1FnQkNBSGFpQUVOZ0lBSUFSQkEzWWhBaUFFUVlBQ1NRUkFJQUpCQTNSQjFORURhaUVBUWF6UkF5Z0NBQ0lCUVFFZ0FuUWlBbkVFZnlBQVFRaHFJZ0lvQWdBRlFhelJBeUFCSUFKeU5nSUFJQUJCQ0dvaEFpQUFDeUVCSUFJZ0J6WUNBQ0FCSUFjMkFnd2dCeUFCTmdJSUlBY2dBRFlDREF3QkN5QUVRUWgySWdBRWZ5QUVRZi8vL3dkTEJIOUJId1VnQUNBQVFZRCtQMnBCRUhaQkNIRWlBblFpQmtHQTRCOXFRUkIyUVFSeElRQkJEaUFHSUFCMElnWkJnSUFQYWtFUWRrRUNjU0lGSUFBZ0FuSnlheUFHSUFWMFFROTJhaUlBUVFGMElBUWdBRUVIYW5aQkFYRnlDd1ZCQUFzaUFrRUNkRUhjMHdOcUlRQWdCeUFDTmdJY0lBZEJBRFlDRkNBSFFRQTJBaEJCQVNBQ2RDSUdJQUZ4UlFSQVFiRFJBeUFCSUFaeU5nSUFJQUFnQnpZQ0FDQUhJQUEyQWhnZ0J5QUhOZ0lNSUFjZ0J6WUNDQXdCQ3lBRUlBQW9BZ0FpQUNnQ0JFRjRjVVlFUUNBQUlRRUZBa0FnQkVFQVFSa2dBa0VCZG1zZ0FrRWZSaHQwSVFJRFFDQUFRUkJxSUFKQkgzWkJBblJxSWdZb0FnQWlBUVJBSUFKQkFYUWhBaUFFSUFFb0FnUkJlSEZHRFFJZ0FTRUFEQUVMQ3lBR0lBYzJBZ0FnQnlBQU5nSVlJQWNnQnpZQ0RDQUhJQWMyQWdnTUFnc0xJQUVvQWdnaUFDQUhOZ0lNSUFFZ0J6WUNDQ0FISUFBMkFnZ2dCeUFCTmdJTUlBZEJBRFlDR0FzTElBb2tCaUFEUVFocUR3c0xDd3NMQ3dzQ1FBSkFRYlRSQXlnQ0FDSUNJQUJQQkVCQndORURLQUlBSVFFZ0FpQUFheUlEUVE5TEJFQkJ3TkVESUFBZ0FXb2lCRFlDQUVHMDBRTWdBellDQUNBRUlBTkJBWEkyQWdRZ0FTQUNhaUFETmdJQUlBRWdBRUVEY2pZQ0JBVkJ0TkVEUVFBMkFnQkJ3TkVEUVFBMkFnQWdBU0FDUVFOeU5nSUVJQUVnQW1vaUFDQUFLQUlFUVFGeU5nSUVDd3dCQ3dKQVFialJBeWdDQUNJQklBQkxCRUFNQVFzZ0FFRXZhaUlGUVlUVkF5Z0NBQVIvUVl6VkF5Z0NBQVZCak5VRFFZQWdOZ0lBUVlqVkEwR0FJRFlDQUVHUTFRTkJmellDQUVHVTFRTkJmellDQUVHWTFRTkJBRFlDQUVIbzFBTkJBRFlDQUVHRTFRTWdDa0Z3Y1VIWXF0V3FCWE0yQWdCQmdDQUxJZ0pxSWdOQkFDQUNheUlJY1NJR0lBQk5CRUFNQXd0QjVOUURLQUlBSWdJRVFDQUdRZHpVQXlnQ0FDSUVhaUlISUFSTklBY2dBa3R5QkVBTUJBc0xJQUJCTUdvaEJ3SkFBa0JCNk5RREtBSUFRUVJ4QkVCQkFDRUNCUUpBQWtBQ1FFSEUwUU1vQWdBaUFrVU5BRUhzMUFNaEJBTkFBa0FnQkNnQ0FDSUpJQUpOQkVBZ0NTQUVLQUlFYWlBQ1N3MEJDeUFFS0FJSUlnUU5BUXdDQ3dzZ0NDQURJQUZyY1NJQ1FmLy8vLzhIU1FSQUlBSVF1Z0VpQVNBRUtBSUFJQVFvQWdScVJnUkFJQUZCZjBjTkJnVU1Bd3NGUVFBaEFnc01BZ3RCQUJDNkFTSUJRWDlHQkg5QkFBVkIzTlFES0FJQUlnUWdCaUFCUVlqVkF5Z0NBQ0lDUVg5cUlnTnFRUUFnQW10eElBRnJRUUFnQVNBRGNSdHFJZ0pxSVFNZ0FrSC8vLy8vQjBrZ0FpQUFTM0VFZjBIazFBTW9BZ0FpQ0FSQUlBTWdCRTBnQXlBSVMzSUVRRUVBSVFJTUJRc0xJQUVnQWhDNkFTSURSZzBGSUFNaEFRd0NCVUVBQ3dzaEFnd0JDeUFCUVg5SElBSkIvLy8vL3dkSmNTQUhJQUpMY1VVRVFDQUJRWDlHQkVCQkFDRUNEQUlGREFRTEFBdEJqTlVES0FJQUlnTWdCU0FDYTJwQkFDQURhM0VpQTBILy8vLy9CMDhOQWtFQUlBSnJJUVFnQXhDNkFVRi9SZ1IvSUFRUXVnRWFRUUFGSUFJZ0Eyb2hBZ3dEQ3lFQ0MwSG8xQU5CNk5RREtBSUFRUVJ5TmdJQUN5QUdRZi8vLy84SFNRUkFJQVlRdWdFaEFVRUFFTG9CSWdNZ0FXc2lCaUFBUVNocVN5RUVJQVlnQWlBRUd5RUNJQVJCQVhNZ0FVRi9SbklnQVVGL1J5QURRWDlIY1NBQklBTkpjVUVCYzNKRkRRRUxEQUVMUWR6VUF5QUNRZHpVQXlnQ0FHb2lBellDQUNBRFFlRFVBeWdDQUVzRVFFSGcxQU1nQXpZQ0FBdEJ4TkVES0FJQUlnTUVRQUpBUWV6VUF5RUVBa0FDUUFOQUlBRWdCQ2dDQUNJR0lBUW9BZ1FpQldwR0RRRWdCQ2dDQ0NJRURRQUxEQUVMSUFRb0FneEJDSEZGQkVBZ0JpQURUU0FCSUFOTGNRUkFJQVFnQWlBRmFqWUNCQ0FEUVFBZ0EwRUlhaUlCYTBFSGNVRUFJQUZCQjNFYklnUnFJUUVnQWtHNDBRTW9BZ0JxSWdZZ0JHc2hBa0hFMFFNZ0FUWUNBRUc0MFFNZ0FqWUNBQ0FCSUFKQkFYSTJBZ1FnQXlBR2FrRW9OZ0lFUWNqUkEwR1UxUU1vQWdBMkFnQU1Bd3NMQ3lBQlFielJBeWdDQUVrRVFFRzgwUU1nQVRZQ0FBc2dBU0FDYWlFR1FlelVBeUVFQWtBQ1FBTkFJQVlnQkNnQ0FFWU5BU0FFS0FJSUlnUU5BQXNNQVFzZ0JDZ0NERUVJY1VVRVFDQUVJQUUyQWdBZ0JDQUNJQVFvQWdScU5nSUVJQUFnQVVFQUlBRkJDR29pQW10QkIzRkJBQ0FDUVFkeEcyb2lCMm9oQlNBR1FRQWdCa0VJYWlJQmEwRUhjVUVBSUFGQkIzRWJhaUlDSUFkcklBQnJJUVFnQnlBQVFRTnlOZ0lFSUFJZ0EwWUVRRUc0MFFNZ0JFRzQwUU1vQWdCcUlnQTJBZ0JCeE5FRElBVTJBZ0FnQlNBQVFRRnlOZ0lFQlFKQUlBSkJ3TkVES0FJQVJnUkFRYlRSQXlBRVFiVFJBeWdDQUdvaUFEWUNBRUhBMFFNZ0JUWUNBQ0FGSUFCQkFYSTJBZ1FnQUNBRmFpQUFOZ0lBREFFTElBSW9BZ1FpQ1VFRGNVRUJSZ1JBSUFsQkEzWWhBeUFKUVlBQ1NRUkFJQUlvQWdnaUFDQUNLQUlNSWdGR0JFQkJyTkVEUWF6UkF5Z0NBRUVCSUFOMFFYOXpjVFlDQUFVZ0FDQUJOZ0lNSUFFZ0FEWUNDQXNGQWtBZ0FpZ0NHQ0VJSUFJZ0FpZ0NEQ0lBUmdSQUFrQWdBa0VRYWlJQlFRUnFJZ01vQWdBaUFBUkFJQU1oQVFVZ0FpZ0NFQ0lBUlFSQVFRQWhBQXdDQ3dzRFFBSkFJQUJCRkdvaUJpZ0NBQ0lEUlFSQUlBQkJFR29pQmlnQ0FDSURSUTBCQ3lBR0lRRWdBeUVBREFFTEN5QUJRUUEyQWdBTEJTQUNLQUlJSWdFZ0FEWUNEQ0FBSUFFMkFnZ0xJQWhGRFFBZ0FpQUNLQUljSWdGQkFuUkIzTk1EYWlJREtBSUFSZ1JBQWtBZ0F5QUFOZ0lBSUFBTkFFR3cwUU5Cc05FREtBSUFRUUVnQVhSQmYzTnhOZ0lBREFJTEJTQUlRUkJxSUFoQkZHb2dBaUFJS0FJUVJoc2dBRFlDQUNBQVJRMEJDeUFBSUFnMkFoZ2dBaWdDRUNJQkJFQWdBQ0FCTmdJUUlBRWdBRFlDR0FzZ0FpZ0NGQ0lCUlEwQUlBQWdBVFlDRkNBQklBQTJBaGdMQ3lBQ0lBbEJlSEVpQUdvaEFpQUFJQVJxSVFRTElBSWdBaWdDQkVGK2NUWUNCQ0FGSUFSQkFYSTJBZ1FnQkNBRmFpQUVOZ0lBSUFSQkEzWWhBU0FFUVlBQ1NRUkFJQUZCQTNSQjFORURhaUVBUWF6UkF5Z0NBQ0lDUVFFZ0FYUWlBWEVFZnlBQVFRaHFJZ0lvQWdBRlFhelJBeUFCSUFKeU5nSUFJQUJCQ0dvaEFpQUFDeUVCSUFJZ0JUWUNBQ0FCSUFVMkFnd2dCU0FCTmdJSUlBVWdBRFlDREF3QkN5QUVRUWgySWdBRWZ5QUVRZi8vL3dkTEJIOUJId1VnQUNBQVFZRCtQMnBCRUhaQkNIRWlBWFFpQWtHQTRCOXFRUkIyUVFSeElRQkJEaUFDSUFCMElnSkJnSUFQYWtFUWRrRUNjU0lESUFBZ0FYSnlheUFDSUFOMFFROTJhaUlBUVFGMElBUWdBRUVIYW5aQkFYRnlDd1ZCQUFzaUFVRUNkRUhjMHdOcUlRQWdCU0FCTmdJY0lBVkJBRFlDRkNBRlFRQTJBaEJCc05FREtBSUFJZ0pCQVNBQmRDSURjVVVFUUVHdzBRTWdBaUFEY2pZQ0FDQUFJQVUyQWdBZ0JTQUFOZ0lZSUFVZ0JUWUNEQ0FGSUFVMkFnZ01BUXNnQkNBQUtBSUFJZ0FvQWdSQmVIRkdCRUFnQUNFQkJRSkFJQVJCQUVFWklBRkJBWFpySUFGQkgwWWJkQ0VDQTBBZ0FFRVFhaUFDUVI5MlFRSjBhaUlES0FJQUlnRUVRQ0FDUVFGMElRSWdCQ0FCS0FJRVFYaHhSZzBDSUFFaEFBd0JDd3NnQXlBRk5nSUFJQVVnQURZQ0dDQUZJQVUyQWd3Z0JTQUZOZ0lJREFJTEN5QUJLQUlJSWdBZ0JUWUNEQ0FCSUFVMkFnZ2dCU0FBTmdJSUlBVWdBVFlDRENBRlFRQTJBaGdMQ3lBS0pBWWdCMEVJYWc4TEMwSHMxQU1oQkFOQUFrQWdCQ2dDQUNJR0lBTk5CRUFnQmlBRUtBSUVhaUlHSUFOTERRRUxJQVFvQWdnaEJBd0JDd3RCeE5FRElBRkJBQ0FCUVFocUlnUnJRUWR4UVFBZ0JFRUhjUnNpQkdvaUJUWUNBRUc0MFFNZ0FrRllhaUlJSUFScklnUTJBZ0FnQlNBRVFRRnlOZ0lFSUFFZ0NHcEJLRFlDQkVISTBRTkJsTlVES0FJQU5nSUFJQU5CQUNBR1FWRnFJZ1JCQ0dvaUJXdEJCM0ZCQUNBRlFRZHhHeUFFYWlJRUlBUWdBMEVRYWtrYklnUkJHellDQkNBRVFlelVBeWtDQURjQ0NDQUVRZlRVQXlrQ0FEY0NFRUhzMUFNZ0FUWUNBRUh3MUFNZ0FqWUNBRUg0MUFOQkFEWUNBRUgwMUFNZ0JFRUlhallDQUNBRVFSaHFJUUVEUUNBQlFRUnFJZ0pCQnpZQ0FDQUJRUWhxSUFaSkJFQWdBaUVCREFFTEN5QURJQVJIQkVBZ0JDQUVLQUlFUVg1eE5nSUVJQU1nQkNBRGF5SUdRUUZ5TmdJRUlBUWdCallDQUNBR1FRTjJJUUlnQmtHQUFra0VRQ0FDUVFOMFFkVFJBMm9oQVVHczBRTW9BZ0FpQkVFQklBSjBJZ0p4Qkg4Z0FVRUlhaUlFS0FJQUJVR3MwUU1nQWlBRWNqWUNBQ0FCUVFocUlRUWdBUXNoQWlBRUlBTTJBZ0FnQWlBRE5nSU1JQU1nQWpZQ0NDQURJQUUyQWd3TUFnc2dCa0VJZGlJQkJIOGdCa0gvLy84SFN3Ui9RUjhGSUFFZ0FVR0EvajlxUVJCMlFRaHhJZ0owSWdSQmdPQWZha0VRZGtFRWNTRUJRUTRnQkNBQmRDSUVRWUNBRDJwQkVIWkJBbkVpQlNBQklBSnljbXNnQkNBRmRFRVBkbW9pQVVFQmRDQUdJQUZCQjJwMlFRRnhjZ3NGUVFBTElnSkJBblJCM05NRGFpRUJJQU1nQWpZQ0hDQURRUUEyQWhRZ0EwRUFOZ0lRUWJEUkF5Z0NBQ0lFUVFFZ0FuUWlCWEZGQkVCQnNORURJQVFnQlhJMkFnQWdBU0FETmdJQUlBTWdBVFlDR0NBRElBTTJBZ3dnQXlBRE5nSUlEQUlMSUFZZ0FTZ0NBQ0lCS0FJRVFYaHhSZ1JBSUFFaEFnVUNRQ0FHUVFCQkdTQUNRUUYyYXlBQ1FSOUdHM1FoQkFOQUlBRkJFR29nQkVFZmRrRUNkR29pQlNnQ0FDSUNCRUFnQkVFQmRDRUVJQVlnQWlnQ0JFRjRjVVlOQWlBQ0lRRU1BUXNMSUFVZ0F6WUNBQ0FESUFFMkFoZ2dBeUFETmdJTUlBTWdBellDQ0F3REN3c2dBaWdDQ0NJQklBTTJBZ3dnQWlBRE5nSUlJQU1nQVRZQ0NDQURJQUkyQWd3Z0EwRUFOZ0lZQ3dzRlFielJBeWdDQUNJRFJTQUJJQU5KY2dSQVFielJBeUFCTmdJQUMwSHMxQU1nQVRZQ0FFSHcxQU1nQWpZQ0FFSDQxQU5CQURZQ0FFSFEwUU5CaE5VREtBSUFOZ0lBUWN6UkEwRi9OZ0lBUWVEUkEwSFUwUU0yQWdCQjNORURRZFRSQXpZQ0FFSG8wUU5CM05FRE5nSUFRZVRSQTBIYzBRTTJBZ0JCOE5FRFFlVFJBellDQUVIczBRTkI1TkVETmdJQVFmalJBMEhzMFFNMkFnQkI5TkVEUWV6UkF6WUNBRUdBMGdOQjlORUROZ0lBUWZ6UkEwSDAwUU0yQWdCQmlOSURRZnpSQXpZQ0FFR0UwZ05CL05FRE5nSUFRWkRTQTBHRTBnTTJBZ0JCak5JRFFZVFNBellDQUVHWTBnTkJqTklETmdJQVFaVFNBMEdNMGdNMkFnQkJvTklEUVpUU0F6WUNBRUdjMGdOQmxOSUROZ0lBUWFqU0EwR2MwZ00yQWdCQnBOSURRWnpTQXpZQ0FFR3cwZ05CcE5JRE5nSUFRYXpTQTBHazBnTTJBZ0JCdU5JRFFhelNBellDQUVHMDBnTkJyTklETmdJQVFjRFNBMEcwMGdNMkFnQkJ2TklEUWJUU0F6WUNBRUhJMGdOQnZOSUROZ0lBUWNUU0EwRzgwZ00yQWdCQjBOSURRY1RTQXpZQ0FFSE0wZ05CeE5JRE5nSUFRZGpTQTBITTBnTTJBZ0JCMU5JRFFjelNBellDQUVIZzBnTkIxTklETmdJQVFkelNBMEhVMGdNMkFnQkI2TklEUWR6U0F6WUNBRUhrMGdOQjNOSUROZ0lBUWZEU0EwSGswZ00yQWdCQjdOSURRZVRTQXpZQ0FFSDQwZ05CN05JRE5nSUFRZlRTQTBIczBnTTJBZ0JCZ05NRFFmVFNBellDQUVIODBnTkI5TklETmdJQVFZalRBMEg4MGdNMkFnQkJoTk1EUWZ6U0F6WUNBRUdRMHdOQmhOTUROZ0lBUVl6VEEwR0Uwd00yQWdCQm1OTURRWXpUQXpZQ0FFR1Uwd05Cak5NRE5nSUFRYURUQTBHVTB3TTJBZ0JCbk5NRFFaVFRBellDQUVHbzB3TkJuTk1ETmdJQVFhVFRBMEdjMHdNMkFnQkJzTk1EUWFUVEF6WUNBRUdzMHdOQnBOTUROZ0lBUWJqVEEwR3Mwd00yQWdCQnROTURRYXpUQXpZQ0FFSEEwd05CdE5NRE5nSUFRYnpUQTBHMDB3TTJBZ0JCeU5NRFFielRBellDQUVIRTB3TkJ2Tk1ETmdJQVFkRFRBMEhFMHdNMkFnQkJ6Tk1EUWNUVEF6WUNBRUhZMHdOQnpOTUROZ0lBUWRUVEEwSE0wd00yQWdCQnhORURJQUZCQUNBQlFRaHFJZ05yUVFkeFFRQWdBMEVIY1JzaUEyb2lCRFlDQUVHNDBRTWdBa0ZZYWlJQ0lBTnJJZ00yQWdBZ0JDQURRUUZ5TmdJRUlBRWdBbXBCS0RZQ0JFSEkwUU5CbE5VREtBSUFOZ0lBQzBHNDBRTW9BZ0FpQVNBQVN3UkFEQUlMQzBHa3hRTkJNRFlDQUF3Q0MwRzQwUU1nQVNBQWF5SUNOZ0lBUWNUUkF5QUFRY1RSQXlnQ0FDSUJhaUlETmdJQUlBTWdBa0VCY2pZQ0JDQUJJQUJCQTNJMkFnUUxJQW9rQmlBQlFRaHFEd3NnQ2lRR1FRQUxtQUlCQkg4Z0FDQUNhaUVFSUFGQi93RnhJUU1nQWtIREFFNEVRQU5BSUFCQkEzRUVRQ0FBSUFNNkFBQWdBRUVCYWlFQURBRUxDeUFEUVFoMElBTnlJQU5CRUhSeUlBTkJHSFJ5SVFFZ0JFRjhjU0lGUVVCcUlRWURRQ0FBSUFaTUJFQWdBQ0FCTmdJQUlBQWdBVFlDQkNBQUlBRTJBZ2dnQUNBQk5nSU1JQUFnQVRZQ0VDQUFJQUUyQWhRZ0FDQUJOZ0lZSUFBZ0FUWUNIQ0FBSUFFMkFpQWdBQ0FCTmdJa0lBQWdBVFlDS0NBQUlBRTJBaXdnQUNBQk5nSXdJQUFnQVRZQ05DQUFJQUUyQWpnZ0FDQUJOZ0k4SUFCQlFHc2hBQXdCQ3dzRFFDQUFJQVZJQkVBZ0FDQUJOZ0lBSUFCQkJHb2hBQXdCQ3dzTEEwQWdBQ0FFU0FSQUlBQWdBem9BQUNBQVFRRnFJUUFNQVFzTElBUWdBbXNMQmdCQkVSQUNDeG9BSUFBc0FBdEJBRWdFUUNBQUtBSUlHaUFBS0FJQUVEZ0xDdzhBSUFFRWZ5QUFJQUZ1QlVFQUN3c1NBQ0FBQkVBZ0FDZ0NBQkE0SUFBUU9Bc0xmd0VFZnlNR0lRSWpCa0VRYWlRR0lBQXNBQXNpQTBFQVNDSUVCSDhnQUNnQ0JBVWdBMEgvQVhFTElnTWdBVWtFUUNBQUlBRWdBMnNRNUFrRklBUUVRQUovSUFFZ0FDZ0NBR29oQlNBQ1FRQTZBQUFnQlFzZ0FoQmZJQUFnQVRZQ0JBVWdBa0VBT2dBQUlBQWdBV29nQWhCZklBQWdBVG9BQ3dzTElBSWtCZ3NRQUNBQVFmRDRBQ0FCS0FJQXR4QVhDOFlEQVFOL0lBSkJnTUFBVGdSQUlBQWdBU0FDRUNVYUlBQVBDeUFBSVFRZ0FDQUNhaUVESUFCQkEzRWdBVUVEY1VZRVFBTkFJQUJCQTNFRVFDQUNSUVJBSUFRUEN5QUFJQUVzQUFBNkFBQWdBRUVCYWlFQUlBRkJBV29oQVNBQ1FRRnJJUUlNQVFzTElBTkJmSEVpQWtGQWFpRUZBMEFnQUNBRlRBUkFJQUFnQVNnQ0FEWUNBQ0FBSUFFb0FnUTJBZ1FnQUNBQktBSUlOZ0lJSUFBZ0FTZ0NERFlDRENBQUlBRW9BaEEyQWhBZ0FDQUJLQUlVTmdJVUlBQWdBU2dDR0RZQ0dDQUFJQUVvQWh3MkFod2dBQ0FCS0FJZ05nSWdJQUFnQVNnQ0pEWUNKQ0FBSUFFb0FpZzJBaWdnQUNBQktBSXNOZ0lzSUFBZ0FTZ0NNRFlDTUNBQUlBRW9BalEyQWpRZ0FDQUJLQUk0TmdJNElBQWdBU2dDUERZQ1BDQUFRVUJySVFBZ0FVRkFheUVCREFFTEN3TkFJQUFnQWtnRVFDQUFJQUVvQWdBMkFnQWdBRUVFYWlFQUlBRkJCR29oQVF3QkN3c0ZJQU5CQkdzaEFnTkFJQUFnQWtnRVFDQUFJQUVzQUFBNkFBQWdBQ0FCTEFBQk9nQUJJQUFnQVN3QUFqb0FBaUFBSUFFc0FBTTZBQU1nQUVFRWFpRUFJQUZCQkdvaEFRd0JDd3NMQTBBZ0FDQURTQVJBSUFBZ0FTd0FBRG9BQUNBQVFRRnFJUUFnQVVFQmFpRUJEQUVMQ3lBRUN4MEFJQUFvQWhnZ0FDZ0NCQ0FBS0FJSUlBQW9BZ3dnQVNBQ0VONElDdzhBSUFFRWZ5QUFJQUZ3QlVFQUN3c1BBQ0FCQkg4Z0FDQUJid1ZCQUFzTG9RRUJBMzhqQmlFQ0l3WkJFR29rQmlBQUtBSUlJQUZMQkVBZ0FDZ0NHQ0FCSUFBb0FneHNhaUVFSUFJa0JpQUVEd1VnQWtIQXlBTkI3Y1FCRURkQmtzVUJFRGRCNzZJQ0VEZEIvQUFRUGtIMm9nSVFOMEdCeGdFUU55SURJQU1vQWdCQmRHb29BZ0JxRURzZ0FrR0F6Z01RT2lJQktBSUFLQUljSVFBZ0FVRUtJQUJCUDNGQmlnRnFFUUlBSVFBZ0FoQThJQU1nQUJCQUlBTVFQeEFBQzBFQUN4VUFJQUJCQVNBQUd4QkVJZ0FFZnlBQUJVRUFDd3VxQkFJSmZ3SjlJd1loQlNNR1FTQnFKQVlnQlVFRWFpRUVJQVVnQURZQ0FDQUFLQUlBSVFNQ1FBSkFRYURFQXlnQ0FDSUJSU0lKQkVCQkFDRUFEQUVGSUFFZ0FVRi9haUlJY1VVaUJ3Ui9JQU1nQ0hFRklBTWdBVWtFZnlBREJTQURJQUVRVGdzTElnQkJBblJCbk1RREtBSUFhaWdDQUNJQ0JFQURRQ0FDS0FJQUlnSkZEUU1nQXlBQ0tBSUVJZ1pIQkVBZ0J3Ui9JQVlnQ0hFRklBWWdBVThFZnlBR0lBRVFUZ1VnQmdzTElBQkhEUVFMSUFNZ0FpZ0NDRWNOQUFzRkRBSUxDd3dCQ3lBRUlBTWdCUkRvQmtHc3hBTXFBZ0FpQ2lBQnM1UkJxTVFES0FJQVFRRnFzeUlMWFNBSmNnUkFBbjhnQ3lBS2xZMFFrZ0VpQWlBQlFYOXFJQUZ4UVFCSElBRkJBMGx5SUFGQkFYUnlJZ0FnQUNBQ1NSc1E1d1pCb01RREtBSUFJZ0pCZjJvaUFDQURjU0FBSUFKeFJRMEFHaUFESUFKSkJIOGdBd1VnQXlBQ0VFNExDeUVBQlNBQklRSUxRWnpFQXlnQ0FDQUFRUUowYWlnQ0FDSUJCSDhnQkNnQ0FDQUJLQUlBTmdJQUlBRWdCQ2dDQURZQ0FDQUVCU0FFS0FJQVFhVEVBeWdDQURZQ0FFR2t4QU1nQkNnQ0FEWUNBRUdjeEFNb0FnQWdBRUVDZEdwQnBNUUROZ0lBSUFRb0FnQWlCeWdDQUNJQUJFQWdBQ2dDQkNFQUlBSWdBa0YvYWlJQmNRUi9JQUFnQWs4RWZ5QUFJQUlRVGdVZ0FBc0ZJQUFnQVhFTElRQkJuTVFES0FJQUlBQkJBblJxSUFjMkFnQUxJQVFMSWdBb0FnQWhBa0dveEFOQnFNUURLQUlBUVFGcU5nSUFJQUJCQURZQ0FBc2dCU1FHSUFKQkVHb0x1Z0VCQm44Z0FDZ0NBQ0VCUWFERUF5Z0NBQ0lDQkVBQ1FDQUNJQUpCZjJvaUJIRkZJZ1VFZnlBQklBUnhCU0FCSUFKSkJIOGdBUVVnQVNBQ0VFNExDeUlHUVFKMFFaekVBeWdDQUdvb0FnQWlBQVIvQTBBZ0FDZ0NBQ0lBUlFSQVFRQWhBQXdEQ3lBQUtBSUVJZ01nQVVZRVFDQUJJQUFvQWdoR0RRTUZJQVVFZnlBRElBUnhCU0FESUFKUEJIOGdBeUFDRUU0RklBTUxDeUFHUndSQVFRQWhBQXdFQ3dzTUFBQUxBQVZCQUFzaEFBc0ZRUUFoQUFzZ0FBdkNBUUlEZndGK0FrQUNRQ0FBS1FOd0lnUlFSUVJBSUFBcEEzZ2dCRmtOQVFzZ0FCRDFBU0lDUVFCSURRQWdBQ2dDQ0NFQkFrQUNRQ0FBS1FOd0lnUlFEUUFnQkNBQUtRTjRmU0lFSUFFZ0FDZ0NCQ0lEYTZ4VkRRQWdBQ0FESUFTblFYOXFhallDYUF3QkN5QUJJUU1nQUNBQk5nSm9DeUFDSUFFRWZ5QUFJQUFwQTNnZ0FVRUJhaUFBS0FJRUlnRnJySHczQTNnZ0FRVWdBQ2dDQkF0QmYyb2lBQzBBQUVjRVFDQUFJQUk2QUFBTERBRUxJQUJCQURZQ2FFRi9JUUlMSUFJTEl3RUNmeUFBS0FJQUlnRWhBaUFCQkVBZ0FDQUNOZ0lFSUFBb0FnZ2FJQUVRT0FzTERnQWdBQ0FCSUFFUXRBRVE0Z2tMRFFBZ0FDQUJJQUVRWUJEbkNRc0lBRUVERUFKQkFBdEdBZ0ovQVgwakJpRUZJd1pCRUdva0JnSi9JQUFnQXlBRUVLd0JJUVlnQlVFRWFpQUZJQUVnQWlBREVNc0NJQVlMSUFVcUFnUWdCU29DQUJDdkJ5RUhJQVVrQmlBSEN3a0FJQUFnQUJEREF3dEdBQ0FBSUFFcUFnZ2dBU29DQUNBQ0tnSUFsQ0FCS2dJRUlBSXFBZ1NVa3BJNEFnQWdBQ0FCS2dJVUlBRXFBZ3dnQWlvQ0FKUWdBU29DRUNBQ0tnSUVsSktTT0FJRUN5MEFRZkMrQXl3QUFFVUVRRUh3dmdNUWNBUkFRWWpPQXhEOUJEWUNBRUh3dmdNUWJ3c0xRWWpPQXlnQ0FBdXpCUUVJZnlBQUtBTFVBeUlFS0FJUUlnSkJnSUFDU0FSQUlBUkJER29oQlNBRUtBSVVJUU1EZnlBRUlBTkJmMm9pQWpZQ0ZDQURRUUZJQkVBZ0FDZ0N1QU1FUUVFQUlRTUZJQUFvQWhnaUFpZ0NCRVVFUUNBQ0tBSU1JUU1nQUNBRFFmOEFjVUVJYWhFQUFFVUVRQ0FBS0FJQUlnTkJHVFlDRkNBREtBSUFJUU1nQUNBRFFmOEJjVUdzQTJvUkFRQUxDeUFDSUFJb0FnUkJmMm8yQWdRZ0FpQUNLQUlBSWdKQkFXbzJBZ0FnQWl3QUFDSURRZjhCY1NFQ0lBTkJmMFlFUUFKL0EwQUNRQ0FBS0FJWUlnSW9BZ1JGQkVBZ0FpZ0NEQ0VESUFBZ0EwSC9BSEZCQ0dvUkFBQkZCRUFnQUNnQ0FDSURRUmsyQWhRZ0F5Z0NBQ0VESUFBZ0EwSC9BWEZCckFOcUVRRUFDd3NnQWlBQ0tBSUVRWDlxTmdJRUlBSWdBaWdDQUNJQ1FRRnFOZ0lBQWtBQ1FDQUNMQUFBSWdKQmYyc09BZ0VBQWd0Qi93RU1Bd3NNQVFzTElBQWdBa0gvQVhFMkFyZ0RRUUFMSVFJTElBSWhBeUFFS0FJVUlRSUxJQVVnQXlBRktBSUFRUWgwY2pZQ0FDQUVJQUpCQ0dvaUF6WUNGQ0FDUVhoSUJFQWdCQ0FDUVFscUlnSTJBaFFnQWtVRVFDQUVRWUNBQWpZQ0VFRUFJUUlMQlNBRElRSUxDeUFFSUFRb0FoQkJBWFFpQXpZQ0VDQURRWUNBQWtnRWZ5QUNJUU1NQVFVZ0F3c0xJUUFGSUFJaEFDQUVRUXhxSVFVZ0JDZ0NGQ0VDQ3lBQkxRQUFJZ05CL3dCeFFRSjBRWkFtYWlnQ0FDSUdRUWgxSVFnZ0JDQUFJQVpCRUhVaUIyc2lBRFlDRUNBRktBSUFJZ2tnQUNBQ2RDSUNUZ1JBSUFVZ0NTQUNhellDQUNBRUlBYzJBaEFnQTBHQUFYRWhBaUFBSUFkSUJFQWdBU0FDSUFoek9nQUFJQU5CQjNVUEJTQUJJQUlnQm5NNkFBQWdBMEdBQVhOQkIzVVBDd0FMSUFCQmdJQUNUZ1JBSUFOQkIzVVBDeUFEUVlBQmNTRUNJQUFnQjBnRWZ5QUJJQUlnQm5NNkFBQWdBMEdBQVhOQkIzVUZJQUVnQWlBSWN6b0FBQ0FEUVFkMUN3c0dBQ0FBRURnTERBQWdBQ0FCTEFBQU9nQUFDNDBCQVFOL0FrQUNRQ0FBSWdKQkEzRkZEUUFnQWlJQklRQUNRQU5BSUFFc0FBQkZEUUVnQVVFQmFpSUJJZ0JCQTNFTkFBc2dBU0VBREFFTERBRUxBMEFnQUVFRWFpRUJJQUFvQWdBaUEwSC8vZnQzYWlBRFFZQ0Jnb1I0Y1VHQWdZS0VlSE54UlFSQUlBRWhBQXdCQ3dzZ0EwSC9BWEVFUUFOQUlBQkJBV29pQUN3QUFBMEFDd3NMSUFBZ0Ftc0wyQUVCQTM4Z0F5Z0NURUYvU2dSL1FRRUZRUUFMR2lBQklBSnNJUVVnQXlBRExBQktJZ1FnQkVIL0FXcHlPZ0JLSUFKQkFDQUJHeUVDQWtBZ0F5Z0NDQ0FES0FJRUlnWnJJZ1JCQUVvRWZ5QUFJQVlnQkNBRklBUWdCVWtiSWdRUVRCb2dBeUFFSUFNb0FnUnFOZ0lFSUFBZ0JHb2hBQ0FGSUFSckJTQUZDeUlFUlEwQUlBQWhCaUFFSVFBRFFBSkFJQU1RcHdJTkFDQURJQVlnQUNBREtBSWdRVDl4UWNvQmFoRUVBQ0lFUVFGcVFRSkpEUUFnQUNBRWF5SUFSUTBDSUFRZ0Jtb2hCZ3dCQ3dzZ0JTQUFheUFCRUVnaEFnc2dBZ3N4QVFGL1FlaUpBU2dDQUNFQklBQUVRRUhvaVFGQmpNVURJQUFnQUVGL1JoczJBZ0FMUVg4Z0FTQUJRWXpGQTBZYkN3TUFBUXNJQUVFR0VBSkJBQXU0QVFFQmZTQUNJQUVRd3dNaEF5QUFJQUFxQWdBZ0F5QUJLZ0lBbEpNNEFnQWdBQ0FBS2dJRUlBTWdBU29DQkpTVE9BSUVJQUFnQUNvQ0NDQURJQUVxQWdpVWt6Z0NDQ0FBSUFBcUFnd2dBeUFCS2dJTWxKTTRBZ3dnQUNBQUtnSVFJQU1nQVNvQ0VKU1RPQUlRSUFBZ0FDb0NGQ0FESUFFcUFoU1VremdDRkNBQUlBQXFBaGdnQXlBQktnSVlsSk00QWhnZ0FDQUFLZ0ljSUFNZ0FTb0NISlNUT0FJY0lBQWdBQ29DSUNBRElBRXFBaUNVa3pnQ0lBc0lBRUVMRUFKQkFBdlhBd0VHZnlBQUtBSUFJUVFnQUNnQ0JDRUhBa0FDUUNBQUtBSVFJZ1VvQXJnREJFQWdBU0VJSUFJaEJpQUhJUUlnQkNFQkRBRUZJQUpCR1VnRVFBSkFJQUVoQ0NBQ0lRWUNRQU5BQWtBZ0IwVUVRQ0FGS0FJWUtBSU1JUUVnQlNBQlFmOEFjVUVJYWhFQUFFVU5BeUFGS0FJWUlnRW9BZ1FoQnlBQktBSUFJUVFMSUFkQmYyb2hBaUFFUVFGcUlRRWdCQ3dBQUNJSFFmOEJjU0VFSUFkQmYwWUVRQU5BQWtBZ0FnUi9JQUVGSUFVb0FoZ29BZ3doQVNBRklBRkIvd0J4UVFocUVRQUFSUTBHSUFVb0FoZ2lBU2dDQkNFQ0lBRW9BZ0FMSVFRZ0FrRi9haUVDSUFSQkFXb2hBUUpBQWtBZ0JDd0FBQ0lFUVg5ckRnSUJBQVVMUWY4QklRUU1BUXNNQVFzTEN5QUVJQWhCQ0hSeUlRZ2dCa0VJYWlFSklBWkJFVWdFUUNBQ0lRY2dBU0VFSUFraEJnd0NCU0FKSVFZTUJBc0FDd3NnQlNBRVFmOEJjVFlDdUFNTUJBdEJBQThMQlNBQklRZ2dBaUVHSUFjaEFpQUVJUUVMQ3d3QkN5QUdJQU5JQkVBZ0JTZ0MxQU1vQWloRkJFQWdCU2dDQUNJRFFmZ0FOZ0lVSUFNb0FnUWhBeUFGUVg4Z0EwRS9jVUd5QldvUkF3QWdCU2dDMUFOQkFUWUNLQXNnQ0VFWklBWnJkQ0VJUVJraEJnc0xJQUFnQVRZQ0FDQUFJQUkyQWdRZ0FDQUlOZ0lJSUFBZ0JqWUNERUVCQ3c0QUlBRWdBRUYvYW1vZ0FSQTVDd2NBSUFBZ0FKUUxuUUVCQkg4Z0FDZ0NURUYvU2dSL1FRRUZRUUFMR2lBQUVKd0ZJQUFvQWdCQkFYRkJBRWNpQkVVRVFCQ3JBaUVCSUFBb0FqUWlBZ1JBSUFJZ0FDZ0NPRFlDT0FzZ0FDZ0NPQ0lEQkVBZ0F5QUNOZ0kwQ3lBQUlBRW9BZ0JHQkVBZ0FTQUROZ0lBQzBHb3hRTVFEZ3NnQUJDcEFob2dBQ0FBS0FJTVFmOEFjVUVJYWhFQUFCb2dBQ2dDWUNJQkJFQWdBUkE0Q3lBRVJRUkFJQUFRT0FzTHFRRUNDSDhCZkNNR0lRTWpCa0V3YWlRR0lBQVFud2NDZnhEakF5RUlJQU5CR0dvaUFSQzdBeUFCTEFBTElRVWdBU2dDQUNFR0lBQkJFR29pQWl3QUMwRUFTQVIvSUFJb0FnQUZJQUlMSVFjZ0FCQ2VCMFFBQUFBQUFFQ1BRS0loQ1NBRElnQkI4S01DTmdJQUlBQWdCaUFCSUFWQkFFZ2JOZ0lFSUFCQitLTUNOZ0lJSUFBZ0J6WUNEQ0FBSUFrNUF4QWdDQXRCMWFNQ0lBQVF0d01nQVJCSElBSVFSeUFBSkFZTFJBQWdBQ0FCY3lJQUlBQkJBWFpCMWFyVnFnVnhheUlBUWJQbXpKa0RjU0FBUVFKMlFiUG16SmtEY1dvaUFFRUVkaUFBYWtHUG5yejRBSEZCZ1lLRUNHeEJHSFlMZmdFRGZ5QUJRd0FBQUQrU0VFTWdBQ2dDRUdvaEJTQUNRd0FBQUQrU0VFTWdBQ2dDRkdvaEJpQUZRUUJJQkg5QmZ3VWdCa0VBU0NBRklBQW9BZ2dpQjA1eUJIOUJmd1VnQmlBQUtBSU1TQVIvSUFNZ0FDZ0NBQ0FHSUFkc0lBVnFRUU4wYWlJQUtBSUFOZ0lBSUFRZ0FDZ0NCRFlDQUVFQUJVRi9Dd3NMQ3d3QUlBQWdBU2dDQURZQ0FBc1dBQ0FBUVFBMkFnQWdBQ0FBS0FJQVFRRnlOZ0lBQ3cwQUlBQXNBQUJCQUVkQkFYTUxFUUFnQUNnQ0ZDQUFLQUlRYTBFVUVEa0xHQUFnQUNnQ0FFRWdjVVVFUUNBQklBSWdBQkNYQXhvTEMwQUFJQUFnQUdJRWYwR0FnSUNBZUFVZ0FFUUFBQUFBQUFEZ1FXWUVmMEdBZ0lDQWVBVWdBRVFBQUNBQUFBRGd3V1VFZjBHQWdJQ0FlQVVnQUtvTEN3c0xCd0FnQUVFRWFndDlBUUovSXdZaEJTTUdRWUFDYWlRR0lBUkJnTUFFY1VVZ0FpQURTbkVFUUNBRklBRkJHSFJCR0hVZ0FpQURheUlCUVlBQ0lBRkJnQUpKR3hCRkdpQUJRZjhCU3dSQUlBSWdBMnNoQmdOQUlBQWdCVUdBQWhCeUlBRkJnSDVxSWdGQi93RkxEUUFMSUFaQi93RnhJUUVMSUFBZ0JTQUJFSElMSUFVa0Jnc0dBRUVaRUFJTE9RRUNmeU1HSVFVakJrRVFhaVFHSUFVZ0JEWUNBQ0FDRUdJaEFpQUFJQUVnQXlBRkVLa0JJUVlnQWdSQUlBSVFZaG9MSUFVa0JpQUdDNVlDQVFSL0lBQW9BZ1FpQmlBQUxBQUxJZ1JCL3dGeElnVWdCRUVBU0JzRVFBSkFJQUVnQWtjRVFDQUNJUVFnQVNFRkEwQWdCU0FFUVh4cUlnUkpCRUFnQlNnQ0FDRUdJQVVnQkNnQ0FEWUNBQ0FFSUFZMkFnQWdCVUVFYWlFRkRBRUxDeUFBTEFBTElnUkIvd0Z4SVFVZ0FDZ0NCQ0VHQ3lBQ1FYeHFJUWNnQUNnQ0FDQUFJQVJCR0hSQkdIVkJBRWdpQWhzaUFDQUdJQVVnQWh0cUlRVUNRQUpBQTBBQ1FDQUFMQUFBSWdKQkFFb2dBa0gvQUVkeElRUWdBU0FIVHcwQUlBUUVRQ0FCS0FJQUlBSkhEUU1MSUFGQkJHb2hBU0FBUVFGcUlBQWdCU0FBYTBFQlNoc2hBQXdCQ3dzTUFRc2dBMEVFTmdJQURBRUxJQVFFUUNBSEtBSUFRWDlxSUFKUEJFQWdBMEVFTmdJQUN3c0xDd3RDQVFGL0lBQkVBQUFBQUFBQThMODVBd0FnQUVRQUFBQUFBQUR3dnprRENDQUFRUkJxSWdKQ0FEY0NBQ0FDUVFBMkFnZ2dBaUFCSUFFUVlCQitJQUFRb0FjTENBQkJCUkFDUVFBTHJnVUNDMzhDZlNNR0lRY2pCa0VnYWlRR0lBZEJDR29oQlNBQlFYOU1CRUFnQlVIQXlBTkI5STBDRURkQnM0b0NFRGRCNzZJQ0VEZEJvZ0lRUGtIMm9nSVFOMEdXamdJUU55SURJQU1vQWdCQmRHb29BZ0JxRURzZ0JVR0F6Z01RT2lJRUtBSUFLQUljSVFJZ0JFRUtJQUpCUDNGQmlnRnFFUUlBSVFJZ0JSQThJQU1nQWhCQUlBTVFQeEFBQ3lBRklBRTJBZ0FnQUVIY0FHb2lCaUFGRU9nRElnSUVRQ0FDSUFJb0FneEJBV28yQWd3RklBY2dBVFlDQUNBSFFRRTJBZ1FDUUFKQUlBQW9BbUFpQkVVaUNnUkFRUUFoQWd3QkJTQUVJQVJCZjJvaUNYRkZJZ3NFZnlBQklBbHhCU0FFSUFGTEJIOGdBUVVnQVNBRUVFNExDeUlDUVFKMElBWW9BZ0JxS0FJQUlnTUVRQU5BSUFNb0FnQWlBMFVOQXlBREtBSUVJZ2dnQVVjRVFDQUxCSDhnQ0NBSmNRVWdDQ0FFVHdSL0lBZ2dCQkJPQlNBSUN3c2dBa2NOQkFzZ0F5Z0NDQ0FCUncwQUN3VU1BZ3NMREFFTElBVWdCaUFCSUFjUXZBY2dDaUFBS2dKc0lnMGdCTE9VSUFBb0FtaEJBV3F6SWc1ZGNnUi9BbjhnQmlBT0lBMlZqUkNTQVNJRElBUWdCRUYvYW5GQkFFY2dCRUVEU1hJZ0JFRUJkSElpQWlBQ0lBTkpHeERGQWlBQUtBSmdJZ05CZjJvaEFpQUJJQUp4SUFJZ0EzRkZEUUFhSUFNZ0FVMEVmeUFCSUFNUVRnVWdBUXNMQlNBRUlRTWdBZ3NoQVNBR0tBSUFJQUZCQW5ScUtBSUFJZ0lFZnlBRktBSUFJQUlvQWdBMkFnQWdBaUFGS0FJQU5nSUFJQVVGSUFVb0FnQWdBQ2dDWkRZQ0FDQUFJQVVvQWdBMkFtUWdCaWdDQUNBQlFRSjBhaUFBUWVRQWFqWUNBQ0FGS0FJQUlnUW9BZ0FpQVFSQUlBRW9BZ1FoQVNBRElBTkJmMm9pQW5FRWZ5QUJJQU5QQkg4Z0FTQURFRTRGSUFFTEJTQUJJQUp4Q3lFQklBWW9BZ0FnQVVFQ2RHb2dCRFlDQUFzZ0JRc2hEQ0FBSUFBb0FtaEJBV28yQW1nZ0RFRUFOZ0lBQ3dzZ0J5UUdDL1lJQVFkL0l3WWhCaU1HUVJCcUpBWWdBVUYvVEFSQUlBWkJ3TWdEUWFtT0FoQTNRYk9LQWhBM1FlK2lBaEEzUWFVQkVENUI5cUlDRURkQnlvNENFRGNpQnlBSEtBSUFRWFJxS0FJQWFoQTdJQVpCZ000REVEb2lDQ2dDQUNnQ0hDRUZJQWhCQ2lBRlFUOXhRWW9CYWhFQ0FDRUZJQVlRUENBSElBVVFRQ0FIRUQ4UUFBc2dBQ2dDTkNJS0lBRk1CRUFnQmtIQXlBTkIzSTRDRURkQnM0b0NFRGRCNzZJQ0VEZEJwZ0VRUGtIMm9nSVFOMEhLamdJUU55SUhJQWNvQWdCQmRHb29BZ0JxRURzZ0JrR0F6Z01RT2lJSUtBSUFLQUljSVFVZ0NFRUtJQVZCUDNGQmlnRnFFUUlBSVFVZ0JoQThJQWNnQlJCQUlBY1FQeEFBQ3lBQ1FYOU1CRUFnQmtIQXlBTkJoSThDRURkQnM0b0NFRGRCNzZJQ0VEZEJwd0VRUGtIMm9nSVFOMEdsandJUU55SUhJQWNvQWdCQmRHb29BZ0JxRURzZ0JrR0F6Z01RT2lJSUtBSUFLQUljSVFVZ0NFRUtJQVZCUDNGQmlnRnFFUUlBSVFVZ0JoQThJQWNnQlJCQUlBY1FQeEFBQ3lBQUtBSTRJZ3NnQWt3RVFDQUdRY0RJQTBHM2p3SVFOMEd6aWdJUU4wSHZvZ0lRTjBHb0FSQStRZmFpQWhBM1FhV1BBaEEzSWdjZ0J5Z0NBRUYwYWlnQ0FHb1FPeUFHUVlET0F4QTZJZ2dvQWdBb0Fod2hCU0FJUVFvZ0JVRS9jVUdLQVdvUkFnQWhCU0FHRUR3Z0J5QUZFRUFnQnhBL0VBQUxJQU5CZjB3RVFDQUdRY0RJQTBIZmp3SVFOMEd6aWdJUU4wSHZvZ0lRTjBHcEFSQStRZmFpQWhBM1FZU1FBaEEzSWdjZ0J5Z0NBRUYwYWlnQ0FHb1FPeUFHUVlET0F4QTZJZ2dvQWdBb0Fod2hCU0FJUVFvZ0JVRS9jVUdLQVdvUkFnQWhCU0FHRUR3Z0J5QUZFRUFnQnhBL0VBQUxJQUFvQWp3aUJ5QURUQVJBSUFaQndNZ0RRWnFRQWhBM1FiT0tBaEEzUWUraUFoQTNRYW9CRUQ1QjlxSUNFRGRCaEpBQ0VEY2lDU2dDQUVGMGFpZ0NBQ0FKYWhBN0lBWkJnTTRERURvaUNDZ0NBQ2dDSENFRklBaEJDaUFGUVQ5eFFZb0JhaEVDQUNFRklBWVFQQ0FKSUFVUVFDQUpFRDhRQUFzZ0JFRi9UQVJBSUFaQndNZ0RRY3FRQWhBM1FiT0tBaEEzUWUraUFoQTNRYXNCRUQ1QjlxSUNFRGRCNzVBQ0VEY2lDU0FKS0FJQVFYUnFLQUlBYWhBN0lBWkJnTTRERURvaUNDZ0NBQ2dDSENFRklBaEJDaUFGUVQ5eFFZb0JhaEVDQUNFRklBWVFQQ0FKSUFVUVFDQUpFRDhRQUFzZ0FFRkFheWdDQUNBRVRBUkFJQVpCd01nRFFZV1JBaEEzUWJPS0FoQTNRZStpQWhBM1Fhd0JFRDVCOXFJQ0VEZEI3NUFDRURjaUNTQUpLQUlBUVhScUtBSUFhaEE3SUFaQmdNNERFRG9pQ0NnQ0FDZ0NIQ0VGSUFoQkNpQUZRVDl4UVlvQmFoRUNBQ0VGSUFZUVBDQUpJQVVRUUNBSkVEOFFBQXNnQVNBQ0lBcHNhaUlCSUFNZ0FDZ0NWR3hxSUFRZ0FDZ0NXR3hxSWdBZ0FTQURJQVFnQjJ4cUlBb2dDMnhzYWtvRVFDQUdRY0RJQTBHMWtRSVFOMEd6aWdJUU4wSHZvZ0lRTjBHd0FSQStRZmFpQWhBM1FaYU9BaEEzSWdJZ0FpZ0NBRUYwYWlnQ0FHb1FPeUFHUVlET0F4QTZJZ0VvQWdBb0Fod2hBQ0FCUVFvZ0FFRS9jVUdLQVdvUkFnQWhBQ0FHRUR3Z0FpQUFFRUFnQWhBL0VBQUZJQVlrQmlBQUR3dEJBQXRGQVFKL0EwQUNRQ0FESUFKT0RRQWdBMEVEZENBQmFpZ0NBQ0lFUlEwQUlBQWdCRVlFUUNBRFFRTjBRUVJxSUFGcUtBSUFEd1VnQTBFQmFpRUREQUlMQUFzTFFRQUxjZ0VEZnlNR0lRTWpCa0VRYWlRR0lBSkJiMHNFUUJBQUN5QUNRUXRKQkVBZ0FDQUNPZ0FMQlNBQUlBSkJFR3BCY0hFaUJCQlJJZ1UyQWdBZ0FDQUVRWUNBZ0lCNGNqWUNDQ0FBSUFJMkFnUWdCU0VBQ3lBQUlBRWdBaENvQVNBRFFRQTZBQUFnQUNBQ2FpQURFRjhnQXlRR0N3UUFRUUFMRFFBZ0FDQURsQ0FCSUFLVWt3c2JBQ0FDQkg4Z0FDZ0NCQ0FCS0FJRUVMTUJSUVVnQUNBQlJnc0xSUUlDZndGK0lBQWdBVGNEY0NBQUlBQW9BZ2dpQWlBQUtBSUVJZ05yckNJRU53TjRJQUZDQUZJZ0JDQUJWWEVFUUNBQUlBTWdBYWRxTmdKb0JTQUFJQUkyQW1nTEN5Y0JBbjhqQmlFREl3WkJFR29rQmlBRElBSTJBZ0FnQUNBQklBTVFsUU1oQkNBREpBWWdCQXNvQVFKL0FuOGpCaUVESXdaQkVHb2tCaUFBUVFKQnpJY0JRWmpQQWtFZUlBRVFDU0FEQ3lRR0N6RUJBbjBnQVNvQ0FDQUFLZ0lBSWdPVElBSXFBZ1FnQUNvQ0JDSUVrNVFnQVNvQ0JDQUVreUFDS2dJQUlBT1RsSk1MQndBZ0FFRUlhZ3M4QVFKL0lBQW9BZ1FnQUNnQ0FDSURhMEVDZFNJQ0lBRkpCRUFnQUNBQklBSnJFUDhJQlNBQ0lBRkxCRUFnQUNBQlFRSjBJQU5xTmdJRUN3c0xFd0FnQUVHZ2l3RTJBZ0FnQUVFRWFoRG9DUXVCQVFBQ1FBSkFJQUlvQWdSQnNBRnhRUmgwUVJoMVFSQnJJZ0lFUUNBQ1FSQkdCRUFNQWdVTUF3c0FDd0pBQWtBZ0FDd0FBQ0lDUVN0ckRnTUFBUUFCQ3lBQVFRRnFJUUFNQWdzZ0FrRXdSaUFCSUFCclFRRktjVVVOQVNBQUxBQUJRZGdBYXlJQlFRQWdBVUVnUnhzTkFTQUFRUUpxSVFBTUFRc2dBU0VBQ3lBQUN3b0FJQUJCVUdwQkNra0xRUUVDZjBFTUVFUWlBZ1JBSUFJZ0FTQUFRUU4wYkJCRUlnTTJBZ0FnQXdSQUlBSWdBRFlDQkNBQ0lBRTJBZ2dGSUFJUU9FRUFJUUlMQlVFQUlRSUxJQUlMM0FFQkFYOGdBQ2dDQUNFQ0lBQWdBU2dDQURZQ0FDQUJJQUkyQWdBZ0FDZ0NCQ0VDSUFBZ0FTZ0NCRFlDQkNBQklBSTJBZ1FnQUNnQ0NDRUNJQUFnQVNnQ0NEWUNDQ0FCSUFJMkFnZ2dBQ2dDRENFQ0lBQWdBU2dDRERZQ0RDQUJJQUkyQWd3Z0FDZ0NFQ0VDSUFBZ0FTZ0NFRFlDRUNBQklBSTJBaEFnQUNnQ0ZDRUNJQUFnQVNnQ0ZEWUNGQ0FCSUFJMkFoUWdBQ2dDR0NFQ0lBQWdBU2dDR0RZQ0dDQUJJQUkyQWhnZ0FDZ0NIQ0VDSUFBZ0FTZ0NIRFlDSENBQklBSTJBaHdnQUNnQ0lDRUNJQUFnQVNnQ0lEWUNJQ0FCSUFJMkFpQUxGUUFnQUFSL0lBQWdBVGtEZ0FGQkFBVkJmd3NhQzdnQ0FnVi9BbndqQmlFSEl3WkJJR29rQmlBSFFRaHFJUVlnQjBFVWFpSUlJQVJCQkhRUVJDSUtOZ0lBSUFwRkJFQkJBRUVEUWJuWUFpQUdFRDFCQVJBQkN5QUhRUkJxSVFZZ0NDQUVRUmhzRUVRaUNUWUNCQ0FKUlFSQVFRQkJBMEc1MkFJZ0JoQTlRUUVRQVF0QkFDRUdBMEFnQmlBRVNBUkFJQVpCQkhRZ0Ntb2dCa0VFZENBQ2Fpc0RBRGtEQUNBR1FRUjBJQXBxSUFaQkJIUWdBbW9yQXdnNUF3Z2dCa0VZYkNBSmFpQUdRUmhzSUFOcUt3TUFPUU1BSUFaQkdHd2dDV29nQmtFWWJDQURhaXNEQ0RrRENDQUdRUmhzSUFscUlBWkJHR3dnQTJvckF4QTVBeEFnQmtFQmFpRUdEQUVMQ3lBSUlBUTJBZ2dnQUNnQ0FDQUlJQUVnQlNBSEVKMEVRUUJJQkVBZ0IwUUFBQUFBaE5lWFFUa0RBQXNnQ0NnQ0FCQTRJQWdvQWdRUU9DQUhLd01BSVF3Z0J5UUdJQXdMTlFBZ0FFSUFOd0lBSUFCQkFEWUNDRUVBSVFFRFFDQUJRUU5IQkVBZ0FVRUNkQ0FBYWtFQU5nSUFJQUZCQVdvaEFRd0JDd3NMVVFFQmZDQUFJQUNpSWdBZ0FLSWhBVVFBQUFBQUFBRHdQeUFBUklGZURQMy8vOTgvb3FFZ0FVUkNPZ1hoVTFXbFA2S2dJQUFnQWFJZ0FFUnBVTzdnUXBQNVBxSkVKeDRQNklmQVZyK2dvcUMyQzBzQkFud2dBQ0FBb2lJQklBQ2lJZ0lnQVNBQm9xSWdBVVNuUmp1TWg4M0dQcUpFZE9mSzR2a0FLcitnb2lBQ0lBRkVzdnR1aVJBUmdUK2lSSGVzeTFSVlZjVy9vS0lnQUtDZ3Rnc3NBQ0FBSUFCY0JIOUJBQVVnQUVNQUFJQlBZQVIvUVFBRklBQkRBQUNBdjE4RWYwRUFCU0FBcVFzTEN3czBBUUYvSUFFZ0Ftd2hCQ0FDUVFBZ0FSc2hBaUFES0FKTUdpQUVJQUFnQkNBREVKY0RJZ0JIQkg4Z0FDQUJFRWdGSUFJTEMzY0FJQUFnQVNvQ0FDQUNsRGdDQUNBQUlBRXFBZ1FnQXBRNEFnUWdBQ0FCS2dJSUlBS1VPQUlJSUFBZ0FTb0NEQ0FDbERnQ0RDQUFJQUVxQWhBZ0FwUTRBaEFnQUNBQktnSVVJQUtVT0FJVUlBQWdBU29DR0NBQ2xEZ0NHQ0FBSUFFcUFod2dBcFE0QWh3Z0FDQUJLZ0lnSUFLVU9BSWdDMEVCQVg4Z0FDZ0NCQ0lBQkVBZ0FDQUFLQUlFSWdGQmYybzJBZ1FnQVVVRVFDQUFLQUlBS0FJSUlRRWdBQ0FCUWY4QmNVR3NBMm9SQVFBZ0FCRHFDUXNMQzUwQkFRVi9Jd1loQWlNR1FTQnFKQVpCLy8vLy93RWdBQ2dDQkNBQUtBSUFhMEVEZFVFQmFpSURTUVJBRUFBRklBSWdBeUFBS0FJSUlBQW9BZ0FpQkdzaUJVRUNkU0lHSUFZZ0Ewa2JRZi8vLy84QklBVkJBM1ZCLy8vLy93QkpHeUFBS0FJRUlBUnJRUU4xSUFCQkNHb1FpQUlnQWlnQ0NDQUJLUUlBTndJQUlBSWdBaWdDQ0VFSWFqWUNDQ0FBSUFJUXpRSWdBaERNQWlBQ0pBWUxDNlFDQVFWL0l3WWhCeU1HUVJCcUpBWWdBQ2dDQUNJR0JFQUNRQ0FFS0FJTUlRZ2dBaUFCYXlJSlFRQktCRUFnQmlnQ0FDZ0NNQ0VLSUFZZ0FTQUpJQXBCUDNGQnlnRnFFUVFBSUFsSEJFQWdBRUVBTmdJQVFRQWhCZ3dDQ3dzZ0NDQURJQUZySWdGclFRQWdDQ0FCU2hzaUFVRUFTZ1JBSUFkQ0FEY0NBQ0FIUVFBMkFnZ2dCeUFCSUFVUWxnUWdCaWdDQUNnQ01DRUZJQVlnQnlnQ0FDQUhJQWNzQUF0QkFFZ2JJQUVnQlVFL2NVSEtBV29SQkFBZ0FVWUVRQ0FIRUVjRklBQkJBRFlDQUNBSEVFZEJBQ0VHREFJTEN5QURJQUpySWdGQkFFb0VRQ0FHS0FJQUtBSXdJUU1nQmlBQ0lBRWdBMEUvY1VIS0FXb1JCQUFnQVVjRVFDQUFRUUEyQWdCQkFDRUdEQUlMQ3lBRVFRQTJBZ3dMQlVFQUlRWUxJQWNrQmlBR0N3Z0FRUWtRQWtFQUM3VUhBUWgvSUFBb0FnQWlCd1IvSUFjb0Fnd2lCaUFIS0FJUVJnUi9JQWNnQnlnQ0FDZ0NKRUgvQUhGQkNHb1JBQUFGSUFZb0FnQUxRWDhRUVFSL0lBQkJBRFlDQUVFQkJTQUFLQUlBUlFzRlFRRUxJUVlDUUFKQUFrQWdBU2dDQUNJSEJFQWdCeWdDRENJRklBY29BaEJHQkg4Z0J5QUhLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdCU2dDQUF0QmZ4QkJCRUFnQVVFQU5nSUFCU0FHQkVBTUJBVU1Bd3NBQ3dzZ0JrVUVRRUVBSVFjTUFnc0xJQUlnQWlnQ0FFRUdjallDQUVFQUlRY01BUXNnQTBHQUVDQUFLQUlBSWdZb0Fnd2lCU0FHS0FJUVJnUi9JQVlnQmlnQ0FDZ0NKRUgvQUhGQkNHb1JBQUFGSUFVb0FnQUxJZ1lnQXlnQ0FDZ0NERUUvY1VIS0FXb1JCQUJGQkVBZ0FpQUNLQUlBUVFSeU5nSUFRUUFoQnd3QkN5QURJQVpCQUNBREtBSUFLQUkwUVQ5eFFjb0JhaEVFQUNFTElBQW9BZ0FpQmlnQ0RDSUZJQVlvQWhCR0JFQWdCaUFHS0FJQUtBSW9RZjhBY1VFSWFoRUFBQm9GSUFZZ0JVRUVhallDRENBRktBSUFHZ3NnQzBFWWRFRVlkU0VGSUFRaEJpQUhJZ1FoQ0FOQUFrQWdCVUZRYWlFSElBQW9BZ0FpQlFSL0lBVW9BZ3dpQ1NBRktBSVFSZ1IvSUFVZ0JTZ0NBQ2dDSkVIL0FIRkJDR29SQUFBRklBa29BZ0FMUVg4UVFRUi9JQUJCQURZQ0FFRUJCU0FBS0FJQVJRc0ZRUUVMQW44Z0NBUi9JQWdvQWd3aUJTQUlLQUlRUmdSL0lBZ2dDQ2dDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQVVvQWdBTFFYOFFRUVIvSUFGQkFEWUNBRUVBSVFSQkFDRUlRUUVGUVFBTEJVRUFJUWhCQVFzaERDQUFLQUlBSVFVZ0RBdHpJQVpCQVVweFJRMEFJQU5CZ0JBZ0JTZ0NEQ0lKSUFVb0FoQkdCSDhnQlNBRktBSUFLQUlrUWY4QWNVRUlhaEVBQUFVZ0NTZ0NBQXNpQlNBREtBSUFLQUlNUVQ5eFFjb0JhaEVFQUVVTkFpQURJQVZCQUNBREtBSUFLQUkwUVQ5eFFjb0JhaEVFQUNFS0lBQW9BZ0FpQlNnQ0RDSUpJQVVvQWhCR0JFQWdCU0FGS0FJQUtBSW9RZjhBY1VFSWFoRUFBQm9GSUFVZ0NVRUVhallDRENBSktBSUFHZ3NnQjBFS2JDQUtRUmgwUVJoMWFpRUZJQVpCZjJvaEJnd0JDd3NnQlFSL0lBVW9BZ3dpQXlBRktBSVFSZ1IvSUFVZ0JTZ0NBQ2dDSkVIL0FIRkJDR29SQUFBRklBTW9BZ0FMUVg4UVFRUi9JQUJCQURZQ0FFRUJCU0FBS0FJQVJRc0ZRUUVMSVFBQ1FBSkFJQVJGRFFBZ0JDZ0NEQ0lESUFRb0FoQkdCSDhnQkNBRUtBSUFLQUlrUWY4QWNVRUlhaEVBQUFVZ0F5Z0NBQXRCZnhCQkJFQWdBVUVBTmdJQURBRUZJQUFOQXdzTUFRc2dBRVVOQVFzZ0FpQUNLQUlBUVFKeU5nSUFDeUFIQyt3SEFRaC9JQUFvQWdBaUJRUi9JQVVvQWd3aUNDQUZLQUlRUmdSL0lBVWdCU2dDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQWdzQUFBUVFndEJmeEJCQkg4Z0FFRUFOZ0lBUVFFRklBQW9BZ0JGQ3dWQkFRc2hCUUpBQWtBQ1FDQUJLQUlBSWdrRVFDQUpLQUlNSWdnZ0NTZ0NFRVlFZnlBSklBa29BZ0FvQWlSQi93QnhRUWhxRVFBQUJTQUlMQUFBRUVJTFFYOFFRUVJBSUFGQkFEWUNBQVVnQlFSQURBUUZEQU1MQUFzTElBVkZCRUJCQUNFSkRBSUxDeUFDSUFJb0FnQkJCbkkyQWdCQkFDRUVEQUVMSUFBb0FnQWlCU2dDRENJSUlBVW9BaEJHQkg4Z0JTQUZLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdDQ3dBQUJCQ0N5SUZRZjhCY1NJSVFSaDBRUmgxUVg5S0JFQWdBeWdDQ0NBRlFSaDBRUmgxUVFGMGFpNEJBRUdBRUhFRVFDQURJQWhCQUNBREtBSUFLQUlrUVQ5eFFjb0JhaEVFQUNFTElBQW9BZ0FpQmlnQ0RDSUZJQVlvQWhCR0JFQWdCaUFHS0FJQUtBSW9RZjhBY1VFSWFoRUFBQm9GSUFZZ0JVRUJhallDRENBRkxBQUFFRUlhQ3lBTFFSaDBRUmgxSVFZZ0JDRUlJQWtoQlFOQUFrQWdCa0ZRYWlFRUlBQW9BZ0FpQ2dSL0lBb29BZ3dpQmlBS0tBSVFSZ1IvSUFvZ0NpZ0NBQ2dDSkVIL0FIRkJDR29SQUFBRklBWXNBQUFRUWd0QmZ4QkJCSDhnQUVFQU5nSUFRUUVGSUFBb0FnQkZDd1ZCQVFzaENpQUZCSDhnQlNnQ0RDSUdJQVVvQWhCR0JIOGdCU0FGS0FJQUtBSWtRZjhBY1VFSWFoRUFBQVVnQml3QUFCQkNDMEYvRUVFRWZ5QUJRUUEyQWdCQkFDRUpRUUFoQlVFQkJVRUFDd1ZCQUNFRlFRRUxJUXdnQUNnQ0FDRUhJQXdnQ25NZ0NFRUJTbkZGRFFBZ0J5Z0NEQ0lHSUFjb0FoQkdCSDhnQnlBSEtBSUFLQUlrUWY4QWNVRUlhaEVBQUFVZ0Jpd0FBQkJDQ3lJS1FmOEJjU0lHUVJoMFFSaDFRWDlNRFFRZ0F5Z0NDQ0FLUVJoMFFSaDFRUUYwYWk0QkFFR0FFSEZGRFFRZ0F5QUdRUUFnQXlnQ0FDZ0NKRUUvY1VIS0FXb1JCQUFoQmlBQUtBSUFJZ2NvQWd3aUNpQUhLQUlRUmdSQUlBY2dCeWdDQUNnQ0tFSC9BSEZCQ0dvUkFBQWFCU0FISUFwQkFXbzJBZ3dnQ2l3QUFCQkNHZ3NnQkVFS2JDQUdRUmgwUVJoMWFpRUdJQWhCZjJvaENBd0JDd3NnQndSL0lBY29BZ3dpQXlBSEtBSVFSZ1IvSUFjZ0J5Z0NBQ2dDSkVIL0FIRkJDR29SQUFBRklBTXNBQUFRUWd0QmZ4QkJCSDhnQUVFQU5nSUFRUUVGSUFBb0FnQkZDd1ZCQVFzaEF3SkFBa0FnQ1VVTkFDQUpLQUlNSWdBZ0NTZ0NFRVlFZnlBSklBa29BZ0FvQWlSQi93QnhRUWhxRVFBQUJTQUFMQUFBRUVJTFFYOFFRUVJBSUFGQkFEWUNBQXdCQlNBRERRVUxEQUVMSUFORkRRTUxJQUlnQWlnQ0FFRUNjallDQUF3Q0N3c2dBaUFDS0FJQVFRUnlOZ0lBUVFBaEJBc2dCQXMzQVFKL0l3WWhCQ01HUVJCcUpBWWdCQ0FETmdJQUlBRVFZaUVCSUFBZ0FpQUVFUFFFSVFVZ0FRUkFJQUVRWWhvTElBUWtCaUFGQzJ3QUFuOENRQUpBQWtBQ1FDQUFLQUlFUWNvQWNRNUJBZ01EQXdNREF3TUJBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd0FEQzBFSURBTUxRUkFNQWd0QkFBd0JDMEVLQ3d2ekF3RUdmd0pBQWtBZ0Fid2lCVUgvLy8vL0IzRWlCa0dBZ0lEOEIwc05BQ0FBdkNJQ1FmLy8vLzhIY1NJRFFZQ0FnUHdIU3cwQUFrQWdCVUdBZ0lEOEEwWUVRQ0FBRVBRQ0lRQU1BUXNnQWtFZmRpSUhJQVZCSG5aQkFuRnlJUUlnQTBVRVFBSkFBa0FDUUNBQ1FRTnhEZ1FFQkFBQkFndEQydzlKUUNFQURBTUxROXNQU2NBaEFBd0NDd3NDUUNBRlFmLy8vLzhIY1NJRVFZQ0FnUHdIU0FSQUlBUU5BVVBiRDhtL1E5c1B5VDhnQnhzaEFBd0NCU0FFUVlDQWdQd0hhdzBCSUFKQi93RnhJUVFnQTBHQWdJRDhCMFlFUUFKQUFrQUNRQUpBQWtBZ0JFRURjUTRFQUFFQ0F3UUxROXNQU1Q4aEFBd0hDMFBiRDBtL0lRQU1CZ3RENU1zV1FDRUFEQVVMUStUTEZzQWhBQXdFQ3dVQ1FBSkFBa0FDUUFKQUlBUkJBM0VPQkFBQkFnTUVDME1BQUFBQUlRQU1Cd3REQUFBQWdDRUFEQVlMUTlzUFNVQWhBQXdGQzBQYkQwbkFJUUFNQkFzTEN3c2dBMEdBZ0lEOEIwWWdCa0dBZ0lEb0FHb2dBMGx5QkVCRDJ3L0p2MFBiRDhrL0lBY2JJUUFNQVFzZ0JVRUFTQ0FEUVlDQWdPZ0FhaUFHU1hFRWZVTUFBQUFBQlNBQUlBR1ZpeEQwQWdzaEFBSkFBa0FDUUNBQ1FRTnhEZ01EQUFFQ0N5QUFqQ0VBREFJTFE5c1BTVUFnQUVNdXZic3prcE1oQUF3QkN5QUFReTY5dXpPU1E5c1BTY0NTSVFBTERBRUxJQUFnQVpJaEFBc2dBQXVqQWdBZ0FBUi9BbjhnQVVHQUFVa0VRQ0FBSUFFNkFBQkJBUXdCQzBIb2lRRW9BZ0FvQWdCRkJFQWdBVUdBZjNGQmdMOERSZ1JBSUFBZ0FUb0FBRUVCREFJRlFhVEZBMEVaTmdJQVFYOE1BZ3NBQ3lBQlFZQVFTUVJBSUFBZ0FVRUdka0hBQVhJNkFBQWdBQ0FCUVQ5eFFZQUJjam9BQVVFQ0RBRUxJQUZCZ0VCeFFZREFBMFlnQVVHQXNBTkpjZ1JBSUFBZ0FVRU1ka0hnQVhJNkFBQWdBQ0FCUVFaMlFUOXhRWUFCY2pvQUFTQUFJQUZCUDNGQmdBRnlPZ0FDUVFNTUFRc2dBVUdBZ0h4cVFZQ0F3QUJKQkg4Z0FDQUJRUkoyUWZBQmNqb0FBQ0FBSUFGQkRIWkJQM0ZCZ0FGeU9nQUJJQUFnQVVFR2RrRS9jVUdBQVhJNkFBSWdBQ0FCUVQ5eFFZQUJjam9BQTBFRUJVR2t4UU5CR1RZQ0FFRi9Dd3NGUVFFTEM2a0JBUUovSUFGQi93ZEtCRUFnQUVRQUFBQUFBQURnZjZJaUFFUUFBQUFBQUFEZ2Y2SWdBQ0FCUWY0UFNpSUNHeUVBSUFGQmduQnFJZ05CL3djZ0EwSC9CMGdiSUFGQmdYaHFJQUliSVFFRklBRkJnbmhJQkVBZ0FFUUFBQUFBQUFBUUFLSWlBRVFBQUFBQUFBQVFBS0lnQUNBQlFZUndTQ0lDR3lFQUlBRkIvQTlxSWdOQmduZ2dBMEdDZUVvYklBRkIvZ2RxSUFJYklRRUxDeUFBSUFGQi93ZHFyVUkwaHIraUM1c0NBUUovSUFJZ0JFZ0VRQ0FBSUFFZ0FpQUVFR2NFZnlBQUtBSUlJUVVnQUNnQ0RBVkJmdzhMSVFJRklBRWhCUXNnQkVFQ2RFSHdNV29vQWdBZ0JTQUNJQVJySWdGMWNTSUdJQVJCQW5RZ0Eyb29BZ0JLQkVBQ1FDQUZJUUlEUUFKQUlBRkJBVWdFUUNBQUlBSWdBVUVCRUdkRkRRRWdBQ2dDQ0NFQ0lBQW9BZ3doQVFzZ0FpQUJRWDlxSWdGMlFRRnhJQVpCQVhSeUlnWWdCRUVCYWlJRVFRSjBJQU5xS0FJQVNnMEJEQUlMQzBGL0R3c0ZJQVVoQWdzZ0FDQUNOZ0lJSUFBZ0FUWUNEQ0FFUVJCS0JIOGdBQ2dDRUNJQUtBSUFJZ0ZCK1FBMkFoUWdBU2dDQkNFQklBQkJmeUFCUVQ5eFFiSUZhaEVEQUVFQUJTQUdJQU5CeUFCcUlBUkJBblJxS0FJQWFpQURLQUtNQVVFUmFtb3RBQUFMQzVNQ0FnRi9BbjBnQUNBQklBSkJBblFnQVdvcUFnQ01FSlFCSUFKQkFuUWdBR29pQXlBREtnSUFRd0FBZ0QrU09BSUFJQUFnQVVFa2FpQUNRUWxxUVFKMElBRnFLZ0lBakJDNUFTQUFJQUZCeUFCcUlBSkJFbXBCQW5RZ0FXb3FBZ0NNRUxrQklBQWdBVUhzQUdvZ0FrRWJha0VDZENBQmFpb0NBSXdRdVFFZ0FDQUJRWkFCYWlBQ1FTUnFRUUowSUFGcUtnSUFqQkM1QVNBQUlBRkJ0QUZxSUFKQkxXcEJBblFnQVdvcUFnQ01FTGtCSUFBZ0FVSFlBV29nQWtFMmFrRUNkQ0FCYWlvQ0FJd1F1UUVnQUNBQlFmd0JhaUFDUVQ5cVFRSjBJQUZxS2dJQWpCQzVBU0FBRUZvaUJaRWhCQ0FGUXdBQUFBQmJCRUJEQUFBQUFDRUVCU0FBSUFCREFBQ0FQeUFFbFJDVUFRc2dCQXNHQUVFVUVBSUwvZ2tCQ244akJpRU5Jd1pCRUdva0JpQU5RUWhxSVJBZ0RVRU1haUlPSUFNUU95QU9RYURPQXhBNklRc2dEaEE4SUFSQkFEWUNBQUpBQWtBRFFBSkFJQUVvQWdBaENDQUpSU0FHSUFkSGNVVU5BQ0FJSWdrRWZ5QUpLQUlNSWdnZ0NTZ0NFRVlFZnlBSklBa29BZ0FvQWlSQi93QnhRUWhxRVFBQUJTQUlLQUlBQzBGL0VFRUVmeUFCUVFBMkFnQkJBU0VNUVFBaENVRUFCVUVBSVF3Z0NRc0ZRUUVoREVFQUN5RUlJQUlvQWdBaUNpRVJBa0FDUUNBS1JRMEFJQW9vQWd3aUR5QUtLQUlRUmdSL0lBb2dDaWdDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQThvQWdBTFFYOFFRUVJBSUFKQkFEWUNBRUVBSVJFTUFRVWdERVVOQlFzTUFRc2dEQTBEUVFBaENnc2dDeUFHS0FJQVFRQWdDeWdDQUNnQ05FRS9jVUhLQVdvUkJBQkIvd0Z4UVNWR0JFQWdCeUFHUVFScUlneEdEUU1DUUNBTElBd29BZ0JCQUNBTEtBSUFLQUkwUVQ5eFFjb0JhaEVFQUNJS1FSaDBRUmgxUVRCcklnOUJBQ0FQUVJWSEcwVUVRQ0FISUFaQkNHcEdEUVVnQ2lFSUlBc2dCaWdDQ0VFQUlBc29BZ0FvQWpSQlAzRkJ5Z0ZxRVFRQUlRb2dEQ0VHREFFTFFRQWhDQXNnQUNnQ0FDZ0NKQ0VNSUEwZ0NUWUNCQ0FOSUJFMkFnQWdFQ0FOS0FJRU5nSUFJQTRnRFNnQ0FEWUNBQ0FCSUFBZ0VDQU9JQU1nQkNBRklBb2dDQ0FNUVE5eFFZNERhaEVPQURZQ0FDQUdRUWhxSVFZRkFrQWdDMEdBd0FBZ0JpZ0NBQ0FMS0FJQUtBSU1RVDl4UWNvQmFoRUVBRVVFUUNBTElBZ29BZ3dpQ1NBSUtBSVFSZ1IvSUFnZ0NDZ0NBQ2dDSkVIL0FIRkJDR29SQUFBRklBa29BZ0FMSUFzb0FnQW9BaHhCUDNGQmlnRnFFUUlBSVFrZ0N5QUdLQUlBSUFzb0FnQW9BaHhCUDNGQmlnRnFFUUlBSUFsSEJFQWdCRUVFTmdJQURBSUxJQWdvQWd3aUNTQUlLQUlRUmdSQUlBZ2dDQ2dDQUNnQ0tFSC9BSEZCQ0dvUkFBQWFCU0FJSUFsQkJHbzJBZ3dnQ1NnQ0FCb0xJQVpCQkdvaEJnd0JDd05BQWtBZ0J5QUdRUVJxSWdaR0JFQWdCeUVHREFFTElBdEJnTUFBSUFZb0FnQWdDeWdDQUNnQ0RFRS9jVUhLQVdvUkJBQU5BUXNMSUFvaENRTkFJQWdFZnlBSUtBSU1JZ29nQ0NnQ0VFWUVmeUFJSUFnb0FnQW9BaVJCL3dCeFFRaHFFUUFBQlNBS0tBSUFDMEYvRUVFRWZ5QUJRUUEyQWdCQkFDRUlRUUVGUVFBTEJVRUFJUWhCQVFzaENnSkFBa0FnQ1VVTkFDQUpLQUlNSWd3Z0NTZ0NFRVlFZnlBSklBa29BZ0FvQWlSQi93QnhRUWhxRVFBQUJTQU1LQUlBQzBGL0VFRUVRQ0FDUVFBMkFnQU1BUVVnQ2tVTkJBc01BUXNnQ2cwQ1FRQWhDUXNnQzBHQXdBQWdDQ2dDRENJS0lBZ29BaEJHQkg4Z0NDQUlLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdDaWdDQUFzZ0N5Z0NBQ2dDREVFL2NVSEtBV29SQkFCRkRRRWdDQ2dDRENJS0lBZ29BaEJHQkVBZ0NDQUlLQUlBS0FJb1FmOEFjVUVJYWhFQUFCb0ZJQWdnQ2tFRWFqWUNEQ0FLS0FJQUdnc01BQUFMQUFzTElBUW9BZ0FoQ1F3QkN3c01BUXNnQkVFRU5nSUFDeUFJQkg4Z0NDZ0NEQ0lBSUFnb0FoQkdCSDhnQ0NBSUtBSUFLQUlrUWY4QWNVRUlhaEVBQUFVZ0FDZ0NBQXRCZnhCQkJIOGdBVUVBTmdJQVFRQWhDRUVCQlVFQUN3VkJBQ0VJUVFFTElRRUNRQUpBQWtBZ0FpZ0NBQ0lBUlEwQUlBQW9BZ3dpQXlBQUtBSVFSZ1IvSUFBZ0FDZ0NBQ2dDSkVIL0FIRkJDR29SQUFBRklBTW9BZ0FMUVg4UVFRUkFJQUpCQURZQ0FBd0JCU0FCUlEwQ0N3d0NDeUFCRFFBTUFRc2dCQ0FFS0FJQVFRSnlOZ0lBQ3lBTkpBWWdDQXV0Q2dFS2Z5TUdJUTBqQmtFUWFpUUdJQTFCQ0dvaEVDQU5RUXhxSWc0Z0F4QTdJQTVCZ000REVEb2hEQ0FPRUR3Z0JFRUFOZ0lBQWtBQ1FBTkFBa0FnQVNnQ0FDRUlJQWxGSUFZZ0IwZHhSUTBBSUFnaUNRUi9JQWtvQWd3aUNDQUpLQUlRUmdSL0lBa2dDU2dDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQWdzQUFBUVFndEJmeEJCQkg4Z0FVRUFOZ0lBUVFFaEMwRUFJUWxCQUFWQkFDRUxJQWtMQlVFQklRdEJBQXNoQ0NBQ0tBSUFJZ29oRVFKQUFrQWdDa1VOQUNBS0tBSU1JZzhnQ2lnQ0VFWUVmeUFLSUFvb0FnQW9BaVJCL3dCeFFRaHFFUUFBQlNBUExBQUFFRUlMUVg4UVFRUkFJQUpCQURZQ0FFRUFJUkVNQVFVZ0MwVU5CUXNNQVFzZ0N3MERRUUFoQ2dzZ0RDQUdMQUFBUVFBZ0RDZ0NBQ2dDSkVFL2NVSEtBV29SQkFCQi93RnhRU1ZHQkVBZ0J5QUdRUUZxSWd0R0RRTUNRQ0FNSUFzc0FBQkJBQ0FNS0FJQUtBSWtRVDl4UWNvQmFoRUVBQ0lLUVJoMFFSaDFRVEJySWc5QkFDQVBRUlZIRzBVRVFDQUhJQVpCQW1wR0RRVWdDaUVJSUF3Z0Jpd0FBa0VBSUF3b0FnQW9BaVJCUDNGQnlnRnFFUVFBSVFvZ0N5RUdEQUVMUVFBaENBc2dBQ2dDQUNnQ0pDRUxJQTBnQ1RZQ0JDQU5JQkUyQWdBZ0VDQU5LQUlFTmdJQUlBNGdEU2dDQURZQ0FDQUJJQUFnRUNBT0lBTWdCQ0FGSUFvZ0NDQUxRUTl4UVk0RGFoRU9BRFlDQUNBR1FRSnFJUVlGQWtBZ0Jpd0FBQ0lKUVg5S0JFQWdEQ2dDQ0NJTElBbEJBWFJxTGdFQVFZREFBSEVFUUFOQUFrQWdCeUFHUVFGcUlnWkdCRUFnQnlFR0RBRUxJQVlzQUFBaUNVRi9UQTBBSUFsQkFYUWdDMm91QVFCQmdNQUFjUTBCQ3dzZ0NpRUpBMEFnQ0FSL0lBZ29BZ3dpQ2lBSUtBSVFSZ1IvSUFnZ0NDZ0NBQ2dDSkVIL0FIRkJDR29SQUFBRklBb3NBQUFRUWd0QmZ4QkJCSDhnQVVFQU5nSUFRUUFoQ0VFQkJVRUFDd1ZCQUNFSVFRRUxJUW9DUUFKQUlBbEZEUUFnQ1NnQ0RDSUxJQWtvQWhCR0JIOGdDU0FKS0FJQUtBSWtRZjhBY1VFSWFoRUFBQVVnQ3l3QUFCQkNDMEYvRUVFRVFDQUNRUUEyQWdBTUFRVWdDa1VOQmdzTUFRc2dDZzBFUVFBaENRc2dDQ2dDRENJS0lBZ29BaEJHQkg4Z0NDQUlLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdDaXdBQUJCQ0N5SUtRZjhCY1VFWWRFRVlkVUYvVEEwRElBd29BZ2dnQ2tFWWRFRVlkVUVCZEdvdUFRQkJnTUFBY1VVTkF5QUlLQUlNSWdvZ0NDZ0NFRVlFUUNBSUlBZ29BZ0FvQWloQi93QnhRUWhxRVFBQUdnVWdDQ0FLUVFGcU5nSU1JQW9zQUFBUVFob0xEQUFBQ3dBTEN5QU1JQWdvQWd3aUNTQUlLQUlRUmdSL0lBZ2dDQ2dDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQWtzQUFBUVFndEIvd0Z4SUF3b0FnQW9BZ3hCUDNGQmlnRnFFUUlBUWY4QmNTQU1JQVlzQUFBZ0RDZ0NBQ2dDREVFL2NVR0tBV29SQWdCQi93RnhSd1JBSUFSQkJEWUNBQXdCQ3lBSUtBSU1JZ2tnQ0NnQ0VFWUVRQ0FJSUFnb0FnQW9BaWhCL3dCeFFRaHFFUUFBR2dVZ0NDQUpRUUZxTmdJTUlBa3NBQUFRUWhvTElBWkJBV29oQmdzTElBUW9BZ0FoQ1F3QkN3c01BUXNnQkVFRU5nSUFDeUFJQkg4Z0NDZ0NEQ0lBSUFnb0FoQkdCSDhnQ0NBSUtBSUFLQUlrUWY4QWNVRUlhaEVBQUFVZ0FDd0FBQkJDQzBGL0VFRUVmeUFCUVFBMkFnQkJBQ0VJUVFFRlFRQUxCVUVBSVFoQkFRc2hBUUpBQWtBQ1FDQUNLQUlBSWdCRkRRQWdBQ2dDRENJRElBQW9BaEJHQkg4Z0FDQUFLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdBeXdBQUJCQ0MwRi9FRUVFUUNBQ1FRQTJBZ0FNQVFVZ0FVVU5BZ3NNQWdzZ0FRMEFEQUVMSUFRZ0JDZ0NBRUVDY2pZQ0FBc2dEU1FHSUFnTHRRSUJCWDhqQmlFSEl3WkJFR29rQmlBQUtBSUFJZ1lFUUFKQUlBUW9BZ3doQ1NBQ0lBRnJJZ2hCQW5VaENpQUlRUUJLQkVBZ0JpZ0NBQ2dDTUNFSUlBWWdBU0FLSUFoQlAzRkJ5Z0ZxRVFRQUlBcEhCRUFnQUVFQU5nSUFRUUFoQmd3Q0N3c2dDU0FESUFGclFRSjFJZ0ZyUVFBZ0NTQUJTaHNpQVVFQVNnUkFJQWRDQURjQ0FDQUhRUUEyQWdnZ0J5QUJJQVVRa3dRZ0JpZ0NBQ2dDTUNFRklBWWdCeWdDQUNBSElBY3NBQXRCQUVnYklBRWdCVUUvY1VIS0FXb1JCQUFnQVVZRVFDQUhFRWNGSUFCQkFEWUNBQ0FIRUVkQkFDRUdEQUlMQ3lBRElBSnJJZ05CQW5VaEFTQURRUUJLQkVBZ0JpZ0NBQ2dDTUNFRElBWWdBaUFCSUFOQlAzRkJ5Z0ZxRVFRQUlBRkhCRUFnQUVFQU5nSUFRUUFoQmd3Q0N3c2dCRUVBTmdJTUN3VkJBQ0VHQ3lBSEpBWWdCZ3QrQVFOL0lBRkRBQUFBUDVJUVF5QUFLQUlRYWlFRklBSkRBQUFBUDVJUVF5QUFLQUlVYWlFR0lBVkJBRWdFZjBGL0JTQUdRUUJJSUFVZ0FDZ0NDQ0lIVG5JRWYwRi9CU0FHSUFBb0FneElCSDhnQXlBQUtBSUVJQVlnQjJ3Z0JXcEJBM1JxSWdBb0FnQTJBZ0FnQkNBQUtBSUVOZ0lBUVFBRlFYOExDd3NMRUFBZ0FnUkFJQUFnQVNBQ0VQb0VDd3NRQUNBQ0JFQWdBQ0FCSUFJUVRCb0xDNzhCQVFKL0l3WWhCQ01HUWFBQmFpUUdJQVJCa0FGcUlRVWdCRUdZOWdCQmtBRVFUQm9DUUFKQUlBRkJmMnBCL3YvLy93ZE5EUUFnQVFSL1FhVEZBMEU5TmdJQVFYOEZJQVVoQUVFQklRRU1BUXNoQUF3QkN5QUVRWDRnQUdzaUJTQUJJQUVnQlVzYklnRTJBakFnQkNBQU5nSVVJQVFnQURZQ0xDQUVJQUFnQVdvaUFEWUNFQ0FFSUFBMkFod2dCQ0FDSUFNUXBRSWhBQ0FCQkVBZ0JDZ0NGQ0lCSUFFZ0JDZ0NFRVpCSDNSQkgzVnFRUUE2QUFBTEN5QUVKQVlnQUF0ckFRTjlJQUVxQWlBZ0FTb0NHQ0FDS2dJQUlnU1VJQUVxQWh3Z0Fpb0NCQ0lGbEpLU0lRTWdBQ0FCS2dJSUlBUWdBU29DQUpRZ0JTQUJLZ0lFbEpLU0lBT1ZPQUlBSUFBZ0FTb0NGQ0FCS2dJTUlBSXFBZ0NVSUFFcUFoQWdBaW9DQkpTU2tpQURsVGdDQkF1ZkFnSUVmd1Y4SUFOQkFuUWdBV29vQWdBaUNpQUNRUUowSUFGcUtBSUFJZ2hydHlFTUlBSkJBblFnQUdvb0FnQWlDU0FEUVFKMElBQnFLQUlBSWdkcnR5RU5JQWNnQ0d3Z0NTQUtiR3UzSVE4Z0FrRUJhaUlISVFnRFFDQUhJQU5JQkVBZ0J5QUlJQXdnQjBFQ2RDQUFhaWdDQUxlaUlBMGdCMEVDZENBQmFpZ0NBTGVpb0NBUG9DSU9JQTZpSWc0Z0MyUWlDUnNoQ0NBSFFRRnFJUWNnRGlBTElBa2JJUXNNQVFzTEFuOENRQ0FMSUF3Z0RLSWdEU0FOb3FDaklBUmtSUTBBSUFBZ0FTQUNJQWdnQkNBRklBWVFxd0ZCQUU0RVFDQUdLQUlBSWdKQkJVd0VRQ0FDUVFKMElBVnFJQWcyQWdBZ0JpQUdLQUlBUVFGcU5nSUFJQUFnQVNBSUlBTWdCQ0FGSUFZUXF3RkJBRTROQWdzTFFYOE1BUXRCQUFzTG5nSUJCWDhqQmlFREl3WkJFR29rQmlBQUtBSVFJQUZOQkVBZ0EwSEF5QU5CeHBvQ0VEZEJxSmtDRURkQjc2SUNFRGRCMmdFUVBrSDJvZ0lRTjBIaHZRRVFOeUlGSUFVb0FnQkJkR29vQWdCcUVEc2dBMEdBemdNUU9pSUdLQUlBS0FJY0lRUWdCa0VLSUFSQlAzRkJpZ0ZxRVFJQUlRUWdBeEE4SUFVZ0JCQkFJQVVRUHhBQUN5QUFLQUlVSWdRZ0Frc0VRQ0FBS0FJRUlBSWdBU0FFYkdwQkJYUnFJUWNnQXlRR0lBY1BCU0FEUWNESUEwSFdtd0lRTjBHb21RSVFOMEh2b2dJUU4wSGJBUkErUWZhaUFoQTNRZlc5QVJBM0lnSWdBaWdDQUVGMGFpZ0NBR29RT3lBRFFZRE9BeEE2SWdFb0FnQW9BaHdoQUNBQlFRb2dBRUUvY1VHS0FXb1JBZ0FoQUNBREVEd2dBaUFBRUVBZ0FoQS9FQUFMUVFBTENBQkJCeEFDUVFBTERBQWdBRUdDaG9BZ05nQUFDNUlCQVFGL0lBTkJnQkJ4QkVBZ0FFRXJPZ0FBSUFCQkFXb2hBQXNnQTBHQUJIRUVRQ0FBUVNNNkFBQWdBRUVCYWlFQUN3TkFJQUVzQUFBaUJBUkFJQUFnQkRvQUFDQUJRUUZxSVFFZ0FFRUJhaUVBREFFTEN5QUFBbjhDUUNBRFFjb0FjVUVJYXlJQkJFQWdBVUU0UncwQlFlOEFEQUlMSUFOQkNYWkJJSEZCK0FCekRBRUxRZVFBUWZVQUlBSWJDem9BQUF0K0FRTi9Jd1loQWlNR1FSQnFKQVpCK3YwQ0lBRXNBQUFRdndFRWZ5QUJFSmtGUVlDQUFuSWhBeUFDSUFBMkFnQWdBaUFETmdJRUlBSkJ0Z00yQWdoQkJTQUNFRFFRbWdNaUEwRUFTQVIvUVFBRklBTWdBUkNZQlNJQUJIOGdBQVVnQXhBWUdrRUFDd3NGUWFURkEwRWNOZ0lBUVFBTElRUWdBaVFHSUFRTERBQWdBQkRmQ1NBQUlBRWJDeEFBSUFCQklFWWdBRUYzYWtFRlNYSUxYQUVDZnlBQUxBQUFJZ0lnQVN3QUFDSURSeUFDUlhJRWZ5QUNJUUVnQXdVRGZ5QUFRUUZxSWdBc0FBQWlBaUFCUVFGcUlnRXNBQUFpQTBjZ0FrVnlCSDhnQWlFQklBTUZEQUVMQ3dzaEFDQUJRZjhCY1NBQVFmOEJjV3NMS0FFQ2Z5QUFJUUVEUUNBQlFRUnFJUUlnQVNnQ0FBUkFJQUloQVF3QkN3c2dBU0FBYTBFQ2RRdklBd0VIZnlBQUtBSUVJUVVnQWtId2srdmNBMHNFUUNBQUtBSUFJZ05CT0RZQ0ZDQURRUUUyQWhnZ0FDQUFLQUlBS0FJQVFmOEJjVUdzQTJvUkFRQUxJQUZCQVVzRVFDQUFLQUlBSWdOQkR6WUNGQ0FESUFFMkFoZ2dBQ0FBS0FJQUtBSUFRZjhCY1VHc0Eyb1JBUUFMSUFKQkNDQUNRUWR4SWdOclFRQWdBeHRxSVFRQ1FBSkFJQVZCTkdvZ0FVRUNkR29pQ0NnQ0FDSUNCRUFEUUFKQUlBSW9BZ2dnQkU4RVFDQUNJUUFNQVFzZ0FpZ0NBQ0lEQkVBZ0F5RUNEQUlGSUFJaEF3d0VDd0FMQ3dWQkFDRUREQUVMREFFTElBUkI4SlByM0FNZ0JHc2lBaUFCUVFKMFFlQ0hBVUhvaHdFZ0EwVWlDUnRxS0FJQUlnRWdBU0FDU3hzaUFXb2lBa0VRYWlJR0VFUWlCd1IvSUFZaEFTQUhCUU4vSUFGQjVBQkpCRUFnQUNnQ0FDSUNRVGcyQWhRZ0FrRUNOZ0lZSUFBZ0FDZ0NBQ2dDQUVIL0FYRkJyQU5xRVFFQUN5QUVJQUZCQVhZaUFXb2lBa0VRYWlJR0VFUWlCMFVOQUNBR0lRRWdCd3NMSVFBZ0JTQUJJQVVvQWt4cU5nSk1JQUJCQURZQ0FDQUFRUUEyQWdRZ0FDQUNOZ0lJSUFrRVFDQUlJQUEyQWdBRklBTWdBRFlDQUFzTElBQWdCQ0FBS0FJRUlnRnFOZ0lFSUFBZ0FDZ0NDQ0FFYXpZQ0NDQUFRUkJxSUFGcUN5Z0JBbjhDZnlNR0lRTWpCa0VRYWlRR0lBQkJBMEcwaHdGQnZOQUNRU0FnQVJBSklBTUxKQVlMbHdVQkJIOGpCaUVFSXdaQkVHb2tCaUFCSUFNUThRT09FRU1pQmpZQ0FDQURRUUVnQm5TeWxSRFNBU0VESUFJZ0FDb0NIQ0FEbEJEd0F4QkRJZ1kyQWdBZ0JpQUFLQUlVUVg5cVJnUkFJQUVnQVNnQ0FFRUJhallDQUNBQ1FRQTJBZ0JCQUNFR0N3SkFBa0FnQVNnQ0FDSUZRUUJJQkVBZ0FVRUFOZ0lBUVFBaEJnd0JCU0FGSUFBb0FoQWlCVTRFUUNBQklBVkJmMm8yQWdBZ0FDZ0NGRUYvYWlFR0RBSUxDd3dCQ3lBQ0lBWTJBZ0FMSUFFb0FnQWlCVUYvVEFSQUlBUkJ3TWdEUVlXWkFoQTNRYWlaQWhBM1FlK2lBaEEzUVl3Q0VENUI5cUlDRURkQnJwb0NFRGNpQnlBSEtBSUFRWFJxS0FJQWFoQTdJQVJCZ000REVEb2lBaWdDQUNnQ0hDRUJJQUpCQ2lBQlFUOXhRWW9CYWhFQ0FDRUJJQVFRUENBSElBRVFRQ0FIRUQ4UUFBc2dCU0FBS0FJUVRnUkFJQVJCd01nRFFjYWFBaEEzUWFpWkFoQTNRZStpQWhBM1FZMENFRDVCOXFJQ0VEZEI4cG9DRURjaUJTQUZLQUlBUVhScUtBSUFhaEE3SUFSQmdNNERFRG9pQWlnQ0FDZ0NIQ0VCSUFKQkNpQUJRVDl4UVlvQmFoRUNBQ0VCSUFRUVBDQUZJQUVRUUNBRkVEOFFBQXNnQmtGL1RBUkFJQVJCd01nRFFaMmJBaEEzUWFpWkFoQTNRZStpQWhBM1FZNENFRDVCOXFJQ0VEZEJ2NXNDRURjaUJTQUZLQUlBUVhScUtBSUFhaEE3SUFSQmdNNERFRG9pQWlnQ0FDZ0NIQ0VCSUFKQkNpQUJRVDl4UVlvQmFoRUNBQ0VCSUFRUVBDQUZJQUVRUUNBRkVEOFFBQXNnQmlBQUtBSVVTQVJBSUFRa0JnVWdCRUhBeUFOQjFwc0NFRGRCcUprQ0VEZEI3NklDRURkQmp3SVFQa0gyb2dJUU4wR0puQUlRTnlJQ0lBSW9BZ0JCZEdvb0FnQnFFRHNnQkVHQXpnTVFPaUlCS0FJQUtBSWNJUUFnQVVFS0lBQkJQM0ZCaWdGcUVRSUFJUUFnQkJBOElBSWdBQkJBSUFJUVB4QUFDd3NPQUNBQUlBRWdBa0VDZEJCTUdndXRBUUFnQUNBQUtnSUFJQUVxQWdBZ0FwU1NPQUlBSUFBZ0FDb0NCQ0FCS2dJRUlBS1VramdDQkNBQUlBQXFBZ2dnQVNvQ0NDQUNsSkk0QWdnZ0FDQUFLZ0lNSUFFcUFnd2dBcFNTT0FJTUlBQWdBQ29DRUNBQktnSVFJQUtVa2pnQ0VDQUFJQUFxQWhRZ0FTb0NGQ0FDbEpJNEFoUWdBQ0FBS2dJWUlBRXFBaGdnQXBTU09BSVlJQUFnQUNvQ0hDQUJLZ0ljSUFLVWtqZ0NIQ0FBSUFBcUFpQWdBU29DSUNBQ2xKSTRBaUFMVVFFQmYwR3czUU1vQWdBaUFTQUFRUU5xUVh4eGFpSUFRUUJJQkVCQnBNVURRVEEyQWdCQmZ3OExJQUFRSjBzRVFDQUFFQ1JGQkVCQnBNVURRVEEyQWdCQmZ3OExDMEd3M1FNZ0FEWUNBQ0FCQ3dzQUlBQzdFTjBKdGhCREN5b0JBWDhqQmlFREl3WkJFR29rQmlBRElBSTJBZ0FnQUVILy8vLy9CeUFCSUFNUXFRRWFJQU1rQmdzT0FDQUFRZWlKQVNnQ0FCRC9CQXVHQVFJQ2Z3RitJQUNuSVFJZ0FFTC8vLy8vRDFZRVFBTkFJQUZCZjJvaUFTQUFJQUJDQ2hEMkFTSUVRZ3ArZmFkQi93RnhRVEJ5T2dBQUlBQkMvLy8vLzU4QlZnUkFJQVFoQUF3QkN3c2dCS2NoQWdzZ0FnUkFBMEFnQVVGL2FpSUJJQUlnQWtFS0VFZ2lBMEVLYkd0Qk1ISTZBQUFnQWtFS1R3UkFJQU1oQWd3QkN3c0xJQUVMR2dBZ0FDQUJFS29DSWdCQkFDQUFMUUFBSUFGQi93RnhSaHNMS0FFQ2Z3Si9Jd1loQXlNR1FSQnFKQVlnQUVFRFFZQ0hBVUd1dHdKQkFpQUJFQWtnQXdza0Jnc05BQ0FBS0FJRUlBRW9BZ1JMQ3hBQUlBQWdBVFlDQUNBQUlBSTJBZ1FMRFFBZ0FDZ0NFQ0FCUVJSc2Fnc1FBQ0FBS0FJRUlBRWdBQ2dDQUd4cUN3Z0FJQUJCOUFCcUN3d0FJQUFnQVNBQUlBRktHd3MvQVFKL0lBQW9BZ1FoQWlBQUtBSUlJUUVEUUNBQklBSkhCRUFnQUNBQlFYeHFJZ0UyQWdnTUFRc0xJQUFvQWdBaUFRUkFJQUFvQWd3YUlBRVFPQXNMY3dFQmZ5QUFRUUEyQWd3Z0FDQUROZ0lRSUFFRVFDQUJRZi8vLy84RFN3UkFRUWdRQlNJREVJZ0JJQU5CdElzQk5nSUFJQU5CK1BjQVFSWVFCQVVnQVVFQ2RCQlJJUVFMQ3lBQUlBUTJBZ0FnQUNBQ1FRSjBJQVJxSWdJMkFnZ2dBQ0FDTmdJRUlBQWdBVUVDZENBRWFqWUNEQXNHQUVFWUVBSUxDQUJCRFJBQ1FRQUxpd0VCQTM4akJpRURJd1pCRUdva0JpQUNRZS8vLy84RFN3UkFFQUFMSUFKQkFra0VRQ0FBSUFJNkFBc2dBQ0VFQlNBQ1FRUnFRWHh4SWdWQi8vLy8vd05MQkVBUUFBVWdBQ0FGUVFKMEVGRWlCRFlDQUNBQUlBVkJnSUNBZ0hoeU5nSUlJQUFnQWpZQ0JBc0xJQVFnQVNBQ0VLY0JJQU5CQURZQ0FDQUNRUUowSUFScUlBTVFiaUFESkFZTHVRRUJCWDhqQmlFREl3WkJFR29rQmlBRElBRTZBQUFnQUN3QUN5SUJRUUJJSWdVRWZ5QUFLQUlFSVFJZ0FDZ0NDRUgvLy8vL0IzRkJmMm9GSUFGQi93RnhJUUpCQ2dzaEFTQURRUUZxSVFRQ1FBSkFJQUVnQWtZRVFDQUFJQUZCQVNBQklBRVEzUUlnQUN3QUMwRUFTQTBCQlNBRkRRRUxJQUFnQWtFQmFqb0FDd3dCQ3lBQUtBSUFJUVlnQUNBQ1FRRnFOZ0lFSUFZaEFBc2dBQ0FDYWlJQUlBTVFYeUFFUVFBNkFBQWdBRUVCYWlBRUVGOGdBeVFHQzdnQkFRVi9JQUlvQWdBZ0FDZ0NBQ0lESWdacklnVkJBWFFpQkVFRUlBUWJRWDhnQlVILy8vLy9CMGtiSVFVZ0FTZ0NBQ0VISUFOQkFDQUFLQUlFUVpFQlJ5SUVHeUFGRU9nQklnTkZCRUFRQUFzZ0JBUkFJQUFnQXpZQ0FBVWdBQ2dDQUNFRUlBQWdBellDQUNBRUJFQWdCQ0FBS0FJRVFmOEJjVUdzQTJvUkFRQWdBQ2dDQUNFREN3c2dBRUdTQVRZQ0JDQUJJQWNnQm10QkFuVkJBblFnQTJvMkFnQWdBaUFBS0FJQUlBVkJBblpCQW5ScU5nSUFDNlFEQVFOL0FuOENRQ0FDSUFNb0FnQWlDa1lpQzBVTkFDQUFJQWtvQW1CR0lneEZCRUFnQ1NnQ1pDQUFSdzBCQ3lBRElBSkJBV28yQWdBZ0FrRXJRUzBnREJzNkFBQWdCRUVBTmdJQVFRQU1BUXNnQUNBRlJpQUdLQUlFSUFZc0FBc2lCa0gvQVhFZ0JrRUFTQnRCQUVkeEJFQkJBQ0FJS0FJQUlnQWdCMnRCb0FGT0RRRWFJQVFvQWdBaEFTQUlJQUJCQkdvMkFnQWdBQ0FCTmdJQUlBUkJBRFlDQUVFQURBRUxJQWxCNkFCcUlRZEJBQ0VGQTM4Z0JVRWFSZ1IvSUFjRklBVkJBV29oQmlBQUlBVkJBblFnQ1dvaUJTZ0NBRVlFZnlBRkJTQUdJUVVNQWdzTEN5QUpheUlGUVFKMUlRQWdCVUhjQUVvRWYwRi9CUUpBQWtBQ1FDQUJRUWhyRGdrQUFnQUNBZ0lDQWdFQ0MwRi9JQUFnQVU0TkF4b01BUXNnQlVIWUFFNEVRRUYvSUFzTkF4cEJmeUFLSUFKclFRTk9EUU1hUVg4Z0NrRi9haXdBQUVFd1J3MERHaUFFUVFBMkFnQWdBRUh3N3dCcUxBQUFJUUFnQXlBS1FRRnFOZ0lBSUFvZ0FEb0FBRUVBREFNTEN5QUFRZkR2QUdvc0FBQWhBQ0FESUFwQkFXbzJBZ0FnQ2lBQU9nQUFJQVFnQkNnQ0FFRUJhallDQUVFQUN3c0xEUUFnQUNnQ0FCQTRJQUFRT0F1ckF3RURmd0ovQWtBZ0FpQURLQUlBSWdwR0lndEZEUUFnQ1MwQUdDQUFRZjhCY1VZaURFVUVRQ0FKTFFBWklBQkIvd0Z4UncwQkN5QURJQUpCQVdvMkFnQWdBa0VyUVMwZ0RCczZBQUFnQkVFQU5nSUFRUUFNQVFzZ0FFSC9BWEVnQlVIL0FYRkdJQVlvQWdRZ0Jpd0FDeUlHUWY4QmNTQUdRUUJJRzBFQVIzRUVRRUVBSUFnb0FnQWlBQ0FIYTBHZ0FVNE5BUm9nQkNnQ0FDRUJJQWdnQUVFRWFqWUNBQ0FBSUFFMkFnQWdCRUVBTmdJQVFRQU1BUXNnQ1VFYWFpRUhRUUFoQlFOL0lBVkJHa1lFZnlBSEJTQUZRUUZxSVFZZ0JTQUphaUlGTFFBQUlBQkIvd0Z4UmdSL0lBVUZJQVloQlF3Q0N3c0xJQWxySWdCQkYwb0VmMEYvQlFKQUFrQUNRQ0FCUVFockRna0FBZ0FDQWdJQ0FnRUNDMEYvSUFBZ0FVNE5BeG9NQVFzZ0FFRVdUZ1JBUVg4Z0N3MERHa0YvSUFvZ0FtdEJBMDROQXhwQmZ5QUtRWDlxTEFBQVFUQkhEUU1hSUFSQkFEWUNBQ0FBUWZEdkFHb3NBQUFoQUNBRElBcEJBV28yQWdBZ0NpQUFPZ0FBUVFBTUF3c0xJQUJCOE84QWFpd0FBQ0VBSUFNZ0NrRUJhallDQUNBS0lBQTZBQUFnQkNBRUtBSUFRUUZxTmdJQVFRQUxDd3VvRlFFSmZ5TUdJUUlqQmtFUWFpUUdJQUlpQlVFRWFpRURJQUpCQ0dvaUJpQUFOZ0lBSUFCQjFBRkpCRUJCOE93QVFiRHVBQ0FHRU5jRUtBSUFJUUFGQWtBZ0F5QUFJQUJCMGdFUVNDSUlRZElCYkNJQ2F6WUNBRUVBSVFCQnNPNEFRZkR2QUNBREVOY0VRYkR1QUd0QkFuVWhCd0pBQTBBQ1FDQUNJQWRCQW5SQnNPNEFhaWdDQUdvaEEwRUZJUUlDUUFKQUEwQWdBa0V2VHcwQklBTWdBa0VDZEVIdzdBQnFLQUlBSWdFUVNDSUVJQUZKRFFNZ0FrRUJhaUVDSUFFZ0JHd2dBMGNOQUFzTUFRdEIwd0VoQWdOQUFrQWdBeUFDRUVnaUFTQUNTUVIvSUFNaEFFRUJCU0FESUFFZ0FteEdCSDlCQ1FVZ0F5QUNRUXBxSWdFUVNDSUVJQUZKQkg4Z0FTRUNJQU1oQUVFQkJTQURJQUVnQkd4R0JIOGdBU0VDUVFrRklBTWdBa0VNYWlJQkVFZ2lCQ0FCU1FSL0lBRWhBaUFESVFCQkFRVWdBeUFCSUFSc1JnUi9JQUVoQWtFSkJTQURJQUpCRUdvaUFSQklJZ1FnQVVrRWZ5QUJJUUlnQXlFQVFRRUZJQU1nQVNBRWJFWUVmeUFCSVFKQkNRVWdBeUFDUVJKcUlnRVFTQ0lFSUFGSkJIOGdBU0VDSUFNaEFFRUJCU0FESUFFZ0JHeEdCSDhnQVNFQ1FRa0ZJQU1nQWtFV2FpSUJFRWdpQkNBQlNRUi9JQUVoQWlBRElRQkJBUVVnQXlBQklBUnNSZ1IvSUFFaEFrRUpCU0FESUFKQkhHb2lBUkJJSWdRZ0FVa0VmeUFCSVFJZ0F5RUFRUUVGSUFNZ0FTQUViRVlFZnlBQklRSkJDUVVDZnlBRElBSkJIbW9pQVJCSUlnUWdBVWtFUUNBQklRSWdBeUVBUVFFTUFRc2dBeUFCSUFSc1JnUkFJQUVoQWtFSkRBRUxJQU1nQWtFa2FpSUJFRWdpQkNBQlNRUkFJQUVoQWlBRElRQkJBUXdCQ3lBRElBRWdCR3hHQkVBZ0FTRUNRUWtNQVFzZ0F5QUNRU2hxSWdFUVNDSUVJQUZKQkVBZ0FTRUNJQU1oQUVFQkRBRUxJQU1nQVNBRWJFWUVRQ0FCSVFKQkNRd0JDeUFESUFKQkttb2lBUkJJSWdRZ0FVa0VRQ0FCSVFJZ0F5RUFRUUVNQVFzZ0F5QUJJQVJzUmdSQUlBRWhBa0VKREFFTElBTWdBa0V1YWlJQkVFZ2lCQ0FCU1FSQUlBRWhBaUFESVFCQkFRd0JDeUFESUFFZ0JHeEdCRUFnQVNFQ1FRa01BUXNnQXlBQ1FUUnFJZ0VRU0NJRUlBRkpCRUFnQVNFQ0lBTWhBRUVCREFFTElBTWdBU0FFYkVZRVFDQUJJUUpCQ1F3QkN5QURJQUpCT21vaUFSQklJZ1FnQVVrRVFDQUJJUUlnQXlFQVFRRU1BUXNnQXlBQklBUnNSZ1JBSUFFaEFrRUpEQUVMSUFNZ0FrRThhaUlCRUVnaUJDQUJTUVJBSUFFaEFpQURJUUJCQVF3QkN5QURJQUVnQkd4R0JFQWdBU0VDUVFrTUFRc2dBeUFDUWNJQWFpSUJFRWdpQkNBQlNRUkFJQUVoQWlBRElRQkJBUXdCQ3lBQklBUnNJQU5HQkVBZ0FTRUNRUWtNQVFzZ0F5QUNRY1lBYWlJQkVFZ2lCQ0FCU1FSQUlBRWhBaUFESVFCQkFRd0JDeUFCSUFSc0lBTkdCRUFnQVNFQ1FRa01BUXNnQXlBQ1FjZ0FhaUlCRUVnaUJDQUJTUVJBSUFFaEFpQURJUUJCQVF3QkN5QUJJQVJzSUFOR0JFQWdBU0VDUVFrTUFRc2dBeUFDUWM0QWFpSUJFRWdpQkNBQlNRUkFJQUVoQWlBRElRQkJBUXdCQ3lBQklBUnNJQU5HQkVBZ0FTRUNRUWtNQVFzZ0F5QUNRZElBYWlJQkVFZ2lCQ0FCU1FSQUlBRWhBaUFESVFCQkFRd0JDeUFCSUFSc0lBTkdCRUFnQVNFQ1FRa01BUXNnQXlBQ1FkZ0FhaUlCRUVnaUJDQUJTUVJBSUFFaEFpQURJUUJCQVF3QkN5QUJJQVJzSUFOR0JFQWdBU0VDUVFrTUFRc2dBeUFDUWVBQWFpSUJFRWdpQkNBQlNRUkFJQUVoQWlBRElRQkJBUXdCQ3lBQklBUnNJQU5HQkVBZ0FTRUNRUWtNQVFzZ0F5QUNRZVFBYWlJQkVFZ2lCQ0FCU1FSQUlBRWhBaUFESVFCQkFRd0JDeUFCSUFSc0lBTkdCRUFnQVNFQ1FRa01BUXNnQXlBQ1FlWUFhaUlCRUVnaUJDQUJTUVJBSUFFaEFpQURJUUJCQVF3QkN5QUJJQVJzSUFOR0JFQWdBU0VDUVFrTUFRc2dBeUFDUWVvQWFpSUJFRWdpQkNBQlNRUkFJQUVoQWlBRElRQkJBUXdCQ3lBQklBUnNJQU5HQkVBZ0FTRUNRUWtNQVFzZ0F5QUNRZXdBYWlJQkVFZ2lCQ0FCU1FSQUlBRWhBaUFESVFCQkFRd0JDeUFCSUFSc0lBTkdCRUFnQVNFQ1FRa01BUXNnQXlBQ1FmQUFhaUlCRUVnaUJDQUJTUVJBSUFFaEFpQURJUUJCQVF3QkN5QUJJQVJzSUFOR0JFQWdBU0VDUVFrTUFRc2dBeUFDUWZnQWFpSUJFRWdpQkNBQlNRUkFJQUVoQWlBRElRQkJBUXdCQ3lBRElBRWdCR3hHQkVBZ0FTRUNRUWtNQVFzZ0F5QUNRZjRBYWlJQkVFZ2lCQ0FCU1FSQUlBRWhBaUFESVFCQkFRd0JDeUFESUFFZ0JHeEdCRUFnQVNFQ1FRa01BUXNnQXlBQ1FZSUJhaUlCRUVnaUJDQUJTUVJBSUFFaEFpQURJUUJCQVF3QkN5QURJQUVnQkd4R0JFQWdBU0VDUVFrTUFRc2dBeUFDUVlnQmFpSUJFRWdpQkNBQlNRUkFJQUVoQWlBRElRQkJBUXdCQ3lBRElBRWdCR3hHQkVBZ0FTRUNRUWtNQVFzZ0F5QUNRWW9CYWlJQkVFZ2lCQ0FCU1FSQUlBRWhBaUFESVFCQkFRd0JDeUFESUFFZ0JHeEdCRUFnQVNFQ1FRa01BUXNnQXlBQ1FZNEJhaUlCRUVnaUJDQUJTUVJBSUFFaEFpQURJUUJCQVF3QkN5QURJQUVnQkd4R0JFQWdBU0VDUVFrTUFRc2dBeUFDUVpRQmFpSUJFRWdpQkNBQlNRUkFJQUVoQWlBRElRQkJBUXdCQ3lBRElBRWdCR3hHQkVBZ0FTRUNRUWtNQVFzZ0F5QUNRWllCYWlJQkVFZ2lCQ0FCU1FSQUlBRWhBaUFESVFCQkFRd0JDeUFESUFFZ0JHeEdCRUFnQVNFQ1FRa01BUXNnQXlBQ1Fad0JhaUlCRUVnaUJDQUJTUVJBSUFFaEFpQURJUUJCQVF3QkN5QURJQUVnQkd4R0JFQWdBU0VDUVFrTUFRc2dBeUFDUWFJQmFpSUJFRWdpQkNBQlNRUkFJQUVoQWlBRElRQkJBUXdCQ3lBRElBRWdCR3hHQkVBZ0FTRUNRUWtNQVFzZ0F5QUNRYVlCYWlJQkVFZ2lCQ0FCU1FSQUlBRWhBaUFESVFCQkFRd0JDeUFESUFFZ0JHeEdCRUFnQVNFQ1FRa01BUXNnQXlBQ1FhZ0JhaUlCRUVnaUJDQUJTUVJBSUFFaEFpQURJUUJCQVF3QkN5QURJQUVnQkd4R0JFQWdBU0VDUVFrTUFRc2dBeUFDUWF3QmFpSUJFRWdpQkNBQlNRUkFJQUVoQWlBRElRQkJBUXdCQ3lBRElBRWdCR3hHQkVBZ0FTRUNRUWtNQVFzZ0F5QUNRYklCYWlJQkVFZ2lCQ0FCU1FSQUlBRWhBaUFESVFCQkFRd0JDeUFESUFFZ0JHeEdCRUFnQVNFQ1FRa01BUXNnQXlBQ1FiUUJhaUlCRUVnaUJDQUJTUVJBSUFFaEFpQURJUUJCQVF3QkN5QURJQUVnQkd4R0JFQWdBU0VDUVFrTUFRc2dBeUFDUWJvQmFpSUJFRWdpQkNBQlNRUkFJQUVoQWlBRElRQkJBUXdCQ3lBRElBRWdCR3hHQkVBZ0FTRUNRUWtNQVFzZ0F5QUNRYjRCYWlJQkVFZ2lCQ0FCU1FSQUlBRWhBaUFESVFCQkFRd0JDeUFESUFFZ0JHeEdCRUFnQVNFQ1FRa01BUXNnQXlBQ1FjQUJhaUlCRUVnaUJDQUJTUVJBSUFFaEFpQURJUUJCQVF3QkN5QURJQUVnQkd4R0JFQWdBU0VDUVFrTUFRc2dBeUFDUWNRQmFpSUJFRWdpQkNBQlNRUkFJQUVoQWlBRElRQkJBUXdCQ3lBRElBRWdCR3hHQkVBZ0FTRUNRUWtNQVFzZ0F5QUNRY1lCYWlJQkVFZ2lCQ0FCU1FSQUlBRWhBaUFESVFCQkFRd0JDeUFESUFFZ0JHeEdCRUFnQVNFQ1FRa01BUXNnQXlBQ1FkQUJhaUlCRUVnaUNTQUJTU0VFSUFFZ0FrSFNBV29nQkNBRElBRWdDV3hHSWdGeUd5RUNJQU1nQUNBRUd5RUFRUUZCQ1VFQUlBRWJJQVFiQ3dzTEN3c0xDd3NMQ3dzTEN3c0xJZ0ZCRDNFT0NnRUFBQUFBQUFBQUFBSUFDd3NnQVEwREN5QUlJQWRCQVdvaUEwRXdSaUlCYWlJQ0lRZ2dBa0hTQVd3aEFrRUFJQU1nQVJzaEJ3d0JDd3NnQmlBRE5nSUFJQU1oQUF3QkN5QUdJQU0yQWdBTEN5QUZKQVlnQUF1UUFnSUNmd1I5SUFDOElnRkJBRWdoQWlBQlFZQ0FnQVJKSUFKeUJFQUNRQ0FCUWYvLy8vOEhjVVVFUUVNQUFJQy9JQUFnQUpTVkR3c2dBa1VFUUVIb2ZpRUNJQUJEQUFBQVRKUzhJUUVNQVFzZ0FDQUFrME1BQUFBQWxROExCU0FCUWYvLy8vc0hTd1JBSUFBUEN5QUJRWUNBZ1B3RFJnUi9Rd0FBQUFBUEJVR0Jmd3NoQWdzZ0FVR045cXNDYWlJQlFmLy8vd054UWZPSjFQa0RhcjVEQUFDQXY1SWlBeUFEUXdBQUFFQ1NsU0lGSUFXVUlnWWdCcFFoQkNBQ0lBRkJGM1pxc2lJQVE0QnhNVCtVSUFNZ0FFUFI5eGMzbENBRklBTWdBME1BQUFBL2xKUWlBQ0FHSUFSRDd1bVJQcFJEcXFvcVA1S1VJQVFnQkVNbW5uZytsRU1UenN3K2twU1NrcFNTSUFDVGtwSUxsQUVCQkh3Z0FDQUFvaUlDSUFLaUlRTkVBQUFBQUFBQThEOGdBa1FBQUFBQUFBRGdQNklpQktFaUJVUUFBQUFBQUFEd1B5QUZvU0FFb1NBQ0lBSWdBaUFDUkpBVnl4bWdBZm8rb2tSM1VjRVdiTUZXdjZDaVJFeFZWVlZWVmFVL29LSWdBeUFEb2lBQ1JNU3h0TDJlN2lFK0lBSkUxRGlJdnVuNnFEMmlvYUpFclZLY2dFOStrcjZnb3FDaUlBQWdBYUtob0tBTGxRRUJBM3dnQUNBQW9pSURJQU1nQTZLaUlBTkVmTlhQV2pyWjVUMmlST3VjSzRybTVWcStvS0lnQXlBRFJIMytzVmZqSGNjK29rVFZZY0Vab0FFcXY2Q2lSS2I0RUJFUkVZRS9vS0FoQlNBRElBQ2lJUVFnQUNBRVJFbFZWVlZWVmNVL29pQURJQUZFQUFBQUFBQUE0RCtpSUFRZ0JhS2hvaUFCb2FDaElBUWdBeUFGb2tSSlZWVlZWVlhGdjZDaUlBQ2dJQUliQ3dzQUlBQWdBU0FDRVBrRUN4b0FJQUFvQWdBZ0FDZ0NCQ0lBSUFBUStBUkZRUjkwUVI5MUM0Z0RBUVovSXdZaEJ5TUdRUkJxSkFZZ0EwRzB4UU1nQXhzaUJTZ0NBQ0VEQW44Q1FDQUJCSDhDZnlBQUlBY2dBQnNoQmlBQ0JFQUNRQUpBSUFNRVFDQURJUUFnQWlFRERBRUZJQUVzQUFBaUFFRi9TZ1JBSUFZZ0FFSC9BWEUyQWdBZ0FFRUFSd3dGQ3lBQkxBQUFJUUJCNklrQktBSUFLQUlBUlFSQUlBWWdBRUgvdndOeE5nSUFRUUVNQlFzZ0FFSC9BWEZCdm41cUlnQkJNa3NOQmlBQlFRRnFJUUVnQUVFQ2RFSFFOR29vQWdBaEFDQUNRWDlxSWdNTkFRc01BUXNnQVMwQUFDSUlRUU4ySWdSQmNHb2dCQ0FBUVJwMWFuSkJCMHNOQkNBRFFYOXFJUVFnQ0VHQWYyb2dBRUVHZEhJaUFFRUFTQVJBSUFFaEF5QUVJUUVEUUNBQlJRMENJQU5CQVdvaUF5d0FBQ0lFUWNBQmNVR0FBVWNOQmlBQlFYOXFJUUVnQkVIL0FYRkJnSDlxSUFCQkJuUnlJZ0JCQUVnTkFBc0ZJQVFoQVFzZ0JVRUFOZ0lBSUFZZ0FEWUNBQ0FDSUFGckRBSUxJQVVnQURZQ0FBdEJmZ3NGSUFNTkFVRUFDd3dCQ3lBRlFRQTJBZ0JCcE1VRFFSazJBZ0JCZndzaENTQUhKQVlnQ1F2SUN3RUlmeUFBS0FJWUlnUW9BZ0FoQmlBRUtBSUVJUVVnQUNBQk5nTGNBU0FBSUFJMkF1QUJJQUFnQXpZQzVBRUNRQ0FGQkg4Z0JnVWdCQ2dDRENFQklBQWdBVUgvQUhGQkNHb1JBQUJGRFFFZ0JDZ0NCQ0VGSUFRb0FnQUxJZ0ZCQVdvaEF5QUJMUUFBSVFZZ0JVRi9haUlDQkg4Z0F3VWdCQ2dDRENFQklBQWdBVUgvQUhGQkNHb1JBQUJGRFFFZ0JDZ0NCQ0VDSUFRb0FnQUxJZ0ZCQVdvaEF5QUJMUUFBSVFvZ0FrRi9haUlDQkg4Z0F3VWdCQ2dDRENFQklBQWdBVUgvQUhGQkNHb1JBQUJGRFFFZ0JDZ0NCQ0VDSUFRb0FnQUxJZ0ZCQVdvaEF5QUFJQUV0QUFBMkF0UUJJQUpCZjJvaUFnUi9JQU1GSUFRb0Fnd2hBU0FBSUFGQi93QnhRUWhxRVFBQVJRMEJJQVFvQWdRaEFpQUVLQUlBQ3lJQlFRRnFJUU1nQUNBQkxRQUFRUWgwSWdVMkFpQWdBa0YvYWlJQ0JFQWdBeUVCSUFVaEF3VWdCQ2dDRENFQklBQWdBVUgvQUhGQkNHb1JBQUJGRFFFZ0JDZ0NCQ0VDSUFBb0FpQWhBeUFFS0FJQUlRRUxJQUZCQVdvaEJTQUFJQUV0QUFBZ0EybzJBaUFnQWtGL2FpSUNCSDhnQlFVZ0JDZ0NEQ0VCSUFBZ0FVSC9BSEZCQ0dvUkFBQkZEUUVnQkNnQ0JDRUNJQVFvQWdBTElnRkJBV29oQXlBQUlBRXRBQUJCQ0hRaUJUWUNIQ0FDUVg5cUlnSUVRQ0FESVFFZ0JTRURCU0FFS0FJTUlRRWdBQ0FCUWY4QWNVRUlhaEVBQUVVTkFTQUVLQUlFSVFJZ0FDZ0NIQ0VESUFRb0FnQWhBUXNnQVVFQmFpRUZJQUFnQVMwQUFDQURhallDSENBQ1FYOXFJZ0VFUUNBRklRSUZJQVFvQWd3aEFTQUFJQUZCL3dCeFFRaHFFUUFBUlEwQklBUW9BZ0FoQWlBRUtBSUVJUUVMSUFBZ0FpMEFBRFlDSkNBQUtBSUFJZ01nQUNnQ3VBTTJBaGdnQXlBQUtBSWNOZ0ljSUFNZ0FDZ0NJRFlDSUNBRElBQW9BaVEyQWlRZ0EwSG1BRFlDRkNBREtBSUVJUU1nQUVFQklBTkJQM0ZCc2dWcUVRTUFJQUFvQXRBREtBSVFCRUFnQUNnQ0FDSURRVDAyQWhRZ0F5Z0NBQ0VESUFBZ0EwSC9BWEZCckFOcUVRRUFDeUFLUWY4QmNTQUdRZjhCY1VFSWRISkJlR29oQlFKQUFrQWdBQ2dDSUVVTkFDQUFLQUljUlEwQUlBQW9BaVFpQTBFQlNBMEFEQUVMSUFBb0FnQWlBMEVoTmdJVUlBTW9BZ0FoQXlBQUlBTkIvd0Z4UWF3RGFoRUJBQ0FBS0FJa0lRTUxJQU5CQTJ3Z0JVY0VRQ0FBS0FJQUlnTkJERFlDRkNBREtBSUFJUU1nQUNBRFFmOEJjVUdzQTJvUkFRQUxJQUFvQXRnQlJRUkFJQUFvQWdRb0FnQWhBeUFBSUFCQkFTQUFLQUlrUWRnQWJDQURRVDl4UWNvQmFoRUVBRFlDMkFFTElBRkJmMm9oQVNBQ1FRRnFJUUlnQUNnQ0pFRUFTZ1JBQWtCQkFDRUZBMEFDUUNBQkJIOGdBU0VJSUFJRklBUW9BZ3doQVNBQUlBRkIvd0J4UVFocUVRQUFSUTBCSUFRb0FnUWhDQ0FFS0FJQUN5SUhMUUFBSVFJZ0FDZ0MyQUVoQXlBRkJFQUNRQ0FESVFGQkFDRUdBMEFnQVNnQ0FDQUNSd1JBSUFGQjJBQnFJUUVnQmtFQmFpSUdJQVZKRFFFTUFnc0xJQU1vQWdBaEFTQURRZGdBYWlFQ0lBVkJBVXNFZjBFQklRWURRQ0FDS0FJQUlna2dBU0FKSUFGS0d5RUJJQUpCMkFCcUlRSWdCa0VCYWlJR0lBVkhEUUFMSUFWQjJBQnNJQU5xQlNBQ0N5RUxJQUZCQVdvaEFpQUxJUUVMQlNBRElRRUxJQWRCQVdvaEJpQUJJQUkyQWdBZ0FTQUZOZ0lFSUFoQmYyb2lBd1IvSUFZRklBUW9BZ3doQWlBQUlBSkIvd0J4UVFocUVRQUFSUTBCSUFRb0FnUWhBeUFFS0FJQUN5SUNRUUZxSVFZZ0FTQUNMUUFBSWdKQkJIWTJBZ2dnQVNJSElBSkJEM0UyQWd3Z0FTQURRWDlxSWdNRWZ5QUdCU0FFS0FJTUlRSWdBQ0FDUWY4QWNVRUlhaEVBQUVVTkFTQUVLQUlFSVFNZ0JDZ0NBQXNpQWkwQUFEWUNFQ0FBS0FJQUlnWWdCeWdDQURZQ0dDQUdJQUVvQWdnMkFod2dCaUFIS0FJTU5nSWdJQVlnQnlnQ0VEWUNKQ0FHUWVjQU5nSVVJQVlvQWdRaEFTQUFRUUVnQVVFL2NVR3lCV29SQXdBZ0EwRi9haUVCSUFKQkFXb2hBaUFGUVFGcUlnVWdBQ2dDSkVnTkFRd0NDd3NNQWdzTElBQW9BdEFEUVFFMkFoQWdCQ0FDTmdJQUlBUWdBVFlDQkVFQkR3dEJBQXMwQVFGL0lBQW9BZ1FnQVNnQ0NCQ0xBU0lDQkVBZ0FpQUFJQUVRclFKQkFFZ0VRQ0FDRUVsQkFDRUNDd1ZCQUNFQ0N5QUNDeVFBSUFVRWZTQUFJQUVnQWlBRElBUWdCaERLQmdVZ0FDQUJJQUlnQXlBRUVNc0dDd3YzQmdNSGZ3VjlBM3dqQmlFSUl3WkI0QUZxSkFZZ0NFSElBV29oQnlBSVFkUUJhaUlKSUFSQkJIUVFSQ0lOTmdJQUlBMUZCRUJCQUVFRFFibllBaUFIRUQxQkFSQUJDeUFJUWRBQmFpRUhJQWtnQkVFWWJCQkVJZ3cyQWdRZ0RFVUVRRUVBUVFOQnVkZ0NJQWNRUFVFQkVBRUxJQWhCNEFCcUlRb2dDRUhBQVdvaEMwRUFJUWNEUUNBSElBUklCRUFnRUNBSFFReHNJQU5xS2dJQWtpRVFJQThnQjBFTWJDQURhaW9DQkpJaER5QU9JQWRCREd3Z0Eyb3FBZ2lTSVE0Z0IwRUJhaUVIREFFTEN5QVFJQVN5SWhHVklSQWdEeUFSbFNFUElBNGdFWlVoRGtFQUlRY0RRQ0FISUFSSUJFQWdCMEVFZENBTmFpQUhRUU4wSUFKcUtnSUF1emtEQUNBSFFRUjBJQTFxSUFkQkEzUWdBbW9xQWdTN09RTUlJQWRCR0d3Z0RHb2dCMEVNYkNBRGFpb0NBQ0FRazdzNUF3QWdCMEVZYkNBTWFpQUhRUXhzSUFOcUtnSUVJQStUdXprRENDQUhRUmhzSUF4cUlBZEJER3dnQTJvcUFnZ2dEcE83T1FNUUlBZEJBV29oQnd3QkN3c2dDU0FFTmdJSVFRQWhBZ05BSUFKQkEwY0VRRUVBSVFNRFFDQURRUU5IQkVBZ0FrRUZkQ0FLYWlBRFFRTjBhaUFDUVFSMElBRnFJQU5CQW5ScUtnSUF1emtEQUNBRFFRRnFJUU1NQVFzTElBSkJBV29oQWd3QkN3c2dDaUFCS2dJTUlCQWdBU29DQUpRZ0R5QUJLZ0lFbEpJZ0RpQUJLZ0lJbEpLU3V6a0RHQ0FLSUFFcUFod2dFQ0FCS2dJUWxDQVBJQUVxQWhTVWtpQU9JQUVxQWhpVWtwSzdPUU00SUFvZ0FTb0NMQ0FRSUFFcUFpQ1VJQThnQVNvQ0pKU1NJQTRnQVNvQ0tKU1NrcnM1QTFnZ0JnUkFJQUFnQ1NBS0lBZ2dDeENkQkVFQVNBUkFJQXRFQUFBQUFJVFhsMEU1QXdBTEJTQUFJQWtnQ2lBSUlBc1E2Z0ZCQUVnRVFDQUxSQUFBQUFDRTE1ZEJPUU1BQ3dzZ0NTZ0NBQkE0SUFrb0FnUVFPRUVBSVFBRFFDQUFRUU5IQkVCQkFDRUJBMEFnQVVFRFJ3UkFJQUJCQkhRZ0JXb2dBVUVDZEdvZ0FFRUZkQ0FJYWlBQlFRTjBhaXNEQUxZNEFnQWdBVUVCYWlFQkRBRUxDeUFBUVFGcUlRQU1BUXNMSUFVZ0NDc0RHQ0FJS3dNQUlCQzdJaE9pb1NBSUt3TUlJQSs3SWhTaW9TQUlLd01RSUE2N0loV2lvYlk0QWd3Z0JTQUlLd000SUFnckF5QWdFNktoSUFnckF5Z2dGS0toSUFnckF6QWdGYUtodGpnQ0hDQUZJQWdyQTFnZ0NFRkFheXNEQUNBVG9xRWdDQ3NEU0NBVW9xRWdDQ3NEVUNBVm9xRzJPQUlzSUFzckF3QzJJUklnQ0NRR0lCSUxKd0VDZndKL0l3WWhBeU1HUVJCcUpBWWdBRUVFUWZBWFFidlVBa0VHSUFFUUNTQURDeVFHQ3dvQUlBQkJHR29RbFFFTEZRQWdBRU1BQUlBL0lBRWdBVU1BQUFBQVd4dVZDeUlBSUFBZ0FTb0NBQ0FDS2dJQWt6Z0NBQ0FBSUFFcUFnUWdBaW9DQkpNNEFnUUx5UUlCQkg4akJpRURJd1pCRUdva0JpQUJLQUlBUVFKSEJFQWdBMEhBeUFOQjhPUUJFRGRCbWVBQkVEZEI3NklDRURkQjVRSVFQa0gyb2dJUU4wR2Y1UUVRTnlJRUlBUW9BZ0JCZEdvb0FnQnFFRHNnQTBHQXpnTVFPaUlGS0FJQUtBSWNJUVlnQlVFS0lBWkJQM0ZCaWdGcUVRSUFJUVVnQXhBOElBUWdCUkJBSUFRUVB4QUFDd0pBQWtBQ1FBSkFBa0FnQWlnQ0FBNERBZ0FCQXdzZ0FTZ0NHQ0FBS0FJZ0lBSW9BaGdnQWlnQ0JDQUNLQUlJRU5ZSURBTUxJQUVvQWhnZ0FDZ0NMQ0FDS0FJWUlBSW9BZ1FnQWlnQ0NCRFZDQXdDQzBFUUVBVWhBQ0FEUWdBM0FnQWdBMEVBTmdJSUlBTkJ3K1VCUWNQbEFSQmdFSDRnQUNBREVJWUNJQUJCaVBJQVFRVVFCQXdCQzBFUUVBVWhBQ0FEUWdBM0FnQWdBMEVBTmdJSUlBTkIxdVVCUWRibEFSQmdFSDRnQUNBREVJWUNJQUJCaVBJQVFRVVFCQXNnQXlRR0MwQUJBWDBnQUVFQklBUjBzaUlGSUFLVVJBQUFBQUFBQVBBL0lBUkJmMm9RbndGRUFBQUFBQUFBNEwrZ3RpSUNramdDQUNBQklBVWdBNVFnQXBJNEFnQUx4QUVCQlg4akJpRURJd1pCSUdva0JrSEg0L0U0SUFBb0FnUWdBQ2dDQUd0QkpCQTVRUUZxSWdKSkJFQVFBQVVnQXlBQ0lBQW9BZ2dnQUNnQ0FDSUVhMEVrRURraUJVRUJkQ0lHSUFZZ0Fra2JRY2ZqOFRnZ0JVSGo4YmdjU1JzZ0FDZ0NCQ0FFYTBFa0VEa2dBRUVJYWhEUUFpQURLQUlJSWdJZ0FTa0NBRGNDQUNBQ0lBRXBBZ2czQWdnZ0FpQUJLUUlRTndJUUlBSWdBU2tDR0RjQ0dDQUNJQUVvQWlBMkFpQWdBeUFDUVNScU5nSUlJQUFnQXhEUEFpQURFTTRDSUFNa0Jnc0xHZ0JEQUFBQUFDQUJJQUFnQUNBQlhoc2dBRU1BQUFBQVhSc0xsd0VCQkg4Z0FVRUVhaUlES0FJQVFRQWdBQ2dDQkNBQUtBSUFJZ1JySWdWQkFuVnJRUUowYWlFQ0lBTWdBallDQUNBRlFRQktCRUFnQWlBRUlBVVFUQm9nQXlnQ0FDRUNDeUFBS0FJQUlRUWdBQ0FDTmdJQUlBTWdCRFlDQUNBQUtBSUVJUUlnQUNBQktBSUlOZ0lFSUFFZ0FqWUNDQ0FBS0FJSUlRSWdBQ0FCS0FJTU5nSUlJQUVnQWpZQ0RDQUJJQU1vQWdBMkFnQUw0QUVDQW44QmZTTUdJUVlqQmtFd2FpUUdJQUFFZnlBQVFRaHFJQUVnQmhENkFTQUFRYmdCYWlBR0tnSU1JQVlxQWdBZ0FwUWdCaW9DQkNBRGxKS1NJQVlxQWl3Z0Jpb0NJQ0FDbENBR0tnSWtJQU9Va3BJaUNKVWdCaW9DSENBR0tnSVFJQUtVSUFZcUFoUWdBNVNTa2lBSWxTQUVJQVVRYlVFZmRRVWdBU29DSENBQktnSVFJQUtVSUFFcUFoUWdBNVNTa2lFSUlBUWdBU29DRENBQktnSUFJQUtVSUFFcUFnUWdBNVNTa2lBQktnSXNJQUVxQWlBZ0FwUWdBU29DSkNBRGxKS1NJZ0tWT0FJQUlBVWdDQ0FDbFRnQ0FFRUFDeUVISUFZa0JpQUhDelFCQW44RFFBSkFJQUFnQVJDV0F5SUNSUVJBUVFBaEFnd0JDeUFBTEFBQVFRcHJJZ05CQUNBRFFSbEhHMFVOQVFzTElBSUxYUUVCZnlBQklBQklJQUFnQVNBQ2FraHhCRUFnQVNBQ2FpRUJJQUFpQXlBQ2FpRUFBMEFnQWtFQVNnUkFJQUpCQVdzaEFpQUFRUUZySWdBZ0FVRUJheUlCTEFBQU9nQUFEQUVMQ3lBRElRQUZJQUFnQVNBQ0VFd2FDeUFBQzRNQkFRSi9JQUJGQkVBZ0FSQkVEd3NnQVVHL2Ywc0VRRUdreFFOQk1EWUNBRUVBRHdzZ0FFRjRha0VRSUFGQkMycEJlSEVnQVVFTFNSc1E0QWtpQWdSQUlBSkJDR29QQ3lBQkVFUWlBa1VFUUVFQUR3c2dBaUFBSUFCQmZHb29BZ0FpQTBGNGNVRUVRUWdnQTBFRGNSdHJJZ01nQVNBRElBRkpHeEJNR2lBQUVEZ2dBZ3RaQVFKL0EwQWdBQ0FCRUpZREJFQWdBQkJnSVFJRFFBSkFJQUpGRFFBQ1FDQUFJQUpCZjJvaUFtb2lBeXdBQUVFS2F3NEVBQUVCQUFFTElBTkJBRG9BQUF3QkN3c2dBQ3dBQUNJQ1FRQWdBa0VqUnh0RkRRRUxDd3ZtQkFJSWZ3UjhJd1loQ0NNR1FiQUJhaVFHSUFoQnFBRnFJUVVnQ0VHZ0FXb2hCaUFJUVpBQmFpRUtJQWhCTUdvaEN5QUJLQUlJSWdkQkEwZ0VmMEYvQlFKL0lBZEI0QUJzRUVRaUNVVUVRRUVBUVFOQnl0Z0NJQVlRUFVGL0RBRUxJQWRCQkhRUVJDSUhSUVJBUVFCQkEwSEsyQUlnQlJBOUlBa1FPRUYvREFFTFFRQWhCUU5BSUFWQkEwY0VRRUVBSVFZRFFDQUdRUVJIQkVBZ0JVRUZkQ0FEYWlBR1FRTjBhaUFGUVFWMElBSnFJQVpCQTNScUt3TUFPUU1BSUFaQkFXb2hCZ3dCQ3dzZ0JVRUJhaUVGREFFTEMwRUFJUVlDUUFKQUFrQURRQUpBSUFBZ0F5QUxFTE1DUkFBQUFBQUFBQUFBSVExQkFDRUZBMEFnQlNBQktBSUlJZ0pJQkVBZ0NpQUxJQUVvQWdRZ0JVRVliR29RdXdSQkFFZ05BaUFCS0FJQUlnSWdCVUVFZEdvckF3QWdDaXNEQUtFaERpQUZRUVIwSUFKcUt3TUlJQW9yQXdpaElROGdCVUVCZENJQ1FRTjBJQWRxSUE0NUF3QWdBa0VCY2tFRGRDQUhhaUFQT1FNQUlBMGdEaUFPb2lBUElBK2lvS0FoRFNBRlFRRnFJUVVNQVFzTElBMGdBcmVqSWcwZ0FDc0RhR01OQkNBR0JFQWdEU0FBS3dONFl3UkFJQTBnRUtNZ0FDc0RjR1FOQmdzTElBWWdBQ2dDWUVZTkJFRUFJUVVEUUNBRklBSklCRUFnQlVFTWJFRURkQ0FKYWlBQUlBTWdBU2dDQkNBRlFSaHNhaEM1QkVFQVNBMEVJQVZCQVdvaEJTQUJLQUlJSVFJTUFRc0xJQWdnQnlBSklBSkJBWFFRc3dSQkFFZ05BeUFESUFnUXNnUWdEU0VRSUFaQkFXb2hCZ3dCQ3dzZ0NTQUhFT0FDUVg4TUF3c2dDU0FIRU9BQ1FYOE1BZ3NnQ1NBSEVPQUNRWDhNQVFzZ0JDQU5PUU1BSUFrUU9DQUhFRGhCQUFzTElRd2dDQ1FHSUF3TFhBRUNmeU1HSVFNakJrRVFhaVFHSUFNZ0FSQTdJQU5CcU00REVEb2lBU2dDQUNnQ0VDRUVJQUlnQVNBRVFmOEFjVUVJYWhFQUFEWUNBQ0FCS0FJQUtBSVVJUUlnQUNBQklBSkJQM0ZCc2dWcUVRTUFJQU1RUENBREpBWUxDUUFnQUNBQkVJb0xDMXdCQW44akJpRURJd1pCRUdva0JpQURJQUVRT3lBRFFaRE9BeEE2SWdFb0FnQW9BaEFoQkNBQ0lBRWdCRUgvQUhGQkNHb1JBQUE2QUFBZ0FTZ0NBQ2dDRkNFQ0lBQWdBU0FDUVQ5eFFiSUZhaEVEQUNBREVEd2dBeVFHQ3hBQUlBQWdBU0FBS0FJWVJYSTJBaEFMZXdFQmZ5QUFRWDlHQkVCQmZ5RUFCUUpBSUFFb0FreEJmMG9FZjBFQkJVRUFDeG9DUUFKQUlBRW9BZ1FpQWcwQUlBRVFwd0lhSUFFb0FnUWlBZzBBREFFTElBSWdBU2dDTEVGNGFrc0VRQ0FCSUFKQmYyb2lBallDQkNBQ0lBQTZBQUFnQVNBQktBSUFRVzl4TmdJQURBSUxDMEYvSVFBTEN5QUFDMVFCQW44Z0FVRWZTd1IvSUFBZ0FDZ0NBQ0lDTmdJRUlBQkJBRFlDQUNBQlFXQnFJUUZCQUFVZ0FDZ0NCQ0VDSUFBb0FnQUxJUU1nQUNBQ0lBRjBJQU5CSUNBQmEzWnlOZ0lFSUFBZ0F5QUJkRFlDQUF1WEF3RUZmeU1HSVFnakJrSHdBV29rQmlBSVFlZ0JhaUlKSUFNb0FnQWlCellDQUNBSklBTW9BZ1FpQXpZQ0JDQUlJQUEyQWdBQ1FBSkFJQU1nQjBFQlIzSUVRRUVBSUFGcklRc2dBQ0FFUVFKMElBWnFLQUlBYXlJS0lBQWdBa0UvY1VHS0FXb1JBZ0JCQVVnRVFFRUJJUU1GUVFFaEJ5QUZSU0VGSUFBaEF5QUtJUUFEZnlBRklBUkJBVXB4QkVBZ0JFRitha0VDZENBR2FpZ0NBQ0VLSUFNZ0Myb2lCU0FBSUFKQlAzRkJpZ0ZxRVFJQVFYOUtCRUFnQnlFRklBTWhBQXdGQ3lBRklBcHJJQUFnQWtFL2NVR0tBV29SQWdCQmYwb0VRQ0FISVFVZ0F5RUFEQVVMQ3lBSFFRRnFJUVVnQjBFQ2RDQUlhaUFBTmdJQUlBa2dDUkNCQXlJREVQSUJJQU1nQkdvaEJDQUpLQUlBUVFGSElBa29BZ1JCQUVkeVJRMERJQUFnQkVFQ2RDQUdhaWdDQUdzaUNpQUlLQUlBSUFKQlAzRkJpZ0ZxRVFJQVFRRklCSDhnQlNFRFFRQUZJQUFoQXlBRklRZEJBU0VGSUFvaEFBd0JDd3NoQlFzRlFRRWhBd3NnQlVVRVFDQURJUVVNQVFzTUFRc2dBU0FJSUFVUS93SWdBQ0FCSUFJZ0JDQUdFS0lDQ3lBSUpBWUxWQUVDZnlBQlFSOUxCSDhnQUNBQUtBSUVJZ0kyQWdBZ0FFRUFOZ0lFSUFGQllHb2hBVUVBQlNBQUtBSUFJUUlnQUNnQ0JBc2hBeUFBSUFOQklDQUJhM1FnQWlBQmRuSTJBZ0FnQUNBRElBRjJOZ0lFQzE0QkFYOENmeUFBS0FKTVFRQk9CRUFnQUNnQ0JDSUJJQUFvQWdoSkJIOGdBQ0FCUVFGcU5nSUVJQUV0QUFBRklBQVE5UUVMREFFTElBQW9BZ1FpQVNBQUtBSUlTUVIvSUFBZ0FVRUJhallDQkNBQkxRQUFCU0FBRVBVQkN3c0xFZ0FnQUNnQ1RCb2dBQ0FCckNBQ0VJa0RDMGtCQTM4akJpRUJJd1pCRUdva0JpQUFFS2NDQkg5QmZ3VWdBQ2dDSUNFQ0lBQWdBVUVCSUFKQlAzRkJ5Z0ZxRVFRQVFRRkdCSDhnQVMwQUFBVkJmd3NMSVFNZ0FTUUdJQU1MRUFBZ0FWQUVma0lBQlNBQUlBR0FDd3RlQVFGL0lBUkJBRXdFUUE4TElBRkJBblFnQUdvaEFDQURRUUowSUFKcUlRRURRQ0FBUVFScUlRSWdBVUVFYWlFRElBRW9BZ0FnQUNnQ0FDQUZFRXdhSUFSQmYyb2hCaUFFUVFGS0JFQWdBaUVBSUFNaEFTQUdJUVFNQVFzTEN4TUFJQUVnQUVGL2Ftb2lBQ0FBSUFFUVQyc0x2QzBCQ1g4akJpRUtJd1pCb0FwcUpBWWdBa0VEU3dSQUlBQW9BZ0FpQlVFME5nSVVJQVVnQWpZQ0dDQUFLQUlBS0FJQUlRVWdBQ0FGUWY4QmNVR3NBMm9SQVFBTElBQkJ0QUZxSUFKQkFuUnFJQUJCeEFGcUlBSkJBblJxSUFGQkFFY2lEQnNvQWdBaUJrVUVRQ0FBS0FJQUlnRkJORFlDRkNBQklBSTJBaGdnQUNnQ0FDZ0NBQ0VCSUFBZ0FVSC9BWEZCckFOcUVRRUFDeUFES0FJQUlnUkZCRUFnQUNnQ0JDZ0NBQ0VCSUFNZ0FFRUJRWkFMSUFGQlAzRkJ5Z0ZxRVFRQUlnUTJBZ0FMSUFBaEN5QUtRWkFJYWlFSklBUWdCallDakFFZ0Jpd0FBU0lDUWY4QmNTRUJJQUlFUUNBSlFRRWdBUkJGR2dWQkFDRUJDeUFCSUFZc0FBSWlBMEgvQVhFaUJXb2lBa0dBQWtzRVFDQUFLQUlBSWdoQkNUWUNGQ0FJS0FJQUlRZ2dDeUFJUWY4QmNVR3NBMm9SQVFBTElBTUVRQ0FCSUFscVFRSWdCUkJGR2lBQ0lRRUxJQUVnQml3QUF5SURRZjhCY1NJRmFpSUNRWUFDU2dSQUlBQW9BZ0FpQ0VFSk5nSVVJQWdvQWdBaENDQUxJQWhCL3dGeFFhd0RhaEVCQUFzZ0F3UkFJQUVnQ1dwQkF5QUZFRVVhSUFJaEFRc2dBU0FHTEFBRUlnTkIvd0Z4SWdWcUlnSkJnQUpLQkVBZ0FDZ0NBQ0lJUVFrMkFoUWdDQ2dDQUNFSUlBc2dDRUgvQVhGQnJBTnFFUUVBQ3lBREJFQWdBU0FKYWtFRUlBVVFSUm9nQWlFQkN5QUJJQVlzQUFVaUEwSC9BWEVpQldvaUFrR0FBa29FUUNBQUtBSUFJZ2hCQ1RZQ0ZDQUlLQUlBSVFnZ0N5QUlRZjhCY1VHc0Eyb1JBUUFMSUFNRVFDQUJJQWxxUVFVZ0JSQkZHaUFDSVFFTElBRWdCaXdBQmlJRFFmOEJjU0lGYWlJQ1FZQUNTZ1JBSUFBb0FnQWlDRUVKTmdJVUlBZ29BZ0FoQ0NBTElBaEIvd0Z4UWF3RGFoRUJBQXNnQXdSQUlBRWdDV3BCQmlBRkVFVWFJQUloQVFzZ0FTQUdMQUFISWdOQi93RnhJZ1ZxSWdKQmdBSktCRUFnQUNnQ0FDSUlRUWsyQWhRZ0NDZ0NBQ0VJSUFzZ0NFSC9BWEZCckFOcUVRRUFDeUFEQkVBZ0FTQUpha0VISUFVUVJSb2dBaUVCQ3lBQklBWXNBQWdpQTBIL0FYRWlCV29pQWtHQUFrb0VRQ0FBS0FJQUlnaEJDVFlDRkNBSUtBSUFJUWdnQ3lBSVFmOEJjVUdzQTJvUkFRQUxJQU1FUUNBQklBbHFRUWdnQlJCRkdpQUNJUUVMSUFFZ0Jpd0FDU0lEUWY4QmNTSUZhaUlDUVlBQ1NnUkFJQUFvQWdBaUNFRUpOZ0lVSUFnb0FnQWhDQ0FMSUFoQi93RnhRYXdEYWhFQkFBc2dBd1JBSUFFZ0NXcEJDU0FGRUVVYUlBSWhBUXNnQVNBR0xBQUtJZ05CL3dGeElnVnFJZ0pCZ0FKS0JFQWdBQ2dDQUNJSVFRazJBaFFnQ0NnQ0FDRUlJQXNnQ0VIL0FYRkJyQU5xRVFFQUN5QURCRUFnQVNBSmFrRUtJQVVRUlJvZ0FpRUJDeUFCSUFZc0FBc2lBMEgvQVhFaUJXb2lBa0dBQWtvRVFDQUFLQUlBSWdoQkNUWUNGQ0FJS0FJQUlRZ2dDeUFJUWY4QmNVR3NBMm9SQVFBTElBTUVRQ0FCSUFscVFRc2dCUkJGR2lBQ0lRRUxJQUVnQml3QURDSURRZjhCY1NJRmFpSUNRWUFDU2dSQUlBQW9BZ0FpQ0VFSk5nSVVJQWdvQWdBaENDQUxJQWhCL3dGeFFhd0RhaEVCQUFzZ0F3UkFJQUVnQ1dwQkRDQUZFRVVhSUFJaEFRc2dBU0FHTEFBTklnTkIvd0Z4SWdWcUlnSkJnQUpLQkVBZ0FDZ0NBQ0lJUVFrMkFoUWdDQ2dDQUNFSUlBc2dDRUgvQVhGQnJBTnFFUUVBQ3lBREJFQWdBU0FKYWtFTklBVVFSUm9nQWlFQkN5QUJJQVlzQUE0aUEwSC9BWEVpQldvaUFrR0FBa29FUUNBQUtBSUFJZ2hCQ1RZQ0ZDQUlLQUlBSVFnZ0N5QUlRZjhCY1VHc0Eyb1JBUUFMSUFNRVFDQUJJQWxxUVE0Z0JSQkZHaUFDSVFFTElBRWdCaXdBRHlJRFFmOEJjU0lGYWlJQ1FZQUNTZ1JBSUFBb0FnQWlDRUVKTmdJVUlBZ29BZ0FoQ0NBTElBaEIvd0Z4UWF3RGFoRUJBQXNnQXdSQUlBRWdDV3BCRHlBRkVFVWFJQUloQVFzZ0FTQUdMQUFRSWdKQi93RnhJZ05xSWdoQmdBSktCRUFnQUNnQ0FDSUZRUWsyQWhRZ0JTZ0NBQ0VGSUFzZ0JVSC9BWEZCckFOcUVRRUFDeUFDQkVBZ0FTQUpha0VRSUFNUVJSb0ZJQUVoQ0FzZ0NDQUpha0VBT2dBQUlBa3NBQUFpQlFSQVFRQWhBVUVBSVFJZ0JTRURBMEFnQlNBRFFSaDBRUmgxUmdSQUEwQWdBa0VDZENBS2FpQUJOZ0lBSUFGQkFXb2hBU0FGSUFrZ0FrRUJhaUlDYWl3QUFDSURSZzBBQ3dzZ0FVRUJJQVYwVGdSQUlBQW9BZ0FpQjBFSk5nSVVJQWNvQWdBaEJ5QUxJQWRCL3dGeFFhd0RhaEVCQUFzZ0FVRUJkQ0VCSUFWQkFXb2hCU0FEUWY4QmNRMEFDd3NnQkNBR0xBQUJCSDhnQkVFQUlBb29BZ0JyTmdKTUlBWXRBQUVpQWlFQklBSkJmMnBCQW5RZ0Ntb29BZ0FGUVFBaEFVRi9DellDQkNBRUlBWXNBQUlFZnlBRUlBRWdBVUVDZENBS2FpZ0NBR3MyQWxBZ0FTQUdMUUFDYWlJQ0lRRWdBa0YvYWtFQ2RDQUthaWdDQUFWQmZ3czJBZ2dnQkNBR0xBQURCSDhnQkNBQklBRkJBblFnQ21vb0FnQnJOZ0pVSUFFZ0JpMEFBMm9pQWlFQklBSkJmMnBCQW5RZ0Ntb29BZ0FGUVg4TE5nSU1JQVFnQml3QUJBUi9JQVFnQVNBQlFRSjBJQXBxS0FJQWF6WUNXQ0FCSUFZdEFBUnFJZ0loQVNBQ1FYOXFRUUowSUFwcUtBSUFCVUYvQ3pZQ0VDQUVJQVlzQUFVRWZ5QUVJQUVnQVVFQ2RDQUthaWdDQUdzMkFsd2dBU0FHTFFBRmFpSUNJUUVnQWtGL2FrRUNkQ0FLYWlnQ0FBVkJmd3MyQWhRZ0JDQUdMQUFHQkg4Z0JDQUJJQUZCQW5RZ0Ntb29BZ0JyTmdKZ0lBRWdCaTBBQm1vaUFpRUJJQUpCZjJwQkFuUWdDbW9vQWdBRlFYOExOZ0lZSUFRZ0Jpd0FCd1IvSUFRZ0FTQUJRUUowSUFwcUtBSUFhellDWkNBQklBWXRBQWRxSWdJaEFTQUNRWDlxUVFKMElBcHFLQUlBQlVGL0N6WUNIQ0FFSUFZc0FBZ0VmeUFFSUFFZ0FVRUNkQ0FLYWlnQ0FHczJBbWdnQVNBR0xRQUlhaUlDSVFFZ0FrRi9ha0VDZENBS2FpZ0NBQVZCZndzMkFpQWdCQ0FHTEFBSkJIOGdCQ0FCSUFGQkFuUWdDbW9vQWdCck5nSnNJQUVnQmkwQUNXb2lBaUVCSUFKQmYycEJBblFnQ21vb0FnQUZRWDhMTmdJa0lBUWdCaXdBQ2dSL0lBUWdBU0FCUVFKMElBcHFLQUlBYXpZQ2NDQUJJQVl0QUFwcUlnSWhBU0FDUVg5cVFRSjBJQXBxS0FJQUJVRi9DellDS0NBRUlBWXNBQXNFZnlBRUlBRWdBVUVDZENBS2FpZ0NBR3MyQW5RZ0FTQUdMUUFMYWlJQ0lRRWdBa0YvYWtFQ2RDQUthaWdDQUFWQmZ3czJBaXdnQkNBR0xBQU1CSDhnQkNBQklBRkJBblFnQ21vb0FnQnJOZ0o0SUFFZ0JpMEFER29pQWlFQklBSkJmMnBCQW5RZ0Ntb29BZ0FGUVg4TE5nSXdJQVFnQml3QURRUi9JQVFnQVNBQlFRSjBJQXBxS0FJQWF6WUNmQ0FCSUFZdEFBMXFJZ0loQVNBQ1FYOXFRUUowSUFwcUtBSUFCVUYvQ3pZQ05DQUVJQVlzQUE0RWZ5QUVJQUVnQVVFQ2RDQUthaWdDQUdzMkFvQUJJQUVnQmkwQURtb2lBaUVCSUFKQmYycEJBblFnQ21vb0FnQUZRWDhMTmdJNElBUWdCaXdBRHdSL0lBUWdBU0FCUVFKMElBcHFLQUlBYXpZQ2hBRWdBU0FHTFFBUGFpSUNJUUVnQWtGL2FrRUNkQ0FLYWlnQ0FBVkJmd3MyQWp3Z0JFRkFheUFHTEFBUUJIOGdCQ0FCSUFGQkFuUWdDbW9vQWdCck5nS0lBU0FCSUFZdEFCQnFRWDlxUVFKMElBcHFLQUlBQlVGL0N6WUNBQ0FFUWYvL1B6WUNSQ0FFUVpBQmFrRUFRWUFJRUVVYUlBWXNBQUVFUUVFQklRTkJBQ0VCQTBBZ0FTQUdRUkZxYWlFSFFZQUJJUVVnQVVFQ2RDQUthaWdDQUVFSGRDRUNBMEFnQkVHUUFXb2dBa0VDZEdwQkFUWUNBQ0FDSUFSQmtBbHFhaUFITEFBQU9nQUFJQUpCQVdvaEFpQUZRWDlxSVFrZ0JVRUJTZ1JBSUFraEJRd0JDd3NnQTBFQmFpRUNJQUZCQVdvaEFTQURJQVl0QUFGSkJFQWdBaUVEREFFTEN3VkJBQ0VCQ3lBR0xBQUNCRUJCQVNFREEwQWdBU0FHUVJGcWFpRUhRY0FBSVFVZ0FVRUNkQ0FLYWlnQ0FFRUdkQ0VDQTBBZ0JFR1FBV29nQWtFQ2RHcEJBallDQUNBQ0lBUkJrQWxxYWlBSExBQUFPZ0FBSUFKQkFXb2hBaUFGUVg5cUlRa2dCVUVCU2dSQUlBa2hCUXdCQ3dzZ0EwRUJhaUVDSUFGQkFXb2hBU0FESUFZdEFBSkpCRUFnQWlFRERBRUxDd3NnQml3QUF3UkFRUUVoQWdOQUlBUkJrQUZxSUFGQkFuUWdDbW9vQWdCQkJYUWlDVUVDZEdwQkF6WUNBQ0FKSUFSQmtBbHFhaUFCSUFaQkVXcHFJZ01zQUFBNkFBQWdCRUdRQVdvZ0NVRUJjaUlGUVFKMGFrRUROZ0lBSUFVZ0JFR1FDV3BxSUFNc0FBQTZBQUFnQkVHUUFXb2dCVUVCYWlJRlFRSjBha0VETmdJQUlBVWdCRUdRQ1dwcUlBTXNBQUE2QUFBZ0JFR1FBV29nQ1VFRGNpSUZRUUowYWtFRE5nSUFJQVVnQkVHUUNXcHFJQU1zQUFBNkFBQWdCRUdRQVdvZ0JVRUJhaUlIUVFKMGFrRUROZ0lBSUFjZ0JFR1FDV3BxSUFNc0FBQTZBQUFnQkVHUUFXb2dCVUVDYWlJSFFRSjBha0VETmdJQUlBY2dCRUdRQ1dwcUlBTXNBQUE2QUFBZ0JFR1FBV29nQlVFRGFpSUZRUUowYWtFRE5nSUFJQVVnQkVHUUNXcHFJQU1zQUFBNkFBQWdCRUdRQVdvZ0NVRUhjaUlGUVFKMGFrRUROZ0lBSUFVZ0JFR1FDV3BxSUFNc0FBQTZBQUFnQkVHUUFXb2dCVUVCYWlJSFFRSjBha0VETmdJQUlBY2dCRUdRQ1dwcUlBTXNBQUE2QUFBZ0JFR1FBV29nQlVFQ2FpSUhRUUowYWtFRE5nSUFJQWNnQkVHUUNXcHFJQU1zQUFBNkFBQWdCRUdRQVdvZ0JVRURhaUlIUVFKMGFrRUROZ0lBSUFjZ0JFR1FDV3BxSUFNc0FBQTZBQUFnQkVHUUFXb2dCVUVFYWlJSFFRSjBha0VETmdJQUlBY2dCRUdRQ1dwcUlBTXNBQUE2QUFBZ0JFR1FBV29nQlVFRmFpSUhRUUowYWtFRE5nSUFJQWNnQkVHUUNXcHFJQU1zQUFBNkFBQWdCRUdRQVdvZ0JVRUdhaUlIUVFKMGFrRUROZ0lBSUFjZ0JFR1FDV3BxSUFNc0FBQTZBQUFnQkVHUUFXb2dCVUVIYWlJRlFRSjBha0VETmdJQUlBVWdCRUdRQ1dwcUlBTXNBQUE2QUFBZ0JFR1FBV29nQ1VFUGNpSUZRUUowYWtFRE5nSUFJQVVnQkVHUUNXcHFJQU1zQUFBNkFBQWdCRUdRQVdvZ0JVRUJhaUlIUVFKMGFrRUROZ0lBSUFjZ0JFR1FDV3BxSUFNc0FBQTZBQUFnQkVHUUFXb2dCVUVDYWlJSFFRSjBha0VETmdJQUlBY2dCRUdRQ1dwcUlBTXNBQUE2QUFBZ0JFR1FBV29nQlVFRGFpSUhRUUowYWtFRE5nSUFJQWNnQkVHUUNXcHFJQU1zQUFBNkFBQWdCRUdRQVdvZ0JVRUVhaUlIUVFKMGFrRUROZ0lBSUFjZ0JFR1FDV3BxSUFNc0FBQTZBQUFnQkVHUUFXb2dCVUVGYWlJSFFRSjBha0VETmdJQUlBY2dCRUdRQ1dwcUlBTXNBQUE2QUFBZ0JFR1FBV29nQlVFR2FpSUhRUUowYWtFRE5nSUFJQWNnQkVHUUNXcHFJQU1zQUFBNkFBQWdCRUdRQVdvZ0JVRUhhaUlIUVFKMGFrRUROZ0lBSUFjZ0JFR1FDV3BxSUFNc0FBQTZBQUFnQkVHUUFXb2dCVUVJYWlJSFFRSjBha0VETmdJQUlBY2dCRUdRQ1dwcUlBTXNBQUE2QUFBZ0JFR1FBV29nQlVFSmFpSUhRUUowYWtFRE5nSUFJQWNnQkVHUUNXcHFJQU1zQUFBNkFBQWdCRUdRQVdvZ0JVRUthaUlIUVFKMGFrRUROZ0lBSUFjZ0JFR1FDV3BxSUFNc0FBQTZBQUFnQkVHUUFXb2dCVUVMYWlJSFFRSjBha0VETmdJQUlBY2dCRUdRQ1dwcUlBTXNBQUE2QUFBZ0JFR1FBV29nQlVFTWFpSUhRUUowYWtFRE5nSUFJQWNnQkVHUUNXcHFJQU1zQUFBNkFBQWdCRUdRQVdvZ0JVRU5haUlIUVFKMGFrRUROZ0lBSUFjZ0JFR1FDV3BxSUFNc0FBQTZBQUFnQkVHUUFXb2dCVUVPYWlJSFFRSjBha0VETmdJQUlBY2dCRUdRQ1dwcUlBTXNBQUE2QUFBZ0JFR1FBV29nQlVFUGFpSUZRUUowYWtFRE5nSUFJQVVnQkVHUUNXcHFJQU1zQUFBNkFBQWdCRUdRQVdvZ0NVRWZjaUlGUVFKMGFrRUROZ0lBSUFVZ0JFR1FDV3BxSUFNc0FBQTZBQUFnQWtFQmFpRURJQUZCQVdvaEFTQUNJQVl0QUFOSkJFQWdBeUVDREFFTEN3c2dCaXdBQkFSQVFRRWhBZ05BSUFSQmtBRnFJQUZCQW5RZ0Ntb29BZ0JCQkhRaUNVRUNkR3BCQkRZQ0FDQUpJQVJCa0FscWFpQUJJQVpCRVdwcUlnTXNBQUE2QUFBZ0JFR1FBV29nQ1VFQmNpSUZRUUowYWtFRU5nSUFJQVVnQkVHUUNXcHFJQU1zQUFBNkFBQWdCRUdRQVdvZ0JVRUJhaUlGUVFKMGFrRUVOZ0lBSUFVZ0JFR1FDV3BxSUFNc0FBQTZBQUFnQkVHUUFXb2dDVUVEY2lJRlFRSjBha0VFTmdJQUlBVWdCRUdRQ1dwcUlBTXNBQUE2QUFBZ0JFR1FBV29nQlVFQmFpSUhRUUowYWtFRU5nSUFJQWNnQkVHUUNXcHFJQU1zQUFBNkFBQWdCRUdRQVdvZ0JVRUNhaUlIUVFKMGFrRUVOZ0lBSUFjZ0JFR1FDV3BxSUFNc0FBQTZBQUFnQkVHUUFXb2dCVUVEYWlJRlFRSjBha0VFTmdJQUlBVWdCRUdRQ1dwcUlBTXNBQUE2QUFBZ0JFR1FBV29nQ1VFSGNpSUZRUUowYWtFRU5nSUFJQVVnQkVHUUNXcHFJQU1zQUFBNkFBQWdCRUdRQVdvZ0JVRUJhaUlIUVFKMGFrRUVOZ0lBSUFjZ0JFR1FDV3BxSUFNc0FBQTZBQUFnQkVHUUFXb2dCVUVDYWlJSFFRSjBha0VFTmdJQUlBY2dCRUdRQ1dwcUlBTXNBQUE2QUFBZ0JFR1FBV29nQlVFRGFpSUhRUUowYWtFRU5nSUFJQWNnQkVHUUNXcHFJQU1zQUFBNkFBQWdCRUdRQVdvZ0JVRUVhaUlIUVFKMGFrRUVOZ0lBSUFjZ0JFR1FDV3BxSUFNc0FBQTZBQUFnQkVHUUFXb2dCVUVGYWlJSFFRSjBha0VFTmdJQUlBY2dCRUdRQ1dwcUlBTXNBQUE2QUFBZ0JFR1FBV29nQlVFR2FpSUhRUUowYWtFRU5nSUFJQWNnQkVHUUNXcHFJQU1zQUFBNkFBQWdCRUdRQVdvZ0JVRUhhaUlGUVFKMGFrRUVOZ0lBSUFVZ0JFR1FDV3BxSUFNc0FBQTZBQUFnQkVHUUFXb2dDVUVQY2lJRlFRSjBha0VFTmdJQUlBVWdCRUdRQ1dwcUlBTXNBQUE2QUFBZ0FrRUJhaUVESUFGQkFXb2hBU0FDSUFZdEFBUkpCRUFnQXlFQ0RBRUxDd3NnQml3QUJRUkFRUUVoQWdOQUlBUkJrQUZxSUFGQkFuUWdDbW9vQWdCQkEzUWlCVUVDZEdwQkJUWUNBQ0FGSUFSQmtBbHFhaUFCSUFaQkVXcHFJZ01zQUFBNkFBQWdCRUdRQVdvZ0JVRUJjaUlKUVFKMGFrRUZOZ0lBSUFrZ0JFR1FDV3BxSUFNc0FBQTZBQUFnQkVHUUFXb2dDVUVCYWlJSlFRSjBha0VGTmdJQUlBa2dCRUdRQ1dwcUlBTXNBQUE2QUFBZ0JFR1FBV29nQlVFRGNpSUpRUUowYWtFRk5nSUFJQWtnQkVHUUNXcHFJQU1zQUFBNkFBQWdCRUdRQVdvZ0NVRUJhaUlIUVFKMGFrRUZOZ0lBSUFjZ0JFR1FDV3BxSUFNc0FBQTZBQUFnQkVHUUFXb2dDVUVDYWlJSFFRSjBha0VGTmdJQUlBY2dCRUdRQ1dwcUlBTXNBQUE2QUFBZ0JFR1FBV29nQ1VFRGFpSUpRUUowYWtFRk5nSUFJQWtnQkVHUUNXcHFJQU1zQUFBNkFBQWdCRUdRQVdvZ0JVRUhjaUlGUVFKMGFrRUZOZ0lBSUFVZ0JFR1FDV3BxSUFNc0FBQTZBQUFnQWtFQmFpRURJQUZCQVdvaEFTQUNJQVl0QUFWSkJFQWdBeUVDREFFTEN3c2dCaXdBQmdSQVFRRWhBZ05BSUFSQmtBRnFJQUZCQW5RZ0Ntb29BZ0JCQW5RaUEwRUNkR3BCQmpZQ0FDQURJQVJCa0FscWFpQUJJQVpCRVdwcUlnVXNBQUE2QUFBZ0JFR1FBV29nQTBFQmNpSUpRUUowYWtFR05nSUFJQWtnQkVHUUNXcHFJQVVzQUFBNkFBQWdCRUdRQVdvZ0NVRUJhaUlKUVFKMGFrRUdOZ0lBSUFrZ0JFR1FDV3BxSUFVc0FBQTZBQUFnQkVHUUFXb2dBMEVEY2lJRFFRSjBha0VHTmdJQUlBTWdCRUdRQ1dwcUlBVXNBQUE2QUFBZ0FrRUJhaUVESUFGQkFXb2hBU0FDSUFZdEFBWkpCRUFnQXlFQ0RBRUxDd3NnQml3QUJ3UkFRUUVoQWdOQUlBUkJrQUZxSUFGQkFuUWdDbW9vQWdCQkFYUWlBMEVDZEdwQkJ6WUNBQ0FESUFSQmtBbHFhaUFCSUFaQkVXcHFJZ1VzQUFBNkFBQWdCRUdRQVdvZ0EwRUJjaUlEUVFKMGFrRUhOZ0lBSUFNZ0JFR1FDV3BxSUFVc0FBQTZBQUFnQWtFQmFpRURJQUZCQVdvaEFTQUNJQVl0QUFkSkJFQWdBeUVDREFFTEN3c2dCaXdBQ0FSQVFRRWhBZ05BSUFSQmtBRnFJQUZCQW5RZ0Ntb29BZ0FpQTBFQ2RHcEJDRFlDQUNBRElBUkJrQWxxYWlBQklBWkJFV3BxTEFBQU9nQUFJQUpCQVdvaEF5QUJRUUZxSVFFZ0FpQUdMUUFJU1FSQUlBTWhBZ3dCQ3dzTElBd2dDRUVBU25GRkJFQWdDaVFHRHd0QkFDRUJBMEFnQVNBR1FSRnFhaTBBQUVFUFNnUkFJQUFvQWdBaUFrRUpOZ0lVSUFJb0FnQWhBaUFMSUFKQi93RnhRYXdEYWhFQkFBc2dBVUVCYWlJQklBaEhEUUFMSUFva0JndThBUUVGZndOQUlBUkJBMGNFUUNBRVFRVjBJQUJxSVFVZ0JFRUZkQ0FBYWlFR0lBUkJCWFFnQUdvaEIwRUFJUU1EUUNBRFFRUkhCRUFnQkVFRWRDQUNhaUFEUVFKMGFpQURRUUowSUFGcUtnSUFJQVVyQXdDMmxDQUJRUkJxSUFOQkFuUnFLZ0lBSUFZckF3aTJsSklnQVVFZ2FpQURRUUowYWlvQ0FDQUhLd01RdHBTU09BSUFJQU5CQVdvaEF3d0JDd3NnQkVFRWRDQUNhaUlESUFNcUFnd2dCRUVGZENBQWFpc0RHTGFTT0FJTUlBUkJBV29oQkF3QkN3c0wrbGNERG44RGZRbDhJd1loRFNNR1FZQUNhaVFHSUExQjBBQnFJUklnRFVHUUFXb2lEMFFBQUFBQUFBQlpRRGtEQUNBUFJBQUFBQUFBQUZsQU9RTUlJQTlFQUFBQUFBQ0FXMEE1QXhBZ0QwUUFBQUFBQUFCWlFEa0RHQ0FQUkFBQUFBQUFnRnRBT1FNZ0lBOUVBQUFBQUFDQVcwQTVBeWdnRDBRQUFBQUFBQUJaUURrRE1DQVBSQUFBQUFBQWdGdEFPUU00QTBBZ0VFRUVSd1JBSUJCQkJIUWdFbW9nRUVFRWRDQUphaXNEQURrREFDQVFRUVIwSUJKcUlCQkJCSFFnQ1dvckF3ZzVBd2dnRUVFQmFpRVFEQUVMQ3lBUElCSWdEUkNKQnlBU0t3TUFJaDBnRWlzREVDSWVvU0lmSUIraUlCSXJBd2dpSHlBU0t3TVlJaUNoSWlFZ0lhS2dFSE1oQ1NBU0t3TWdJaUVnRWlzRE1DSWlvU0lqSUNPaUlCSXJBeWdpSXlBU0t3TTRJaVNoSWlVZ0phS2dFSE1oRWlBZUlDR2hJaDRnSHFJZ0lDQWpvU0llSUI2aW9CQnpJUThnSWlBZG9TSWRJQjJpSUNRZ0g2RWlIU0Fkb3FBUWN5RVFJQklnQ1NBU0lBbEtHN2NnQ3FJZ0NxSVFjeUVWSUJBZ0R5QVFJQTlLRzdjZ0NxSWdDcUlRY3lFUUlBQUVRQ0FDSVFrRFFDQUpRUUYwSVJJZ0NTQUpRUUowYkNBVlNDQUpJQU5JY1FSQUlCSWhDUXdCQ3dzZ0FpRVNBMEFnRWtFQmRDRVBJQklnRWtFQ2RHd2dFRWdnRWlBRFNIRUVRQ0FQSVJJTUFRc0xCU0FDSVFrRFFDQUpRUUYwSVJJZ0NTQUpiQ0FWU0NBSklBTkljUVJBSUJJaENRd0JDd3NnQWlFU0EwQWdFa0VCZENFUElCSWdFbXdnRUVnZ0VpQURTSEVFUUNBUElSSU1BUXNMQ3lBTlFlZ0JhaUVNSUExQjRBRnFJUTRnRFVIWUFXb2hFeUFOUWRBQmFpRVJJQTFCOEFGcUlSQWdEVUhzQVdvaER5QURJQWtnQ1NBRFNoc2lDU0FDRURraEZTQURJQklnRWlBRFNoc2lBeUFDRURraEVrUUFBQUFBQUFEd1B5QUtvVVFBQUFBQUFBRGdQNkpFQUFBQUFBQUFKRUNpSVIwZ0NrUUFBQUFBQUFBa1FLSWhDaUFDSUFKc0lSUUNmd0pBSUFFRVFDQVVRUVFRalFJaUFVVUVRRUVBUVFOQnVkZ0NJQTRRUFVFQkVBRUxBa0FnQjBFQ1NRUkFJQjFFQUFBQUFBQUFXVUNnSVI0Z0E3Y2hJU0FKdHlFaUlBMUJRR3NoRXlBQVFRRkdJUkZCQUNFQUEwQWdBQ0FEVGcwQ0lCNGdDaUFBdDBRQUFBQUFBQURnUDZDaUlDR2pvQ0VkUVFBaEJ3TkFJQWNnQ1VnRVFDQVRLd01BSUI0Z0NpQUh0MFFBQUFBQUFBRGdQNkNpSUNLam9DSWZJQTByQXpDaUlCMGdEU3NET0tLZ29DSWdSQUFBQUFBQUFBQUFZUTBHSUJBZ0RTc0RFQ0FmSUEwckF3Q2lJQjBnRFNzRENLS2dvQ0FnbzdZaUdqZ0NBQ0FQSUEwckF5Z2dIeUFOS3dNWW9pQWRJQTByQXlDaW9LQWdJS08ySWhzNEFnQWdDQ0FhSUJzZ0VDQVBFRzBhSUJBcUFnQWhHaUFSQkg4Z0drTUFBSUEva2hCRFFRSVFPVUVCZENFTUlBOHFBZ0JEQUFDQVA1SVFRMEVDRURsQkFYUUZJQnBEQUFBQVA1SVFReUVNSUE4cUFnQkRBQUFBUDVJUVF3c2hEaUFNUVg5S0JFQWdEQ0FGU0NBT1FYOUtjU0FPSUFaSWNRUkFJQVFnRENBRklBNXNha0VEYkNJTWFpMEFBQ0FFSUF4QkFXcHFMUUFBYWlBRUlBeEJBbXBxTFFBQWFrRURFRWdoRENBQUlCSVFPU0FDYkNBSElCVVFPV3BCQW5RZ0FXb2lEaUFNSUE0b0FnQnFOZ0lBQ3dzZ0IwRUJhaUVIREFFTEN5QUFRUUZxSVFBTUFBQUxBQVVnQjBFQmNrRURSZ1JBSUIxRUFBQUFBQUFBV1VDZ0lSNGdBN2NoSVNBSnR5RWlJQTFCUUdzaEV5QUFRUUZHSVJGQkFDRUFBMEFnQUNBRFRnMERJQjRnQ2lBQXQwUUFBQUFBQUFEZ1A2Q2lJQ0dqb0NFZFFRQWhCd05BSUFjZ0NVZ0VRQ0FUS3dNQUlCNGdDaUFIdDBRQUFBQUFBQURnUDZDaUlDS2pvQ0lmSUEwckF6Q2lJQjBnRFNzRE9LS2dvQ0lnUkFBQUFBQUFBQUFBWVEwSElCQWdEU3NERUNBZklBMHJBd0NpSUIwZ0RTc0RDS0tnb0NBZ283WWlHamdDQUNBUElBMHJBeWdnSHlBTkt3TVlvaUFkSUEwckF5Q2lvS0FnSUtPMkloczRBZ0FnQ0NBYUlCc2dFQ0FQRUcwYUlCQXFBZ0FoR2lBUkJIOGdHa01BQUlBL2toQkRRUUlRT1VFQmRDRU1JQThxQWdCREFBQ0FQNUlRUTBFQ0VEbEJBWFFGSUJwREFBQUFQNUlRUXlFTUlBOHFBZ0JEQUFBQVA1SVFRd3NoRGlBTVFYOUtCRUFnRENBRlNDQU9RWDlLY1NBT0lBWkljUVJBSUFRZ0RDQUZJQTVzYWtFQ2RDSU1haTBBQUNBRUlBeEJBWEpxTFFBQWFpQUVJQXhCQW5KcUxRQUFha0VERUVnaERDQUFJQklRT1NBQ2JDQUhJQlVRT1dwQkFuUWdBV29pRGlBTUlBNG9BZ0JxTmdJQUN3c2dCMEVCYWlFSERBRUxDeUFBUVFGcUlRQU1BQUFMQUFzZ0IwRUNja0VHUmdSQUlCMUVBQUFBQUFBQVdVQ2dJUjRnQTdjaElTQUp0eUVpSUExQlFHc2hFeUFBUVFGR0lSRkJBQ0VBQTBBZ0FDQURUZzBESUI0Z0NpQUF0MFFBQUFBQUFBRGdQNkNpSUNHam9DRWRRUUFoQndOQUlBY2dDVWdFUUNBVEt3TUFJQjRnQ2lBSHQwUUFBQUFBQUFEZ1A2Q2lJQ0tqb0NJZklBMHJBekNpSUIwZ0RTc0RPS0tnb0NJZ1JBQUFBQUFBQUFBQVlRMEhJQkFnRFNzREVDQWZJQTByQXdDaUlCMGdEU3NEQ0tLZ29DQWdvN1lpR2pnQ0FDQVBJQTByQXlnZ0h5QU5Ld01Zb2lBZElBMHJBeUNpb0tBZ0lLTzJJaHM0QWdBZ0NDQWFJQnNnRUNBUEVHMGFJQkFxQWdBaEdpQVJCSDhnR2tNQUFJQS9raEJEUVFJUU9VRUJkQ0VNSUE4cUFnQkRBQUNBUDVJUVEwRUNFRGxCQVhRRklCcERBQUFBUDVJUVF5RU1JQThxQWdCREFBQUFQNUlRUXdzaERpQU1RWDlLQkVBZ0RDQUZTQ0FPUVg5S2NTQU9JQVpJY1FSQUlBUWdEQ0FGSUE1c2FrRUNkQ0lNUVFGeWFpMEFBQ0FFSUF4QkFuSnFMUUFBYWlBRUlBeEJBM0pxTFFBQWFrRURFRWdoRENBQUlCSVFPU0FDYkNBSElCVVFPV3BCQW5RZ0FXb2lEaUFNSUE0b0FnQnFOZ0lBQ3dzZ0IwRUJhaUVIREFFTEN5QUFRUUZxSVFBTUFBQUxBQXNDUUFKQUFrQUNRQUpBQWtBQ1FDQUhRUVZyRGdvQUJnRUNBd1FGQUFBQUJnc2dIVVFBQUFBQUFBQlpRS0FoSGlBRHR5RWhJQW0zSVNJZ0RVRkFheUVUSUFCQkFVWWhFVUVBSVFBRFFDQUFJQU5PRFFnZ0hpQUtJQUMzUkFBQUFBQUFBT0Evb0tJZ0lhT2dJUjFCQUNFSEEwQWdCeUFKU0FSQUlCTXJBd0FnSGlBS0lBZTNSQUFBQUFBQUFPQS9vS0lnSXFPZ0loOGdEU3NETUtJZ0hTQU5Ld000b3FDZ0lpQkVBQUFBQUFBQUFBQmhEUXdnRUNBTkt3TVFJQjhnRFNzREFLSWdIU0FOS3dNSW9xQ2dJQ0NqdGlJYU9BSUFJQThnRFNzREtDQWZJQTByQXhpaUlCMGdEU3NESUtLZ29DQWdvN1lpR3pnQ0FDQUlJQm9nR3lBUUlBOFFiUm9nRUNvQ0FDRWFJQkVFZnlBYVF3QUFnRCtTRUVOQkFoQTVRUUYwSVF3Z0R5b0NBRU1BQUlBL2toQkRRUUlRT1VFQmRBVWdHa01BQUFBL2toQkRJUXdnRHlvQ0FFTUFBQUEva2hCREN5RU9JQXhCZjBvRVFDQU1JQVZJSUE1QmYwcHhJQTRnQmtoeEJFQWdCQ0FNSUFVZ0RteHFhaTBBQUNFTUlBQWdFaEE1SUFKc0lBY2dGUkE1YWtFQ2RDQUJhaUlPSUF3Z0RpZ0NBR28yQWdBTEN5QUhRUUZxSVFjTUFRc0xJQUJCQVdvaEFBd0FBQXNBQ3lBZFJBQUFBQUFBQUZsQW9DRWVJQU8zSVNFZ0NiY2hJaUFOUVVCcklSTWdBRUVCUmlFUlFRQWhBQU5BSUFBZ0EwNE5CeUFlSUFvZ0FMZEVBQUFBQUFBQTREK2dvaUFobzZBaEhVRUFJUWNEUUNBSElBbElCRUFnRXlzREFDQWVJQW9nQjdkRUFBQUFBQUFBNEQrZ29pQWlvNkFpSHlBTkt3TXdvaUFkSUEwckF6aWlvS0FpSUVRQUFBQUFBQUFBQUdFTkN5QVFJQTByQXhBZ0h5QU5Ld01Bb2lBZElBMHJBd2lpb0tBZ0lLTzJJaG80QWdBZ0R5QU5Ld01vSUI4Z0RTc0RHS0lnSFNBTkt3TWdvcUNnSUNDanRpSWJPQUlBSUFnZ0dpQWJJQkFnRHhCdEdpQVFLZ0lBSVJvZ0VRUi9JQnBEQUFDQVA1SVFRMEVDRURsQkFYUWhEQ0FQS2dJQVF3QUFnRCtTRUVOQkFoQTVRUUYwQlNBYVF3QUFBRCtTRUVNaERDQVBLZ0lBUXdBQUFEK1NFRU1MSVE0Z0RFRi9TZ1JBSUF3Z0JVZ2dEa0YvU25FZ0RpQUdTSEVFUUNBRUlBd2dCU0FPYkdwQkFYUkJBWEpxTFFBQUlRd2dBQ0FTRURrZ0Ftd2dCeUFWRURscVFRSjBJQUZxSWc0Z0RDQU9LQUlBYWpZQ0FBc0xJQWRCQVdvaEJ3d0JDd3NnQUVFQmFpRUFEQUFBQ3dBTElCMUVBQUFBQUFBQVdVQ2dJUjRnQTdjaElTQUp0eUVpSUExQlFHc2hFeUFBUVFGR0lSRkJBQ0VBQTBBZ0FDQURUZzBHSUI0Z0NpQUF0MFFBQUFBQUFBRGdQNkNpSUNHam9DRWRRUUFoQndOQUlBY2dDVWdFUUNBVEt3TUFJQjRnQ2lBSHQwUUFBQUFBQUFEZ1A2Q2lJQ0tqb0NJZklBMHJBekNpSUIwZ0RTc0RPS0tnb0NJZ1JBQUFBQUFBQUFBQVlRMEtJQkFnRFNzREVDQWZJQTByQXdDaUlCMGdEU3NEQ0tLZ29DQWdvN1lpR2pnQ0FDQVBJQTByQXlnZ0h5QU5Ld01Zb2lBZElBMHJBeUNpb0tBZ0lLTzJJaHM0QWdBZ0NDQWFJQnNnRUNBUEVHMGFJQkFxQWdBaEdpQVJCSDhnR2tNQUFJQS9raEJEUVFJUU9VRUJkQ0VNSUE4cUFnQkRBQUNBUDVJUVEwRUNFRGxCQVhRRklCcERBQUFBUDVJUVF5RU1JQThxQWdCREFBQUFQNUlRUXdzaERpQU1RWDlLQkVBZ0RDQUZTQ0FPUVg5S2NTQU9JQVpJY1FSQUlBUWdEQ0FGSUE1c2FrRUJkR290QUFBaERDQUFJQklRT1NBQ2JDQUhJQlVRT1dwQkFuUWdBV29pRGlBTUlBNG9BZ0JxTmdJQUN3c2dCMEVCYWlFSERBRUxDeUFBUVFGcUlRQU1BQUFMQUFzZ0hVUUFBQUFBQUFCWlFLQWhIaUFEdHlFaElBbTNJU0lnRFVGQWF5RVRJQUJCQVVZaEVVRUFJUUFEUUNBQUlBTk9EUVVnSGlBS0lBQzNSQUFBQUFBQUFPQS9vS0lnSWFPZ0lSMUJBQ0VIQTBBZ0J5QUpTQVJBSUJNckF3QWdIaUFLSUFlM1JBQUFBQUFBQU9BL29LSWdJcU9nSWg4Z0RTc0RNS0lnSFNBTkt3TTRvcUNnSWlCRUFBQUFBQUFBQUFCaERRa2dFQ0FOS3dNUUlCOGdEU3NEQUtJZ0hTQU5Ld01Jb3FDZ0lDQ2p0aUlhT0FJQUlBOGdEU3NES0NBZklBMHJBeGlpSUIwZ0RTc0RJS0tnb0NBZ283WWlHemdDQUNBSUlCb2dHeUFRSUE4UWJSb2dFQ29DQUNFYUlCRUVmeUFhUXdBQWdEK1NFRU5CQWhBNVFRRjBJUXdnRHlvQ0FFTUFBSUEva2hCRFFRSVFPVUVCZEFVZ0drTUFBQUEva2hCRElRd2dEeW9DQUVNQUFBQS9raEJEQ3lFT0lBeEJmMG9FUUNBTUlBVklJQTVCZjBweElBNGdCa2h4QkVBZ0JDQU1JQVVnRG14cVFRRjBJZ3hxTFFBQUlnNUIrQUZ4UVFSeUlBNUJCWFJCNEFGeElBUWdERUVCY21vdEFBQWlERUVEZGtFY2NYSkJBbkpxSUF4QkEzUkIrQUZ4UVFSeWFrRURFRWdoRENBQUlCSVFPU0FDYkNBSElCVVFPV3BCQW5RZ0FXb2lEaUFNSUE0b0FnQnFOZ0lBQ3dzZ0IwRUJhaUVIREFFTEN5QUFRUUZxSVFBTUFBQUxBQXNnSFVRQUFBQUFBQUJaUUtBaEhpQUR0eUVoSUFtM0lTSWdEVUZBYXlFVElBQkJBVVloRVVFQUlRQURRQ0FBSUFOT0RRUWdIaUFLSUFDM1JBQUFBQUFBQU9BL29LSWdJYU9nSVIxQkFDRUhBMEFnQnlBSlNBUkFJQk1yQXdBZ0hpQUtJQWUzUkFBQUFBQUFBT0Evb0tJZ0lxT2dJaDhnRFNzRE1LSWdIU0FOS3dNNG9xQ2dJaUJFQUFBQUFBQUFBQUJoRFFnZ0VDQU5Ld01RSUI4Z0RTc0RBS0lnSFNBTkt3TUlvcUNnSUNDanRpSWFPQUlBSUE4Z0RTc0RLQ0FmSUEwckF4aWlJQjBnRFNzRElLS2dvQ0FnbzdZaUd6Z0NBQ0FJSUJvZ0d5QVFJQThRYlJvZ0VDb0NBQ0VhSUJFRWZ5QWFRd0FBZ0QrU0VFTkJBaEE1UVFGMElRd2dEeW9DQUVNQUFJQS9raEJEUVFJUU9VRUJkQVVnR2tNQUFBQS9raEJESVF3Z0R5b0NBRU1BQUFBL2toQkRDeUVPSUF4QmYwb0VRQ0FNSUFWSUlBNUJmMHB4SUE0Z0JraHhCRUFnQkNBTUlBVWdEbXhxUVFGMElneHFMUUFBSWc1QitBRnhRUVJ5SUE1QkJYUkI0QUZ4SUFRZ0RFRUJjbW90QUFBaURFRURka0VZY1hKQkJISnFJQXhCQW5SQitBRnhRUVJ5YWtFREVFZ2hEQ0FBSUJJUU9TQUNiQ0FISUJVUU9XcEJBblFnQVdvaURpQU1JQTRvQWdCcU5nSUFDd3NnQjBFQmFpRUhEQUVMQ3lBQVFRRnFJUUFNQUFBTEFBc2dIVVFBQUFBQUFBQlpRS0FoSGlBRHR5RWhJQW0zSVNJZ0RVRkFheUVUSUFCQkFVWWhFVUVBSVFBRFFDQUFJQU5PRFFNZ0hpQUtJQUMzUkFBQUFBQUFBT0Evb0tJZ0lhT2dJUjFCQUNFSEEwQWdCeUFKU0FSQUlCTXJBd0FnSGlBS0lBZTNSQUFBQUFBQUFPQS9vS0lnSXFPZ0loOGdEU3NETUtJZ0hTQU5Ld000b3FDZ0lpQkVBQUFBQUFBQUFBQmhEUWNnRUNBTkt3TVFJQjhnRFNzREFLSWdIU0FOS3dNSW9xQ2dJQ0NqdGlJYU9BSUFJQThnRFNzREtDQWZJQTByQXhpaUlCMGdEU3NESUtLZ29DQWdvN1lpR3pnQ0FDQUlJQm9nR3lBUUlBOFFiUm9nRUNvQ0FDRWFJQkVFZnlBYVF3QUFnRCtTRUVOQkFoQTVRUUYwSVF3Z0R5b0NBRU1BQUlBL2toQkRRUUlRT1VFQmRBVWdHa01BQUFBL2toQkRJUXdnRHlvQ0FFTUFBQUEva2hCREN5RU9JQXhCZjBvRVFDQU1JQVZJSUE1QmYwcHhJQTRnQmtoeEJFQWdCQ0FNSUFVZ0RteHFRUUYwSWd4cUxRQUFJZzVCOEFGeFFRaHlJQTVCQkhSQjhBRnhRUWh5YWlBRUlBeEJBWEpxTEFBQVFYQnhRUWh5UWY4QmNXcEJBeEJJSVF3Z0FDQVNFRGtnQW13Z0J5QVZFRGxxUVFKMElBRnFJZzRnRENBT0tBSUFhallDQUFzTElBZEJBV29oQnd3QkN3c2dBRUVCYWlFQURBQUFDd0FMUVFCQkEwSHlxQUVnREJBOURBTUxBQXNnRWlBVmJDRUNRUUFoQUFOQUlBQWdGRWNFUUNBQUlBdHFJQUJCQW5RZ0FXb29BZ0FnQWhCSU9nQUFJQUJCQVdvaEFBd0JDd3NGSUJSQkEyd2lHRUVFRUkwQ0lnRkZCRUJCQUVFRFFibllBaUFSRUQxQkFSQUJDd0pBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FnQnc0UEFBRUNBd1FGQmdjSUNRb0xCUVVGREFzZ0hVUUFBQUFBQUFCWlFLQWhIaUFEdHlFaElBbTNJU0lnRFVGQWF5RVVJQUJCQVVZaEUwRUFJUUFEUUNBQUlBTk9EUTBnSGlBS0lBQzNSQUFBQUFBQUFPQS9vS0lnSWFPZ0lSMUJBQ0VIQTBBZ0J5QUpTQVJBSUJRckF3QWdIaUFLSUFlM1JBQUFBQUFBQU9BL29LSWdJcU9nSWg4Z0RTc0RNS0lnSFNBTkt3TTRvcUNnSWlCRUFBQUFBQUFBQUFCaERSRWdFQ0FOS3dNUUlCOGdEU3NEQUtJZ0hTQU5Ld01Jb3FDZ0lDQ2p0aUlhT0FJQUlBOGdEU3NES0NBZklBMHJBeGlpSUIwZ0RTc0RJS0tnb0NBZ283WWlHemdDQUNBSUlCb2dHeUFRSUE4UWJSb2dFQ29DQUNFYUlCTUVmeUFhUXdBQWdEK1NFRU5CQWhBNVFRRjBJUXdnRHlvQ0FFTUFBSUEva2hCRFFRSVFPVUVCZEFVZ0drTUFBQUEva2hCRElRd2dEeW9DQUVNQUFBQS9raEJEQ3lFT0lBeEJmMG9FUUNBTUlBVklJQTVCZjBweElBNGdCa2h4QkVBZ0JDQU1JQVVnRG14cVFRTnNJZ3hCQW1wcUxRQUFJUkVnQUNBU0VEa2dBbXdnQnlBVkVEbHFRUU5zSWc1QkFuUWdBV29pRmlBUklCWW9BZ0JxTmdJQUlBNUJBV3BCQW5RZ0FXb2lFU0FFSUF4QkFXcHFMUUFBSUJFb0FnQnFOZ0lBSUE1QkFtcEJBblFnQVdvaURpQUVJQXhxTFFBQUlBNG9BZ0JxTmdJQUN3c2dCMEVCYWlFSERBRUxDeUFBUVFGcUlRQU1BQUFMQUFzZ0hVUUFBQUFBQUFCWlFLQWhIaUFEdHlFaElBbTNJU0lnRFVGQWF5RVVJQUJCQVVZaEUwRUFJUUFEUUNBQUlBTk9EUXdnSGlBS0lBQzNSQUFBQUFBQUFPQS9vS0lnSWFPZ0lSMUJBQ0VIQTBBZ0J5QUpTQVJBSUJRckF3QWdIaUFLSUFlM1JBQUFBQUFBQU9BL29LSWdJcU9nSWg4Z0RTc0RNS0lnSFNBTkt3TTRvcUNnSWlCRUFBQUFBQUFBQUFCaERSQWdFQ0FOS3dNUUlCOGdEU3NEQUtJZ0hTQU5Ld01Jb3FDZ0lDQ2p0aUlhT0FJQUlBOGdEU3NES0NBZklBMHJBeGlpSUIwZ0RTc0RJS0tnb0NBZ283WWlHemdDQUNBSUlCb2dHeUFRSUE4UWJSb2dFQ29DQUNFYUlCTUVmeUFhUXdBQWdEK1NFRU5CQWhBNVFRRjBJUXdnRHlvQ0FFTUFBSUEva2hCRFFRSVFPVUVCZEFVZ0drTUFBQUEva2hCRElRd2dEeW9DQUVNQUFBQS9raEJEQ3lFT0lBeEJmMG9FUUNBTUlBVklJQTVCZjBweElBNGdCa2h4QkVBZ0JDQU1JQVVnRG14cVFRTnNJZ3hxTFFBQUlSRWdBQ0FTRURrZ0Ftd2dCeUFWRURscVFRTnNJZzVCQW5RZ0FXb2lGaUFSSUJZb0FnQnFOZ0lBSUE1QkFXcEJBblFnQVdvaUVTQUVJQXhCQVdwcUxRQUFJQkVvQWdCcU5nSUFJQTVCQW1wQkFuUWdBV29pRGlBRUlBeEJBbXBxTFFBQUlBNG9BZ0JxTmdJQUN3c2dCMEVCYWlFSERBRUxDeUFBUVFGcUlRQU1BQUFMQUFzZ0hVUUFBQUFBQUFCWlFLQWhIaUFEdHlFaElBbTNJU0lnRFVGQWF5RVVJQUJCQVVZaEUwRUFJUUFEUUNBQUlBTk9EUXNnSGlBS0lBQzNSQUFBQUFBQUFPQS9vS0lnSWFPZ0lSMUJBQ0VIQTBBZ0J5QUpTQVJBSUJRckF3QWdIaUFLSUFlM1JBQUFBQUFBQU9BL29LSWdJcU9nSWg4Z0RTc0RNS0lnSFNBTkt3TTRvcUNnSWlCRUFBQUFBQUFBQUFCaERROGdFQ0FOS3dNUUlCOGdEU3NEQUtJZ0hTQU5Ld01Jb3FDZ0lDQ2p0aUlhT0FJQUlBOGdEU3NES0NBZklBMHJBeGlpSUIwZ0RTc0RJS0tnb0NBZ283WWlHemdDQUNBSUlCb2dHeUFRSUE4UWJSb2dFQ29DQUNFYUlCTUVmeUFhUXdBQWdEK1NFRU5CQWhBNVFRRjBJUXdnRHlvQ0FFTUFBSUEva2hCRFFRSVFPVUVCZEFVZ0drTUFBQUEva2hCRElRd2dEeW9DQUVNQUFBQS9raEJEQ3lFT0lBeEJmMG9FUUNBTUlBVklJQTVCZjBweElBNGdCa2h4QkVBZ0JDQU1JQVVnRG14cVFRSjBJZ3hCQW5KcUxRQUFJUkVnQUNBU0VEa2dBbXdnQnlBVkVEbHFRUU5zSWc1QkFuUWdBV29pRmlBUklCWW9BZ0JxTmdJQUlBNUJBV3BCQW5RZ0FXb2lFU0FFSUF4QkFYSnFMUUFBSUJFb0FnQnFOZ0lBSUE1QkFtcEJBblFnQVdvaURpQUVJQXhxTFFBQUlBNG9BZ0JxTmdJQUN3c2dCMEVCYWlFSERBRUxDeUFBUVFGcUlRQU1BQUFMQUFzZ0hVUUFBQUFBQUFCWlFLQWhIaUFEdHlFaElBbTNJU0lnRFVGQWF5RVVJQUJCQVVZaEUwRUFJUUFEUUNBQUlBTk9EUW9nSGlBS0lBQzNSQUFBQUFBQUFPQS9vS0lnSWFPZ0lSMUJBQ0VIQTBBZ0J5QUpTQVJBSUJRckF3QWdIaUFLSUFlM1JBQUFBQUFBQU9BL29LSWdJcU9nSWg4Z0RTc0RNS0lnSFNBTkt3TTRvcUNnSWlCRUFBQUFBQUFBQUFCaERRNGdFQ0FOS3dNUUlCOGdEU3NEQUtJZ0hTQU5Ld01Jb3FDZ0lDQ2p0aUlhT0FJQUlBOGdEU3NES0NBZklBMHJBeGlpSUIwZ0RTc0RJS0tnb0NBZ283WWlHemdDQUNBSUlCb2dHeUFRSUE4UWJSb2dFQ29DQUNFYUlCTUVmeUFhUXdBQWdEK1NFRU5CQWhBNVFRRjBJUXdnRHlvQ0FFTUFBSUEva2hCRFFRSVFPVUVCZEFVZ0drTUFBQUEva2hCRElRd2dEeW9DQUVNQUFBQS9raEJEQ3lFT0lBeEJmMG9FUUNBTUlBVklJQTVCZjBweElBNGdCa2h4QkVBZ0JDQU1JQVVnRG14cVFRSjBJZ3hxTFFBQUlSRWdBQ0FTRURrZ0Ftd2dCeUFWRURscVFRTnNJZzVCQW5RZ0FXb2lGaUFSSUJZb0FnQnFOZ0lBSUE1QkFXcEJBblFnQVdvaUVTQUVJQXhCQVhKcUxRQUFJQkVvQWdCcU5nSUFJQTVCQW1wQkFuUWdBV29pRGlBRUlBeEJBbkpxTFFBQUlBNG9BZ0JxTmdJQUN3c2dCMEVCYWlFSERBRUxDeUFBUVFGcUlRQU1BQUFMQUFzZ0hVUUFBQUFBQUFCWlFLQWhIaUFEdHlFaElBbTNJU0lnRFVGQWF5RVVJQUJCQVVZaEUwRUFJUUFEUUNBQUlBTk9EUWtnSGlBS0lBQzNSQUFBQUFBQUFPQS9vS0lnSWFPZ0lSMUJBQ0VIQTBBZ0J5QUpTQVJBSUJRckF3QWdIaUFLSUFlM1JBQUFBQUFBQU9BL29LSWdJcU9nSWg4Z0RTc0RNS0lnSFNBTkt3TTRvcUNnSWlCRUFBQUFBQUFBQUFCaERRMGdFQ0FOS3dNUUlCOGdEU3NEQUtJZ0hTQU5Ld01Jb3FDZ0lDQ2p0aUlhT0FJQUlBOGdEU3NES0NBZklBMHJBeGlpSUIwZ0RTc0RJS0tnb0NBZ283WWlHemdDQUNBSUlCb2dHeUFRSUE4UWJSb2dFQ29DQUNFYUlCTUVmeUFhUXdBQWdEK1NFRU5CQWhBNVFRRjBJUXdnRHlvQ0FFTUFBSUEva2hCRFFRSVFPVUVCZEFVZ0drTUFBQUEva2hCRElRd2dEeW9DQUVNQUFBQS9raEJEQ3lFT0lBeEJmMG9FUUNBTUlBVklJQTVCZjBweElBNGdCa2h4QkVBZ0JDQU1JQVVnRG14cVFRSjBJZ3hCQVhKcUxRQUFJUkVnQUNBU0VEa2dBbXdnQnlBVkVEbHFRUU5zSWc1QkFuUWdBV29pRmlBUklCWW9BZ0JxTmdJQUlBNUJBV3BCQW5RZ0FXb2lFU0FFSUF4QkFuSnFMUUFBSUJFb0FnQnFOZ0lBSUE1QkFtcEJBblFnQVdvaURpQUVJQXhCQTNKcUxRQUFJQTRvQWdCcU5nSUFDd3NnQjBFQmFpRUhEQUVMQ3lBQVFRRnFJUUFNQUFBTEFBc2dIVVFBQUFBQUFBQlpRS0FoSGlBRHR5RWhJQW0zSVNJZ0RVRkFheUVVSUFCQkFVWWhFMEVBSVFBRFFDQUFJQU5PRFFnZ0hpQUtJQUMzUkFBQUFBQUFBT0Evb0tJZ0lhT2dJUjFCQUNFSEEwQWdCeUFKU0FSQUlCUXJBd0FnSGlBS0lBZTNSQUFBQUFBQUFPQS9vS0lnSXFPZ0loOGdEU3NETUtJZ0hTQU5Ld000b3FDZ0lpQkVBQUFBQUFBQUFBQmhEUXdnRUNBTkt3TVFJQjhnRFNzREFLSWdIU0FOS3dNSW9xQ2dJQ0NqdGlJYU9BSUFJQThnRFNzREtDQWZJQTByQXhpaUlCMGdEU3NESUtLZ29DQWdvN1lpR3pnQ0FDQUlJQm9nR3lBUUlBOFFiUm9nRUNvQ0FDRWFJQk1FZnlBYVF3QUFnRCtTRUVOQkFoQTVRUUYwSVF3Z0R5b0NBRU1BQUlBL2toQkRRUUlRT1VFQmRBVWdHa01BQUFBL2toQkRJUXdnRHlvQ0FFTUFBQUEva2hCREN5RU9JQXhCZjBvRVFDQU1JQVZJSUE1QmYwcHhJQTRnQmtoeEJFQWdCQ0FNSUFVZ0RteHFhaTBBQUNFTUlBQWdFaEE1SUFKc0lBY2dGUkE1YWtFRGJDSU9RUUowSUFGcUloRWdEQ0FSS0FJQWFqWUNBQ0FPUVFGcVFRSjBJQUZxSWhFZ0RDQVJLQUlBYWpZQ0FDQU9RUUpxUVFKMElBRnFJZzRnRENBT0tBSUFhallDQUFzTElBZEJBV29oQnd3QkN3c2dBRUVCYWlFQURBQUFDd0FMSUIxRUFBQUFBQUFBV1VDZ0lSNGdBN2NoSVNBSnR5RWlJQTFCUUdzaEZDQUFRUUZHSVJOQkFDRUFBMEFnQUNBRFRnMEhJQjRnQ2lBQXQwUUFBQUFBQUFEZ1A2Q2lJQ0dqb0NFZFFRQWhCd05BSUFjZ0NVZ0VRQ0FVS3dNQUlCNGdDaUFIdDBRQUFBQUFBQURnUDZDaUlDS2pvQ0lmSUEwckF6Q2lJQjBnRFNzRE9LS2dvQ0lnUkFBQUFBQUFBQUFBWVEwTElCQWdEU3NERUNBZklBMHJBd0NpSUIwZ0RTc0RDS0tnb0NBZ283WWlHamdDQUNBUElBMHJBeWdnSHlBTkt3TVlvaUFkSUEwckF5Q2lvS0FnSUtPMkloczRBZ0FnQ0NBYUlCc2dFQ0FQRUcwYUlCQXFBZ0FoR2lBVEJIOGdHa01BQUlBL2toQkRRUUlRT1VFQmRDRU1JQThxQWdCREFBQ0FQNUlRUTBFQ0VEbEJBWFFGSUJwREFBQUFQNUlRUXlFTUlBOHFBZ0JEQUFBQVA1SVFRd3NoRGlBTVFYOUtCRUFnRENBRlNDQU9RWDlLY1NBT0lBWkljUVJBSUFRZ0RDQUZJQTVzYWtFQ2RDSU1RUU55YWkwQUFDRVJJQUFnRWhBNUlBSnNJQWNnRlJBNWFrRURiQ0lPUVFKMElBRnFJaFlnRVNBV0tBSUFhallDQUNBT1FRRnFRUUowSUFGcUloRWdCQ0FNUVFKeWFpMEFBQ0FSS0FJQWFqWUNBQ0FPUVFKcVFRSjBJQUZxSWc0Z0JDQU1RUUZ5YWkwQUFDQU9LQUlBYWpZQ0FBc0xJQWRCQVdvaEJ3d0JDd3NnQUVFQmFpRUFEQUFBQ3dBTElCMUVBQUFBQUFBQVdVQ2dJUjRnQTdjaElTQUp0eUVpSUExQlFHc2hFU0FBUVFGR0lSWkJBQ0VBQTBBZ0FDQURUZzBHSUI0Z0NpQUF0MFFBQUFBQUFBRGdQNkNpSUNHam9DRWRRUUFoQndOQUlBY2dDVWdFUUNBUkt3TUFJQjRnQ2lBSHQwUUFBQUFBQUFEZ1A2Q2lJQ0tqb0NJZklBMHJBekNpSUIwZ0RTc0RPS0tnb0NJZ1JBQUFBQUFBQUFBQVlRMEtJQkFnRFNzREVDQWZJQTByQXdDaUlCMGdEU3NEQ0tLZ29DQWdvN1lpR2pnQ0FDQVBJQTByQXlnZ0h5QU5Ld01Zb2lBZElBMHJBeUNpb0tBZ0lLTzJJaHM0QWdBZ0NDQWFJQnNnRUNBUEVHMGFJQkFxQWdBaEdpQVdCSDhnR2tNQUFJQS9raEJEUVFJUU9VRUJkQ0VNSUE4cUFnQkRBQUNBUDVJUVEwRUNFRGxCQVhRRklCcERBQUFBUDVJUVF5RU1JQThxQWdCREFBQUFQNUlRUXdzaERpQU1RWDlLQkVBZ0RDQUZTQ0FPUVg5S2NTQU9JQVpJY1FSQUlBUWdCU0FPYkNJT0lBeEIvdjhEY1dwQkFYUWlGR290QUFCQmdIOXFzaUVhSUFRZ0ZFRUNhbW90QUFCQmdIOXFzaUViSUJwRFRob0JSSlFnQkNBTUlBNXFRUUYwUVFGeWFpMEFBRUZ3YXJKRGZ3cVZRNVFpSEpJUVEwRUlkU0VNSUJ3Z0drUCtsTWhDbEpNZ0cwTzRIbEJEbEpNUVEwRUlkU0VPSUJ3Z0cwT2dTc3hEbEpJUVEwRUlkU0VVSUFBZ0VoQTVJQUpzSUFjZ0ZSQTVha0VEYkNJVFFRSjBJQUZxSWhjZ0Z5Z0NBQ0FNUVFBZ0RFRUFTaHNpREVIL0FTQU1RZjhCU0J0cU5nSUFJQk5CQVdwQkFuUWdBV29pRENBTUtBSUFJQTVCQUNBT1FRQktHeUlPUWY4QklBNUIvd0ZJRzJvMkFnQWdFMEVDYWtFQ2RDQUJhaUlNSUF3b0FnQWdGRUVBSUJSQkFFb2JJZ3hCL3dFZ0RFSC9BVWdiYWpZQ0FBc0xJQWRCQVdvaEJ3d0JDd3NnQUVFQmFpRUFEQUFBQ3dBTElCMUVBQUFBQUFBQVdVQ2dJUjRnQTdjaElTQUp0eUVpSUExQlFHc2hFU0FBUVFGR0lSWkJBQ0VBQTBBZ0FDQURUZzBGSUI0Z0NpQUF0MFFBQUFBQUFBRGdQNkNpSUNHam9DRWRRUUFoQndOQUlBY2dDVWdFUUNBUkt3TUFJQjRnQ2lBSHQwUUFBQUFBQUFEZ1A2Q2lJQ0tqb0NJZklBMHJBekNpSUIwZ0RTc0RPS0tnb0NJZ1JBQUFBQUFBQUFBQVlRMEpJQkFnRFNzREVDQWZJQTByQXdDaUlCMGdEU3NEQ0tLZ29DQWdvN1lpR2pnQ0FDQVBJQTByQXlnZ0h5QU5Ld01Zb2lBZElBMHJBeUNpb0tBZ0lLTzJJaHM0QWdBZ0NDQWFJQnNnRUNBUEVHMGFJQkFxQWdBaEdpQVdCSDhnR2tNQUFJQS9raEJEUVFJUU9VRUJkQ0VNSUE4cUFnQkRBQUNBUDVJUVEwRUNFRGxCQVhRRklCcERBQUFBUDVJUVF5RU1JQThxQWdCREFBQUFQNUlRUXdzaERpQU1RWDlLQkVBZ0RDQUZTQ0FPUVg5S2NTQU9JQVpJY1FSQUlBUWdCU0FPYkNJT0lBeEIvdjhEY1dwQkFYUWlGRUVCY21vdEFBQkJnSDlxc2lFYUlBUWdGRUVEYW1vdEFBQkJnSDlxc2lFYklBUWdEQ0FPYWtFQmRHb3RBQUJCY0dxeVEzOEtsVU9VSWh3Z0drTk9HZ0ZFbEpJUVEwRUlkU0VNSUJ3Z0drUCtsTWhDbEpNZ0cwTzRIbEJEbEpNUVEwRUlkU0VPSUJ3Z0cwT2dTc3hEbEpJUVEwRUlkU0VVSUFBZ0VoQTVJQUpzSUFjZ0ZSQTVha0VEYkNJVFFRSjBJQUZxSWhjZ0Z5Z0NBQ0FNUVFBZ0RFRUFTaHNpREVIL0FTQU1RZjhCU0J0cU5nSUFJQk5CQVdwQkFuUWdBV29pRENBTUtBSUFJQTVCQUNBT1FRQktHeUlPUWY4QklBNUIvd0ZJRzJvMkFnQWdFMEVDYWtFQ2RDQUJhaUlNSUF3b0FnQWdGRUVBSUJSQkFFb2JJZ3hCL3dFZ0RFSC9BVWdiYWpZQ0FBc0xJQWRCQVdvaEJ3d0JDd3NnQUVFQmFpRUFEQUFBQ3dBTElCMUVBQUFBQUFBQVdVQ2dJUjRnQTdjaElTQUp0eUVpSUExQlFHc2hGQ0FBUVFGR0lSTkJBQ0VBQTBBZ0FDQURUZzBFSUI0Z0NpQUF0MFFBQUFBQUFBRGdQNkNpSUNHam9DRWRRUUFoQndOQUlBY2dDVWdFUUNBVUt3TUFJQjRnQ2lBSHQwUUFBQUFBQUFEZ1A2Q2lJQ0tqb0NJZklBMHJBekNpSUIwZ0RTc0RPS0tnb0NJZ1JBQUFBQUFBQUFBQVlRMElJQkFnRFNzREVDQWZJQTByQXdDaUlCMGdEU3NEQ0tLZ29DQWdvN1lpR2pnQ0FDQVBJQTByQXlnZ0h5QU5Ld01Zb2lBZElBMHJBeUNpb0tBZ0lLTzJJaHM0QWdBZ0NDQWFJQnNnRUNBUEVHMGFJQkFxQWdBaEdpQVRCSDhnR2tNQUFJQS9raEJEUVFJUU9VRUJkQ0VNSUE4cUFnQkRBQUNBUDVJUVEwRUNFRGxCQVhRRklCcERBQUFBUDVJUVF5RU1JQThxQWdCREFBQUFQNUlRUXdzaERpQU1RWDlLQkVBZ0RDQUZTQ0FPUVg5S2NTQU9JQVpJY1FSQUlBUWdEQ0FGSUE1c2FrRUJkQ0lSUVFGeWFpd0FBQ0VNSUFBZ0VoQTVJQUpzSUFjZ0ZSQTVha0VEYkNJT1FRSjBJQUZxSWhZZ0ZpZ0NBQ0FNUVFOMFFmOEJjVUVFY21vMkFnQWdEa0VCYWtFQ2RDQUJhaUlXSUJZb0FnQWdCQ0FSYWl3QUFDSVJRUVYwUWY4QmNTQU1RZUFCY1VFRGRuSkJBbkpxTmdJQUlBNUJBbXBCQW5RZ0FXb2lEQ0FNS0FJQUlCRkJlSEZCQkhKQi93RnhhallDQUFzTElBZEJBV29oQnd3QkN3c2dBRUVCYWlFQURBQUFDd0FMSUIxRUFBQUFBQUFBV1VDZ0lSNGdBN2NoSVNBSnR5RWlJQTFCUUdzaEZDQUFRUUZHSVJOQkFDRUFBMEFnQUNBRFRnMERJQjRnQ2lBQXQwUUFBQUFBQUFEZ1A2Q2lJQ0dqb0NFZFFRQWhCd05BSUFjZ0NVZ0VRQ0FVS3dNQUlCNGdDaUFIdDBRQUFBQUFBQURnUDZDaUlDS2pvQ0lmSUEwckF6Q2lJQjBnRFNzRE9LS2dvQ0lnUkFBQUFBQUFBQUFBWVEwSElCQWdEU3NERUNBZklBMHJBd0NpSUIwZ0RTc0RDS0tnb0NBZ283WWlHamdDQUNBUElBMHJBeWdnSHlBTkt3TVlvaUFkSUEwckF5Q2lvS0FnSUtPMkloczRBZ0FnQ0NBYUlCc2dFQ0FQRUcwYUlCQXFBZ0FoR2lBVEJIOGdHa01BQUlBL2toQkRRUUlRT1VFQmRDRU1JQThxQWdCREFBQ0FQNUlRUTBFQ0VEbEJBWFFGSUJwREFBQUFQNUlRUXlFTUlBOHFBZ0JEQUFBQVA1SVFRd3NoRGlBTVFYOUtCRUFnRENBRlNDQU9RWDlLY1NBT0lBWkljUVJBSUFRZ0RDQUZJQTVzYWtFQmRDSVJRUUZ5YWl3QUFDRU1JQUFnRWhBNUlBSnNJQWNnRlJBNWFrRURiQ0lPUVFKMElBRnFJaFlnRmlnQ0FDQU1RUUowUWY4QmNVRUVjbW8yQWdBZ0RrRUJha0VDZENBQmFpSVdJQllvQWdBZ0JDQVJhaXdBQUNJUlFRVjBRZjhCY1NBTVFjQUJjVUVEZG5KQkJISnFOZ0lBSUE1QkFtcEJBblFnQVdvaURDQU1LQUlBSUJGQmVIRkJCSEpCL3dGeGFqWUNBQXNMSUFkQkFXb2hCd3dCQ3dzZ0FFRUJhaUVBREFBQUN3QUxJQjFFQUFBQUFBQUFXVUNnSVI0Z0E3Y2hJU0FKdHlFaUlBMUJRR3NoRkNBQVFRRkdJUk5CQUNFQUEwQWdBQ0FEVGcwQ0lCNGdDaUFBdDBRQUFBQUFBQURnUDZDaUlDR2pvQ0VkUVFBaEJ3TkFJQWNnQ1VnRVFDQVVLd01BSUI0Z0NpQUh0MFFBQUFBQUFBRGdQNkNpSUNLam9DSWZJQTByQXpDaUlCMGdEU3NET0tLZ29DSWdSQUFBQUFBQUFBQUFZUTBHSUJBZ0RTc0RFQ0FmSUEwckF3Q2lJQjBnRFNzRENLS2dvQ0FnbzdZaUdqZ0NBQ0FQSUEwckF5Z2dIeUFOS3dNWW9pQWRJQTByQXlDaW9LQWdJS08ySWhzNEFnQWdDQ0FhSUJzZ0VDQVBFRzBhSUJBcUFnQWhHaUFUQkg4Z0drTUFBSUEva2hCRFFRSVFPVUVCZENFTUlBOHFBZ0JEQUFDQVA1SVFRMEVDRURsQkFYUUZJQnBEQUFBQVA1SVFReUVNSUE4cUFnQkRBQUFBUDVJUVF3c2hEaUFNUVg5S0JFQWdEQ0FGU0NBT1FYOUtjU0FPSUFaSWNRUkFJQVFnRENBRklBNXNha0VCZENJT1FRRnlhaXdBQUVGd2NVRUlja0gvQVhFaEVTQUFJQklRT1NBQ2JDQUhJQlVRT1dwQkEyd2lERUVDZENBQmFpSVdJQkVnRmlnQ0FHbzJBZ0FnREVFQmFrRUNkQ0FCYWlJUklCRW9BZ0FnQkNBT2Fpd0FBQ0lPUVFSMFFmOEJjVUVJY21vMkFnQWdERUVDYWtFQ2RDQUJhaUlNSUF3b0FnQWdEa0Z3Y1VFSWNrSC9BWEZxTmdJQUN3c2dCMEVCYWlFSERBRUxDeUFBUVFGcUlRQU1BQUFMQUF0QkFFRURRZktvQVNBVEVEME1BZ3NnRWlBVmJDRUNRUUFoQUFOQUlBQWdHRWNFUUNBQUlBdHFJQUJCQW5RZ0FXb29BZ0FnQWhCSU9nQUFJQUJCQVdvaEFBd0JDd3NMSUFFUU9FRUFEQUVMSUFFUU9FRi9DeUVaSUEwa0JpQVpDNmtCQUNBQUlBRXFBZ0NNT0FJQUlBQWdBU29DQkl3NEFnUWdBRU1BQUlDL09BSUlJQUJCREdvUXdnTWdBQ0FDS2dJQUlBRXFBZ0NVT0FJWUlBQWdBaW9DQUNBQktnSUVsRGdDSENBQUlBSW9BZ0EyQWlBZ0FFRWthaERDQXlBQUlBRXFBZ0NNT0FJd0lBQWdBU29DQkl3NEFqUWdBRU1BQUlDL09BSTRJQUFnQWlvQ0JDQUJLZ0lBbERnQ1BDQUFRVUJySUFJcUFnUWdBU29DQkpRNEFnQWdBQ0FDS0FJRU5nSkVDeVFBSUFBZ0FTQUNFSVVCUXdBQUFBQmVJQU1nQkNBRkVJVUJRd0FBQUFCZWMwRUJjd3NNQUNBQUlBRWdBQ0FCWFJzTElBQWdBQ29DQUNBQktnSUVsQ0FBS2dJRUlBRXFBZ0NVazR0REFBQUFQNVFMVEFFQ2Z5TUdJUUlqQmtFZ2FpUUdJQUFvQWdnZ0FDZ0NBQ0lEYTBFRGRTQUJTUVJBSUFJZ0FTQUFLQUlFSUFOclFRTjFJQUJCQ0dvUWlBSWdBQ0FDRU0wQ0lBSVF6QUlMSUFJa0Jnc0hBQ0FBUVJCcUN3a0FJQUFnQVJEYkF3c01BQ0FBSUFGQkFYRTZBR1FMS2dBZ0FFRUFOZ0lBSUFCQkFEWUNCQ0FBUVFBMkFnZ2dBUVJBSUFBZ0FSQ2RDQ0FBSUFFUTlnTUxDd3dBSUFBZ0FTQUFJQUZJR3dzVkFDQUFRZnlGQVRZQ0FDQUFRUVJxSUFFUTNnSUxvd0lDQkg4QmZTTUdJUU1qQmtFUWFpUUdJQUpEQUFBQUFHQkZCRUFnQTBIQXlBTkJuWnNDRURkQnFKa0NFRGRCNzZJQ0VEZEI2QUVRUGtIMm9nSVFOMEcvbXdJUU55SUZJQVVvQWdCQmRHb29BZ0JxRURzZ0EwR0F6Z01RT2lJR0tBSUFLQUljSVFRZ0JrRUtJQVJCUDNGQmlnRnFFUUlBSVFRZ0F4QThJQVVnQkJCQUlBVVFQeEFBQ3lBQUtBSVVzaUFDWGdSQUlBQXFBaGdnQWhEbEJFRUJJQUYwc3BRaEJ5QURKQVlnQnc4RklBTkJ3TWdEUWRhYkFoQTNRYWlaQWhBM1FlK2lBaEEzUWVrQkVENUI5cUlDRURkQmlad0NFRGNpQkNBRUtBSUFRWFJxS0FJQWFoQTdJQU5CZ000REVEb2lBU2dDQUNnQ0hDRUFJQUZCQ2lBQVFUOXhRWW9CYWhFQ0FDRUFJQU1RUENBRUlBQVFRQ0FFRUQ4UUFBdERBQUFBQUF0ekFRRi9JQUJCQURZQ0RDQUFJQU0yQWhBZ0FRUkFJQUZCLy8vLy93RkxCRUJCQ0JBRklnTVFpQUVnQTBHMGl3RTJBZ0FnQTBINDl3QkJGaEFFQlNBQlFRTjBFRkVoQkFzTElBQWdCRFlDQUNBQUlBSkJBM1FnQkdvaUFqWUNDQ0FBSUFJMkFnUWdBQ0FCUVFOMElBUnFOZ0lNQzB3QkFYOGdBQ2dDQUNFQ0lBQWdBU2dDQURZQ0FDQUJJQUkyQWdBZ0FDZ0NCQ0VDSUFBZ0FTZ0NCRFlDQkNBQklBSTJBZ1FnQUNnQ0NDRUNJQUFnQVNnQ0NEWUNDQ0FCSUFJMkFnZ0xIQUFnQUVFQVJ5QUJRUVZKY1FSL0lBQWdBVFlDR0VFQUJVRi9Dd3NJQUVFT0VBSkJBQXNJQUVFSUVBSkJBQXRYQVFGL0lBQUVRQ0FBSUFGc0lRSWdBQ0FCY2tILy93TkxCRUFnQWtGL0lBSWdBQkJJSUFGR0d5RUNDd3NnQWhCRUlnQkZCRUFnQUE4TElBQkJmR29vQWdCQkEzRkZCRUFnQUE4TElBQkJBQ0FDRUVVYUlBQUx2QUVCQlg4akJpRURJd1pCRUdva0JpQURJQUUyQWdBZ0FDd0FDeUlCUVFCSUlnVUVmeUFBS0FJRUlRSWdBQ2dDQ0VILy8vLy9CM0ZCZjJvRklBRkIvd0Z4SVFKQkFRc2hBU0FEUVFScUlRUUNRQUpBSUFFZ0FrWUVRQ0FBSUFGQkFTQUJJQUVRa1FRZ0FDd0FDMEVBU0EwQkJTQUZEUUVMSUFBZ0FrRUJham9BQ3d3QkN5QUFLQUlBSVFZZ0FDQUNRUUZxTmdJRUlBWWhBQXNnQWtFQ2RDQUFhaUlBSUFNUWJpQUVRUUEyQWdBZ0FFRUVhaUFFRUc0Z0F5UUdDeElBSUFBUU9DQUJFRGdnQWhBNElBTVFPQXNJQUVILy8vLy9Cd3NGQUVIL0FBdUpCZ0VJZnlNR0lRa2pCa0VRYWlRR0lBWkJvTTRERURvaENpQUdRYWpPQXhBNklnc29BZ0FvQWhRaEJpQUpJQXNnQmtFL2NVR3lCV29SQXdBZ0NTZ0NCQ0FKTEFBTElnWkIvd0Z4SUFaQkFFZ2JCRUFnQlNBRE5nSUFJQUlDZndKQUFrQWdBQ3dBQUNJR1FTdHJEZ01BQVFBQkN5QUtLQUlBS0FJc0lRY2dDaUFHSUFkQlAzRkJpZ0ZxRVFJQUlRWWdCU0FGS0FJQUlnZEJCR28yQWdBZ0J5QUdOZ0lBSUFCQkFXb01BUXNnQUFzaUJtdEJBVW9FUUNBR0xBQUFRVEJHQkVBZ0Jpd0FBVUhZQUdzaUIwRUFJQWRCSUVjYlJRUkFJQW9vQWdBb0Fpd2hCeUFLUVRBZ0IwRS9jVUdLQVdvUkFnQWhCeUFGSUFVb0FnQWlDRUVFYWpZQ0FDQUlJQWMyQWdBZ0NpZ0NBQ2dDTENFSElBb2dCaXdBQVNBSFFUOXhRWW9CYWhFQ0FDRUhJQVVnQlNnQ0FDSUlRUVJxTmdJQUlBZ2dCellDQUNBR1FRSnFJUVlMQ3dzZ0FpQUdSd1JBQWtBZ0FpRUhJQVloQ0FOQUlBZ2dCMEYvYWlJSFR3MEJJQWdzQUFBaERTQUlJQWNzQUFBNkFBQWdCeUFOT2dBQUlBaEJBV29oQ0F3QUFBc0FDd3NnQ3lnQ0FDZ0NFQ0VISUFzZ0IwSC9BSEZCQ0dvUkFBQWhEU0FHSVFoQkFDRUhRUUFoQ3dOQUlBZ2dBa2tFUUNBSElBa29BZ0FnQ1NBSkxBQUxRUUJJRzJvc0FBQWlERUVBUnlBTElBeEdjUVJBSUFVZ0JTZ0NBQ0lMUVFScU5nSUFJQXNnRFRZQ0FDQUhJQWNnQ1NnQ0JDQUpMQUFMSWdkQi93RnhJQWRCQUVnYlFYOXFTV29oQjBFQUlRc0xJQW9vQWdBb0Fpd2hEQ0FLSUFnc0FBQWdERUUvY1VHS0FXb1JBZ0FoRENBRklBVW9BZ0FpRGtFRWFqWUNBQ0FPSUF3MkFnQWdDRUVCYWlFSUlBdEJBV29oQ3d3QkN3c2dCaUFBYTBFQ2RDQURhaUlISUFVb0FnQWlCa1lFZnlBSEJRTkFJQWNnQmtGOGFpSUdTUVJBSUFjb0FnQWhDQ0FISUFZb0FnQTJBZ0FnQmlBSU5nSUFJQWRCQkdvaEJ3d0JDd3NnQlNnQ0FBc2hCUVVnQ2lnQ0FDZ0NNQ0VHSUFvZ0FDQUNJQU1nQmtFUGNVR0tBbW9SQ1FBYUlBVWdBaUFBYTBFQ2RDQURhaUlGTmdJQUN5QUVJQVVnQVNBQWEwRUNkQ0FEYWlBQklBSkdHellDQUNBSkVFY2dDU1FHQzRBR0FRaC9Jd1loQ1NNR1FSQnFKQVlnQmtHQXpnTVFPaUVLSUFaQmtNNERFRG9pQ3lnQ0FDZ0NGQ0VHSUFrZ0N5QUdRVDl4UWJJRmFoRURBQ0FKS0FJRUlBa3NBQXNpQmtIL0FYRWdCa0VBU0JzRVFDQUZJQU0yQWdBZ0FnSi9Ba0FDUUNBQUxBQUFJZ1pCSzJzT0F3QUJBQUVMSUFvb0FnQW9BaHdoQnlBS0lBWWdCMEUvY1VHS0FXb1JBZ0FoQmlBRklBVW9BZ0FpQjBFQmFqWUNBQ0FISUFZNkFBQWdBRUVCYWd3QkN5QUFDeUlHYTBFQlNnUkFJQVlzQUFCQk1FWUVRQ0FHTEFBQlFkZ0FheUlIUVFBZ0IwRWdSeHRGQkVBZ0NpZ0NBQ2dDSENFSElBcEJNQ0FIUVQ5eFFZb0JhaEVDQUNFSElBVWdCU2dDQUNJSVFRRnFOZ0lBSUFnZ0J6b0FBQ0FLS0FJQUtBSWNJUWNnQ2lBR0xBQUJJQWRCUDNGQmlnRnFFUUlBSVFjZ0JTQUZLQUlBSWdoQkFXbzJBZ0FnQ0NBSE9nQUFJQVpCQW1vaEJnc0xDeUFDSUFaSEJFQUNRQ0FDSVFjZ0JpRUlBMEFnQ0NBSFFYOXFJZ2RQRFFFZ0NDd0FBQ0VOSUFnZ0J5d0FBRG9BQUNBSElBMDZBQUFnQ0VFQmFpRUlEQUFBQ3dBTEN5QUxLQUlBS0FJUUlRY2dDeUFIUWY4QWNVRUlhaEVBQUNFTklBWWhDRUVBSVFkQkFDRUxBMEFnQ0NBQ1NRUkFJQWNnQ1NnQ0FDQUpJQWtzQUF0QkFFZ2JhaXdBQUNJTVFRQkhJQXNnREVaeEJFQWdCU0FGS0FJQUlndEJBV28yQWdBZ0N5QU5PZ0FBSUFjZ0J5QUpLQUlFSUFrc0FBc2lCMEgvQVhFZ0IwRUFTQnRCZjJwSmFpRUhRUUFoQ3dzZ0NpZ0NBQ2dDSENFTUlBb2dDQ3dBQUNBTVFUOXhRWW9CYWhFQ0FDRU1JQVVnQlNnQ0FDSU9RUUZxTmdJQUlBNGdERG9BQUNBSVFRRnFJUWdnQzBFQmFpRUxEQUVMQ3lBRElBWWdBR3RxSWdjZ0JTZ0NBQ0lHUmdSL0lBY0ZBMEFnQnlBR1FYOXFJZ1pKQkVBZ0J5d0FBQ0VJSUFjZ0Jpd0FBRG9BQUNBR0lBZzZBQUFnQjBFQmFpRUhEQUVMQ3lBRktBSUFDeUVGQlNBS0tBSUFLQUlnSVFZZ0NpQUFJQUlnQXlBR1FROXhRWW9DYWhFSkFCb2dCU0FESUFJZ0FHdHFJZ1UyQWdBTElBUWdCU0FESUFFZ0FHdHFJQUVnQWtZYk5nSUFJQWtRUnlBSkpBWUw3UUVCQlg4Z0FrR0FFSEVFUUNBQVFTczZBQUFnQUVFQmFpRUFDeUFDUVlBSWNRUkFJQUJCSXpvQUFDQUFRUUZxSVFBTElBSkJoQUp4SWdOQmhBSkdJZ1FFZjBFQUJTQUFRUzQ2QUFBZ0FFRXFPZ0FCSUFCQkFtb2hBRUVCQ3lFSElBSkJnSUFCY1NFQ0EwQWdBU3dBQUNJR0JFQWdBQ0FHT2dBQUlBRkJBV29oQVNBQVFRRnFJUUFNQVFzTElBQUNmd0pBQWtBZ0EwRUVheUlCQkVBZ0FVSDhBVVlFUUF3Q0JRd0RDd0FMSUFKQkNYWkIvd0Z4UWVZQWN3d0NDeUFDUVFsMlFmOEJjVUhsQUhNTUFRc2dBa0VKZGtIL0FYRWhBU0FCUWVFQWN5QUJRZWNBY3lBRUd3czZBQUFnQnd1ZUNBRU5meU1HSVJBakJrSHdBR29rQmlBUUlRa2dBeUFDYTBFTUVEa2lCMEhrQUVzRVFDQUhFRVFpQ1FSQUlBa2lEU0VTQlJBQUN3VWdDU0VOQ3lBQ0lRb2dEU0VKQTBBZ0F5QUtSd1JBSUFvc0FBc2lDRUVBU0FSL0lBb29BZ1FGSUFoQi93RnhDd1JBSUFsQkFUb0FBQVVnQ1VFQ09nQUFJQXhCQVdvaERDQUhRWDlxSVFjTElBcEJER29oQ2lBSlFRRnFJUWtNQVFzTElBd2hDU0FISVF3RFFBSkFJQUFvQWdBaUNBUi9JQWdvQWd3aUJ5QUlLQUlRUmdSL0lBZ2dDQ2dDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQWNvQWdBTFFYOFFRUVIvSUFCQkFEWUNBRUVCQlNBQUtBSUFSUXNGUVFFTElRb2dBU2dDQUNJSEJIOGdCeWdDRENJSUlBY29BaEJHQkg4Z0J5QUhLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdDQ2dDQUF0QmZ4QkJCSDhnQVVFQU5nSUFRUUFoQjBFQkJVRUFDd1ZCQUNFSFFRRUxJUk1nQUNnQ0FDRUxJQk1nQ25NZ0RFRUFSM0ZGRFFBZ0N5Z0NEQ0lISUFzb0FoQkdCSDhnQ3lBTEtBSUFLQUlrUWY4QWNVRUlhaEVBQUFVZ0J5Z0NBQXNoRHlBR1JRUkFJQVFnRHlBRUtBSUFLQUljUVQ5eFFZb0JhaEVDQUNFUEN5QVJRUUZxSVFzZ0FpRUlRUUFoQ2lBTklRNGdDU0VIQTBBZ0F5QUlSd1JBSUE0c0FBQkJBVVlFUUFKQUlBZ3NBQXRCQUVnRWZ5QUlLQUlBQlNBSUN5QVJRUUowYWlnQ0FDRUpJQVlFZnlBSkJTQUVJQWtnQkNnQ0FDZ0NIRUUvY1VHS0FXb1JBZ0FMSUE5SEJFQWdEa0VBT2dBQUlBeEJmMm9oREF3QkN5QUlMQUFMSWdsQkFFZ0VmeUFJS0FJRUJTQUpRZjhCY1FzZ0MwWUVRQ0FPUVFJNkFBQWdERUYvYWlFTUlBZEJBV29oQnd0QkFTRUtDd3NnQ0VFTWFpRUlJQTVCQVdvaERnd0JDd3NnQ2dSQUFrQWdBQ2dDQUNJSUtBSU1JZ2tnQ0NnQ0VFWUVRQ0FJSUFnb0FnQW9BaWhCL3dCeFFRaHFFUUFBR2dVZ0NDQUpRUVJxTmdJTUlBa29BZ0FhQ3lBSElBeHFRUUZMQkVBZ0FpRUtJQTBoQ1FOQUlBTWdDa1lOQWlBSkxBQUFRUUpHQkVBZ0Npd0FDeUlJUVFCSUJIOGdDaWdDQkFVZ0NFSC9BWEVMSUF0SEJFQWdDVUVBT2dBQUlBZEJmMm9oQndzTElBcEJER29oQ2lBSlFRRnFJUWtNQUFBTEFBc0xDeUFMSVJFZ0J5RUpEQUVMQ3lBTEJIOGdDeWdDRENJRUlBc29BaEJHQkg4Z0N5QUxLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdCQ2dDQUF0QmZ4QkJCSDhnQUVFQU5nSUFRUUVGSUFBb0FnQkZDd1ZCQVFzaEJBSkFBa0FDUUNBSFJRMEFJQWNvQWd3aUFDQUhLQUlRUmdSL0lBY2dCeWdDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQUFvQWdBTFFYOFFRUVJBSUFGQkFEWUNBQXdCQlNBRVJRMENDd3dDQ3lBRURRQU1BUXNnQlNBRktBSUFRUUp5TmdJQUN3SkFBa0FEUUNBQ0lBTkdEUUVnRFN3QUFFRUNSd1JBSUFKQkRHb2hBaUFOUVFGcUlRME1BUXNMREFFTElBVWdCU2dDQUVFRWNqWUNBQ0FESVFJTElCSVFPQ0FRSkFZZ0FndXJDQUVOZnlNR0lSQWpCa0h3QUdva0JpQVFJUWNnQXlBQ2EwRU1FRGtpQ1VIa0FFc0VRQ0FKRUVRaUJ3UkFJQWNpQ3lFU0JSQUFDd1VnQnlFTEN5QUNJUWNnQ3lFS0EwQWdBeUFIUndSQUlBY3NBQXNpREVFQVNBUi9JQWNvQWdRRklBeEIvd0Z4Q3dSQUlBcEJBVG9BQUFVZ0NrRUNPZ0FBSUFsQmYyb2hDU0FJUVFGcUlRZ0xJQWRCREdvaEJ5QUtRUUZxSVFvTUFRc0xJQWtoQ2lBSUlRa0RRQUpBSUFBb0FnQWlCd1IvSUFjb0Fnd2lDQ0FIS0FJUVJnUi9JQWNnQnlnQ0FDZ0NKRUgvQUhGQkNHb1JBQUFGSUFnc0FBQVFRZ3RCZnhCQkJIOGdBRUVBTmdJQVFRRUZJQUFvQWdCRkN3VkJBUXNDZnlBQktBSUFJZ2dFZnlBSUtBSU1JZ2NnQ0NnQ0VFWUVmeUFJSUFnb0FnQW9BaVJCL3dCeFFRaHFFUUFBQlNBSExBQUFFRUlMUVg4UVFRUi9JQUZCQURZQ0FFRUFJUWhCQVFWQkFBc0ZRUUFoQ0VFQkN5RVRJQUFvQWdBaEJ5QVRDM01nQ2tFQVIzRkZEUUFnQnlnQ0RDSUlJQWNvQWhCR0JIOGdCeUFIS0FJQUtBSWtRZjhBY1VFSWFoRUFBQVVnQ0N3QUFCQkNDMEgvQVhFaERpQUdSUVJBSUFRZ0RpQUVLQUlBS0FJTVFUOXhRWW9CYWhFQ0FDRU9DeUFQUVFGcUlRd2dBaUVIUVFBaENDQUxJUTBEUUNBRElBZEhCRUFnRFN3QUFFRUJSZ1JBQWtBZ0J5d0FDMEVBU0FSL0lBY29BZ0FGSUFjTElBOXFMQUFBSVJFZ0RrSC9BWEVnQmdSL0lCRUZJQVFnRVNBRUtBSUFLQUlNUVQ5eFFZb0JhaEVDQUF0Qi93RnhSd1JBSUExQkFEb0FBQ0FLUVg5cUlRb01BUXNnQnl3QUN5SUlRUUJJQkg4Z0J5Z0NCQVVnQ0VIL0FYRUxJQXhHQkVBZ0RVRUNPZ0FBSUFwQmYyb2hDaUFKUVFGcUlRa0xRUUVoQ0FzTElBZEJER29oQnlBTlFRRnFJUTBNQVFzTElBZ0VRQUpBSUFBb0FnQWlCeWdDRENJSUlBY29BaEJHQkVBZ0J5QUhLQUlBS0FJb1FmOEFjVUVJYWhFQUFCb0ZJQWNnQ0VFQmFqWUNEQ0FJTEFBQUVFSWFDeUFKSUFwcVFRRkxCRUFnQWlFSElBc2hDQU5BSUFNZ0IwWU5BaUFJTEFBQVFRSkdCRUFnQnl3QUN5SVBRUUJJQkg4Z0J5Z0NCQVVnRDBIL0FYRUxJQXhIQkVBZ0NFRUFPZ0FBSUFsQmYyb2hDUXNMSUFkQkRHb2hCeUFJUVFGcUlRZ01BQUFMQUFzTEN5QU1JUThNQVFzTElBY0VmeUFIS0FJTUlnUWdCeWdDRUVZRWZ5QUhJQWNvQWdBb0FpUkIvd0J4UVFocUVRQUFCU0FFTEFBQUVFSUxRWDhRUVFSL0lBQkJBRFlDQUVFQkJTQUFLQUlBUlFzRlFRRUxJUUFDUUFKQUFrQWdDRVVOQUNBSUtBSU1JZ1FnQ0NnQ0VFWUVmeUFJSUFnb0FnQW9BaVJCL3dCeFFRaHFFUUFBQlNBRUxBQUFFRUlMUVg4UVFRUkFJQUZCQURZQ0FBd0JCU0FBUlEwQ0N3d0NDeUFBRFFBTUFRc2dCU0FGS0FJQVFRSnlOZ0lBQ3dKQUFrQURmeUFDSUFOR0RRRWdDeXdBQUVFQ1JnUi9JQUlGSUFKQkRHb2hBaUFMUVFGcUlRc01BUXNMSVFNTUFRc2dCU0FGS0FJQVFRUnlOZ0lBQ3lBU0VEZ2dFQ1FHSUFNTGlRRUJBbjhnQUNnQ0JDSUJJQUVvQWdCQmRHb29BZ0JxSWdFb0FoZ0VRQ0FCS0FJUVJRUkFJQUVvQWdSQmdNQUFjUVJBSUFBb0FnUWlBU0FCS0FJQVFYUnFLQUlBYWlnQ0dDSUJLQUlBS0FJWUlRSWdBU0FDUWY4QWNVRUlhaEVBQUVGL1JnUkFJQUFvQWdRaUFDQUFLQUlBUVhScUtBSUFhaUlBSUFBb0FoQkJBWElRN2dFTEN3c0xDendBSUFCQkFEb0FBQ0FBSUFFMkFnUWdBU0FCS0FJQVFYUnFLQUlBYWlJQktBSVFSUVJBSUFFb0FrZ2lBUVJBSUFFUVB3c2dBRUVCT2dBQUN3c0tBQ0FBUVFScUVKMENDd29BSUFCQkNHb1FuUUlMQkFCQmZ3c0RBQUVMTXdBZ0FFR01qQUUyQWdBZ0FCRFFDeUFBUVJ4cUVEd2dBQ2dDSUJBNElBQW9BaVFRT0NBQUtBSXdFRGdnQUNnQ1BCQTRDMVVCQTM4Z0FDZ0NCQ0lHUVFoMUlRVWdCa0VCY1FSQUlBSW9BZ0FnQldvb0FnQWhCUXNnQUNnQ0FDSUFLQUlBS0FJWUlRY2dBQ0FCSUFJZ0JXb2dBMEVDSUFaQkFuRWJJQVFnQjBFL2NVR2FCbW9SQlFBTExnRUJmeU1HSVFJakJrRVFhaVFHSUFJZ0FUWUNBRUdraUFFb0FnQWlBU0FBSUFJUXBRSWFJQUVROGdRUUFBdDhBd0YvQVg0Q2ZDTUdJUU1qQmtHUUFXb2tCaUFEUVFCQmtBRVFSUm9nQXlBQU5nSUVJQU5CZnpZQ0NDQURJQUEyQWl3Z0EwRi9OZ0pNSUFOQ0FCQ0NBU0FESUFKQkFSQ1NBeUVHSUFNcEEzZ2dBeWdDQkNBREtBSUlhNng4SVFRZ0FRUkFJQUVnQUNBQUlBU25haUFFVUJzMkFnQUxJQU1rQmlBR0N3MEFJQUFnQVNBQ1FuOFFoQU1MM3dFQkJuOGpCaUVHSXdaQjhBRnFKQVlnQmlBQU5nSUFJQU5CQVVvRVFBSkFRUUFnQVdzaENTQURJUWRCQVNFRElBQWhCUU5BSUFVZ0FDQUphaUlBSUFkQmZtb2lDa0VDZENBRWFpZ0NBR3NpQ0NBQ1FUOXhRWW9CYWhFQ0FFRi9TZ1JBSUFVZ0FDQUNRVDl4UVlvQmFoRUNBRUYvU2cwQ0N5QURRUUowSUFacUlRVWdBMEVCYWlFRElBZ2dBQ0FDUVQ5eFFZb0JhaEVDQUVGL1NnUi9JQVVnQ0RZQ0FDQUlJUUFnQjBGL2FnVWdCU0FBTmdJQUlBb0xJZ2RCQVVvRVFDQUdLQUlBSVFVTUFRc0xDd1ZCQVNFREN5QUJJQVlnQXhEL0FpQUdKQVlMS1FFQ2Z5TUdJUVFqQmtFUWFpUUdJQVFnQXpZQ0FDQUFJQUVnQWlBRUVLa0JJUVVnQkNRR0lBVUw2aElDRkg4QmZpTUdJUThqQmtGQWF5UUdJQTlCS0dvaENpQVBRVEJxSVJnZ0QwRThhaUVXSUE5Qk9Hb2lEQ0FCTmdJQUlBQkJBRWNoRWlBUFFTaHFJaFVoRXlBUFFTZHFJUmRCQUNFQkFrQUNRQU5BQWtBRFFDQUpRWDlLQkVBZ0FVSC8vLy8vQnlBSmEwb0VmMEdreFFOQlBUWUNBRUYvQlNBQklBbHFDeUVKQ3lBTUtBSUFJZ3NzQUFBaUNFVU5BeUFMSVFFQ1FBSkFBMEFDUUFKQUlBaEJHSFJCR0hVaUNBUkFJQWhCSlVjTkFRd0VDd3dCQ3lBTUlBRkJBV29pQVRZQ0FDQUJMQUFBSVFnTUFRc0xEQUVMSUFFaENBTkFJQWdzQUFGQkpVY05BU0FCUVFGcUlRRWdEQ0FJUVFKcUlnZzJBZ0FnQ0N3QUFFRWxSZzBBQ3dzZ0FTQUxheUVCSUJJRVFDQUFJQXNnQVJCeUN5QUJEUUFMSUF3b0FnQXNBQUVRaWdGRklRZ2dEQ0FNS0FJQUlnRWdDQVIvUVg4aERVRUJCU0FCTEFBQ1FTUkdCSDhnQVN3QUFVRlFhaUVOUVFFaEJVRURCVUYvSVExQkFRc0xhaUlCTmdJQUlBRXNBQUFpQmtGZ2FpSUlRUjlMUVFFZ0NIUkJpZEVFY1VWeUJFQkJBQ0VJQlVFQUlRWURRQ0FHUVFFZ0NIUnlJUWdnRENBQlFRRnFJZ0UyQWdBZ0FTd0FBQ0lHUVdCcUlnZEJIMHRCQVNBSGRFR0owUVJ4UlhKRkJFQWdDQ0VHSUFjaENBd0JDd3NMSUFaQi93RnhRU3BHQkVBZ0RBSi9Ba0FnQVN3QUFSQ0tBVVVOQUNBTUtBSUFJZ2NzQUFKQkpFY05BQ0FITEFBQlFWQnFRUUowSUFScVFRbzJBZ0FnQnl3QUFVRlFha0VEZENBRGFpa0RBS2NoQVVFQklRWWdCMEVEYWd3QkN5QUZCRUJCZnlFSkRBTUxJQklFUUNBQ0tBSUFRUU5xUVh4eElnVW9BZ0FoQVNBQ0lBVkJCR28yQWdBRlFRQWhBUXRCQUNFR0lBd29BZ0JCQVdvTElnVTJBZ0JCQUNBQmF5QUJJQUZCQUVnaUFSc2hFQ0FJUVlEQUFISWdDQ0FCR3lFT0lBWWhDQVVnREJDTkF5SVFRUUJJQkVCQmZ5RUpEQUlMSUFnaERpQUZJUWdnRENnQ0FDRUZDeUFGTEFBQVFTNUdCRUFDUUNBRlFRRnFJUUVnQlN3QUFVRXFSd1JBSUF3Z0FUWUNBQ0FNRUkwRElRRWdEQ2dDQUNFRkRBRUxJQVVzQUFJUWlnRUVRQ0FNS0FJQUlnVXNBQU5CSkVZRVFDQUZMQUFDUVZCcVFRSjBJQVJxUVFvMkFnQWdCU3dBQWtGUWFrRURkQ0FEYWlrREFLY2hBU0FNSUFWQkJHb2lCVFlDQUF3Q0N3c2dDQVJBUVg4aENRd0RDeUFTQkVBZ0FpZ0NBRUVEYWtGOGNTSUZLQUlBSVFFZ0FpQUZRUVJxTmdJQUJVRUFJUUVMSUF3Z0RDZ0NBRUVDYWlJRk5nSUFDd1ZCZnlFQkMwRUFJUWNEUUNBRkxBQUFRYjkvYWtFNVN3UkFRWDhoQ1F3Q0N5QU1JQVZCQVdvaUJqWUNBQ0FGTEFBQUlBZEJPbXhxUVkvV0FHb3NBQUFpRVVIL0FYRWlCVUYvYWtFSVNRUkFJQVVoQnlBR0lRVU1BUXNMSUJGRkJFQkJmeUVKREFFTElBMUJmMG9oRkFKQUFrQWdFVUVUUmdSQUlCUUVRRUYvSVFrTUJBc0ZBa0FnRkFSQUlBMUJBblFnQkdvZ0JUWUNBQ0FLSUExQkEzUWdBMm9wQXdBM0F3QU1BUXNnRWtVRVFFRUFJUWtNQlFzZ0NpQUZJQUlRakFNZ0RDZ0NBQ0VHREFJTEN5QVNEUUJCQUNFQkRBRUxJQTVCLy85N2NTSU5JQTRnRGtHQXdBQnhHeUVGQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQ0FHUVg5cUxBQUFJZ1pCWDNFZ0JpQUdRUTl4UVFOR0lBZEJBRWR4R3lJR1FjRUFhdzQ0Q1FvSENna0pDUW9LQ2dvS0Nnb0tDZ29LQ0FvS0Nnb0xDZ29LQ2dvS0Nnb0pDZ1VEQ1FrSkNnTUtDZ29LQUFJQkNnb0dDZ1FLQ2dzS0N3SkFBa0FDUUFKQUFrQUNRQUpBQWtBZ0IwSC9BWEZCR0hSQkdIVU9DQUFCQWdNRUJ3VUdCd3NnQ2lnQ0FDQUpOZ0lBUVFBaEFRd1hDeUFLS0FJQUlBazJBZ0JCQUNFQkRCWUxJQW9vQWdBZ0NhdzNBd0JCQUNFQkRCVUxJQW9vQWdBZ0NUc0JBRUVBSVFFTUZBc2dDaWdDQUNBSk9nQUFRUUFoQVF3VEN5QUtLQUlBSUFrMkFnQkJBQ0VCREJJTElBb29BZ0FnQ2F3M0F3QkJBQ0VCREJFTFFRQWhBUXdRQzBINEFDRUdJQUZCQ0NBQlFRaExHeUVCSUFWQkNISWhCUXdKQzBFQUlRdEJrUDRDSVE0Z0FTQVRJQW9wQXdBZ0ZSQ0VCU0lIYXlJR1FRRnFJQVZCQ0hGRklBRWdCa3B5R3lFQkRBc0xJQW9wQXdBaUdVSUFVd1IvSUFwQ0FDQVpmU0laTndNQVFRRWhDMEdRL2dJRklBVkJnUkJ4UVFCSElRdEJrZjRDUVpMK0FrR1EvZ0lnQlVFQmNSc2dCVUdBRUhFYkN5RU9EQWdMUVFBaEMwR1EvZ0loRGlBS0tRTUFJUmtNQndzZ0Z5QUtLUU1BUEFBQUlCY2hCa0VBSVF0QmtQNENJUTVCQVNFSElBMGhCU0FUSVFFTUNnc2dDaWdDQUNJRlFacitBaUFGR3lJR1FRQWdBUkNtQWlJUlJTRVVRUUFoQzBHUS9nSWhEaUFCSUJFZ0Jtc2dGQnNoQnlBTklRVWdBU0FHYWlBUklCUWJJUUVNQ1FzZ0R5QUtLUU1BUGdJd0lBOUJBRFlDTkNBS0lCZzJBZ0JCZnlFTERBVUxJQUVFUUNBQklRc01CUVVnQUVFZ0lCQkJBQ0FGRUhWQkFDRUJEQWNMQUFzZ0FDQUtLd01BSUJBZ0FTQUZJQVpCaVFFUklnQWhBUXdIQ3lBTElRWkJBQ0VMUVpEK0FpRU9JQUVoQnlBVElRRU1CUXNnQ2lrREFDQVZJQVpCSUhFUWhRVWhCMEVBUVFJZ0JVRUljVVVnQ2lrREFGQnlJZzBiSVF0QmtQNENJQVpCQkhaQmtQNENhaUFOR3lFT0RBSUxJQmtnRlJDK0FTRUhEQUVMSUFvb0FnQWhCa0VBSVFFQ1FBSkFBMEFnQmlnQ0FDSUhCRUFnRmlBSEVJc0RJZ2RCQUVnaURTQUhJQXNnQVd0TGNnMENJQVpCQkdvaEJpQUxJQUVnQjJvaUFVc05BUXNMREFFTElBMEVRRUYvSVFrTUJnc0xJQUJCSUNBUUlBRWdCUkIxSUFFRVFDQUtLQUlBSVFaQkFDRUxBMEFnQmlnQ0FDSUhSUTBESUFzZ0ZpQUhFSXNESWdkcUlnc2dBVW9OQXlBR1FRUnFJUVlnQUNBV0lBY1FjaUFMSUFGSkRRQUxCVUVBSVFFTERBRUxJQWNnRlNBS0tRTUFRZ0JTSWcwZ0FVRUFSM0lpRVJzaEJpQUJJQk1nQjJzZ0RVRUJjMm9pQnlBQklBZEtHMEVBSUJFYklRY2dCVUgvLzN0eElBVWdBVUYvU2hzaEJTQVRJUUVNQVFzZ0FFRWdJQkFnQVNBRlFZREFBSE1RZFNBUUlBRWdFQ0FCU2hzaEFRd0JDeUFBUVNBZ0N5QUJJQVpySWcwZ0J5QUhJQTFJR3lJUmFpSUhJQkFnRUNBSFNCc2lBU0FISUFVUWRTQUFJQTRnQ3hCeUlBQkJNQ0FCSUFjZ0JVR0FnQVJ6RUhVZ0FFRXdJQkVnRFVFQUVIVWdBQ0FHSUEwUWNpQUFRU0FnQVNBSElBVkJnTUFBY3hCMUN5QUlJUVVNQVFzTERBRUxJQUJGQkVBZ0JRUi9RUUVoQUFOQUlBQkJBblFnQkdvb0FnQWlBUVJBSUFCQkEzUWdBMm9nQVNBQ0VJd0RJQUJCQVdvaUFFRUtTUTBCUVFFaENRd0VDd3NEZnlBQVFRSjBJQVJxS0FJQUJFQkJmeUVKREFRTElBQkJBV29pQUVFS1NRMEFRUUVMQlVFQUN5RUpDd3NnRHlRR0lBa0xDd0FnQUNBQklBSVFod1VML1FFQkEzOGdBVUgvQVhFaEJBSkFBa0FDUUNBQ1FRQkhJZ01nQUVFRGNVRUFSM0VFUUNBQlFmOEJjU0VGQTBBZ0JTQUFMUUFBUmcwQ0lBSkJmMm9pQWtFQVJ5SURJQUJCQVdvaUFFRURjVUVBUjNFTkFBc0xJQU5GRFFFTElBRkIvd0Z4SWdFZ0FDMEFBRVlFUUNBQ1JRMEJEQUlMSUFSQmdZS0VDR3doQXdKQUFrQWdBa0VEVFEwQUEwQWdBeUFBS0FJQWN5SUVRZi85KzNkcUlBUkJnSUdDaEhoeFFZQ0Jnb1I0YzNGRkJFQWdBRUVFYWlFQUlBSkJmR29pQWtFRFN3MEJEQUlMQ3d3QkN5QUNSUTBCQ3dOQUlBQXRBQUFnQVVIL0FYRkdEUUlnQWtGL2FpSUNSUTBCSUFCQkFXb2hBQXdBQUFzQUMwRUFJUUFMSUFBTGp3RUJBbjhnQUNBQUxBQktJZ0VnQVVIL0FXcHlPZ0JLSUFBb0FoUWdBQ2dDSEVzRVFDQUFLQUlrSVFFZ0FFRUFRUUFnQVVFL2NVSEtBV29SQkFBYUN5QUFRUUEyQWhBZ0FFRUFOZ0ljSUFCQkFEWUNGQ0FBS0FJQUlnRkJCSEVFZnlBQUlBRkJJSEkyQWdCQmZ3VWdBQ0FBS0FJc0lBQW9BakJxSWdJMkFnZ2dBQ0FDTmdJRUlBRkJHM1JCSDNVTEM1RUJBUU4vQW44Q1FDQUFLQUlVSUFBb0FoeE5EUUFnQUNnQ0pDRUJJQUJCQUVFQUlBRkJQM0ZCeWdGcUVRUUFHaUFBS0FJVURRQkJmd3dCQ3lBQUtBSUVJZ0VnQUNnQ0NDSUNTUVJBSUFBb0FpZ2hBeUFBSUFFZ0FtdXNRUUVnQTBFRGNVR21BMm9SRkFBYUN5QUFRUUEyQWhBZ0FFRUFOZ0ljSUFCQkFEWUNGQ0FBUVFBMkFnZ2dBRUVBTmdJRVFRQUxDNGNCQVFGL0lBQUVRQUovSUFBb0FreEJmMHdFUUNBQUVLZ0NEQUVMSUFBUXFBSUxJUUFGUWJDSUFTZ0NBQVIvUWJDSUFTZ0NBQkNwQWdWQkFBc2hBQkNyQWlnQ0FDSUJCRUFEUUNBQktBSk1RWDlLQkg5QkFRVkJBQXNhSUFFb0FoUWdBU2dDSEVzRVFDQUJFS2dDSUFCeUlRQUxJQUVvQWpnaUFRMEFDd3RCcU1VREVBNExJQUFMK2dFQkEzOGdBVUgvQVhFaUFnUkFBa0FnQUVFRGNRUkFJQUZCL3dGeElRTURRQ0FBTEFBQUlnUkZJQU5CR0hSQkdIVWdCRVp5RFFJZ0FFRUJhaUlBUVFOeERRQUxDeUFDUVlHQ2hBaHNJUU1nQUNnQ0FDSUNRZi85KzNkcUlBSkJnSUdDaEhoeFFZQ0Jnb1I0YzNGRkJFQURRQ0FDSUFOeklnSkIvLzM3ZDJvZ0FrR0FnWUtFZUhGQmdJR0NoSGh6Y1VVRVFDQUFRUVJxSWdBb0FnQWlBa0gvL2Z0M2FpQUNRWUNCZ29SNGNVR0FnWUtFZUhOeFJRMEJDd3NMSUFGQi93RnhJUUlEUUNBQVFRRnFJUUVnQUN3QUFDSURSU0FDUVJoMFFSaDFJQU5HY2tVRVFDQUJJUUFNQVFzTEN3VWdBQkJnSUFCcUlRQUxJQUFMREFCQnFNVURFQnBCc01VREN4OEFJQUJCLy84RGNRUi9RYVRGQXlBQVFmLy9BM0UyQWdCQmZ3VkJBQXNMOUFFQ0NYOEJmQ0FCS0FJSUlnZ2dBaWdDQkVZRWZ5QUFLQUlFSWdvZ0FTZ0NCRVlFZnlBQUtBSUlJZ2tnQWlnQ0NFWUVmeUFBS0FJQUlRQURmeUFESUFwSUJIOGdBeUFJYkNFTFFRQWhCQU5BSUFRZ0NVZ0VRQ0FBUkFBQUFBQUFBQUFBT1FNQUlBSW9BZ0FnQkVFRGRHb2hCU0FCS0FJQUlBdEJBM1JxSVFaQkFDRUhSQUFBQUFBQUFBQUFJUXdEUUNBSElBaElCRUFnQUNBTUlBWXJBd0FnQlNzREFLS2dJZ3c1QXdBZ0NVRURkQ0FGYWlFRklBWkJDR29oQmlBSFFRRnFJUWNNQVFzTElBUkJBV29oQkNBQVFRaHFJUUFNQVFzTElBTkJBV29oQXd3QkJVRUFDd3NGUVg4TEJVRi9Dd1ZCZndzTDhnSUJBMzhnQUNnQ0JDRURJQUZCQVVzRVFDQUFLQUlBSWdKQkR6WUNGQ0FDSUFFMkFoZ2dBQ0FBS0FJQUtBSUFRZjhCY1VHc0Eyb1JBUUFGSUFGQkFVWUVRQ0FES0FKRUlnSUVRQU5BSUFJb0FpZ0VRQ0FDUVFBMkFpZ2dBQ0FDUVRCcUlBSW9BamhCUDNGQnNnVnFFUU1BQ3lBQ0tBSXNJZ0lOQUFzTElBTkJBRFlDUkNBREtBSklJZ0lFUUFOQUlBSW9BaWdFUUNBQ1FRQTJBaWdnQUNBQ1FUQnFJQUlvQWpoQlAzRkJzZ1ZxRVFNQUN5QUNLQUlzSWdJTkFBc0xJQU5CQURZQ1NBc0xJQU5CUEdvZ0FVRUNkR29pQUNnQ0FDRUNJQUJCQURZQ0FDQUNCRUFEUUNBQ0tBSUFJUUFnQWlnQ0NDQUNLQUlFUVJCcWFpRUVJQUlRT0NBRElBTW9Ba3dnQkdzMkFrd2dBQVJBSUFBaEFnd0JDd3NMSUFOQk5Hb2dBVUVDZEdvaUFDZ0NBQ0VCSUFCQkFEWUNBQ0FCUlFSQUR3c0RRQ0FCS0FJQUlRQWdBU2dDQ0NBQktBSUVRUkJxYWlFQ0lBRVFPQ0FESUFNb0Frd2dBbXMyQWt3Z0FBUkFJQUFoQVF3QkN3c0w5QUVCQkg4Z0FDZ0NCQ0VFSUFKQjhKUHIzQU5MQkVBZ0FDZ0NBQ0lEUVRnMkFoUWdBMEVETmdJWUlBQWdBQ2dDQUNnQ0FFSC9BWEZCckFOcUVRRUFDeUFCUVFGTEJFQWdBQ2dDQUNJRFFRODJBaFFnQXlBQk5nSVlJQUFnQUNnQ0FDZ0NBRUgvQVhGQnJBTnFFUUVBQ3lBQ1FRZ2dBa0VIY1NJRGEwRUFJQU1iYWlJRFFSQnFJZ1VRUkNJQ1JRUkFJQUFvQWdBaUJrRTROZ0lVSUFaQkJEWUNHQ0FBSUFBb0FnQW9BZ0JCL3dGeFFhd0RhaEVCQUFzZ0JDQUZJQVFvQWt4cU5nSk1JQUlnQkVFOGFpQUJRUUowYWlJQUtBSUFOZ0lBSUFJZ0F6WUNCQ0FDUVFBMkFnZ2dBQ0FDTmdJQUlBSkJFR29MMmdrQkVYOGdBQ2dDNUFNb0FoZ2hEQ0FCS0FJRUlnZ2dBU2dDQUNJQ1RDQUJLQUlJSWdrZ0FTZ0NEQ0lLU25JZ0FTZ0NFQ0lHSUFFb0FoUWlCMHB5QkVBZ0FpRUFCUUpBSUFJaEFBTkFBa0FnQUVFQ2RDQU1haWdDQUNFTklBa2hBd05BSUFOQkJuUWdEV29nQmtFQmRHb2hCU0FHSVFRRFFDQUZMZ0VBRFFJZ0JVRUNhaUVGSUFSQkFXb2hDeUFFSUFkSUJFQWdDeUVFREFFTEN5QURRUUZxSVFRZ0F5QUtTQVJBSUFRaEF3d0JDd3NnQUVFQmFpRURJQUFnQ0VnRVFDQURJUUFNQWdVZ0FpRUFEQU1MQUFzTElBRWdBRFlDQUFzTElBZ2dBRXdnQ1NBS1NuSWdCaUFIU25KRkJFQUNRQ0FJSVFJRFFBSkFJQUpCQW5RZ0RHb29BZ0FoRFNBSklRTURRQ0FEUVFaMElBMXFJQVpCQVhScUlRVWdCaUVFQTBBZ0JTNEJBQTBDSUFWQkFtb2hCU0FFUVFGcUlRc2dCQ0FIU0FSQUlBc2hCQXdCQ3dzZ0EwRUJhaUVFSUFNZ0NrZ0VRQ0FFSVFNTUFRc0xJQUpCZjJvaERpQUNJQUJNRFFJZ0RpRUNEQUVMQ3lBQklBSTJBZ1FnQWlFSUN3c2dDQ0FBU0NBS0lBbE1jaUFHSUFkS2NrVUVRQUpBSUFraEFnTkFBa0FnQUNFREEwQWdBMEVDZENBTWFpZ0NBQ0FDUVFaMGFpQUdRUUYwYWlFRklBWWhCQU5BSUFVdUFRQU5BaUFGUVFKcUlRVWdCRUVCYWlFTElBUWdCMGdFUUNBTElRUU1BUXNMSUFOQkFXb2hCQ0FESUFoSUJFQWdCQ0VEREFFTEN5QUNRUUZxSVE4Z0FpQUtUZzBDSUE4aEFnd0JDd3NnQVNBQ05nSUlJQUloQ1FzTElBZ2dBRWdnQ2lBSlRISWdCaUFIU25KRkJFQUNRQ0FLSVFJRFFBSkFJQUFoQXdOQUlBTkJBblFnREdvb0FnQWdBa0VHZEdvZ0JrRUJkR29oQlNBR0lRUURRQ0FGTGdFQURRSWdCVUVDYWlFRklBUkJBV29oQ3lBRUlBZElCRUFnQ3lFRURBRUxDeUFEUVFGcUlRUWdBeUFJU0FSQUlBUWhBd3dCQ3dzZ0FrRi9haUVRSUFJZ0NVd05BaUFRSVFJTUFRc0xJQUVnQWpZQ0RDQUNJUW9MQ3lBSUlBQklJQWNnQmt4eUlBb2dDVWh5UlFSQUFrQWdCaUVDQTBBQ1FDQUFJUU1EUUNBRFFRSjBJQXhxS0FJQUlBa2lCRUVHZEdvZ0FrRUJkR29oQlFOQUlBVXVBUUFOQWlBRVFRRnFJUXNnQlVGQWF5RUZJQVFnQ2tnRVFDQUxJUVFNQVFzTElBTkJBV29oQkNBRElBaElCRUFnQkNFRERBRUxDeUFDUVFGcUlSRWdBaUFIVGcwQ0lCRWhBZ3dCQ3dzZ0FTQUNOZ0lRSUFJaEJnc0xJQWdnQUVnZ0J5QUdUSElnQ2lBSlNISkZCRUFDUUNBSElRSURRQUpBSUFBaEF3TkFJQU5CQW5RZ0RHb29BZ0FnQ1NJRVFRWjBhaUFDUVFGMGFpRUZBMEFnQlM0QkFBMENJQVJCQVdvaEN5QUZRVUJySVFVZ0JDQUtTQVJBSUFzaEJBd0JDd3NnQTBFQmFpRUVJQU1nQ0VnRVFDQUVJUU1NQVFzTElBSkJmMm9oRWlBQ0lBWk1EUUlnRWlFQ0RBRUxDeUFCSUFJMkFoUWdBaUVIQ3dzZ0FTQUlJQUJyUVFSMElnSWdBbXdnQ2lBSmEwRU1iQ0lDSUFKc2FpQUhJQVpyUVFOMElnSWdBbXhxTmdJWUlBZ2dBRWdnQ2lBSlNISWdCeUFHU0hJRVFDQUJRUUEyQWh3UEMwRUFJUU1nQUNFQ0EwQWdBa0VDZENBTWFpZ0NBQ0VOSUFNaEFDQUpJUU1EUUNBRFFRWjBJQTFxSUFZaUJFRUJkR29oQlFOQUlBQWdCUzRCQUVFQVIyb2hBQ0FFUVFGcUlRc2dCVUVDYWlFRklBUWdCMGdFUUNBTElRUU1BUXNMSUFOQkFXb2hCQ0FESUFwSUJFQWdCQ0VEREFFTEN5QUNRUUZxSVFRZ0FpQUlTQVJBSUFBaEF5QUVJUUlNQVFzTElBRWdBRFlDSEF1eEF3RUdmeUFBS0FJWUlnSW9BZ1FoQVNBQ0tBSUFJUVFDUUFOQUlBRUVmeUFFQlNBQ0tBSU1JUUVnQUNBQlFmOEFjVUVJYWhFQUFFVU5BaUFDS0FJRUlRRWdBaWdDQUFzaEF5QUJRWDlxSVFFZ0EwRUJhaUVFSUFNc0FBQkJmMGNFUUFOQUlBQW9BdEFESWdNZ0F5Z0NHRUVCYWpZQ0dDQUNJQVEyQWdBZ0FpQUJOZ0lFSUFFRWZ5QUVCU0FDS0FJTUlRRWdBQ0FCUWY4QWNVRUlhaEVBQUVVTkJDQUNLQUlFSVFFZ0FpZ0NBQXNoQXlBQlFYOXFJUUVnQTBFQmFpRUVJQU1zQUFCQmYwY05BQXNMQTBBZ0FRUi9JQVFGSUFJb0Fnd2hBU0FBSUFGQi93QnhRUWhxRVFBQVJRMERJQUlvQWdRaEFTQUNLQUlBQ3lFRElBRkJmMm9oQVNBRFFRRnFJUVFnQXl3QUFDSUZRWDlHRFFBTElBQW9BdEFESWdZb0FoZ2hBeUFGUlFSQUlBWWdBMEVDYWpZQ0dDQUNJQVEyQWdBZ0FpQUJOZ0lFREFFTEN5QUZRZjhCY1NFRklBTUVRQ0FBS0FJQUlnWkI5d0EyQWhRZ0JpQUROZ0lZSUFBb0FnQWdCVFlDSENBQUtBSUFLQUlFSVFNZ0FFRi9JQU5CUDNGQnNnVnFFUU1BSUFBb0F0QURRUUEyQWhnTElBQWdCVFlDdUFNZ0FpQUVOZ0lBSUFJZ0FUWUNCRUVCRHd0QkFBdTRBUUVGZndOQUlBUkJBMGNFUUNBRVFRUjBJQUJxSVFVZ0JFRUVkQ0FBYWlFR0lBUkJCSFFnQUdvaEIwRUFJUU1EUUNBRFFRUkhCRUFnQkVFRWRDQUNhaUFEUVFKMGFpQUZLZ0lBSUFOQkFuUWdBV29xQWdDVUlBWXFBZ1FnQVVFUWFpQURRUUowYWlvQ0FKU1NJQWNxQWdnZ0FVRWdhaUFEUVFKMGFpb0NBSlNTT0FJQUlBTkJBV29oQXd3QkN3c2dCRUVFZENBQ2FpSURJQVJCQkhRZ0FHb3FBZ3dnQXlvQ0RKSTRBZ3dnQkVFQmFpRUVEQUVMQ3d1NEFRRUZmd05BSUFSQkEwY0VRQ0FFUVFWMElBQnFJUVVnQkVFRmRDQUFhaUVHSUFSQkJYUWdBR29oQjBFQUlRTURRQ0FEUVFSSEJFQWdCRUVGZENBQ2FpQURRUU4wYWlBRkt3TUFJQU5CQTNRZ0FXb3JBd0NpSUFZckF3Z2dBVUVnYWlBRFFRTjBhaXNEQUtLZ0lBY3JBeEFnQVVGQWF5QURRUU4wYWlzREFLS2dPUU1BSUFOQkFXb2hBd3dCQ3dzZ0JFRUZkQ0FDYWlJRElBUkJCWFFnQUdvckF4Z2dBeXNER0tBNUF4Z2dCRUVCYWlFRURBRUxDd3RVQVFKL0EwQWdBa0VEUndSQVFRQWhBUU5BSUFGQkJFY0VRQ0FDUVFWMFFZQ2tBMm9nQVVFRGRHb2dBa0VGZENBQWFpQUJRUU4wYWlzREFEa0RBQ0FCUVFGcUlRRU1BUXNMSUFKQkFXb2hBZ3dCQ3dzTEtBRUNmd0ovSXdZaEF5TUdRUkJxSkFZZ0FFRUNRWXlIQVVITnR3SkJBU0FCRUFrZ0F3c2tCZ3NvQVFKL0FuOGpCaUVESXdaQkVHb2tCaUFBUVFOQndJY0JRYnpRQWtFZklBRVFDU0FEQ3lRR0MvMEZBUVovSXdZaENTTUdRU0JxSkFZZ0NVRVFhaUVJSUFKRkJFQWdDRUhBeUFOQnpwd0NFRGRCNzV3Q0VEZEI3NklDRURkQi93QVFQa0gyb2dJUU4wSGduUUlRTnlJRklBVW9BZ0JCZEdvb0FnQnFFRHNnQ0VHQXpnTVFPaUlHS0FJQUtBSWNJUWNnQmtFS0lBZEJQM0ZCaWdGcUVRSUFJUVlnQ0JBOElBVWdCaEJBSUFVUVB4QUFDeUFEUlFSQUlBaEJ3TWdEUWZXZEFoQTNRZStjQWhBM1FlK2lBaEEzUVlBQkVENUI5cUlDRURkQmw1NENFRGNpQlNBRktBSUFRWFJxS0FJQWFoQTdJQWhCZ000REVEb2lCaWdDQUNnQ0hDRUhJQVpCQ2lBSFFUOXhRWW9CYWhFQ0FDRUdJQWdRUENBRklBWVFRQ0FGRUQ4UUFBdEJmeUFDU1FSQUlBaEJ3TWdEUWEyZUFoQTNRZStjQWhBM1FlK2lBaEEzUVlFQkVENUI5cUlDRURkQjBwNENFRGNpQlNBRktBSUFRWFJxS0FJQWFoQTdJQWhCZ000REVEb2lCaWdDQUNnQ0hDRUhJQVpCQ2lBSFFUOXhRWW9CYWhFQ0FDRUdJQWdRUENBRklBWVFRQ0FGRUQ4UUFBc2dCRVVFUUNBSVFjRElBMEgvbmdJUU4wSHZuQUlRTjBIdm9nSVFOMEdDQVJBK1FmYWlBaEEzUWFPZkFoQTNJZ1VnQlNnQ0FFRjBhaWdDQUdvUU95QUlRWURPQXhBNklnWW9BZ0FvQWh3aEJ5QUdRUW9nQjBFL2NVR0tBV29SQWdBaEJpQUlFRHdnQlNBR0VFQWdCUkEvRUFBTElBbEJDR29oQlNBQUlBRVF1UU1nQWlBRWJHd2lCallDRENBRElBWnNJZ1lnQUNnQ0ZFY0VRQ0FHRUZFaEJ5QUpRUUEyQWdBZ0NDQUpLQUlBTmdJQUlBVWdCeENvQnlBRktBSUFJUWNnQlNBQUtBSVlOZ0lBSUFBZ0J6WUNHQ0FGS0FJRUlRY2dCU0FBS0FJY05nSUVJQUFnQnpZQ0hDQUZFSlVCSUFBb0FoaEZCRUFnQ0VIQXlBTkJ4WjhDRURkQjc1d0NFRGRCNzZJQ0VEZEJsUUVRUGtIMm9nSVFOMEhvbndJUU55SUZJQVVvQWdCQmRHb29BZ0JxRURzZ0NFR0F6Z01RT2lJSEtBSUFLQUljSVFvZ0IwRUtJQXBCUDNGQmlnRnFFUUlBSVFjZ0NCQThJQVVnQnhCQUlBVVFQeEFBQ3dzZ0FDQUJOZ0lBSUFBZ0FqWUNCQ0FBSUFNMkFnZ2dBQ0FFTmdJUUlBQWdCallDRkNBSkpBWUxxUUVCQkg4Z0FBUi9BMEFnQVNBQUtBSUVTQVJBSUFBb0FnZ2dBVUVDZEdvb0FnQUVRQ0FBSUFFUTBBWUxJQUZCQW5RaEEwRUFJUUlEUUNBQ1FRUkhCRUFnQUNnQ0RDQUNJQU5xSWdSQkFuUnFLQUlBRURnZ0FDZ0NGQ0FFUVFKMGFpZ0NBQkE0SUFKQkFXb2hBZ3dCQ3dzZ0FVRUJhaUVCREFFTEN5QUFLQUlNRURnZ0FDZ0NGQkE0SUFBb0FnZ1FPQ0FBS0FJUUVEZ2dBQ2dDR0JBNElBQVFPRUVBQlVGL0N4b0xOQUVDZnlNR0lRRWpCa0VRYWlRR0lBRWdBQ2dDQUNnQ0FCREdCeUFCS0FJQUVJWUJFSUVDSVFJZ0FSQ1ZBU0FCSkFZZ0FndjNBUUVCZnlBRVFRRkdJUWtnQ0VFQVJ5RUVBbjhnQXdSL0lBa0VmeUFFQkVBZ0FDQUJJQUlnQ0NBSEVQMEtEQU1MSUFZRWZ5QUFJQUVnQWlBRklBY1ErZ3NGSUFBZ0FTQUNJQVVnQnhESEN3c0ZJQVFFUUNBQUlBRWdBaUFJSUFjUXRBa01Bd3NnQmdSL0lBQWdBU0FDSUFVZ0J4Q3lDZ1VnQUNBQklBSWdCU0FIRU9ZSkN3c0ZJQWtFZnlBRUJFQWdBQ0FCSUFJZ0NDQUhFSW9IREFNTElBWUVmeUFBSUFFZ0FpQUZJQWNRbWdnRklBQWdBU0FDSUFVZ0J4RFpCd3NGSUFRRVFDQUFJQUVnQWlBSUlBY1FrZ1VNQXdzZ0JnUi9JQUFnQVNBQ0lBVWdCeEMwQmdVZ0FDQUJJQUlnQlNBSEVOUUZDd3NMQ3d2R0F3SUlmd0YrSXdZaEJDTUdRVUJySkFZZ0JFRUlhaUVISUFSQk9Hb2hDaUFFUVRScUlRZ2dCRUVRYWlFR0lBSXNBR1FFUUNBRUlBQW9Ba3cyQWpBZ0JDQUNFTVVCS0FJQU5nSW9JQVFnQWhERkFTZ0NCRFlDSUNBSUlBUW9BakEyQWdBZ0NpQUVLQUlvTmdJQUlBY2dCQ2dDSURZQ0FDQUFRY2dBYWlBSUlBb2dCeERVQndVZ0JrRUFOZ0lBSUFaQkFEWUNCQ0FHUVFBMkFnZ2dBaUFHSUFFZ0F4RFRCd05BSUFVZ0JpZ0NCQ0FHS0FJQUlnSnJRUUoxU1FSQUlBQWdBU0FGUVFKMElBSnFLQUlBSUFNUXV3SWdCVUVCYWlFRkRBRUxDeUFBS0FKa0lBQW9BbWhJQkVBZ0FTZ0NBQ0lDSUFFb0FnUkhCRUFnQWlnQ0FDRUxJQUVvQWdRaUJTQUJLQUlBSWdscklnSkJDRW9FUUNBSElBa3BBZ0FpRERjREFDQUpJQVZCZUdvaUJTa0NBRGNDQUNBRklBdzNBZ0FnQkNBSk5nSXNJQVFnQlRZQ0pDQUVJQWsyQWh3Z0NDQUVLQUlzTmdJQUlBb2dCQ2dDSkRZQ0FDQUhJQVFvQWh3MkFnQWdDQ0FDUVFOMlFYOXFJQWNRdndNZ0FTZ0NCQ0VGQzBFQUlRSURRQ0FDUVg5SEJFQWdBa0YvYWlFQ0RBRUxDeUFCSUFWQmVHbzJBZ1FnQUNBQUtBSmtRUUZxTmdKa0lBQWdBU0FMSUFNUXV3SUxDeUFHRUZVTElBUWtCZ3RrQVFKL0lBQkJBRWNnQVVFQVIzRUVmeUFBUVF4cVFRQkJnQWdRUlJvZ0FTQUFLQUlFSUFBb0FnaHNhaUVDQTM4Z0FTQUNTUVIvSUFCQkRHb2dBUzBBQUVFQ2RHb2lBeUFES0FJQVFRRnFOZ0lBSUFGQkFXb2hBUXdCQlVFQUN3c0ZRWDhMQzFrQkFYMGdBQ0FDS2dJSUlBSXFBZ0FnQTVRZ0Fpb0NCQ0FFbEpLU0lBSXFBaUFnQWlvQ0dDQURsQ0FDS2dJY0lBU1VrcElpQlpVNEFnQWdBU0FDS2dJVUlBSXFBZ3dnQTVRZ0Fpb0NFQ0FFbEpLU0lBV1ZPQUlBQ3pRQUlBQWdBU2tDQURjQ0FDQUFJQUVwQWdnM0FnZ2dBQ0FCS1FJUU53SVFJQUFnQVNrQ0dEY0NHQ0FBSUFFb0FpQTJBaUFMdUFJQ0JYOENmQ01HSVFjakJrRWdhaVFHSUFkQkNHb2hCaUFIUVJScUlnZ2dCRUVFZEJCRUlnbzJBZ0FnQ2tVRVFFRUFRUU5CdWRnQ0lBWVFQVUVCRUFFTElBZEJFR29oQmlBSUlBUkJHR3dRUkNJSk5nSUVJQWxGQkVCQkFFRURRYm5ZQWlBR0VEMUJBUkFCQzBFQUlRWURRQ0FHSUFSSUJFQWdCa0VFZENBS2FpQUdRUVIwSUFKcUt3TUFPUU1BSUFaQkJIUWdDbW9nQmtFRWRDQUNhaXNEQ0RrRENDQUdRUmhzSUFscUlBWkJHR3dnQTJvckF3QTVBd0FnQmtFWWJDQUphaUFHUVJoc0lBTnFLd01JT1FNSUlBWkJHR3dnQ1dvZ0JrRVliQ0FEYWlzREVEa0RFQ0FHUVFGcUlRWU1BUXNMSUFnZ0JEWUNDQ0FBS0FJQUlBZ2dBU0FGSUFjUTZnRkJBRWdFUUNBSFJBQUFBQUNFMTVkQk9RTUFDeUFJS0FJQUVEZ2dDQ2dDQkJBNElBY3JBd0FoRENBSEpBWWdEQXNIQUNBQVFUeHFDMlVCQkg4RFFDQUZJQUpJQkVBZ0F5QURLQUlBUWYySERXeEJ3NzJhQVdvaUJEWUNBQ0FFUVJCMlFmLy9BWEVnQVJCUFFRSjBJQUJxSVFRZ0JVRUNkQ0FBYWlJR0tBSUFJUWNnQmlBRUtBSUFOZ0lBSUFRZ0J6WUNBQ0FGUVFGcUlRVU1BUXNMQzUwQkFRVi9Jd1loQWlNR1FTQnFKQVpCLy8vLy93TWdBQ2dDQkNBQUtBSUFhMEVDZFVFQmFpSURTUVJBRUFBRklBSWdBeUFBS0FJSUlBQW9BZ0FpQkdzaUJVRUJkU0lHSUFZZ0Ewa2JRZi8vLy84RElBVkJBblZCLy8vLy93RkpHeUFBS0FJRUlBUnJRUUoxSUFCQkNHb1F5QUVnQWlnQ0NDQUJLQUlBTmdJQUlBSWdBaWdDQ0VFRWFqWUNDQ0FBSUFJUTVBRWdBaERIQVNBQ0pBWUxDNklFQWdwL0FuMGpCaUVISXdaQklHb2tCaUFIUVFScUlRVWdCMEVRYWlFSklBY2dBVFlDQUNBQktBSUFJUU1DUUFKQUlBQW9BZ1FpQkVVaUNnUkFRUUFoQVF3QkJTQUVJQVJCZjJvaUNIRkZJZ3NFZnlBRElBaHhCU0FESUFSSkJIOGdBd1VnQXlBRUVFNExDeUlCUVFKMElBQW9BZ0JxS0FJQUlnSUVRQU5BSUFJb0FnQWlBa1VOQXlBRElBSW9BZ1FpQmtjRVFDQUxCRUFnQmlBSWNTRUdCU0FHSUFSUEJFQWdCaUFFRUU0aEJnc0xJQUVnQmtjTkJBc2dBeUFDS0FJSVJ3MEFDd1VNQWdzTERBRUxJQVVnQUNBRElBY1FvUWdnQUNvQ0VDSU1JQVN6bENBQUtBSU1RUUZxc3lJTlhTQUtjZ1JBQW44Z0FDQU5JQXlWalJDU0FTSUNJQVJCZjJvZ0JIRkJBRWNnQkVFRFNYSWdCRUVCZEhJaUFTQUJJQUpKR3hERkFpQUFLQUlFSWdKQmYyb2hBU0FCSUFOeElBRWdBbkZGRFFBYUlBTWdBa2tFZnlBREJTQURJQUlRVGdzTElRRUZJQVFoQWdzZ0FDZ0NBQ0FCUVFKMGFpZ0NBQ0lEQkg4Z0JTZ0NBQ0FES0FJQU5nSUFJQU1nQlNnQ0FEWUNBQ0FGQlNBRktBSUFJQUFvQWdnMkFnQWdBQ0FGS0FJQU5nSUlJQUFvQWdBZ0FVRUNkR29nQUVFSWFqWUNBQ0FGS0FJQUlnWW9BZ0FpQVFSQUlBRW9BZ1FoQVNBQ0lBSkJmMm9pQTNFRVFDQUJJQUpQQkVBZ0FTQUNFRTRoQVFzRklBRWdBM0VoQVFzZ0FDZ0NBQ0FCUVFKMGFpQUdOZ0lBQ3lBRkN5SUJLQUlBSVFJZ0FDQUFLQUlNUVFGcU5nSU1JQUZCQURZQ0FBc2dCeVFHSUFKQkRHb0xVd0VEZnlBQVFlZ0FhaUVEQTBBZ0FpQUFLQUpzSUFNb0FnQWlBV3RCQW5WSkJFQWdBa0VDZENBQmFpZ0NBQ0lCQkVBZ0FSREVBaUFCRURnTElBSkJBV29oQWd3QkN3c2dBRUgwQUdvUVZTQURFRlVMbHdFQkFuOGdBVUVCUmdSQVFRSWhBUVVnQVNBQlFYOXFjUVJBSUFFUTBRRWhBUXNMSUFFZ0FDZ0NCQ0lEU3dSQUlBQWdBUkRpQXdVZ0FTQURTUVJBSUFBb0FneXpJQUFxQWhDVmpSQ1NBU0VDSUFOQmYyb2dBM0ZGSUFOQkFrdHhCSDhnQWtFQlFTQWdBa0YvYW1kcmRDQUNRUUpKR3dVZ0FoRFJBUXNpQWlBQklBRWdBa2tiSWdFZ0Ewa0VRQ0FBSUFFUTRnTUxDd3NMRXdBZ0FFSHNoUUUyQWdBZ0FFRUVhaERTQWdzbEFDQUFRZHlGQVRZQ0FDQUFRVGhxRUZVZ0FFRXNhaEJWSUFCQklHb1FWU0FBRU1ZQ0N3MEFJQUFvQWdBZ0FVRUZkR29MM2dNQkEzOGpCaUVJSXdaQkVHb2tCaUFHUVFCS0JFQWdCa0VCYWlBRktBSUVTUVJBSUFkQmYyb2hDU0FIUVFCS0JFQWdCMEVCYWlJS0lBVW9BZ2hKQkVBZ0JTQUpFRkFnQmtFQ2RHb2hDU0FGSUFjUVVDQUdRUUowYWlFSElBVWdDaEJRSUFaQkFuUnFJUVVnQUNBSEtnSUVJQWRCZkdvaUFDb0NBSk5EQUFBQVA1UTRBZ0FnQVNBRktnSUFJQWtxQWdDVFF3QUFBRCtVT0FJQUlBSWdCeW9DQkNBQUtnSUFJQWNxQWdCREFBQUFRSlNUa2pnQ0FDQURJQVVxQWdBZ0NTb0NBQ0FIS2dJQVF3QUFBRUNVazVJNEFnQWdCQ0FKUVh4cUtnSUFJQVVxQWdTU0lBa3FBZ1FnQlVGOGFpb0NBSktUUXdBQWdENlVPQUlBSUFna0JnOExDeUFJUWNESUEwRzUyQUVRTjBIT3l3RVFOMEh2b2dJUU4wR2RBaEErUWZhaUFoQTNRZFRQQVJBM0lnQWdBQ2dDQUVGMGFpZ0NBR29RT3lBSVFZRE9BeEE2SWdFb0FnQW9BaHdoQWlBQlFRb2dBa0UvY1VHS0FXb1JBZ0FoQVNBSUVEd2dBQ0FCRUVBZ0FCQS9FQUFMQ3lBSVFjRElBMEdCMkFFUU4wSE95d0VRTjBIdm9nSVFOMEdjQWhBK1FmYWlBaEEzUVluUEFSQTNJZ0FnQUNnQ0FFRjBhaWdDQUdvUU95QUlRWURPQXhBNklnRW9BZ0FvQWh3aEFpQUJRUW9nQWtFL2NVR0tBV29SQWdBaEFTQUlFRHdnQUNBQkVFQWdBQkEvRUFBTERRQWdBQ0FDbENBQklBR1Vrd3M2QVFKOVF3QUFnRDlCQVNBRWRMS1ZJZ1ZEQUFBQVA1UkRBQUFBdjVJaEJpQUFJQVVnQXBRZ0JwSTRBZ0FnQVNBRklBT1VJQWFTT0FJQUN6OEJBbjhnQUNnQ0JDRUNJQUFvQWdnaEFRTkFJQUVnQWtjRVFDQUFJQUZCZUdvaUFUWUNDQXdCQ3dzZ0FDZ0NBQ0lCQkVBZ0FDZ0NEQm9nQVJBNEN3dVhBUUVFZnlBQlFRUnFJZ01vQWdCQkFDQUFLQUlFSUFBb0FnQWlCR3NpQlVFRGRXdEJBM1JxSVFJZ0F5QUNOZ0lBSUFWQkFFb0VRQ0FDSUFRZ0JSQk1HaUFES0FJQUlRSUxJQUFvQWdBaEJDQUFJQUkyQWdBZ0F5QUVOZ0lBSUFBb0FnUWhBaUFBSUFFb0FnZzJBZ1FnQVNBQ05nSUlJQUFvQWdnaEFpQUFJQUVvQWd3MkFnZ2dBU0FDTmdJTUlBRWdBeWdDQURZQ0FBcy9BUUovSUFBb0FnUWhBaUFBS0FJSUlRRURRQ0FCSUFKSEJFQWdBQ0FCUVZ4cUlnRTJBZ2dNQVFzTElBQW9BZ0FpQVFSQUlBQW9BZ3dhSUFFUU9Bc0xsd0VCQkg4Z0FVRUVhaUlES0FJQUlRSWdBeUFBS0FJRUlBQW9BZ0FpQkdzaUJVRmNFRGxCSkd3Z0Ftb2lBallDQUNBRlFRQktCRUFnQWlBRUlBVVFUQm9nQXlnQ0FDRUNDeUFBS0FJQUlRUWdBQ0FDTmdJQUlBTWdCRFlDQUNBQUtBSUVJUUlnQUNBQktBSUlOZ0lFSUFFZ0FqWUNDQ0FBS0FJSUlRSWdBQ0FCS0FJTU5nSUlJQUVnQWpZQ0RDQUJJQU1vQWdBMkFnQUxjZ0VCZnlBQVFRQTJBZ3dnQUNBRE5nSVFJQUVFUUNBQlFjZmo4VGhMQkVCQkNCQUZJZ01RaUFFZ0EwRzBpd0UyQWdBZ0EwSDQ5d0JCRmhBRUJTQUJRU1JzRUZFaEJBc0xJQUFnQkRZQ0FDQUFJQUpCSkd3Z0JHb2lBallDQ0NBQUlBSTJBZ1FnQUNBQlFTUnNJQVJxTmdJTUMwNEJBbjhqQmlFQ0l3WkJJR29rQmlBQUtBSUlJQUFvQWdBaUEydEJKQkE1SUFGSkJFQWdBaUFCSUFBb0FnUWdBMnRCSkJBNUlBQkJDR29RMEFJZ0FDQUNFTThDSUFJUXpnSUxJQUlrQmd0QUFRSi9JQUFvQWdBaUFnUkFJQUFvQWdRaEFRTkFJQUVnQWtjRVFDQUJRV0JxSWdFUTNRRU1BUXNMSUFBZ0FqWUNCQ0FBS0FJSUdpQUFLQUlBRURnTEN6OEJBbjhnQUNnQ0FDSUNCRUFnQUNnQ0JDRUJBMEFnQVNBQ1J3UkFJQUZCZEdvaUFSQlZEQUVMQ3lBQUlBSTJBZ1FnQUNnQ0NCb2dBQ2dDQUJBNEN3dGRBUU4vSUFBb0FnUWlCQ0FBS0FJQUlnSnJRUVYxSWdNZ0FVa0VRQ0FBSUFFZ0Eyc1FqQWtGSUFNZ0FVc0VRQ0FCUVFWMElBSnFJUUlnQkNFQkEwQWdBU0FDUndSQUlBRkJZR29pQVJEZEFRd0JDd3NnQUNBQ05nSUVDd3NMY3dFQmZ5QUFRUUEyQWd3Z0FDQUROZ0lRSUFFRVFDQUJRZFdxMWFvQlN3UkFRUWdRQlNJREVJZ0JJQU5CdElzQk5nSUFJQU5CK1BjQVFSWVFCQVVnQVVFTWJCQlJJUVFMQ3lBQUlBUTJBZ0FnQUNBQ1FReHNJQVJxSWdJMkFnZ2dBQ0FDTmdJRUlBQWdBVUVNYkNBRWFqWUNEQXMvQVFKL0lBQW9BZ1FoQWlBQUtBSUlJUUVEUUNBQklBSkhCRUFnQUNBQlFYOXFJZ0UyQWdnTUFRc0xJQUFvQWdBaUFRUkFJQUFvQWd3YUlBRVFPQXNMamdFQkJIOGdBVUVFYWlJREtBSUFJQUFvQWdRZ0FDZ0NBQ0lFYXlJRmF5RUNJQU1nQWpZQ0FDQUZRUUJLQkVBZ0FpQUVJQVVRVEJvZ0F5Z0NBQ0VDQ3lBQUtBSUFJUVFnQUNBQ05nSUFJQU1nQkRZQ0FDQUFLQUlFSVFJZ0FDQUJLQUlJTmdJRUlBRWdBallDQ0NBQUtBSUlJUUlnQUNBQktBSU1OZ0lJSUFFZ0FqWUNEQ0FCSUFNb0FnQTJBZ0FMUUFBZ0FFRUFOZ0lNSUFBZ0F6WUNFQ0FBSUFFRWZ5QUJFRkVGUVFBTElnTTJBZ0FnQUNBQ0lBTnFJZ0kyQWdnZ0FDQUNOZ0lFSUFBZ0FTQURhallDREFzOUFRSi9JQUFvQWdBaUFnUkFJQUFvQWdRaEFRTkFJQUVnQWtjRVFDQUJRV3hxSVFFTUFRc0xJQUFnQWpZQ0JDQUFLQUlJR2lBQUtBSUFFRGdMQzlRQ0FnWi9BbjBqQmlFR0l3WkJJR29rQmlBR1FSUnFJUWNnQmtFUWFpRUpJQVpCREdvaEN5QUdRUWhxSVFnZ0JrRUVhaUVLSUFRcUFnZ2hEQ0FFS2dJTUlRMGdCUUovQWtBQ1FBSkFJQUZGRFFBZ0FDQUJJQXdnRFNBSElBZ1E1UUZCQUVnTkFDQUZJQWNxQWdBUVF6WUNBQ0FGSUFncUFnQVFRellDQkNBQ1JRMEJJQUFnQWlBTUlBMGdDU0FLRU9VQlFRQklEUUVnQlNBSEtnSUFRd0FBQUVDVUlBa3FBZ0NURUVNMkFnZ2dCU0FJS2dJQVF3QUFBRUNVSUFvcUFnQ1RFRU0yQWd3Z0EwVU5BaUFBSUFNZ0RDQU5JQXNnQmhEbEFVRUFTQTBDSUFVZ0N5b0NBQ0FIS2dJQVF3QUFRRUNVSUFrcUFnQkRBQUJBUUpTVGtoQkROZ0lRSUFZcUFnQWdDQ29DQUVNQUFFQkFsQ0FLS2dJQVF3QUFRRUNVazVJUVF3d0RDeUFGUVg4MkFnQWdCVUYvTmdJRUN5QUZRWDgyQWdnZ0JVRi9OZ0lNQ3lBRlFYODJBaEJCZndzMkFoUWdCaVFHQzA0QkFuMGdBU29DQUNBQUtnSUFreUlFSUFTVUlBRXFBZ1FnQUNvQ0JKTWlCQ0FFbEpLUklnVkRBQUFBQUZ3RVFDQUNJQVFnQlpVNEFnQWdBeUFCS2dJQUlBQXFBZ0NUSUFXVk9BSUFDd3NHQUVFYUVBSUxwd0VCQW45QmJ5QUJheUFDU1FSQUVBQUxJQUFzQUF0QkFFZ0VmeUFBS0FJQUJTQUFDeUVGSUFGQjUvLy8vd2RKQkg5QkN5QUJRUUYwSWdZZ0FTQUNhaUlDSUFJZ0Jra2JJZ0pCRUdwQmNIRWdBa0VMU1JzRlFXOExJZ1lRVVNFQ0lBUUVRQ0FDSUFVZ0JCQ29BUXNnQXlBRWF5SURCRUFnQWlBRWFpQUVJQVZxSUFNUXFBRUxJQUZCQ2tjRVFDQUZFRGdMSUFBZ0FqWUNBQ0FBSUFaQmdJQ0FnSGh5TmdJSUN6NEFJQUJDQURjQ0FDQUFRUUEyQWdnZ0FTd0FDMEVBU0FSQUlBQWdBU2dDQUNBQktBSUVFSDRGSUFBZ0FTa0NBRGNDQUNBQUlBRW9BZ2cyQWdnTEN3UUFRUUVMQ2dBZ0FCQTRJQUVRT0FzTEFDQUVJQUkyQWdCQkF3c2ZBUUYvSUFBb0FnQWlBUVIvSUFFUU9DQUFRUUEyQWdCQkFBVkJmd3NhQzZNQkFRTi9RWWdCRUVRaUFRUkFBMEFnQWtFRFJ3UkFRUUFoQXdOQUlBTkJCRWNFUUNBQ1FRVjBJQUZxSUFOQkEzUnFJQUpCQlhRZ0FHb2dBMEVEZEdvckF3QTVBd0FnQTBFQmFpRUREQUVMQ3lBQ1FRRnFJUUlNQVFzTElBRkJDallDWUNBQlJBQUFBS0NabWJrL09RTm9JQUZFQUFBQWdCU3U3ejg1QTNBZ0FVUUFBQUFBQUFBUVFEa0RlQ0FCUkFBQUFBQUFBT0EvT1FPQUFRVkJBQ0VCQ3lBQkM3OEVBUUYvSUFBZ0JVWUVmeUFCTEFBQUJIOGdBVUVBT2dBQUlBUWdCQ2dDQUNJQVFRRnFOZ0lBSUFCQkxqb0FBQ0FIS0FJRUlBY3NBQXNpQUVIL0FYRWdBRUVBU0JzRVFDQUpLQUlBSWdBZ0NHdEJvQUZJQkVBZ0NpZ0NBQ0VCSUFrZ0FFRUVhallDQUNBQUlBRTJBZ0FMQzBFQUJVRi9Dd1VDZnlBQUlBWkdCRUFnQnlnQ0JDQUhMQUFMSWdWQi93RnhJQVZCQUVnYkJFQkJmeUFCTEFBQVJRMENHa0VBSUFrb0FnQWlBQ0FJYTBHZ0FVNE5BaG9nQ2lnQ0FDRUJJQWtnQUVFRWFqWUNBQ0FBSUFFMkFnQWdDa0VBTmdJQVFRQU1BZ3NMSUF0QmdBRnFJUXhCQUNFRkEzOGdCVUVnUmdSL0lBd0ZJQVZCQVdvaEJpQUFJQVZCQW5RZ0Myb2lCU2dDQUVZRWZ5QUZCU0FHSVFVTUFnc0xDeUFMYXlJQVFmd0FTZ1IvUVg4RklBQkJBblZCOE84QWFpd0FBQ0VGQWtBQ1FBSkFBa0FnQUVHb2Yyb2lCa0VDZGlBR1FSNTBjZzRFQVFFQUFBSUxJQVFvQWdBaUFDQURSd1JBUVg4Z0FFRi9haXdBQUVIZkFIRWdBaXdBQUVIL0FIRkhEUVVhQ3lBRUlBQkJBV28yQWdBZ0FDQUZPZ0FBUVFBTUJBc2dBa0hRQURvQUFBd0JDeUFGUWQ4QWNTSURJQUlzQUFCR0JFQWdBaUFEUVlBQmNqb0FBQ0FCTEFBQUJFQWdBVUVBT2dBQUlBY29BZ1FnQnl3QUN5SUJRZjhCY1NBQlFRQklHd1JBSUFrb0FnQWlBU0FJYTBHZ0FVZ0VRQ0FLS0FJQUlRSWdDU0FCUVFScU5nSUFJQUVnQWpZQ0FBc0xDd3NMSUFRZ0JDZ0NBQ0lCUVFGcU5nSUFJQUVnQlRvQUFDQUFRZFFBVEFSQUlBb2dDaWdDQUVFQmFqWUNBQXRCQUFzTEN3dWtBUUVDZnlNR0lRVWpCa0VRYWlRR0lBVWdBUkE3SUFWQm9NNERFRG9pQVNnQ0FDZ0NNQ0VHSUFGQjhPOEFRWkR3QUNBQ0lBWkJEM0ZCaWdKcUVRa0FHaUFGUWFqT0F4QTZJZ0VvQWdBb0Fnd2hBaUFESUFFZ0FrSC9BSEZCQ0dvUkFBQTJBZ0FnQVNnQ0FDZ0NFQ0VDSUFRZ0FTQUNRZjhBY1VFSWFoRUFBRFlDQUNBQktBSUFLQUlVSVFJZ0FDQUJJQUpCUDNGQnNnVnFFUU1BSUFVUVBDQUZKQVlMVWdJQ2Z3RjhJQUFvQWdRaUF5QUJLQUlFUndSQVFRQVFBUXNEUUNBQ0lBTklCRUFnQkNBQUtBSUFJQUpCQTNScUt3TUFJQUVvQWdBZ0FrRURkR29yQXdDaW9DRUVJQUpCQVdvaEFnd0JDd3NnQkFzM0FRSi9RUWdRUkNJQkJFQWdBU0FBUVFOMEVFUWlBallDQUNBQ0JFQWdBU0FBTmdJRUJTQUJFRGhCQUNFQkN3VkJBQ0VCQ3lBQkM5VUVBUUYvSUFCQi93RnhJQVZCL3dGeFJnUi9JQUVzQUFBRWZ5QUJRUUE2QUFBZ0JDQUVLQUlBSWdCQkFXbzJBZ0FnQUVFdU9nQUFJQWNvQWdRZ0J5d0FDeUlBUWY4QmNTQUFRUUJJR3dSQUlBa29BZ0FpQUNBSWEwR2dBVWdFUUNBS0tBSUFJUUVnQ1NBQVFRUnFOZ0lBSUFBZ0FUWUNBQXNMUVFBRlFYOExCUUovSUFCQi93RnhJQVpCL3dGeFJnUkFJQWNvQWdRZ0J5d0FDeUlGUWY4QmNTQUZRUUJJR3dSQVFYOGdBU3dBQUVVTkFocEJBQ0FKS0FJQUlnQWdDR3RCb0FGT0RRSWFJQW9vQWdBaEFTQUpJQUJCQkdvMkFnQWdBQ0FCTmdJQUlBcEJBRFlDQUVFQURBSUxDeUFMUVNCcUlReEJBQ0VGQTM4Z0JVRWdSZ1IvSUF3RklBVkJBV29oQmlBRklBdHFJZ1V0QUFBZ0FFSC9BWEZHQkg4Z0JRVWdCaUVGREFJTEN3c2dDMnNpQlVFZlNnUi9RWDhGSUFWQjhPOEFhaXdBQUNFQUFrQUNRQUpBSUFWQkZtc09CQUVCQUFBQ0N5QUVLQUlBSWdFZ0EwY0VRRUYvSUFGQmYyb3NBQUJCM3dCeElBSXNBQUJCL3dCeFJ3MEVHZ3NnQkNBQlFRRnFOZ0lBSUFFZ0FEb0FBRUVBREFNTElBSkIwQUE2QUFBZ0JDQUVLQUlBSWdGQkFXbzJBZ0FnQVNBQU9nQUFRUUFNQWdzZ0FFSGZBSEVpQXlBQ0xBQUFSZ1JBSUFJZ0EwR0FBWEk2QUFBZ0FTd0FBQVJBSUFGQkFEb0FBQ0FIS0FJRUlBY3NBQXNpQVVIL0FYRWdBVUVBU0JzRVFDQUpLQUlBSWdFZ0NHdEJvQUZJQkVBZ0NpZ0NBQ0VDSUFrZ0FVRUVhallDQUNBQklBSTJBZ0FMQ3dzTElBUWdCQ2dDQUNJQlFRRnFOZ0lBSUFFZ0FEb0FBRUVBSUFWQkZVb05BUm9nQ2lBS0tBSUFRUUZxTmdJQVFRQUxDd3NMcEFFQkFuOGpCaUVGSXdaQkVHb2tCaUFGSUFFUU95QUZRWURPQXhBNklnRW9BZ0FvQWlBaEJpQUJRZkR2QUVHUThBQWdBaUFHUVE5eFFZb0NhaEVKQUJvZ0JVR1F6Z01RT2lJQktBSUFLQUlNSVFJZ0F5QUJJQUpCL3dCeFFRaHFFUUFBT2dBQUlBRW9BZ0FvQWhBaEFpQUVJQUVnQWtIL0FIRkJDR29SQUFBNkFBQWdBU2dDQUNnQ0ZDRUNJQUFnQVNBQ1FUOXhRYklGYWhFREFDQUZFRHdnQlNRR0N3c0FJQUFRbVFJZ0FCQTRDd3NBSUFBUW1nSWdBQkE0Q3dzQUlBQVEwQVFnQUJBNEN3c0FJQUFRMWdRZ0FCQTRDeE1BSUFBZ0E2SWdBU0FFb3FBZ0FpQUZvcUFMVndFRGZ5QUFLQUlFSWdkQkNIVWhCaUFIUVFGeEJFQWdBeWdDQUNBR2FpZ0NBQ0VHQ3lBQUtBSUFJZ0FvQWdBb0FoUWhDQ0FBSUFFZ0FpQURJQVpxSUFSQkFpQUhRUUp4R3lBRklBaEJCM0ZCMmdacUVRd0FDeFFBSUFBZ0FLSWdBU0FCb3FBZ0FpQUNvcUNmQzZjQkFDQUFRUUU2QURVZ0FpQUFLQUlFUmdSQUFrQWdBRUVCT2dBMElBQW9BaEFpQWtVRVFDQUFJQUUyQWhBZ0FDQUROZ0lZSUFCQkFUWUNKQ0FBS0FJd1FRRkdJQU5CQVVaeFJRMEJJQUJCQVRvQU5nd0JDeUFCSUFKSEJFQWdBQ0FBS0FJa1FRRnFOZ0lrSUFCQkFUb0FOZ3dCQ3lBQUtBSVlJZ0ZCQWtZRVFDQUFJQU0yQWhnRklBRWhBd3NnQUNnQ01FRUJSaUFEUVFGR2NRUkFJQUJCQVRvQU5nc0xDd3NmQUNBQklBQW9BZ1JHQkVBZ0FDZ0NIRUVCUndSQUlBQWdBallDSEFzTEMxNEJBWDhnQUNnQ0VDSURCRUFDUUNBQklBTkhCRUFnQUNBQUtBSWtRUUZxTmdJa0lBQkJBallDR0NBQVFRRTZBRFlNQVFzZ0FDZ0NHRUVDUmdSQUlBQWdBallDR0FzTEJTQUFJQUUyQWhBZ0FDQUNOZ0lZSUFCQkFUWUNKQXNMNUFJQ0FuOENmU0FBdkNJQlFSOTJJUUlnQVVILy8vLy9CM0VpQVVILy8vL2pCRXNFUUNBQVE5b1B5YjlEMmcvSlB5QUNHeUFCUVlDQWdQd0hTeHNQQ3lBQlFZQ0FnUGNEU1FSQUlBRkJnSUNBekFOSkJIOGdBQThGUVg4TElRRUZJQUNMSVFBZ0FVR0FnT0Q4QTBrRWZTQUJRWUNBd1BrRFNRUjlRUUFoQVNBQVF3QUFBRUNVUXdBQWdMK1NJQUJEQUFBQVFKS1ZCVUVCSVFFZ0FFTUFBSUMva2lBQVF3QUFnRCtTbFFzRklBRkJnSUR3Z0FSSkJIMUJBaUVCSUFCREFBREF2NUlnQUVNQUFNQS9sRU1BQUlBL2twVUZRUU1oQVVNQUFJQy9JQUNWQ3dzaEFBc2dBQ0FBbENJRUlBU1VJUU1nQkNBRElBTkRKYXg4UFpSRERmVVJQcEtVUTZtcXFqNlNsQ0VFSUFORG1NcE12aUFEUTBjUzJqMlVrNVFoQXlBQlFRQklCSDBnQUNBQUlBTWdCSktVa3dVZ0FVRUNkRUhRN0FCcUtnSUFJQUFnQXlBRWtwUWdBVUVDZEVIZzdBQnFLZ0lBa3lBQWs1TWlBQ0FBakNBQ1JSc0xDL3dDQWdOL0FYd2pCaUVESXdaQkVHb2tCaUFBdkNJQlFSOTJJUUlnQVVILy8vLy9CM0VpQVVIYm42VDZBMGtFUUNBQlFZQ0FnTXdEVHdSQUlBQzdFSkVCSVFBTEJRSjlJQUZCMHFmdGd3UkpCRUFnQWtFQVJ5RUNJQUM3SVFRZ0FVSGtsOXVBQkU4RVFFUVlMVVJVK3lFSlFFUVlMVVJVK3lFSndDQUNHeUFFb0pvUWtRRU1BZ3NnQWdSQUlBUkVHQzFFVlBzaCtUK2dFSkFCakF3Q0JTQUVSQmd0UkZUN0lmbS9vQkNRQVF3Q0N3QUxJQUZCMXVPSWh3UkpCRUFnQWtFQVJ5RUNJQUM3SVFRZ0FVSGcyNytGQkU4RVFFUVlMVVJVK3lFWlFFUVlMVVJVK3lFWndDQUNHeUFFb0JDUkFRd0NDeUFDQkVBZ0JFVFNJVE4vZk5rU1FLQVFrQUVNQWdVZ0JFVFNJVE4vZk5rU3dLQVFrQUdNREFJTEFBc2dBQ0FBa3lBQlFmLy8vL3NIU3cwQUdnSkFBa0FDUUFKQUlBQWdBeEQ2QWtFRGNRNERBQUVDQXdzZ0F5c0RBQkNSQVF3REN5QURLd01BRUpBQkRBSUxJQU1yQXdDYUVKRUJEQUVMSUFNckF3QVFrQUdNQ3lFQUN5QURKQVlnQUF2L0FnTURmd0Y5QVh3akJpRURJd1pCRUdva0JpQUF2Q0lCUVI5MklRSWdBVUgvLy8vL0IzRWlBVUhibjZUNkEwa0VmU0FCUVlDQWdNd0RTUVI5UXdBQWdEOEZJQUM3RUpBQkN3VUNmU0FCUWRLbjdZTUVTUVJBSUFKQkFFY2hBaUFBdXlFRklBRkI0NWZiZ0FSTEJFQkVHQzFFVlBzaENVQkVHQzFFVlBzaENjQWdBaHNnQmFBUWtBR01EQUlMSUFJRVFDQUZSQmd0UkZUN0lmay9vQkNSQVF3Q0JVUVlMVVJVK3lINVB5QUZvUkNSQVF3Q0N3QUxJQUZCMXVPSWh3UkpCRUFnQWtFQVJ5RUNJQUZCMzl1L2hRUkxCRUJFR0MxRVZQc2hHVUJFR0MxRVZQc2hHY0FnQWhzZ0FMdWdFSkFCREFJTElBSUVRQ0FBakx0RTBpRXpmM3paRXNDZ0VKRUJEQUlGSUFDN1JOSWhNMzk4MlJMQW9CQ1JBUXdDQ3dBTElBQWdBSk1nQVVILy8vLzdCMHNOQUJvQ1FBSkFBa0FDUUNBQUlBTVErZ0pCQTNFT0F3QUJBZ01MSUFNckF3QVFrQUVNQXdzZ0F5c0RBSm9Ra1FFTUFnc2dBeXNEQUJDUUFZd01BUXNnQXlzREFCQ1JBUXNMSVFRZ0F5UUdJQVFMZHdFQmZ3SkFBa0FnQUEwQVFjVEZBeWdDQUNJQURRQkJBQ0VBREFFTElBQVE5d1FnQUdvaUFDd0FBRVVFUUVIRXhRTkJBRFlDQUVFQUlRQU1BUXRCeE1VRElBQVE3UVFnQUdvaUFUWUNBQ0FCTEFBQUJFQkJ4TVVESUFGQkFXbzJBZ0FnQVVFQU9nQUFCVUhFeFFOQkFEWUNBQXNMSUFBTEtnRUJmaUFBS0FKTUdpQUFFTzhFSWdGQy8vLy8vd2RWQkg5QnBNVURRVDAyQWdCQmZ3VWdBYWNMQ3g0QUlBQW9Ba3dhSUFCQ0FFRUFFSWtESUFBZ0FDZ0NBRUZmY1RZQ0FBdndBUUlHZndKOEl3WWhBeU1HUVJCcUpBWWdBMEVJYWlFRUlBQzhJZ1ZCLy8vLy93ZHhJZ0pCMjUrazdnUkpCSDhnQUxzaUNFU0R5TWx0TUYva1A2SkVBQUFBQUFBQU9FT2dSQUFBQUFBQUFEakRvQ0lKRUhNaEJpQUJJQWdnQ1VRQUFBQlEreUg1UDZLaElBbEVZMklhWWJRUVVUNmlvVGtEQUNBR0JRSi9JQUpCLy8vLyt3ZExCRUFnQVNBQUlBQ1R1emtEQUVFQURBRUxJQVFnQWlBQ1FSZDJRZXArYWlJQ1FSZDBhNzY3T1FNQUlBUWdBeUFDUVFGQkFCRDdBaUVDSUFNckF3QWhDQ0FGUVFCSUJIOGdBU0FJbWprREFFRUFJQUpyQlNBQklBZzVBd0FnQWdzTEN5RUhJQU1rQmlBSEM0TVJBaFovQTN3akJpRU5Jd1pCc0FScUpBWWdEVUhBQW1vaER5QUVRUUowUWZEcEFHb29BZ0FoRGlBQ1FYMXFRUmdRT1NJRlFRQWdCVUVBU2hzaEVTQU9JQU5CZjJvaUIycEJBRTRFUUNBRElBNXFJUWtnRVNBSGF5RUZBMEFnQmtFRGRDQVBhaUFGUVFCSUJIeEVBQUFBQUFBQUFBQUZJQVZCQW5SQmdPb0FhaWdDQUxjTE9RTUFJQVZCQVdvaEJTQUdRUUZxSWdZZ0NVY05BQXNMSUExQjRBTnFJUXdnRFVHZ0FXb2hDaUFSUVdoc0loVWdBa0ZvYW1vaENTQURRUUJLSVFoQkFDRUZBMEFnQ0FSQUlBVWdCMm9oQzBRQUFBQUFBQUFBQUNFYlFRQWhCZ05BSUJzZ0JrRURkQ0FBYWlzREFDQUxJQVpyUVFOMElBOXFLd01Bb3FBaEd5QUdRUUZxSWdZZ0EwY05BQXNGUkFBQUFBQUFBQUFBSVJzTElBVkJBM1FnRFdvZ0d6a0RBQ0FGUVFGcUlRWWdCU0FPU0FSQUlBWWhCUXdCQ3dzZ0NVRUFTaUVTUVJnZ0NXc2hFMEVYSUFscklSWWdDVVVoRnlBRFFRQktJUmdnRGlFRkFrQUNRQU5BQWtBZ0JVRURkQ0FOYWlzREFDRWJJQVZCQUVvaUN3UkFJQVVoQmtFQUlRY0RRQ0FIUVFKMElBeHFJQnNnRzBRQUFBQUFBQUJ3UHFJUWM3Y2lHMFFBQUFBQUFBQndRYUtoRUhNMkFnQWdCa0YvYWlJSVFRTjBJQTFxS3dNQUlCdWdJUnNnQjBFQmFpRUhJQVpCQVVvRVFDQUlJUVlNQVFzTEN5QWJJQWtRbndFaUd5QWJSQUFBQUFBQUFNQS9vcHhFQUFBQUFBQUFJRUNpb1NJYkVITWhCaUFiSUFhM29TRWJBa0FDUUFKQUlCSUVmeUFGUVg5cVFRSjBJQXhxSWdnb0FnQWlFQ0FUZFNFSElBZ2dFQ0FISUJOMGF5SUlOZ0lBSUFnZ0ZuVWhDQ0FHSUFkcUlRWU1BUVVnRndSL0lBVkJmMnBCQW5RZ0RHb29BZ0JCRjNVaENBd0NCU0FiUkFBQUFBQUFBT0EvWmdSL1FRSWhDQXdFQlVFQUN3c0xJUWdNQWdzZ0NFRUFTZzBBREFFTElBWWhHaUFMQkg5QkFDRUdRUUFoQ3dOL0lBdEJBblFnREdvaUdTZ0NBQ0VRQWtBQ1FDQUdCSDlCLy8vL0J5RVVEQUVGSUJBRWYwRUJJUVpCZ0lDQUNDRVVEQUlGUVFBTEN5RUdEQUVMSUJrZ0ZDQVFhellDQUFzZ0MwRUJhaUlMSUFWSERRQWdCZ3NGUVFBTElRc2dFZ1JBQWtBQ1FBSkFJQWxCQVdzT0FnQUJBZ3NnQlVGL2FrRUNkQ0FNYWlJR0lBWW9BZ0JCLy8vL0EzRTJBZ0FNQVFzZ0JVRi9ha0VDZENBTWFpSUdJQVlvQWdCQi8vLy9BWEUyQWdBTEN5QWFRUUZxSVFZZ0NFRUNSZ1JBUkFBQUFBQUFBUEEvSUJ1aElSc2dDd1JBSUJ0RUFBQUFBQUFBOEQ4Z0NSQ2ZBYUVoR3d0QkFpRUlDd3NnRzBRQUFBQUFBQUFBQUdJTkFpQUZJQTVLQkVCQkFDRUxJQVVoQndOQUlBc2dCMEYvYWlJSFFRSjBJQXhxS0FJQWNpRUxJQWNnRGtvTkFBc2dDdzBCQzBFQklRWURRQ0FHUVFGcUlRY2dEaUFHYTBFQ2RDQU1haWdDQUVVRVFDQUhJUVlNQVFzTElBVWdCbW9oQndOQUlBTWdCV29pQ0VFRGRDQVBhaUFGUVFGcUlnWWdFV3BCQW5SQmdPb0FhaWdDQUxjNUF3QWdHQVJBUkFBQUFBQUFBQUFBSVJ0QkFDRUZBMEFnR3lBRlFRTjBJQUJxS3dNQUlBZ2dCV3RCQTNRZ0Qyb3JBd0Npb0NFYklBVkJBV29pQlNBRFJ3MEFDd1ZFQUFBQUFBQUFBQUFoR3dzZ0JrRURkQ0FOYWlBYk9RTUFJQVlnQjBnRVFDQUdJUVVNQVFzTElBY2hCUXdCQ3dzZ0NTRUFBMzhnQUVGb2FpRUFJQVZCZjJvaUJVRUNkQ0FNYWlnQ0FFVU5BQ0FBSVFJZ0JRc2hBQXdCQ3lBYlFRQWdDV3NRbndFaUcwUUFBQUFBQUFCd1FXWUVmeUFGUVFKMElBeHFJQnNnRzBRQUFBQUFBQUJ3UHFJUWN5SUR0MFFBQUFBQUFBQndRYUtoRUhNMkFnQWdBaUFWYWlFQ0lBVkJBV29GSUFraEFpQWJFSE1oQXlBRkN5SUFRUUowSUF4cUlBTTJBZ0FMUkFBQUFBQUFBUEEvSUFJUW53RWhHeUFBUVg5S0lnY0VRQ0FBSVFJRFFDQUNRUU4wSUExcUlCc2dBa0VDZENBTWFpZ0NBTGVpT1FNQUlCdEVBQUFBQUFBQWNENmlJUnNnQWtGL2FpRURJQUpCQUVvRVFDQURJUUlNQVFzTElBY0VRQ0FBSVFJRFFDQUFJQUpySVFsQkFDRURSQUFBQUFBQUFBQUFJUnNEUUNBYklBTkJBM1JCa093QWFpc0RBQ0FDSUFOcVFRTjBJQTFxS3dNQW9xQWhHeUFEUVFGcUlRVWdBeUFPVGlBRElBbFBja1VFUUNBRklRTU1BUXNMSUFsQkEzUWdDbW9nR3prREFDQUNRWDlxSVFNZ0FrRUFTZ1JBSUFNaEFnd0JDd3NMQ3dKQUFrQUNRQUpBSUFRT0JBQUJBUUlEQ3lBSEJFQkVBQUFBQUFBQUFBQWhHd05BSUJzZ0FFRURkQ0FLYWlzREFLQWhHeUFBUVg5cUlRSWdBRUVBU2dSQUlBSWhBQXdCQ3dzRlJBQUFBQUFBQUFBQUlSc0xJQUVnRzVvZ0d5QUlHemtEQUF3Q0N5QUhCRUJFQUFBQUFBQUFBQUFoR3lBQUlRSURRQ0FiSUFKQkEzUWdDbW9yQXdDZ0lSc2dBa0YvYWlFRElBSkJBRW9FUUNBRElRSU1BUXNMQlVRQUFBQUFBQUFBQUNFYkN5QUJJQnNnRzVvZ0NFVWlCQnM1QXdBZ0Npc0RBQ0Fib1NFYklBQkJBVTRFUUVFQklRSURRQ0FiSUFKQkEzUWdDbW9yQXdDZ0lSc2dBa0VCYWlFRElBQWdBa2NFUUNBRElRSU1BUXNMQ3lBQklCc2dHNW9nQkJzNUF3Z01BUXNnQUVFQVNnUkFJQUFpQWtFRGRDQUthaXNEQUNFYkEwQWdBa0YvYWlJRFFRTjBJQXBxSWdRckF3QWlIU0Fib0NFY0lBSkJBM1FnQ21vZ0d5QWRJQnlob0RrREFDQUVJQnc1QXdBZ0FrRUJTZ1JBSUFNaEFpQWNJUnNNQVFzTElBQkJBVW9pQkFSQUlBQWlBa0VEZENBS2Fpc0RBQ0ViQTBBZ0FrRi9haUlEUVFOMElBcHFJZ1VyQXdBaUhTQWJvQ0VjSUFKQkEzUWdDbW9nR3lBZElCeWhvRGtEQUNBRklCdzVBd0FnQWtFQ1NnUkFJQU1oQWlBY0lSc01BUXNMSUFRRVFFUUFBQUFBQUFBQUFDRWJBMEFnR3lBQVFRTjBJQXBxS3dNQW9DRWJJQUJCZjJvaEFpQUFRUUpLQkVBZ0FpRUFEQUVMQ3dWRUFBQUFBQUFBQUFBaEd3c0ZSQUFBQUFBQUFBQUFJUnNMQlVRQUFBQUFBQUFBQUNFYkN5QUtLd01BSVJ3Z0NBUkFJQUVnSEpvNUF3QWdBU0FLS3dNSW1qa0RDQ0FCSUJ1YU9RTVFCU0FCSUJ3NUF3QWdBU0FLS3dNSU9RTUlJQUVnR3prREVBc0xJQTBrQmlBR1FRZHhDNEFKQXdoL0FYNEVmQ01HSVFRakJrRXdhaVFHSUFSQkVHb2hCU0FBdlNJS1FqK0lweUVHQW44Q1FDQUtRaUNJcHlJQ1FmLy8vLzhIY1NJRFFmdlV2WUFFU1FSL0lBSkIvLzgvY1VIN3d5UkdEUUVnQmtFQVJ5RUNJQU5CL2JLTGdBUkpCSDhnQWdSL0lBRWdBRVFBQUVCVSt5SDVQNkFpQUVReFkySWFZYlRRUGFBaUN6a0RBQ0FCSUFBZ0M2RkVNV05pR21HMDBEMmdPUU1JUVg4RklBRWdBRVFBQUVCVSt5SDV2NkFpQUVReFkySWFZYlRRdmFBaUN6a0RBQ0FCSUFBZ0M2RkVNV05pR21HMDBMMmdPUU1JUVFFTEJTQUNCSDhnQVNBQVJBQUFRRlQ3SVFsQW9DSUFSREZqWWhwaHRPQTlvQ0lMT1FNQUlBRWdBQ0FMb1VReFkySWFZYlRnUGFBNUF3aEJmZ1VnQVNBQVJBQUFRRlQ3SVFuQW9DSUFSREZqWWhwaHRPQzlvQ0lMT1FNQUlBRWdBQ0FMb1VReFkySWFZYlRndmFBNUF3aEJBZ3NMQlFKL0lBTkJ2SXp4Z0FSSkJFQWdBMEc5KzllQUJFa0VRQ0FEUWZ5eXk0QUVSZzBFSUFZRVFDQUJJQUJFQUFBd2YzelpFa0NnSWdCRXlwU1RwNUVPNlQyZ0lnczVBd0FnQVNBQUlBdWhSTXFVazZlUkR1azlvRGtEQ0VGOURBTUZJQUVnQUVRQUFEQi9mTmtTd0tBaUFFVEtsSk9ua1E3cHZhQWlDemtEQUNBQklBQWdDNkZFeXBTVHA1RU82YjJnT1FNSVFRTU1Bd3NBQlNBRFFmdkQ1SUFFUmcwRUlBWUVRQ0FCSUFCRUFBQkFWUHNoR1VDZ0lnQkVNV05pR21HMDhEMmdJZ3M1QXdBZ0FTQUFJQXVoUkRGallocGh0UEE5b0RrRENFRjhEQU1GSUFFZ0FFUUFBRUJVK3lFWndLQWlBRVF4WTJJYVliVHd2YUFpQ3prREFDQUJJQUFnQzZGRU1XTmlHbUcwOEwyZ09RTUlRUVFNQXdzQUN3QUxJQU5CKzhQa2lRUkpEUUlnQTBILy83Ly9CMHNFUUNBQklBQWdBS0VpQURrRENDQUJJQUE1QXdCQkFBd0JDeUFLUXYvLy8vLy8vLzhIZzBLQWdJQ0FnSUNBc01FQWhMOGhBRUVBSVFJRFFDQUNRUU4wSUFWcUlBQVFjN2NpQ3prREFDQUFJQXVoUkFBQUFBQUFBSEJCb2lFQUlBSkJBV29pQWtFQ1J3MEFDeUFGSUFBNUF4QWdBRVFBQUFBQUFBQUFBR0VFUUVFQklRSURRQ0FDUVg5cUlRY2dBa0VEZENBRmFpc0RBRVFBQUFBQUFBQUFBR0VFUUNBSElRSU1BUXNMQlVFQ0lRSUxJQVVnQkNBRFFSUjJRZXAzYWlBQ1FRRnFRUUVRK3dJaEFpQUVLd01BSVFBZ0JnUi9JQUVnQUpvNUF3QWdBU0FFS3dNSW1qa0RDRUVBSUFKckJTQUJJQUE1QXdBZ0FTQUVLd01JT1FNSUlBSUxDd3NNQVFzZ0FFU0R5TWx0TUYva1A2SkVBQUFBQUFBQU9FT2dSQUFBQUFBQUFEakRvQ0lNRUhNaENDQUJJQUFnREVRQUFFQlUreUg1UDZLaElnc2dERVF4WTJJYVliVFFQYUlpQUtFaURUa0RBQ0FEUVJSMklnY2dEYjFDTklpblFmOFBjV3RCRUVvRVFDQU1SSE53QXk2S0dhTTdvaUFMSUFzZ0RFUUFBR0FhWWJUUVBhSWlBS0VpQzZFZ0FLR2hJUUFnQVNBTElBQ2hJZzA1QXdBZ0RFVEJTU0FsbW9ON09hSWdDeUFMSUF4RUFBQUFMb29ab3p1aUlnNmhJZ3loSUE2aG9TRU9JQWNnRGIxQ05JaW5RZjhQY1d0Qk1Vb0VRQ0FCSUF3Z0RxRWlEVGtEQUNBT0lRQWdEQ0VMQ3dzZ0FTQUxJQTJoSUFDaE9RTUlJQWdMSVFrZ0JDUUdJQWtMRmdBZ0FDQUJJQUpDZ0lDQWdJQ0FnSUNBZnhDRUF3dmxDZ0VTZnlBQktBSUFJUVVDZndKQUlBTkZEUUFnQXlnQ0FDSUVSUTBBSUFBRWZ5QURRUUEyQWdBZ0JDRU9JQUFoRHlBQ0lSQWdCU0VJUVRBRklBUWhDU0FGSVFjZ0FpRUxRUm9MREFFTElBQkJBRWNoQTBIb2lRRW9BZ0FvQWdBRVFDQURCRUFnQUNFU0lBSWhFU0FGSVF4QklRd0NCU0FDSVJNZ0JTRVVRUThNQWdzQUN5QURSUVJBSUFVUVlDRUtRVDhNQVFzZ0FnUkFBa0FnQUNFR0lBSWhCQ0FGSVFNRFFDQURMQUFBSWdVRVFDQURRUUZxSVFNZ0JpQUZRZisvQTNFMkFnQWdCRUYvYWlJRVJRMENJQVpCQkdvaEJnd0JDd3NnQmtFQU5nSUFJQUZCQURZQ0FDQUNJQVJySVFwQlB3d0NDd1VnQlNFREN5QUJJQU0yQWdBZ0FpRUtRVDhMSVFNRFFBSkFBa0FDUUFKQUlBTkJEMFlFUUNBVElRTWdGQ0VGQTBBZ0JTd0FBQ0lFUWY4QmNVRi9ha0gvQUVrRWZ5QUZRUU54Qkg4Z0JBVWdCU2dDQUNJR1FmOEJjU0VFSUFZZ0JrSC8vZnQzYW5KQmdJR0NoSGh4Qkg4Z0JBVURRQ0FEUVh4cUlRTWdCVUVFYWlJRktBSUFJZ1FnQkVILy9mdDNhbkpCZ0lHQ2hIaHhSUTBBQ3lBRVFmOEJjUXNMQlNBRUMwSC9BWEVpQkVGL2FrSC9BRWtFUUNBRFFYOXFJUU1nQlVFQmFpRUZEQUVMQ3lBRVFiNSthaUlFUVRKTEJFQWdCU0VFSUFBaEJnd0RCU0FFUVFKMFFkQTBhaWdDQUNFSklBVkJBV29oQnlBRElRdEJHaUVEREFZTEFBVWdBMEVhUmdSQUlBY3RBQUJCQTNZaUEwRndhaUFESUFsQkduVnFja0VIU3dSQUlBQWhBeUFKSVFZZ0J5RUVJQXNoQlF3REJTQUhRUUZxSVFNZ0NVR0FnSUFRY1FSL0lBTXNBQUJCd0FGeFFZQUJSd1JBSUFBaEF5QUpJUVlnQnlFRUlBc2hCUXdGQ3lBSFFRSnFJUU1nQ1VHQWdDQnhCSDhnQXl3QUFFSEFBWEZCZ0FGSEJFQWdBQ0VESUFraEJpQUhJUVFnQ3lFRkRBWUxJQWRCQTJvRklBTUxCU0FEQ3lFVUlBdEJmMm9oRTBFUElRTU1Cd3NBQlNBRFFTRkdCRUFnRVFSQUFrQWdFaUVGSUJFaEF5QU1JUVFEUUFKQUFrQUNRQ0FFTFFBQUlnWkJmMm9pRFVIL0FFOE5BQ0FFUVFOeFJTQURRUVJMY1FSQUFuOENRQU5BSUFRb0FnQWlCaUFHUWYvOSszZHFja0dBZ1lLRWVIRU5BU0FGSUFaQi93RnhOZ0lBSUFVZ0JDMEFBVFlDQkNBRklBUXRBQUkyQWdnZ0JFRUVhaUVOSUFWQkVHb2hCaUFGSUFRdEFBTTJBZ3dnQTBGOGFpSURRUVJMQkVBZ0JpRUZJQTBoQkF3QkN3c2dCaUVGSUEwaUJDd0FBQXdCQ3lBR1FmOEJjUXRCL3dGeElnWkJmMm9oRFF3QkN3d0JDeUFOUWY4QVR3MEJDeUFFUVFGcUlRUWdCU0FHTmdJQUlBTkJmMm9pQTBVTkFpQUZRUVJxSVFVTUFRc0xJQVpCdm41cUlnWkJNa3NFUUNBRklRWU1Cd3NnQmtFQ2RFSFFOR29vQWdBaERpQUZJUThnQXlFUUlBUkJBV29oQ0VFd0lRTU1DUXNGSUF3aEJBc2dBU0FFTmdJQUlBSWhDa0UvSVFNTUJ3VWdBMEV3UmdSQUlBZ3RBQUFpQkVFRGRpSURRWEJxSUFNZ0RrRWFkV3B5UVFkTEJFQWdEeUVESUE0aEJpQUlJUVFnRUNFRkRBVUZBa0FnQ0VFQmFpRUZJQVJCZ0g5cUlBNUJCblJ5SWdOQkFFZ0VRQUpBSUFVdEFBQkJnSDlxSWdSQlAwMEVRQ0FJUVFKcUlRVWdCQ0FEUVFaMGNpSURRUUJPQkVBZ0JTRU1EQUlMSUFVdEFBQkJnSDlxSWdWQlAwMEVRQ0FJUVFOcUlRd2dCU0FEUVFaMGNpRUREQUlMQzBHa3hRTkJHVFlDQUNBSVFYOXFJUlVNQWdzRklBVWhEQXNnRHlBRE5nSUFJQTlCQkdvaEVpQVFRWDlxSVJGQklTRUREQW9MQ3dVZ0EwRS9SZ1JBSUFvUEN3c0xDd3NNQXdzZ0JFRi9haUVFSUFZTkFTQURJUVlnQlNFREN5QUVMQUFBQkg4Z0JnVWdCZ1JBSUFaQkFEWUNBQ0FCUVFBMkFnQUxJQUlnQTJzaENrRS9JUU1NQXdzaEF3dEJwTVVEUVJrMkFnQWdBd1IvSUFRRlFYOGhDa0UvSVFNTUFnc2hGUXNnQVNBVk5nSUFRWDhoQ2tFL0lRTU1BQUFMQUF1a0FRRUZmeU1HSVFVakJrR0FBbW9rQmlBRklRTWdBa0VDVGdSQUFrQWdBa0VDZENBQmFpSUhJQU0yQWdBZ0FBUkFBMEFnQXlBQktBSUFJQUJCZ0FJZ0FFR0FBa2tiSWdRUVRCcEJBQ0VEQTBBZ0EwRUNkQ0FCYWlJR0tBSUFJQU5CQVdvaUEwRUNkQ0FCYWlnQ0FDQUVFRXdhSUFZZ0JpZ0NBQ0FFYWpZQ0FDQUNJQU5IRFFBTElBQWdCR3NpQUVVTkFpQUhLQUlBSVFNTUFBQUxBQXNMQ3lBRkpBWUxPUUVDZnlBQUJFQWdBRUVCY1VVRVFBTkFJQUZCQVdvaEFTQUFRUUYySVFJZ0FFRUNjVVVFUUNBQ0lRQU1BUXNMQ3dWQklDRUJDeUFCQ3lrQkFYOGdBQ2dDQUVGL2FoQ0FBeUlCQkg4Z0FRVWdBQ2dDQkJDQUF5SUFRU0JxUVFBZ0FCc0xDNXNFQVFkL0l3WWhCaU1HUWRBQmFpUUdJQVpCd0FGcUlnUkNBVGNEQUNBQklBSnNJZ2tFUUFKQVFRQWdBbXNoQ0NBR0lBSTJBZ1FnQmlBQ05nSUFRUUloQnlBQ0lnVWhBUU5BSUFkQkFuUWdCbW9nQWlBRmFpQUJhaUlLTmdJQUlBZEJBV29oQnlBS0lBbEpCRUFnQVNFRklBb2hBUXdCQ3dzZ0FDQUphaUFJYWlJQklBQkxCSDhnQVNFSFFRRWhBVUVCSVFVRGZ5QUZRUU54UVFOR0JIOGdBQ0FDSUFNZ0FTQUdFS0lDSUFSQkFoRHlBU0FCUVFKcUJTQUJRWDlxSWdWQkFuUWdCbW9vQWdBZ0J5QUFhMGtFUUNBQUlBSWdBeUFCSUFZUW9nSUZJQUFnQWlBRElBUWdBVUVBSUFZUThRRUxJQUZCQVVZRWZ5QUVRUUVROEFGQkFBVWdCQ0FGRVBBQlFRRUxDeUVCSUFRZ0JDZ0NBRUVCY2lJRk5nSUFJQUFnQW1vaUFDQUhTUTBBSUFFTEJVRUJJUVZCQVFzaEJ5QUFJQUlnQXlBRUlBZEJBQ0FHRVBFQklBQWhBU0FISVFBRFFBSi9Ba0FnQUVFQlJpQUZRUUZHY1FSL0lBUW9BZ1JGRFFRTUFRVWdBRUVDU0EwQklBUkJBaER3QVNBRUlBUW9BZ0JCQjNNMkFnQWdCRUVCRVBJQklBRWdBRUYrYWlJRlFRSjBJQVpxS0FJQWF5QUlhaUFDSUFNZ0JDQUFRWDlxUVFFZ0JoRHhBU0FFUVFFUThBRWdCQ0FFS0FJQVFRRnlJZ2MyQWdBZ0FTQUlhaUlCSUFJZ0F5QUVJQVZCQVNBR0VQRUJJQVVoQUNBSEN3d0JDeUFFSUFRUWdRTWlCUkR5QVNBQklBaHFJUUVnQUNBRmFpRUFJQVFvQWdBTElRVU1BQUFMQUFzTElBWWtCZ3NYQUNBQUVJb0JRUUJISUFCQklISkJuMzlxUVFaSmNndDlBZ0YvQVg0akJpRUVJd1pCa0FGcUpBWWdCRUVBTmdJQUlBUWdBRFlDQkNBRUlBQTJBaXdnQkVGL0lBQkIvLy8vL3dkcUlBQkJBRWdiTmdJSUlBUkJmellDVENBRVFnQVFnZ0VnQkNBQ1FRRWdBeENUQXlFRklBRUVRQ0FCSUFBZ0JDZ0NCQ0FFS1FONHAyb2dCQ2dDQ0d0cU5nSUFDeUFFSkFZZ0JRdmZCUUVKZnlNR0lRVWpCa0dRQW1va0JpQUJMQUFBUlFSQUFrQkJ4djRDRUEwaUFRUkFJQUVzQUFBTkFRc2dBRUVNYkVHZzZRQnFFQTBpQVFSQUlBRXNBQUFOQVF0QnpmNENFQTBpQVFSQUlBRXNBQUFOQVF0QjB2NENJUUVMQ3lBRlFZQUNhaUVHQTM4Q2Z5QUNJQUVnQW1vc0FBQWlBMEVBSUFOQkwwY2JSUTBBR2lBQ1FRRnFJZ0pCRDBrTkFVRVBDd3NoQXdKQUFrQUNRQ0FCTEFBQUlnSkJMa1lFUUVIUy9nSWhBUVVnQVNBRGFpd0FBQVJBUWRMK0FpRUJCU0FDUWNNQVJ3MENDd3NnQVN3QUFVVU5BUXNnQVVIUy9nSVFzd0ZGRFFBZ0FVSGEvZ0lRc3dGRkRRQkJ1TVVES0FJQUlnSUVRQU5BSUFFZ0FrRUlhaEN6QVVVTkF5QUNLQUlZSWdJTkFBc0xRYnpGQXhBYVFiakZBeWdDQUNJQ0JFQUNRQU5BSUFFZ0FrRUlhaEN6QVFSQUlBSW9BaGdpQWtVTkFnd0JDd3RCdk1VREVBNE1Bd3NMQW44Q1FFSHN4QU1vQWdBTkFFSGcvZ0lRRFNJQ1JRMEFJQUlzQUFCRkRRQkIvZ0VnQTJzaENTQURRUUZxSVFvRFFBSkFJQUpCT2hDcUFpSUhMQUFBSWdSQkFFZEJIM1JCSDNVZ0J5QUNhMm9pQ0NBSlNRUi9JQVVnQWlBSUVFd2FJQVVnQ0dvaUFrRXZPZ0FBSUFKQkFXb2dBU0FERUV3YUlBVWdDQ0FLYW1wQkFEb0FBQ0FGSUFZUU5TSUVEUUVnQnl3QUFBVWdCQXNoQWlBSElBSkIvd0Z4UVFCSGFpSUNMQUFBRFFFTUFnc0xRUndRUkNJQ0JIOGdBaUFFTmdJQUlBSWdCaWdDQURZQ0JDQUNRUWhxSWdRZ0FTQURFRXdhSUFNZ0JHcEJBRG9BQUNBQ1FiakZBeWdDQURZQ0dFRzR4UU1nQWpZQ0FDQUNCU0FFSUFZb0FnQVEvQVFNQVFzTUFRdEJIQkJFSWdJRVFDQUNRZkNIQVNnQ0FEWUNBQ0FDUWZTSEFTZ0NBRFlDQkNBQ1FRaHFJZ1FnQVNBREVFd2FJQU1nQkdwQkFEb0FBQ0FDUWJqRkF5Z0NBRFlDR0VHNHhRTWdBallDQUFzZ0Fnc2hBVUc4eFFNUURpQUJRZkNIQVNBQUlBRnlHeUVDREFFTElBQkZCRUFnQVN3QUFVRXVSZ1JBUWZDSEFTRUNEQUlMQzBFQUlRSUxJQVVrQmlBQ0N4Y0FJQUJCQUVjZ0FFSE14QU5IY1NBQVFZeUlBVWR4Q3c0QUlBQVFoZ01FUUNBQUVEZ0xDeDhCQW44Z0FCQmdRUUZxSWdFUVJDSUNCSDhnQWlBQUlBRVFUQVZCQUFzTG5nRUFJQUpCQVVZRVFDQUJJQUFvQWdnZ0FDZ0NCR3VzZlNFQkN3SkFBa0FnQUNnQ0ZDQUFLQUljVFEwQUlBQkJBRUVBSUFBb0FpUkJQM0ZCeWdGcUVRUUFHaUFBS0FJVURRQU1BUXNnQUVFQU5nSVFJQUJCQURZQ0hDQUFRUUEyQWhRZ0FDQUJJQUlnQUNnQ0tFRURjVUdtQTJvUkZBQkNBRk1FZjBGL0JTQUFRUUEyQWdnZ0FFRUFOZ0lFSUFBZ0FDZ0NBRUZ2Y1RZQ0FFRUFDeG9MQzVFQkFnRi9BbjRDUUFKQUlBQzlJZ05DTklnaUJLZEIvdzl4SWdJRVFDQUNRZjhQUmdSQURBTUZEQUlMQUFzZ0FTQUFSQUFBQUFBQUFBQUFZZ1IvSUFCRUFBQUFBQUFBOEVPaUlBRVFpZ01oQUNBQktBSUFRVUJxQlVFQUN6WUNBQXdCQ3lBQklBU25RZjhQY1VHQ2VHbzJBZ0FnQTBMLy8vLy8vLy8vaDRCL2cwS0FnSUNBZ0lDQThEK0V2eUVBQ3lBQUN4RUFJQUFFZnlBQUlBRVFuZ0VGUVFBTEM3NERBd0YvQVg0QmZDQUJRUlJOQkVBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFJQUZCQ1dzT0NnQUJBZ01FQlFZSENBa0tDeUFDS0FJQVFRTnFRWHh4SWdFb0FnQWhBeUFDSUFGQkJHbzJBZ0FnQUNBRE5nSUFEQWtMSUFJb0FnQkJBMnBCZkhFaUFTZ0NBQ0VESUFJZ0FVRUVhallDQUNBQUlBT3NOd01BREFnTElBSW9BZ0JCQTJwQmZIRWlBU2dDQUNFRElBSWdBVUVFYWpZQ0FDQUFJQU90TndNQURBY0xJQUlvQWdCQkIycEJlSEVpQVNrREFDRUVJQUlnQVVFSWFqWUNBQ0FBSUFRM0F3QU1CZ3NnQWlnQ0FFRURha0Y4Y1NJQktBSUFJUU1nQWlBQlFRUnFOZ0lBSUFBZ0EwSC8vd054UVJCMFFSQjFyRGNEQUF3RkN5QUNLQUlBUVFOcVFYeHhJZ0VvQWdBaEF5QUNJQUZCQkdvMkFnQWdBQ0FEUWYvL0EzR3ROd01BREFRTElBSW9BZ0JCQTJwQmZIRWlBU2dDQUNFRElBSWdBVUVFYWpZQ0FDQUFJQU5CL3dGeFFSaDBRUmgxckRjREFBd0RDeUFDS0FJQVFRTnFRWHh4SWdFb0FnQWhBeUFDSUFGQkJHbzJBZ0FnQUNBRFFmOEJjYTAzQXdBTUFnc2dBaWdDQUVFSGFrRjRjU0lCS3dNQUlRVWdBaUFCUVFocU5nSUFJQUFnQlRrREFBd0JDeUFBSUFKQjZRVVJBd0FMQ3d0QUFRSi9JQUFvQWdBc0FBQVFpZ0VFUUFOQUlBQW9BZ0FpQWl3QUFDQUJRUXBzUVZCcWFpRUJJQUFnQWtFQmFqWUNBQ0FDTEFBQkVJb0JEUUFMQ3lBQkN3a0FJQUFnQVJDZkFRc0pBQ0FBSUFFUWpnVUxJZ0FnQUwxQy8vLy8vLy8vLy8vL0FJTWdBYjFDZ0lDQWdJQ0FnSUNBZjRPRXZ3dmdBd0lEZndGK0FuNENRQUpBQWtBQ1FDQUFLQUlFSWdJZ0FDZ0NhRWtFZnlBQUlBSkJBV28yQWdRZ0FpMEFBQVVnQUJCVUN5SUNRU3RyRGdNQUFRQUJDeUFDUVMxR0lRUWdBVUVBUnlBQUtBSUVJZ01nQUNnQ2FFa0VmeUFBSUFOQkFXbzJBZ1FnQXkwQUFBVWdBQkJVQ3lJRFFWQnFJZ0pCQ1V0eEJINGdBQ2dDYUFSK0lBQWdBQ2dDQkVGL2FqWUNCQXdFQlVLQWdJQ0FnSUNBZ0lCL0N3VWdBeUVCREFJTERBTUxJQUlpQVVGUWFpRUNDeUFDUVFsTERRQkJBQ0VDQTBBZ0FVRlFhaUFDUVFwc2FpRUNJQUpCekptejVnQklJQUFvQWdRaUFTQUFLQUpvU1FSL0lBQWdBVUVCYWpZQ0JDQUJMUUFBQlNBQUVGUUxJZ0ZCVUdvaUEwRUtTWEVOQUFzZ0Fxd2hCU0FEUVFwSkJFQURRQ0FCckVKUWZDQUZRZ3ArZkNFRklBQW9BZ1FpQVNBQUtBSm9TUVIvSUFBZ0FVRUJhallDQkNBQkxRQUFCU0FBRUZRTElnRkJVR29pQWtFS1NTQUZRcTZQaGRmSHd1dWpBVk54RFFBTElBSkJDa2tFUUFOQUlBQW9BZ1FpQVNBQUtBSm9TUVIvSUFBZ0FVRUJhallDQkNBQkxRQUFCU0FBRUZRTFFWQnFRUXBKRFFBTEN3c2dBQ2dDYUFSQUlBQWdBQ2dDQkVGL2FqWUNCQXRDQUNBRmZTQUZJQVFiREFFTElBQW9BbWdFUUNBQUlBQW9BZ1JCZjJvMkFnUUxRb0NBZ0lDQWdJQ0FnSDhMQzhrSEFRVi9BbndDUUFKQUFrQUNRQUpBSUFFT0F3QUJBZ01MUWV0K0lRUkJHQ0VGREFNTFFjNTNJUVJCTlNFRkRBSUxRYzUzSVFSQk5TRUZEQUVMUkFBQUFBQUFBQUFBREFFTEEwQWdBQ2dDQkNJQklBQW9BbWhKQkg4Z0FDQUJRUUZxTmdJRUlBRXRBQUFGSUFBUVZBc2lBUkN5QVEwQUN3SkFBa0FDUUNBQlFTdHJEZ01BQVFBQkMwRUJJQUZCTFVaQkFYUnJJUVlnQUNnQ0JDSUJJQUFvQW1oSkJIOGdBQ0FCUVFGcU5nSUVJQUV0QUFBRklBQVFWQXNoQVF3QkMwRUJJUVlMQWtBQ1FBSkFBMzhnQTBIKy9RSnFMQUFBSUFGQklISkdCSDhnQTBFSFNRUkFJQUFvQWdRaUFTQUFLQUpvU1FSL0lBQWdBVUVCYWpZQ0JDQUJMUUFBQlNBQUVGUUxJUUVMSUFOQkFXb2lBMEVJU1EwQlFRZ0ZJQU1MQ3lJRFFmLy8vLzhIY1VFRGF3NEdBUUFBQUFBQ0FBc2dBa0VBUnlJSElBTkJBMHR4QkVBZ0EwRUlSZzBDREFFTElBTkZCRUFDUUVFQUlRTURmeUFEUWJ6K0Ftb3NBQUFnQVVFZ2NrY05BU0FEUVFKSkJFQWdBQ2dDQkNJQklBQW9BbWhKQkg4Z0FDQUJRUUZxTmdJRUlBRXRBQUFGSUFBUVZBc2hBUXNnQTBFQmFpSURRUU5KRFFCQkF3c2hBd3NMQWtBQ1FBSkFJQU1PQkFFQ0FnQUNDeUFBS0FJRUlnRWdBQ2dDYUVrRWZ5QUFJQUZCQVdvMkFnUWdBUzBBQUFVZ0FCQlVDMEVvUndSQUl3RWdBQ2dDYUVVTkJSb2dBQ0FBS0FJRVFYOXFOZ0lFSXdFTUJRdEJBU0VCQTBCQkFDQUFLQUlFSWdJZ0FDZ0NhRWtFZnlBQUlBSkJBV28yQWdRZ0FpMEFBQVVnQUJCVUN5SUNRVkJxUVFwSklBSkJ2MzlxUVJwSmNrVWdBa0hmQUVZZ0FrR2ZmMnBCR2tseUcwVUVRQ0FCUVFGcUlRRU1BUXNMSXdFZ0FrRXBSZzBFR2lBQUtBSm9SU0lDUlFSQUlBQWdBQ2dDQkVGL2FqWUNCQXNnQjBVRVFFR2t4UU5CSERZQ0FDQUFRZ0FRZ2dGRUFBQUFBQUFBQUFBTUJRc2pBU0FCUlEwRUdnTkFJQUpGQkVBZ0FDQUFLQUlFUVg5cU5nSUVDeU1CSUFGQmYyb2lBVVVOQlJvTUFBQUxBQXNnQUNBQlFUQkdCSDhnQUNnQ0JDSUJJQUFvQW1oSkJIOGdBQ0FCUVFGcU5nSUVJQUV0QUFBRklBQVFWQXRCSUhKQitBQkdCRUFnQUNBRklBUWdCaUFDRUpBRkRBVUxJQUFvQW1nRVFDQUFJQUFvQWdSQmYybzJBZ1FMUVRBRklBRUxJQVVnQkNBR0lBSVFqd1VNQXdzZ0FDZ0NhQVJBSUFBZ0FDZ0NCRUYvYWpZQ0JBdEJwTVVEUVJ3MkFnQWdBRUlBRUlJQlJBQUFBQUFBQUFBQURBSUxJQUFvQW1oRklnRkZCRUFnQUNBQUtBSUVRWDlxTmdJRUN5QUNRUUJISUFOQkEwdHhCRUFEUUNBQlJRUkFJQUFnQUNnQ0JFRi9hallDQkFzZ0EwRi9haUlEUVFOTERRQUxDd3NnQnJJakFyYVV1d3NMdmdzQ0JYOEZmaUFCUVNSTEJFQkJwTVVEUVJ3MkFnQkNBQ0VEQlFKQUEwQWdBQ2dDQkNJRUlBQW9BbWhKQkg4Z0FDQUVRUUZxTmdJRUlBUXRBQUFGSUFBUVZBc2lCQkN5QVEwQUN3SkFBa0FnQkVFcmF3NERBQUVBQVFzZ0JFRXRSa0VmZEVFZmRTRUhJQUFvQWdRaUJDQUFLQUpvU1FSL0lBQWdCRUVCYWpZQ0JDQUVMUUFBQlNBQUVGUUxJUVFNQUFzZ0FVVWhCUUpBQWtBQ1FDQUJRUkJ5UVJCR0lBUkJNRVp4QkVBQ1FDQUFLQUlFSWdRZ0FDZ0NhRWtFZnlBQUlBUkJBV28yQWdRZ0JDMEFBQVVnQUJCVUN5SUVRU0J5UWZnQVJ3UkFJQVVFUUNBRUlRSkJDQ0VCREFRRklBUWhBZ3dDQ3dBTElBQW9BZ1FpQVNBQUtBSm9TUVIvSUFBZ0FVRUJhallDQkNBQkxRQUFCU0FBRUZRTElnRkJ3ZFFBYWkwQUFFRVBTZ1JBSUFBb0FtaEZJZ0ZGQkVBZ0FDQUFLQUlFUVg5cU5nSUVDeUFDUlFSQUlBQkNBQkNDQVVJQUlRTU1Cd3NnQVFSQVFnQWhBd3dIQ3lBQUlBQW9BZ1JCZjJvMkFnUkNBQ0VEREFZRklBRWhBa0VRSVFFTUF3c0FDd1ZCQ2lBQklBVWJJZ0VnQkVIQjFBQnFMUUFBU3dSL0lBUUZJQUFvQW1nRVFDQUFJQUFvQWdSQmYybzJBZ1FMSUFCQ0FCQ0NBVUdreFFOQkhEWUNBRUlBSVFNTUJRc2hBZ3NnQVVFS1J3MEFJQUpCVUdvaUFrRUtTUVJBUVFBaEFRTkFJQUZCQ213Z0Ftb2hBU0FBS0FJRUlnSWdBQ2dDYUVrRWZ5QUFJQUpCQVdvMkFnUWdBaTBBQUFVZ0FCQlVDeUlFUVZCcUlnSkJDa2tnQVVHWnMrYk1BVWx4RFFBTElBR3RJUWtnQWtFS1NRUkFJQVFoQVFOQUlBbENDbjRpQ2lBQ3JDSUxRbitGVmdSQVFRb2hBZ3dGQ3lBS0lBdDhJUWtnQUNnQ0JDSUJJQUFvQW1oSkJIOGdBQ0FCUVFGcU5nSUVJQUV0QUFBRklBQVFWQXNpQVVGUWFpSUNRUXBKSUFsQ21yUG16Sm16NXN3WlZIRU5BQXNnQWtFSlRRUkFRUW9oQWd3RUN3c0xEQUlMSUFFZ0FVRi9hbkZGQkVBZ0FVRVhiRUVGZGtFSGNVR0gvZ0pxTEFBQUlRWWdBU0FDUWNIVUFHb3NBQUFpQ0VIL0FYRWlCVXNFUUVFQUlRUWdCU0VDQTBBZ0JDQUdkQ0FDY2lJRVFZQ0FnTUFBU1NBQklBQW9BZ1FpQWlBQUtBSm9TUVIvSUFBZ0FrRUJhallDQkNBQ0xRQUFCU0FBRUZRTElnVkJ3ZFFBYWl3QUFDSUlRZjhCY1NJQ1MzRU5BQXNnQkswaENTQUZJUVFnQWlFRkJTQUNJUVFMSUFnaEFpQUJJQVZOUW44Z0JxMGlDb2dpQ3lBSlZISUVRQ0FCSVFJZ0JDRUJEQUlMQTBBZ0FTQUFLQUlFSWdRZ0FDZ0NhRWtFZnlBQUlBUkJBV28yQWdRZ0JDMEFBQVVnQUJCVUN5SUZRY0hVQUdvc0FBQWlCRUgvQVhGTklBSkIvd0Z4clNBSklBcUdoQ0lKSUF0V2NnUkFJQUVoQWlBRklRRU1Bd1VnQkNFQ0RBRUxBQUFMQUFzZ0FTQUNRY0hVQUdvc0FBQWlCa0gvQVhFaUJVc0VRRUVBSVFRZ0JTRUNBMEFnQVNBRWJDQUNhaUlFUWNmajhUaEpJQUVnQUNnQ0JDSUNJQUFvQW1oSkJIOGdBQ0FDUVFGcU5nSUVJQUl0QUFBRklBQVFWQXNpQlVIQjFBQnFMQUFBSWdaQi93RnhJZ0pMY1EwQUN5QUVyU0VKSUFVaEJDQUNJUVVGSUFJaEJBc2dCaUVDSUFHdElRb2dBU0FGU3dSL1FuOGdDaEQyQVNFTEEzOGdDU0FMVmdSQUlBRWhBaUFFSVFFTUF3c2dDU0FLZmlJTUlBSkIvd0Z4clNJTlFuK0ZWZ1JBSUFFaEFpQUVJUUVNQXdzZ0RDQU5mQ0VKSUFFZ0FDZ0NCQ0lDSUFBb0FtaEpCSDhnQUNBQ1FRRnFOZ0lFSUFJdEFBQUZJQUFRVkFzaUJFSEIxQUJxTEFBQUlnSkIvd0Z4U3cwQUlBRWhBaUFFQ3dVZ0FTRUNJQVFMSVFFTElBSWdBVUhCMUFCcUxRQUFTd1JBQTBBZ0FpQUFLQUlFSWdFZ0FDZ0NhRWtFZnlBQUlBRkJBV28yQWdRZ0FTMEFBQVVnQUJCVUMwSEIxQUJxTFFBQVN3MEFDMEdreFFOQnhBQTJBZ0FnQjBFQUlBTkNBWU5RR3lFSElBTWhDUXNMSUFBb0FtZ0VRQ0FBSUFBb0FnUkJmMm8yQWdRTElBa2dBMW9FUUNBSFFRQkhJQU5DQVlOQ0FGSnlSUVJBUWFURkEwSEVBRFlDQUNBRFFuOThJUU1NQWdzZ0NTQURWZ1JBUWFURkEwSEVBRFlDQUF3Q0N3c2dDU0FIckNJRGhTQURmU0VEQ3dzZ0F3dFNBQ0FBQkVBQ1FBSkFBa0FDUUFKQUFrQWdBVUYrYXc0R0FBRUNBd1VFQlFzZ0FDQUNQQUFBREFRTElBQWdBajBCQUF3REN5QUFJQUkrQWdBTUFnc2dBQ0FDUGdJQURBRUxJQUFnQWpjREFBc0xDMGNCQW44akJpRURJd1pCa0FGcUpBWWdBMEVBUVpBQkVFVWFJQU5CSXpZQ0lDQURJQUEyQWl3Z0EwRi9OZ0pNSUFNZ0FEWUNWQ0FESUFFZ0FoQ1VCU0VFSUFNa0JpQUVDNXdDQVFkL0lBRW9Ba3hCZjBvRWYwRUJCVUVBQ3hwQi93RWhCU0FBSVFRQ1FBSkFBMEFDUUNBQktBSUlJQUVvQWdRaUFpSUdheUVESUFKQkNpQURFS1lDSWdoRklRY2dCQ0FDSUFNZ0NFRUJJQVpyYWlBSEd5SUNJQVVnQWlBRlNSc2lBeEJNR2lBQklBTWdBU2dDQkdvaUJqWUNCQ0FESUFScUlRSWdCeUFGSUFOcklnVkJBRWR4UlFSQUlBSWhCQXdEQ3lBR0lBRW9BZ2hKQkg4Z0FTQUdRUUZxTmdJRUlBWXRBQUFGSUFFUTlRRWlCRUVBU0EwQklBUUxJUU1nQWtFQmFpRUVJQUlnQXpvQUFDQUZRWDlxSWdWRklBTkIvd0Z4UVFwR2NrVU5BUXdDQ3dzZ0FDQUNSZ1IvUVFBRklBRW9BZ0JCRUhFRWZ5QUNJUVFNQWdWQkFBc0xJUUFNQVFzZ0FBUkFJQVJCQURvQUFBVkJBQ0VBQ3dzZ0FBdndBUUVEZndKQUFrQWdBaWdDRUNJRERRQWdBaENZQXdSL1FRQUZJQUlvQWhBaEF3d0JDeUVFREFFTElBTWdBaWdDRkNJRWF5QUJTUVJBSUFJb0FpUWhBeUFDSUFBZ0FTQURRVDl4UWNvQmFoRUVBQ0VFREFFTElBRkZJQUlzQUV0QkFFaHlCRUJCQUNFREJRSkFJQUVoQXdOQUlBQWdBMEYvYWlJRmFpd0FBRUVLUndSQUlBVUVRQ0FGSVFNTUFnVkJBQ0VEREFNTEFBc0xJQUlvQWlRaEJDQUNJQUFnQXlBRVFUOXhRY29CYWhFRUFDSUVJQU5KRFFJZ0FDQURhaUVBSUFFZ0Eyc2hBU0FDS0FJVUlRUUxDeUFFSUFBZ0FSQk1HaUFDSUFFZ0FpZ0NGR28yQWhRZ0FTQURhaUVFQ3lBRUMyRUJBWDhnQUNBQUxBQktJZ0VnQVVIL0FXcHlPZ0JLSUFBb0FnQWlBVUVJY1FSL0lBQWdBVUVnY2pZQ0FFRi9CU0FBUVFBMkFnZ2dBRUVBTmdJRUlBQWdBQ2dDTENJQk5nSWNJQUFnQVRZQ0ZDQUFJQUVnQUNnQ01HbzJBaEJCQUFzTGpBRUJBMzhqQmlFQkl3WkJFR29rQmlBQlFRbzZBQUFDUUFKQUlBQW9BaEFpQWcwQUlBQVFtQU5GQkVBZ0FDZ0NFQ0VDREFFTERBRUxJQUFvQWhRaUF5QUNTUVJBSUFBc0FFdEJDa2NFUUNBQUlBTkJBV28yQWhRZ0EwRUtPZ0FBREFJTEN5QUFJQUZCQVNBQUtBSWtRVDl4UWNvQmFoRUVBRUVCUmdSL0lBRXRBQUFGUVg4TEdnc2dBU1FHQ3h3QUlBQkJnR0JMQkg5QnBNVURRUUFnQUdzMkFnQkJmd1VnQUFzTEVRQkJCRUVCUWVpSkFTZ0NBQ2dDQUJzTDdBRUNDWDhCZlNBQktBSUlJZ2dnQWlnQ0JFWUVmeUFBS0FJRUlnb2dBU2dDQkVZRWZ5QUFLQUlJSWdrZ0FpZ0NDRVlFZnlBQUtBSUFJUUFEZnlBRElBcElCSDhnQXlBSWJDRUxRUUFoQkFOQUlBUWdDVWdFUUNBQVF3QUFBQUE0QWdBZ0FpZ0NBQ0FFUVFKMGFpRUZJQUVvQWdBZ0MwRUNkR29oQmtFQUlRZERBQUFBQUNFTUEwQWdCeUFJU0FSQUlBQWdEQ0FHS2dJQUlBVXFBZ0NVa2lJTU9BSUFJQWxCQW5RZ0JXb2hCU0FHUVFScUlRWWdCMEVCYWlFSERBRUxDeUFFUVFGcUlRUWdBRUVFYWlFQURBRUxDeUFEUVFGcUlRTU1BUVZCQUFzTEJVRi9Dd1ZCZndzRlFYOExDMGdCQVg4Z0FDZ0NCQ0lCUlFSQUR3c2dBU2dDSkNFQklBQkJBU0FCUVQ5eFFiSUZhaEVEQUNBQUtBSVFCRUFnQUVISUFUWUNGQ0FBUVFBMkFyZ0NCU0FBUWVRQU5nSVVDd3N5QVFGL0lBQW9BZ1FpQVFSQUlBRW9BaWdoQVNBQUlBRkIvd0Z4UWF3RGFoRUJBQXNnQUVFQU5nSUVJQUJCQURZQ0ZBc2dBQ0FBS0FJQUlnRkJNellDRkNBQUlBRW9BZ0JCL3dGeFFhd0RhaEVCQUFzeUFRRi9JQUFvQWdnZ0FDZ0NCQkNMQVNJQkJFQWdBU0FBRVBFRVFRQklCRUFnQVJCSlFRQWhBUXNGUVFBaEFRc2dBUXVDQkFFSmZ5QUFLQUxrQXlJRklBQW9BbGhCQVVZaUFqWUNIQ0FBS0FJRUtBSUlJUUVnQlNBQVFRRkIvZ1ZCZ0FJZ0Foc2dBQ2dDZUNBQlFROXhRWW9DYWhFSkFDSUVOZ0lZSUFVb0FoUWhBU0FBS0FKNFFRQk1CRUFQQ3lBQ1JRUkFBMEFnQVNBRlFTQnFJQU5CQW5ScUtBSUFJZ0lRT1NFSElBTkJBblFnQkdvb0FnQWhCa0VBSVFFZ0FrSCtBV29nQWtGL2FpSUlRUUYwSWdrUU9TRUVRUUFoQWdOQUlBSWdCRW9FUUFOQUlBSWdDQ0FCUVFGcUlnRkJBWFJCQVhKQi93RnNhaUFKRURraUJFb05BQXNMSUFJZ0Jtb2dBU0FIYkRvQUFDQUNRUUZxSWdKQmdBSkhEUUFMSUFOQkFXb2lBeUFBS0FKNFNBUkFJQWNoQVNBRktBSVlJUVFNQVFzTER3dEJBQ0VDQTBBZ0FTQUZRU0JxSUFKQkFuUnFLQUlBSWdNUU9TRUhJQUpCQW5RZ0JHb2lBU0FCS0FJQVFmOEJhallDQUNBRktBSVlJQUpCQW5ScUtBSUFJUVpCQUNFQklBTkIvZ0ZxSUFOQmYyb2lDRUVCZENJSkVEa2hCRUVBSVFNRFFDQURJQVJLQkVBRFFDQURJQWdnQVVFQmFpSUJRUUYwUVFGeVFmOEJiR29nQ1JBNUlnUktEUUFMQ3lBRElBWnFJQUVnQjJ3NkFBQWdBMEVCYWlJRFFZQUNSdzBBQzBFQklRRURRQ0FHSUFGcklBWXNBQUE2QUFBZ0JpQUJRZjhCYW1vZ0Jpd0Evd0U2QUFBZ0FVRUJhaUlCUVlBQ1J3MEFDeUFDUVFGcUlnSWdBQ2dDZUVnRVFDQUhJUUVnQlNnQ0dDRUVEQUVMQ3d2akh3RWRmeU1HSVJjakJrR0FDMm9rQmlBWFFZQURhaUVFSUJkQmdBRnFJUmtnQUNnQzVBTW9BaGdoR2lBQlFRSjJRUVYwSWdWQkJISWlGQ0FGUVJ4eUlneHFRUUYxSVE0Z0FrRURka0VGZENJRlFRSnlJaFVnQlVFZWNpSVBha0VCZFNFUUlBTkJBblpCQlhRaUJVRUVjaUlXSUFWQkhISWlFV3BCQVhVaEVpQUFLQUtFQVNJTFFRQktCSDhnQUNnQ2lBRWlCU2dDQUNFS0lBVW9BZ1FoQ1NBRktBSUlJUmhCLy8vLy93Y2hCd05BSUJRZ0NDQUthaTBBQUNJRlNnUi9JQVVnREd0QkFYUWlCaUFHYkNFTklBVWdGR3RCQVhRaUJTQUZiQVVDZnlBTUlBVklCRUFnQlNBVWEwRUJkQ0lHSUFac0lRMGdCU0FNYTBFQmRDSUZJQVZzREFFTElBNGdCVWdFUUNBRklCUnJRUUYwSWdVZ0JXd2hEUVVnQlNBTWEwRUJkQ0lGSUFWc0lRMExRUUFMQ3lFRklCVWdDQ0FKYWkwQUFDSUdTZ1IvSUFVZ0JpQVZhMEVEYkNJRklBVnNhaUVGSUFZZ0QydEJBMndpQmlBR2JBVUNmeUFQSUFaSUJFQWdCU0FHSUE5clFRTnNJZ1VnQld4cUlRVWdCaUFWYTBFRGJDSUdJQVpzREFFTElCQWdCa2dFZnlBR0lCVnJRUU5zSWdZZ0Jtd0ZJQVlnRDJ0QkEyd2lCaUFHYkFzTEN5RVRJQllnQ0NBWWFpMEFBQ0lHU2dSL0lBVWdCaUFXYXlJRklBVnNhaUVGSUFZZ0VXc2lCaUFHYkFVQ2Z5QVJJQVpJQkVBZ0JTQUdJQkZySWdVZ0JXeHFJUVVnQmlBV2F5SUdJQVpzREFFTElCSWdCa2dFZnlBR0lCWnJJZ1lnQm13RklBWWdFV3NpQmlBR2JBc0xDeUVHSUFoQkFuUWdCR29nQlRZQ0FDQU5JQk5xSUFacUlnVWdCeUFGSUFkSUd5RUhJQXNnQ0VFQmFpSUlSdzBBQzBFQUlRVkJBQ0VJQTM4Z0NFRUNkQ0FFYWlnQ0FDQUhUQVJBSUFVZ0dXb2dDRG9BQUNBRlFRRnFJUVVMSUFzZ0NFRUJhaUlJUncwQUlBVUxCVUVBQ3lFVElCY2hDQ0FFUWYvLy8vOEhOZ0lBSUFSQi8vLy8vd2MyQWdRZ0JFSC8vLy8vQnpZQ0NDQUVRZi8vLy84SE5nSU1JQVJCLy8vLy93YzJBaEFnQkVILy8vLy9CellDRkNBRVFmLy8vLzhITmdJWUlBUkIvLy8vL3djMkFod2dCRUgvLy8vL0J6WUNJQ0FFUWYvLy8vOEhOZ0lrSUFSQi8vLy8vd2MyQWlnZ0JFSC8vLy8vQnpZQ0xDQUVRZi8vLy84SE5nSXdJQVJCLy8vLy93YzJBalFnQkVILy8vLy9CellDT0NBRVFmLy8vLzhITmdJOElBUkJRR3RCLy8vLy93YzJBZ0FnQkVILy8vLy9CellDUkNBRVFmLy8vLzhITmdKSUlBUkIvLy8vL3djMkFrd2dCRUgvLy8vL0J6WUNVQ0FFUWYvLy8vOEhOZ0pVSUFSQi8vLy8vd2MyQWxnZ0JFSC8vLy8vQnpZQ1hDQUVRZi8vLy84SE5nSmdJQVJCLy8vLy93YzJBbVFnQkVILy8vLy9CellDYUNBRVFmLy8vLzhITmdKc0lBUkIvLy8vL3djMkFuQWdCRUgvLy8vL0J6WUNkQ0FFUWYvLy8vOEhOZ0o0SUFSQi8vLy8vd2MyQW53Z0JFSC8vLy8vQnpZQ2dBRWdCRUgvLy8vL0J6WUNoQUVnQkVILy8vLy9CellDaUFFZ0JFSC8vLy8vQnpZQ2pBRWdCRUgvLy8vL0J6WUNrQUVnQkVILy8vLy9CellDbEFFZ0JFSC8vLy8vQnpZQ21BRWdCRUgvLy8vL0J6WUNuQUVnQkVILy8vLy9CellDb0FFZ0JFSC8vLy8vQnpZQ3BBRWdCRUgvLy8vL0J6WUNxQUVnQkVILy8vLy9CellDckFFZ0JFSC8vLy8vQnpZQ3NBRWdCRUgvLy8vL0J6WUN0QUVnQkVILy8vLy9CellDdUFFZ0JFSC8vLy8vQnpZQ3ZBRWdCRUgvLy8vL0J6WUN3QUVnQkVILy8vLy9CellDeEFFZ0JFSC8vLy8vQnpZQ3lBRWdCRUgvLy8vL0J6WUN6QUVnQkVILy8vLy9CellDMEFFZ0JFSC8vLy8vQnpZQzFBRWdCRUgvLy8vL0J6WUMyQUVnQkVILy8vLy9CellDM0FFZ0JFSC8vLy8vQnpZQzRBRWdCRUgvLy8vL0J6WUM1QUVnQkVILy8vLy9CellDNkFFZ0JFSC8vLy8vQnpZQzdBRWdCRUgvLy8vL0J6WUM4QUVnQkVILy8vLy9CellDOUFFZ0JFSC8vLy8vQnpZQytBRWdCRUgvLy8vL0J6WUMvQUVnQkVILy8vLy9CellDZ0FJZ0JFSC8vLy8vQnpZQ2hBSWdCRUgvLy8vL0J6WUNpQUlnQkVILy8vLy9CellDakFJZ0JFSC8vLy8vQnpZQ2tBSWdCRUgvLy8vL0J6WUNsQUlnQkVILy8vLy9CellDbUFJZ0JFSC8vLy8vQnpZQ25BSWdCRUgvLy8vL0J6WUNvQUlnQkVILy8vLy9CellDcEFJZ0JFSC8vLy8vQnpZQ3FBSWdCRUgvLy8vL0J6WUNyQUlnQkVILy8vLy9CellDc0FJZ0JFSC8vLy8vQnpZQ3RBSWdCRUgvLy8vL0J6WUN1QUlnQkVILy8vLy9CellDdkFJZ0JFSC8vLy8vQnpZQ3dBSWdCRUgvLy8vL0J6WUN4QUlnQkVILy8vLy9CellDeUFJZ0JFSC8vLy8vQnpZQ3pBSWdCRUgvLy8vL0J6WUMwQUlnQkVILy8vLy9CellDMUFJZ0JFSC8vLy8vQnpZQzJBSWdCRUgvLy8vL0J6WUMzQUlnQkVILy8vLy9CellDNEFJZ0JFSC8vLy8vQnpZQzVBSWdCRUgvLy8vL0J6WUM2QUlnQkVILy8vLy9CellDN0FJZ0JFSC8vLy8vQnpZQzhBSWdCRUgvLy8vL0J6WUM5QUlnQkVILy8vLy9CellDK0FJZ0JFSC8vLy8vQnpZQy9BSWdCRUgvLy8vL0J6WUNnQU1nQkVILy8vLy9CellDaEFNZ0JFSC8vLy8vQnpZQ2lBTWdCRUgvLy8vL0J6WUNqQU1nQkVILy8vLy9CellDa0FNZ0JFSC8vLy8vQnpZQ2xBTWdCRUgvLy8vL0J6WUNtQU1nQkVILy8vLy9CellDbkFNZ0JFSC8vLy8vQnpZQ29BTWdCRUgvLy8vL0J6WUNwQU1nQkVILy8vLy9CellDcUFNZ0JFSC8vLy8vQnpZQ3JBTWdCRUgvLy8vL0J6WUNzQU1nQkVILy8vLy9CellDdEFNZ0JFSC8vLy8vQnpZQ3VBTWdCRUgvLy8vL0J6WUN2QU1nQkVILy8vLy9CellDd0FNZ0JFSC8vLy8vQnpZQ3hBTWdCRUgvLy8vL0J6WUN5QU1nQkVILy8vLy9CellDekFNZ0JFSC8vLy8vQnpZQzBBTWdCRUgvLy8vL0J6WUMxQU1nQkVILy8vLy9CellDMkFNZ0JFSC8vLy8vQnpZQzNBTWdCRUgvLy8vL0J6WUM0QU1nQkVILy8vLy9CellDNUFNZ0JFSC8vLy8vQnpZQzZBTWdCRUgvLy8vL0J6WUM3QU1nQkVILy8vLy9CellDOEFNZ0JFSC8vLy8vQnpZQzlBTWdCRUgvLy8vL0J6WUMrQU1nQkVILy8vLy9CellDL0FNZ0UwRUFTZ1JBUVFBaER3TkFJQlFnRHlBWmFpd0FBQ0lMUWY4QmNTSUhJQUFvQW9nQklnWW9BZ0JxTFFBQWF5SU5RUUYwSVF3Z0ZTQUhJQVlvQWdScUxRQUFheUlGUVFOc0lRb2dCVUhJQUd3aUJVR1FBV29oR0NBV0lBY2dCaWdDQ0dvdEFBQnJJZ2RCQkhRaUJrRkFheUVPSUFaQndBRnFJUkFnQmtIQUFtb2hFaUFGUWJBRGFpRWJJQVZCMEFWcUlSd2dCVUh3QjJvaEhTQUZRWkFLYWlFZUlBVkJzQXhxSVI4Z0JVSFFEbW9oSUVFRElSRWdEVUVHZEVHQUFtb2hEU0FNSUF4c0lBb2dDbXhxSUFjZ0IyeHFJUXdnQ0NFSElBUWhCUU5BSUF3Z0JTZ0NBRWdFUUNBRklBdzJBZ0FnQnlBTE9nQUFDeUFNSUE1cUlnb2dCU0lHS0FJRVNBUkFJQVlnQ2pZQ0JDQUhJQXM2QUFFTElBb2dFR29pQ2lBR0tBSUlTQVJBSUFZZ0NqWUNDQ0FISUFzNkFBSUxJQW9nRW1vaUNpQUdLQUlNU0FSQUlBWWdDallDRENBSElBczZBQU1MSUF3Z0dHb2lDaUFGS0FJUVNBUkFJQVVnQ2pZQ0VDQUhJQXM2QUFRTElBb2dEbW9pQ1NBR0tBSVVTQVJBSUFVZ0NUWUNGQ0FISUFzNkFBVUxJQWtnRUdvaUNTQUZLQUlZU0FSQUlBVWdDVFlDR0NBSElBczZBQVlMSUFrZ0Vtb2lDU0FGS0FJY1NBUkFJQVVnQ1RZQ0hDQUhJQXM2QUFjTElBb2dHMm9pQ2lBR0tBSWdTQVJBSUFZZ0NqWUNJQ0FISUFzNkFBZ0xJQW9nRG1vaUNTQUZLQUlrU0FSQUlBWWdDVFlDSkNBSElBczZBQWtMSUFrZ0VHb2lDU0FHS0FJb1NBUkFJQVlnQ1RZQ0tDQUhJQXM2QUFvTElBa2dFbW9pQ1NBR0tBSXNTQVJBSUFZZ0NUWUNMQ0FISUFzNkFBc0xJQW9nSEdvaUNpQUZLQUl3U0FSQUlBVWdDallDTUNBSElBczZBQXdMSUFvZ0Rtb2lCU0FHS0FJMFNBUkFJQVlnQlRZQ05DQUhJQXM2QUEwTElBVWdFR29pQlNBR0tBSTRTQVJBSUFZZ0JUWUNPQ0FISUFzNkFBNExJQVVnRW1vaUNTQUdJZ1VvQWp4SUJFQWdCU0FKTmdJOElBY2dDem9BRHdzZ0NpQWRhaUlLSUFWQlFHc2lCaWdDQUVnRVFDQUdJQW8yQWdBZ0J5QUxPZ0FRQ3lBS0lBNXFJZ2tnQlNJR0tBSkVTQVJBSUFZZ0NUWUNSQ0FISUFzNkFCRUxJQWtnRUdvaUNTQUdLQUpJU0FSQUlBWWdDVFlDU0NBSElBczZBQklMSUFrZ0Vtb2lDU0FHS0FKTVNBUkFJQVlnQ1RZQ1RDQUhJQXM2QUJNTElBb2dIbW9pQ2lBRktBSlFTQVJBSUFVZ0NqWUNVQ0FISUFzNkFCUUxJQW9nRG1vaUNTQUdLQUpVU0FSQUlBVWdDVFlDVkNBSElBczZBQlVMSUFrZ0VHb2lDU0FGS0FKWVNBUkFJQVVnQ1RZQ1dDQUhJQXM2QUJZTElBa2dFbW9pQ1NBRktBSmNTQVJBSUFVZ0NUWUNYQ0FISUFzNkFCY0xJQW9nSDJvaUNpQUdLQUpnU0FSQUlBWWdDallDWUNBSElBczZBQmdMSUFvZ0Rtb2lDU0FGS0FKa1NBUkFJQVlnQ1RZQ1pDQUhJQXM2QUJrTElBa2dFR29pQ1NBR0tBSm9TQVJBSUFZZ0NUWUNhQ0FISUFzNkFCb0xJQWtnRW1vaUNTQUdLQUpzU0FSQUlBWWdDVFlDYkNBSElBczZBQnNMSUFvZ0lHb2lDaUFGS0FKd1NBUkFJQVVnQ2pZQ2NDQUhJQXM2QUJ3TElBb2dEbW9pQlNBR0tBSjBTQVJBSUFZZ0JUWUNkQ0FISUFzNkFCMExJQVVnRUdvaUJTQUdLQUo0U0FSQUlBWWdCVFlDZUNBSElBczZBQjRMSUFVZ0Vtb2lCU0FHS0FKOFNBUkFJQVlnQlRZQ2ZDQUhJQXM2QUI4TElBWkJnQUZxSVFVZ0IwRWdhaUVISUF3Z0RXb2hEQ0FOUVlBRWFpRU5JQkZCZjJvaEJpQVJCRUFnQmlFUkRBRUxDeUFQUVFGcUlnOGdFMGNOQUFzTElBRkJmSEVoQnlBRFFYeHhJUUVnQWtGNGNTSURRUUZ5SVFZZ0EwRUNjaUVNSUFOQkEzSWhEeUFEUVFSeUlSRWdBMEVGY2lFTklBTkJCbkloQkNBQ1FRZHlJUk5CQUNFQUEwQWdBQ0FIYWtFQ2RDQWFhaUlMS0FJQUlnSWdBMEVHZEdvZ0FVRUJkR29pQlNBSUxRQUFRUUZxT3dFQUlBVWdDQzBBQVVFQmFqc0JBaUFGSUFndEFBSkJBV283QVFRZ0JTQUlMUUFEUVFGcU93RUdJQVpCQm5RZ0Ftb2dBVUVCZEdvaUJTQUlMUUFFUVFGcU93RUFJQVVnQ0MwQUJVRUJhanNCQWlBRklBZ3RBQVpCQVdvN0FRUWdCU0FJTFFBSFFRRnFPd0VHSUF4QkJuUWdBbW9nQVVFQmRHb2lCU0FJTFFBSVFRRnFPd0VBSUFVZ0NDMEFDVUVCYWpzQkFpQUZJQWd0QUFwQkFXbzdBUVFnQlNBSUxRQUxRUUZxT3dFR0lBOUJCblFnQW1vZ0FVRUJkR29pQWlBSUxRQU1RUUZxT3dFQUlBSWdDQzBBRFVFQmFqc0JBaUFDSUFndEFBNUJBV283QVFRZ0FpQUlMUUFQUVFGcU93RUdJQXNvQWdBaUFpQVJRUVowYWlBQlFRRjBhaUlGSUFndEFCQkJBV283QVFBZ0JTQUlMUUFSUVFGcU93RUNJQVVnQ0MwQUVrRUJhanNCQkNBRklBZ3RBQk5CQVdvN0FRWWdEVUVHZENBQ2FpQUJRUUYwYWlJRklBZ3RBQlJCQVdvN0FRQWdCU0FJTFFBVlFRRnFPd0VDSUFVZ0NDMEFGa0VCYWpzQkJDQUZJQWd0QUJkQkFXbzdBUVlnQkVFR2RDQUNhaUFCUVFGMGFpSUZJQWd0QUJoQkFXbzdBUUFnQlNBSUxRQVpRUUZxT3dFQ0lBVWdDQzBBR2tFQmFqc0JCQ0FGSUFndEFCdEJBV283QVFZZ0UwRUdkQ0FDYWlBQlFRRjBhaUlDSUFndEFCeEJBV283QVFBZ0FpQUlMUUFkUVFGcU93RUNJQUlnQ0MwQUhrRUJhanNCQkNBQ0lBZ3RBQjlCQVdvN0FRWWdDRUVnYWlFSUlBQkJBV29pQUVFRVJ3MEFDeUFYSkFZTE5BRUJmeUFBS0FJRUlBRW9BZ2dRcFFNaUFnUkFJQUlnQUNBQkVKd0RRUUJJQkVBZ0FoQkpRUUFoQWdzRlFRQWhBZ3NnQWd2U0F3RURmeUFBS0FJRUtBSUFJUUVnQUNnQzVBTWdBRUVCUWZ3UElBRkJQM0ZCeWdGcUVRUUFJZ0JCL0FkcUlnSTJBaWdnQWtFQU5nSUFJQUJCZ0FocVFRRTJBZ0FnQUVGL05nTDRCeUFBUVlRSWFrRUNOZ0lBSUFCQmZqWUM5QWNnQUVHSUNHcEJBellDQUNBQVFYMDJBdkFISUFCQmpBaHFRUVEyQWdBZ0FFRjhOZ0xzQnlBQVFaQUlha0VGTmdJQUlBQkJlellDNkFjZ0FFR1VDR3BCQmpZQ0FDQUFRWG8yQXVRSElBQkJtQWhxUVFjMkFnQWdBRUY1TmdMZ0J5QUFRWndJYWtFSU5nSUFJQUJCZURZQzNBY2dBRUdnQ0dwQkNUWUNBQ0FBUVhjMkF0Z0hJQUJCcEFocVFRbzJBZ0FnQUVGMk5nTFVCeUFBUWFnSWFrRUxOZ0lBSUFCQmRUWUMwQWNnQUVHc0NHcEJERFlDQUNBQVFYUTJBc3dISUFCQnNBaHFRUTAyQWdBZ0FFRnpOZ0xJQnlBQVFiUUlha0VPTmdJQUlBQkJjallDeEFjZ0FFRzRDR3BCRHpZQ0FDQUFRWEUyQXNBSFFSQWhBRUVRSVFFRFFDQUFRUUowSUFKcUlBRTJBZ0JCQUNBQWEwRUNkQ0FDYWtFQUlBRnJOZ0lBSUFFZ0FFRUJhaUlBUVFGeFFRRnphaUVCSUFCQk1FY05BQXRCQUNBQmF5RURRVEFoQUFOQUlBQkJBblFnQW1vZ0FUWUNBRUVBSUFCclFRSjBJQUpxSUFNMkFnQWdBRUVCYWlJQVFZQUNSdzBBQ3d0QkFRSi9RUXdRUkNJQ0JFQWdBaUFCSUFCQkFuUnNFRVFpQXpZQ0FDQURCRUFnQWlBQU5nSUVJQUlnQVRZQ0NBVWdBaEE0UVFBaEFnc0ZRUUFoQWdzZ0FndmNBUUVDZndKQUlBQW9BclFDRFFBQ1FDQUFLQUlvUVFOckRnVUFBUUVCQUFFTElBQW9BaVJCQTBjTkFDQUFLQUlzUVFKSERRQWdBQ2dDZUVFRFJ3MEFJQUFvQXJBQ0RRQWdBQ2dDMkFFaUFTZ0NDRUVDUncwQUlBRW9BbUJCQVVjTkFDQUJLQUs0QVVFQlJ3MEFJQUVvQWd4QkFrb05BQ0FCS0FKa1FRRkhEUUFnQVNnQ3ZBRkJBVWNOQUNBQktBSWtJZ0lnQUNnQ3hBSkhEUUFnQVNnQ2ZDQUNSdzBBSUFFb0F0UUJJQUpIRFFBZ0FTZ0NLQ0lDSUFBb0FzZ0NSdzBBSUFJZ0FTZ0NnQUZHQkg4Z0FpQUJLQUxZQVVZRlFRQUxEd3RCQUF2akJnRUdmd0pBSUFBb0F0UUNJZ0ZCQVVZRVFDQUFJQUFvQXRnQ0lnRW9BaHcyQXVnQ0lBQWdBU2dDSUNJRE5nTHNBaUFCUVFFMkFqZ2dBVUVCTmdJOElBRkJRR3RCQVRZQ0FDQUJJQUVvQWlRMkFrUWdBVUVCTmdKSUlBTWdBU2dDRENJQ0VFNGhBeUFCSUFNZ0FpQURHellDVENBQVFRRTJBdkFDSUFCQkFEWUM5QUpCQVNFQkJTQUJRWDlxUVFOTEJFQWdBQ2dDQUNJRFFSczJBaFFnQXlBQk5nSVlJQUFvQWdCQkJEWUNIQ0FBS0FJQUtBSUFJUUVnQUNBQlFmOEJjVUdzQTJvUkFRQUxJQUFnQUNnQ0hDQUFLQUs4QWlBQUtBS3NBMndRYURZQzZBSWdBQ0FBS0FJZ0lBQW9Bc0FDSUFBb0Fxd0RiQkJvTmdMc0FpQUFRUUEyQXZBQ0lBQW9BdFFDUVFCTURRRkJBQ0VEQTBBZ0FFSFlBbW9nQTBFQ2RHb29BZ0FpQWlnQ0NDRUVJQUlnQkRZQ09DQUNJQUlvQWd3aUJUWUNQQ0FDUVVCcklBUWdCV3dpQVRZQ0FDQUNJQVFnQWlnQ0pHdzJBa1FnQWlBRUlBSW9BaHdnQkJCT0lnUWdCRVViTmdKSUlBSWdBaWdDSUNBRkVFNGlBaUFGSUFJYk5nSk1JQUVnQm1wQkNrb0VRQ0FBS0FJQUlnSkJEallDRkNBQ0tBSUFJUUlnQUNBQ1FmOEJjVUdzQTJvUkFRQUxJQUZCQUVvRVFBTkFJQUZCZjJvaEFpQUFJQUFvQXZBQ0lnUkJBV28yQXZBQ0lBQkI5QUpxSUFSQkFuUnFJQU0yQWdBZ0FVRUJTZ1JBSUFJaEFRd0JDd3NMSUFOQkFXb2lBeUFBS0FMVUFpSUJTQVJBSUFBb0F2QUNJUVlNQVFzTElBRkJBRXdOQVF0QkFDRURBMEFnQUVIWUFtb2dBMEVDZEdvb0FnQWlBaWdDVUVVRVFDQUFRYVFCYWlBQ0tBSVFJZ0ZCQW5ScUlRUUNRQUpBSUFGQkEwc05BQ0FFS0FJQVJRMEFEQUVMSUFBb0FnQWlCVUUyTmdJVUlBVWdBVFlDR0NBQUtBSUFLQUlBSVFFZ0FDQUJRZjhCY1VHc0Eyb1JBUUFMSUFBb0FnUW9BZ0FoQVNBQVFRRkJoQUVnQVVFL2NVSEtBV29SQkFBaUFTQUVLQUlBUVlRQkVFd2FJQUlnQVRZQ1VDQUFLQUxVQWlFQkN5QURRUUZxSWdNZ0FVZ05BQXNnQUNnQzFBTW9BZ0FoQVNBQUlBRkIvd0Z4UWF3RGFoRUJBQ0FBS0FMRUF5Z0NBQ0VCSUFBZ0FVSC9BWEZCckFOcUVRRUFJQUFvQXN3RElBQW9Bc1FES0FJRU5nSUFEd3NnQUNnQzFBTW9BZ0FoQVNBQUlBRkIvd0Z4UWF3RGFoRUJBQ0FBS0FMRUF5Z0NBQ0VCSUFBZ0FVSC9BWEZCckFOcUVRRUFJQUFvQXN3RElBQW9Bc1FES0FJRU5nSUFDOG9CQVFKL0l3WWhCQ01HUVRCcUpBWWdCRUVZYWlJRlFRZzJBZ1FnQlVFQk5nSUlJQVVnQURZQ0FDQUVRUXhxSWdBZ0F6WUNCQ0FBUVFFMkFnZ2dBQ0FCTmdJQUlBUWdBellDQkNBRVFRZzJBZ2dnQkNBQ05nSUFJQVFRdXdVaUFnUkFJQUlnQkJDakF5SUJCRUFnQWlBQUVLTURJZ01FUUNBQktBSUFJQUVvQWdRaUFDQUFFUFlFUlVFZmRFRWZkVUVBU0FSL1FYOEZJQVVnQVNBREVKd0RHa0VBQ3lFQUlBTVFTUVZCZnlFQUN5QUJFRWtGUVg4aEFBc2dBaEJKQlVGL0lRQUxJQVFrQmlBQUMxa0JBWDhnQUNnQzJBRWlBUVJBSUFFUXZ3Y2dBQ2dDMkFFUWh3a2dBRUVBTmdMWUFRc2dBRUhrQVdvaUFTZ0NBQVJBSUFFUXB3a2dBVUVBTmdJQUN5QUFRY0FCYWlJQUtBSUFCRUFnQUJDekN5QUFRUUEyQWdBTEMzTUJBMzhqQmlFQ0l3WkJFR29rQmlBQ1FRaHFJUU1nQVJEUENTSUVCRUFnQUNBRUVPRUdJUUFnQkJBNEJTQUNJQUUyQWdCQkFFRURRWkdxQVNBQ0VEMUJwTVVES0FJQUVMMEJJUUFnQTBHbjFRTTJBZ0FnQXlBQU5nSUVRUUJCQTBHbHRnRWdBeEE5UVg4aEFBc2dBaVFHSUFBTDNBTUJDSDhnQUFSQUFrQWdBRUgvLy8vL0Ewc0VRRUVJRUFVaUFSQ0lBU0FCUWJTTEFUWUNBQ0FCUWZqM0FFRVdFQVFMSUFCQkFuUVFVU0VCUWJERUF5Z0NBQ0VDUWJERUF5QUJOZ0lBSUFJRVFFRzB4QU1vQWdBYUlBSVFPQXRCdE1RRElBQTJBZ0JCQUNFQkEwQWdBQ0FCUndSQVFiREVBeWdDQUNBQlFRSjBha0VBTmdJQUlBRkJBV29oQVF3QkN3dEJ1TVFES0FJQUlnRUVRQ0FCS0FJRUlRSWdBQ0FBUVg5cUlnZHhSU0lJQkg4Z0FpQUhjUVVnQWlBQVR3Ui9JQUlnQUJCT0JTQUNDd3NoQlVHd3hBTW9BZ0FnQlVFQ2RHcEJ1TVFETmdJQUEwQWdBU0VEQTBBQ1FBTkFBa0FnQXlnQ0FDSUJSUTBHSUFFb0FnUWhBaUFGSUFnRWZ5QUNJQWR4QlNBQ0lBQlBCSDhnQWlBQUVFNEZJQUlMQ3lJRVJnMEFRYkRFQXlnQ0FDQUVRUUowYWlJQ0tBSUFSUTBDSUFFaEFnTkFJQUlvQWdBaUJnUkFJQUVvQWdnZ0JpZ0NDRVlFUUNBR0lRSU1BZ3NMQ3lBRElBWTJBZ0FnQWtHd3hBTW9BZ0FnQkVFQ2RHb29BZ0FvQWdBMkFnQkJzTVFES0FJQUlBUkJBblJxS0FJQUlBRTJBZ0FNQVFzTElBRWhBd3dCQ3dzZ0FpQUROZ0lBSUFRaEJRd0FBQXNBQ3dzRlFiREVBeWdDQUNFQVFiREVBMEVBTmdJQUlBQUVRRUcweEFNb0FnQWFJQUFRT0F0QnRNUURRUUEyQWdBTEM2b0VBZ2wvQW4wakJpRUZJd1pCSUdva0JpQUZRUVJxSVFRZ0JTQUFOZ0lBSUFBb0FnQWhBd0pBQWtCQnRNUURLQUlBSWdGRklna0VRRUVBSVFBTUFRVWdBU0FCUVg5cUlnaHhSU0lIQkg4Z0F5QUljUVVnQXlBQlNRUi9JQU1GSUFNZ0FSQk9Dd3NpQUVFQ2RFR3d4QU1vQWdCcUtBSUFJZ0lFUUFOQUlBSW9BZ0FpQWtVTkF5QURJQUlvQWdRaUJrY0VRQ0FIQkg4Z0JpQUljUVVnQmlBQlR3Ui9JQVlnQVJCT0JTQUdDd3NnQUVjTkJBc2dBeUFDS0FJSVJ3MEFDd1VNQWdzTERBRUxJQVFnQXlBRkVOOEdRY0RFQXlvQ0FDSUtJQUd6bEVHOHhBTW9BZ0JCQVdxeklndGRJQWx5QkVBQ2Z5QUxJQXFWalJDU0FTSUNJQUZCZjJvZ0FYRkJBRWNnQVVFRFNYSWdBVUVCZEhJaUFDQUFJQUpKR3hEZUJrRzB4QU1vQWdBaUFrRi9haUlBSUFOeElBQWdBbkZGRFFBYUlBTWdBa2tFZnlBREJTQURJQUlRVGdzTElRQUZJQUVoQWd0QnNNUURLQUlBSUFCQkFuUnFLQUlBSWdFRWZ5QUVLQUlBSUFFb0FnQTJBZ0FnQVNBRUtBSUFOZ0lBSUFRRklBUW9BZ0JCdU1RREtBSUFOZ0lBUWJqRUF5QUVLQUlBTmdJQVFiREVBeWdDQUNBQVFRSjBha0c0eEFNMkFnQWdCQ2dDQUNJSEtBSUFJZ0FFUUNBQUtBSUVJUUFnQWlBQ1FYOXFJZ0Z4Qkg4Z0FDQUNUd1IvSUFBZ0FoQk9CU0FBQ3dVZ0FDQUJjUXNoQUVHd3hBTW9BZ0FnQUVFQ2RHb2dCellDQUFzZ0JBc2lBQ2dDQUNFQ1FiekVBMEc4eEFNb0FnQkJBV28yQWdBZ0FFRUFOZ0lBQ3lBRkpBWWdBa0VRYWdza0FRRi9JQUVvQWdBaEFpQUFRZ0EzQWdBZ0FFRUFOZ0lJSUFBZ0FVRUVhaUFDRUg0TEVRQWdBU0FBUWY4QmNVR3NBMm9SQVFBTEVnQWdBU0FDSUFCQkEzRkJyQVZxRVJvQUN4SUFJQUVnQWlBQVFUOXhRYklGYWhFREFBc1NBQ0FCSUFJZ0FFRUJjVUd3QldvUkpnQUwzQU1CQ0g4Z0FBUkFBa0FnQUVILy8vLy9BMHNFUUVFSUVBVWlBUkNJQVNBQlFiU0xBVFlDQUNBQlFmajNBRUVXRUFRTElBQkJBblFRVVNFQlFaekVBeWdDQUNFQ1FaekVBeUFCTmdJQUlBSUVRRUdneEFNb0FnQWFJQUlRT0F0Qm9NUURJQUEyQWdCQkFDRUJBMEFnQUNBQlJ3UkFRWnpFQXlnQ0FDQUJRUUowYWtFQU5nSUFJQUZCQVdvaEFRd0JDd3RCcE1RREtBSUFJZ0VFUUNBQktBSUVJUUlnQUNBQVFYOXFJZ2R4UlNJSUJIOGdBaUFIY1FVZ0FpQUFUd1IvSUFJZ0FCQk9CU0FDQ3dzaEJVR2N4QU1vQWdBZ0JVRUNkR3BCcE1RRE5nSUFBMEFnQVNFREEwQUNRQU5BQWtBZ0F5Z0NBQ0lCUlEwR0lBRW9BZ1FoQWlBRklBZ0VmeUFDSUFkeEJTQUNJQUJQQkg4Z0FpQUFFRTRGSUFJTEN5SUVSZzBBUVp6RUF5Z0NBQ0FFUVFKMGFpSUNLQUlBUlEwQ0lBRWhBZ05BSUFJb0FnQWlCZ1JBSUFFb0FnZ2dCaWdDQ0VZRVFDQUdJUUlNQWdzTEN5QURJQVkyQWdBZ0FrR2N4QU1vQWdBZ0JFRUNkR29vQWdBb0FnQTJBZ0JCbk1RREtBSUFJQVJCQW5ScUtBSUFJQUUyQWdBTUFRc0xJQUVoQXd3QkN3c2dBaUFETmdJQUlBUWhCUXdBQUFzQUN3c0ZRWnpFQXlnQ0FDRUFRWnpFQTBFQU5nSUFJQUFFUUVHZ3hBTW9BZ0FhSUFBUU9BdEJvTVFEUVFBMkFnQUxDeE1BSUFCQnlBSnFFRlVnQUVHZ0Ftb1E1UVlMS0FFQ2Z3Si9Jd1loQXlNR1FSQnFKQVlnQUVFRFFaU0hBVUhSdHdKQkFTQUJFQWtnQXdza0JndmdIUUlhZndGK0l3WWhCQ01HUWRBU2FpUUdJQVJCa0JKcUlSRWdCRUh3Qm1vaENDQUVRYUFHYWlFUElBUkIwQVZxSVJBZ0JFR0FCV29oRWlBRVFiQUVhaUVUSUFSQk1Hb2hGeUFFSVJZQ2Z3Si9BbjhDUUFKQUFrQUNRQUpBQWtBQ1FDQUFRWVFHYXc2TEVBRUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVDQXdVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRUUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFBRkN5QUNJUkZCb0JFaENVR2dEU0VMUWZnQUlRMUIvd0FoREVFSklSUkJ3QUFNQnd0QjRBd2hDVUdnQ3lFTFFRMGhEVUVKSVFCQkFTRUNRUThNQlF0QjRBd2hDVUdnQ3lFTFFRMGhEVUVGSVFCQkFpRUNRUThNQkF0QkRDRUFRUUloQWd3Q0MwRUhJUUJCQXlFQ0RBRUxRWDhNQXd0QjRBc2hDVUdnQ2lFTFFSWWhEVUVmQ3lFTVFRQWhCQU4vSUFRZ0RVWUVmeUFDSVJRZ0FBVWdCQ0FSYWlBQnAwRUJjVG9BQUNBRVFRRnFJUVFnQVVJQmlDRUJEQUVMQ3dzaEdDQVVRUUYwSVJWQkFTRUNBMEFnQWlBVlRBUkFJQUpCQW5RZ0Uyb2lCa0VBTmdJQVFRQWhCRUVBSVFBRFFDQUVJQTFJQkVBZ0JDQVJhaXdBQUFSQUlBWWdBaUFFYkNBTUVFOUJBblFnQzJvb0FnQWdBSE1pQURZQ0FBc2dCRUVCYWlFRURBRUxDeUFHSUFCQkFuUWdDV29vQWdBMkFnQkJBU0FGSUFBYklRVWdBa0VCYWlFQ0RBRUxDeUFGUVFCSEloa0VRQ0FQUVFBMkFnQWdEeUFUS0FJRUlnVTJBZ1FnQ0VFQU5nSUFJQWhCQVRZQ1NFRUJJUUFEUUNBQUlCVklCRUFnQUVFQ2RDQUlha0YvTmdJQUlBaEJ5QUJxSUFCQkFuUnFRUUEyQWdBZ0FFRUJhaUVBREFFTEN5QVFRUUEyQWdBZ0VFRUFOZ0lFSUJKQmZ6WUNBQ0FTUVFBMkFnUkJBQ0VFUVFBaEFnTkFBa0FnQkVFQmFpRUtJQVZCZjBZRVFDQUVRUUpxSWdSQkFuUWdFR29nQWpZQ0FFRUFJUUFEUUNBQUlBSk1CRUFnQkVISUFHd2dDR29nQUVFQ2RHb2dDa0hJQUd3Z0NHb2dBRUVDZEdvaUJTZ0NBQ0lHTmdJQUlBVWdCa0VDZENBSmFpZ0NBRFlDQUNBQVFRRnFJUUFNQVFzTEJTQUVJUUFEUUNBQVFYOXFJUVlnQUVFQVNpSUhJQUJCQW5RZ0Qyb29BZ0JCZjBaeEJFQWdCaUVBREFFTEN5QUhCRUFnQUNFR0EwQWdCa0YvYWlJSFFRSjBJQTlxS0FJQVFYOUhCRUFnQnlBQUlBQkJBblFnRW1vb0FnQWdCMEVDZENBU2FpZ0NBRWdiSVFBTElBWkJBVW9FUUNBSElRWU1BUXNMQ3lBRVFRSnFJZ1JCQW5RZ0VHb2dBaUFLSUFCcklob2dBRUVDZENBUWFpSU9LQUlBYWlJR0lBSWdCa29iSWdZMkFnQkJBQ0VIQTBBZ0J5QVZTQVJBSUFSQnlBQnNJQWhxSUFkQkFuUnFRUUEyQWdBZ0IwRUJhaUVIREFFTEN5QUZJQXhxSVFjZ0FFRUNkQ0FQYWlFYklBNG9BZ0FoRGtFQUlRVURRQ0FGSUE1TUJFQWdBRUhJQUd3Z0NHb2dCVUVDZEdvb0FnQWlIRUYvUndSQUlBUkJ5QUJzSUFocUlBVWdHbXBCQW5ScUlBY2dIR29nR3lnQ0FHc2dEQkJQUVFKMElBdHFLQUlBTmdJQUN5QUZRUUZxSVFVTUFRc0xRUUFoQUFOL0lBQWdBa29FZnlBR0JTQUVRY2dBYkNBSWFpQUFRUUowYWlJRklBcEJ5QUJzSUFocUlBQkJBblJxSWdjb0FnQWlEaUFGS0FJQWN6WUNBQ0FISUE1QkFuUWdDV29vQWdBMkFnQWdBRUVCYWlFQURBRUxDeUVDQ3lBRVFRSjBJQkpxSUFvZ0FtczJBZ0FnQ2lBVlRnMEFJQVJCQW5RZ0Qyb2lCaUFFUVFKMElCTnFLQUlBSWdCQmYwWUVmMEVBQlNBQVFRSjBJQXRxS0FJQUN5SUFOZ0lBUVFFaEJRTkFJQVVnQWt3RVFDQUVJQVZyUVFKMElCTnFLQUlBSWdkQmYwY0VRQ0FFUWNnQWJDQUlhaUFGUVFKMGFpZ0NBQ0lPQkVBZ0JpQUhJQTVCQW5RZ0NXb29BZ0JxSUF3UVQwRUNkQ0FMYWlnQ0FDQUFjeUlBTmdJQUN3c2dCVUVCYWlFRkRBRUxDeUFHSUFCQkFuUWdDV29vQWdBaUJUWUNBQ0FDSUJSTUJFQWdDaUVFREFJTEN3dEJmeUFDSUJSS0RRRWFRUUFoQUFOQUlBQWdBa3dFUUNBRVFjZ0FiQ0FJYWlBQVFRSjBhaUlGSUFVb0FnQkJBblFnQ1dvb0FnQTJBZ0FnQUVFQmFpRUFEQUVMQzBFQklRQURRQ0FBSUFKTUJFQWdBRUVDZENBV2FpQUVRY2dBYkNBSWFpQUFRUUowYWlnQ0FEWUNBQ0FBUVFGcUlRQU1BUXNMUVFBaEFFRUJJUW9EUUNBTUlBcE9CRUJCQVNFR1FRRWhCUU5BSUFZZ0Frd0VRQ0FHUVFKMElCWnFJZ2NvQWdBaUNVRi9Sd1JBSUFjZ0JpQUphaUFNRUU4aUJ6WUNBQ0FGSUFkQkFuUWdDMm9vQWdCeklRVUxJQVpCQVdvaEJnd0JDd3NnQlVVRVFDQUFRUUowSUJkcUlBd2dDbXMyQWdBZ0FFRUJhaUVBQ3lBS1FRRnFJUW9NQVFzTFFYOGdBQ0FDUncwQkdrRUFJUUFEUUNBQUlBSklCRUFnRVNBQVFRSjBJQmRxS0FJQWFpSUZJQVVzQUFCQkFYTTZBQUFnQUVFQmFpRUFEQUVMQ3dWQkFDRUVDeUFEUWdBM0F3QkNBU0VlSUEwZ0dHc2hBRUlBSVFFRFFDQUFJQTFJQkVBZ0F5QWVJQUFnRVdvdEFBQ3RmaUFCZkNJQk53TUFJQjVDQVlZaEhpQUFRUUZxSVFBTUFRc0xJQmtFZnlBRVFRSjBJQkJxS0FJQUJVRUFDd3NoSFNBV0pBWWdIUXZKQ0FJTGZ3TjhJd1loRGlNR1FSQnFKQVlnRGtFSWFpRUhJQUJGSUFOQkFVaHlCSDhnQkVFQU5nSUFJQVZCQURZQ0FDQUdSQUFBQUFBQUFQQy9PUU1BUVg4RkFuOENRQUpBQWtBZ0FRNENBQUVDQ3lBRElBTnNJZ0ZCREd3UVJDSUtSUVJBUVFCQkEwRzUyQUlnRGhBOVFRRVFBUXNnQVVFRGJDRUxRUUFoQjBFQUlRRURRQ0FISUF0SEJFQWdBU0FDSUFkcUxBQUFRWDl6UWY4QmNXb2hBU0FIUVFGcUlRY01BUXNMSUFFZ0N4QklJUWxCQUNFSFFRQWhBUU5BSUFFZ0MwY0VRQ0FCUVFKMElBcHFJQUVnQW1vc0FBQkJmM05CL3dGeElBbHJJZ2cyQWdBZ0J5QUlJQWhzYWlFSElBRkJBV29oQVF3QkN3c2dCN2VmSWhNZ0E3ZEVrU3RRNW5xMit6K2lvMFFBQUFBQUFBQXVRR01FUUNBRVFRQTJBZ0FnQlVFQU5nSUFJQVpFQUFBQUFBQUE4TDg1QXdBZ0NoQTRRWDRNQXdzZ0FDZ0NBQ0VQUVFBaENVRi9JUU5CZnlFQlFYOGhBZ05BSUFrZ0QwZ0VRQ0FBS0FJSUlRY0NRQUpBQTBBQ1FDQURRUUZxSWdOQkFuUWdCMm9vQWdBT0F3RUNBQUlMQ3d3QkN5QURRUUowSVJCQkFDRUhBMEFnQjBFRVJ3UkFJQWNnRUdvaERVRUFJUXhCQUNFSUEwQWdDQ0FMUndSQUlBd2dDRUVDZENBS2FpZ0NBQ0FBS0FJTUlBMUJBblJxS0FJQUlBaEJBblJxS0FJQWJHb2hEQ0FJUVFGcUlRZ01BUXNMSUFjZ0FpQU10eUFBS0FJUUlBMUJBM1JxS3dNQW95QVRveUlVSUJKa0lnZ2JJUUlnQjBFQmFpRUhJQlFnRWlBSUd5RVNJQU1nQVNBSUd5RUJEQUVMQ3dzZ0NVRUJhaUVKREFFTEN5QUZJQUkyQWdBZ0JDQUJOZ0lBSUFZZ0Vqa0RBQ0FLRURoQkFBd0NDeUFESUFOc0lncEJBblFRUkNJTFJRUkFRUUJCQTBHNTJBSWdCeEE5UVFFUUFRdEJBQ0VIUVFBaEFRTkFJQUVnQ2tjRVFDQUhJQUVnQW1vc0FBQkJmM05CL3dGeGFpRUhJQUZCQVdvaEFRd0JDd3NnQnlBS0VFZ2hDVUVBSVFkQkFDRUJBMEFnQVNBS1J3UkFJQUZCQW5RZ0Myb2dBU0FDYWl3QUFFRi9jMEgvQVhFZ0NXc2lDRFlDQUNBSElBZ2dDR3hxSVFjZ0FVRUJhaUVCREFFTEN5QUh0NThpRXlBRHQ2TkVBQUFBQUFBQUxrQmpCRUFnQkVFQU5nSUFJQVZCQURZQ0FDQUdSQUFBQUFBQUFQQy9PUU1BSUFzUU9FRitEQUlMSUFBb0FnQWhEMEVBSVFsQmZ5RURRWDhoQVVGL0lRSURRQ0FKSUE5SUJFQWdBQ2dDQ0NFSEFrQUNRQU5BQWtBZ0EwRUJhaUlEUVFKMElBZHFLQUlBRGdNQkFnQUNDd3NNQVFzZ0EwRUNkQ0VRUVFBaEJ3TkFJQWRCQkVjRVFDQUhJQkJxSVExQkFDRU1RUUFoQ0FOQUlBZ2dDa2NFUUNBTUlBaEJBblFnQzJvb0FnQWdBQ2dDRkNBTlFRSjBhaWdDQUNBSVFRSjBhaWdDQUd4cUlRd2dDRUVCYWlFSURBRUxDeUFISUFJZ0RMY2dBQ2dDR0NBTlFRTjBhaXNEQUtNZ0U2TWlGQ0FTWkNJSUd5RUNJQWRCQVdvaEJ5QVVJQklnQ0JzaEVpQURJQUVnQ0JzaEFRd0JDd3NMSUFsQkFXb2hDUXdCQ3dzZ0JTQUNOZ0lBSUFRZ0FUWUNBQ0FHSUJJNUF3QWdDeEE0UVFBTUFRdEJmd3NMSVJFZ0RpUUdJQkVMVkFFQmZ5TUdJUU1qQmtFd2FpUUdJQU1nQWpZQ0FDQURRUkJxSWdKQ0FEY0NBQ0FDUVFBMkFnZ2dBaUFCSUFFUVlCQitJQU5CSEdvaUFTQUNJQU1Rb1FjZ0FDQUJFS0lISUFFUVJ5QUNFRWNnQXlRR0Mzd0JBWDhqQmlFR0l3WkJFR29rQmlBQUlBSTJBZ0FnQUNBRE5nSUVJQUFnQkRZQ0NDQUFRUUUyQWhBZ0FDQUVJQVZzTmdJVUlBWkJBRFlDQUNBR1FRUnFJQVlzQUF3NkFBQWdCa0VJYWlBR0tBSUFOZ0lBSUFCQkdHb2dBUkNsQnlBQUlBVkJBRWdFZnlBQ0VMa0RJQU5zQlNBRkN6WUNEQ0FHSkFZTGFnRUNmeU1HSVFFakJrRVFhaVFHQWtBQ1FBSkFBa0FnQUVFQmF3NENBQUVDQ3lBQUlRSU1BZ3RCQkNFQ0RBRUxRUkFRQlNFQUlBRkNBRGNDQUNBQlFRQTJBZ2dnQVVIa29BSkI1S0FDRUdBUWZpQUFJQUVRaGdJZ0FFR0k4Z0JCQlJBRUN5QUJKQVlnQWdzZUFDQUFRZ0EzQWdBZ0FFSUFOd0lJSUFCQ0FEY0NFQ0FBUWdBM0FoZ0xSd0VDZnlNR0lRRWpCa0dRQW1va0JpQUJRWUFDYWlJQ0VCTWFJQUZCZ0FKQnZKd0NJQUlRSWhBZ0dpQUFRZ0EzQWdBZ0FFRUFOZ0lJSUFBZ0FTQUJFR0FRZmlBQkpBWUxPZ0VDZnlNR0lRSWpCa0VRYWlRR0lBRWdBQ2dDQUd3aEF5QUNRUUE2QUFBZ0FFRUVhaUFESUFJUXJnY2dBRUVRYWlBQkVORURJQUlrQmd0TkFRSi9JQUFvQWd3RVFDQUFLQUlJRUw0RElBQkJBRFlDQ0NBQUtBSUVJUUlEUUNBQklBSkhCRUFnQUNnQ0FDQUJRUUowYWtFQU5nSUFJQUZCQVdvaEFRd0JDd3NnQUVFQU5nSU1Dd3NkQVFKL0EwQWdBQVJBSUFBb0FnQWhBaUFBRURnZ0FpRUFEQUVMQ3d1SEFnRUhmeU1HSVFjakJrRVFhaVFHSUFJb0FnQWlCaUFBS0FJQUlnaHJJUUFnQVVFQ1RnUkFJQUZCZm1wQkFoQTVJZ2tnQUVFRGRVNEVRQ0FBUVFKMVFRRnlJZ05CQTNRZ0NHb2lCQ0VBSUFOQkFXb2lCU0FCU0FSQUlBVWdBeUFFSUFSQkNHb2lCQkRCQVNJRkd5RURJQVFnQUNBRkd5RUFDeUFBSUFZUXdRRkZCRUFnQnlBR0tRSUFOd01BQTBBQ1FDQUdJQUFpQmlrQ0FEY0NBQ0FDSUFBMkFnQWdDU0FEU0EwQUlBTkJBWFJCQVhJaUEwRURkQ0FJYWlJRUlRQWdBMEVCYWlJRklBRklCRUFnQlNBRElBUWdCRUVJYWlJRUVNRUJJZ1ViSVFNZ0JDQUFJQVViSVFBTElBQWdCeERCQVVVTkFRc0xJQVlnQnlrREFEY0NBQXNMQ3lBSEpBWUxDQUFnQUVIOEFHb0xYUUVCZjBILy8vLy9BU0FCU1FSQUVBQUxJQUZCLy8vLy93RkxCRUJCQ0JBRklnQVFpQUVnQUVHMGl3RTJBZ0FnQUVINDl3QkJGaEFFQlNBQUlBRkJBM1FRVVNJQ05nSUVJQUFnQWpZQ0FDQUFJQUZCQTNRZ0FtbzJBZ2dMQ3hBQUlBQkNBRGNDQUNBQVFRQTJBZ2dMYlFBZ0FDb0NBQ0FCS2dJQWxDQUFLZ0lFSUFFcUFnU1VraUFBS2dJSUlBRXFBZ2lVa2lBQUtnSU1JQUVxQWd5VWtpQUFLZ0lRSUFFcUFoQ1VraUFBS2dJVUlBRXFBaFNVa2lBQUtnSVlJQUVxQWhpVWtpQUFLZ0ljSUFFcUFoeVVraUFBS2dJZ0lBRXFBaUNVa2d2VkFnRUpmU0FGSUFZcUFnQWdCeW9DQUpJZ0NDb0NBSklnQ1NvQ0FKSkRBQUNBUHBRaUNqZ0NBQ0FGSUFZcUFnUWdCeW9DQkpJZ0NDb0NCSklnQ1NvQ0JKSkRBQUNBUHBRaUN6Z0NCQ0FHS2dJQUlBcVRJZzBnRFpRZ0Jpb0NCQ0FMa3lJT0lBNlVrcEVnQnlvQ0FDQUtreUlQSUErVUlBY3FBZ1FnQzVNaUVDQVFsSktSa2lBSUtnSUFJQXFUSWhFZ0VaUWdDQ29DQkNBTGt5SVNJQktVa3BHU0lBa3FBZ0FnQ3BNaUNpQUtsQ0FKS2dJRUlBdVRJZ3NnQzVTU2taSkRBQUNBUHBRaURFTUFBQUFBV3dSL1FRQUZJQVJEQUFDQVB5QU1sYnRFelR0L1pwNmc5aitpdGlJTU9BSUFJQUFnRFNBTWxEZ0NBQ0FBSUE0Z0JDb0NBSlE0QWdRZ0FTQVBJQVFxQWdDVU9BSUFJQUVnRUNBRUtnSUFsRGdDQkNBQ0lCRWdCQ29DQUpRNEFnQWdBaUFTSUFRcUFnQ1VPQUlFSUFNZ0NpQUVLZ0lBbERnQ0FDQURJQXNnQkNvQ0FKUTRBZ1JCQVFzTERBQWdBQ0FCS1FJQU53SUFDeW9BSUFCQkFEWUNBQ0FBUVFBMkFnUWdBRUVBTmdJSUlBRUVRQ0FBSUFFUXdRTWdBQ0FCRU5vSEN3dHBBUVI5SUFBcUFoQWdBQ29DRkNBQUtnSWNJQUFxQWlBUWdBRWhCQ0FBS2dJTUlBQXFBaFFnQUNvQ0dDQUFLZ0lnRUlBQklRSWdBQ29DRENBQUtnSVFJQUFxQWhnZ0FDb0NIQkNBQVNFRElBUWdBQ29DQUpRZ0FpQUFLZ0lFbEpNZ0F5QUFLZ0lJbEpJTHRnSUJBWDBnQVJESEF5SURpeUFDWHdSL1FRQUZJQUJEQUFDQVB5QURsU0lDSUFFcUFoQWdBU29DRkNBQktnSWNJQUVxQWlBUWdBR1VPQUlBSUFBZ0FpQUJLZ0lJSUFFcUFnUWdBU29DSUNBQktnSWNFSUFCbERnQ0JDQUFJQUlnQVNvQ0JDQUJLZ0lJSUFFcUFoQWdBU29DRkJDQUFaUTRBZ2dnQUNBQ0lBRXFBaFFnQVNvQ0RDQUJLZ0lnSUFFcUFoZ1FnQUdVT0FJTUlBQWdBaUFCS2dJQUlBRXFBZ2dnQVNvQ0dDQUJLZ0lnRUlBQmxEZ0NFQ0FBSUFJZ0FTb0NDQ0FCS2dJQUlBRXFBaFFnQVNvQ0RCQ0FBWlE0QWhRZ0FDQUNJQUVxQWd3Z0FTb0NFQ0FCS2dJWUlBRXFBaHdRZ0FHVU9BSVlJQUFnQWlBQktnSUVJQUVxQWdBZ0FTb0NIQ0FCS2dJWUVJQUJsRGdDSENBQUlBSWdBU29DQUNBQktnSUVJQUVxQWd3Z0FTb0NFQkNBQVpRNEFpQkJBUXNMaXdJQkJYOGpCaUVJSXdaQkVHb2tCaUFGRUdraEJTQUFJQVFvQWdRZ0JDZ0NBR3RCQTNVUWdBSWdDRUVFYWlFS0EwQWdCaUFFS0FJRUlBUW9BZ0FpQjJ0QkEzVkpCRUFnQ0NBS0lBRWdBeWdDQUNJSklBWkJBM1FnQjJvb0FnUWlCMEVVYkdvcUFnQWdCMEVVYkNBSmFpb0NCQkM5QWlBSUtnSUFJQUlvQWdBZ0JDZ0NBQ0FHUVFOMGFpZ0NBRUVVYkdvcUFnQ1RFR2tnQ2lvQ0FDQUNLQUlBSUFRb0FnQWdCa0VEZEdvb0FnQkJGR3hxS2dJRWt4QnBraUFGWHdSQUlBUW9BZ0FnQmtFRGRHb2hCeUFBS0FJRUlna2dBQ2dDQ0VZRVFDQUFJQWNRbGdFRklBa2dCeWtDQURjQ0FDQUFJQUFvQWdSQkNHbzJBZ1FMQ3lBR1FRRnFJUVlNQVFzTElBZ2tCZ3ZwQWdJSmZ3RjlJd1loQnlNR1FVQnJKQVlnQjBFc2FpSUxJQU1vQWdRZ0F5Z0NBR3RCQTNVUXhnTWdCMEVnYWlJTUlBTW9BZ1FnQXlnQ0FHdEJBM1VReGdNZ0F5Z0NCQ0FES0FJQUlnTnJRUU4xSVEwZ0FTZ0NBQ0VPSUF3b0FnQWhDU0FDS0FJQUlRSWdDeWdDQUNFS0EwQWdDQ0FOUndSQUlBaEJBM1FnQ1dvZ0NFRURkQ0FEYWlnQ0FDSUJRUlJzSUE1cUtBSUFOZ0lBSUFoQkEzUWdDV29nQVVFVWJDQU9haWdDQkRZQ0JDQUlRUU4wSUFwcUlBaEJBM1FnQTJvb0FnUWlBVUVVYkNBQ2FpZ0NBRFlDQUNBSVFRTjBJQXBxSUFGQkZHd2dBbW9vQWdRMkFnUWdDRUVCYWlFSURBRUxDeUFIUXdBQUFBQTRBZ0FnQjBNQUFBQUFPQUlFSUFjZ0JiSWlFRGdDQ0NBSFF3QUFBQUE0QWd3Z0J5QVFPQUlRSUFjZ0JySWlFRGdDRkNBSFF3QUFBQUE0QWhnZ0J5QVFPQUljSUFRZ0FDQUtJQWtnRFNBSEVQd0hCSDhnQUNBRklBWVErd2NGUVFBTElROGdEQkJWSUFzUVZTQUhKQVlnRHd2OEF3RUtmeU1HSVFRakJrRXdhaVFHSUFSQklHb2hCU0FCSUFSQkRHb2dCRUVJYWlBRVFRUnFJQVFnQXhEWEJ5QUFJQUFvQWdBMkFnUWdBVUh3QUdvaERTQUJFTUFESWdNb0FnUWdBeWdDQUd0QkFuVWlDeUFDS0FJRUlBSW9BZ0JyUVFOMVN3UkFJQVZCd01nRFFaYUlBaEEzUVpENUFSQTNRZStpQWhBM1FkWUNFRDVCOXFJQ0VEZEJ4SWdDRURjaUF5QURLQUlBUVhScUtBSUFhaEE3SUFWQmdNNERFRG9pQmlnQ0FDZ0NIQ0VJSUFaQkNpQUlRVDl4UVlvQmFoRUNBQ0VHSUFVUVBDQURJQVlRUUNBREVEOFFBQXNnQkVFY2FpRUdJQVJCR0dvaENDQUVRUlJxSVFrZ0JFRVFhaUVLSUEwb0FnQWhBMEVBSVFVRFFDQUZJQXRJQkVBZ0FTQUdJQWdnQ1NBS0lBTXFBZ0FnQXlvQ0JDQURLZ0lJSUFNcUFnd2dCQ2dDRExkRUFBQUFBQUFBNEQrZ3RpQUVLQUlJdDBRQUFBQUFBQURnUDZDMklBUW9BZ1MzUkFBQUFBQUFBT0Evb0xZZ0JDZ0NBTGRFQUFBQUFBQUE0RCtndGhEV0J5QUdLZ0lBUXdBQWdEOWRJQWdxQWdCREFBQ0FQMTF4SUFrcUFnQkRBQUNBUDExeElBb3FBZ0JEQUFDQVAxMXhCRUFnQVJEQUF5Z0NBQ0FGUVFKMGFpZ0NBRUVEZENBQ0tBSUFhaUVISUFBb0FnUWlEQ0FBS0FJSVJnUkFJQUFnQnhDV0FRVWdEQ0FIS1FJQU53SUFJQUFnQUNnQ0JFRUlhallDQkFzTElBTkJFR29oQXlBRlFRRnFJUVVNQVFzTElBUWtCZ3ZQQXdJT2Z3RjlJd1loQ1NNR1FTQnFKQVlnQ1VFRWFpRVBJQWxCRkdvaURDQURLQUlFSUFNb0FnQnJRUUYxRUlRQ0lBbEJDR29pRFNBREtBSUVJQU1vQWdCclFRRjFFSVFDSUFNb0FnUWdBeWdDQUNJUWEwRURkU0VSSUFFb0FnQWhBU0FDS0FJQUlRSWdEQ2dDQUNFU0lBMG9BZ0FoRXdOQUlBb2dFVWNFUUNBS1FRTjBJQkJxS0FJRUlRc2dDa0VDZENJVVFRSjBJQkpxSWdnZ0NrRURkQ0FRYWlnQ0FDSU9RUlJzSUFGcUtBSUFOZ0lBSUFnZ0RrRVViQ0FCYWlnQ0JEWUNCQ0FJSUE1QkZHd2dBV29vQWdnMkFnZ2dDQ0FPUVJSc0lBRnFLQUlNTmdJTUlCUkJBblFnRTJvaUNDQUxRUlJzSUFKcUtBSUFOZ0lBSUFnZ0MwRVViQ0FDYWlnQ0JEWUNCQ0FJSUF0QkZHd2dBbW9vQWdnMkFnZ2dDQ0FMUVJSc0lBSnFLQUlNTmdJTUlBcEJBV29oQ2d3QkN3c2dBQ0FFc2lJV1E4M01URDZVSUJhU0loYU1JQllnQmJJaUZrUE56RXcrbENBV2tpSVdqQ0FXRU1NSElBQWdCa0VCZGJJNEFnZ2dBQ0FIUVFGMXNqZ0NEQ0FBSUFZMkFnQWdBQ0FITmdJRUlBQWdEQ2dDQUNBTktBSUFJQU1vQWdRZ0F5Z0NBR3RCQTNVUXdnY2dBQ0FQSUFrUXVRZEJmeUFKS0FJQUlBOHFBZ0JEQUFCQVFGMGJJUlVnRFJCVklBd1FWU0FKSkFZZ0ZRdEdBQU5BSUFFZ0FrY0VRQ0FBS0FJRUlnTWdBU2tDQURjQ0FDQURJQUVwQWdnM0FnZ2dBeUFCS0FJUU5nSVFJQUFnQUNnQ0JFRVVhallDQkNBQlFSUnFJUUVNQVFzTEN5Z0FJQUlnQVdzaUFrRUFTZ1JBSUFBb0FnUWdBU0FDRUV3YUlBQWdBQ2dDQkNBQ2FqWUNCQXNMT0FFQ2Z5QUFLQUlBSWdFaEFpQUJCRUFnQUNBQ05nSUVJQUFvQWdnYUlBRVFPQ0FBUVFBMkFnZ2dBRUVBTmdJRUlBQkJBRFlDQUFzTE13QWdBaUFCYXlJQ1FRQktCRUFnQWtFTUVFZ2hBeUFBS0FJRUlBRWdBaEJNR2lBQUlBQW9BZ1FnQTBFTWJHbzJBZ1FMQzFzQkEzOGdBQ2dDQkNJRElBQW9BZ0FpQkd0QkZCQTVJZ0lnQVVrRVFDQUFJQUVnQW1zUWhnZ0ZJQUlnQVVzRVFDQUJRUlJzSUFScUlRSWdBeUVCQTBBZ0FTQUNSd1JBSUFGQmJHb2hBUXdCQ3dzZ0FDQUNOZ0lFQ3dzTENnQWdBRUhnQURZQ0FBczlBUUovSUFBb0FnQWlBZ1JBSUFBb0FnUWhBUU5BSUFFZ0FrY0VRQ0FCUVhocUlRRU1BUXNMSUFBZ0FqWUNCQ0FBS0FJSUdpQUFLQUlBRURnTEN4Y0FJQUJDQURjQ0FDQUFRZ0EzQWdnZ0FFRUJPZ0FRQ3lzQkFYOGdBQ2dDQkNFQ0EwQWdBaERVQXlBQUlBQW9BZ1JCRkdvaUFqWUNCQ0FCUVg5cUlnRU5BQXNMWFFFQmYwSE1tYlBtQUNBQlNRUkFFQUFMSUFGQnpKbXo1Z0JMQkVCQkNCQUZJZ0FRaUFFZ0FFRzBpd0UyQWdBZ0FFSDQ5d0JCRmhBRUJTQUFJQUZCRkd3UVVTSUNOZ0lFSUFBZ0FqWUNBQ0FBSUFGQkZHd2dBbW8yQWdnTEN3a0FJQUFnQVRZQ0NBc1RBQ0FBUVFnMkFnUWdBRUVNYWtFSUVJY0JDd3NBSUFCQkFDQUJFRVVhQy93REFnVi9BbndqQmlFR0l3WkJvQUpxSkFZZ0JrR0FBbW9oQ0NBR1FjQUJhaUlFSUFGQnFBRnFRUVFnQVNnQ0RFRUFTQVIvSUFGQkZHb0ZJQUVvQWdoQkFFZ0VmeUFCUVJocUJTQUJRUkJxQ3dzb0FnQWlCV3RCQkJCUElnZEJCSFJxS3dNQU9RTUFJQVFnQVNBSFFRUjBhaXNEc0FFNUF3Z2dCQ0FCUWFnQmFrRUZJQVZyUVFRUVR5SUhRUVIwYWlzREFEa0RFQ0FFSUFFZ0IwRUVkR29yQTdBQk9RTVlJQVFnQVVHb0FXcEJCaUFGYTBFRUVFOGlCMEVFZEdvckF3QTVBeUFnQkNBQklBZEJCSFJxS3dPd0FUa0RLQ0FFSUFGQnFBRnFRUWNnQld0QkJCQlBJZ1ZCQkhScUt3TUFPUU13SUFRZ0FTQUZRUVIwYWlzRHNBRTVBemdnQmtIZ0FHb2lBU0FDUkFBQUFBQUFBT0Mvb2lJSk9RTUFJQUVnQWtRQUFBQUFBQURnUDZJaUFqa0RDQ0FCUkFBQUFBQUFBQUFBT1FNUUlBRWdBamtER0NBQklBSTVBeUFnQVVRQUFBQUFBQUFBQURrREtDQUJJQUk1QXpBZ0FTQUpPUU00SUFGQlFHdEVBQUFBQUFBQUFBQTVBd0FnQVNBSk9RTklJQUVnQ1RrRFVDQUJSQUFBQUFBQUFBQUFPUU5ZSUFaQmlBSnFJZ1VnQkRZQ0FDQUZJQUUyQWdRZ0JVRUVOZ0lJSUFBb0FnQWdCQ0FCUVFRZ0JoQ1lCRUVBU0FSOFJBQUFBQUNFMTVkQkJTQUFLQUlBSUFVZ0JpQURJQWdRNmdGQkFFZ2hBRVFBQUFBQWhOZVhRU0FJS3dNQUlBQWJDeUVLSUFZa0JpQUtDNzhDQUNBQUtBSUFJQUVvQWdBUWJDQUFLQUlFSUFFb0FnUVFiR29nQUNnQ0NDQUJLQUlJRUd4cUlBQW9BZ3dnQVNnQ0RCQnNhaUFBS0FJUUlBRW9BaEFRYkdvZ0FDZ0NGQ0FCS0FJVUVHeHFJQUFvQWhnZ0FTZ0NHQkJzYWlBQUtBSWNJQUVvQWh3UWJHb2dBQ2dDSUNBQktBSWdFR3hxSUFBb0FpUWdBU2dDSkJCc2FpQUFLQUlvSUFFb0FpZ1FiR29nQUNnQ0xDQUJLQUlzRUd4cUlBQW9BakFnQVNnQ01CQnNhaUFBS0FJMElBRW9BalFRYkdvZ0FDZ0NPQ0FCS0FJNEVHeHFJQUFvQWp3Z0FTZ0NQQkJzYWlBQVFVQnJLQUlBSUFGQlFHc29BZ0FRYkdvZ0FDZ0NSQ0FCS0FKRUVHeHFJQUFvQWtnZ0FTZ0NTQkJzYWlBQUtBSk1JQUVvQWt3UWJHb2dBQ2dDVUNBQktBSlFFR3hxSUFBb0FsUWdBU2dDVkJCc2FpQUFLQUpZSUFFb0FsZ1FiR29nQUNnQ1hDQUJLQUpjRUd4cUMwRUJBbjhnQVVFQlRnUkFBa0FnQUVFQU5nSUFRUUVoQWdOQUlBRWdBa1lOQVNBQ1FRSjBJQUJxSUFOQkFXb2lBellDQUNBQ1FRRnFJUUlNQUFBTEFBc0xDejRCQW44Z0FDZ0NCQ0FBS0FJQUlnUnJRUUoxSWdNZ0FVa0VRQ0FBSUFFZ0Eyc2dBaENmQ0FVZ0F5QUJTd1JBSUFBZ0FVRUNkQ0FFYWpZQ0JBc0xDOG9FQVExL0l3WWhFU01HUVJCcUpBWWdFVUVFYWlFU0lBaEJBa2toRkNBSVFRSkdJUlVEUUNBUUlBVklCRUFnRGtFSWRDQUxhaUFRUWJEeEJHd2dCR29vQWdBMkFnQWdDU0FRUWJEeEJHd2dCR29yQXdpMklCQkJzUEVFYkNBRWFpc0RFTFlnRWlBUkVLWUJRUUJPQkVBZ0RrRUlkQ0FMYWlBU0tnSUF1emtET0NBT1FRaDBJQXRxUVVCcklCRXFBZ0M3T1FNQUlCQkJzUEVFYkNBRWFrRWNhaUFRUWJEeEJHd2dCR3BCM0xnQ2FpQVFRYkR4Qkd3Z0JHb29BaGdnRUVHdzhRUnNJQVJxUVp6eEJHb2dDU0FPUVFoMElBdHFRY2dBYWlBT1FRaDBJQXRxUWFnQmFpSVBFS1lJUVFCT0JFQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUlBWWdCeUFJSUFBZ0FTQUNJQU1nQ1NBUElBb2dEa0VJZENBTGFrRUlhaUlXSUE1QkNIUWdDMnBCRkdvaUZ5QU9RUWgwSUF0cVFTaHFJaGdnRGtFSWRDQUxha0VNYWlJWklBNUJDSFFnQzJwQkdHb2lHaUFPUVFoMElBdHFRVEJxSWhNZ0RTQU9RUWgwSUF0cVFmQUJhaUFPUVFoMElBdHFRZmdCYWhEK0JpSVBRWHByRGdjRkJBTUNBUUFHQnd0QkFpRVBEQVVMUVFNaER3d0VDMEVFSVE4TUF3dEJCU0VQREFJTFFRa2hEd3dCQzBFQklROExJQTVCQ0hRZ0Myb2dEellDN0FFTEFrQUNRQ0FVQkVBZ0RrRUlkQ0FMYWlBV0tBSUFOZ0lFSUJnaEV5QVhJUThNQVFVZ0ZRUkFJQTVCQ0hRZ0Myb2dHU2dDQURZQ0JDQWFJUThNQWdzTERBRUxJQTVCQ0hRZ0Myb2dEeWdDQURZQ0VDQU9RUWgwSUF0cUlCTXJBd0E1QXlBTElBNUJBV29oRGdzTElCQkJBV29oRUF3QkN3c2dEQ0FPTmdJQUlCRWtCa0VBQ3dnQUlBQkI2QUJxQzY4SUFRaC9Jd1loQ1NNR1FTQnFKQVlnQUVFTWFpSUhLQUlFSUFBb0Ftd1F4Z0VnQlU0RVFDQUJRUUVRZ3dJZ0FSREZBU0FGRUljQlFRQWhBQU5BSUFBZ0JVZ0VRQ0FBUVFKMElBUnFLQUlBSVFJZ0FSREZBU2dDQUNBQVFRSjBhaUFDTmdJQUlBQkJBV29oQUF3QkN3c2dDU1FHRHdzZ0NVRVVhaUVHSUFsQ0FEY0NBQ0FKUWdBM0FnZ2dDVUdBZ0lEOEF6WUNFQ0FISUFJZ0F5QUVJQVVRcFFnZ0IwRVlhaUlNS0FJRUlnc2dEQ2dDQUNJSWEwRUNkU0FGUndSQUlBWkJ3TWdEUVpueEFSQTNRZEh4QVJBM1FlK2lBaEEzUWVzQ0VENUI5cUlDRURkQjJQSUJFRGNpQnlBSEtBSUFRWFJxS0FJQWFoQTdJQVpCZ000REVEb2lDaWdDQUNnQ0hDRU5JQXBCQ2lBTlFUOXhRWW9CYWhFQ0FDRUtJQVlRUENBSElBb1FRQ0FIRUQ4UUFBdEJBQ0VIQWtBQ1FBSkFBa0FEUUNBSElBc2dDR3RCQW5WSkJFQWdCMEVDZENBSWFpZ0NBQ0lJUVg5R0RRSWdDQ0FGVGcwRElBaEJBblFnQkdvaUNDZ0NBQ0FEVGcwRUlBZEJBblFnQkdvaEN5QUpJQWdRd3dJaUNDZ0NCQ0lLSUFnb0FnaEdCRUFnQ0NBTEVLUUlCU0FLSUFzb0FnQTJBZ0FnQ0NBS1FRUnFOZ0lFQ3lBSFFRRnFJUWNnRENnQ0FDRUlJQXdvQWdRaEN3d0JDd3NDUUNBSktBSU1RUUZHQkVBZ0FVRUJFSU1DSUFFUXhRRWdCUkNIQVVFQUlRQURRQ0FBSUFWT0RRSWdBRUVDZENBRWFpZ0NBQ0VDSUFFUXhRRW9BZ0FnQUVFQ2RHb2dBallDQUNBQVFRRnFJUUFNQUFBTEFBVWdBUkRmQXlBSktBSU1FS01JSUFsQkNHb2hCQU5BQWtBZ0JDZ0NBQ0lFUlEwRElBUW9BaEFnQkNnQ0RFWU5BRUdBQVJCUklnVWdBQkRoQXlBQ0lBUW9BZ2hCNEFCc2FoQ2lDQ0FHSUFVMkFnQWdCVUVBRUlNQ0lBRVEzd01pQlNnQ0JDSUhJQVVvQWdoR0JFQWdCU0FHRU1JQ0JTQUhJQVlvQWdBMkFnQWdCU0FGS0FJRVFRUnFOZ0lFQ3lBQUlBWW9BZ0FnQWlBRElBUW9BZ3dpQlNBRUtBSVFJQVZyUVFKMUVPQUREQUVMQ3lBR1FjRElBMEczOUFFUU4wSFI4UUVRTjBIdm9nSVFOMEdEQXhBK1FmYWlBaEEzUWVYMEFSQTNJZ0FnQUNnQ0FFRjBhaWdDQUdvUU95QUdRWURPQXhBNklnRW9BZ0FvQWh3aEFpQUJRUW9nQWtFL2NVR0tBV29SQWdBaEFTQUdFRHdnQUNBQkVFQWdBQkEvRUFBTEN5QUpFT2tESUFra0JnOExJQVpCd01nRFFlN3lBUkEzUWRIeEFSQTNRZStpQWhBM1FlMENFRDVCOXFJQ0VEZEJtZk1CRURjaUFDQUFLQUlBUVhScUtBSUFhaEE3REFJTElBWkJ3TWdEUWEvekFSQTNRZEh4QVJBM1FlK2lBaEEzUWU0Q0VENUI5cUlDRURkQjR2TUJFRGNpQUNBQUtBSUFRWFJxS0FJQWFoQTdEQUVMSUFaQndNZ0RRZnJ6QVJBM1FkSHhBUkEzUWUraUFoQTNRZThDRUQ1QjlxSUNFRGRCNHZNQkVEY2lBQ0FBS0FJQVFYUnFLQUlBYWhBN0N5QUdRWURPQXhBNklnRW9BZ0FvQWh3aEFpQUJRUW9nQWtFL2NVR0tBV29SQWdBaEFTQUdFRHdnQUNBQkVFQWdBQkEvRUFBTEV3QWdBQ0FBS0FJRUlnQkJBV28yQWdRZ0FBdkZBd0VJZnlBQkJFQUNRQ0FCUWYvLy8vOERTd1JBUVFnUUJTSUNFSWdCSUFKQnRJc0JOZ0lBSUFKQitQY0FRUllRQkFzZ0FVRUNkQkJSSVFJZ0FDZ0NBQ0VESUFBZ0FqWUNBQ0FEQkVBZ0FDZ0NCQm9nQXhBNEN5QUFJQUUyQWdSQkFDRUNBMEFnQVNBQ1J3UkFJQUFvQWdBZ0FrRUNkR3BCQURZQ0FDQUNRUUZxSVFJTUFRc0xJQUJCQ0dvaEF5QUFLQUlJSWdJRVFDQUNLQUlFSVFRZ0FTQUJRWDlxSWdoeFJTSUpCSDhnQkNBSWNRVWdCQ0FCVHdSL0lBUWdBUkJPQlNBRUN3c2hCaUFBS0FJQUlBWkJBblJxSUFNMkFnQURRQ0FDSVFRRFFBSkFBMEFDUUNBRUtBSUFJZ0pGRFFZZ0FpZ0NCQ0VESUFZZ0NRUi9JQU1nQ0hFRklBTWdBVThFZnlBRElBRVFUZ1VnQXdzTElnVkdEUUFnQUNnQ0FDQUZRUUowYWlJREtBSUFSUTBDSUFJaEF3TkFJQU1vQWdBaUJ3UkFJQUlvQWdnZ0J5Z0NDRVlFUUNBSElRTU1BZ3NMQ3lBRUlBYzJBZ0FnQXlBQUtBSUFJQVZCQW5ScUtBSUFLQUlBTmdJQUlBQW9BZ0FnQlVFQ2RHb29BZ0FnQWpZQ0FBd0JDd3NnQWlFRURBRUxDeUFESUFRMkFnQWdCU0VHREFBQUN3QUxDd1VnQUNnQ0FDRUJJQUJCQURZQ0FDQUJCRUFnQUNnQ0JCb2dBUkE0Q3lBQVFRQTJBZ1FMQ3pzQVFlQzhBeXdBQUVVRVFFSGd2QU1RY0FSQVFZakVBMEVBTmdJQVFZekVBMEVBTmdJQVFaREVBMEVBTmdJQVFlQzhBeEJ2Q3d0QmlNUURDd2tBSUFBZ0FUWUNCQXNKQUNBQUlBRTJBZ0FMVVFFQ2Z5TUdJUU1qQmtFUWFpUUdJQUFnQVRZQ0FFRVFFRkVpQWtFQU5nSUVJQUpCQURZQ0NDQUNRWnlHQVRZQ0FDQUNJQUUyQWd3Z0FDQUNOZ0lFSUFNZ0FUWUNBQ0FESUFFMkFnUWdBeVFHQ3pRQUlBQkJBRFlDQUNBQVFRQTJBZ1FnQUVJQU53SUlJQUJDQURjQ0VDQUFRZ0EzQWhnZ0FFRUFOZ0lnSUFCQkpHb1FsQWdMdVFFQkJYOGdBU2dDQUNFQklBQW9BZ1FpQWdSQUFrQWdBaUFDUVg5cUlnUnhSU0lGQkg4Z0FTQUVjUVVnQVNBQ1NRUi9JQUVGSUFFZ0FoQk9Dd3NpQmtFQ2RDQUFLQUlBYWlnQ0FDSUFCSDhEUUNBQUtBSUFJZ0JGQkVCQkFDRUFEQU1MSUFBb0FnUWlBeUFCUmdSQUlBRWdBQ2dDQ0VZTkF3VWdCUVJBSUFNZ0JIRWhBd1VnQXlBQ1R3UkFJQU1nQWhCT0lRTUxDeUFESUFaSEJFQkJBQ0VBREFRTEN3d0FBQXNBQlVFQUN5RUFDd1ZCQUNFQUN5QUFDeWtCQVg4Z0FDZ0NDQkMyQ0NBQUtBSUFJUUVnQUVFQU5nSUFJQUVFUUNBQUtBSUVHaUFCRURnTEMyMEJBWDhnQUVHVUJtb2lBVUVZYWhCVklBRkJER29RVlNBQkVGVWdBRUdNQldvaUFVSDhBR29RVlNBQlFmQUFhaEJWSUFGQjNBQnFFTVFISUFCQi9BUnFFRlVnQUVHZ0FXb1EvQWdnQUVIY0FHb1F4d0lnQUVISUFHb1F1UWdnQUVGQWF4Q1ZBU0FBUVF4cUVGVUxLQUVCZnlBQVFRUnFFT2tESUFBb0FnQWhBU0FBUVFBMkFnQWdBUVJBSUFFUTZnTWdBUkE0Q3d1d0J3SUhmd0Y4UWNZQUlRWkJ3SVE5SVFjZ0EwRUJSaUlMQkVCQnhnQkJCQkE1SVFaQndJUTlRUVFRT1NFSElBQkJBaEE1SVFBZ0FVRUNFRGtoQVFzZ0JVRUFOZ0lBSUFCQmZtb2hDQ0FCUVg1cUlRa2dBa0dRZ01nQWFpRU1RUUFoQVFKQUFrQURRQUpBSUFFZ0FpZ0NDRTROQWlBQ1FReHFJQUZCQW5ScUlnTW9BZ0FpQ2lBR1NDQUtJQWRLY2tVRVFDQUNRWXlBQ0dvZ0FVRUVkR29pQ2lnQ0FFRUJSd1JBSUFJZ0FVRUVkR3BCa0lBSWFpZ0NBQ0FJUndSQUlBSWdBVUVFZEdwQmxJQUlhaWdDQUVFQlJ3UkFJQUlnQVVFRWRHcEJtSUFJYWlnQ0FDQUpSd1JBSUFJb0FnQWdBQ0FNSUFGQkFXb2dDaUFGS0FJQVFiRHhCR3dnQkdvUXZnaEJBRTRFUUNBREtBSUFJQVVvQWdCQnNQRUViQ0FFYWhDM0NFRUFUZ1JBSUFVb0FnQkJzUEVFYkNBRWFpQURLQUlBTmdJQUlBVW9BZ0FpQTBHdzhRUnNJQVJxSUFKQmtJQW9haUFCUVFSMGFpc0RBRGtEQ0NBRFFiRHhCR3dnQkdvZ0FpQUJRUVIwYWtHWWdDaHFLd01BT1FNUUlBVWdBMEVCYWlJRE5nSUFJQU5CUEVZRVFFRThJUUFNQ0FzTEN3c0xDd3NMSUFGQkFXb2hBUXdCQ3dzTUFRc2dCU2dDQUNFQUMwRUFJUUVEUUNBQklBQklCRUFnQVVHdzhRUnNJQVJxSVFZZ0FVR3c4UVJzSUFScUlRY2dBVUd3OFFSc0lBUnFJUU1nQVVFQmFpSUJJUUlEUUNBQ0lBQklCRUFnQmlzRENDQUNRYkR4Qkd3Z0JHb3JBd2loSWcwZ0RhSWdCeXNERUNBQ1FiRHhCR3dnQkdvckF4Q2hJZzBnRGFLZ0lRMGdBeWdDQUNJQUlBSkJzUEVFYkNBRWFpSUlLQUlBSWdsS0JFQWdEU0FBUVFRUU9iZGpCRUFnQ0VFQU5nSUFDd1VnRFNBSlFRUVFPYmRqQkVBZ0EwRUFOZ0lBQ3dzZ0FrRUJhaUVDSUFVb0FnQWhBQXdCQ3dzTUFRc0xRUUFoQWdOQUlBSWdBRWdFUUNBQ1FiRHhCR3dnQkdvb0FnQkZCRUFnQWlFQklBQWhBd05BSUFGQkFXb2lBQ0FEU0FSQUlBRkJzUEVFYkNBRWFpQUFRYkR4Qkd3Z0JHcEJzUEVFRUV3YUlBQWhBU0FGS0FJQUlRTU1BUXNMSUFVZ0EwRi9haUlBTmdJQUN5QUNRUUZxSVFJTUFRc0xJQXNFUUFKQVFRQWhBUU5BSUFFZ0FFNE5BU0FFSUFRb0FnQkJBblEyQWdBZ0JDQUVLd01JUkFBQUFBQUFBQUJBb2prRENDQUVJQVFyQXhCRUFBQUFBQUFBQUVDaU9RTVFJQVFvQWhnaEFrRUFJUUFEUUNBQUlBSklCRUFnQkVFY2FpQUFRUUowYWlJRElBTW9BZ0JCQVhRMkFnQWdCRUhjdUFKcUlBQkJBblJxSWdNZ0F5Z0NBRUVCZERZQ0FDQUFRUUZxSVFBTUFRc0xJQVJCc1BFRWFpRUVJQUZCQVdvaEFTQUZLQUlBSVFBTUFBQUxBQXNMUVFBTEVnQWdBRUg4aFFFMkFnQWdBRUVFYWhCSEMwZ0JBWDhqQmlFREl3WkJJR29rQmlBRElBQW9BamdnQWlnQ0FDQUNLQUlFSUFJb0FnZ2dBaWdDREJDNEF5QUFJQU1nQWhEZ0FTQUFJQUVnQXhEZ0FTQURFTjBCSUFNa0JndUxBd0VFZndKQUFrQUNRQUpBSUFBb0FoZ09Bd0FBQVFJTElBQW9BaXdoQWdOQUlBRWdBazROQXlBQUlBRkJDSFJxSWdNb0FqUkJmMG9FUUNBQUlBRkJDSFJxS3dOUVJBQUFBQUFBQU9BL1l3UkFJQUFnQVVFSWRHcEJmellDT0NBRFFYODJBalFnQUNBQlFRaDBha0VHTmdLY0Fnc0xJQUZCQVdvaEFRd0FBQXNBQ3lBQUtBSXNJUUlEUUNBQklBSk9EUUlnQUNBQlFRaDBhaUlES0FJMFFYOUtCRUFnQUNBQlFRaDBhaXNEVUVRQUFBQUFBQURnUDJNRVFDQUFJQUZCQ0hScVFYODJBandnQTBGL05nSTBJQUFnQVVFSWRHcEJCallDbkFJTEN5QUJRUUZxSVFFTUFBQUxBQXNnQUNnQ0xDRURBMEFnQVNBRFRnMEJJQUFnQVVFSWRHb2lBaWdDT0VGL1NnUi9JQUFnQVVFSWRHb3JBMWhFQUFBQUFBQUE0RDlqQkg4Z0FrRi9OZ0k0UVFBRlFRRUxCVUVCQ3lFQ0lBQWdBVUVJZEdvaUJDZ0NQRUYvU2dSQUlBQWdBVUVJZEdvckEyQkVBQUFBQUFBQTREOWpCRUFnQkVGL05nSThJQUpGQkVBZ0FDQUJRUWgwYWtFR05nS2NBZ3NMQ3lBQlFRRnFJUUVNQUFBTEFBc0xDd0FnQUVNQUFBQS9rbzRMRFFBZ0FCRFNBVU1ZY2pFL2xRdTNBd0lEZndOOUlBQW9BZ0FpQkNvQ0FDSUhJQUVvQWdBaUF5b0NBQ0lHWFFSL1FRRUZJQVlnQjEwRWYwRUFCU0FFS0FJRUlBTW9BZ1JKQ3dzaEFTQUdJQUlvQWdBaUFpb0NBQ0lJWFFSL1FRRUZJQWdnQmwwRWYwRUFCU0FES0FJRUlBSW9BZ1JKQ3dzaEFBSi9JQUVFZnlBQUJFQWdCQ0FJT0FJQUlBSWdCemdDQUNBRUtBSUVJUUFnQkNBQ0tBSUVOZ0lFSUFJZ0FEWUNCRUVCREFJTElBUWdCamdDQUNBRElBYzRBZ0FnQkNnQ0JDRUZJQVFnQXlnQ0JEWUNCQ0FESUFVMkFnUWdCeUFDS2dJQUlnWmRCRUFnQWtFRWFpRUFJQUlvQWdRaEFRVkJBU0FHSUFkZERRSWFRUUVnQlNBQ1FRUnFJZ0FvQWdBaUFVOE5BaG9MSUFNZ0JqZ0NBQ0FDSUFjNEFnQWdBeUFCTmdJRUlBQWdCVFlDQUVFQ0JTQUFCSDhnQXlBSU9BSUFJQUlnQmpnQ0FDQURLQUlFSVFBZ0F5QUNLQUlFTmdJRUlBSWdBRFlDQkNBRUtnSUFJZ2NnQXlvQ0FDSUdYUVJBSUFSQkJHb2hBQ0FES0FJRUlRRWdCQ2dDQkNFQ0JVRUJJQVlnQjEwTkF4cEJBU0FFUVFScUlnQW9BZ0FpQWlBREtBSUVJZ0ZQRFFNYUN5QUVJQVk0QWdBZ0F5QUhPQUlBSUFBZ0FUWUNBQ0FESUFJMkFnUkJBZ1ZCQUFzTEN3dnRBUUVGZnlBQUtBSUFJUVlnQUNnQ0JDRURBMEFnQXlBR1J3UkFJQUVvQWdRaUJFRjBhaUlDUVFBMkFnQWdCRUY0YWlJRlFRQTJBZ0FnQkVGOGFpSUVRUUEyQWdBZ0FpQURRWFJxSWdJb0FnQTJBZ0FnQlNBRFFYaHFJZ1VvQWdBMkFnQWdCQ0FEUVh4cUlnTW9BZ0EyQWdBZ0EwRUFOZ0lBSUFWQkFEWUNBQ0FDUVFBMkFnQWdBU0FCS0FJRVFYUnFOZ0lFSUFJaEF3d0JDd3NnQUNnQ0FDRUNJQUFnQVNnQ0JEWUNBQ0FCSUFJMkFnUWdBQ2dDQkNFQ0lBQWdBU2dDQ0RZQ0JDQUJJQUkyQWdnZ0FDZ0NDQ0VDSUFBZ0FTZ0NERFlDQ0NBQklBSTJBZ3dnQVNBQktBSUVOZ0lBQ3lJQkFYOGdBQ2dDQ0NJQ1FRQWdBVUVNYkJCRkdpQUFJQUZCREd3Z0FtbzJBZ2dMSWdFQmZ5QUFLQUlFSWdKQkFDQUJRUXhzRUVVYUlBQWdBVUVNYkNBQ2FqWUNCQXNpQVFGL0lBQW9BZ1FpQWtFQUlBRkJBblFRUlJvZ0FDQUJRUUowSUFKcU5nSUVDeE1BSUFBZ0FUWUNWQ0FBUVR4cUlBRVEwUUlMT3dFQ2Z5QUFLQUlFSVFFRFFDQUFLQUlJSWdJZ0FVY0VRQ0FBSUFKQmJHbzJBZ2dNQVFzTElBQW9BZ0FpQVFSQUlBQW9BZ3dhSUFFUU9Bc0xxUUVCQTM4Z0FDZ0NBQ0VFSUFBb0FnUWhBZ05BSUFJZ0JFY0VRQ0FCS0FJRVFXeHFJZ01nQWtGc2FpSUNLUUlBTndJQUlBTWdBaWtDQ0RjQ0NDQURJQUlvQWhBMkFoQWdBU0FCS0FJRVFXeHFOZ0lFREFFTEN5QUFLQUlBSVFJZ0FDQUJLQUlFTmdJQUlBRWdBallDQkNBQUtBSUVJUUlnQUNBQktBSUlOZ0lFSUFFZ0FqWUNDQ0FBS0FJSUlRSWdBQ0FCS0FJTU5nSUlJQUVnQWpZQ0RDQUJJQUVvQWdRMkFnQUxjd0VCZnlBQVFRQTJBZ3dnQUNBRE5nSVFJQUVFUUNBQlFjeVpzK1lBU3dSQVFRZ1FCU0lERUlnQklBTkJ0SXNCTmdJQUlBTkIrUGNBUVJZUUJBVWdBVUVVYkJCUklRUUxDeUFBSUFRMkFnQWdBQ0FDUVJSc0lBUnFJZ0kyQWdnZ0FDQUNOZ0lFSUFBZ0FVRVViQ0FFYWpZQ0RBdmtBUUVHZnlNR0lRSWpCa0VRYWlRR0lBSkJDR29oQXlBQUJIOGdBU0FBUWZTR3J3TnFJZ1VvQWdCR0JIOUJBQVVnQUVHSWg2OERhaUlFS0FJQUlnWUVRQ0FHRUVrZ0JFRUFOZ0lBQ3dKQUFrQUNRQUpBSUFFT0JRTUFBQUFCQWdzZ0JDQUFLQUlrSUFBb0FpZ1Fnd2cyQWdBTUFnc2dBRUdFaDY4RGFrRUJOZ0lBSUFCQmdJZXZBMnBCQVRZQ0FFRUVJUUVNQVF0QkFFRURRY2lsQVNBQ0VEMUJBQ0VCQ3lBRklBRTJBZ0FnQUNnQ0FFRUJSZ1JBSUFNZ0FVRUNkRUdBQ0dvb0FnQTJBZ0JCQUVFRFFaS21BU0FERUQwTFFRQUxCVUYvQ3lFSElBSWtCaUFIQ3lnQUlBQWdBVGdDQUNBQUlBSTRBZ1FnQUNBRE9BSUlJQUFnQkRnQ0RDQUFJQVZCQVhFNkFCQUxld0VCZnlNR0lRSWpCa0VRYWlRR0lBQUVRQ0FBS0FJQUlBRkhCRUFDUUNBQUlBRTJBZ0FnQVVVRVFDQUFRZVNHcHdKcUlnQW9BZ0FRT0NBQVFRQTJBZ0FNQVFzZ0FFSGtocWNDYWlBQUtBSW9JQUFvQWlSc0VFUWlBRFlDQUNBQVJRUkFRUUJCQTBHNTJBSWdBaEE5UVFFUUFRc0xDd3NnQWlRR0M1b0JBUVIvSXdZaEJTTUdRUkJxSkFZZ0FpQUJheUlFUVc5TEJFQVFBQXNnQkVFTFNRUkFJQUFnQkRvQUN3VWdBQ0FFUVJCcVFYQnhJZ1lRVVNJRE5nSUFJQUFnQmtHQWdJQ0FlSEkyQWdnZ0FDQUVOZ0lFSUFNaEFBc2dBaUFCYXlFR0lBQWhBd05BSUFFZ0FrY0VRQ0FESUFFUVh5QUJRUUZxSVFFZ0EwRUJhaUVEREFFTEN5QUZRUUE2QUFBZ0FDQUdhaUFGRUY4Z0JTUUdDNElCQVFOL0l3WWhBaU1HUVJCcUpBWWdBQVJBSUFBb0FnQWlBUVJBSUFFb0FnQWlBUVJBSUFFUU9BdEJBQ0VCQTBBZ0FTQUFLQUlBSWdNb0FneElCRUFnQXlnQ0NDQUJRUXhzYWlnQ0FCQTRJQUZCQVdvaEFRd0JDd3NnQXlnQ0NCQTRJQUFvQWdBUU9DQUFRUUEyQWdBTEJVRUFRUU5CM0xnQklBSVFQUXNnQWlRR0N4RUFJQUFnQUNnQ0FDQUFLQUlFRUtVSkM2NEJBUVYvSXdZaEJTTUdRUkJxSkFZZ0FDQUNJQU1nQlVFRWFpQUZFS1lKUVFCSUJIOUJmd1VnQlNvQ0JDQUJLZ0lNSWdLVVF6TXp5MEdWUXdBQUFEK1NFRU1pQUVFQVNBUi9RWDhGSUFFb0FnUWlCeUFBU2dSL0lBRW9BZ2dpQ0xJZ0FpQUZLZ0lBbEVNek04dEJsWk5EQUFBQVA1SVFReUlHUVg5S0lBZ2dCa3B4Qkg4Z0JDQUJLQUlBSUFBZ0JpQUhiR3BxTEFBQU9nQUFRUUFGUVg4TEJVRi9Dd3NMSVFrZ0JTUUdJQWtMdlFJQ0JIOENmU01HSVFZakJrRkFheVFHSUFaQk5Hb2hCeUFHUVRCcUlRZ2dBQVIvSUFCQkNHb2dBU0FHRVBvQklBQkJ1QUZxSWdBZ0Jpb0NEQ0FHS2dJQUlBS1VJQVlxQWdRZ0E1U1NraUFHS2dJc0lBWXFBaUFnQXBRZ0Jpb0NKQ0FEbEpLU0lndVZJZ29nQmlvQ0hDQUdLZ0lRSUFLVUlBWXFBaFFnQTVTU2tpQUxsU0lESUFRZ0JSQnRRUUJJQkg5QmZ3VWdBQ0FFS2dJQUlBVXFBZ0FnQnlBSUVLWUJRUUJJQkg5QmZ3VWdDaUFIS2dJQWt5SUNJQUtVSUFNZ0NDb0NBSk1pQWlBQ2xKSkRBQUNBUDE1QkgzUkJIM1VMQ3dVZ0FTb0NIQ0FCS2dJUUlBS1VJQUVxQWhRZ0E1U1NraUVLSUFRZ0FTb0NEQ0FCS2dJQUlBS1VJQUVxQWdRZ0E1U1NraUFCS2dJc0lBRXFBaUFnQXBRZ0FTb0NKQ0FEbEpLU0lnS1ZPQUlBSUFVZ0NpQUNsVGdDQUVFQUN5RUpJQVlrQmlBSkM0WUxBUXAvSUFNb0FoZ2hDQUpBQWtBQ1FDQUNRUVZyRGdvQUFRRUJBUUVCQUFBQUFRc2dBeWdDRENFTElBTW9BaFFoRFNBQlFRRjBJUTRnQUNBRVFRQWdBeWdDQ0dzaUIwRUJkR29nQVNBRlFRQWdBeWdDRUdzaUJVRUJkR3BzYW1vaEJFRUFJUUJCQUNFQlFRQWhBZ05BSUFVZ0RVb0VRQXdEQlNBSElRd2dCQ0VKQTBBZ0RDQUxUQVJBSUFndUFRQWlEMEdBSUVjRVFDQUFJQWt0QUFBaUNtb2hBQ0FCSUFvZ0NteHFJUUVnQWlBUFFmLy9BM0VnQ214cUlRSUxJQXhCQVdvaERDQUlRUUpxSVFnZ0NVRUNhaUVKREFFTEN5QUVJQTVxSVFRZ0JVRUJhaUVGREFFTEFBQUxBQXNnQWtFQ1NRUkFJQU1vQWhRaERrRUFJQU1vQWhCcklRb2dDQ0VKUVFBaEFrRUFJUWdEUUNBS0lBNUtCRUFnQWlFQUlBZ2hBU0FNSVFJTUF3VWdBeWdDRENFUFFRQWdBeWdDQ0NJSGF5RUxJQUFnQkNBQklBVWdDa0VCZEdwc2FpQUhRUUYwYTBFRGJHb2hCd05BSUFzZ0Qwd0VRQ0FKTGdFQUloQkJnQ0JIQkVBZ0FpQUhMUUFDSUFjdEFBQWdCeTBBQVdwcVFRTVFTQ0lOYWlFQ0lBZ2dEU0FOYkdvaENDQU1JQkJCLy84RGNTQU5iR29oREFzZ0MwRUJhaUVMSUFkQkJtb2hCeUFKUVFKcUlRa01BUXNMSUFwQkFXb2hDZ3dCQ3dBQUN3QUxJQUpCQVhKQkEwWUVRQ0FES0FJVUlRNUJBQ0FES0FJUWF5RUtJQWdoQ1VFQUlRSkJBQ0VJQTBBZ0NpQU9TZ1JBSUFJaEFDQUlJUUVnRENFQ0RBTUZJQU1vQWd3aEQwRUFJQU1vQWdnaUIyc2hDeUFBSUFRZ0FTQUZJQXBCQVhScWJHb2dCMEVCZEd0QkFuUnFJUWNEUUNBTElBOU1CRUFnQ1M0QkFDSVFRWUFnUndSQUlBSWdCeTBBQWlBSExRQUFJQWN0QUFGcWFrRURFRWdpRFdvaEFpQUlJQTBnRFd4cUlRZ2dEQ0FRUWYvL0EzRWdEV3hxSVF3TElBdEJBV29oQ3lBSFFRaHFJUWNnQ1VFQ2FpRUpEQUVMQ3lBS1FRRnFJUW9NQVFzQUFBc0FDeUFDUVFKeVFRWkdCRUFnQXlnQ0ZDRU9RUUFnQXlnQ0VHc2hDaUFJSVFsQkFDRUNRUUFoQ0FOQUlBb2dEa29FUUNBQ0lRQWdDQ0VCSUF3aEFnd0RCU0FES0FJTUlROUJBQ0FES0FJSUlnZHJJUXNnQUNBRUlBRWdCU0FLUVFGMGFteHFJQWRCQVhSclFRSjBhaUVIQTBBZ0N5QVBUQVJBSUFrdUFRQWlFRUdBSUVjRVFDQUNJQWN0QUFNZ0J5MEFBU0FITFFBQ2FtcEJBeEJJSWcxcUlRSWdDQ0FOSUExc2FpRUlJQXdnRUVILy93TnhJQTFzYWlFTUN5QUxRUUZxSVFzZ0IwRUlhaUVISUFsQkFtb2hDUXdCQ3dzZ0NrRUJhaUVLREFFTEFBQUxBQXNDUUFKQUFrQWdBa0VIYXc0Q0FBRUNDeUFES0FJVUlRNUJBQ0VDUVFBZ0F5Z0NFR3NoQ2lBSUlRY0RRQ0FLSUE1S0JFQWdBaUVBSUFraEFTQU1JUUlNQkFVZ0F5Z0NEQ0VQSUFraENFRUFJQU1vQWdnaUMyc2hDU0FBSUFRZ0FTQUZJQXBCQVhScWJHb2dDMEVCZEd0QkFYUnFJUXNEUUNBSklBOU1CRUFnQnk0QkFDSVFRWUFnUndSQUlBSWdDeTBBQVNJTmFpRUNJQWdnRFNBTmJHb2hDQ0FNSUJCQi8vOERjU0FOYkdvaERBc2dDVUVCYWlFSklBdEJCR29oQ3lBSFFRSnFJUWNNQVFzTElBZ2hDU0FLUVFGcUlRb01BUXNBQUFzQUN5QURLQUlVSVE0Z0NDRUpRUUFoQWtFQUlRaEJBQ0FES0FJUWF5RUhBMEFnQnlBT1NnUkFJQUloQUNBSUlRRWdEQ0VDREFNRklBTW9BZ3doRDBFQUlBTW9BZ2dpQzJzaENpQUFJQVFnQVNBRklBZEJBWFJxYkdvZ0MwRUJkR3RCQVhScUlRc0RRQ0FLSUE5TUJFQWdDUzRCQUNJUVFZQWdSd1JBSUFJZ0N5MEFBQ0lOYWlFQ0lBZ2dEU0FOYkdvaENDQU1JQkJCLy84RGNTQU5iR29oREFzZ0NVRUNhaUVKSUFwQkFXb2hDaUFMUVFScUlRc01BUXNMSUFkQkFXb2hCd3dCQ3dBQUN3QUxRUUFoQUVFQUlRRkJBQ0VDQ3lBR0lBRWdBQ0FBYkNBREtBSWtJZ0VRT1dzaUJBUi9JQUlnQUNBREtBSWdiQ0FCRURsclFlUUFiQ0FES0FJY0VEbEI1QUJzSUFTeWtSQkRFRGtGUVFBTE5nSUFDMFVCQW4wZ0FTb0NBQ0FBS2dJQUlnT1RJQUlxQWdRZ0FDb0NCQ0lFazVRZ0FTb0NCQ0FFa3lBQ0tnSUFJQU9UbEpOREFBQUFQNVFpQTR3Z0F5QURRd0FBQUFCZEd3dUlEZ01JZndGK0RYMGpCaUVHSXdaQklHb2tCaUFHUVJScUlRY2dCa0VRYWlFSUlBWkJER29oQ1NBR1FRaHFJUW9nQmtFRWFpRUxJQUpCQUVnRVFFRi9JUUVGQWtBQ1FBSkFBa0FDUUFKQUlBSU9CQUFCQWdNRUN5QUVRUWdRT2JJaEVpQUVRUWRzUVFnUU9iSWhFeUFGUVFnUU9iSWhGQ0FGUVFkc1FRZ1FPYkloRlNBRVFRSVFPYkloRmlBRlFRSVFPYkloRjBFQUlRSkJmeUVCQTBBQ1FBSkFBa0FnQWtFWWJDQUFhaWdDREVGL2F3NENBZ0FCQ3lBQ1FSaHNJQUJxS2dJUUlnOGdFbDBnRHlBVFhuSkZCRUFnQWtFWWJDQUFhaW9DRkNJUUlCUmRJQkFnRlY1eVJRUkFJQThnRnBNaUR5QVBsQ0FRSUJlVElnOGdENVNTSWc4Z0VWNEVRQ0FQSVJFZ0FpRUJDd3NMQ3lBQ1FRRnFJUUlNQVFzTElBRkJmMFlFUUVGL0lRRU1CUXNnQVVFWWJDQUFha0VCTmdJTURBUUxJQVJCQ0JBNXNpRVNJQVJCQjJ4QkNCQTVzaUVUSUFWQkNCQTVzaUVVSUFWQkIyeEJDQkE1c2lFVlFYOGhBVUVBSVFJRFFBSkFBa0FDUUNBQ1FSaHNJQUJxS0FJTVFYOXJEZ0lDQUFFTElBSkJHR3dnQUdvcUFoQWlEeUFTWFNBUElCTmVja1VFUUNBQ1FSaHNJQUJxS2dJVUloQWdGRjBnRUNBVlhuSkZCRUFnRHlBREtnSUFreUlQSUErVUlCQWdBeW9DQkpNaUR5QVBsSklpRHlBUlhnUkFJQThoRVNBQ0lRRUxDd3NMSUFKQkFXb2hBZ3dCQ3dzZ0FVRi9SZ1JBUVg4aEFRd0VDeUFCUVJoc0lBQnFRUUUyQWd3TUF3c2dCRUVJRURteUlSSWdCRUVIYkVFSUVEbXlJUk1nQlVFSUVEbXlJUlFnQlVFSGJFRUlFRG15SVJWQmZ5RUJRUUFoQWdOQUFrQUNRQUpBSUFKQkdHd2dBR29vQWd4QmYyc09BZ0lBQVFzZ0FrRVliQ0FBYWlvQ0VDSVBJQkpkSUE4Z0UxNXlSUVJBSUFKQkdHd2dBR29xQWhRaUVDQVZYaUFRSUJSZGNrVUVRQ0FQSUFNcUFnQWlENU1nQXlvQ0RDQURLZ0lFSWhhVGxDQVFJQmFUSUFNcUFnZ2dENU9Va3lJUElBK1VJZzhnRVY0RVFDQVBJUkVnQWlFQkN3c0xDeUFDUVFGcUlRSU1BUXNMSUFGQmYwWUVRRUYvSVFFTUF3c2dBVUVZYkNBQWFrRUJOZ0lNREFJTElBTWdBMEVJYWlBSElBZ1Eyd0lnQXlBRFFSQnFJQWtnQ2hEYkFpQUVRUWdRT2JJaEZpQUVRUWRzUVFnUU9iSWhGeUFGUVFnUU9iSWhHQ0FGUVFkc1FRZ1FPYkloR1NBRFFSaHFJUXdnQ1NvQ0FDSVVJQWdxQWdBaUVwUWlFU0FLS2dJQUloVWdCeW9DQUNJVGxDSVBrME1BQUFBQVlFVWhDU0FQSUJHVFF3QUFBQUJnUlNFTlFRSkJBU0FKR3lFSFFRRkJBaUFKR3lFSVFYOGhBVUVBSVFKREFBQUFBQ0VSQTBBQ1FBSkFBa0FnQWtFWWJDQUFhaWdDREVGL2F3NENBZ0FCQ3lBQ1FSaHNJQUJxS2dJUUlnOGdGbDBnRHlBWFhuSkZCRUFnQWtFWWJDQUFhaUlFS2dJVUloQWdHRjBnRUNBWlhuSkZCRUFnRENBUE9BSUFJQU1nQkNnQ0ZEWUNIQ0FESUF3Z0N5QUdFTnNDSUFzcUFnQWhEd0ovQWtBZ0NRUi9JQVlxQWdBaEVBd0JCU0FTSUErVUlCTWdCaW9DQUNJUWxKTkRBQUFBQUdBRWYwRUNRUU1nRlNBUGxDQVVJQkNVazBNQUFBQUFZRVVpQlJzaEJFRUJJUXBCQTBFQ0lBVWJCUXdDQ3dzTUFRc2dEU0FWSUErVUlob2dGQ0FRbENJYmswTUFBQUFBWUVWeUJIOGdFeUFRbENBU0lBK1VrME1BQUFBQVlFVWdHeUFhazBNQUFBQUFZRVZ5RFFSQkF5RUtJQWdoQkNBSEJVRUJRUU1nRWlBUGxDQVRJQkNVazBNQUFBQUFZRVVpQlJzaEJFRUNJUXBCQTBFQklBVWJDd3NoQlNBRElBb2dCU0FFRUxBSklnOGdFVjRFZnlBUElSRWdBZ1VnQVFzaEFRc0xDeUFDUVFGcUlRSU1BUXNMSUFGQmYwY0VRQ0FCUVJoc0lBQnFRUUUyQWd3TERBRUxRUUFoQXdKQUFrQURRQUpBQWtBQ1FDQURRUmhzSUFGcUlnSW9BZ3hCZjJzT0FnSUFBUXNnQWtFQk5nSU1JQU5CR0d3Z0FXb2hCQ0FEUVJoc0lBRnFJUVVnQTBFWWJDQUJhaUVIUVFBaEFnTkFBa0FDUUNBQ1FSaHNJQUJxSWdnb0FneEJmMnNPQWdNQUFRc2dCQ2dDQUNBQ1FSaHNJQUJxS0FJQVJnUkFJQVVvQWdRZ0FrRVliQ0FBYWlnQ0JFWUVRQ0FIS0FJSUlBSkJHR3dnQUdvb0FnaEdEUWNMQ3dzZ0FrRUJhaUVDREFBQUN3QUxJQU5CQVdvaEF3d0JDd3NNQVFzZ0NFRUJOZ0lNSUFJaEFRd0JDeUFCUVg4MkFneEJoTVFEUVFCQmhNUURLQUlBSWdFRWZ5QUJCVUhvdmdOQkFCQVRRWDlxclRjREFFR0V4QU1vQWdBTFFRRnFJZ0VnQVVHQUFVWWJOZ0lBUVFBaEFVRUFJUUlEUUFKQUFrQUNRQ0FDUVJoc0lBQnFLQUlNUVg5ckRnSUNBQUVMSUFGQkFXb2hBUXNnQWtFQmFpRUNEQUVMQ3lBQlJRUkFRWDhoQVF3QkMwSG92Z05CNkw0REtRTUFRcTMrMWVUVWhmMm8yQUIrUWdGOElnNDNBd0FnQWJJZ0RrSWhpS2V5bEVNQUFBQXdsQkJESVFSQkFDRUNRUUFoQVFOQUFrQUNRQUpBQWtBZ0FrRVliQ0FBYWlJRktBSU1JZ05CZjJzT0FnQUJBZ3NnQXlFQkRBUUxJQUVnQkVZTkFTQUJRUUZxSVFFTElBSkJBV29oQWd3QkN3c2dCVUVCTmdJTUlBSWhBUXNMSUFZa0JpQUJDNWdFQWdGL0VYMGpCaUVFSXdaQk1Hb2tCaUFBQkVBZ0FFRUlhaUFCSUFRUStnRWdBaW9DQUNJTElBUXFBZ0FpRkpRaERpQUNLZ0lFSWdZZ0JDb0NCQ0lNbENFUElBWWdCQ29DRkNJTmxDRVFJQVFxQWl3aUNpQUxJQVFxQWlBaUI1UWlDU0FHSUFRcUFpUWlDSlFpQlpLU0lSRWdDaUFMUXdBQUlFR1NJaElnQjVRZ0JaS1NJUk1nQ2lBSklBWkRBQUFnUVpJaUJpQUlsSktTSVFvZ0JDb0NIQ0lISUFzZ0JDb0NFQ0lJbENJRklBWWdEWlNTa2lBS2xTRUxJQVFxQWd3aUNTQU9JQVlnREpTU2tpQUtsU0VNQlNBQ0tnSUFJZ3NnQVNvQ0FDSVVsQ0VPSUFJcUFnUWlCaUFCS2dJRUlneVVJUThnQmlBQktnSVVJZzJVSVJBZ0FTb0NMQ0lLSUFzZ0FTb0NJQ0lIbENJSklBWWdBU29DSkNJSWxDSUZrcEloRVNBS0lBdERBQUFnUVpJaUVpQUhsQ0FGa3BJaEV5QUtJQWtnQmtNQUFDQkJraUlHSUFpVWtwSWhDaUFCS2dJY0lnY2dDeUFCS2dJUUlnaVVJZ1VnQmlBTmxKS1NJQXFWSVFzZ0FTb0NEQ0lKSUE0Z0JpQU1sSktTSUFxVklRd0xJQWNnRWlBSWxDQVFrcElnRTVVaERTQUpJQklnRkpRZ0Q1S1NJQk9WSVJVZ0J5QUZJQkNTa2lBUmxTRUhJQWtnRGlBUGtwSWdFWlVoQ1NBVklBbVRJZ1VnQlpRZ0RTQUhreUlGSUFXVWtpSUlJQXdnQ1pNaUJTQUZsQ0FMSUFlVElnVWdCWlNTSWdWZElRQWdBeUFGSUFnZ0FCdVJRMXlQSWtDVU9BSUFJQU1nQ0NBRklBQWJrVU5janlKQWxEZ0NCQ0FFSkFaQkFBc2ZBQ0FBQkg4Z0FDQUJJQUlnQXhDR0JBVkJBQ0FCSUFJZ0F4Q0dCQXNhQ3dZQVFSd1FBZ3NHQUVFYkVBSUxCZ0JCRnhBQ0N3WUFRUklRQWdzSUFFRVBFQUpDQUFzSUFFRU1FQUpCQUFzSUFFRUtFQUpCQUF1TUFRRUNmeU1GUVFGcUpBVWdBQ01GTmdJQUEwQWdCQ0FEU0FSQUlBUkJBM1FnQW1vb0FnQkZCRUFnQkVFRGRDQUNhaU1GTmdJQUlBUkJBM1JCQkdvZ0Ftb2dBVFlDQUNBRVFRTjBRUWhxSUFKcVFRQTJBZ0FnQXhBRElBSVBDeUFFUVFGcUlRUU1BUXNMSUFBZ0FTQUNJQU5CQVhRaUFFRUJha0VEZEJEb0FTQUFFSThFSVFVZ0FCQURJQVVMcnd3QkIzOGdBQ0FCYWlFRklBQW9BZ1FpQTBFQmNVVUVRQUpBSUFBb0FnQWhBaUFEUVFOeFJRUkFEd3NnQVNBQ2FpRUJJQUFnQW1zaUFFSEEwUU1vQWdCR0JFQWdCU2dDQkNJQ1FRTnhRUU5IRFFGQnRORURJQUUyQWdBZ0JTQUNRWDV4TmdJRUlBQWdBVUVCY2pZQ0JDQUZJQUUyQWdBUEN5QUNRUU4ySVFRZ0FrR0FBa2tFUUNBQUtBSUlJZ0lnQUNnQ0RDSURSZ1JBUWF6UkEwR3MwUU1vQWdCQkFTQUVkRUYvYzNFMkFnQUZJQUlnQXpZQ0RDQURJQUkyQWdnTERBRUxJQUFvQWhnaEJ5QUFJQUFvQWd3aUFrWUVRQUpBSUFCQkVHb2lBMEVFYWlJRUtBSUFJZ0lFUUNBRUlRTUZJQU1vQWdBaUFrVUVRRUVBSVFJTUFnc0xBMEFDUUNBQ1FSUnFJZ1FvQWdBaUJrVUVRQ0FDUVJCcUlnUW9BZ0FpQmtVTkFRc2dCQ0VESUFZaEFnd0JDd3NnQTBFQU5nSUFDd1VnQUNnQ0NDSURJQUkyQWd3Z0FpQUROZ0lJQ3lBSEJFQWdBQ0FBS0FJY0lnTkJBblJCM05NRGFpSUVLQUlBUmdSQUlBUWdBallDQUNBQ1JRUkFRYkRSQTBHdzBRTW9BZ0JCQVNBRGRFRi9jM0UyQWdBTUF3c0ZJQWRCRUdvaUF5QUhRUlJxSUFBZ0F5Z0NBRVliSUFJMkFnQWdBa1VOQWdzZ0FpQUhOZ0lZSUFBb0FoQWlBd1JBSUFJZ0F6WUNFQ0FESUFJMkFoZ0xJQUFvQWhRaUF3UkFJQUlnQXpZQ0ZDQURJQUkyQWhnTEN3c0xJQVVvQWdRaUIwRUNjUVJBSUFVZ0IwRitjVFlDQkNBQUlBRkJBWEkyQWdRZ0FDQUJhaUFCTmdJQUlBRWhBd1VnQlVIRTBRTW9BZ0JHQkVCQnVORURJQUZCdU5FREtBSUFhaUlCTmdJQVFjVFJBeUFBTmdJQUlBQWdBVUVCY2pZQ0JFSEEwUU1vQWdBZ0FFY0VRQThMUWNEUkEwRUFOZ0lBUWJUUkEwRUFOZ0lBRHdzZ0JVSEEwUU1vQWdCR0JFQkJ0TkVESUFGQnRORURLQUlBYWlJQk5nSUFRY0RSQXlBQU5nSUFJQUFnQVVFQmNqWUNCQ0FBSUFGcUlBRTJBZ0FQQ3lBSFFRTjJJUVFnQjBHQUFra0VRQ0FGS0FJSUlnSWdCU2dDRENJRFJnUkFRYXpSQTBHczBRTW9BZ0JCQVNBRWRFRi9jM0UyQWdBRklBSWdBellDRENBRElBSTJBZ2dMQlFKQUlBVW9BaGdoQ0NBRktBSU1JZ0lnQlVZRVFBSkFJQVZCRUdvaUEwRUVhaUlFS0FJQUlnSUVRQ0FFSVFNRklBTW9BZ0FpQWtVRVFFRUFJUUlNQWdzTEEwQUNRQ0FDUVJScUlnUW9BZ0FpQmtVRVFDQUNRUkJxSWdRb0FnQWlCa1VOQVFzZ0JDRURJQVloQWd3QkN3c2dBMEVBTmdJQUN3VWdCU2dDQ0NJRElBSTJBZ3dnQWlBRE5nSUlDeUFJQkVBZ0JTZ0NIQ0lEUVFKMFFkelRBMm9pQkNnQ0FDQUZSZ1JBSUFRZ0FqWUNBQ0FDUlFSQVFiRFJBMEd3MFFNb0FnQkJBU0FEZEVGL2MzRTJBZ0FNQXdzRklBaEJFR29pQXlBSVFSUnFJQU1vQWdBZ0JVWWJJQUkyQWdBZ0FrVU5BZ3NnQWlBSU5nSVlJQVVvQWhBaUF3UkFJQUlnQXpZQ0VDQURJQUkyQWhnTElBVW9BaFFpQXdSQUlBSWdBellDRkNBRElBSTJBaGdMQ3dzTElBQWdBU0FIUVhoeGFpSURRUUZ5TmdJRUlBQWdBMm9nQXpZQ0FDQUFRY0RSQXlnQ0FFWUVRRUcwMFFNZ0F6WUNBQThMQ3lBRFFRTjJJUUlnQTBHQUFra0VRQ0FDUVFOMFFkVFJBMm9oQVVHczBRTW9BZ0FpQTBFQklBSjBJZ0p4Qkg4Z0FVRUlhaUlES0FJQUJVR3MwUU1nQWlBRGNqWUNBQ0FCUVFocUlRTWdBUXNoQWlBRElBQTJBZ0FnQWlBQU5nSU1JQUFnQWpZQ0NDQUFJQUUyQWd3UEN5QURRUWgySWdFRWZ5QURRZi8vL3dkTEJIOUJId1VnQVNBQlFZRCtQMnBCRUhaQkNIRWlBblFpQkVHQTRCOXFRUkIyUVFSeElRRkJEaUFCSUFKeUlBUWdBWFFpQVVHQWdBOXFRUkIyUVFKeElnSnlheUFCSUFKMFFROTJhaUlCUVFGMElBTWdBVUVIYW5aQkFYRnlDd1ZCQUFzaUFrRUNkRUhjMHdOcUlRRWdBQ0FDTmdJY0lBQkJBRFlDRkNBQVFRQTJBaEFDUUVHdzBRTW9BZ0FpQkVFQklBSjBJZ1p4UlFSQVFiRFJBeUFFSUFaeU5nSUFJQUVnQURZQ0FBd0JDeUFESUFFb0FnQWlBU2dDQkVGNGNVWUVRQ0FCSVFJRkFrQWdBMEVBUVJrZ0FrRUJkbXNnQWtFZlJodDBJUVFEUUNBQlFSQnFJQVJCSDNaQkFuUnFJZ1lvQWdBaUFnUkFJQVJCQVhRaEJDQURJQUlvQWdSQmVIRkdEUUlnQWlFQkRBRUxDeUFHSUFBMkFnQU1BZ3NMSUFJb0FnZ2lBU0FBTmdJTUlBSWdBRFlDQ0NBQUlBRTJBZ2dnQUNBQ05nSU1JQUJCQURZQ0dBOExJQUFnQVRZQ0dDQUFJQUEyQWd3Z0FDQUFOZ0lJQzgwQkFRTi9RZS8vLy84RElBRnJJQUpKQkVBUUFBc2dBQ3dBQzBFQVNBUi9JQUFvQWdBRklBQUxJUVVnQVVIbi8vLy9BVWtFUUVFQ0lBRkJBWFFpQnlBQklBSnFJZ0lnQWlBSFNSc2lBa0VFYWtGOGNTQUNRUUpKR3lJQ1FmLy8vLzhEU3dSQUVBQUZJQUloQmdzRlFlLy8vLzhESVFZTElBWkJBblFRVVNFQ0lBUUVRQ0FDSUFVZ0JCQ25BUXNnQXlBRWF5SURCRUFnQWlBRVFRSjBhaUFGSUFSQkFuUnFJQU1RcHdFTElBRkJBVWNFUUNBRkVEZ0xJQUFnQWpZQ0FDQUFJQVpCZ0lDQWdIaHlOZ0lJQzZBQ0FRUi9Jd1loQ0NNR1FSQnFKQVpCN3YvLy93TWdBV3NnQWtrRVFCQUFDeUFBTEFBTFFRQklCSDhnQUNnQ0FBVWdBQXNoQ1NBQlFlZi8vLzhCU1FSQVFRSWdBVUVCZENJTElBRWdBbW9pQWlBQ0lBdEpHeUlDUVFScVFYeHhJQUpCQWtrYklnSkIvLy8vL3dOTEJFQVFBQVVnQWlFS0N3VkI3Ly8vL3dNaENnc2dDa0VDZEJCUklRSWdCQVJBSUFJZ0NTQUVFS2NCQ3lBR0JFQWdCRUVDZENBQ2FpQUhJQVlRcHdFTElBTWdCV3NpQXlBRWF5SUhCRUFnQkVFQ2RDQUNhaUFHUVFKMGFpQUVRUUowSUFscUlBVkJBblJxSUFjUXB3RUxJQUZCQVVjRVFDQUpFRGdMSUFBZ0FqWUNBQ0FBSUFwQmdJQ0FnSGh5TmdJSUlBQWdBeUFHYWlJQU5nSUVJQWhCQURZQ0FDQUFRUUowSUFKcUlBZ1FiaUFJSkFZTGtBRUJBMzhqQmlFREl3WkJFR29rQmlBQlFlLy8vLzhEU3dSQUVBQUxJQUZCQWtrRVFDQUFJQUU2QUFzZ0FDRUVCU0FCUVFScVFYeHhJZ1ZCLy8vLy93TkxCRUFRQUFVZ0FDQUZRUUowRUZFaUJEWUNBQ0FBSUFWQmdJQ0FnSGh5TmdJSUlBQWdBVFlDQkFzTElBRUVRQ0FFSUFJZ0FSRHJCQXNnQTBFQU5nSUFJQUZCQW5RZ0JHb2dBeEJ1SUFNa0JndnVBUUVEZnlNR0lRZ2pCa0VRYWlRR1FXNGdBV3NnQWtrRVFCQUFDeUFBTEFBTFFRQklCSDhnQUNnQ0FBVWdBQXNoQ1NBQlFlZi8vLzhIU1FSL1FRc2dBVUVCZENJS0lBRWdBbW9pQWlBQ0lBcEpHeUlDUVJCcVFYQnhJQUpCQzBrYkJVRnZDeUlLRUZFaEFpQUVCRUFnQWlBSklBUVFxQUVMSUFZRVFDQUNJQVJxSUFjZ0JoQ29BUXNnQXlBRmF5SURJQVJySWdjRVFDQUdJQUlnQkdwcUlBVWdCQ0FKYW1vZ0J4Q29BUXNnQVVFS1J3UkFJQWtRT0FzZ0FDQUNOZ0lBSUFBZ0NrR0FnSUNBZUhJMkFnZ2dBQ0FESUFacUlnQTJBZ1FnQ0VFQU9nQUFJQUFnQW1vZ0NCQmZJQWdrQmdzV0FDQUJCRUFnQUNBQ0VFSkIvd0Z4SUFFUVJSb0xDM0lCQTM4akJpRURJd1pCRUdva0JpQUJRVzlMQkVBUUFBc2dBVUVMU1FSQUlBQWdBVG9BQ3dVZ0FDQUJRUkJxUVhCeElnUVFVU0lGTmdJQUlBQWdCRUdBZ0lDQWVISTJBZ2dnQUNBQk5nSUVJQVVoQUFzZ0FDQUJJQUlRbFFRZ0EwRUFPZ0FBSUFBZ0FXb2dBeEJmSUFNa0JndjZGUU1NZndGK0Fud2pCaUVMSXdaQjBBRnFKQVlnQzBISUFXb2hEU0FMUWNBQmFpRU9JQXRCNEFCcUlRd2dBeWdDQkNFS0EwQWdCeUFLU0FSQUlBTW9BZ0FpQ0NBSFFjQUNiR29oQ1NBSFFjQUNiQ0FJYWlnQ0JBUkFJQWRCd0FKc0lBaHFJUkJCQUNFRlFYOGhCZ05BSUFVZ0FrZ0VRQUpBQWtBQ1FDQUZRUWgwSUFGcUtBSU1JZzhOQUNBRlFRaDBJQUZxS1FQNEFTSVJVQTBBSUJFZ0VDa0R1QUpSRFFFTUFnc2dEeUFKS0FJQVJnMEFEQUVMSUFWQkNIUWdBV29yQXpBaUVpQURLd040WTBVRVFDQUdRWDlHQkg4Z0JRVWdCa0VJZENBQmFpc0RNQ0FTWXdSL0lBVUZJQVlMQ3lFR0N3c2dCVUVCYWlFRkRBRUxDeUFIUWNBQ2JDQUlhaUFHTmdLd0FpQUdRWDlLQkVBZ0JrRUlkQ0FCYWlBR1FRaDBJQUZxS0FJWU5nSVFDd1ZCZnlFR1FRQWhCUU5BSUFVZ0FrZ0VRQ0FGUVFoMElBRnFLQUlJSUFrb0FnQkdCRUFnQlVFSWRDQUJhaXNES0NJU0lBTXJBM0JqUlFSQUlBWkJmMFlFZnlBRkJTQUdRUWgwSUFGcUt3TW9JQkpqQkg4Z0JRVWdCZ3NMSVFZTEN5QUZRUUZxSVFVTUFRc0xJQWRCd0FKc0lBaHFJQVkyQXJBQ0lBWkJmMG9FUUNBR1FRaDBJQUZxSUFaQkNIUWdBV29vQWhRMkFoQUxDeUFIUVFGcUlRY01BUXNMUVFBaEJVRUFJUUpCQUNFR1FRQWhCd05BSUFjZ0NrZ0VRQ0FES0FJQUlnb2dCMEhBQW14cUtBS3dBaUlJUVFCT0JFQUNRQ0FBSUFoQkNIUWdBV29pQ1NBSFFjQUNiQ0FLYWlzRENDQUxFTm9EUkFBQUFBQUFBQkJBWkFSQUlBTW9BZ0FnQjBIQUFteHFRWDgyQXJBQ0lBaEJDSFFnQVdvaUNDZ0M3QUVOQVNBSVFRYzJBdXdCREFFTElBVkZJQUlnQ1NnQ0FDSUlTSElFUUVFQUlRSURmeUFDUVFOR0JIOGdCeUVHSUFnRlFRQWhCZ05BSUFaQkJFY0VRQ0FDUVFWMElBeHFJQVpCQTNScUlBSkJCWFFnQzJvZ0JrRURkR29yQXdBNUF3QWdCa0VCYWlFR0RBRUxDeUFDUVFGcUlRSU1BUXNMSVFJTElBVkJBV29oQlFzTElBZEJBV29oQnlBREtBSUVJUW9NQVFzTEFrQUNRQ0FGUlEwQUlBVWdBeWdDZ0FGSURRQWdEQ0FES0FJQUlBWkJ3QUpzYWtId0FHb2dDeEN6QWlBRlFRWjBFRVFpQjBVRVFFRUFRUU5CdWRnQ0lBNFFQVUVCRUFFTElBVkI0QUJzRUVRaUJrVUVRRUVBUVFOQnVkZ0NJQTBRUFVFQkVBRUxJQVZCQW5RaENDQURLQUlFSVJCQkFDRUZRUUFoQWdOQUlBVWdFRWdFUUNBREtBSUFJZ29nQlVIQUFteHFLQUt3QWlJSlFRQk9CRUFnQWtFRGRDSU5RUU4wSUFkcUlBbEJDSFFnQVdwQnFBRnFRUVFnQ1VFSWRDQUJhaWdDRUNJT2EwRUVFRThpRDBFRWRHb3JBd0E1QXdBZ0RVRUJja0VEZENBSGFpQUpRUWgwSUFGcUlBOUJCSFJxS3dPd0FUa0RBQ0FOUVFKeVFRTjBJQWRxSUFsQkNIUWdBV3BCcUFGcVFRVWdEbXRCQkJCUElnOUJCSFJxS3dNQU9RTUFJQTFCQTNKQkEzUWdCMm9nQ1VFSWRDQUJhaUFQUVFSMGFpc0RzQUU1QXdBZ0RVRUVja0VEZENBSGFpQUpRUWgwSUFGcVFhZ0Jha0VHSUE1clFRUVFUeUlQUVFSMGFpc0RBRGtEQUNBTlFRVnlRUU4wSUFkcUlBbEJDSFFnQVdvZ0QwRUVkR29yQTdBQk9RTUFJQTFCQm5KQkEzUWdCMm9nQ1VFSWRDQUJha0dvQVdwQkJ5QU9hMEVFRUU4aURrRUVkR29yQXdBNUF3QWdEVUVIY2tFRGRDQUhhaUFKUVFoMElBRnFJQTVCQkhScUt3T3dBVGtEQUNBQ1FReHNJZ2xCQTNRZ0Jtb2dCVUhBQW13Z0Ntb3JBOUFCT1FNQUlBbEJBWEpCQTNRZ0Jtb2dCVUhBQW13Z0Ntb3JBOWdCT1FNQUlBbEJBbkpCQTNRZ0Jtb2dCVUhBQW13Z0Ntb3JBK0FCT1FNQUlBbEJBM0pCQTNRZ0Jtb2dCVUhBQW13Z0Ntb3JBK2dCT1FNQUlBbEJCR3BCQTNRZ0Jtb2dCVUhBQW13Z0Ntb3JBL0FCT1FNQUlBbEJCV3BCQTNRZ0Jtb2dCVUhBQW13Z0Ntb3JBL2dCT1FNQUlBbEJCbXBCQTNRZ0Jtb2dCVUhBQW13Z0Ntb3JBNEFDT1FNQUlBbEJCMnBCQTNRZ0Jtb2dCVUhBQW13Z0Ntb3JBNGdDT1FNQUlBbEJDR3BCQTNRZ0Jtb2dCVUhBQW13Z0Ntb3JBNUFDT1FNQUlBbEJDV3BCQTNRZ0Jtb2dCVUhBQW13Z0Ntb3JBNWdDT1FNQUlBbEJDbXBCQTNRZ0Jtb2dCVUhBQW13Z0Ntb3JBNkFDT1FNQUlBbEJDMnBCQTNRZ0Jtb2dCVUhBQW13Z0Ntb3JBNmdDT1FNQUlBSkJBV29oQWdzZ0JVRUJhaUVGREFFTEN5QUVRUUJISVFRZ0F5Z0NhQVJBSUFBZ0N5QUhJQVlnQ0NBTUVMOENJaElnQUNBRFFRaHFJZ0lnQnlBR0lBZ2dBaEMvQWlJVFl5RUZJQVFFUUNBRkJFQkJBQ0VFQTBBZ0JFRURSd1JBUVFBaEJRTkFJQVZCQkVjRVFDQURRUWhxSUFSQkJYUnFJQVZCQTNScUlBUkJCWFFnREdvZ0JVRURkR29yQXdBNUF3QWdCVUVCYWlFRkRBRUxDeUFFUVFGcUlRUU1BUXNMQlNBVElSSUxJQkpFQUFBQUFBQUFORUJtQkVBZ0FDZ0NBRVNhbVptWm1abnBQeENOQVNBQUlBc2dCeUFHSUFnZ0RCQ09BU0lTSUFBZ0FpQUhJQVlnQ0NBQ0VJNEJJaE5qQkVCQkFDRUVBMEFnQkVFRFJ3UkFRUUFoQlFOQUlBVkJCRWNFUUNBRFFRaHFJQVJCQlhScUlBVkJBM1JxSUFSQkJYUWdER29nQlVFRGRHb3JBd0E1QXdBZ0JVRUJhaUVGREFFTEN5QUVRUUZxSVFRTUFRc0xCU0FUSVJJTElCSkVBQUFBQUFBQU5FQm1CRUFnQUNnQ0FFUXpNek16TXpQalB4Q05BU0FBSUFzZ0J5QUdJQWdnREJDT0FTSVNJQUFnQWlBSElBWWdDQ0FDRUk0QkloTmpCRUJCQUNFRUEwQWdCRUVEUndSQVFRQWhCUU5BSUFWQkJFY0VRQ0FEUVFocUlBUkJCWFJxSUFWQkEzUnFJQVJCQlhRZ0RHb2dCVUVEZEdvckF3QTVBd0FnQlVFQmFpRUZEQUVMQ3lBRVFRRnFJUVFNQVFzTEJTQVRJUklMSUJKRUFBQUFBQUFBTkVCbUJFQWdBQ2dDQUVTYW1abVptWm5aUHhDTkFTQUFJQXNnQnlBR0lBZ2dEQkNPQVNJU0lBQWdBaUFISUFZZ0NDQUNFSTRCSWhOakJFQkJBQ0VFQTBBZ0JFRURSd1JBUVFBaEJRTkFJQVZCQkVjRVFDQURRUWhxSUFSQkJYUnFJQVZCQTNScUlBUkJCWFFnREdvZ0JVRURkR29yQXdBNUF3QWdCVUVCYWlFRkRBRUxDeUFFUVFGcUlRUU1BUXNMQlNBVElSSUxJQkpFQUFBQUFBQUFORUJtQkVBZ0FDZ0NBRVFBQUFBQUFBQUFBQkNOQVNBQUlBc2dCeUFHSUFnZ0RCQ09BU0lTSUFBZ0FpQUhJQVlnQ0NBQ0VJNEJJaE5qQkVCQkFDRUFBMEFnQUVFRFJ3UkFRUUFoQWdOQUlBSkJCRWNFUUNBRFFRaHFJQUJCQlhScUlBSkJBM1JxSUFCQkJYUWdER29nQWtFRGRHb3JBd0E1QXdBZ0FrRUJhaUVDREFFTEN5QUFRUUZxSVFBTUFRc0xCU0FUSVJJTEN3c0xDd1VnQlFSQVFRQWhBQU5BSUFCQkEwY0VRRUVBSVFJRFFDQUNRUVJIQkVBZ0EwRUlhaUFBUVFWMGFpQUNRUU4wYWlBQVFRVjBJQXhxSUFKQkEzUnFLd01BT1FNQUlBSkJBV29oQWd3QkN3c2dBRUVCYWlFQURBRUxDd1VnRXlFU0N3c0ZJQVFnQUNBTElBY2dCaUFJSUFOQkNHb2lBaEMvQWlJU1JBQUFBQUFBQURSQVpuRUVRQ0FBS0FJQVJKcVptWm1abWVrL0VJMEJJQUFnQ3lBSElBWWdDQ0FDRUk0QkloSkVBQUFBQUFBQU5FQm1CSHdnQUNnQ0FFUXpNek16TXpQalB4Q05BU0FBSUFzZ0J5QUdJQWdnQWhDT0FTSVNSQUFBQUFBQUFEUkFaZ1I4SUFBb0FnQkVtcG1abVptWjJUOFFqUUVnQUNBTElBY2dCaUFJSUFJUWpnRWlFa1FBQUFBQUFBQTBRR1lFZkNBQUtBSUFSQUFBQUFBQUFBQUFFSTBCSUFBZ0N5QUhJQVlnQ0NBQ0VJNEJCU0FTQ3dVZ0Vnc0ZJQklMSVJJTEN5QUdFRGdnQnhBNEFrQWdFa1FBQUFBQUFBQTBRR01FUUNBRFFRRTJBbWdNQVFzZ0EwRUFOZ0pvSUFNb0FnUWhBa0VBSVFBRFFDQUFJQUpPRFFFZ0F5Z0NBQ0FBUWNBQ2JHb29BckFDSWdSQkFFNEVRQ0FFUVFoMElBRnFJZ1FvQXV3QlJRUkFJQVJCQ0RZQzdBRUxDeUFBUVFGcUlRQU1BQUFMQUFzTUFRc2dBMEVBTmdKb0N5QUxKQVlMeVF3Q0VIOFJmQ01HSVFZakJrR0FBV29rQmlBR1FmZ0FhaUVPSUFaQjhBQnFJUThnQmtIb0FHb2hFQ0FHUWVBQWFpRVJJQVpCMkFCcUlSSWdCa0hRQUdvaENDQUdRY2dBYWlFSklBTkJCRWdFZjBGL0JRSi9BMEFnQlNBRFNBUkFJQVZCQVdvaEUwRi9JQVZCR0d3Z0Ftb3JBeEJFQUFBQUFBQUFBQUJpRFFJYUlCTWhCUXdCQ3dzZ0FDc0RBRVFBQUFBQUFBQUFBR0VFZjBGL0JTQUFLd01nUkFBQUFBQUFBQUFBWWdSL1FYOEZJQUFyQXloRUFBQUFBQUFBQUFCaEJIOUJmd1VnQUVGQWF5c0RBRVFBQUFBQUFBQUFBR0lFZjBGL0JTQUFLd05JUkFBQUFBQUFBQUFBWWdSL1FYOEZJQUFyQTFCRUFBQUFBQUFBOEQ5aUJIOUJmd1VnQUNzREdFUUFBQUFBQUFBQUFHSUVmMEYvQlNBQUt3TTRSQUFBQUFBQUFBQUFZZ1IvUVg4RklBQXJBMWhFQUFBQUFBQUFBQUJpQkg5QmZ3VWdBMEVCZENJRlFRZ1Fpd0VpQ2tVRVFFRUFRUU5COWF3QklBa1FQVUYvREFvTElBVkJBUkNMQVNJSlJRUkFJQW9RU1VFQVFRTkJqNjBCSUFnUVBVRi9EQW9MUVFBaENBTkFJQU1nQ0VjRVFDQUtLQUlBSWdjZ0NFRUVkQ0lGUVFOMGFpQUlRUmhzSUFKcUlnc3JBd0E1QXdBZ0JVRUJja0VEZENBSGFpQUlRUmhzSUFKcUlnd3JBd2c1QXdBZ0JVRUNja0VEZENBSGFrUUFBQUFBQUFEd1B6a0RBQ0FGUVFOeVFRTjBJQWRxUkFBQUFBQUFBQUFBT1FNQUlBVkJCSEpCQTNRZ0IycEVBQUFBQUFBQUFBQTVBd0FnQlVFRmNrRURkQ0FIYWtRQUFBQUFBQUFBQURrREFDQUZRUVp5UVFOMElBZHFJQXNyQXdBZ0NFRUVkQ0FCYWlJTkt3TUFvcG81QXdBZ0JVRUhja0VEZENBSGFpQU1Ld01JSUEwckF3Q2ltamtEQUNBRlFRaHlRUU4wSUFkcVJBQUFBQUFBQUFBQU9RTUFJQVZCQ1hKQkEzUWdCMnBFQUFBQUFBQUFBQUE1QXdBZ0JVRUtja0VEZENBSGFrUUFBQUFBQUFBQUFEa0RBQ0FGUVF0eVFRTjBJQWRxSUFzckF3QTVBd0FnQlVFTWNrRURkQ0FIYWlBTUt3TUlPUU1BSUFWQkRYSkJBM1FnQjJwRUFBQUFBQUFBOEQ4NUF3QWdCVUVPY2tFRGRDQUhhaUFMS3dNQUlBaEJCSFFnQVdvaUN5c0RDS0thT1FNQUlBVkJEM0pCQTNRZ0Iyb2dEQ3NEQ0NBTEt3TUlvcG81QXdBZ0NTZ0NBQ0lISUFoQkFYUWlCVUVEZEdvZ0RTc0RBRGtEQUNBRlFRRnlRUU4wSUFkcUlBc3JBd2c1QXdBZ0NFRUJhaUVJREFFTEN5QUtFS0FESWdGRkJFQWdDaEJKSUFrUVNVRUFRUU5CcWEwQklCSVFQVUYvREFvTElBRWdDaERaQVNJRFJRUkFJQW9RU1NBSkVFa2dBUkJKUVFCQkEwSERyUUVnRVJBOVFYOE1DZ3NnQVNBSkVOa0JJZ1ZGQkVBZ0NoQkpJQWtRU1NBQkVFa2dBeEJKUVFCQkEwSGRyUUVnRUJBOVFYOE1DZ3NnQXhEV0FVRUFTQVJBSUFvUVNTQUpFRWtnQVJCSklBTVFTU0FGRUVsQkFFRURRZmV0QVNBUEVEMUJmd3dLQ3lBRElBVVEyUUVpQndSL0lBY29BZ0FpQWlzRE1DRVdJQUlyQXdBZ0ZpQUFLd01RSWgyaW9TQUNLd01ZSUJZZ0FDc0RNQ0lib3FFZ0FDc0RLQ0ljb3lJWklBQXJBd2dpSHFLaElBQXJBd0FpSDZNaEdDQUNLd01nSUJzZ0Fpc0RPQ0lWb3FFZ0hLTWhGeUFDS3dNSUlCMGdGYUtoSUI0Z0Y2S2hJQitqSVJvZ0Fpc0RLQ0Fib1NBY295RWJJQUlyQXhBaEpDQUtFRWtnQ1JCSklBRVFTU0FERUVrZ0JSQkpJQWNRU1NBR0lCZ2dGaUFXb2lBWklCbWlJQmdnR0tLZ29KOGlHS001QXdBZ0JpQVpJQmlqT1FNSUlBWWdGaUFZb3prREVDQUdJQm9nRlNBVm9pQVhJQmVpSUJvZ0dxS2dvSjhpRnFNNUF4Z2dCaUFYSUJhak9RTWdJQVlnRlNBV296a0RLQ0FHRVBJSklBWXJBd2dpR1NBR0t3TW9JaHFpSUFZckF4QWlIQ0FHS3dNZ0lpQ2lvU0VWSUJ3Z0Jpc0RHQ0lob2lBYUlBWXJBd0FpSXFLaElSY2dCaUFWSUNBZ0lxSWdHU0Fob3FFaUl5QWpvaUFWSUJXaUlCY2dGNktnb0o4aUZhTWlKVGtETUNBR0lCY2dGYU1pRnprRE9DQUdRVUJySUNNZ0ZhTWlGVGtEQUNBRUlDSTVBd0FnQkNBWk9RTWdJQVJCUUdzZ0hEa0RBQ0FFSUNFNUF3Z2dCQ0FnT1FNb0lBUWdHamtEU0NBRUlDVTVBeEFnQkNBWE9RTXdJQVFnRlRrRFVDQUVJQ1FnSGFFZ0hpQWJvcUVnSDZNZ0dDQVdvRVFBQUFBQUFBRGdQNklpRnFNNUF4Z2dCQ0FiSUJhak9RTTRJQVJFQUFBQUFBQUE4RDhnRnFNNUExaEJBQVVnQ2hCSklBa1FTU0FCRUVrZ0F4QkpJQVVRU1VFQVFRTkJrYTRCSUE0UVBVRi9Dd3NMQ3dzTEN3c0xDd3NMSVJRZ0JpUUdJQlFMRWdBZ0FFR3NvZ0UyQWdBZ0FFRVFhaEJIQ3hJQUlBQkJoS0lCTmdJQUlBQkJER29RUndzakFRRi9JQUJCMEtFQk5nSUFJQUFvQWdnaUFRUkFJQUFzQUF3RVFDQUJFRGdMQ3d0OUFRUi9JQUJCdktFQk5nSUFJQUJCQ0dvaEF3TkFJQUlnQUNnQ0RDQURLQUlBSWdGclFRSjFTUVJBSUFKQkFuUWdBV29vQWdBaUFRUkFJQUVnQVNnQ0JDSUVRWDlxTmdJRUlBUkZCRUFnQVNBQktBSUFLQUlJUWY4QmNVR3NBMm9SQVFBTEN5QUNRUUZxSVFJTUFRc0xJQUJCa0FGcUVFY2dBeENQQ2d2VUNnSVBmd1I4SXdZaEN5TUdRY0FCYWlRR0lBdEJ1QUZxSVFnZ0MwR3dBV29oRGlBTFFhZ0JhaUVLSUF0Qm9BRnFJUVVnQzBHUUFXb2hEeUFMUVRCcUlSQWdBU2dDQ0NJSlFRUklCSDlCZndVQ2Z3Si9JQUFyQTRBQklBbTNvaEJ6SVJFZ0NVSGdBR3dRUkNJR1JRUkFRUUJCQTBISzJBSWdCUkE5UVg4TUFnc2dDVUVFZEJCRUlnZEZCRUJCQUVFRFFjcllBaUFLRUQwZ0JoQTRRWDhNQWdzZ0NVRURkQ0lGRUVRaUNVVUVRRUVBUVFOQnl0Z0NJQTRRUFNBR0VEZ2dCeEE0UVg4TUFnc2dCUkJFSWcxRkJFQkJBRUVEUWNyWUFpQUlFRDBnQmhBNElBY1FPQ0FKRURoQmZ3d0NDeUFSUVg5cUlnVUxRUU1nQlVFRFNoc2hFa0VBSVFvRFFDQUtRUU5IQkVCQkFDRU1BMEFnREVFRVJ3UkFJQXBCQlhRZ0Eyb2dERUVEZEdvZ0NrRUZkQ0FDYWlBTVFRTjBhaXNEQURrREFDQU1RUUZxSVF3TUFRc0xJQXBCQVdvaENnd0JDd3NnRWtFRGRDQU5haUVNUVFBaENnSkFBa0FDUUFKQUEwQUNRQ0FBSUFNZ0VCQ3pBa0VBSVFVRFFDQUZJQUVvQWdnaUFrZ0VRQ0FQSUJBZ0FTZ0NCQ0FGUVJoc2FoQzdCRUVBU0EwQ0lBRW9BZ0FpQWlBRlFRUjBhaXNEQUNBUEt3TUFvU0VXSUFWQkJIUWdBbW9yQXdnZ0R5c0RDS0VoRkNBRlFRRjBJZ0pCQTNRZ0Iyb2dGamtEQUNBQ1FRRnlRUU4wSUFkcUlCUTVBd0FnQlVFRGRDQU5haUFXSUJhaUlCUWdGS0tnSWhRNUF3QWdCVUVEZENBSmFpQVVPUU1BSUFWQkFXb2hCUXdCQ3dzZ0RTQUNRUWhCRWhDQ0F5QUJLQUlJSVFKRUFBQUFBQUFBTUVBZ0RDc0RBRVFBQUFBQUFBQVFRS0lpRkNBVVJBQUFBQUFBQURCQVl4c2lGMFFBQUFBQUFBQVlRS01oRmtRQUFBQUFBQUFBQUNFVVFRQWhCUU5BSUFVZ0FrZ0VRQ0FVSUFWQkEzUWdEV29yQXdBaUZDQVhaQVI4SUJZRklCWkVBQUFBQUFBQThEOUVBQUFBQUFBQThEOGdGQ0FYbzZFaUZDQVVJQlNpb3FHaUM2QWhGQ0FGUVFGcUlRVU1BUXNMSUJRZ0FyZWpJaFFnQUNzRGFHTU5CU0FLQkVBZ0ZDQUFLd040WXdSQUlCUWdGYU1nQUNzRGNHUU5Cd3NMSUFvZ0FDZ0NZRVlOQlVFQUlRVkJBQ0VPQTBBZ0RpQUNTQVJBSUE1QkEzUWdDV29yQXdBaUZTQVhaUVJBSUFWQkJtd2lDRUVEZENBR2FpSUNJQUFnQXlBQktBSUVJQTVCR0d4cUVMa0VRUUJJRFFVZ0FrUUFBQUFBQUFEd1B5QVZJQmVqb1NJVklCV2lJaFVnQWlzREFLSTVBd0FnQ0VFQmNrRURkQ0FHYWlJQ0lCVWdBaXNEQUtJNUF3QWdDRUVDYWtFRGRDQUdhaUlDSUJVZ0Fpc0RBS0k1QXdBZ0NFRURha0VEZENBR2FpSUNJQlVnQWlzREFLSTVBd0FnQ0VFRWFrRURkQ0FHYWlJQ0lCVWdBaXNEQUtJNUF3QWdDRUVGYWtFRGRDQUdhaUlDSUJVZ0Fpc0RBS0k1QXdBZ0NFRUdha0VEZENBR2FpSUNJQlVnQWlzREFLSTVBd0FnQ0VFSGFrRURkQ0FHYWlJQ0lCVWdBaXNEQUtJNUF3QWdDRUVJYWtFRGRDQUdhaUlDSUJVZ0Fpc0RBS0k1QXdBZ0NFRUpha0VEZENBR2FpSUNJQlVnQWlzREFLSTVBd0FnQ0VFS2FrRURkQ0FHYWlJQ0lCVWdBaXNEQUtJNUF3QWdDRUVMYWtFRGRDQUdhaUlDSUJVZ0Fpc0RBS0k1QXdBZ0JVRURkQ0FIYWlBVklBNUJBWFFpQWtFRGRDQUhhaXNEQUtJNUF3QWdCVUVCYWtFRGRDQUhhaUFWSUFKQkFYSkJBM1FnQjJvckF3Q2lPUU1BSUFWQkFtb2hCU0FCS0FJSUlRSUxJQTVCQVdvaERnd0JDd3NnQlVFR1NBMERJQXNnQnlBR0lBVVFzd1JCQUVnTkJDQURJQXNRc2dRZ0ZDRVZJQXBCQVdvaENnd0JDd3NnQmlBSElBa2dEUkNQQWtGL0RBUUxJQVlnQnlBSklBMFFqd0pCZnd3REN5QUdJQWNnQ1NBTkVJOENRWDhNQWdzZ0JpQUhJQWtnRFJDUEFrRi9EQUVMSUFRZ0ZEa0RBQ0FHRURnZ0J4QTRJQWtRT0NBTkVEaEJBQXNMSVJNZ0N5UUdJQk1MSGdBZ0FFR01vUUUyQWdBZ0FDZ0NDQkJjUndSQUlBQW9BZ2dRaHdNTEN4SUFJQVFnQWpZQ0FDQUhJQVUyQWdCQkF3c0VBRUVFQ3hVQUlBRW9BZ0FnQVNBQkxBQUxRUUJJR3hwQmZ3ditDQUVNZnlBQ0lBQTJBZ0FnRFVFRWFpRVlJQU5CZ0FSeFJTRVpJQTVCQUVvaEdnTkFJQmRCQkVjRVFBSkFBa0FDUUFKQUFrQUNRQ0FJSUJkcUxBQUFEZ1VBQVFNQ0JBVUxJQUVnQWlnQ0FEWUNBQXdFQ3lBQklBSW9BZ0EyQWdBZ0JpZ0NBQ2dDTENFUElBWkJJQ0FQUVQ5eFFZb0JhaEVDQUNFUUlBSWdBaWdDQUNJUFFRUnFOZ0lBSUE4Z0VEWUNBQXdEQ3lBTkxBQUxJZzlCQUVnaEVDQVlLQUlBSUE5Qi93RnhJQkFiQkVBZ0RTZ0NBQ0FOSUJBYktBSUFJUkFnQWlBQ0tBSUFJZzlCQkdvMkFnQWdEeUFRTmdJQUN3d0NDeUFNTEFBTElnOUJBRWdoRUNBWklBd29BZ1FnRDBIL0FYRWdFQnNpRTBWeVJRUkFJQXdvQWdBZ0RDQVFHeUlQSUJOQkFuUnFJUkVnQWlnQ0FDSVFJUklEUUNBUElCRkhCRUFnRWlBUEtBSUFOZ0lBSUJKQkJHb2hFaUFQUVFScUlROE1BUXNMSUFJZ0UwRUNkQ0FRYWpZQ0FBc01BUXNnQWlnQ0FDRVVJQVJCQkdvZ0JDQUhHeUlXSVFRRFFBSkFJQVFnQlU4TkFDQUdLQUlBS0FJTUlROGdCa0dBRUNBRUtBSUFJQTlCUDNGQnlnRnFFUVFBUlEwQUlBUkJCR29oQkF3QkN3c2dHZ1JBSUE0aER3TkFJQTlCQUVvaUVDQUVJQlpMY1FSQUlBUkJmR29pQkNnQ0FDRVJJQUlnQWlnQ0FDSVFRUVJxTmdJQUlCQWdFVFlDQUNBUFFYOXFJUThNQVFzTElCQUVmeUFHS0FJQUtBSXNJUkFnQmtFd0lCQkJQM0ZCaWdGcUVRSUFCVUVBQ3lFVElBOGhFU0FDS0FJQUlSQURRQ0FRUVFScUlROGdFVUVBU2dSQUlCQWdFellDQUNBUlFYOXFJUkVnRHlFUURBRUxDeUFDSUE4MkFnQWdFQ0FKTmdJQUN5QUVJQlpHQkVBZ0JpZ0NBQ2dDTENFRUlBWkJNQ0FFUVQ5eFFZb0JhaEVDQUNFUUlBSWdBaWdDQUNJUFFRUnFJZ1EyQWdBZ0R5QVFOZ0lBQlNBTExBQUxJZzlCQUVnaEVDQUxLQUlFSUE5Qi93RnhJQkFiQkg4Z0N5Z0NBQ0FMSUJBYkxBQUFCVUYvQ3lFUFFRQWhFRUVBSVJJZ0JDRVJBMEFnRVNBV1J3UkFJQUlvQWdBaEZTQVBJQkpHQkg4Z0FpQVZRUVJxSWhNMkFnQWdGU0FLTmdJQUlBc3NBQXNpRDBFQVNDRVZJQkJCQVdvaUJDQUxLQUlFSUE5Qi93RnhJQlViU1FSQVFYOGdCQ0FMS0FJQUlBc2dGUnRxTEFBQUlnOGdEMEgvQUVZYklROEZJQkloRHd0QkFDRVNJQk1GSUJBaEJDQVZDeUVRSUJGQmZHb2lFU2dDQUNFVElBSWdFRUVFYWpZQ0FDQVFJQk0yQWdBZ0JDRVFJQkpCQVdvaEVnd0JDd3NnQWlnQ0FDRUVDeUFFSUJSR0JIOGdGZ1VEUUNBVUlBUkJmR29pQkVrRVFDQVVLQUlBSVE4Z0ZDQUVLQUlBTmdJQUlBUWdEellDQUNBVVFRUnFJUlFNQVFVZ0ZpRUVEQU1MQUFBTEFBc2hCQXNnRjBFQmFpRVhEQUVMQ3lBTkxBQUxJZ1JCQUVnaEJ5QVlLQUlBSUFSQi93RnhJQWNiSWdaQkFVc0VRQ0FOS0FJQUlnVkJCR29nR0NBSEd5RUVJQVpCQW5RZ0JTQU5JQWNiYWlJSElBUnJJUVlnQWlnQ0FDSUZJUWdEUUNBRUlBZEhCRUFnQ0NBRUtBSUFOZ0lBSUFoQkJHb2hDQ0FFUVFScUlRUU1BUXNMSUFJZ0JrRUNka0VDZENBRmFqWUNBQXNDUUNBRFFiQUJjVUVZZEVFWWRVRVFheUlEUlEwQUlBTkJFRVlFUUNBQklBSW9BZ0EyQWdBTUFRc2dBU0FBTmdJQUN3dlpCUUVGZnlNR0lRb2pCa0VRYWlRR0lBcEJER29oQ3lBS0lBQUVmeUFDUWZqUEF4QTZCU0FDUWZEUEF4QTZDeUlBSUFFRWZ5QUxJQUFnQUNnQ0FDZ0NMRUUvY1VHeUJXb1JBd0FnQXlBTEtBSUFOZ0FBSUFBb0FnQW9BaUFGSUFzZ0FDQUFLQUlBS0FJb1FUOXhRYklGYWhFREFDQURJQXNvQWdBMkFBQWdBQ2dDQUNnQ0hBdEJQM0ZCc2dWcUVRTUFJQWdzQUF0QkFFZ0VRQUovSUFnb0FnQWhEQ0FMUVFBMkFnQWdEQXNnQ3hCdUlBaEJBRFlDQkNBSUxBQUxRUUJJQkVBZ0NDZ0NDQm9nQ0NnQ0FCQTRJQWhCQURZQ0NBc0ZJQXRCQURZQ0FDQUlJQXNRYmlBSVFRQTZBQXNMSUFnZ0Npa0NBRGNDQUNBSUlBb29BZ2cyQWdoQkFDRUJBMEFnQVVFRFJ3UkFJQUZCQW5RZ0NtcEJBRFlDQUNBQlFRRnFJUUVNQVFzTElBb1FSeUFFSUFBZ0FDZ0NBQ2dDREVIL0FIRkJDR29SQUFBMkFnQWdCU0FBSUFBb0FnQW9BaEJCL3dCeFFRaHFFUUFBTmdJQUlBb2dBQ0FBS0FJQUtBSVVRVDl4UWJJRmFoRURBQ0FHTEFBTFFRQklCRUFDZnlBR0tBSUFJUTBnQzBFQU9nQUFJQTBMSUFzUVh5QUdRUUEyQWdRZ0Jpd0FDMEVBU0FSQUlBWW9BZ2dhSUFZb0FnQVFPQ0FHUVFBMkFnZ0xCU0FMUVFBNkFBQWdCaUFMRUY4Z0JrRUFPZ0FMQ3lBR0lBb3BBZ0EzQWdBZ0JpQUtLQUlJTmdJSVFRQWhBUU5BSUFGQkEwY0VRQ0FCUVFKMElBcHFRUUEyQWdBZ0FVRUJhaUVCREFFTEN5QUtFRWNnQ2lBQUlBQW9BZ0FvQWhoQlAzRkJzZ1ZxRVFNQUlBY3NBQXRCQUVnRVFBSi9JQWNvQWdBaERpQUxRUUEyQWdBZ0Rnc2dDeEJ1SUFkQkFEWUNCQ0FITEFBTFFRQklCRUFnQnlnQ0NCb2dCeWdDQUJBNElBZEJBRFlDQ0FzRklBdEJBRFlDQUNBSElBc1FiaUFIUVFBNkFBc0xJQWNnQ2lrQ0FEY0NBQ0FISUFvb0FnZzJBZ2hCQUNFQkEwQWdBVUVEUndSQUlBRkJBblFnQ21wQkFEWUNBQ0FCUVFGcUlRRU1BUXNMSUFvUVJ5QUpJQUFnQUNnQ0FDZ0NKRUgvQUhGQkNHb1JBQUEyQWdBZ0NpUUdDN1lJQVFwL0lBSWdBRFlDQUNBRFFZQUVjVVVoRnlBT1FRQktJUmdEUUNBVlFRUkhCRUFDUUFKQUFrQUNRQUpBQWtBZ0NDQVZhaXdBQUE0RkFBRURBZ1FGQ3lBQklBSW9BZ0EyQWdBTUJBc2dBU0FDS0FJQU5nSUFJQVlvQWdBb0Fod2hEeUFHUVNBZ0QwRS9jVUdLQVdvUkFnQWhFQ0FDSUFJb0FnQWlEMEVCYWpZQ0FDQVBJQkE2QUFBTUF3c2dEU3dBQ3lJUFFRQklJUkFnRFNnQ0JDQVBRZjhCY1NBUUd3UkFJQTBvQWdBZ0RTQVFHeXdBQUNFUUlBSWdBaWdDQUNJUFFRRnFOZ0lBSUE4Z0VEb0FBQXNNQWdzZ0RDd0FDeUlQUVFCSUlSQWdGeUFNS0FJRUlBOUIvd0Z4SUJBYklnOUZja1VFUUNBUElBd29BZ0FnRENBUUd5SVBhaUVRSUFJb0FnQWhFUU5BSUE4Z0VFY0VRQ0FSSUE4c0FBQTZBQUFnRVVFQmFpRVJJQTlCQVdvaER3d0JDd3NnQWlBUk5nSUFDd3dCQ3lBQ0tBSUFJUklnQkVFQmFpQUVJQWNiSWhNaEJBTkFBa0FnQkNBRlR3MEFJQVFzQUFBaUQwRi9UQTBBSUFZb0FnZ2dEMEVCZEdvdUFRQkJnQkJ4UlEwQUlBUkJBV29oQkF3QkN3c2dHQVJBSUE0aER3TkFJQTlCQUVvaUVDQUVJQk5MY1FSQUlBUkJmMm9pQkN3QUFDRVJJQUlnQWlnQ0FDSVFRUUZxTmdJQUlCQWdFVG9BQUNBUFFYOXFJUThNQVFzTElCQUVmeUFHS0FJQUtBSWNJUkFnQmtFd0lCQkJQM0ZCaWdGcUVRSUFCVUVBQ3lFUkEwQWdBaUFDS0FJQUloQkJBV28yQWdBZ0QwRUFTZ1JBSUJBZ0VUb0FBQ0FQUVg5cUlROE1BUXNMSUJBZ0NUb0FBQXNnQkNBVFJnUkFJQVlvQWdBb0Fod2hCQ0FHUVRBZ0JFRS9jVUdLQVdvUkFnQWhEeUFDSUFJb0FnQWlCRUVCYWpZQ0FDQUVJQTg2QUFBRkFrQWdDeXdBQ3lJUFFRQklJUkFnQ3lnQ0JDQVBRZjhCY1NBUUd3Ui9JQXNvQWdBZ0N5QVFHeXdBQUFWQmZ3c2hEMEVBSVJGQkFDRVVJQVFoRUFOQUlCQWdFMFlOQVNBUElCUkdCRUFnQWlBQ0tBSUFJZ1JCQVdvMkFnQWdCQ0FLT2dBQUlBc3NBQXNpRDBFQVNDRVdJQkZCQVdvaUJDQUxLQUlFSUE5Qi93RnhJQlliU1FSQVFYOGdCQ0FMS0FJQUlBc2dGaHRxTEFBQUlnOGdEMEgvQUVZYklROEZJQlFoRHd0QkFDRVVCU0FSSVFRTElCQkJmMm9pRUN3QUFDRVdJQUlnQWlnQ0FDSVJRUUZxTmdJQUlCRWdGam9BQUNBRUlSRWdGRUVCYWlFVURBQUFDd0FMQ3lBQ0tBSUFJZ1FnRWtZRWZ5QVRCUU5BSUJJZ0JFRi9haUlFU1FSQUlCSXNBQUFoRHlBU0lBUXNBQUE2QUFBZ0JDQVBPZ0FBSUJKQkFXb2hFZ3dCQlNBVElRUU1Bd3NBQUFzQUN5RUVDeUFWUVFGcUlSVU1BUXNMSUEwc0FBc2lCRUVBU0NFR0lBMG9BZ1FnQkVIL0FYRWdCaHNpQlVFQlN3UkFJQTBvQWdBZ0RTQUdHeUlFSUFWcUlRVWdBaWdDQUNFR0EwQWdCU0FFUVFGcUlnUkhCRUFnQmlBRUxBQUFPZ0FBSUFaQkFXb2hCZ3dCQ3dzZ0FpQUdOZ0lBQ3dKQUlBTkJzQUZ4UVJoMFFSaDFRUkJySWdORkRRQWdBMEVRUmdSQUlBRWdBaWdDQURZQ0FBd0JDeUFCSUFBMkFnQUxDOWtGQVFWL0l3WWhDaU1HUVJCcUpBWWdDa0VNYWlFTElBb2dBQVIvSUFKQjZNOERFRG9GSUFKQjRNOERFRG9MSWdBZ0FRUi9JQXNnQUNBQUtBSUFLQUlzUVQ5eFFiSUZhaEVEQUNBRElBc29BZ0EyQUFBZ0FDZ0NBQ2dDSUFVZ0N5QUFJQUFvQWdBb0FpaEJQM0ZCc2dWcUVRTUFJQU1nQ3lnQ0FEWUFBQ0FBS0FJQUtBSWNDMEUvY1VHeUJXb1JBd0FnQ0N3QUMwRUFTQVJBQW44Z0NDZ0NBQ0VNSUF0QkFEb0FBQ0FNQ3lBTEVGOGdDRUVBTmdJRUlBZ3NBQXRCQUVnRVFDQUlLQUlJR2lBSUtBSUFFRGdnQ0VFQU5nSUlDd1VnQzBFQU9nQUFJQWdnQ3hCZklBaEJBRG9BQ3dzZ0NDQUtLUUlBTndJQUlBZ2dDaWdDQ0RZQ0NFRUFJUUVEUUNBQlFRTkhCRUFnQVVFQ2RDQUtha0VBTmdJQUlBRkJBV29oQVF3QkN3c2dDaEJISUFRZ0FDQUFLQUlBS0FJTVFmOEFjVUVJYWhFQUFEb0FBQ0FGSUFBZ0FDZ0NBQ2dDRUVIL0FIRkJDR29SQUFBNkFBQWdDaUFBSUFBb0FnQW9BaFJCUDNGQnNnVnFFUU1BSUFZc0FBdEJBRWdFUUFKL0lBWW9BZ0FoRFNBTFFRQTZBQUFnRFFzZ0N4QmZJQVpCQURZQ0JDQUdMQUFMUVFCSUJFQWdCaWdDQ0JvZ0JpZ0NBQkE0SUFaQkFEWUNDQXNGSUF0QkFEb0FBQ0FHSUFzUVh5QUdRUUE2QUFzTElBWWdDaWtDQURjQ0FDQUdJQW9vQWdnMkFnaEJBQ0VDQTBBZ0FrRURSd1JBSUFKQkFuUWdDbXBCQURZQ0FDQUNRUUZxSVFJTUFRc0xJQW9RUnlBS0lBQWdBQ2dDQUNnQ0dFRS9jVUd5QldvUkF3QWdCeXdBQzBFQVNBUkFBbjhnQnlnQ0FDRU9JQXRCQURvQUFDQU9DeUFMRUY4Z0IwRUFOZ0lFSUFjc0FBdEJBRWdFUUNBSEtBSUlHaUFIS0FJQUVEZ2dCMEVBTmdJSUN3VWdDMEVBT2dBQUlBY2dDeEJmSUFkQkFEb0FDd3NnQnlBS0tRSUFOd0lBSUFjZ0NpZ0NDRFlDQ0VFQUlRRURRQ0FCUVFOSEJFQWdBVUVDZENBS2FrRUFOZ0lBSUFGQkFXb2hBUXdCQ3dzZ0NoQkhJQWtnQUNBQUtBSUFLQUlrUWY4QWNVRUlhaEVBQURZQ0FDQUtKQVlMdFNNQkczOGpCaUVQSXdaQmdBUnFKQVlnRDBIMEEyb2hHU0FQUWRnRGFpRWZJQTlCMUFOcUlTQWdEMEc4QTJvaERDQVBRYkFEYWlFTklBOUJwQU5xSVE0Z0QwR1lBMm9oRVNBUFFaUURhaUVYSUE5QmtBTnFJUndnRDBId0Eyb2lHaUFLTmdJQUlBOUI2QU5xSWhRZ0R6WUNBQ0FVUVpFQk5nSUVJQTlCNEFOcUloSWdEellDQUNBUFFkd0RhaUliSUE5QmtBTnFOZ0lBSUE5QnlBTnFJaFpDQURjQ0FDQVdRUUEyQWdoQkFDRUtBMEFnQ2tFRFJ3UkFJQXBCQW5RZ0ZtcEJBRFlDQUNBS1FRRnFJUW9NQVFzTElBeENBRGNDQUNBTVFRQTJBZ2hCQUNFS0EwQWdDa0VEUndSQUlBcEJBblFnREdwQkFEWUNBQ0FLUVFGcUlRb01BUXNMSUExQ0FEY0NBQ0FOUVFBMkFnaEJBQ0VLQTBBZ0NrRURSd1JBSUFwQkFuUWdEV3BCQURZQ0FDQUtRUUZxSVFvTUFRc0xJQTVDQURjQ0FDQU9RUUEyQWdoQkFDRUtBMEFnQ2tFRFJ3UkFJQXBCQW5RZ0RtcEJBRFlDQUNBS1FRRnFJUW9NQVFzTElCRkNBRGNDQUNBUlFRQTJBZ2hCQUNFS0EwQWdDa0VEUndSQUlBcEJBblFnRVdwQkFEWUNBQ0FLUVFGcUlRb01BUXNMSUFJZ0F5QVpJQjhnSUNBV0lBd2dEU0FPSUJjUXF3b2dDU0FJS0FJQU5nSUFJQVJCZ0FSeFFRQkhJU0ZCQUNFQ0FuOENRQUpBQWtBQ1FBSkFBa0FEUUFKQUlCTkJCRThOQnlBQUtBSUFJZ01FZnlBREtBSU1JZ1FnQXlnQ0VFWUVmeUFESUFNb0FnQW9BaVJCL3dCeFFRaHFFUUFBQlNBRUtBSUFDMEYvRUVFRWZ5QUFRUUEyQWdCQkFRVWdBQ2dDQUVVTEJVRUJDeUVEQWtBQ1FDQUJLQUlBSWd0RkRRQWdDeWdDRENJRUlBc29BaEJHQkg4Z0N5QUxLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdCQ2dDQUF0QmZ4QkJCRUFnQVVFQU5nSUFEQUVGSUFORkRRb0xEQUVMSUFNTkNFRUFJUXNMQWtBQ1FBSkFBa0FDUUFKQUFrQWdFeUFaYWl3QUFBNEZBUUFEQWdRR0N5QVRRUU5IQkVBZ0IwR0F3QUFnQUNnQ0FDSURLQUlNSWdRZ0F5Z0NFRVlFZnlBRElBTW9BZ0FvQWlSQi93QnhRUWhxRVFBQUJTQUVLQUlBQ3lBSEtBSUFLQUlNUVQ5eFFjb0JhaEVFQUVVTkJ5QVJJQUFvQWdBaUF5Z0NEQ0lFSUFNb0FoQkdCSDhnQXlBREtBSUFLQUlvUWY4QWNVRUlhaEVBQUFVZ0F5QUVRUVJxTmdJTUlBUW9BZ0FMRUk0Q0RBVUxEQVVMSUJOQkEwY05Bd3dFQ3lBTktBSUVJQTBzQUFzaUEwSC9BWEVnQTBFQVNCc2lDMEVBSUE0b0FnUWdEaXdBQ3lJRFFmOEJjU0FEUVFCSUd5SVFhMGNFUUNBQUtBSUFJZ01vQWd3aUJDQURLQUlRUmlFS0lBdEZJZ3NnRUVWeUJFQWdDZ1IvSUFNZ0F5Z0NBQ2dDSkVIL0FIRkJDR29SQUFBRklBUW9BZ0FMSVFNZ0N3UkFJQTRvQWdBZ0RpQU9MQUFMUVFCSUd5Z0NBQ0FEUncwR0lBQW9BZ0FpQXlnQ0RDSUVJQU1vQWhCR0JFQWdBeUFES0FJQUtBSW9RZjhBY1VFSWFoRUFBQm9GSUFNZ0JFRUVhallDRENBRUtBSUFHZ3NnQmtFQk9nQUFJQTRnQWlBT0tBSUVJQTRzQUFzaUFrSC9BWEVnQWtFQVNCdEJBVXNiSVFJTUJnc2dEU2dDQUNBTklBMHNBQXRCQUVnYktBSUFJQU5IQkVBZ0JrRUJPZ0FBREFZTElBQW9BZ0FpQXlnQ0RDSUVJQU1vQWhCR0JFQWdBeUFES0FJQUtBSW9RZjhBY1VFSWFoRUFBQm9GSUFNZ0JFRUVhallDRENBRUtBSUFHZ3NnRFNBQ0lBMG9BZ1FnRFN3QUN5SUNRZjhCY1NBQ1FRQklHMEVCU3hzaEFnd0ZDd0ovSUFvRWZ5QURJQU1vQWdBb0FpUkIvd0J4UVFocUVRQUFCU0FFS0FJQUN5RWtJQUFvQWdBaUF5Z0NEQ0lFSUFNb0FoQkdJUW9nSkNBTktBSUFJQTBnRFN3QUMwRUFTQnNvQWdCR0N3UkFJQW9FUUNBRElBTW9BZ0FvQWloQi93QnhRUWhxRVFBQUdnVWdBeUFFUVFScU5nSU1JQVFvQWdBYUN5QU5JQUlnRFNnQ0JDQU5MQUFMSWdKQi93RnhJQUpCQUVnYlFRRkxHeUVDREFVTElBb0VmeUFESUFNb0FnQW9BaVJCL3dCeFFRaHFFUUFBQlNBRUtBSUFDeUFPS0FJQUlBNGdEaXdBQzBFQVNCc29BZ0JIRFFjZ0FDZ0NBQ0lES0FJTUlnUWdBeWdDRUVZRVFDQURJQU1vQWdBb0FpaEIvd0J4UVFocUVRQUFHZ1VnQXlBRVFRUnFOZ0lNSUFRb0FnQWFDeUFHUVFFNkFBQWdEaUFDSUE0b0FnUWdEaXdBQ3lJQ1FmOEJjU0FDUVFCSUcwRUJTeHNoQWdzTUF3c0NRQUpBSUJOQkFra2dBbklFUUNBTUtBSUFJZ1FnRENBTUxBQUxJZ3BCQUVnYklRTWdFdzBCQlNBVFFRSkdJQmtzQUFOQkFFZHhJQ0Z5UlFSQVFRQWhBZ3dHQ3lBTUtBSUFJZ1FnRENBTUxBQUxJZ3BCQUVnYklRTU1BUXNNQVFzZ0dTQVRRWDlxYWkwQUFFRUNTQVJBQWtBQ1FBTkFJQU1nRENnQ0JDQUtRZjhCY1NBS1FSaDBRUmgxUVFCSUloQWJRUUowSUFRZ0RDQVFHMnBIQkVBZ0IwR0F3QUFnQXlnQ0FDQUhLQUlBS0FJTVFUOXhRY29CYWhFRUFFVU5BaUFEUVFScUlRTWdEQ3dBQ3lFS0lBd29BZ0FoQkF3QkN3c01BUXNnREN3QUN5RUtJQXdvQWdBaEJBc2dFU3dBQ3lJWVFRQklJUlVnQXlBRUlBd2dDa0VZZEVFWWRVRUFTQnNpSFNJUWEwRUNkU0lpSUJFb0FnUWlIaUFZUWY4QmNTSVlJQlViU3dSL0lCQUZJQkVvQWdBZ0hrRUNkR29pSGlBWVFRSjBJQkZxSWhnZ0ZSc2hJMEVBSUNKclFRSjBJQjRnR0NBVkcyb2hGUU4vSUJVZ0kwWU5BeUFWS0FJQUlCMG9BZ0JHQkg4Z0hVRUVhaUVkSUJWQkJHb2hGUXdCQlNBUUN3c0xJUU1MQ3dOQUFrQWdBeUFNS0FJRUlBcEIvd0Z4SUFwQkdIUkJHSFZCQUVnaUNodEJBblFnQkNBTUlBb2Jha1lOQUNBQUtBSUFJZ1FFZnlBRUtBSU1JZ29nQkNnQ0VFWUVmeUFFSUFRb0FnQW9BaVJCL3dCeFFRaHFFUUFBQlNBS0tBSUFDMEYvRUVFRWZ5QUFRUUEyQWdCQkFRVWdBQ2dDQUVVTEJVRUJDeUVFQWtBQ1FDQUxSUTBBSUFzb0Fnd2lDaUFMS0FJUVJnUi9JQXNnQ3lnQ0FDZ0NKRUgvQUhGQkNHb1JBQUFGSUFvb0FnQUxRWDhRUVFSQUlBRkJBRFlDQUF3QkJTQUVSUTBEQ3d3QkN5QUVEUUZCQUNFTEN5QUFLQUlBSWdRb0Fnd2lDaUFFS0FJUVJnUi9JQVFnQkNnQ0FDZ0NKRUgvQUhGQkNHb1JBQUFGSUFvb0FnQUxJQU1vQWdCSERRQWdBQ2dDQUNJRUtBSU1JZ29nQkNnQ0VFWUVRQ0FFSUFRb0FnQW9BaWhCL3dCeFFRaHFFUUFBR2dVZ0JDQUtRUVJxTmdJTUlBb29BZ0FhQ3lBRFFRUnFJUU1nREN3QUN5RUtJQXdvQWdBaEJBd0JDd3NnSVFSQUlBd3NBQXNpQ2tFQVNDRUVJQXdvQWdRZ0NrSC9BWEVnQkJ0QkFuUWdEQ2dDQUNBTUlBUWJhaUFEUncwSEN3d0NDMEVBSVFRZ0N5RURBMEFDUUNBQUtBSUFJZ29FZnlBS0tBSU1JaEFnQ2lnQ0VFWUVmeUFLSUFvb0FnQW9BaVJCL3dCeFFRaHFFUUFBQlNBUUtBSUFDMEYvRUVFRWZ5QUFRUUEyQWdCQkFRVWdBQ2dDQUVVTEJVRUJDeUVLQWtBQ1FDQUxSUTBBSUFzb0Fnd2lFQ0FMS0FJUVJnUi9JQXNnQ3lnQ0FDZ0NKRUgvQUhGQkNHb1JBQUFGSUJBb0FnQUxRWDhRUVFSQUlBRkJBRFlDQUVFQUlRTU1BUVVnQ2tVTkF3c01BUXNnQ2cwQlFRQWhDd3NnQjBHQUVDQUFLQUlBSWdvb0Fnd2lFQ0FLS0FJUVJnUi9JQW9nQ2lnQ0FDZ0NKRUgvQUhGQkNHb1JBQUFGSUJBb0FnQUxJaEFnQnlnQ0FDZ0NERUUvY1VIS0FXb1JCQUFFZnlBSktBSUFJZ29nR2lnQ0FFWUVRQ0FJSUFrZ0doRE5BU0FKS0FJQUlRb0xJQWtnQ2tFRWFqWUNBQ0FLSUJBMkFnQWdCRUVCYWdVZ0ZpZ0NCQ0FXTEFBTElncEIvd0Z4SUFwQkFFZ2JRUUJISUFSQkFFZHhJQkFnSUNnQ0FFWnhSUTBCSUJJb0FnQWlDaUFiS0FJQVJnUkFJQlFnRWlBYkVNMEJJQklvQWdBaENnc2dFaUFLUVFScU5nSUFJQW9nQkRZQ0FFRUFDeUVFSUFBb0FnQWlDaWdDRENJUUlBb29BaEJHQkVBZ0NpQUtLQUlBS0FJb1FmOEFjVUVJYWhFQUFCb0ZJQW9nRUVFRWFqWUNEQ0FRS0FJQUdnc01BUXNMSUJJb0FnQWlDaUFVS0FJQVJ5QUVRUUJIY1FSQUlBb2dHeWdDQUVZRVFDQVVJQklnR3hETkFTQVNLQUlBSVFvTElCSWdDa0VFYWpZQ0FDQUtJQVEyQWdBTElCY29BZ0JCQUVvRVFBSkFJQUFvQWdBaUJBUi9JQVFvQWd3aUNpQUVLQUlRUmdSL0lBUWdCQ2dDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQW9vQWdBTFFYOFFRUVIvSUFCQkFEWUNBRUVCQlNBQUtBSUFSUXNGUVFFTElRUUNRQUpBSUFORkRRQWdBeWdDRENJS0lBTW9BaEJHQkg4Z0F5QURLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdDaWdDQUF0QmZ4QkJCRUFnQVVFQU5nSUFEQUVGSUFSRkRRc0xEQUVMSUFRTkNVRUFJUU1MSUFBb0FnQWlCQ2dDRENJS0lBUW9BaEJHQkg4Z0JDQUVLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdDaWdDQUFzZ0h5Z0NBRWNOQ0NBQUtBSUFJZ1FvQWd3aUNpQUVLQUlRUmdSQUlBUWdCQ2dDQUNnQ0tFSC9BSEZCQ0dvUkFBQWFCU0FFSUFwQkJHbzJBZ3dnQ2lnQ0FCb0xBMEFnRnlnQ0FFRUFUQTBCSUFBb0FnQWlCQVIvSUFRb0Fnd2lDaUFFS0FJUVJnUi9JQVFnQkNnQ0FDZ0NKRUgvQUhGQkNHb1JBQUFGSUFvb0FnQUxRWDhRUVFSL0lBQkJBRFlDQUVFQkJTQUFLQUlBUlFzRlFRRUxJUVFDUUFKQUlBTkZEUUFnQXlnQ0RDSUtJQU1vQWhCR0JIOGdBeUFES0FJQUtBSWtRZjhBY1VFSWFoRUFBQVVnQ2lnQ0FBdEJmeEJCQkVBZ0FVRUFOZ0lBREFFRklBUkZEUTBMREFFTElBUU5DMEVBSVFNTElBZEJnQkFnQUNnQ0FDSUVLQUlNSWdvZ0JDZ0NFRVlFZnlBRUlBUW9BZ0FvQWlSQi93QnhRUWhxRVFBQUJTQUtLQUlBQ3lBSEtBSUFLQUlNUVQ5eFFjb0JhaEVFQUVVTkNpQUpLQUlBSUJvb0FnQkdCRUFnQ0NBSklCb1F6UUVMSUFBb0FnQWlCQ2dDRENJS0lBUW9BaEJHQkg4Z0JDQUVLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdDaWdDQUFzaEJDQUpJQWtvQWdBaUNrRUVhallDQUNBS0lBUTJBZ0FnRnlBWEtBSUFRWDlxTmdJQUlBQW9BZ0FpQkNnQ0RDSUtJQVFvQWhCR0JFQWdCQ0FFS0FJQUtBSW9RZjhBY1VFSWFoRUFBQm9GSUFRZ0NrRUVhallDRENBS0tBSUFHZ3NNQUFBTEFBc0xJQWtvQWdBZ0NDZ0NBRVlOQ0F3QkN3TkFJQUFvQWdBaUF3Ui9JQU1vQWd3aUJDQURLQUlRUmdSL0lBTWdBeWdDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQVFvQWdBTFFYOFFRUVIvSUFCQkFEWUNBRUVCQlNBQUtBSUFSUXNGUVFFTElRTUNRQUpBSUF0RkRRQWdDeWdDRENJRUlBc29BaEJHQkg4Z0N5QUxLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdCQ2dDQUF0QmZ4QkJCRUFnQVVFQU5nSUFEQUVGSUFORkRRUUxEQUVMSUFNTkFrRUFJUXNMSUFkQmdNQUFJQUFvQWdBaUF5Z0NEQ0lFSUFNb0FoQkdCSDhnQXlBREtBSUFLQUlrUWY4QWNVRUlhaEVBQUFVZ0JDZ0NBQXNnQnlnQ0FDZ0NERUUvY1VIS0FXb1JCQUJGRFFFZ0VTQUFLQUlBSWdNb0Fnd2lCQ0FES0FJUVJnUi9JQU1nQXlnQ0FDZ0NLRUgvQUhGQkNHb1JBQUFGSUFNZ0JFRUVhallDRENBRUtBSUFDeENPQWd3QUFBc0FDeUFUUVFGcUlSTU1BUXNMSUFVZ0JTZ0NBRUVFY2pZQ0FFRUFEQVlMSUFVZ0JTZ0NBRUVFY2pZQ0FFRUFEQVVMSUFVZ0JTZ0NBRUVFY2pZQ0FFRUFEQVFMSUFVZ0JTZ0NBRUVFY2pZQ0FFRUFEQU1MSUFVZ0JTZ0NBRUVFY2pZQ0FFRUFEQUlMSUFVZ0JTZ0NBRUVFY2pZQ0FFRUFEQUVMSUFJRVFBSkFJQUloQmtFQklRY0RRQUpBSUFjZ0Fpd0FDeUlEUVFCSUJIOGdCaWdDQkFVZ0EwSC9BWEVMVHcwQ0lBQW9BZ0FpQXdSL0lBTW9BZ3dpQkNBREtBSVFSZ1IvSUFNZ0F5Z0NBQ2dDSkVIL0FIRkJDR29SQUFBRklBUW9BZ0FMUVg4UVFRUi9JQUJCQURZQ0FFRUJCU0FBS0FJQVJRc0ZRUUVMSVFRQ1FBSkFJQUVvQWdBaUEwVU5BQ0FES0FJTUlnZ2dBeWdDRUVZRWZ5QURJQU1vQWdBb0FpUkIvd0J4UVFocUVRQUFCU0FJS0FJQUMwRi9FRUVFUUNBQlFRQTJBZ0FNQVFVZ0JFVU5Bd3NNQVFzZ0JBMEJDeUFBS0FJQUlnTW9BZ3dpQkNBREtBSVFSZ1IvSUFNZ0F5Z0NBQ2dDSkVIL0FIRkJDR29SQUFBRklBUW9BZ0FMSUFJc0FBdEJBRWdFZnlBQ0tBSUFCU0FDQ3lBSFFRSjBhaWdDQUVjTkFDQUFLQUlBSWdNb0Fnd2lCQ0FES0FJUVJnUkFJQU1nQXlnQ0FDZ0NLRUgvQUhGQkNHb1JBQUFhQlNBRElBUkJCR28yQWd3Z0JDZ0NBQm9MSUFkQkFXb2hCd3dCQ3dzZ0JTQUZLQUlBUVFSeU5nSUFRUUFNQWdzTElCUW9BZ0FpQUNBU0tBSUFJZ0ZHQkg5QkFRVWdIRUVBTmdJQUlCWWdBQ0FCSUJ3UWVDQWNLQUlBQkg4Z0JTQUZLQUlBUVFSeU5nSUFRUUFGUVFFTEN3c2hKU0FSRUVjZ0RoQkhJQTBRUnlBTUVFY2dGaEJISUJRb0FnQWhBQ0FVUVFBMkFnQWdBQVJBSUFBZ0ZDZ0NCRUgvQVhGQnJBTnFFUUVBQ3lBUEpBWWdKUXVzQVFFRmZ5QUNLQUlBSUFBb0FnQWlBeUlHYXlJRlFRRjBJZ1JCQVNBRUcwRi9JQVZCLy8vLy93ZEpHeUVGSUFFb0FnQWhCeUFEUVFBZ0FDZ0NCRUdSQVVjaUJCc2dCUkRvQVNJRFJRUkFFQUFMSUFRRVFDQUFJQU0yQWdBRklBQW9BZ0FoQkNBQUlBTTJBZ0FnQkFSQUlBUWdBQ2dDQkVIL0FYRkJyQU5xRVFFQUlBQW9BZ0FoQXdzTElBQkJrZ0UyQWdRZ0FTQUhJQVpySUFOcU5nSUFJQUlnQlNBQUtBSUFhallDQUF1Y0pBRWFmeU1HSVJBakJrR0FCR29rQmlBUVFmQURhaUVhSUJCQjdRTnFJU0FnRUVIc0Eyb2hJU0FRUWJ3RGFpRU5JQkJCc0FOcUlRNGdFRUdrQTJvaER5QVFRWmdEYWlFUklCQkJsQU5xSVJjZ0VFR1FBMm9oSGlBUVFlZ0RhaUliSUFvMkFnQWdFRUhnQTJvaUZTQVFOZ0lBSUJWQmtRRTJBZ1FnRUVIWUEyb2lFeUFRTmdJQUlCQkIxQU5xSWh3Z0VFR1FBMm8yQWdBZ0VFSElBMm9pRmtJQU53SUFJQlpCQURZQ0NFRUFJUW9EUUNBS1FRTkhCRUFnQ2tFQ2RDQVdha0VBTmdJQUlBcEJBV29oQ2d3QkN3c2dEVUlBTndJQUlBMUJBRFlDQ0VFQUlRb0RRQ0FLUVFOSEJFQWdDa0VDZENBTmFrRUFOZ0lBSUFwQkFXb2hDZ3dCQ3dzZ0RrSUFOd0lBSUE1QkFEWUNDRUVBSVFvRFFDQUtRUU5IQkVBZ0NrRUNkQ0FPYWtFQU5nSUFJQXBCQVdvaENnd0JDd3NnRDBJQU53SUFJQTlCQURZQ0NFRUFJUW9EUUNBS1FRTkhCRUFnQ2tFQ2RDQVBha0VBTmdJQUlBcEJBV29oQ2d3QkN3c2dFVUlBTndJQUlCRkJBRFlDQ0VFQUlRb0RRQ0FLUVFOSEJFQWdDa0VDZENBUmFrRUFOZ0lBSUFwQkFXb2hDZ3dCQ3dzZ0FpQURJQm9nSUNBaElCWWdEU0FPSUE4Z0Z4Q3ZDaUFKSUFnb0FnQTJBZ0FnQkVHQUJIRkJBRWNoSWtFQUlRSUNmd0pBQWtBQ1FBSkFBa0FDUUFOQUFrQWdGRUVFVHcwSElBQW9BZ0FpQXdSL0lBTW9BZ3dpQkNBREtBSVFSZ1IvSUFNZ0F5Z0NBQ2dDSkVIL0FIRkJDR29SQUFBRklBUXNBQUFRUWd0QmZ4QkJCSDhnQUVFQU5nSUFRUUVGSUFBb0FnQkZDd1ZCQVFzaEF3SkFBa0FnQVNnQ0FDSU1SUTBBSUF3b0Fnd2lCQ0FNS0FJUVJnUi9JQXdnRENnQ0FDZ0NKRUgvQUhGQkNHb1JBQUFGSUFRc0FBQVFRZ3RCZnhCQkJFQWdBVUVBTmdJQURBRUZJQU5GRFFvTERBRUxJQU1OQ0VFQUlRd0xBa0FDUUFKQUFrQUNRQUpBQWtBZ0ZDQWFhaXdBQUE0RkFRQURBZ1FHQ3lBVVFRTkhCRUFnQUNnQ0FDSURLQUlNSWdRZ0F5Z0NFRVlFZnlBRElBTW9BZ0FvQWlSQi93QnhRUWhxRVFBQUJTQUVMQUFBRUVJTElnTkIvd0Z4UVJoMFFSaDFRWDlNRFFjZ0J5Z0NDQ0FEUVJoMFFSaDFRUUYwYWk0QkFFR0F3QUJ4UlEwSElCRWdBQ2dDQUNJREtBSU1JZ1FnQXlnQ0VFWUVmeUFESUFNb0FnQW9BaWhCL3dCeFFRaHFFUUFBQlNBRElBUkJBV28yQWd3Z0JDd0FBQkJDQzBIL0FYRVF6QUVNQlFzTUJRc2dGRUVEUncwRERBUUxJQTRvQWdRZ0Rpd0FDeUlEUWY4QmNTQURRUUJJR3lJTFFRQWdEeWdDQkNBUExBQUxJZ05CL3dGeElBTkJBRWdiSWd4clJ3UkFJQUFvQWdBaUF5Z0NEQ0lFSUFNb0FoQkdJUW9nQzBVaUN5QU1SWElFUUNBS0JIOGdBeUFES0FJQUtBSWtRZjhBY1VFSWFoRUFBQVVnQkN3QUFCQkNDMEgvQVhFaEF5QUxCRUFnRHlnQ0FDQVBJQThzQUF0QkFFZ2JMUUFBSUFOSERRWWdBQ2dDQUNJREtBSU1JZ1FnQXlnQ0VFWUVRQ0FESUFNb0FnQW9BaWhCL3dCeFFRaHFFUUFBR2dVZ0F5QUVRUUZxTmdJTUlBUXNBQUFRUWhvTElBWkJBVG9BQUNBUElBSWdEeWdDQkNBUExBQUxJZ0pCL3dGeElBSkJBRWdiUVFGTEd5RUNEQVlMSUE0b0FnQWdEaUFPTEFBTFFRQklHeTBBQUNBRFJ3UkFJQVpCQVRvQUFBd0dDeUFBS0FJQUlnTW9BZ3dpQkNBREtBSVFSZ1JBSUFNZ0F5Z0NBQ2dDS0VIL0FIRkJDR29SQUFBYUJTQURJQVJCQVdvMkFnd2dCQ3dBQUJCQ0dnc2dEaUFDSUE0b0FnUWdEaXdBQ3lJQ1FmOEJjU0FDUVFCSUcwRUJTeHNoQWd3RkN5QUtCSDhnQXlBREtBSUFLQUlrUWY4QWNVRUlhaEVBQUFVZ0JDd0FBQkJDQ3lFTElBQW9BZ0FpQXlnQ0RDSUVJQU1vQWhCR0lRb2dEaWdDQUNBT0lBNHNBQXRCQUVnYkxRQUFJQXRCL3dGeFJnUkFJQW9FUUNBRElBTW9BZ0FvQWloQi93QnhRUWhxRVFBQUdnVWdBeUFFUVFGcU5nSU1JQVFzQUFBUVFob0xJQTRnQWlBT0tBSUVJQTRzQUFzaUFrSC9BWEVnQWtFQVNCdEJBVXNiSVFJTUJRc2dDZ1IvSUFNZ0F5Z0NBQ2dDSkVIL0FIRkJDR29SQUFBRklBUXNBQUFRUWd0Qi93RnhJQThvQWdBZ0R5QVBMQUFMUVFCSUd5MEFBRWNOQnlBQUtBSUFJZ01vQWd3aUJDQURLQUlRUmdSQUlBTWdBeWdDQUNnQ0tFSC9BSEZCQ0dvUkFBQWFCU0FESUFSQkFXbzJBZ3dnQkN3QUFCQkNHZ3NnQmtFQk9nQUFJQThnQWlBUEtBSUVJQThzQUFzaUFrSC9BWEVnQWtFQVNCdEJBVXNiSVFJTERBTUxBa0FDUUNBVVFRSkpJQUp5QkVBZ0RTZ0NBQ0lLSUEwZ0RTd0FDeUlEUVFCSUlnc2JJaGdoQkNBVURRRUZJQlJCQWtZZ0dpd0FBMEVBUjNFZ0luSkZCRUJCQUNFQ0RBWUxJQTBvQWdBaUNpQU5JQTBzQUFzaUEwRUFTQ0lMR3lJWUlRUU1BUXNNQVFzZ0dpQVVRWDlxYWkwQUFFRUNTQVJBSUEwb0FnUWdBMEgvQVhFZ0N4c2dHR29oRWlBRUlRc0RRQUpBSUFzZ0VrWU5BQ0FMTEFBQUloMUJmMHdOQUNBSEtBSUlJQjFCQVhScUxnRUFRWURBQUhGRkRRQWdDMEVCYWlFTERBRUxDeUFSTEFBTElobEJBRWdoRWlBTElBUnJJaDBnRVNnQ0JDSWZJQmxCL3dGeEloa2dFaHROQkVBZ0h5QVJLQUlBYWlJZklCRWdHV29pR1NBU0d5RWpJQjhnSFdzZ0dTQWRheUFTR3lFU0EwQWdFaUFqUmdSQUlBc2hCQXdFQ3lBU0xBQUFJQmdzQUFCR0JFQWdHRUVCYWlFWUlCSkJBV29oRWd3QkN3c0xDd3NEUUFKQUlBUWdDaUFOSUFOQkdIUkJHSFZCQUVnaUNoc2dEU2dDQkNBRFFmOEJjU0FLRzJwR0RRQWdBQ2dDQUNJREJIOGdBeWdDRENJS0lBTW9BaEJHQkg4Z0F5QURLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdDaXdBQUJCQ0MwRi9FRUVFZnlBQVFRQTJBZ0JCQVFVZ0FDZ0NBRVVMQlVFQkN5RURBa0FDUUNBTVJRMEFJQXdvQWd3aUNpQU1LQUlRUmdSL0lBd2dEQ2dDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQW9zQUFBUVFndEJmeEJCQkVBZ0FVRUFOZ0lBREFFRklBTkZEUU1MREFFTElBTU5BVUVBSVF3TElBQW9BZ0FpQXlnQ0RDSUtJQU1vQWhCR0JIOGdBeUFES0FJQUtBSWtRZjhBY1VFSWFoRUFBQVVnQ2l3QUFCQkNDMEgvQVhFZ0JDMEFBRWNOQUNBQUtBSUFJZ01vQWd3aUNpQURLQUlRUmdSQUlBTWdBeWdDQUNnQ0tFSC9BSEZCQ0dvUkFBQWFCU0FESUFwQkFXbzJBZ3dnQ2l3QUFCQkNHZ3NnQkVFQmFpRUVJQTBzQUFzaEF5QU5LQUlBSVFvTUFRc0xJQ0lFUUNBRUlBMG9BZ0FnRFNBTkxBQUxJZ05CQUVnaUNoc2dEU2dDQkNBRFFmOEJjU0FLRzJwSERRY0xEQUlMUVFBaEJDQU1JUU1EUUFKQUlBQW9BZ0FpQ2dSL0lBb29BZ3dpQ3lBS0tBSVFSZ1IvSUFvZ0NpZ0NBQ2dDSkVIL0FIRkJDR29SQUFBRklBc3NBQUFRUWd0QmZ4QkJCSDhnQUVFQU5nSUFRUUVGSUFBb0FnQkZDd1ZCQVFzaENnSkFBa0FnREVVTkFDQU1LQUlNSWdzZ0RDZ0NFRVlFZnlBTUlBd29BZ0FvQWlSQi93QnhRUWhxRVFBQUJTQUxMQUFBRUVJTFFYOFFRUVJBSUFGQkFEWUNBRUVBSVFNTUFRVWdDa1VOQXdzTUFRc2dDZzBCUVFBaERBc0Nmd0pBSUFBb0FnQWlDaWdDRENJTElBb29BaEJHQkg4Z0NpQUtLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdDeXdBQUJCQ0N5SUtRZjhCY1NJTFFSaDBRUmgxUVg5TURRQWdCeWdDQ0NBS1FSaDBRUmgxUVFGMGFpNEJBRUdBRUhGRkRRQWdDU2dDQUNJS0lCc29BZ0JHQkVBZ0NDQUpJQnNRcHdRZ0NTZ0NBQ0VLQ3lBSklBcEJBV28yQWdBZ0NpQUxPZ0FBSUFSQkFXb01BUXNnRmlnQ0JDQVdMQUFMSWdwQi93RnhJQXBCQUVnYlFRQkhJQVJCQUVkeElDRXRBQUFnQzBaeFJRMEJJQk1vQWdBaUNpQWNLQUlBUmdSQUlCVWdFeUFjRU0wQklCTW9BZ0FoQ2dzZ0V5QUtRUVJxTmdJQUlBb2dCRFlDQUVFQUN5RUVJQUFvQWdBaUNpZ0NEQ0lMSUFvb0FoQkdCRUFnQ2lBS0tBSUFLQUlvUWY4QWNVRUlhaEVBQUJvRklBb2dDMEVCYWpZQ0RDQUxMQUFBRUVJYUN3d0JDd3NnRXlnQ0FDSUtJQlVvQWdCSElBUkJBRWR4QkVBZ0NpQWNLQUlBUmdSQUlCVWdFeUFjRU0wQklCTW9BZ0FoQ2dzZ0V5QUtRUVJxTmdJQUlBb2dCRFlDQUFzZ0Z5Z0NBRUVBU2dSQUFrQWdBQ2dDQUNJRUJIOGdCQ2dDRENJS0lBUW9BaEJHQkg4Z0JDQUVLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdDaXdBQUJCQ0MwRi9FRUVFZnlBQVFRQTJBZ0JCQVFVZ0FDZ0NBRVVMQlVFQkN5RUVBa0FDUUNBRFJRMEFJQU1vQWd3aUNpQURLQUlRUmdSL0lBTWdBeWdDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQW9zQUFBUVFndEJmeEJCQkVBZ0FVRUFOZ0lBREFFRklBUkZEUXNMREFFTElBUU5DVUVBSVFNTElBQW9BZ0FpQkNnQ0RDSUtJQVFvQWhCR0JIOGdCQ0FFS0FJQUtBSWtRZjhBY1VFSWFoRUFBQVVnQ2l3QUFCQkNDMEgvQVhFZ0lDMEFBRWNOQ0NBQUtBSUFJZ1FvQWd3aUNpQUVLQUlRUmdSQUlBUWdCQ2dDQUNnQ0tFSC9BSEZCQ0dvUkFBQWFCU0FFSUFwQkFXbzJBZ3dnQ2l3QUFCQkNHZ3NEUUNBWEtBSUFRUUJNRFFFZ0FDZ0NBQ0lFQkg4Z0JDZ0NEQ0lLSUFRb0FoQkdCSDhnQkNBRUtBSUFLQUlrUWY4QWNVRUlhaEVBQUFVZ0Npd0FBQkJDQzBGL0VFRUVmeUFBUVFBMkFnQkJBUVVnQUNnQ0FFVUxCVUVCQ3lFRUFrQUNRQ0FEUlEwQUlBTW9BZ3dpQ2lBREtBSVFSZ1IvSUFNZ0F5Z0NBQ2dDSkVIL0FIRkJDR29SQUFBRklBb3NBQUFRUWd0QmZ4QkJCRUFnQVVFQU5nSUFEQUVGSUFSRkRRMExEQUVMSUFRTkMwRUFJUU1MSUFBb0FnQWlCQ2dDRENJS0lBUW9BaEJHQkg4Z0JDQUVLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdDaXdBQUJCQ0N5SUVRZjhCY1VFWWRFRVlkVUYvVEEwS0lBY29BZ2dnQkVFWWRFRVlkVUVCZEdvdUFRQkJnQkJ4UlEwS0lBa29BZ0FnR3lnQ0FFWUVRQ0FJSUFrZ0d4Q25CQXNnQUNnQ0FDSUVLQUlNSWdvZ0JDZ0NFRVlFZnlBRUlBUW9BZ0FvQWlSQi93QnhRUWhxRVFBQUJTQUtMQUFBRUVJTElRUWdDU0FKS0FJQUlncEJBV28yQWdBZ0NpQUVPZ0FBSUJjZ0Z5Z0NBRUYvYWpZQ0FDQUFLQUlBSWdRb0Fnd2lDaUFFS0FJUVJnUkFJQVFnQkNnQ0FDZ0NLRUgvQUhGQkNHb1JBQUFhQlNBRUlBcEJBV28yQWd3Z0Npd0FBQkJDR2dzTUFBQUxBQXNMSUFrb0FnQWdDQ2dDQUVZTkNBd0JDd05BSUFBb0FnQWlBd1IvSUFNb0Fnd2lCQ0FES0FJUVJnUi9JQU1nQXlnQ0FDZ0NKRUgvQUhGQkNHb1JBQUFGSUFRc0FBQVFRZ3RCZnhCQkJIOGdBRUVBTmdJQVFRRUZJQUFvQWdCRkN3VkJBUXNoQXdKQUFrQWdERVVOQUNBTUtBSU1JZ1FnRENnQ0VFWUVmeUFNSUF3b0FnQW9BaVJCL3dCeFFRaHFFUUFBQlNBRUxBQUFFRUlMUVg4UVFRUkFJQUZCQURZQ0FBd0JCU0FEUlEwRUN3d0JDeUFERFFKQkFDRU1DeUFBS0FJQUlnTW9BZ3dpQkNBREtBSVFSZ1IvSUFNZ0F5Z0NBQ2dDSkVIL0FIRkJDR29SQUFBRklBUXNBQUFRUWdzaUEwSC9BWEZCR0hSQkdIVkJmMHdOQVNBSEtBSUlJQU5CR0hSQkdIVkJBWFJxTGdFQVFZREFBSEZGRFFFZ0VTQUFLQUlBSWdNb0Fnd2lCQ0FES0FJUVJnUi9JQU1nQXlnQ0FDZ0NLRUgvQUhGQkNHb1JBQUFGSUFNZ0JFRUJhallDRENBRUxBQUFFRUlMUWY4QmNSRE1BUXdBQUFzQUN5QVVRUUZxSVJRTUFRc0xJQVVnQlNnQ0FFRUVjallDQUVFQURBWUxJQVVnQlNnQ0FFRUVjallDQUVFQURBVUxJQVVnQlNnQ0FFRUVjallDQUVFQURBUUxJQVVnQlNnQ0FFRUVjallDQUVFQURBTUxJQVVnQlNnQ0FFRUVjallDQUVFQURBSUxJQVVnQlNnQ0FFRUVjallDQUVFQURBRUxJQUlFUUFKQUlBSWhCa0VCSVFjRFFBSkFJQWNnQWl3QUN5SURRUUJJQkg4Z0JpZ0NCQVVnQTBIL0FYRUxUdzBDSUFBb0FnQWlBd1IvSUFNb0Fnd2lCQ0FES0FJUVJnUi9JQU1nQXlnQ0FDZ0NKRUgvQUhGQkNHb1JBQUFGSUFRc0FBQVFRZ3RCZnhCQkJIOGdBRUVBTmdJQVFRRUZJQUFvQWdCRkN3VkJBUXNoQkFKQUFrQWdBU2dDQUNJRFJRMEFJQU1vQWd3aUNDQURLQUlRUmdSL0lBTWdBeWdDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQWdzQUFBUVFndEJmeEJCQkVBZ0FVRUFOZ0lBREFFRklBUkZEUU1MREFFTElBUU5BUXNnQUNnQ0FDSURLQUlNSWdRZ0F5Z0NFRVlFZnlBRElBTW9BZ0FvQWlSQi93QnhRUWhxRVFBQUJTQUVMQUFBRUVJTFFmOEJjU0FDTEFBTFFRQklCSDhnQWlnQ0FBVWdBZ3NnQjJvdEFBQkhEUUFnQUNnQ0FDSURLQUlNSWdRZ0F5Z0NFRVlFUUNBRElBTW9BZ0FvQWloQi93QnhRUWhxRVFBQUdnVWdBeUFFUVFGcU5nSU1JQVFzQUFBUVFob0xJQWRCQVdvaEJ3d0JDd3NnQlNBRktBSUFRUVJ5TmdJQVFRQU1BZ3NMSUJVb0FnQWlBQ0FUS0FJQUlnRkdCSDlCQVFVZ0hrRUFOZ0lBSUJZZ0FDQUJJQjRRZUNBZUtBSUFCSDhnQlNBRktBSUFRUVJ5TmdJQVFRQUZRUUVMQ3dzaEpDQVJFRWNnRHhCSElBNFFSeUFORUVjZ0ZoQkhJQlVvQWdBaEFDQVZRUUEyQWdBZ0FBUkFJQUFnRlNnQ0JFSC9BWEZCckFOcUVRRUFDeUFRSkFZZ0pBc1pBQ0FBUWdBM0FnQWdBRUVBTmdJSUlBQkJBVUV0RUpNRUN4a0FJQUJDQURjQ0FDQUFRUUEyQWdnZ0FFRUJRUzBRbGdRTEZRQWdBQ2dDQUJCY1J3UkFJQUFvQWdBUWh3TUxDMk1CQVg4akJpRUdJd1pCRUdva0JpQUdRU1U2QUFBZ0JpQUVPZ0FCSUFZZ0JUb0FBaUFHUVFBNkFBTWdCVUgvQVhFRVFDQUdJQVU2QUFFZ0JpQUVPZ0FDQ3lBQ0lBRWdBaWdDQUNBQmF5QUdJQU1nQUNnQ0FCQWZJQUZxTmdJQUlBWWtCZ3NPQUNBQVFRaHFFS3NFSUFBUU9Bc0tBQ0FBUVFocUVLc0VDMndCQVg4akJpRUZJd1pCRUdva0JpQUZJQUlvQWdBMkFnQWdCVUVFYWlJQ0lBVW9BZ0EyQWdBZ0FTQUNJQU1nQkVFRUVKa0JJUUVnQXlnQ0FFRUVjVVVFUUNBQUlBRkIwQTlxSUFGQjdBNXFJQUVnQVVIa0FFZ2JJQUZCeFFCSUcwR1VjV28yQWdBTElBVWtCZ3Q3QVFKL0l3WWhCaU1HUVJCcUpBWWdBRUVJYWlJQUtBSUFLQUlFSVFjZ0FDQUhRZjhBY1VFSWFoRUFBQ0VBSUFZZ0F5Z0NBRFlDQUNBR1FRUnFJZ01nQmlnQ0FEWUNBQ0FDSUFNZ0FDQUFRYUFDYWlBRklBUkJBQkNWQWlBQWF5SUFRYUFDU0FSQUlBRWdBRUVNRURsQkRCQlBOZ0lBQ3lBR0pBWUxld0VDZnlNR0lRWWpCa0VRYWlRR0lBQkJDR29pQUNnQ0FDZ0NBQ0VISUFBZ0IwSC9BSEZCQ0dvUkFBQWhBQ0FHSUFNb0FnQTJBZ0FnQmtFRWFpSURJQVlvQWdBMkFnQWdBaUFESUFBZ0FFR29BV29nQlNBRVFRQVFsUUlnQUdzaUFFR29BVWdFUUNBQklBQkJEQkE1UVFjUVR6WUNBQXNnQmlRR0M3Z0NBUVovSXdZaEF5TUdRWUFDYWlRR0lBTkJ3QUZxSWdJZ0FSREVDaUFEUWVBQWFpSUVJQUlRdXdwQkFDRUJBMEFnQVVFRFJ3UkFJQUZCQlhRZ0FHb2hCU0FCUVFWMElBQnFJUVlnQVVFRmRDQUFhaUVIUVFBaEFnTkFJQUpCQkVjRVFDQUJRUVYwSUFOcUlBSkJBM1JxSUFVckF3QWdBa0VEZENBRWFpc0RBS0lnQmlzRENDQUVRU0JxSUFKQkEzUnFLd01Bb3FBZ0J5c0RFQ0FFUVVCcklBSkJBM1JxS3dNQW9xQTVBd0FnQWtFQmFpRUNEQUVMQ3lBQlFRVjBJQU5xSWdJZ0FVRUZkQ0FBYWlzREdDQUNLd01Zb0RrREdDQUJRUUZxSVFFTUFRc0xRUUFoQVFOQUlBRkJBMGNFUUVFQUlRSURRQ0FDUVFSSEJFQWdBVUVGZENBQWFpQUNRUU4wYWlBQlFRVjBJQU5xSUFKQkEzUnFLd01BT1FNQUlBSkJBV29oQWd3QkN3c2dBVUVCYWlFQkRBRUxDeUFESkFZTDBBRUJCSDhqQmlFRUl3WkJNR29rQmlBRVFSaHFJZ1ZCQmpZQ0JDQUZRUUUyQWdnZ0JTQUFOZ0lBSUFSQkRHb2lCaUFETmdJRUlBWkJBVFlDQ0NBR0lBRTJBZ0FnQkNBRE5nSUVJQVJCQmpZQ0NDQUVJQUkyQWdBZ0JCQ2dBeUlBQkg4Q2Z5QUFJQVFRMlFFaUFVVUVRQ0FBRUVsQmZ3d0JDeUFBSUFZUTJRRWlBa1VFUUNBQUVFa2dBUkJKUVg4TUFRc2dBUkRXQVVFQVNBUi9JQUFRU1NBQkVFa2dBaEJKUVg4RklBVWdBU0FDRUswQ0dpQUFFRWtnQVJCSklBSVFTVUVBQ3dzRlFYOExJUWNnQkNRR0lBY0xiQUVCZnlNR0lRVWpCa0VRYWlRR0lBVWdBaWdDQURZQ0FDQUZRUVJxSWdJZ0JTZ0NBRFlDQUNBQklBSWdBeUFFUVFRUW1nRWhBU0FES0FJQVFRUnhSUVJBSUFBZ0FVSFFEMm9nQVVIc0Rtb2dBU0FCUWVRQVNCc2dBVUhGQUVnYlFaUnhhallDQUFzZ0JTUUdDM3NCQW44akJpRUdJd1pCRUdva0JpQUFRUWhxSWdBb0FnQW9BZ1FoQnlBQUlBZEIvd0J4UVFocUVRQUFJUUFnQmlBREtBSUFOZ0lBSUFaQkJHb2lBeUFHS0FJQU5nSUFJQUlnQXlBQUlBQkJvQUpxSUFVZ0JFRUFFSllDSUFCcklnQkJvQUpJQkVBZ0FTQUFRUXdRT1VFTUVFODJBZ0FMSUFZa0JndDdBUUovSXdZaEJpTUdRUkJxSkFZZ0FFRUlhaUlBS0FJQUtBSUFJUWNnQUNBSFFmOEFjVUVJYWhFQUFDRUFJQVlnQXlnQ0FEWUNBQ0FHUVFScUlnTWdCaWdDQURZQ0FDQUNJQU1nQUNBQVFhZ0JhaUFGSUFSQkFCQ1dBaUFBYXlJQVFhZ0JTQVJBSUFFZ0FFRU1FRGxCQnhCUE5nSUFDeUFHSkFZTEJBQkJBZ3VYQ0FFTGZ5TUdJUXNqQmtFUWFpUUdJQVpCb000REVEb2hDaUFHUWFqT0F4QTZJZzBvQWdBb0FoUWhCaUFMSUEwZ0JrRS9jVUd5QldvUkF3QWdCU0FETmdJQUFrQUNRQ0FDSWd3Q2Z3SkFBa0FnQUN3QUFDSUNRU3RyRGdNQUFRQUJDeUFLSUFJZ0NpZ0NBQ2dDTEVFL2NVR0tBV29SQWdBaEFpQUZJQVVvQWdBaUJrRUVhallDQUNBR0lBSTJBZ0FnQUVFQmFnd0JDeUFBQ3lJR2EwRUJUQTBBSUFZc0FBQkJNRWNOQUNBR0xBQUJRZGdBYXlJQ1FRQWdBa0VnUnhzTkFDQUtRVEFnQ2lnQ0FDZ0NMRUUvY1VHS0FXb1JBZ0FoQWlBRklBVW9BZ0FpQjBFRWFqWUNBQ0FISUFJMkFnQWdDaUFHTEFBQklBb29BZ0FvQWl4QlAzRkJpZ0ZxRVFJQUlRSWdCU0FGS0FJQUlnZEJCR28yQWdBZ0J5QUNOZ0lBSUFaQkFtb2lCaUVDQTBBZ0FpQU1TUVJBSUFJc0FBQVFYQkNEQXdSQUlBSkJBV29oQWd3Q0N3c0xEQUVMSUFZaEFnTkFJQUlnREU4TkFRSi9JQUlzQUFBaEVSQmNHaUFSQ3hDS0FRUkFJQUpCQVdvaEFnd0JDd3NMSUFzb0FnUWdDeXdBQ3lJSFFmOEJjU0FIUVFCSUd3UkFJQUlnQmtjRVFBSkFJQUloQnlBR0lRZ0RRQ0FJSUFkQmYyb2lCMDhOQVNBSUxBQUFJUWtnQ0NBSExBQUFPZ0FBSUFjZ0NUb0FBQ0FJUVFGcUlRZ01BQUFMQUFzTElBMGdEU2dDQUNnQ0VFSC9BSEZCQ0dvUkFBQWhEeUFHSVFsQkFDRUhRUUFoQ0FOQUlBa2dBa2tFUUNBSElBc29BZ0FnQ3lBTExBQUxRUUJJRzJvc0FBQWlEa0VBU2lBSUlBNUdjUVJBSUFVZ0JTZ0NBQ0lJUVFScU5nSUFJQWdnRHpZQ0FDQUhJQWNnQ3lnQ0JDQUxMQUFMSWdoQi93RnhJQWhCQUVnYlFYOXFTV29oQjBFQUlRZ0xJQW9nQ1N3QUFDQUtLQUlBS0FJc1FUOXhRWW9CYWhFQ0FDRU9JQVVnQlNnQ0FDSVFRUVJxTmdJQUlCQWdEallDQUNBSlFRRnFJUWtnQ0VFQmFpRUlEQUVMQ3lBR0lBQnJRUUowSUFOcUlna2dCU2dDQUNJSVJnUi9JQW9oQnlBSkJTQUlJUVlEZnlBSklBWkJmR29pQmtrRWZ5QUpLQUlBSVFjZ0NTQUdLQUlBTmdJQUlBWWdCellDQUNBSlFRUnFJUWtNQVFVZ0NpRUhJQWdMQ3dzaEJnVWdDaUFHSUFJZ0JTZ0NBQ0FLS0FJQUtBSXdRUTl4UVlvQ2FoRUpBQm9nQlNBRktBSUFJQUlnQm10QkFuUnFJZ1kyQWdBZ0NpRUhDd0pBQWtBRFFDQUNJQXhKQkVBZ0Fpd0FBQ0lHUVM1R0RRSWdDaUFHSUFjb0FnQW9BaXhCUDNGQmlnRnFFUUlBSVFrZ0JTQUZLQUlBSWdoQkJHb2lCallDQUNBSUlBazJBZ0FnQWtFQmFpRUNEQUVMQ3d3QkN5QU5JQTBvQWdBb0FneEIvd0J4UVFocUVRQUFJUWNnQlNBRktBSUFJZ2xCQkdvaUJqWUNBQ0FKSUFjMkFnQWdBa0VCYWlFQ0N5QUtJQUlnRENBR0lBb29BZ0FvQWpCQkQzRkJpZ0pxRVFrQUdpQUZJQVVvQWdBZ0RDQUNhMEVDZEdvaUFqWUNBQ0FFSUFJZ0FTQUFhMEVDZENBRGFpQUJJQXhHR3pZQ0FDQUxFRWNnQ3lRR0MvVUJBZ1YvQVh3akJpRUVJd1pCNEFGcUpBWWdCRUhZQVdvaEJTQUVRVEJxSWdZZ0JFSEFBV29pQnlBQ0lBTVE4d29nQkNBQklBY1E2QXBCQUVnRWYwRUFRUU5CNGF3QklBVVFQVUYvQlVFQUlRRURmeUFCUVFKR0JIOUJBQVZCQUNFQ0EwQWdBa0VHUndSQUlBRkJNR3dnQUdvZ0FrRURkR29pQlVRQUFBQUFBQUFBQURrREFFRUFJUU5FQUFBQUFBQUFBQUFoQ1FOQUlBTkJBMGNFUUNBRklBa2dBVUVZYkNBRWFpQURRUU4wYWlzREFDQURRVEJzSUFacUlBSkJBM1JxS3dNQW9xQWlDVGtEQUNBRFFRRnFJUU1NQVFzTElBSkJBV29oQWd3QkN3c2dBVUVCYWlFQkRBRUxDd3NoQ0NBRUpBWWdDQXY2QndFTGZ5TUdJUW9qQmtFUWFpUUdJQVpCZ000REVEb2hDU0FHUVpET0F4QTZJZzBvQWdBb0FoUWhCaUFLSUEwZ0JrRS9jVUd5QldvUkF3QWdCU0FETmdJQUFrQUNRQ0FDSWdzQ2Z3SkFBa0FnQUN3QUFDSUNRU3RyRGdNQUFRQUJDeUFKSUFJZ0NTZ0NBQ2dDSEVFL2NVR0tBV29SQWdBaEFpQUZJQVVvQWdBaUJrRUJhallDQUNBR0lBSTZBQUFnQUVFQmFnd0JDeUFBQ3lJR2EwRUJUQTBBSUFZc0FBQkJNRWNOQUNBR0xBQUJRZGdBYXlJQ1FRQWdBa0VnUnhzTkFDQUpRVEFnQ1NnQ0FDZ0NIRUUvY1VHS0FXb1JBZ0FoQWlBRklBVW9BZ0FpQjBFQmFqWUNBQ0FISUFJNkFBQWdDU0FHTEFBQklBa29BZ0FvQWh4QlAzRkJpZ0ZxRVFJQUlRSWdCU0FGS0FJQUlnZEJBV28yQWdBZ0J5QUNPZ0FBSUFaQkFtb2lCaUVDQTBBZ0FpQUxTUVJBSUFJc0FBQVFYQkNEQXdSQUlBSkJBV29oQWd3Q0N3c0xEQUVMSUFZaEFnTkFJQUlnQzA4TkFRSi9JQUlzQUFBaEVSQmNHaUFSQ3hDS0FRUkFJQUpCQVdvaEFnd0JDd3NMSUFvb0FnUWdDaXdBQ3lJSFFmOEJjU0FIUVFCSUd3Ui9JQUlnQmtjRVFBSkFJQUloQnlBR0lRZ0RRQ0FJSUFkQmYyb2lCMDhOQVNBSUxBQUFJUXdnQ0NBSExBQUFPZ0FBSUFjZ0REb0FBQ0FJUVFGcUlRZ01BQUFMQUFzTElBMGdEU2dDQUNnQ0VFSC9BSEZCQ0dvUkFBQWhEeUFHSVF4QkFDRUlRUUFoQndOQUlBd2dBa2tFUUNBSElBb29BZ0FnQ2lBS0xBQUxRUUJJRzJvc0FBQWlEa0VBU2lBSUlBNUdjUVJBSUFVZ0JTZ0NBQ0lJUVFGcU5nSUFJQWdnRHpvQUFDQUhJQWNnQ2lnQ0JDQUtMQUFMSWdoQi93RnhJQWhCQUVnYlFYOXFTV29oQjBFQUlRZ0xJQWtnREN3QUFDQUpLQUlBS0FJY1FUOXhRWW9CYWhFQ0FDRU9JQVVnQlNnQ0FDSVFRUUZxTmdJQUlCQWdEam9BQUNBTVFRRnFJUXdnQ0VFQmFpRUlEQUVMQ3lBRElBWWdBR3RxSWdjZ0JTZ0NBQ0lHUmdSL0lBa0ZBMzhnQnlBR1FYOXFJZ1pKQkg4Z0J5d0FBQ0VJSUFjZ0Jpd0FBRG9BQUNBR0lBZzZBQUFnQjBFQmFpRUhEQUVGSUFrTEN3c0ZJQWtnQmlBQ0lBVW9BZ0FnQ1NnQ0FDZ0NJRUVQY1VHS0Ftb1JDUUFhSUFVZ0JTZ0NBQ0FDSUFacmFqWUNBQ0FKQ3lFR0FrQUNRQU5BSUFJZ0Mwa0VRQ0FDTEFBQUlnZEJMa1lOQWlBSklBY2dCaWdDQUNnQ0hFRS9jVUdLQVdvUkFnQWhCeUFGSUFVb0FnQWlDRUVCYWpZQ0FDQUlJQWM2QUFBZ0FrRUJhaUVDREFFTEN3d0JDeUFOSUEwb0FnQW9BZ3hCL3dCeFFRaHFFUUFBSVFZZ0JTQUZLQUlBSWdkQkFXbzJBZ0FnQnlBR09nQUFJQUpCQVdvaEFnc2dDU0FDSUFzZ0JTZ0NBQ0FKS0FJQUtBSWdRUTl4UVlvQ2FoRUpBQm9nQlNBRktBSUFJQXNnQW10cUlnSTJBZ0FnQkNBQ0lBTWdBU0FBYTJvZ0FTQUxSaHMyQWdBZ0NoQkhJQW9rQmd1ZUFRRUZmQ0FCS3dOWUlBSXJBd0FpQXlBQlFVQnJLd01Bb2lBQ0t3TUlJZ1FnQVNzRFNLS2dJQUlyQXhBaUJTQUJLd05Rb3FDZ0lnWkVBQUFBQUFBQUFBQmhCSDlCZndVZ0FTc0RPQ0FESUFFckF5Q2lJQVFnQVNzREtLS2dJQVVnQVNzRE1LS2dvQ0VISUFBZ0FTc0RHQ0FESUFFckF3Q2lJQVFnQVNzRENLS2dJQVVnQVNzREVLS2dvQ0FHb3prREFDQUFJQWNnQnFNNUF3aEJBQXNMVmdFQ2Z5TUdJUVlqQmtFUWFpUUdJQVlnQVNnQ0FEWUNCQ0FHSUFJb0FnQTJBZ0FnQmtFSWFpSUJJQVlvQWdRMkFnQWdCa0VNYWlJQ0lBWW9BZ0EyQWdBZ0FTQUNJQU1nQkNBRkVJa0xJUWNnQmlRR0lBY0wwd0VDQTM4QmZpTUdJUVFqQmtFUWFpUUdJQUFnQVVZRWZ5QUNRUVEyQWdCQkFBVkJwTVVES0FJQUlRVkJwTVVEUVFBMkFnQWdBQ0FFSUFNUVhCRDlBaUVIUWFURkF5Z0NBQ0lBUlFSQVFhVEZBeUFGTmdJQUN5QUJJQVFvQWdCR0JIOENmeUFBUWNRQVJnUkFJQUpCQkRZQ0FFSC8vLy8vQnlBSFFnQlZEUUVhQlFKQUlBZENnSUNBZ0hoVEJFQWdBa0VFTmdJQURBRUxJQWVuSUFkQy8vLy8vd2RYRFFJYUlBSkJCRFlDQUVILy8vLy9Cd3dDQ3d0QmdJQ0FnSGdMQlNBQ1FRUTJBZ0JCQUFzTElRWWdCQ1FHSUFZTG9nRUNBbjhCZmlNR0lRUWpCa0VRYWlRR0lBQWdBVVlFUUNBQ1FRUTJBZ0FGUWFURkF5Z0NBQ0VGUWFURkEwRUFOZ0lBSUFBZ0JDQURFRndRL1FJaEJrR2t4UU1vQWdBaUFFVUVRRUdreFFNZ0JUWUNBQXNnQVNBRUtBSUFSZ1IrSUFCQnhBQkdCSDRnQWtFRU5nSUFRdi8vLy8vLy8vLy8vd0JDZ0lDQWdJQ0FnSUNBZnlBR1FnQlZHd1VnQmdzRklBSkJCRFlDQUVJQUN5RUdDeUFFSkFZZ0JndldBUUlFZndGK0l3WWhCQ01HUVJCcUpBWWdBQ0FCUmdSL0lBSkJCRFlDQUVFQUJRSi9JQUFzQUFCQkxVWWlCUVJBSUFFZ0FFRUJhaUlBUmdSQUlBSkJCRFlDQUVFQURBSUxDMEdreFFNb0FnQWhCa0dreFFOQkFEWUNBQ0FBSUFRZ0F4QmNFS0VDSVFoQnBNVURLQUlBSWdCRkJFQkJwTVVESUFZMkFnQUxJQUVnQkNnQ0FFWUVmd0ovSUFCQnhBQkdJQWhDLy84RFZuSUVRQ0FDUVFRMkFnQkJmd3dCQ3lBSXAwSC8vd054SVFCQkFDQUlwMnRCLy84RGNTQUFJQVViQ3dVZ0FrRUVOZ0lBUVFBTEN3c2hCeUFFSkFZZ0J3dkhBUUlFZndGK0l3WWhCQ01HUVJCcUpBWWdBQ0FCUmdSL0lBSkJCRFlDQUVFQUJRSi9JQUFzQUFCQkxVWWlCUVJBSUFFZ0FFRUJhaUlBUmdSQUlBSkJCRFlDQUVFQURBSUxDMEdreFFNb0FnQWhCa0dreFFOQkFEWUNBQ0FBSUFRZ0F4QmNFS0VDSVFoQnBNVURLQUlBSWdCRkJFQkJwTVVESUFZMkFnQUxJQUVnQkNnQ0FFWUVmeUFBUWNRQVJpQUlRdi8vLy84UFZuSUVmeUFDUVFRMkFnQkJmd1ZCQUNBSXB5SUFheUFBSUFVYkN3VWdBa0VFTmdJQVFRQUxDd3NoQnlBRUpBWWdCd3U2QVFJRGZ3SitJd1loQkNNR1FSQnFKQVlnQUNBQlJnUitJQUpCQkRZQ0FFSUFCUUorSUFBc0FBQkJMVVlpQlFSQUlBRWdBRUVCYWlJQVJnUkFJQUpCQkRZQ0FFSUFEQUlMQzBHa3hRTW9BZ0FoQmtHa3hRTkJBRFlDQUNBQUlBUWdBeEJjRUtFQ0lRZEJwTVVES0FJQUlnQkZCRUJCcE1VRElBWTJBZ0FMSUFFZ0JDZ0NBRVlFZmlBQVFjUUFSZ1IrSUFKQkJEWUNBRUovQlVJQUlBZDlJQWNnQlJzTEJTQUNRUVEyQWdCQ0FBc0xDeUVJSUFRa0JpQUlDNG9CQWdKL0FYMGpCaUVESXdaQkVHb2tCaUFBSUFGR0JFQWdBa0VFTmdJQUJVR2t4UU1vQWdBaEJFR2t4UU5CQURZQ0FCQmNHaUFBSUFOQkFCQ2dBclloQlVHa3hRTW9BZ0FpQUVVRVFFR2t4UU1nQkRZQ0FBc0NRQUpBSUFFZ0F5Z0NBRVlFUUNBQVFjUUFSZzBCQlVNQUFBQUFJUVVNQVFzTUFRc2dBa0VFTmdJQUN3c2dBeVFHSUFVTGpRRUNBbjhCZkNNR0lRTWpCa0VRYWlRR0lBQWdBVVlFUUNBQ1FRUTJBZ0FGUWFURkF5Z0NBQ0VFUWFURkEwRUFOZ0lBRUZ3YUlBQWdBMEVCRUtBQ0lRVkJwTVVES0FJQUlnQkZCRUJCcE1VRElBUTJBZ0FMQWtBQ1FDQUJJQU1vQWdCR0JFQWdBRUhFQUVZTkFRVkVBQUFBQUFBQUFBQWhCUXdCQ3d3QkN5QUNRUVEyQWdBTEN5QURKQVlnQlF1TkFRSUNmd0Y4SXdZaEF5TUdRUkJxSkFZZ0FDQUJSZ1JBSUFKQkJEWUNBQVZCcE1VREtBSUFJUVJCcE1VRFFRQTJBZ0FRWEJvZ0FDQURRUUlRb0FJaEJVR2t4UU1vQWdBaUFFVUVRRUdreFFNZ0JEWUNBQXNDUUFKQUlBRWdBeWdDQUVZRVFDQUFRY1FBUmcwQkJVUUFBQUFBQUFBQUFDRUZEQUVMREFFTElBSkJCRFlDQUFzTElBTWtCaUFGQ3prQkFuOGpCaUVESXdaQkVHb2tCaUFESUFJMkFnQWdBUkJpSVFFZ0FFR0Rrd01nQXhDVkF5RUVJQUVFUUNBQkVHSWFDeUFESkFZZ0JBdFdBUUovSXdZaEJpTUdRUkJxSkFZZ0JpQUJLQUlBTmdJRUlBWWdBaWdDQURZQ0FDQUdRUWhxSWdFZ0JpZ0NCRFlDQUNBR1FReHFJZ0lnQmlnQ0FEWUNBQ0FCSUFJZ0F5QUVJQVVRbkFzaEJ5QUdKQVlnQnd1bEFRRUVmeU1HSVFVakJrRVFhaVFHSUFJZ0FXdEJBblVpQkVIdi8vLy9BMHNFUUJBQUN5QUVRUUpKQkVBZ0FDQUVPZ0FMSUFBaEF3VWdCRUVFYWtGOGNTSUdRZi8vLy84RFN3UkFFQUFGSUFBZ0JrRUNkQkJSSWdNMkFnQWdBQ0FHUVlDQWdJQjRjallDQ0NBQUlBUTJBZ1FMQ3dOQUlBRWdBa2NFUUNBRElBRVFiaUFCUVFScUlRRWdBMEVFYWlFRERBRUxDeUFGUVFBMkFnQWdBeUFGRUc0Z0JTUUdDNnNEQWdwL0FYNGpCaUVGSXdaQklHb2tCaUFGUVJCcUlRTWdCVUVJYWlFRUlBVkJCR29oQ1NBQUxBQTBCRUFnQUNnQ01DRUxJQUVFUUNBQVFYODJBakFnQUVFQU9nQTBDeUFMSVFBRklBQW9BaXdpQWtFQklBSkJBVW9iSVFJQ1FBSkFBMEFnQmlBQ1R3MEJJQUFvQWlBUTh3RWlCMEYvUndSQUlBTWdCbW9nQnpvQUFDQUdRUUZxSVFZTUFRc0xRWDhoQUF3QkN3SkFBa0FnQUN3QU5RUkFJQVFnQXl3QUFEb0FBQXdCQlFKQUlBUkJBV29oQmdKQUFrQUNRQU5BQWtBZ0FDZ0NLQ0lIS1FJQUlRd2dBQ2dDSkNJSUtBSUFLQUlRSVFvQ1FDQUlJQWNnQXlBQ0lBTnFJZ2NnQ1NBRUlBWWdCU0FLUVE5eFFZNERhaEVPQUVFQmF3NERBQVFEQVFzZ0FDZ0NLQ0FNTndJQUlBSkJDRVlOQXlBQUtBSWdFUE1CSWdoQmYwWU5BeUFISUFnNkFBQWdBa0VCYWlFQ0RBRUxDd3dDQ3lBRUlBTXNBQUE2QUFBTUFRdEJmeUVBREFFTERBSUxDd3dCQ3lBQkJFQWdBQ0FFTEFBQUVFSTJBakFGQWtBRFFDQUNRUUJNRFFFZ0F5QUNRWDlxSWdKcUxBQUFFRUlnQUNnQ0lCRHZBVUYvUncwQUMwRi9JUUFNQWdzTElBUXNBQUFRUWlFQUN3c0xJQVVrQmlBQUM2VURBZ3AvQVg0akJpRUZJd1pCSUdva0JpQUZRUkJxSVFNZ0JVRUlhaUVFSUFWQkJHb2hDU0FBTEFBMEJFQWdBQ2dDTUNFTElBRUVRQ0FBUVg4MkFqQWdBRUVBT2dBMEN5QUxJUUFGSUFBb0Fpd2lBa0VCSUFKQkFVb2JJUUlDUUFKQUEwQWdCaUFDVHcwQklBQW9BaUFROHdFaUIwRi9Sd1JBSUFNZ0Jtb2dCem9BQUNBR1FRRnFJUVlNQVFzTFFYOGhBQXdCQ3dKQUFrQWdBQ3dBTlFSQUlBUWdBeXdBQURZQ0FBd0JCUUpBSUFSQkJHb2hCZ0pBQWtBQ1FBTkFBa0FnQUNnQ0tDSUhLUUlBSVF3Z0FDZ0NKQ0lJS0FJQUtBSVFJUW9DUUNBSUlBY2dBeUFDSUFOcUlnY2dDU0FFSUFZZ0JTQUtRUTl4UVk0RGFoRU9BRUVCYXc0REFBUURBUXNnQUNnQ0tDQU1Od0lBSUFKQkNFWU5BeUFBS0FJZ0VQTUJJZ2hCZjBZTkF5QUhJQWc2QUFBZ0FrRUJhaUVDREFFTEN3d0NDeUFFSUFNc0FBQTJBZ0FNQVF0QmZ5RUFEQUVMREFJTEN3d0JDeUFCQkVBZ0FDQUVLQUlBTmdJd0JRSkFBMEFnQWtFQVRBMEJJQU1nQWtGL2FpSUNhaXdBQUNBQUtBSWdFTzhCUVg5SERRQUxRWDhoQUF3Q0N3c2dCQ2dDQUNFQUN3c0xJQVVrQmlBQUM1b0JBUVYvSXdZaEFTTUdRUkJxSkFZZ0FVRUlhaUlDUVFocUlRVUNRQUpBQTBBZ0FDZ0NKQ0lES0FJQUtBSVVJUVFnQXlBQUtBSW9JQUlnQlNBQklBUkJIM0ZCb2dKcUVRZ0FJUU1DUUNBQktBSUFJQUpySWdRZ0FrRUJJQVFnQUNnQ0lCQ1RBVWNOQUFKQUlBTkJBV3NPQWdBQkF3c01BUXNMUVg4aEFBd0JDeUFBS0FJZ0VLa0NRUUJIUVI5MFFSOTFJUUFMSUFFa0JpQUFDeE1BSUFBZ0FDZ0NBRUYwYWlnQ0FHb1E2Z0lMRXdBZ0FDQUFLQUlBUVhScUtBSUFhaENaQWdzVEFDQUFJQUFvQWdCQmRHb29BZ0JxRU9zQ0N4TUFJQUFnQUNnQ0FFRjBhaWdDQUdvUW1nSUxLd0VCZndOQUlBSkJDRWNFUUNBQklBSnFJQUJCQnlBQ2Eyb3NBQUE2QUFBZ0FrRUJhaUVDREFFTEN3c1NBQ0FBUWR5TUFUWUNBQ0FBUVFScUVEd0xCQUJCZndzUUFDQUFRZ0EzQXdBZ0FFSi9Od01JQ3hBQUlBQkNBRGNEQUNBQVFuODNBd2dMQkFBZ0FBc3JBUUYvQTBBZ0FrRUVSd1JBSUFFZ0Ftb2dBRUVESUFKcmFpd0FBRG9BQUNBQ1FRRnFJUUlNQVFzTEN4SUFJQUJCbkl3Qk5nSUFJQUJCQkdvUVBBdFRBUU4vSUFJb0FnQWhCQ0FCSUFCclFRSjFJUUVEUUNBQkJFQWdBVUVCZGlJQ1FRSjBJQUJxSWdVb0FnQWdCRWtoQXlBRlFRUnFJQUFnQXhzaEFDQUJRWDlxSUFKcklBSWdBeHNoQVF3QkN3c2dBQXZPQVFFRGZ5TUdJUUlqQmtIQUFXb2tCaUFBSUFJUTFRUWdBRUVFYWlBQ1FRUnFFTlVFQTBBZ0FVRURSd1JBUVFBaEF3TkFJQU5CQkVjRVFDQUFRUWhxSUFGQkJYUnFJQU5CQTNScUlBSkJDR29nQVVFRmRHb2dBMEVEZEdvUXp3UWdBMEVCYWlFRERBRUxDeUFCUVFGcUlRRU1BUXNMUVFBaEFRTkFJQUVnQUNnQ3NBRWlBMEVEZEVHWUZXb29BZ0JJQkVBZ0FFSG9BR29nQVVFRGRHb2dBa0hvQUdvZ0FVRURkR29RendRZ0FVRUJhaUVCREFFTEN5QUNJQU0yQXJBQklBQWdBa0c0QVJCTUdpQUNKQVlMSndFQmZ5TUdJUUVqQmtFUWFpUUdJQUVnQURZQ0FFSFkrUUJCQlNBQktBSUFFQWdnQVNRR0N5Y0JBWDhqQmlFQkl3WkJFR29rQmlBQklBQTJBZ0JCNFBrQVFRUWdBU2dDQUJBSUlBRWtCZ3NuQVFGL0l3WWhBU01HUVJCcUpBWWdBU0FBTmdJQVFlajVBRUVESUFFb0FnQVFDQ0FCSkFZTEp3RUJmeU1HSVFFakJrRVFhaVFHSUFFZ0FEWUNBRUh3K1FCQkFpQUJLQUlBRUFnZ0FTUUdDeWNCQVg4akJpRUJJd1pCRUdva0JpQUJJQUEyQWdCQitQa0FRUUVnQVNnQ0FCQUlJQUVrQmdzbkFRRi9Jd1loQVNNR1FSQnFKQVlnQVNBQU5nSUFRWUQ2QUVFQUlBRW9BZ0FRQ0NBQkpBWUxtQXNCRlh3Q2Z3SkFBa0FDUUFKQUFrQUNRQ0FGUVFGckRnUURBZ0VBQkFzZ0FDc0RBQ0VKSUFBckF3Z2hDaUFBUVVCckt3TUFJUTBnQUNzREVDSU9SQUFBQUFBQUFBQkFvaUVQSUFBckF4Z2lFRVFBQUFBQUFBQVlRS0loRXlBUVJBQUFBQUFBQUFCQW9pRVVJQTVFQUFBQUFBQUFHRUNpSVJVZ0FTQUFLd013SWhhaElBQXJBeUFpRjZNaUN5RUJJQUlnQUNzRE9DSVlvU0FBS3dNb0lobWpJZ3doQWlBTElBdWlJUVlnRENBTW9pRUhRUUVoQUFOQUFrQWdCa1FBQUFBQUFBQUFBR0lnQjBRQUFBQUFBQUFBQUdKeVJRUkFSQUFBQUFBQUFBQUFJUUZFQUFBQUFBQUFBQUFoQWd3QkN5QUpJQWNnQnFBaUNLSkVBQUFBQUFBQThEK2dJQWdnQ2lBSW9xS2dJUkVnQnlBR1JBQUFBQUFBQUFoQW9pSWFvaUVTSUFJZ0RpQUhSQUFBQUFBQUFBQkFvaUFJb0tJZ0FpQVJvcUFnQWlBVUlBRWdFQ0FJSUFaRUFBQUFBQUFBQUVDaW9LSWdBaUFQSUFHaW9pQUJJQkdpb0tBZ0M2RWdFeUFCb2lBUElBS2lJQWtnQnlBYW9LSkVBQUFBQUFBQThEK2dJQW9nQnlBSG9pQUdJQVpFQUFBQUFBQUFGRUNpb2lBU29LQ2lvS0NnbzZFaUFhSWlDS0tnSUF5aElCVWdBcUlnQ1NBR0lBZEVBQUFBQUFBQUNFQ2lvS0pFQUFBQUFBQUE4RCtnSUFvZ0J5QUhSQUFBQUFBQUFCUkFvcUlnQmlBR29pQVNvS0Npb0tBZ0NLQ2pvU0VDSUFCQkJFY0VRQ0FCSUFHaUlRWWdBaUFDb2lFSElBQkJBV29oQUF3Q0N3c0xJQU1nRmlBWElBR2lJQTJqb0RrREFDQVlJQmtnQXFJZ0RhT2dJUUVNQkFzZ0FDc0RJRVFBQUFBQWhOZVhRYU1pQ0VRQUFBQUFBQUFJUUtJaENTQUFLd01vUkFBQUFBQ0UxNWRCbzBRQUFBQUFBR3I0UUtNaUNrUUFBQUFBQUFBVVFLSWhDMEVCSVFVZ0FTQUFLd01BSWd5aElBQXJBeGlqSWdFZ0FhSWdBaUFBS3dNSW9TSUNJQUtpb0NJSG55SU5JUVlEUUFKQUlBWkVBQUFBQUFBQUFBQmhCRUJFQUFBQUFBQUFBQUFoQWtRQUFBQUFBQUFBQUNFQkRBRUxJQUVnQmlBR1JBQUFBQUFBQVBBL0lBZ2dCNktoSUFjZ0NpQUhvcUtob2lBTm9VUUFBQUFBQUFEd1B5QUpJQWVpb1NBSElBc2dCNktpb2FPaElnZWlJQWFqSVFFZ0FpQUhvaUFHb3lFQ0lBVkJBMGNFUUNBQklBR2lJQUlnQXFLZ0lnWWhCeUFGUVFGcUlRVWdCcDhoQmd3Q0N3c0xJQU1nRENBQklBQXJBeENqb0RrREFDQUNJQUFyQXhDaklBQXJBd2lnSVFFTUF3c2dBQ3NER0VRQUFBQUFoTmVYUWFNaUNFUUFBQUFBQUFBSVFLSWhDU0FBS3dNZ1JBQUFBQUNFMTVkQm8wUUFBQUFBQUdyNFFLTWlDa1FBQUFBQUFBQVVRS0loQzBFQklRVWdBU0FBS3dNQUlneWhJZ2NnQjZJZ0FpQUFLd01Jb1NJQ0lBS2lvQ0lCbnlJTklRWURRQUpBSUFaRUFBQUFBQUFBQUFCaEJFQkVBQUFBQUFBQUFBQWhBa1FBQUFBQUFBQUFBQ0VCREFFTElBY2dCaUFHUkFBQUFBQUFBUEEvSUFnZ0FhS2hJQUVnQ2lBQm9xS2hvaUFOb1VRQUFBQUFBQUR3UHlBSklBR2lvU0FCSUFzZ0FhS2lvYU9oSWdlaUlBYWpJUUVnQWlBSG9pQUdveUVDSUFWQkEwY0VRQ0FGUVFGcUlRVWdBU0lISUFHaUlBSWdBcUtnSWdHZklRWU1BZ3NMQ3lBRElBd2dBU0FBS3dNUW82QTVBd0FnQWlBQUt3TVFveUFBS3dNSW9DRUJEQUlMSUFBckF4aEVBQUFBQUlUWGwwR2pJZ2hFQUFBQUFBQUFDRUNpSVFsQkFTRUZJQUVnQUNzREFDSUtvU0lISUFlaUlBSWdBQ3NEQ0tFaUFpQUNvcUFpQVo4aUN5RUdBMEFDUUNBR1JBQUFBQUFBQUFBQVlRUkFSQUFBQUFBQUFBQUFJUUpFQUFBQUFBQUFBQUFoQVF3QkN5QUhJQVlnQmtRQUFBQUFBQUR3UHlBSUlBR2lvYUlnQzZGRUFBQUFBQUFBOEQ4Z0NTQUJvcUdqb1NJSG9pQUdveUVCSUFJZ0I2SWdCcU1oQWlBRlFRTkhCRUFnQlVFQmFpRUZJQUVpQnlBQm9pQUNJQUtpb0NJQm55RUdEQUlMQ3dzZ0F5QUtJQUVnQUNzREVLT2dPUU1BSUFJZ0FDc0RFS01nQUNzRENLQWhBUXdCQzBGL0RBRUxJQVFnQVRrREFFRUFDeG9MNVFFQVFiajRBRUgxZ2dNUUxVSEErQUJCK29JRFFRRkJBVUVBRUM4UTVBc1E0d3NRNGdzUTRRc1E0QXNRM3dzUTNnc1EzUXNRM0FzUTJ3c1EyZ3RCeVBJQVFlU0RBeEFWUWVENkFFSHdnd01RRlVISStnQkJCRUdSaEFNUUVrR3crZ0JCQWtHZWhBTVFFa0dZK2dCQkJFR3RoQU1RRWtHUStnQkJ2SVFERUM0UTJRdEI2b1FERU40RVFZK0ZBeERkQkVHMmhRTVEzQVJCMVlVREVOc0VRZjJGQXhEYUJFR2FoZ01RMlFRUTF3c1ExZ3RCaFljREVONEVRYVdIQXhEZEJFSEdod01RM0FSQjU0Y0RFTnNFUVltSUF4RGFCRUdxaUFNUTJRUVExUXNRMUFzUTB3c0xXZ0VEZnlBQUtBSUVJUVVnQWdSQUlBVkJDSFVoQkNBRlFRRnhCRUFnQkNBQ0tBSUFhaWdDQUNFRUN3c2dBQ2dDQUNJQUtBSUFLQUljSVFZZ0FDQUJJQUlnQkdvZ0EwRUNJQVZCQW5FYklBWkJIM0ZCK2dWcUVRY0FDd3NBSUFBUTR3UWdBQkE0Q3hNQUlBQkJvSXNCTmdJQUlBQkJCR29RN2dzTHh3SUJCSDhqQmlFREl3WkJRR3NrQmlBQUlBQW9BZ0FpQkVGNGFpZ0NBR29oQlNBRVFYeHFLQUlBSVFRZ0F5QUNOZ0lBSUFNZ0FEWUNCQ0FESUFFMkFnZ2dBMEVBTmdJTUlBTkNBRGNDRUNBRFFnQTNBaGdnQTBJQU53SWdJQU5DQURjQ0tDQURRUUEyQWpBZ0EwRUFPd0UwSUFOQkFEb0FOaUFFSUFKQkFCQ0JBUVIvSUFOQkFUWUNNQ0FFSUFNZ0JTQUZRUUZCQUNBRUtBSUFLQUlVUVFkeFFkb0dhaEVNQUNBRlFRQWdBeWdDR0VFQlJoc0ZBbjhnQkNBRElBVkJBVUVBSUFRb0FnQW9BaGhCUDNGQm1nWnFFUVVBQWtBQ1FBSkFJQU1vQWlRT0FnQUNBUXNnQXlnQ0ZFRUFJQU1vQWloQkFVWWdBeWdDSEVFQlJuRWdBeWdDSUVFQlJuRWJEQUlMUVFBTUFRc2dBeWdDR0VFQlJ3UkFRUUFnQXlnQ0tFVWdBeWdDSEVFQlJuRWdBeWdDSUVFQlJuRkZEUUVhQ3lBREtBSVFDd3NoQmlBREpBWWdCZ3VuREFJSGZ3aDlJQUc4SWdWQi8vLy8vd2R4SWdKRklBQzhJZ1pCZ0lDQS9BTkdjZ1JBUXdBQWdEOFBDeUFHUWYvLy8vOEhjU0lEUVlDQWdQd0hTeUFDUVlDQWdQd0hTM0lFUUNBQUlBR1NEd3NnQmtFQVNDSUlCSDhnQWtILy8vL2JCRXNFZjBFQ0JTQUNRZi8vLy9zRFN3Ui9RUUlnQWtHV0FTQUNRUmQyYXlJRWRpSUhRUUZ4YTBFQUlBY2dCSFFnQWtZYkJVRUFDd3NGUVFBTElRUUNRQ0FGUWYvLy8vOEhjU0lIUVlDQWdQd0hTQVJBSUFkQmdJQ0EvQU5yRFFFZ0FFTUFBSUEvSUFDVklBVkJmMG9iRHdVZ0IwR0FnSUQ4QjJzTkFTQURRWUNBZ1B3RFJnUkFRd0FBZ0Q4UEN5QUZRWDlLSVFJZ0EwR0FnSUQ4QTBzRVFDQUJRd0FBQUFBZ0Foc1BCVU1BQUFBQUlBR01JQUliRHdzQUN3QUxJQVZCZ0lDQWdBUkdCRUFnQUNBQWxBOExJQVZCZ0lDQStBTkdJQVpCZjBweEJFQWdBSkVQQ3lBQWl5RUpBa0FDUUFKQUlBTkZJQU5CZ0lDQWdBUnlRWUNBZ1B3SFJuSUVRRU1BQUlBL0lBbVZJQWtnQlVFQVNCc2hBQ0FJUlFSQUlBQVBDeUFFSUFOQmdJQ0FoSHhxY2dSQUlBQ01JQUFnQkVFQlJoc1BDd3dCQ3lBSUJFQUNRQUpBQWtBZ0JBNENCQUFCQzBNQUFJQy9JUXNNQVF0REFBQ0FQeUVMQ3dWREFBQ0FQeUVMQ3lBQ1FZQ0FnT2dFU3dSQUFrQWdBMEg0Ly8vN0Ewa0VRQ0FMUThyeVNYR1VROHJ5U1hHVUlBdERZRUtpRFpSRFlFS2lEWlFnQlVFQVNCc1BDeUFEUVllQWdQd0RUUVJBSUFsREFBQ0F2NUlpQUVNQXFyZy9sQ0lLSUFCRGNLWHNOcFFnQUNBQWxFTUFBQUEvSUFCRHE2cXFQaUFBUXdBQWdENlVrNVNUbEVNN3FyZy9sSk1pQUpLOFFZQmdjYjRpRENFSklBd2dDcE1oQ2d3QkN5QUxROHJ5U1hHVVE4cnlTWEdVSUF0RFlFS2lEWlJEWUVLaURaUWdCVUVBU2hzUEN3VWdDVU1BQUlCTGxMd2dBeUFEUVlDQWdBUkpJZ01iSWdSQkYzVkI2WDVCZ1g4Z0F4dHFJUUlnQkVILy8vOERjU0lFUVlDQWdQd0RjaUVESUFSQjhvanpBRWtFUUVFQUlRUUZJQVJCMStmMkFra2lCaUVFSUFJZ0JrRUJjMEVCY1dvaEFpQURJQU5CZ0lDQWZHb2dCaHNoQXdzZ0JFRUNkRUhBaWdGcUtnSUFJZzRnQTc0aUNpQUVRUUowUWJDS0FXb3FBZ0FpREpNaURVTUFBSUEvSUF3Z0NwS1ZJZytVSWdtOFFZQmdjYjRpQUNBQUlBQ1VJaEJEQUFCQVFKSWdDU0FBa2lBUElBMGdBMEVCZFVHQTRQLy9mWEZCZ0lDQWdBSnlRWUNBZ0FKcUlBUkJGWFJxdmlJTklBQ1VreUFLSUEwZ0RKT1RJQUNVazVRaUNwUWdDU0FKbENJQUlBQ1VJQUFnQUNBQUlBQWdBRU5DOFZNK2xFTlZNbXcra3BSREJhT0xQcEtVUTZ1cXFqNlNsRU8zYmRzK2twUkRtcGtaUDVLVWtpSU1rcnhCZ0dCeHZpSUFsQ0lOSUFvZ0FKUWdDU0FNSUFCREFBQkF3SklnRUpPVGxKSWlDWks4UVlCZ2NiNGlBRU1BUUhZL2xDSUtJQVJCQW5SQnVJb0JhaW9DQUNBSklBQWdEWk9UUTA4NGRqK1VJQUJEeGlQMk9KU1RraUlBa3BJZ0FySWlESks4UVlCZ2NiNGlEU0VKSUEwZ0RKTWdEcE1nQ3BNaENnc2dBQ0FLa3lBQmxDQUJJQVZCZ0dCeHZpSUFreUFKbEpJaEFTQUpJQUNVSWdBZ0FaSWlDYndpQTBHQWdJQ1lCRW9OQVFKQUFrQWdBMEdBZ0lDWUJFWUVRQ0FCUXp5cU9ET1NJQWtnQUpOZUJFQU1CUVZCZ0lDQW1BUWhBZ3dDQ3dBRkFrQWdBMEgvLy8vL0IzRWlBa0dBZ05pWUJFc05CaUFCSUFrZ0FKTmZSU0FEUVlDQTJKaDhSM0lFUUNBQ1FZQ0FnUGdEU3dSQURBUUZRUUFoQWd3Q0N3QUxEQVlMQ3d3QkN5QURRWUNBZ0FRZ0FrRVhka0dDZjJwMmFpSUNRUmQyUWY4QmNTRUZJQUFnQWtHQWdJQjhJQVZCZ1g5cWRYRytreUlKSVFCQkFDQUNRZi8vL3dOeFFZQ0FnQVJ5UVpZQklBVnJkaUlDYXlBQ0lBTkJBRWdiSVFJZ0FTQUprcndoQXdzZ0MwTUFBSUEvSUFOQmdJQitjYjRpQ1VNQWNqRS9sQ0lLSUFsRGpMNi9OWlFnQVNBSklBQ1RrME1ZY2pFL2xKSWlDWklpQUNBQUlBQWdBSlFpQVNBQklBRWdBU0FCUTB5N01UT1VRdzdxM2JXU2xFTlZzNG80a3BSRFlRczJ1NUtVUTZ1cUtqNlNsSk1pQVpRZ0FVTUFBQURBa3BVZ0NTQUFJQXFUa3lJQklBQWdBWlNTa3lBQWs1TWlBTHdnQWtFWGRHb2lBMEdBZ0lBRVNBUjlJQUFnQWhEMUJBVWdBNzRMbEE4TElBQWdBSk1pQUNBQWxROExJQXREeXZKSmNaUkR5dkpKY1pRUEN5QUxRMkJDb2cyVVEyQkNvZzJVQzhBQkFRSi9Jd1loQVNNR1FSQnFKQVlnQUwxQ0lJaW5RZi8vLy84SGNTSUNRZnpEcFA4RFNRUkFJQUpCZ0lEQThnTlBCRUFnQUVRQUFBQUFBQUFBQUVFQUVOUUJJUUFMQlFKOElBQWdBS0VnQWtILy83Ly9CMHNOQUJvQ1FBSkFBa0FDUUNBQUlBRVEvQUpCQTNFT0F3QUJBZ01MSUFFckF3QWdBU3NEQ0VFQkVOUUJEQU1MSUFFckF3QWdBU3NEQ0JEVEFRd0NDeUFCS3dNQUlBRXJBd2hCQVJEVUFab01BUXNnQVNzREFDQUJLd01JRU5NQm1nc2hBQXNnQVNRR0lBQUx5QUVDQW44QmZDTUdJUUVqQmtFUWFpUUdJQUM5UWlDSXAwSC8vLy8vQjNFaUFrSDh3NlQvQTBrRWZDQUNRWjdCbXZJRFNRUjhSQUFBQUFBQUFQQS9CU0FBUkFBQUFBQUFBQUFBRU5NQkN3VUNmQ0FBSUFDaElBSkIvLysvL3dkTERRQWFBa0FDUUFKQUFrQWdBQ0FCRVB3Q1FRTnhEZ01BQVFJREN5QUJLd01BSUFFckF3Z1Ewd0VNQXdzZ0FTc0RBQ0FCS3dNSVFRRVExQUdhREFJTElBRXJBd0FnQVNzRENCRFRBWm9NQVFzZ0FTc0RBQ0FCS3dNSVFRRVExQUVMQ3lFRElBRWtCaUFEQzlrQ0FRWi9Jd1loQ0NNR1FaQUNhaVFHSUFoQmdBSnFJZ2NnQVNnQ0FDSUVOZ0lBSUFOQmdBSWdBRUVBUnlJSkd5RUZJQUFnQ0NBSkd5RUFJQVZCQUVjZ0JFRUFSM0VFUUFKQVFRQWhBd05BQWtBZ0FpQUZUeUlHSUFKQklFdHlSUTBDSUFJZ0JTQUNJQVliSWdScklRSWdBQ0FISUFRUTh3UWlCRUYvUmcwQUlBVkJBQ0FFSUFBZ0NFWWlCaHRySVFVZ0FDQUFJQVJxSUFZYklRQWdBeUFFYWlFRElBY29BZ0FpQkVFQVJ5QUZRUUJIY1EwQkRBSUxDMEYvSVFOQkFDRUZJQWNvQWdBaEJBc0ZRUUFoQXdzZ0JBUkFJQVZCQUVjZ0FrRUFSM0VFUUFKQUEwQWdBQ0FFS0FJQUVKNEJJZ1pCQVdwQkFrOEVRQ0FISUFjb0FnQkJCR29pQkRZQ0FDQUFJQVpxSVFBZ0F5QUdhaUVESUFVZ0Jtc2lCVUVBUnlBQ1FYOXFJZ0pCQUVkeERRRU1BZ3NMSUFZRVFFRi9JUU1GSUFkQkFEWUNBQXNMQ3dzZ0NRUkFJQUVnQnlnQ0FEWUNBQXNnQ0NRR0lBTUxhUUVDZnlBQUlBRnJRUUoxSUFKSkJFQURRQ0FDUVg5cUlnSkJBblFnQUdvZ0FrRUNkQ0FCYWlnQ0FEWUNBQ0FDRFFBTEJTQUNCRUFEUUNBQlFRUnFJUU1nQUVFRWFpRUVJQUFnQVNnQ0FEWUNBQ0FDUVg5cUlnSUVRQ0FESVFFZ0JDRUFEQUVMQ3dzTEM0Z0JBUVYvSUFBb0FnUWlCU0FCS0FJSVJnUi9JQUFvQWdnaUJpQUJLQUlFUmdSL0lBQW9BZ0FoQUFOL0lBSWdCVWdFZnlBQktBSUFJQUpCQW5ScUlRTkJBQ0VFQTBBZ0JDQUdTQVJBSUFBZ0F5Z0NBRFlDQUNBRlFRSjBJQU5xSVFNZ0JFRUJhaUVFSUFCQkJHb2hBQXdCQ3dzZ0FrRUJhaUVDREFFRlFRQUxDd1ZCZndzRlFYOExDeW9CQVg4Z0FnUkFBMEFnQUVFRWFpRURJQUFnQVRZQ0FDQUNRWDlxSWdJRVFDQURJUUFNQVFzTEN3dGtBUUovSUFBUVlDQUFhaUVBSUFJRVFBSkFJQUloQXlBQklRSWdBQ0VCQTM4Z0Fpd0FBQ0lFUlEwQklBSkJBV29oQWlBQlFRRnFJUUFnQVNBRU9nQUFJQU5CZjJvaUF3Ui9JQUFoQVF3QkJTQUFDd3NoQVFzRklBQWhBUXNnQVVFQU9nQUFDOVVCQVFSL1FmR3BBU0VDSXdZaEF5TUdRU0JxSkFZQ1FBSkFRZkdwQVN3QUFDSUJSUTBBUWZLcEFTd0FBRVVOQUNBRFFRQkJJQkJGR2tIeHFRRXNBQUFpQVFSQUEwQWdBVUgvQVhFaUFVRUZka0VDZENBRGFpSUVJQVFvQWdCQkFTQUJRUjl4ZEhJMkFnQWdBa0VCYWlJQ0xBQUFJZ0VOQUFzTElBQXNBQUFpQVFSQUFrQWdBQ0VDQTBBZ0FVSC9BWEVpQVVFRmRrRUNkQ0FEYWlnQ0FFRUJJQUZCSDNGMGNRMEJJQUpCQVdvaUFpd0FBQ0lCRFFBTEN3VWdBQ0VDQ3d3QkN5QUFJQUVRcWdJaEFnc2dBeVFHSUFJZ0FHc0xsQUVCQTM4RFFDQUFRUUZxSVFFZ0FDd0FBQkN5QVFSQUlBRWhBQXdCQ3dzQ2Z3SkFBa0FDUUFKQUlBQXNBQUFpQTBFcmF3NERBUUlBQWd0QkFTRUFEQUlMUVFBaEFBd0JDeUFEREFFTElBQWhBaUFCSWdBc0FBQUxFSW9CQkVCQkFDRUJBMEFnQVVFS2JFRXdhaUFBTEFBQWF5RUJJQUJCQVdvaUFDd0FBQkNLQVEwQUN3VkJBQ0VCQ3lBQlFRQWdBV3NnQWhzTFpBSUJmd0YrSUFBb0FpZ2hBU0FBUWdBZ0FDZ0NBRUdBQVhFRWYwRUNRUUVnQUNnQ0ZDQUFLQUljU3hzRlFRRUxJQUZCQTNGQnBnTnFFUlFBSWdKQ0FGa0VRQ0FBS0FJVUlBQW9BaHhyckNBQ0lBQW9BZ2dnQUNnQ0JHdXNmWHdoQWdzZ0FndUJBd0VIZnlNR0lRVWpCa0dRQ0dva0JpQUZRWUFJYWlJSUlBRW9BZ0FpQmpZQ0FDQURRWUFDSUFCQkFFY2lDUnNoQnlBQUlBVWlDaUFKR3lFRElBZEJBRWNnQmlJRlFRQkhjUVJBQWtCQkFDRUFBMEFDUUNBQ1FRSjJJZ1lnQjA4aUN5QUNRWU1CUzNKRkRRSWdBaUFISUFZZ0N4c2lCV3NoQWlBRElBZ2dCU0FFRVA0Q0lnVkJmMFlOQUNBSFFRQWdCU0FESUFwR0lnWWJheUVISUFNZ0JVRUNkQ0FEYWlBR0d5RURJQUFnQldvaEFDQUlLQUlBSWdWQkFFY2dCMEVBUjNFTkFRd0NDd3RCZnlFQVFRQWhCeUFJS0FJQUlRVUxCVUVBSVFBTElBVUVRQ0FIUVFCSElBSkJBRWR4QkVBQ1FBTkFJQU1nQlNBQ0lBUVExd0VpQmtFQ2FrRURUd1JBSUFnZ0JpQUlLQUlBYWlJRk5nSUFJQU5CQkdvaEF5QUFRUUZxSVFBZ0IwRi9haUlIUVFCSElBSWdCbXNpQWtFQVIzRU5BUXdDQ3dzQ1FBSkFBa0FnQmtGL2F3NENBQUVDQ3lBR0lRQU1BZ3NnQ0VFQU5nSUFEQUVMSUFSQkFEWUNBQXNMQ3lBSkJFQWdBU0FJS0FJQU5nSUFDeUFLSkFZZ0FBdUlBUUVGZnlBQUtBSUVJZ1VnQVNnQ0NFWUVmeUFBS0FJSUlnWWdBU2dDQkVZRWZ5QUFLQUlBSVFBRGZ5QUNJQVZJQkg4Z0FTZ0NBQ0FDUVFOMGFpRURRUUFoQkFOQUlBUWdCa2dFUUNBQUlBTXJBd0E1QXdBZ0JVRURkQ0FEYWlFRElBUkJBV29oQkNBQVFRaHFJUUFNQVFzTElBSkJBV29oQWd3QkJVRUFDd3NGUVg4TEJVRi9Dd3Q3QVFGL0FrQWdBQ2dDVEVFQVRnUkFBa0FnQUN3QVMwRUtSZzBBSUFBb0FoUWlBU0FBS0FJUVR3MEFJQUFnQVVFQmFqWUNGQ0FCUVFvNkFBQU1BZ3NnQUJDWkF3d0JDeUFBTEFCTFFRcEhCRUFnQUNnQ0ZDSUJJQUFvQWhCSkJFQWdBQ0FCUVFGcU5nSVVJQUZCQ2pvQUFBd0NDd3NnQUJDWkF3c0x4UU1CQkg4akJpRUdJd1pCRUdva0JnSkFJQUFFUUNBQ1FRTkxCRUFDUUNBQ0lRTWdBU2dDQUNFRUEwQUNRQ0FFS0FJQUlnVkJmMnBCL2dCTEJIOGdCVVVOQVNBQUlBVVFuZ0VpQlVGL1JnUkFRWDhoQWd3SEN5QURJQVZySVFNZ0FDQUZhZ1VnQUNBRk9nQUFJQU5CZjJvaEF5QUJLQUlBSVFRZ0FFRUJhZ3NoQUNBQklBUkJCR29pQkRZQ0FDQURRUU5MRFFFZ0F5RUVEQUlMQ3lBQVFRQTZBQUFnQVVFQU5nSUFJQUlnQTJzaEFnd0RDd1VnQWlFRUN5QUVCRUFnQUNFRElBRW9BZ0FoQUFKQUEwQUNRQ0FBS0FJQUlnVkJmMnBCL2dCTEJIOGdCVVVOQVNBR0lBVVFuZ0VpQlVGL1JnUkFRWDhoQWd3SEN5QUVJQVZKRFFNZ0F5QUFLQUlBRUo0QkdpQURJQVZxSVFNZ0JDQUZhd1VnQXlBRk9nQUFJQU5CQVdvaEF5QUJLQUlBSVFBZ0JFRi9hZ3NoQkNBQklBQkJCR29pQURZQ0FDQUVEUUVNQlFzTElBTkJBRG9BQUNBQlFRQTJBZ0FnQWlBRWF5RUNEQU1MSUFJZ0JHc2hBZ3NGSUFFb0FnQWlBQ2dDQUNJQkJFQkJBQ0VDQTBBZ0FVSC9BRXNFUUNBR0lBRVFuZ0VpQVVGL1JnUkFRWDhoQWd3RkN3VkJBU0VCQ3lBQklBSnFJUUlnQUVFRWFpSUFLQUlBSWdFTkFBc0ZRUUFoQWdzTEN5QUdKQVlnQWd0YUFRTi9Jd1loQXlNR1FSQnFKQVlnQXlBQ0tBSUFOZ0lBUVFCQkFDQUJJQU1RcVFFaUJFRUFTQVIvUVg4RklBQWdCRUVCYWlJRUVFUWlBRFlDQUNBQUJIOGdBQ0FFSUFFZ0FoQ3BBUVZCZndzTElRVWdBeVFHSUFVTG13RUJBbjhnQVVIL0FFb0VRQ0FBUXdBQUFIK1VJZ0JEQUFBQWY1UWdBQ0FCUWY0QlNpSUNHeUVBSUFGQmduNXFJZ05CL3dBZ0EwSC9BRWdiSUFGQmdYOXFJQUliSVFFRklBRkJnbjlJQkVBZ0FFTUFBSUFBbENJQVF3QUFnQUNVSUFBZ0FVR0Vma2dpQWhzaEFDQUJRZndCYWlJRFFZSi9JQU5CZ245S0d5QUJRZjRBYWlBQ0d5RUJDd3NnQUNBQlFSZDBRWUNBZ1B3RGFyNlVDNE1HQWdwL0FuMGpCaUVKSXdaQjBBOXFKQVlnQVVIMEEwb0VRRUVBSVFBRkFrQUNRQUpBQWtBZ0FRNENBQUVDQzBFQUlRQU1BZ3NnQUVNQUFJQS9JQUFxQWdDVk9BSUFEQUVMQTBBZ0JTQUJTQVJBSUFWQkFuUWdDV29nQlRZQ0FDQUZRUUZxSVFVTUFRc0xJQUZCZjJwQkFuUWdBR29pRENFS0EwQWdCaUFCU0FSQVF3QUFBQUFoRFNBQ0lBWnNRUUowSUFCcUlnVWhCMEYvSVFRZ0JpRURBMEFnQVNBRFJ3UkFJQTBnQnlvQ0FJc2lEbDBoQ0NBT0lBMGdDQnNoRFNBQ1FRSjBJQWRxSVFjZ0F5QUVJQWdiSVFRZ0EwRUJhaUVEREFFTEN5QUVRWDlHSUExRC8rYmJMbDl5QkVCQkFDRUFEQU1GSUFSQkFuUWdDV29pQXlnQ0FDRUhJQU1nQmtFQ2RDQUphaUlES0FJQU5nSUFJQU1nQnpZQ0FFRUFJUWNnQlNFRElBSWdCR3hCQW5RZ0FHb2hCQU5BSUFFZ0IwY0VRQ0FFS0FJQUlRZ2dCQ0FES0FJQU5nSUFJQU1nQ0RZQ0FDQUhRUUZxSVFjZ0EwRUVhaUVESUFSQkJHb2hCQXdCQ3dzZ0JTb0NBQ0VOUVFFaEJDQUZJUU1EUUNBQklBUkhCRUFnQXlBRFFRUnFJZ01xQWdBZ0RaVTRBZ0FnQkVFQmFpRUVEQUVMQ3lBS1F3QUFnRDhnRFpVNEFnQkJBQ0VJSUF3aEJBTkFJQUVnQ0VjRVFDQUdJQWhIQkVBZ0FpQUliRUVDZENBQWFpSURLZ0lBSVEwZ0JTRUhRUUVoQ3dOQUlBRWdDMGNFUUNBRElBTkJCR29pQXlvQ0FDQU5JQWNxQWdDVWt6Z0NBQ0FIUVFScUlRY2dDMEVCYWlFTERBRUxDeUFFSUEwZ0Npb0NBSlNNT0FJQUN5QUlRUUZxSVFnZ0FrRUNkQ0FFYWlFRURBRUxDeUFHUVFGcUlRWWdBa0VDZENBS2FpRUtEQUlMQUFzTFFRQWhCUU5BSUFVZ0FVZ0VRQ0FGSVFNRFFBSkFJQU5CQW5RZ0NXb2hCaUFESUFGT0RRQWdCU0FHS0FJQVJnMEFJQU5CQVdvaEF3d0JDd3NnQmlBRlFRSjBJQWxxS0FJQU5nSUFRUUFoQkNBRlFRSjBJQUJxSVFZZ0EwRUNkQ0FBYWlFREEwQWdCQ0FCU0FSQUlBTW9BZ0FoQnlBRElBWW9BZ0EyQWdBZ0JpQUhOZ0lBSUFSQkFXb2hCQ0FDUVFKMElBWnFJUVlnQWtFQ2RDQURhaUVEREFFTEN5QUZRUUZxSVFVTUFRc0xDd3NnQ1NRR0lBQUwvUUVCQlg5Qjhha0JJUUVqQmlFREl3WkJJR29rQmlBRFFnQTNBd0FnQTBJQU53TUlJQU5DQURjREVDQURRZ0EzQXhoQjhha0JMQUFBSWdJRWZ3Si9RZktwQVN3QUFFVUVRQ0FBSVFFRFFDQUJRUUZxSVFRZ0FpQUJMQUFBUmdSQUlBUWhBUXdCQ3dzZ0FTQUFhd3dCQ3dOQUlBSkIvd0Z4SWdKQkJYWkJBblFnQTJvaUJDQUVLQUlBUVFFZ0FrRWZjWFJ5TmdJQUlBRkJBV29pQVN3QUFDSUNEUUFMSUFBc0FBQWlBZ1JBQWtBZ0FDRUJBMEFnQWtIL0FYRWlCRUVGZGtFQ2RDQURhaWdDQUVFQklBUkJIM0YwY1VVTkFTQUJRUUZxSWdFc0FBQWlBZzBBQ3dzRklBQWhBUXNnQVNBQWF3c0ZRUUFMSVFVZ0F5UUdJQVVMa3dZQ0NuOENmQ01HSVFrakJrSFFEMm9rQmlBQlFmUURTZ1JBUVFBaEFBVUNRQUpBQWtBQ1FDQUJEZ0lBQVFJTFFRQWhBQXdDQ3lBQVJBQUFBQUFBQVBBL0lBQXJBd0NqT1FNQURBRUxBMEFnQlNBQlNBUkFJQVZCQW5RZ0NXb2dCVFlDQUNBRlFRRnFJUVVNQVFzTElBRkJmMnBCQTNRZ0FHb2lEQ0VLQTBBZ0JpQUJTQVJBUkFBQUFBQUFBQUFBSVEwZ0FpQUdiRUVEZENBQWFpSUZJUWRCZnlFRUlBWWhBd05BSUFFZ0EwY0VRQ0FOSUFjckF3Q1pJZzVqSVFnZ0RpQU5JQWdiSVEwZ0FrRURkQ0FIYWlFSElBTWdCQ0FJR3lFRUlBTkJBV29oQXd3QkN3c2dCRUYvUmlBTlJMdTkxOW5mZk5zOVpYSUVRRUVBSVFBTUF3VWdCRUVDZENBSmFpSURLQUlBSVFjZ0F5QUdRUUowSUFscUlnTW9BZ0EyQWdBZ0F5QUhOZ0lBUVFBaEJ5QUZJUU1nQWlBRWJFRURkQ0FBYWlFRUEwQWdBU0FIUndSQUlBUXJBd0FoRFNBRUlBTXJBd0E1QXdBZ0F5QU5PUU1BSUFkQkFXb2hCeUFEUVFocUlRTWdCRUVJYWlFRURBRUxDeUFGS3dNQUlRMUJBU0VFSUFVaEF3TkFJQUVnQkVjRVFDQURJQU5CQ0dvaUF5c0RBQ0FOb3prREFDQUVRUUZxSVFRTUFRc0xJQXBFQUFBQUFBQUE4RDhnRGFNNUF3QkJBQ0VJSUF3aEJBTkFJQUVnQ0VjRVFDQUdJQWhIQkVBZ0FpQUliRUVEZENBQWFpSURLd01BSVEwZ0JTRUhRUUVoQ3dOQUlBRWdDMGNFUUNBRElBTkJDR29pQXlzREFDQU5JQWNyQXdDaW9Ua0RBQ0FIUVFocUlRY2dDMEVCYWlFTERBRUxDeUFFSUEwZ0Npc0RBS0thT1FNQUN5QUlRUUZxSVFnZ0FrRURkQ0FFYWlFRURBRUxDeUFHUVFGcUlRWWdBa0VEZENBS2FpRUtEQUlMQUFzTFFRQWhCUU5BSUFVZ0FVZ0VRQ0FGSVFNRFFBSkFJQU5CQW5RZ0NXb2hCaUFESUFGT0RRQWdCU0FHS0FJQVJnMEFJQU5CQVdvaEF3d0JDd3NnQmlBRlFRSjBJQWxxS0FJQU5nSUFRUUFoQkNBRlFRTjBJQUJxSVFZZ0EwRURkQ0FBYWlFREEwQWdCQ0FCU0FSQUlBTXJBd0FoRFNBRElBWXJBd0E1QXdBZ0JpQU5PUU1BSUFSQkFXb2hCQ0FDUVFOMElBWnFJUVlnQWtFRGRDQURhaUVEREFFTEN5QUZRUUZxSVFVTUFRc0xDd3NnQ1NRR0lBQUxsQUlCQVg4Q1FBSkFJQUFnQVhOQkEzRU5BQUpBSUFKQkFFY2lBeUFCUVFOeFFRQkhjUVJBQTBBZ0FDQUJMQUFBSWdNNkFBQWdBMFVOQWlBQVFRRnFJUUFnQWtGL2FpSUNRUUJISWdNZ0FVRUJhaUlCUVFOeFFRQkhjUTBBQ3dzZ0F3UkFJQUVzQUFBRVFDQUNRUU5MQkVBRFFDQUJLQUlBSWdOQi8vMzdkMm9nQTBHQWdZS0VlSEZCZ0lHQ2hIaHpjVVVFUUNBQUlBTTJBZ0FnQVVFRWFpRUJJQUJCQkdvaEFDQUNRWHhxSWdKQkEwc05BUXNMQ3d3REN3VkJBQ0VDQ3dzTUFRc2dBZ1IvSUFFaEF5QUNJUUVEZnlBQUlBTXNBQUFpQWpvQUFDQUNSUVJBSUFFaEFnd0RDeUFEUVFGcUlRTWdBRUVCYWlFQUlBRkJmMm9pQVEwQVFRQUxCVUVBQ3lFQ0N5QUFRUUFnQWhCRkdndEFBUUovSUFJRVFDQUJJUU1nQUNFQkEwQWdBMEVFYWlFQUlBRkJCR29oQkNBQklBTW9BZ0EyQWdBZ0FrRi9haUlDQkVBZ0FDRURJQVFoQVF3QkN3c0xDd01BQVFzc0FRRi9Jd1loQWlNR1FSQnFKQVlnQWlBQU5nSUFJQUlnQVRZQ0JFSGJBQ0FDRURJUW1nTWFJQUlrQmd2V0FRRUZmeU1HSVFJakJrRWdhaVFHUVFBUWhnTUVRQU5BUVFFZ0FIUkIvLy8vL3dkeEJFQWdBRUVDZENBQVFZYVRBeENGQXpZQ0FBc2dBRUVCYWlJQVFRWkhEUUFMQlFKQUEwQWdCRUVCSUFCMFFmLy8vLzhIY1NJRFJVRUFjUVIvSUFCQkFuUW9BZ0FGSUFCQmhwTURRYWZWQXlBREd4Q0ZBd3NpQTBFQVIyb2hCQ0FBUVFKMElBSnFJQU0yQWdBZ0FFRUJhaUlBUVFaSERRQUxBa0FDUUFKQUlBUkIvLy8vL3dkeERnSUFBUUlMUWN6RUF5RUJEQUlMSUFJb0FnQkI4SWNCUmdSQVFZeUlBU0VCQ3dzTEN5QUNKQVlnQVF1ckF3SUpmd0o4SUFBb0FnUWlCVUVCU0NBQUtBSUlJZ1pCQVVoeUJIOUJmd1VnQVNnQ0JDQUZSZ1IvSUFFb0FnZ2dCVVlFZnlBQ0tBSUVJQVZHQkg4Z0FpZ0NDQ0FHUmdSL0lBTW9BZ1FnQlVZRWZ5QUNLQUlBSVFJRFFBSkFJQVFnQlU0TkFDQURLQUlBSUFSQkEzUnFLd01BSWcxRXZJbllsN0xTbkR4akRRQkVBQUFBQUFBQThEOGdEWm1mb3lFT0lBUWdCV3doREVFQUlRY2dBaUVJQTBBZ0JpQUhSd1JBUVFBaENTQUJLQUlBSUF4QkEzUnFJUXBFQUFBQUFBQUFBQUFoRFNBQUtBSUFJQWRCQTNScUlRc0RRQ0FGSUFsSEJFQWdEU0FLS3dNQUlBc3JBd0Npb0NFTklBbEJBV29oQ1NBS1FRaHFJUW9nQmtFRGRDQUxhaUVMREFFTEN5QUlJQTRnRGFJNUF3QWdCMEVCYWlFSElBaEJDR29oQ0F3QkN3c2dCRUVCYWlFRUlBWkJBM1FnQW1vaEFnd0JDd3NnQWlFQUEzOGdCQ0FGU0FSL0lBTW9BZ0FnQkVFRGRHcEVBQUFBQUFBQUFBQTVBd0JCQUNFQkEwQWdBU0FHU0FSQUlBQkVBQUFBQUFBQUFBQTVBd0FnQVVFQmFpRUJJQUJCQ0dvaEFBd0JDd3NnQkVFQmFpRUVEQUVGUVFBTEN3VkJmd3NGUVg4TEJVRi9Dd1ZCZndzRlFYOExDd3VPQVFFQ2Z3SkFBa0FEUUNBQ1FiRGFBR290QUFBZ0FFY0VRQ0FDUVFGcUlnSkIxd0JIRFFGQjF3QWhBZ3dDQ3dzZ0FnMEFRWkRiQUNFQURBRUxRWkRiQUNFQUEwQWdBQ0VEQTBBZ0EwRUJhaUVBSUFNc0FBQUVRQ0FBSVFNTUFRc0xJQUpCZjJvaUFnMEFDd3NnQVNnQ0ZDSUJCSDhnQVNnQ0FDQUJLQUlFSUFBUW13VUZRUUFMSWdFZ0FDQUJHd3MxQUNBQkJIOENmd05BSUFBZ0FVRi9haUlCYWkwQUFFRXZSd1JBSUFFRVFBd0NCVUVBREFNTEFBc0xJQUFnQVdvTEJVRUFDd3VzQVFFRGYwR2N1QUVoQWlBQVFaeTRBWE5CQTNGRkJFQkJuTGdCS0FJQUlnTkIvLzM3ZDJvZ0EwR0FnWUtFZUhGQmdJR0NoSGh6Y1VVRVFBTi9JQUJCQkdvaEFTQUFJQU0yQWdBZ0FrRUVhaUlDS0FJQUlnTkIvLzM3ZDJvZ0EwR0FnWUtFZUhGQmdJR0NoSGh6Y1FSL0lBRUZJQUVoQUF3QkN3c2hBQXNMSUFBZ0Fpd0FBQ0lCT2dBQUlBRUVRQU5BSUFCQkFXb2lBQ0FDUVFGcUlnSXNBQUFpQVRvQUFDQUJEUUFMQ3dzMUFRSi9JQUlnQUNnQ0VDQUFLQUlVSWdScklnTWdBeUFDU3hzaEF5QUVJQUVnQXhCTUdpQUFJQUFvQWhRZ0EybzJBaFFnQWd1VUNRSVlmd2Q4SXdZaEdDTUdRUkJxSkFZZ0dDRU1JQUFvQWdRaUJpQUFLQUlJUnlBR1FRSkljZ1IvUVg4RklBRW9BZ1FnQmtZRWZ5QUdFT2NDSWcwRWZ3Si9JQXdnQmtGL2FpSVJOZ0lFSUF3Z0RTZ0NBRUVJYWpZQ0FDQUFJQUVnREJDSEMwRUFTQVJBSUEwUXp3RkJmd3dCQ3lBTktBSUFJZ2hFQUFBQUFBQUFBQUE1QXdBZ0VTRURBMEFnQTBFQVNnUkFJQU1oQndOQUlBZEJBRW9FUUNBSFFRTjBJQWhxS3dNQW1TQUJLQUlBSWdVZ0IwRi9haUlDUVFOMGFpc0RBSmtnQjBFRGRDQUZhaXNEQUptZ1JJM3R0YUQzeHJBK29tUUVRQ0FDSVFjTUFnc0xDeUFEUVg5cUlRa2dBeUFIUndSQUFrQWdBMEVEZENBSWFpRVNJQWRCQVdwQkEzUWdDR29oRTBFQUlRVURRQ0FGUWVNQVN3MEJJQVZCQVdvaEJTQVNLd01BSWhzZ0c2SWlHaUFCS0FJQUlnNGdDVUVEZEdvaUZDc0RBQ0FEUVFOMElBNXFJaFVyQXdBaUc2RkVBQUFBQUFBQTREK2lJaDhnSDZLZ255RWNJQk1yQXdBaEhTQUhJZ0pCQTNRZ0Rtb3JBd0FnRzZFZ0dpQWZJQnlhSUJ3Z0gwUUFBQUFBQUFBQUFHTWJvS09nSVJzRFFDQUNJQU5JQkVBZ0c1a2lHaUFkbVdZRVFDQWFSTHlKMkpleTBwdzhaQVI4UkFBQUFBQUFBUEEvSUIyYUlCdWpJaHdnSEtKRUFBQUFBQUFBOEQrZ242TWlHaUVlSUJ3Z0dxSUZSQUFBQUFBQUFQQS9JUjVFQUFBQUFBQUFBQUFMSVJvRlJBQUFBQUFBQVBBL0lCdWFJQjJqSWh3Z0hLSkVBQUFBQUFBQThEK2duNk1oR2lBY0lCcWlJUjRMSUFKQkEzUWdEbW9pRHlzREFDSWNJQUpCQVdvaUNrRURkQ0FPYWlJRUt3TUFJaCtoSVNBZ0R5QWNJQm9nR2lBZ29pQWVSQUFBQUFBQUFBQkFvaUFLUVFOMElBaHFJaEFyQXdDaW9LSWlIS0U1QXdBZ0JDQWZJQnlnT1FNQUlBSkJBM1FnQ0dvaEJDQUNJQWRLQkVBZ0JDQWVJQVFyQXdDaUlCMGdHcUtoT1FNQUN5QVFJQkFyQXdBaUhDQWFJQjRnSUtJZ0drUUFBQUFBQUFBQVFLSWdIS0tob3FBNUF3QWdBaUFHYkNFV0lBWWdDbXdoRjBFQUlRc0RRQ0FHSUF0SEJFQWdBQ2dDQUNJUElBc2dGbXBCQTNScUlnUXJBd0FoR3lBRUlCNGdHNklnR2lBTElCZHFRUU4wSUE5cUlnUXJBd0FpSGFLaE9RTUFJQVFnR2lBYm9pQWVJQjJpb0RrREFDQUxRUUZxSVFzTUFRc0xJQUlnQ1VnRVFDQVFLd01BSVJzZ0FrRUNha0VEZENBSWFpSUNLd01BSVIwZ0FpQWVJQjJpT1FNQUlCb2dIYUthSVIwTElBb2hBZ3dCQ3dzZ0Vpc0RBSmtnRkNzREFKa2dGU3NEQUptZ1JJM3R0YUQzeHJBK29tUU5BQXNMQ3lBSklRTU1BUXNMUVFBaEF3TkFJQU1nRVVjRVFDQUJLQUlBSWdrZ0EwRURkR29pQlNzREFDSWRJUm9nQXlJQ1FRRnFJZ2NoQkFOQUlBUWdCa2dFUUNBRVFRTjBJQWxxS3dNQUloc2dHbVFoQ2lBYklCb2dDaHNoR2lBRUlBSWdDaHNoQWlBRVFRRnFJUVFNQVFzTElBSkJBM1FnQ1dvZ0hUa0RBQ0FGSUJvNUF3QWdBeUFHYkVFRGRDQUFLQUlBSWdOcUlRVWdBaUFHYkVFRGRDQURhaUVDUVFBaEF3TkFJQU1nQmtjRVFDQUNLd01BSVJzZ0FpQUZLd01BT1FNQUlBVWdHemtEQUNBRlFRaHFJUVVnQWtFSWFpRUNJQU5CQVdvaEF3d0JDd3NnQnlFRERBRUxDeUFORU04QlFRQUxCVUYvQ3dWQmZ3c0xJUmtnRENRR0lCa0xMQUFnQUZCRkJFQURRQ0FCUVg5cUlnRWdBS2RCQjNGQk1ISTZBQUFnQUVJRGlDSUFVRVVOQUFzTElBRUxOQUFnQUZCRkJFQURRQ0FCUVg5cUlnRWdBaUFBcDBFUGNVR2cyZ0JxTFFBQWNqb0FBQ0FBUWdTSUlnQlFSUTBBQ3dzZ0FRdWhBZ0lKZndGOElBQW9BZ1FoQ1NBQUtBSUlJZ0lnQVNnQ0JFWUVRQ0FCS0FJSUlBSkdCRUFDUUNBQktBSUFJZ29oQmdOQUlBTWdBazRFUUVFQUlRQU1BZ3RCQUNFRUlBWWhBUU5BSUFJZ0JFY0VRQ0FFSUFOSkJFQWdBU0FESUFJZ0JHeHFRUU4wSUFwcUt3TUFPUU1BQlFKQUlBQW9BZ0FoQlNBQlJBQUFBQUFBQUFBQU9RTUFRUUFoQnlBRFFRTjBJQVZxSVFnZ0JFRURkQ0FGYWlFRlJBQUFBQUFBQUFBQUlRc0RRQ0FISUFsT0RRRWdBU0FMSUFnckF3QWdCU3NEQUtLZ0lnczVBd0FnQjBFQmFpRUhJQUpCQTNRZ0NHb2hDQ0FDUVFOMElBVnFJUVVNQUFBTEFBc0xJQVJCQVdvaEJDQUJRUWhxSVFFTUFRc0xJQU5CQVdvaEF5QUNRUU4wSUFacUlRWU1BQUFMQUFzRlFYOGhBQXNGUVg4aEFBc2dBQXZXQWdFR2Z5TUdJUU1qQmtIZ0FXb2tCaUFEUWFBQmFpSUVRZ0EzQXdBZ0JFSUFOd01JSUFSQ0FEY0RFQ0FFUWdBM0F4Z2dCRUlBTndNZ0lBTkIwQUZxSWdVZ0FpZ0NBRFlDQUVFQUlBRWdCU0FEUWRBQWFpSUNJQVFRcEFKQkFFZ0VmMEYvQlNBQUtBSk1RWDlLQkg5QkFRVkJBQXNhSUFBb0FnQWhCaUFBTEFCS1FRRklCRUFnQUNBR1FWOXhOZ0lBQ3lBQUtBSXdCRUFnQUNBQklBVWdBaUFFRUtRQ0lRRUZJQUFvQWl3aEJ5QUFJQU0yQWl3Z0FDQUROZ0ljSUFBZ0F6WUNGQ0FBUWRBQU5nSXdJQUFnQTBIUUFHbzJBaEFnQUNBQklBVWdBaUFFRUtRQ0lRRWdCd1JBSUFCQkFFRUFJQUFvQWlSQlAzRkJ5Z0ZxRVFRQUdpQUJRWDhnQUNnQ0ZCc2hBU0FBSUFjMkFpd2dBRUVBTmdJd0lBQkJBRFlDRUNBQVFRQTJBaHdnQUVFQU5nSVVDd3NnQUNBQUtBSUFJZ0FnQmtFZ2NYSTJBZ0JCZnlBQklBQkJJSEViQ3lFSUlBTWtCaUFJQ3lrQ0FYOEJmQ0FCS0FJQVFRZHFRWGh4SWdJckF3QWhBeUFCSUFKQkNHbzJBZ0FnQUNBRE9RTUFDOHdYQXhSL0EzNEJmQ01HSVJRakJrR3dCR29rQmlBVVFaZ0VhaUlNUVFBMkFnQWdBYjBpR2tJQVV3Ui9JQUdhSWgwaEFVR2gvZ0loRWlBZHZTRWFRUUVGUWFUK0FrR24vZ0pCb3Y0Q0lBUkJBWEViSUFSQmdCQnhHeUVTSUFSQmdSQnhRUUJIQ3lFVElCUkJJR29oQmlBVUlnNGhFU0FPUVp3RWFpSUtRUXhxSVE4Z0drS0FnSUNBZ0lDQStQOEFnMEtBZ0lDQWdJQ0ErUDhBVVFSL0lBQkJJQ0FDSUJOQkEyb2lBeUFFUWYvL2UzRVFkU0FBSUJJZ0V4QnlJQUJCdlA0Q1FjRCtBaUFGUVNCeFFRQkhJZ1ViUWJUK0FrRzQvZ0lnQlJzZ0FTQUJZaHRCQXhCeUlBQkJJQ0FDSUFNZ0JFR0F3QUJ6RUhVZ0F3VUNmeUFCSUF3UWlnTkVBQUFBQUFBQUFFQ2lJZ0ZFQUFBQUFBQUFBQUJpSWdjRVFDQU1JQXdvQWdCQmYybzJBZ0FMSUFWQklISWlDMEhoQUVZRVFDQVNRUWxxSUJJZ0JVRWdjU0lKR3lFSVFRd2dBMnNpQjBVZ0EwRUxTM0pGQkVCRUFBQUFBQUFBSUVBaEhRTkFJQjFFQUFBQUFBQUFNRUNpSVIwZ0IwRi9haUlIRFFBTElBZ3NBQUJCTFVZRWZDQWRJQUdhSUIyaG9Kb0ZJQUVnSGFBZ0hhRUxJUUVMSUE5QkFDQU1LQUlBSWdacklBWWdCa0VBU0J1c0lBOFF2Z0VpQjBZRVFDQUtRUXRxSWdkQk1Eb0FBQXNnRTBFQ2NpRUtJQWRCZjJvZ0JrRWZkVUVDY1VFcmFqb0FBQ0FIUVg1cUlnY2dCVUVQYWpvQUFDQURRUUZJSVF3Z0JFRUljVVVoRFNBT0lRVURRQ0FGSUFrZ0FSQnpJZ1pCb05vQWFpMEFBSEk2QUFBZ0FTQUd0NkZFQUFBQUFBQUFNRUNpSVFFZ0JVRUJhaUlHSUJGclFRRkdCSDhnRFNBTUlBRkVBQUFBQUFBQUFBQmhjWEVFZnlBR0JTQUdRUzQ2QUFBZ0JVRUNhZ3NGSUFZTElRVWdBVVFBQUFBQUFBQUFBR0lOQUFzQ2Z5QURSU0FGUVg0Z0VXdHFJQU5PY2tVRVFDQVBJQU5CQW1wcUlBZHJJUXNnQnd3QkN5QUZJQThnRVdzZ0IydHFJUXNnQndzaEJpQUFRU0FnQWlBS0lBdHFJZ01nQkJCMUlBQWdDQ0FLRUhJZ0FFRXdJQUlnQXlBRVFZQ0FCSE1RZFNBQUlBNGdCU0FSYXlJRkVISWdBRUV3SUFzZ0JTQVBJQVpySWdacWEwRUFRUUFRZFNBQUlBY2dCaEJ5SUFCQklDQUNJQU1nQkVHQXdBQnpFSFVnQXd3QkN5QUhCRUFnRENBTUtBSUFRV1JxSWdnMkFnQWdBVVFBQUFBQUFBQ3dRYUloQVFVZ0RDZ0NBQ0VJQ3lBR0lBWkJvQUpxSUFoQkFFZ2JJZ29oQmdOQUlBWWdBUkNLQlNJSE5nSUFJQVpCQkdvaEJpQUJJQWU0b1VRQUFBQUFaYzNOUWFJaUFVUUFBQUFBQUFBQUFHSU5BQXNnQ0VFQVNnUkFJQW9oQndOQUlBaEJIU0FJUVIxSUd5RU5JQVpCZkdvaUNDQUhUd1JBSUEydElSdEJBQ0VKQTBBZ0NhMGdDQ2dDQUswZ0c0WjhJaHhDZ0pUcjNBTVE5Z0VoR2lBSUlCd2dHa0tBbE92Y0EzNTlQZ0lBSUJxbklRa2dDRUY4YWlJSUlBZFBEUUFMSUFrRVFDQUhRWHhxSWdjZ0NUWUNBQXNMSUFZZ0Iwc0VRQUpBQTM4Z0JrRjhhaUlJS0FJQURRRWdDQ0FIU3dSL0lBZ2hCZ3dCQlNBSUN3c2hCZ3NMSUF3Z0RDZ0NBQ0FOYXlJSU5nSUFJQWhCQUVvTkFBc0ZJQW9oQnd0QkJpQURJQU5CQUVnYklRMGdDRUVBU0FSQUlBMUJHV3BCQ1JBNVFRRnFJUkFnQzBIbUFFWWhGU0FHSVFNRFFFRUFJQWhySWdaQkNTQUdRUWxJR3lFSklBb2dCeUFEU1FSL1FRRWdDWFJCZjJvaEZrR0FsT3ZjQXlBSmRpRVhRUUFoQ0NBSElRWURRQ0FHSUFnZ0JpZ0NBQ0lZSUFsMmFqWUNBQ0FYSUJZZ0dIRnNJUWdnQmtFRWFpSUdJQU5KRFFBTElBY2dCMEVFYWlBSEtBSUFHeUVaSUFnRWZ5QURJQWcyQWdBZ0EwRUVhZ1VnQXdzaEJpQVpCU0FESVFZZ0J5QUhRUVJxSUFjb0FnQWJDeUlESUJVYklnY2dFRUVDZEdvZ0JpQUdJQWRyUVFKMUlCQktHeUVJSUF3Z0NTQU1LQUlBYWlJR05nSUFJQVpCQUVnRVFDQURJUWNnQ0NFRElBWWhDQXdCQ3dzRklBY2hBeUFHSVFnTElBb2hEQ0FESUFoSkJFQWdEQ0FEYTBFQ2RVRUpiQ0VISUFNb0FnQWlDa0VLVHdSQVFRb2hCZ05BSUFkQkFXb2hCeUFLSUFaQkNtd2lCazhOQUFzTEJVRUFJUWNMSUExQkFDQUhJQXRCNWdCR0cyc2dDMEhuQUVZaUZTQU5RUUJISWhaeFFSOTBRUjkxYWlJR0lBZ2dER3RCQW5WQkNXeEJkMnBJQkg4Z0JrR0F5QUJxSWdaQkNSQTVJUWtnQmlBSlFRbHNheUlHUVFoSUJFQkJDaUVMQTBBZ0JrRUJhaUVLSUF0QkNtd2hDeUFHUVFkSUJFQWdDaUVHREFFTEN3VkJDaUVMQ3lBSlFRSjBJQXhxUVlSZ2FpSUdLQUlBSWdrZ0N4QklJUkFnQ0NBR1FRUnFSaUlYSUFrZ0N5QVFiR3NpQ2tWeFJRUkFSQUVBQUFBQUFFQkRSQUFBQUFBQUFFQkRJQkJCQVhFYklRRkVBQUFBQUFBQTREOUVBQUFBQUFBQThEOUVBQUFBQUFBQStEOGdGeUFLSUF0QkFYWWlFRVp4R3lBS0lCQkpHeUVkSUJNRVFDQWRtaUFkSUJJc0FBQkJMVVlpRUJzaEhTQUJtaUFCSUJBYklRRUxJQVlnQ1NBS2F5SUtOZ0lBSUFFZ0hhQWdBV0lFUUNBR0lBb2dDMm9pQnpZQ0FDQUhRZitUNjl3RFN3UkFBMEFnQmtFQU5nSUFJQVpCZkdvaUJpQURTUVJBSUFOQmZHb2lBMEVBTmdJQUN5QUdJQVlvQWdCQkFXb2lCellDQUNBSFFmK1Q2OXdEU3cwQUN3c2dEQ0FEYTBFQ2RVRUpiQ0VISUFNb0FnQWlDa0VLVHdSQVFRb2hDd05BSUFkQkFXb2hCeUFLSUF0QkNtd2lDMDhOQUFzTEN3c2dCeUVKSUFaQkJHb2lCaUFJSUFnZ0Jrc2JJUVlnQXdVZ0J5RUpJQWdoQmlBREN5RUtJQVlnQ2tzRWZ3Si9JQVloQXdOL0lBTkJmR29pQmlnQ0FBUkFJQU1oQmtFQkRBSUxJQVlnQ2tzRWZ5QUdJUU1NQVFWQkFBc0xDd1ZCQUFzaEJ5QVZCSDhnRmtFQmN5QU5haUlESUFsS0lBbEJlMHB4Qkg4Z0EwRi9haUFKYXlFSUlBVkJmMm9GSUFOQmYyb2hDQ0FGUVg1cUN5RUZJQVJCQ0hFRWZ5QUlCU0FIQkVBZ0JrRjhhaWdDQUNJTkJFQWdEVUVLRUU0RVFFRUFJUU1GUVFBaEEwRUtJUXNEUUNBRFFRRnFJUU1nRFNBTFFRcHNJZ3NRVGtVTkFBc0xCVUVKSVFNTEJVRUpJUU1MSUFZZ0RHdEJBblZCQ1d4QmQyb2hEU0FGUVNCeVFlWUFSZ1IvSUFnZ0RTQURheUlEUVFBZ0EwRUFTaHNpQXlBSUlBTklHd1VnQ0NBSklBMXFJQU5ySWdOQkFDQURRUUJLR3lJRElBZ2dBMGdiQ3dzRklBMExJUU5CQUNBSmF5RUlJQUJCSUNBQ0lBVkJJSEpCNWdCR0loQUVmMEVBSVFnZ0NVRUFJQWxCQUVvYkJTQVBJQWdnQ1NBSlFRQklHNndnRHhDK0FTSUxhMEVDU0FSQUEwQWdDMEYvYWlJTFFUQTZBQUFnRHlBTGEwRUNTQTBBQ3dzZ0MwRi9haUFKUVI5MVFRSnhRU3RxT2dBQUlBdEJmbW9pQ0NBRk9nQUFJQThnQ0dzTElBTWdFMEVCYW1wQkFTQUVRUU4yUVFGeElBTkJBRWNpQ3h0cWFpSU5JQVFRZFNBQUlCSWdFeEJ5SUFCQk1DQUNJQTBnQkVHQWdBUnpFSFVnRUFSQUlBNUJDV29pQ1NFUElBNUJDR29oQ0NBTUlBb2dDaUFNU3hzaUNpRUhBMEFnQnlnQ0FLMGdDUkMrQVNFRklBY2dDa1lFUUNBRklBbEdCRUFnQ0VFd09nQUFJQWdoQlFzRklBVWdEa3NFUUNBT1FUQWdCU0FSYXhCRkdnTkFJQVZCZjJvaUJTQU9TdzBBQ3dzTElBQWdCU0FQSUFWckVISWdCMEVFYWlJRklBeE5CRUFnQlNFSERBRUxDeUFFUVFoeFJTQUxRUUZ6Y1VVRVFDQUFRY1QrQWtFQkVISUxJQUJCTUNBRklBWkpJQU5CQUVweEJIOERmeUFGS0FJQXJTQUpFTDRCSWdjZ0Rrc0VRQ0FPUVRBZ0J5QVJheEJGR2dOQUlBZEJmMm9pQnlBT1N3MEFDd3NnQUNBSElBTkJDU0FEUVFsSUd4QnlJQU5CZDJvaEJ5QUZRUVJxSWdVZ0Jra2dBMEVKU25FRWZ5QUhJUU1NQVFVZ0J3c0xCU0FEQzBFSmFrRUpRUUFRZFFVZ0FFRXdJQW9nQmlBS1FRUnFJQWNiSWd0SklBTkJmMHB4Qkg4Z0JFRUljVVVoRWlBT1FRbHFJZ3doRTBFQUlCRnJJUkVnRGtFSWFpRUpJQU1oQlNBS0lRWURmeUFNSUFZb0FnQ3RJQXdRdmdFaUEwWUVRQ0FKUVRBNkFBQWdDU0VEQ3dKQUlBWWdDa1lFUUNBRFFRRnFJUWNnQUNBRFFRRVFjaUFTSUFWQkFVaHhCRUFnQnlFRERBSUxJQUJCeFA0Q1FRRVFjaUFISVFNRklBTWdEazBOQVNBT1FUQWdBeUFSYWhCRkdnTkFJQU5CZjJvaUF5QU9TdzBBQ3dzTElBQWdBeUFUSUFOcklnTWdCU0FGSUFOS0d4QnlJQVpCQkdvaUJpQUxTU0FGSUFOcklnVkJmMHB4RFFBZ0JRc0ZJQU1MUVJKcVFSSkJBQkIxSUFBZ0NDQVBJQWhyRUhJTElBQkJJQ0FDSUEwZ0JFR0F3QUJ6RUhVZ0RRc0xJUUFnRkNRR0lBSWdBQ0FBSUFKSUd3czBBQ0FBSUFCaUJIOUJBQVVnQUVRQUFBQUFBQUR3UVdZRWYwRUFCU0FBUkFBQUFBQUFBUEMvWlFSL1FRQUZJQUNyQ3dzTEN5WUJBWDhqQmlFQ0l3WkJFR29rQmlBQ0lBRTJBZ0FnQUVIMi9RSWdBaENsQWhvZ0FpUUdDMVlCQTM4Z0FDZ0NWQ0lEUVFBZ0FrR0FBbW9pQlJDbUFpRUVJQUVnQXlBRUlBTnJJQVVnQkJzaUFTQUNJQUVnQWtrYklnSVFUQm9nQUNBQ0lBTnFOZ0lFSUFBZ0FTQURhaUlCTmdJSUlBQWdBVFlDVkNBQ0M2VUNBZ3AvQVh3Z0FDZ0NDQ0VHSUFBb0FnUWlCU0FCS0FJRVJnUkFJQUVvQWdnZ0JVWUVRQUpBSUFFb0FnQWlDaUVIQTBBZ0FpQUZUZ1JBUVFBaEFBd0NDeUFDSUFac0lRdEJBQ0VESUFjaEFRTkFJQU1nQlVjRVFDQURJQUpKQkVBZ0FTQUNJQU1nQld4cVFRTjBJQXBxS3dNQU9RTUFCUUpBSUFBb0FnQWhCQ0FCUkFBQUFBQUFBQUFBT1FNQVFRQWhDQ0FMUVFOMElBUnFJUWtnQXlBR2JFRURkQ0FFYWlFRVJBQUFBQUFBQUFBQUlRd0RRQ0FJSUFaT0RRRWdBU0FNSUFrckF3QWdCQ3NEQUtLZ0lndzVBd0FnQ0VFQmFpRUlJQWxCQ0dvaENTQUVRUWhxSVFRTUFBQUxBQXNMSUFOQkFXb2hBeUFCUVFocUlRRU1BUXNMSUFKQkFXb2hBaUFGUVFOMElBZHFJUWNNQUFBTEFBc0ZRWDhoQUFzRlFYOGhBQXNnQUF2N0F3SURmd1YrSUFDOUlnZENOSWluUWY4UGNTRUNJQUc5SWdaQ05JaW5RZjhQY1NFRUlBZENnSUNBZ0lDQWdJQ0FmNE1oQ1FKOEFrQWdCa0lCaGlJRlVBMEFBbndnQWtIL0QwWWdBYjFDLy8vLy8vLy8vLy8vQUlOQ2dJQ0FnSUNBZ1BqL0FGWnlEUUVnQjBJQmhpSUlJQVZZQkVBZ0FFUUFBQUFBQUFBQUFLSWdBQ0FGSUFoUkd3OExJQUlFZmlBSFF2Ly8vLy8vLy84SGcwS0FnSUNBZ0lDQUNJUUZJQWRDRElZaUJVSi9WUVJBUVFBaEFnTkFJQUpCZjJvaEFpQUZRZ0dHSWdWQ2YxVU5BQXNGUVFBaEFnc2dCMEVCSUFKcnJZWUxJZ2dnQkFSK0lBWkMvLy8vLy8vLy93ZURRb0NBZ0lDQWdJQUloQVVnQmtJTWhpSUZRbjlWQkVBRFFDQURRWDlxSVFNZ0JVSUJoaUlGUW45VkRRQUxDeUFHUVFFZ0F5SUVhNjJHQ3lJR2ZTSUZRbjlWSVFNZ0FpQUVTZ1JBQWtBRFFBSkFJQU1FUUNBRlVBMEJCU0FJSVFVTElBVkNBWVlpQ0NBR2ZTSUZRbjlWSVFNZ0FrRi9haUlDSUFSS0RRRU1BZ3NMSUFCRUFBQUFBQUFBQUFDaURBSUxDeUFEQkVBZ0FFUUFBQUFBQUFBQUFLSWdCVkFOQVJvRklBZ2hCUXNnQlVLQWdJQ0FnSUNBQ0ZRRVFBTkFJQUpCZjJvaEFpQUZRZ0dHSWdWQ2dJQ0FnSUNBZ0FoVURRQUxDeUFGUW9DQWdJQ0FnSUI0ZkNBQ3JVSTBob1FnQlVFQklBSnJyWWdnQWtFQVNoc2dDWVMvQ3d3QkN5QUFJQUdpSWdBZ0FLTUxDL2tUQXc1L0FuNEhmQ01HSVFvakJrR0FCR29rQmtFQUlBSWdBMm9pRUdzaEVRSkFBa0FEUUFKQUFrQUNRQ0FCUVM1ckRnTUVBQUVBQ3lBQklRWWdCeUVCREFFTElBQW9BZ1FpQVNBQUtBSm9TUVIvSUFBZ0FVRUJhallDQkNBQkxRQUFCU0FBRUZRTElRRkJBU0VIREFFTEN3d0JDeUFBS0FJRUlnRWdBQ2dDYUVrRWZ5QUFJQUZCQVdvMkFnUWdBUzBBQUFVZ0FCQlVDeUlHUVRCR0JIOERmeUFVUW45OElSUWdBQ2dDQkNJQklBQW9BbWhKQkg4Z0FDQUJRUUZxTmdJRUlBRXRBQUFGSUFBUVZBc2lCa0V3UmcwQVFRRWhDMEVCQ3dWQkFTRUxJQWNMSVFFTElBcEJBRFlDQUFKOEFrQUNRQUpBQWtBZ0JrRXVSaUlPSUFaQlVHb2lEVUVLU1hJRVFBSkFRUUFoQnlBR0lRa2dEU0VHQTBBQ1FDQU9CRUFnQ3cwQlFRRWhDeUFWSVJRRkFrQWdGVUlCZkNFVklBbEJNRWNoRFNBSVFmMEFUZ1JBSUExRkRRRWdDaUFLS0FMd0EwRUJjallDOEFNTUFRc2dDRUVDZENBS2FpSUJJQXdFZnlBSlFWQnFJQUVvQWdCQkNteHFCU0FHQ3pZQ0FDQU1RUUZxSWdaQkNVWWhBVUVBSUFZZ0FSc2hEQ0FCSUFocUlRZ2dGYWNnQnlBTkd5RUhRUUVoQVFzTElBQW9BZ1FpQmlBQUtBSm9TUVIvSUFBZ0JrRUJhallDQkNBR0xRQUFCU0FBRUZRTElnbEJVR29pQmtFS1NTQUpRUzVHSWc1eURRRWdDU0VHREFJTEN5QUJRUUJISVFFTUFnc0ZRUUFoQndzZ0ZDQVZJQXNiSVJRZ0FVRUFSeUlCSUFaQklISkI1UUJHY1VVRVFDQUdRWDlLQkVBTUFnVU1Bd3NBQ3lBVUlBQWdCUkNSQXlJVVFvQ0FnSUNBZ0lDQWdIOVJCSDRnQlVVRVFDQUFRZ0FRZ2dGRUFBQUFBQUFBQUFBTUJnc2dBQ2dDYUFSQUlBQWdBQ2dDQkVGL2FqWUNCQXRDQUFVZ0ZBdDhJUlFNQXdzZ0FDZ0NhQVJBSUFBZ0FDZ0NCRUYvYWpZQ0JDQUJSUTBDREFNTEN5QUJSUTBBREFFTFFhVEZBMEVjTmdJQUlBQkNBQkNDQVVRQUFBQUFBQUFBQUF3QkN5QUV0MFFBQUFBQUFBQUFBS0lnQ2lnQ0FDSUFSUTBBR2lBVUlCVlJJQlZDQ2xOeEJFQWdCTGNnQUxpaUlBQWdBblpGSUFKQkhrcHlEUUVhQ3lBVUlBTkJmaEE1ckZVRVFFR2t4UU5CeEFBMkFnQWdCTGRFLy8vLy8vLy83MytpUlAvLy8vLy8vKzkvb2d3QkN5QVVJQU5CbG45cXJGTUVRRUdreFFOQnhBQTJBZ0FnQkxkRUFBQUFBQUFBRUFDaVJBQUFBQUFBQUJBQW9nd0JDeUFNQkVBZ0RFRUpTQVJBSUFoQkFuUWdDbW9pQlNnQ0FDRUJBMEFnQVVFS2JDRUJJQXhCQVdvaEFDQU1RUWhJQkVBZ0FDRU1EQUVMQ3lBRklBRTJBZ0FMSUFoQkFXb2hDQXNnRktjaEFTQUhRUWxJQkVBZ0FVRVNTQ0FISUFGTWNRUkFJQUZCQ1VZRVFDQUV0eUFLS0FJQXVLSU1Bd3NnQVVFSlNBUkFJQVMzSUFvb0FnQzRva0VBSUFGclFRSjBRY0RVQUdvb0FnQzNvd3dEQ3lBQ1FSdHFJQUZCZld4cUlnQkJIa29nQ2lnQ0FDSUZJQUIyUlhJRVFDQUV0eUFGdUtJZ0FVRUNkRUg0MHdCcUtBSUF0NklNQXdzTEN5QUJRUWtRVHlJQUJIOUJBQ0FBSUFCQkNXb2dBVUYvU2hzaURHdEJBblJCd05RQWFpZ0NBQ0VHSUFnRWYwR0FsT3ZjQXlBR0VEa2hDMEVBSVFkQkFDRUFRUUFoQlFOQUlBY2dCVUVDZENBS2FpSU5LQUlBSWc0Z0JoQklJZzlxSVFrZ0RTQUpOZ0lBSUFzZ0RpQUdJQTlzYTJ3aEJ5QUJRWGRxSUFFZ0NVVWdBQ0FGUm5FaUNSc2hBU0FBUVFGcVFmOEFjU0FBSUFrYklRQWdCVUVCYWlJRklBaEhEUUFMSUFjRWZ5QUlRUUowSUFwcUlBYzJBZ0FnQUNFRklBaEJBV29GSUFBaEJTQUlDd1ZCQUNFRlFRQUxJUUFnQVVFSklBeHJhaUVCSUFVRklBZ2hBRUVBQ3lFSFFRQWhCUU5BQWtBZ0FVRVNTQ0VNSUFGQkVrWWhEU0FIUVFKMElBcHFJUTREUUNBTVJRUkFJQTFGRFFJZ0RpZ0NBRUhmNEtVRVR3UkFRUkloQVF3REN3dEJBQ0VJSUFCQi93QnFJUXNEUUNBSXJTQUxRZjhBY1NJSlFRSjBJQXBxSWdZb0FnQ3RRaDJHZkNJVXB5RUxJQlJDZ0pUcjNBTldCRUFnRkVLQWxPdmNBeEQyQVNJVnB5RUlJQlFnRlVLQWxPdmNBMzU5cHlFTEJVRUFJUWdMSUFZZ0N6WUNBQ0FBSUFBZ0NTQUxHeUFISUFsR0lnOGdDU0FBUWY4QWFrSC9BSEZIY2hzaEJpQUpRWDlxSVFzZ0QwVUVRQ0FHSVFBTUFRc0xJQVZCWTJvaEJTQUlSUTBBQ3lBR1FmOEFha0gvQUhFaENTQUdRZjRBYWtIL0FIRkJBblFnQ21vaERDQUhRZjhBYWtIL0FIRWlCeUFHUmdSQUlBd2dDVUVDZENBS2FpZ0NBQ0FNS0FJQWNqWUNBQ0FKSVFBTElBZEJBblFnQ21vZ0NEWUNBQ0FCUVFscUlRRU1BUXNMQTBBQ1FDQUFRUUZxUWY4QWNTRUdJQUJCL3dCcVFmOEFjVUVDZENBS2FpRU1BMEFDUUNBQlFSSkdJUWhCQ1VFQklBRkJHMG9iSVFrRFFFRUFJUTRDUUFKQUEwQUNRQ0FBSUFjZ0RtcEIvd0J4SWd0R0RRSWdDMEVDZENBS2FpZ0NBQ0lMSUE1QkFuUkJxSW9CYWlnQ0FDSU5TUTBDSUFzZ0RVc05BQ0FPUVFGcVFRSlBEUUpCQVNFT0RBRUxDd3dCQ3lBSURRUUxJQVVnQ1dvaEJTQUFJQWRHQkVBZ0FDRUhEQUVMQzBFQklBbDBRWDlxSVE1QmdKVHIzQU1nQ1hZaEQwRUFJUWdnQnlFTEEwQWdDQ0FMUVFKMElBcHFJaElvQWdBaUV5QUpkbW9oRFNBU0lBMDJBZ0FnRHlBT0lCTnhiQ0VJSUFGQmQyb2dBU0FOUlNBSElBdEdjU0lOR3lFQklBZEJBV3BCL3dCeElBY2dEUnNoQnlBTFFRRnFRZjhBY1NJTElBQkhEUUFMSUFnRVFDQUdJQWRIRFFFZ0RDQU1LQUlBUVFGeU5nSUFDd3dCQ3dzZ0FFRUNkQ0FLYWlBSU5nSUFJQVloQUF3QkN3dEJBQ0VCQTBBZ0FFRUJha0gvQUhFaEJpQUFJQUVnQjJwQi93QnhJZ2xHQkVBZ0JrRi9ha0VDZENBS2FrRUFOZ0lBSUFZaEFBc2dGa1FBQUFBQVpjM05RYUlnQ1VFQ2RDQUthaWdDQUxpZ0lSWWdBVUVCYWlJQlFRSkhEUUFMSUJZZ0JMY2lHS0loRnlBRlFUVnFJZ1lnQTJzaUF5QUNTQ0VFSUFOQkFDQURRUUJLR3lBQ0lBUWJJZ0ZCTlVnRVFFUUFBQUFBQUFEd1AwSHBBQ0FCYXhDZkFTQVhFSkFESWhraEdpQVhSQUFBQUFBQUFQQS9RVFVnQVdzUW53RVFqd01pR3lFV0lCa2dGeUFib2FBaEZ3VkVBQUFBQUFBQUFBQWhGZ3NnQjBFQ2FrSC9BSEVpQWlBQVJ3UkFBa0FnQWtFQ2RDQUthaWdDQUNJQ1FZREt0ZTRCU1FSOElBSkZRUUFnQUNBSFFRTnFRZjhBY1VZYkRRRWdHRVFBQUFBQUFBRFFQNklnRnFBRklBSkJnTXExN2dGSEJFQWdHRVFBQUFBQUFBRG9QNklnRnFBaEZnd0NDeUFZUkFBQUFBQUFBT0Evb2lBV29DQVlSQUFBQUFBQUFPZy9vaUFXb0NBQUlBZEJBMnBCL3dCeFJoc0xJUllMUVRVZ0FXdEJBVW9FZkNBV1JBQUFBQUFBQVBBL0VJOERSQUFBQUFBQUFBQUFZUVI4SUJaRUFBQUFBQUFBOEQrZ0JTQVdDd1VnRmdzaEZnc2dGeUFXb0NBYW9TRVhJQVpCLy8vLy93ZHhRWDRnRUd0S0JId0NmQ0FGSUJlWlJBQUFBQUFBQUVCRFprVWlBRUVCYzJvaEJTQVhJQmRFQUFBQUFBQUE0RCtpSUFBYklSY2dCVUV5YWlBUlRBUkFJQmNnQkNBQUlBRWdBMGR5Y1NBV1JBQUFBQUFBQUFBQVluRkZEUUVhQzBHa3hRTkJ4QUEyQWdBZ0Z3c0ZJQmNMSUFVUWpnTUxJUndnQ2lRR0lCd0w4Z2dEQ0g4RmZnTjhJQUFvQWdRaUJTQUFLQUpvU1FSL0lBQWdCVUVCYWpZQ0JDQUZMUUFBQlNBQUVGUUxJUVVDUUFKQUEwQUNRQUpBSUFWQkxtc09Bd01CQUFFTElBQW9BZ1FpQlNBQUtBSm9TUVIvSUFBZ0JVRUJhallDQkNBRkxRQUFCU0FBRUZRTElRVkJBU0VJREFFTEN3d0JDeUFBS0FJRUlnVWdBQ2dDYUVrRWZ5QUFJQVZCQVdvMkFnUWdCUzBBQUFVZ0FCQlVDeUlGUVRCR0JIOERmeUFOUW45OElRMGdBQ2dDQkNJRklBQW9BbWhKQkg4Z0FDQUZRUUZxTmdJRUlBVXRBQUFGSUFBUVZBc2lCVUV3UmcwQVFRRWhDRUVCQ3dWQkFRc2hDUXRFQUFBQUFBQUE4RDhoRXlBRklRY2dDQ0VGQTBBQ1FDQUhRU0J5SVFnQ1FBSkFJQWRCVUdvaUMwRUtTUTBBSUFkQkxrWWlEQ0FJUVo5L2FrRUdTWEpGRFFJZ0RFVU5BQ0FKQkg1QkxpRUhEQU1GUVFFaENTQVBDeUVOREFFTElBaEJxWDlxSUFzZ0IwRTVTaHNoQlNBUFFnaFRCRUFnQlNBR1FRUjBhaUVHQlNBUFFnNVRCSHdnRTBRQUFBQUFBQUN3UDZJaUZDRVRJQklnRkNBRnQ2S2dCU0FLUVFFZ0JVVWdDa0VBUjNJaUJSc2hDaUFTSUJJZ0UwUUFBQUFBQUFEZ1A2S2dJQVViQ3lFU0N5QVBRZ0Y4SVE5QkFTRUZDeUFBS0FJRUlnY2dBQ2dDYUVrRWZ5QUFJQWRCQVdvMkFnUWdCeTBBQUFVZ0FCQlVDeUVIREFFTEN5QUZCSHdDZkNBUFFnaFRCRUFnRHlFT0EwQWdCa0VFZENFR0lBNUNBWHdoRUNBT1FnZFRCRUFnRUNFT0RBRUxDd3NDZnlBSFFTQnlRZkFBUmdSK0lBQWdCQkNSQXlJT1FvQ0FnSUNBZ0lDQWdIOVJCSDRnQkVVRVFDQUFRZ0FRZ2dGRUFBQUFBQUFBQUFBTUJBc2dBQ2dDYUFSQUlBQWdBQ2dDQkVGL2FqWUNCQXRDQUFVZ0Rnc0ZJQUFvQW1nRVFDQUFJQUFvQWdSQmYybzJBZ1FMUWdBTElSRWdBN2RFQUFBQUFBQUFBQUNpSUFaRkRRRWFJQkVnRFNBUElBa2JRZ0tHUW1COGZDSU5RUUFnQW11c1ZRc0VRRUdreFFOQnhBQTJBZ0FnQTdkRS8vLy8vLy8vNzMraVJQLy8vLy8vLys5L29nd0JDeUFOSUFKQmxuOXFyRk1FUUVHa3hRTkJ4QUEyQWdBZ0E3ZEVBQUFBQUFBQUVBQ2lSQUFBQUFBQUFCQUFvZ3dCQ3lBR1FYOUtCRUFEUUNBU1JBQUFBQUFBQU9BL1prVWlBRUVCY3lBR1FRRjBjaUVHSUJJZ0VpQVNSQUFBQUFBQUFQQy9vQ0FBRzZBaEVpQU5Rbjk4SVEwZ0JrRi9TZzBBQ3dzQ2ZBSkFJQTFDSUNBQ3JIMThJZzRnQWF4VEJFQWdEcWNpQVVFQVRBUkFRUUFoQVVIVUFDRUFEQUlMQzBIVUFDQUJheUVBSUFGQk5VZ05BQ0FEdHlFVFJBQUFBQUFBQUFBQURBRUxSQUFBQUFBQUFQQS9JQUFRbndFZ0E3Y2lFeENRQXdzaEZFUUFBQUFBQUFBQUFDQVNJQVpCQVhGRklBRkJJRWdnRWtRQUFBQUFBQUFBQUdKeGNTSUFHeUFUb2lBVUlCTWdBQ0FHYXJpaW9LQWdGS0VpRWtRQUFBQUFBQUFBQUdFRVFFR2t4UU5CeEFBMkFnQUxJQklnRGFjUWpnTUxCU0FBS0FKb1JTSUJSUVJBSUFBZ0FDZ0NCRUYvYWpZQ0JBc2dCQVJBSUFGRkJFQWdBQ0FBS0FJRVFYOXFOZ0lFSUFFZ0NVVnlSUVJBSUFBZ0FDZ0NCRUYvYWpZQ0JBc0xCU0FBUWdBUWdnRUxJQU8zUkFBQUFBQUFBQUFBb2dzTHZnTUJCSDhnQUNnQ0NDSUZJQUFvQWdRaUF5QUZJQU5JR3lFR0lBVkJBa2dnQTBFQ1NISUVmMEYvQlNBQktBSUlJQVZHQkg4Z0FTZ0NCQ0FHUmdSL0lBSW9BZ1FnQmtZRWZ3Si9JQVlnQmhDTEFTSUVLQUlFSUFaR0JFQWdCQ2dDQ0NBR1JnUkFJQU1nQlVnaUF3UkFJQUFnQkJDTkJVRUFTQVJBSUFRUVNVRi9EQVFMQlNBQUlBUVFoZ1ZCQUVnRVFDQUVFRWxCZnd3RUN3c2dCQ0FDRUlNRlFRQklCRUFnQkJCSlFYOE1Bd3NnQXdSQUlBQWdCQ0FCSUFJUS9nUkJBRWdFUUNBRUVFbEJmd3dFQ3dVQ1FFRUFJUVVnQkNnQ0FDRURJQUVvQWdBaEFBTkFBa0FnQlNBR1RnMEFJQUlvQWdBZ0JVRURkR29yQXdCRXZJbllsN0xTbkR4akRRQkJBQ0VCQTBBZ0FTQUdTQVJBSUFBZ0F5c0RBRGtEQUNBQlFRRnFJUUVnQTBFSWFpRURJQUJCQ0dvaEFBd0JDd3NnQlVFQmFpRUZEQUVMQ3lBRklRRURRQ0FCSUFaT0RRRWdBaWdDQUNBQlFRTjBha1FBQUFBQUFBQUFBRGtEQUVFQUlRTURRQ0FESUFaSUJFQWdBRVFBQUFBQUFBQUFBRGtEQUNBRFFRRnFJUU1nQUVFSWFpRUFEQUVMQ3lBQlFRRnFJUUVNQUFBTEFBc0xJQVFRU1VFQURBSUxDeUFFRUVsQmZ3c0ZRWDhMQlVGL0N3VkJmd3NMQzlJVEFnOS9BWHdqQmlFT0l3WkJFR29rQmlBRUtBSUFJZ2NoRENBQklBSkJmMm9pRUd4QkFYUWdCMm9oQmdOQUlBVWdBVWdFUUNBR1FRQTdBUUFnREVFQU93RUFJQXhCQW1vaERDQUZRUUZxSVFVZ0JrRUNhaUVHREFFTEMwRUFJUXdnQnlJR0lBRkJmMm9pRVVFQmRHb2hCUU5BSUF3Z0FrZ0VRQ0FGUVFBN0FRQWdCa0VBT3dFQUlBRkJBWFFnQm1vaEJpQU1RUUZxSVF3Z0FVRUJkQ0FGYWlFRkRBRUxDeUFFUVpDQXlBQnFJUVpCQUNBQmF5RVNJQUFnQVVFQmFpSUFhaUVOSUFBZ0Eyb2hERUVCSVFwQkFDRUZJQUJCQVhRZ0Iyb2hBd0ovQWtBRFFBSkFJQW9nRUU0TkFpQUZJUUJCQVNFSUlBTWhDd05BSUFnZ0VVZ0VRQ0FOTFFBQUlBd3RBQUJLQkVBQ1FDQVNRUUYwSUF0cUlnOHVBUUFpQTBFQVNnUkFJQXNnQXpzQkFDQURRUWRzSWdWQkFuUWdCR3BCOVAvUEFHb2lBeUFES0FJQVFRRnFOZ0lBSUFWQkFuUWdCR3BCK1AvUEFHb2lBeUFJSUFNb0FnQnFOZ0lBSUFWQkFuUWdCR3BCL1AvUEFHb2lBeUFLSUFNb0FnQnFOZ0lBSUFWQkFuUWdCR3BCaklEUUFHb2dDallDQUF3QkN5QVBRWDVxTGdFQUlna2hCeUFKUVFCS0lRVWdEeTRCQWlJRFFRQk1CRUFnQlFSQUlBc2dDVHNCQUNBSFFRZHNJZ1ZCQW5RZ0JHcEI5UC9QQUdvaUF5QURLQUlBUVFGcU5nSUFJQVZCQW5RZ0JHcEIrUC9QQUdvaUF5QUlJQU1vQWdCcU5nSUFJQVZCQW5RZ0JHcEIvUC9QQUdvaUF5QUtJQU1vQWdCcU5nSUFJQVZCQW5RZ0JHcEJoSURRQUdvaUF5Z0NBQ0FJU0FSQUlBTWdDRFlDQUFzZ0JVRUNkQ0FFYWtHTWdOQUFhaUFLTmdJQURBSUxJQXRCZm1vdUFRQWlBMEVBU2dSQUlBc2dBenNCQUNBRFFRZHNJZ1ZCQW5RZ0JHcEI5UC9QQUdvaUF5QURLQUlBUVFGcU5nSUFJQVZCQW5RZ0JHcEIrUC9QQUdvaUF5QUlJQU1vQWdCcU5nSUFJQVZCQW5RZ0JHcEIvUC9QQUdvaUF5QUtJQU1vQWdCcU5nSUFJQVZCQW5RZ0JHcEJoSURRQUdvaUF5Z0NBQ0FJVGcwQ0lBTWdDRFlDQUFVZ0FFSC8vd0ZLRFFZZ0N5QUFRUUZxSWdNN0FRQWdCRUdRZ01nQWFpQUFRUUowYWlBRFFSQjBRUkIxTmdJQUlBUkJrSURRQUdvZ0FFRUhiQ0lBUVFKMGFrRUJOZ0lBSUFCQkFuUWdCR3BCbElEUUFHb2dDRFlDQUNBQVFRSjBJQVJxUVppQTBBQnFJQW8yQWdBZ0FFRUNkQ0FFYWtHY2dOQUFhaUFJTmdJQUlBQkJBblFnQkdwQm9JRFFBR29nQ0RZQ0FDQUFRUUowSUFScVFhU0EwQUJxSUFvMkFnQWdBRUVDZENBRWFrR29nTkFBYWlBS05nSUFJQU1oQUFzTUFRc2dCUVJBQWtBZ0EwRUNkQ0FFYWtHTWdNZ0FhaWdDQUNJRElBZEJBblFnQkdwQmpJRElBR29vQWdBaUIwb0VRQ0FMSUFjN0FRQWdCaUVGUVFBaENRTkFJQWtnQUU0RVFDQUhJUU1NQXdzZ0F5QUZLQUlBUmdSQUlBVWdCellDQUFzZ0JVRUVhaUVGSUFsQkFXb2hDUXdBQUFzQUJTQUxJQU03QVFBZ0F5QUhTQVJBSUFZaEJVRUFJUWtEUUNBSklBQk9EUU1nQnlBRktBSUFSZ1JBSUFVZ0F6WUNBQXNnQlVFRWFpRUZJQWxCQVdvaENRd0FBQXNBQ3dzTElBTkJFSFJCRUhWQkIyd2lCVUVDZENBRWFrSDAvODhBYWlJRElBTW9BZ0JCQVdvMkFnQWdCVUVDZENBRWFrSDQvODhBYWlJRElBZ2dBeWdDQUdvMkFnQWdCVUVDZENBRWFrSDgvODhBYWlJRElBb2dBeWdDQUdvMkFnQWdCVUVDZENBRWFrR01nTkFBYWlBS05nSUFEQUVMSUF0QmZtb3VBUUFpQlVFQVRBUkFJQXNnQXpzQkFDQURRUWRzSWdWQkFuUWdCR3BCOVAvUEFHb2lBeUFES0FJQVFRRnFOZ0lBSUFWQkFuUWdCR3BCK1AvUEFHb2lBeUFJSUFNb0FnQnFOZ0lBSUFWQkFuUWdCR3BCL1AvUEFHb2lBeUFLSUFNb0FnQnFOZ0lBSUFWQkFuUWdCR3BCZ0lEUUFHb2lBeWdDQUNBSVNnUkFJQU1nQ0RZQ0FBc2dCVUVDZENBRWFrR01nTkFBYWlBS05nSUFEQUVMQWtBZ0EwRUNkQ0FFYWtHTWdNZ0FhaWdDQUNJRElBVkJBblFnQkdwQmpJRElBR29vQWdBaUIwb0VRQ0FMSUFjN0FRQWdCaUVGUVFBaENRTkFJQWtnQUU0RVFDQUhJUU1NQXdzZ0F5QUZLQUlBUmdSQUlBVWdCellDQUFzZ0JVRUVhaUVGSUFsQkFXb2hDUXdBQUFzQUJTQUxJQU03QVFBZ0F5QUhTQVJBSUFZaEJVRUFJUWtEUUNBSklBQk9EUU1nQnlBRktBSUFSZ1JBSUFVZ0F6WUNBQXNnQlVFRWFpRUZJQWxCQVdvaENRd0FBQXNBQ3dzTElBTkJFSFJCRUhWQkIyd2lCVUVDZENBRWFrSDAvODhBYWlJRElBTW9BZ0JCQVdvMkFnQWdCVUVDZENBRWFrSDQvODhBYWlJRElBZ2dBeWdDQUdvMkFnQWdCVUVDZENBRWFrSDgvODhBYWlJRElBb2dBeWdDQUdvMkFnQUxCU0FMUVFBN0FRQUxJQTFCQVdvaERTQU1RUUZxSVF3Z0NFRUJhaUVJSUF0QkFtb2hDd3dCQ3dzZ0RVRUNhaUVOSUF4QkFtb2hEQ0FLUVFGcUlRb2dBQ0VGSUF0QkJHb2hBd3dCQ3d0QkFFRURRYWlsQVNBT0VEMUJmd3dCQ3lBRVFReHFJUTFCQVNFQVFRRWhCd05BSUFjZ0JVd0VRQ0FISUFZb0FnQWlERVlFUUNBQVFRRnFJUU1GSUFBaEF5QU1RUUowSUFScVFZeUF5QUJxS0FJQUlRQUxJQVlnQURZQ0FDQURJUUFnQjBFQmFpRUhJQVpCQkdvaEJnd0JDd3NnQkNBQVFYOXFJZ1kyQWdnZ0JnUi9JQTFCQUNBR1FRSjBFRVVhSUFSQmtJQW9ha0VBSUFaQkJIUVFSUnBCQUNFREEwQWdBeUFHU0FSQUlBUkJqSUFJYWlBRFFRSjBJZ0JCQW5ScUlBRTJBZ0FnQkVHTWdBaHFJQUJCQVhKQkFuUnFRUUEyQWdBZ0JFR01nQWhxSUFCQkFuSkJBblJxSUFJMkFnQWdCRUdNZ0FocUlBQkJBM0pCQW5ScVFRQTJBZ0FnQTBFQmFpRUREQUVMQzBFQUlRTURRQ0FESUFWSUJFQWdCRUVNYWlBRVFaQ0F5QUJxSUFOQkFuUnFLQUlBUVg5cUlnSkJBblJxSWdBZ0JFR1FnTkFBYWlBRFFRZHNJZ1pCQW5ScUtBSUFJQUFvQWdCcU5nSUFJQVJCa0lBb2FpQUNRUUYwSWdGQkEzUnFJZ0FnQUNzREFDQUdRUUowSUFScVFaU0EwQUJxS0FJQXQ2QTVBd0FnQkVHUWdDaHFJQUZCQVhKQkEzUnFJZ0FnQUNzREFDQUdRUUowSUFScVFaaUEwQUJxS0FJQXQ2QTVBd0FnQkVHTWdBaHFJQUpCQW5RaUFrRUNkR29pQVNnQ0FDQUdRUUowSUFScVFaeUEwQUJxS0FJQUlnQktCRUFnQVNBQU5nSUFDeUFFUVl5QUNHb2dBa0VCY2tFQ2RHb2lBU2dDQUNBR1FRSjBJQVJxUWFDQTBBQnFLQUlBSWdCSUJFQWdBU0FBTmdJQUN5QUVRWXlBQ0dvZ0FrRUNja0VDZEdvaUFTZ0NBQ0FHUVFKMElBUnFRYVNBMEFCcUtBSUFJZ0JLQkVBZ0FTQUFOZ0lBQ3lBRVFZeUFDR29nQWtFRGNrRUNkR29pQVNnQ0FDQUdRUUowSUFScVFhaUEwQUJxS0FJQUlnQklCRUFnQVNBQU5nSUFDeUFEUVFGcUlRTU1BUXNMSUFRb0FnZ2hBa0VBSVFNRGZ5QURJQUpJQkg4Z0JFR1FnQ2hxSUFOQkFYUWlBVUVEZEdvaUFDQUFLd01BSUFSQkRHb2dBMEVDZEdvb0FnQzNJaFNqT1FNQUlBUkJrSUFvYWlBQlFRRnlRUU4wYWlJQUlBQXJBd0FnRktNNUF3QWdBMEVCYWlFRERBRUZRUUFMQ3dWQkFBc0xJUk1nRGlRR0lCTUxVd0VDZnlNR0lRSWpCa0VRYWlRR0lBSWdBQ2dDQURZQ0FBTkFJQUlvQWdCQkEycEJmSEVpQUNnQ0FDRURJQUlnQUVFRWFqWUNBQ0FCUVg5cUlRQWdBVUVCU3dSQUlBQWhBUXdCQ3dzZ0FpUUdJQU1MeGhRREVYOERmZ0Y4SXdZaENTTUdRYUFDYWlRR0lBQW9Ba3hCZjBvRWYwRUJCVUVBQ3hvZ0NVR0lBbW9oRFNBSlFZUUNhaUVTSUFsQmtBSnFJUk1nQVN3QUFDSUxCRUFDUUFKQUFrQUNRQUpBQTBBQ1FDQUxRZjhCY1JDeUFRUkFBMEFnQVVFQmFpSURMUUFBRUxJQkJFQWdBeUVCREFFTEN5QUFRZ0FRZ2dFRFFDQUFLQUlFSWdNZ0FDZ0NhRWtFZnlBQUlBTkJBV28yQWdRZ0F5MEFBQVVnQUJCVUN4Q3lBUTBBQ3lBQUtBSm9CRUFnQUNBQUtBSUVRWDlxSWdzMkFnUUZJQUFvQWdRaEN3c2dDeUFBS0FJSWE2d2dGQ0FBS1FONGZId2hGQVVDUUNBQkxBQUFRU1ZHSWdjRVFBSkFBbjhDUUFKQUlBRkJBV29pQkN3QUFDSURRU1ZyRGdZREFRRUJBUUFCQzBFQUlRb2dBVUVDYWd3QkN5QURRZjhCY1JDS0FRUkFJQUVzQUFKQkpFWUVRQ0FDSUFRdEFBQkJVR29Ra3dVaENpQUJRUU5xREFJTEN5QUNLQUlBUVFOcVFYeHhJZ0VvQWdBaENpQUNJQUZCQkdvMkFnQWdCQXNpQVMwQUFCQ0tBUVJBUVFBaEJBTkFJQUV0QUFBZ0JFRUtiRUZRYW1vaEJDQUJRUUZxSWdFdEFBQVFpZ0VOQUFzRlFRQWhCQXNnQVVFQmFpRUhJQUVzQUFBaUNFSHRBRVlFZjBFQUlRWWdBVUVDYWlFQklBY2lBeXdBQUNFSVFRQWhCU0FLUVFCSEJTQUJJUU1nQnlFQlFRQUxJUXNDUUFKQUFrQUNRQUpBQWtBQ1FDQUlRUmgwUVJoMVFjRUFhdzQ2QlE0RkRnVUZCUTRPRGc0RURnNE9EZzRPQlE0T0RnNEZEZzRGRGc0T0RnNEZEZ1VGQlFVRkFBVUNEZ0VPQlFVRkRnNEZBd1VPRGdVT0F3NExRWDVCZnlBQkxBQUFRZWdBUmlJSEd5RUlJQU5CQW1vZ0FTQUhHeUVCREFVTFFRTkJBU0FCTEFBQVFld0FSaUlIR3lFSUlBTkJBbW9nQVNBSEd5RUJEQVFMUVFNaENBd0RDMEVCSVFnTUFndEJBaUVJREFFTFFRQWhDQ0FESVFFTFFRRWdDQ0FCTFFBQUlnZEJMM0ZCQTBZaUF4c2hEaUFBQW44Q1FBSkFBa0FDUUNBSFFTQnlJQWNnQXhzaURFSC9BWEVpQjBFWWRFRVlkVUhiQUdzT0ZBRURBd01EQXdNREFBTURBd01EQXdNREF3TUNBd3NnQkVFQklBUkJBVW9iREFNTElBUU1BZ3NnQ2lBT0lCUVFsQU1NQkFzZ0FFSUFFSUlCQTBBZ0FDZ0NCQ0lESUFBb0FtaEpCSDhnQUNBRFFRRnFOZ0lFSUFNdEFBQUZJQUFRVkFzUXNnRU5BQXNnQUNnQ2FBUkFJQUFnQUNnQ0JFRi9haUlJTmdJRUJTQUFLQUlFSVFnTElBZ2dBQ2dDQ0d1c0lCUWdBQ2tEZUh4OElSUWdCQXNpRWF3aUZoQ0NBU0FBS0FJRUlnTWdBQ2dDYUNJRVNRUkFJQUFnQTBFQmFqWUNCQVVnQUJCVVFRQklEUWdnQUNnQ2FDRUVDeUFFQkVBZ0FDQUFLQUlFUVg5cU5nSUVDd0pBQWtBQ1FBSkFBa0FDUUFKQUFrQWdCMEVZZEVFWWRVSEJBR3NPT0FVSEJ3Y0ZCUVVIQndjSEJ3Y0hCd2NIQndjSEJ3Y0hBUWNIQUFjSEJ3Y0hCUWNBQXdVRkJRY0VCd2NIQndjQ0FRY0hBQWNEQndjQkJ3c2dERUVRY2tIekFFWUVRQ0FKUVg5QmdRSVFSUm9nQ1VFQU9nQUFJQXhCOHdCR0JFQWdDVUVBT2dBaElBbEJBRFlCQ2lBSlFRQTZBQTRMQlFKQUlBa2dBVUVCYWlJSExBQUFRZDRBUmlJRElnUkJnUUlRUlJvZ0NVRUFPZ0FBQWtBQ1FBSkFJQUZCQW1vZ0J5QURHeUlCTEFBQVFTMXJJZ01FUUNBRFFUQkdCRUFNQWdVTUF3c0FDeUFKSUFSQkFYTWlDRG9BTGlBQlFRRnFJUUVNQWdzZ0NTQUVRUUZ6SWdnNkFGNGdBVUVCYWlFQkRBRUxJQVJCQVhNaENBc0RRQUpBQWtBZ0FTd0FBQ0lFRGw0VEFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQUFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRURBUXNnQVVFQmFpSURMQUFBSWdRaUIwRUFJQWRCM1FCSEcwVUVRRUV0SVFRTUFRc2dBVUYvYWkwQUFDSUJJQVJCL3dGeFNBUi9BMzhnQVVFQmFpSUJJQWxxSUFnNkFBQWdBU0FETEFBQUlnZEIvd0Z4U1EwQUlBTWhBU0FIQ3dVZ0F5RUJJQVFMSVFRTElBUkIvd0Z4UVFGcUlBbHFJQWc2QUFBZ0FVRUJhaUVCREFBQUN3QUxDeUFSUVFGcVFSOGdERUhqQUVZaURCc2hCQ0FMUVFCSElSQWdEa0VCUmlJUkJFQWdFQVJBSUFSQkFuUVFSQ0lGUlFSQVFRQWhCa0VBSVFVTUVRc0ZJQW9oQlFzZ0RVRUFOZ0lBSUExQkFEWUNCRUVBSVFZRFFBSkFJQVZGSVFjRFFBTkFBa0FnQUNnQ0JDSURJQUFvQW1oSkJIOGdBQ0FEUVFGcU5nSUVJQU10QUFBRklBQVFWQXNpQTBFQmFpQUphaXdBQUVVTkF5QVRJQU02QUFBQ1FBSkFJQklnRTBFQklBMFExd0ZCZm1zT0FnRUFBZ3RCQUNFR0RCVUxEQUVMQ3lBSFJRUkFJQVpCQW5RZ0JXb2dFaWdDQURZQ0FDQUdRUUZxSVFZTElCQWdCQ0FHUm5GRkRRQUxJQVVnQkVFQmRFRUJjaUlFUVFKMEVPZ0JJZ01FUUNBRElRVU1BZ1ZCQUNFR0RCSUxBQXNMSUEwRWZ5QU5LQUlBUlFWQkFRc0VmeUFHSVFRZ0JTRURRUUFGUVFBaEJnd1FDeUVHQlFKQUlCQUVRQ0FFRUVRaUJrVUVRRUVBSVFaQkFDRUZEQklMUVFBaEJRTkFBMEFnQUNnQ0JDSURJQUFvQW1oSkJIOGdBQ0FEUVFGcU5nSUVJQU10QUFBRklBQVFWQXNpQTBFQmFpQUphaXdBQUVVRVFDQUZJUVJCQUNFRFFRQWhCUXdFQ3lBRklBWnFJQU02QUFBZ0JVRUJhaUlGSUFSSERRQUxJQVlnQkVFQmRFRUJjaUlFRU9nQklnTUVRQ0FESVFZTUFRVkJBQ0VGREJNTEFBQUxBQXNnQ2tVRVFBTkFJQUFvQWdRaUJTQUFLQUpvU1FSL0lBQWdCVUVCYWpZQ0JDQUZMUUFBQlNBQUVGUUxRUUZxSUFscUxBQUFEUUJCQUNFRVFRQWhCa0VBSVFOQkFDRUZEQUlBQ3dBTFFRQWhCQU4vSUFBb0FnUWlCU0FBS0FKb1NRUi9JQUFnQlVFQmFqWUNCQ0FGTFFBQUJTQUFFRlFMSWdWQkFXb2dDV29zQUFBRWZ5QUVJQXBxSUFVNkFBQWdCRUVCYWlFRURBRUZRUUFoQTBFQUlRVWdDZ3NMSVFZTEN5QUFLQUpvQkVBZ0FDQUFLQUlFUVg5cUlnZzJBZ1FGSUFBb0FnUWhDQXNnQUNrRGVDQUlJQUFvQWdocnJId2lGVkFnREVFQmN5QVZJQlpSY2tWeURRc2dFQVJBSUJFRVFDQUtJQU0yQWdBRklBb2dCallDQUFzTElBeEZCRUFnQXdSQUlBUkJBblFnQTJwQkFEWUNBQXNnQmtVRVFFRUFJUVlNQ0FzZ0JDQUdha0VBT2dBQUN3d0dDMEVRSVFRTUJBdEJDQ0VFREFNTFFRb2hCQXdDQzBFQUlRUU1BUXNnQUNBT1FRQVFrZ01oRnlBQUtRTjRRZ0FnQUNnQ0JDQUFLQUlJYTZ4OVVRMEdJQW9FUUFKQUFrQUNRQ0FPRGdNQUFRSUZDeUFLSUJlMk9BSUFEQVFMSUFvZ0Z6a0RBQXdEQ3lBS0lCYzVBd0FNQWdzTUFRc2dBQ0FFUVFCQ2Z4Q1RBeUVWSUFBcEEzaENBQ0FBS0FJRUlBQW9BZ2hyckgxUkRRVWdERUh3QUVZZ0NrRUFSM0VFUUNBS0lCVStBZ0FGSUFvZ0RpQVZFSlFEQ3dzZ0R5QUtRUUJIYWlFUElBQW9BZ1FnQUNnQ0NHdXNJQlFnQUNrRGVIeDhJUlFNQWdzTElBQkNBQkNDQVNBQUtBSUVJZ01nQUNnQ2FFa0VmeUFBSUFOQkFXbzJBZ1FnQXkwQUFBVWdBQkJVQ3lFRElBTWdBU0FIYWlJQkxRQUFSdzBFSUJSQ0FYd2hGQXNMSUFGQkFXb2lBU3dBQUNJTERRRU1CZ3NMREFNTElBQW9BbWdFUUNBQUlBQW9BZ1JCZjJvMkFnUUxJQU5CZjBvZ0QzSU5BMEVBSVFzTUFRc2dEMFVOQUF3QkMwRi9JUThMSUFzRVFDQUdFRGdnQlJBNEN3c0xJQWtrQmlBUEN3c0FJQUFnQVNBQ0VJd0ZDM2tCQlg4Z0FDZ0NCQ0VGSUFBb0FnZ2lCaUFCS0FJRVJnUi9JQUFvQWdBaEFBTi9JQUlnQlVnRWYwRUFJUU1nQVNnQ0FDRUVBMEFnQXlBR1NBUkFJQUFnQUNzREFDQUVLd01Bb1RrREFDQURRUUZxSVFNZ0JFRUlhaUVFSUFCQkNHb2hBQXdCQ3dzZ0FrRUJhaUVDREFFRlFRQUxDd1ZCZndzTEx3RUNmeUFBRUtzQ0lnRW9BZ0EyQWpnZ0FTZ0NBQ0lDQkVBZ0FpQUFOZ0kwQ3lBQklBQTJBZ0JCcU1VREVBNEw2d0lCQjM4akJpRURJd1pCTUdva0JpQURRUmhxSVFRZ0EwRUlhaUVGSUFOQktHb2hCa0g2L1FJZ0FTd0FBQkMvQVFSQVFaZ0pFRVFpQWdSQUlBSkJBRUdRQVJCRkdnSi9JQUZCS3hDL0FVVWhDQ0FCTEFBQUlRRWdDQXNFUUNBQ1FRaEJCQ0FCUWZJQVJoczJBZ0FMSUFGQjRRQkdCRUFnQXlBQU5nSUFJQU5CQXpZQ0JFSGRBU0FERUJraUFVR0FDSEZGQkVBZ0JTQUFOZ0lBSUFWQkJEWUNCQ0FGSUFGQmdBaHlOZ0lJUWQwQklBVVFHUm9MSUFJZ0FpZ0NBRUdBQVhJaUFUWUNBQVVnQWlnQ0FDRUJDeUFDSUFBMkFqd2dBaUFDUVpnQmFqWUNMQ0FDUVlBSU5nSXdJQUpCZnpvQVN5QUJRUWh4UlFSQUlBUWdBRFlDQUNBRVFaT29BVFlDQkNBRUlBWTJBZ2hCTmlBRUVETkZCRUFnQWtFS09nQkxDd3NnQWtFQ05nSWdJQUpCQVRZQ0pDQUNRUUUyQWlnZ0FrRUNOZ0lNUWVqRUF5Z0NBRVVFUUNBQ1FYODJBa3dMSUFJUWx3VUZRUUFoQWdzRlFhVEZBMEVjTmdJQUN5QURKQVlnQWd0d0FRSi9JQUJCS3hDL0FVVWhBU0FBTEFBQUlnSkI4Z0JIUVFJZ0FSc2lBU0FCUVlBQmNpQUFRZmdBRUw4QlJSc2lBU0FCUVlDQUlISWdBRUhsQUJDL0FVVWJJZ0FnQUVIQUFISWdBa0h5QUVZYklnQkJnQVJ5SUFBZ0FrSDNBRVliSWdCQmdBaHlJQUFnQWtIaEFFWWJDL2dCQWdaL0FYd2dBQ2dDQkNJSFFRRklJQUFvQWdnaUEwRUJTSElFZjBGL0JTQURJQUVvQWdSR0JIOERRQ0FDSUFOSEJFQWdBU2dDQUNBQ1FRTjBha1FBQUFBQUFBQUFBRGtEQUNBQ1FRRnFJUUlNQVFzTElBQW9BZ0FoQUFOQUlBVWdCMGNFUUVFQUlRWWdBU2dDQUNFRUlBQWhBZ05BSUFNZ0JrY0VRQ0FFSUFJckF3QWdCQ3NEQUtBNUF3QWdCa0VCYWlFR0lBUkJDR29oQkNBQ1FRaHFJUUlNQVFzTElBTkJBM1FnQUdvaEFDQUZRUUZxSVFVTUFRc0xJQWUzSVFoQkFDRUFBMzhnQUNBRFJnUi9RUUFGSUFFb0FnQWdBRUVEZEdvaUFpQUNLd01BSUFpak9RTUFJQUJCQVdvaEFBd0JDd3NGUVg4TEN3dnNBZ0VMZnlBQUtBSUlJQUFvQWdCQm90cnYxd1pxSWdZUXNRRWhCQ0FBS0FJTUlBWVFzUUVoQlNBQUtBSVFJQVlRc1FFaEF5QUVJQUZCQW5aSkJIOGdCU0FCSUFSQkFuUnJJZ2RKSUFNZ0IwbHhCSDhnQXlBRmNrRURjUVIvUVFBRkFuOGdCVUVDZGlFSkFuOGdBMEVDZGlFTlFRQWhCUU5BQWtBZ0NTQUZJQVJCQVhZaUIyb2lDMEVCZENJTWFpSURRUUowSUFCcUtBSUFJQVlRc1FFaENFRUFJQU5CQVdwQkFuUWdBR29vQWdBZ0JoQ3hBU0lESUFGSklBZ2dBU0FEYTBseFJRMERHa0VBSUFBZ0F5QUlhbW9zQUFBTkF4b2dBaUFBSUFOcUVMTUJJZ05GRFFBZ0EwRUFTQ0VEUVFBZ0JFRUJSZzBER2lBRklBc2dBeHNoQlNBSElBUWdCMnNnQXhzaEJBd0JDd3NnRFNBTWFpSUNRUUowSUFCcUtBSUFDeUFHRUxFQklRUWdBa0VCYWtFQ2RDQUFhaWdDQUNBR0VMRUJJZ0lnQVVrZ0JDQUJJQUpyU1hFRWYwRUFJQUFnQW1vZ0FDQUNJQVJxYWl3QUFCc0ZRUUFMQ3dzRlFRQUxCVUVBQ3dzK0FRRi9JQUFvQWtRRVFDQUFLQUtFQVNJQkJFQWdBU0FBS0FLQUFUWUNnQUVMSUFBb0FvQUJJZ0FFZnlBQVFZUUJhZ1ZCbElvQkN5QUJOZ0lBQ3d2cUFnSURmd0Y4SUFBb0FnUWlCaUFBS0FJSUlnVWdCaUFGU0JzaEJDQUdRUUpJSUFWQkFraHlCRUJCZnlFQUJTQUJLQUlJSUFWR0JFQWdBU2dDQkNBRVJnUkFJQUlvQWdRZ0JFWUVRQ0FES0FJRUlBVkdCRUFnQUJEZkJTSUVCRUFDUUNBRUlBTVFtZ1ZCQUVnRVFDQUVFRWxCZnlFQURBRUxJQVFnQXhDV0JVRUFTQVJBSUFRUVNVRi9JUUFNQVFzZ0JyZWZJUWNnQlNBR2JDRURRUUFoQUFOQUlBQWdBMGdFUUNBRUtBSUFJQUJCQTNScUlnVWdCU3NEQUNBSG96a0RBQ0FBUVFGcUlRQU1BUXNMSUFRZ0FTQUNFSkVGSVFBZ0JCQkpJQUlvQWdRaEEwUUFBQUFBQUFBQUFDRUhRUUFoQVFOQUlBRWdBMGdFUUNBSElBSW9BZ0FnQVVFRGRHb3JBd0NnSVFjZ0FVRUJhaUVCREFFTEMwRUFJUUVEUUNBQklBTklCRUFnQWlnQ0FDQUJRUU4wYWlJRUlBUXJBd0FnQjZNNUF3QWdBVUVCYWlFQkRBRUxDd3NGUVg4aEFBc0ZRWDhoQUFzRlFYOGhBQXNGUVg4aEFBc0ZRWDhoQUFzTElBQUxCQUJDQUF2aEFRRUVmeU1HSVFRakJrRWdhaVFHSUFRZ0FUWUNBQ0FFSUFJZ0FDZ0NNQ0lEUVFCSGF6WUNCQ0FFSUFBb0FpdzJBZ2dnQkNBRE5nSU1Ba0FDUUNBQUtBSThJQVJCQWlBRVFSQnFJZ01RTVJDc0FnUkFJQU5CZnpZQ0FFRi9JUUlNQVFVZ0F5Z0NBQ0lEUVFGSUJFQWdBeUVDREFJRklBTWdCQ2dDQkNJR1N3UkFJQUFnQUNnQ0xDSUZOZ0lFSUFBZ0JTQURJQVpyYWpZQ0NDQUFLQUl3QkVBZ0FDQUZRUUZxTmdJRUlBRWdBa0YvYW1vZ0JTd0FBRG9BQUFzRklBTWhBZ3NMQ3d3QkN5QUFJQUFvQWdBZ0FrRXdjVUVRYzNJMkFnQUxJQVFrQmlBQ0N3WUFRYVRGQXd0R0FnRi9BWDRqQmlFREl3WkJFR29rQmlBQUtBSThJQUduSUFGQ0lJaW5JQUpCL3dGeElBTVFIUkNzQWdSK0lBTkNmemNEQUVKL0JTQURLUU1BQ3lFRUlBTWtCaUFFQzdjQ0FRZC9Jd1loQmlNR1FTQnFKQVlnQmtFUWFpRUhJQVlpQXlBQUtBSWNJZ1EyQWdBZ0F5QUFLQUlVSUFScklnVTJBZ1FnQXlBQk5nSUlJQU1nQWpZQ0RFRUNJUVFnQWlBRmFpRUZJQU1oQVFKQUFrQURRQ0FBS0FJOElBRWdCQ0FIRURBUXJBSUVmeUFIUVg4MkFnQkJmd1VnQnlnQ0FBc2lBeUFGUndSQUlBTkJBRWdOQWlBQlFRaHFJQUVnQXlBQktBSUVJZ2hMSWdrYklnRWdBeUFJUVFBZ0NSdHJJZ2dnQVNnQ0FHbzJBZ0FnQVNBQktBSUVJQWhyTmdJRUlBUWdDVUVmZEVFZmRXb2hCQ0FGSUFOcklRVU1BUXNMSUFBZ0FDZ0NMQ0lCSUFBb0FqQnFOZ0lRSUFBZ0FUWUNIQ0FBSUFFMkFoUU1BUXNnQUVFQU5nSVFJQUJCQURZQ0hDQUFRUUEyQWhRZ0FDQUFLQUlBUVNCeU5nSUFJQVJCQWtZRWYwRUFCU0FDSUFFb0FnUnJDeUVDQ3lBR0pBWWdBZ3NPQUNBQUtBSThFQmhCLy84RGNRdW1BZ0VDZndKQUFrQWdBQ2dDRkNJQlFiTitha0VDVHcwQUlBQkJRR3NvQWdBTkFDQUFLQUtNQVNBQUtBSjBTUVJBSUFBb0FnQWlBVUhGQURZQ0ZDQUJLQUlBSVFFZ0FDQUJRZjhCY1VHc0Eyb1JBUUFMSUFBb0Fyd0RLQUlFSVFFZ0FDQUJRZjhCY1VHc0Eyb1JBUUFnQUVIU0FUWUNGQXdCQ3dKQUFrQWdBVUhQQVdzT0JBQUJBUUlCQ3lBQVFkSUJOZ0lVREFFTElBQW9BZ0FpQWtFVk5nSVVJQUlnQVRZQ0dDQUFLQUlBS0FJQUlRRWdBQ0FCUWY4QmNVR3NBMm9SQVFBTElBQW9Bc3dESWdFb0FoUkZCRUFDUUFOQUFrQWdBU2dDQUNFQklBQWdBVUgvQUhGQkNHb1JBQUJGRFFBZ0FDZ0N6QU1pQVNnQ0ZFVU5BUXdDQ3d0QkFBOExDeUFBS0FJWUtBSVlJUUVnQUNBQlFmOEJjVUdzQTJvUkFRQWdBQkNkQTBFQkMvMEdBUVIvQWtBQ1FBSkFBa0FDUUFKQUlBQW9BaFFpQVVISUFXc09Dd0FCQXdJQ0FnSUNBZ1FDQkFzZ0FFSE1BMm9pQVNnQ0FDZ0NCQ0VDSUFBZ0FrSC9BWEZCckFOcUVRRUFJQUFvQWhnb0FnZ2hBaUFBSUFKQi93RnhRYXdEYWhFQkFDQUFRY2tCTmdJVURBUUxJQUJCekFOcUlRRU1Bd3NnQUNnQ3pBTW9BZ0FoQVNBQUlBRkIvd0J4UVFocUVRQUFEd3RCQVE4TElBQW9BZ0FpQWtFVk5nSVVJQUlnQVRZQ0dDQUFLQUlBS0FJQUlRRWdBQ0FCUWY4QmNVR3NBMm9SQVFCQkFBOExJQUVvQWdBb0FnQWhBU0FBSUFGQi93QnhRUWhxRVFBQUlnRkJBVWNFUUNBQkR3c0NRQUpBQWtBQ1FBSkFJQUFvQWlRaUFVRUJhdzRFQUFNQkFnTUxJQUVoQWd3REN5QUFLQUxZQVNJREtBSUFJUUVnQXlnQ3NBRWlBa0VEUmlBQlFRRkdJZ1FnQXlnQ1dDSURRUUpHY1hFRWYwRURJUUpCQWdVZ0JDQURRU0pHY1NBQ1FTTkdjUVIvUVFjaEFrRUNCU0FCUWRJQVJpQURRY2NBUm5FZ0FrSENBRVp4Qkg5QkFpRUNRUUlGSUFGQjhnQkdJQU5CNXdCR2NTQUNRZUlBUm5FRWYwRUdJUUpCQWdVZ0FDZ0NuQUlFZjBFRElRSkJBZ1VnQUNnQ3FBSkZCRUFnQUNnQ0FDSUVJQUUyQWhnZ0JDQUROZ0ljSUFRZ0FqWUNJQ0FFUWZFQU5nSVVJQVFvQWdRaEFTQUFRUUVnQVVFL2NVR3lCV29SQXdCQkFpRUJRUU1oQWd3SUN3SkFBa0FDUUNBQUxBQ3NBaUlCRGdJQUFRSUxRUUloQVVFQ0lRSU1DUXRCQWlFQlFRTWhBZ3dJQ3lBQUtBSUFJZ0pCOUFBMkFoUWdBaUFCUWY4QmNUWUNHQ0FBS0FJQUtBSUVJUUVnQUVGL0lBRkJQM0ZCc2dWcUVRTUFRUUloQVVFRElRSU1Cd3NMQ3dzTElRRU1BZ3NnQUNnQ3FBSUVmd0pBQWtBQ1FDQUFMQUNzQWlJQkRnTUFBZ0VDQzBFRUlRRkJCQ0VDREFRTFFRUWhBVUVGSVFJTUF3c2dBQ2dDQUNJQ1FmUUFOZ0lVSUFJZ0FVSC9BWEUyQWhnZ0FDZ0NBQ2dDQkNFQklBQkJmeUFCUVQ5eFFiSUZhaEVEQUVFRUlRRkJCU0VDREFJRlFRUWhBa0VFQ3lFQkRBRUxRUUFoQVVFQUlRSUxJQUFnQWpZQ0tDQUFJQUUyQWl3Z0FDQUFLQUtzQXlJQk5nSXdJQUFnQVRZQ05DQUFSQUFBQUFBQUFQQS9PUU00SUFCQlFHdEJBRFlDQUNBQVFRQTJBa1FnQUVFQU5nSklJQUJCQVRZQ1RDQUFRUUUyQWxBZ0FFRUFOZ0pVSUFCQkFqWUNXQ0FBUVFFMkFsd2dBRUdBQWpZQ1lDQUFRUUEyQW9nQklBQkJBRFlDWkNBQVFRQTJBbWdnQUVFQU5nSnNJQUJCeWdFMkFoUkJBUXVOQVFFQ2Z5QUFLQUlVSWdKQmZuRkJ5QUZIQkVBZ0FDZ0NBQ0lEUVJVMkFoUWdBeUFDTmdJWUlBQW9BZ0FvQWdBaEFpQUFJQUpCL3dGeFFhd0RhaEVCQUFzQ1FBSkFBa0FnQUJDbEJTSUNRUUZyRGdJQUFRSUxRUUVQQ3lBQkJFQWdBQ2dDQUNJQlFUVTJBaFFnQVNnQ0FDRUJJQUFnQVVIL0FYRkJyQU5xRVFFQUN5QUFFSjBEUVFJUEN5QUNDd2NBSUFBUW5nTUxud0lCQW44Z0FFRUFOZ0lFSUFGQjJnQkhCRUFnQUNnQ0FDSURRUTAyQWhRZ0EwSGFBRFlDR0NBQUtBSUFJQUUyQWh3Z0FDZ0NBQ2dDQUNFQklBQWdBVUgvQVhGQnJBTnFFUUVBQ3lBQ1FlZ0RSd1JBSUFBb0FnQWlBVUVXTmdJVUlBRkI2QU0yQWhnZ0FDZ0NBQ0FDTmdJY0lBQW9BZ0FvQWdBaEFTQUFJQUZCL3dGeFFhd0RhaEVCQUFzQ2Z5QUFJUVFnQUNnQ0FDRUNJQUFvQWd3aEF5QUFRUVJxUVFCQjVBTVFSUm9nQUNBQ05nSUFJQUFnQXpZQ0RDQUFRUUUyQWhBZ0JBc1F3Z1VnQUVFQU5nSUlJQUJCQURZQ0dDQUFRUUEyQXJnQ0lBQkNBRGNDcEFFZ0FFSUFOd0tzQVNBQVFnQTNBclFCSUFCQ0FEY0N2QUVnQUVJQU53TEVBU0FBUWdBM0Fzd0JJQUFRdUFVZ0FCQ1FCaUFBUWNnQk5nSVVDeFVBSUFBb0FnQWlBRUVBTmdKc0lBQkJBRFlDRkF2cEFnRUtmeU1HSVFZakJrRXdhaVFHSUFaQkNHb2hCQUpBQWtBQ2Z5QUFLQUlBSWdJb0FoUWlBMEVBU2dSQUlBTWdBaWdDZEV3RVFDQUNLQUp3SUFOQkFuUnFEQUlMQ3lBQ0tBSjRJZ1ZGRFFFZ0F5QUNLQUo4SWdCSURRRWdBeUFDS0FLQUFVb05BU0FESUFCclFRSjBJQVZxQ3lnQ0FDSUZSUTBBREFFTElBSWdBellDR0NBQ0tBSndLQUlBSVFVTElBVWhBQUpBQWtBRFFBSkFJQUJCQVdvaEF3SkFJQUFzQUFBaUFBUkFJQUJCSlVZRVFBd0ZCUXdDQ3dBTERBRUxJQU1oQUF3QkN3c01BUXNnQXl3QUFFSHpBRVlFUUNBR0lBSkJHR28yQWdBZ0FTQUZJQVlRdkFFZ0JpUUdEd3NMSUFJb0Fod2hCeUFDS0FJZ0lRZ2dBaWdDSkNFSklBSW9BaWdoQ2lBQ0tBSXNJUXNnQWlnQ01DRURJQUlvQWpRaEFDQUVJQUlvQWhnMkFnQWdCQ0FITmdJRUlBUWdDRFlDQ0NBRUlBazJBZ3dnQkNBS05nSVFJQVFnQ3pZQ0ZDQUVJQU0yQWhnZ0JDQUFOZ0ljSUFFZ0JTQUVFTHdCSUFZa0JndE9BUU4vSXdZaEFTTUdRZEFCYWlRR0lBQW9BZ0FvQWd3aEFpQUFJQUVnQWtFL2NVR3lCV29SQXdBQ2YwR2tpQUVvQWdBaEF5QUJRY2dCYWlJQ0lBRTJBZ0FnQXdzZ0FoQ0xCU0FCSkFZTGVRRUJmeUFBS0FJQUlRSWdBVUVBVGdSQUlBSW9BbWdnQVVnRVFBOExJQUlvQWdnaEFTQUFJQUZCL3dGeFFhd0RhaEVCQUE4TEFrQUNRQ0FDS0FKc0lnRkZEUUFnQWlnQ2FFRUNTZzBBREFFTElBSW9BZ2doQVNBQUlBRkIvd0Z4UWF3RGFoRUJBQ0FDS0FKc0lRRUxJQUlnQVVFQmFqWUNiQXNtQVFGL0lBQW9BZ0FvQWdnaEFTQUFJQUZCL3dGeFFhd0RhaEVCQUNBQUVKNERRUUVRQVF0bEFDQUFRWXdCTmdJQUlBQkJOVFlDQkNBQVFZMEJOZ0lJSUFCQk5qWUNEQ0FBUVk0Qk5nSVFJQUJCQURZQ2FDQUFRUUEyQW13Z0FFRUFOZ0lVSUFCQmdCZzJBbkFnQUVIK0FEWUNkQ0FBUVFBMkFuZ2dBRUVBTmdKOElBQkJBRFlDZ0FFZ0FBc3JBUUYvSUFBb0FnUW9BZ0FoQVNBQVFRQkJoQUVnQVVFL2NVSEtBV29SQkFBaUFFRUFOZ0tBQVNBQUN5c0JBWDhnQUNnQ0JDZ0NBQ0VCSUFCQkFFR1lBaUFCUVQ5eFFjb0JhaEVFQUNJQVFRQTJBcFFDSUFBTHR3WUJCbjhnQWlBRGFpRUVBa0FDUUFKQUFrQWdBa0VOU3dSQUlBRXNBQUJCeWdCR0JFQWdBU3dBQVVIR0FFY05BaUFCTEFBQ1Fja0FSdzBDSUFFc0FBTkJ4Z0JIRFFJZ0FTd0FCQTBDSUFCQkFUWUNuQUlnQUNBQkxBQUZJZ2M2QUtBQ0lBQWdBU3dBQmlJSU9nQ2hBaUFBSUFFc0FBY2lDVG9Bb2dJZ0FDQUJMUUFKSUFFdEFBaEJDSFJ5SWdZN0FhUUNJQUFnQVMwQUN5QUJMUUFLUVFoMGNpSURPd0dtQWlBSFFYOXFRUmgwUVJoMVFmOEJjVUVDVGdSQUlBQW9BZ0FpQWtINkFEWUNGQ0FDSUFkQi93RnhOZ0lZSUFBb0FnQWdBQzBBb1FJMkFod2dBQ2dDQUNnQ0JDRUNJQUJCZnlBQ1FUOXhRYklGYWhFREFDQUFMQUNnQWlFSElBQXNBS0VDSVFnZ0FDNEJwQUloQmlBQUxnR21BaUVESUFBc0FLSUNJUWtMSUFBaEFpQUFLQUlBSWdVZ0IwSC9BWEUyQWhnZ0JTQUlRZjhCY1RZQ0hDQUZJQVpCLy84RGNUWUNJQ0FGSUFOQi8vOERjVFlDSkNBRklBbEIvd0Z4TmdJb0lBVkIyUUEyQWhRZ0JTZ0NCQ0VESUFKQkFTQURRVDl4UWJJRmFoRURBQ0FCTEFBTUlnWWdBU3dBRFNJRGNrSC9BWEVFUUNBQUtBSUFJZ05CM0FBMkFoUWdBeUFCTFFBTU5nSVlJQUFvQWdBZ0FTMEFEVFlDSENBQUtBSUFLQUlFSVFNZ0FrRUJJQU5CUDNGQnNnVnFFUU1BSUFFc0FBd2hCaUFCTEFBTklRTUxJQVpCL3dGeFFRTnNJQU5CL3dGeGJDQUVRWEpxSWdOR0JFQVBDeUFBS0FJQUlnRkIyZ0EyQWhRZ0FTQUROZ0lZSUFBb0FnQW9BZ1FoQUNBQ1FRRWdBRUUvY1VHeUJXb1JBd0FQQ3dVZ0FrRUZTd1JBSUFFc0FBQkJ5Z0JHRFFJTEN3d0JDeUFCTEFBQlFjWUFSZ1JBSUFFc0FBSkIyQUJHQkVBZ0FTd0FBMEhZQUVZRVFDQUJMQUFFUlFSQUFrQUNRQUpBQWtBZ0FTd0FCVUVRYXc0RUFBRURBZ01MSUFBb0FnQWlBVUh1QURZQ0ZBd0lDeUFBS0FJQUlnRkI3d0EyQWhRTUJ3c2dBQ2dDQUNJQlFmQUFOZ0lVREFZTElBQW9BZ0FpQWtIYkFEWUNGQ0FDSUFFdEFBVTJBaGdnQUNnQ0FDQUVOZ0ljREFZTEN3c0xDeUFBS0FJQUlnRkJ6d0EyQWhRZ0FTQUVOZ0lZSUFBb0FnQW9BZ1FoQVNBQVFRRWdBVUUvY1VHeUJXb1JBd0FQQ3lBQklBUTJBaGdMSUFBb0FnQW9BZ1FoQVNBQVFRRWdBVUUvY1VHeUJXb1JBd0FMeWdVQkNYOGpCaUVDSXdaQkVHb2tCZ0pBSUFBb0FoZ2lCQ2dDQkNJRFJRUkFJQVFvQWd3aEF5QUFJQU5CL3dCeFFRaHFFUUFBUlEwQklBUW9BZ1FoQXdzZ0JDZ0NBQ0lHUVFGcUlRRWdCaTBBQUNFRklBTkJmMm9pQTBVRVFDQUVLQUlNSVFNZ0FDQURRZjhBY1VFSWFoRUFBRVVOQVNBRUtBSUFJUUVnQkNnQ0JDRURDeUFEUVg5cUlRTWdBVUVCYWlFR1FRNGdBUzBBQUNBRlFmOEJjVUVJZEhJaUFVRithaUlIUVFBZ0FVRUNTeHNnQVVFUFN4c2lCUVJBQWtCQkFDRUJBMEFDUUNBRFJRUkFJQVFvQWd3aEF5QUFJQU5CL3dCeFFRaHFFUUFBUlEwQklBUW9BZ1FoQXlBRUtBSUFJUVlMSUFFZ0Ftb2dCaXdBQURvQUFDQURRWDlxSVFNZ0JrRUJhaUVHSUFGQkFXb2lBU0FGU1EwQkRBSUxDd3dDQ3dzZ0J5QUZheUVJQWtBQ1FBSkFJQUFvQXJnRElnRkI0QUZySWdrRVFDQUpRUTVHQkVBTUFnVU1Bd3NBQ3lBQUlBSWdCU0FJRUxFRkRBSUxJQUlzQUFCQndRQkdJQVZCQzB0eEJFQWdBaXdBQVVIa0FFWUVRQ0FDTEFBQ1FlOEFSZ1JBSUFJc0FBTkI0Z0JHQkVBZ0Fpd0FCRUhsQUVZRVFDQUNMUUFJSUFJdEFBZEJDSFJ5SVFjZ0FpMEFDaUFDTFFBSlFRaDBjaUVKSUFJc0FBc2hCU0FBS0FJQUlnRWdBaTBBQmlBQ0xRQUZRUWgwY2pZQ0dDQUJJQWMyQWh3Z0FTQUpOZ0lnSUFFZ0JVSC9BWEUyQWlRZ0FVSE9BRFlDRkNBQktBSUVJUUVnQUVFQklBRkJQM0ZCc2dWcUVRTUFJQUJCQVRZQ3FBSWdBQ0FGT2dDc0Fnd0dDd3NMQ3dzZ0FDZ0NBQ0lCUWRBQU5nSVVJQUVnQnpZQ0dDQUFLQUlBS0FJRUlRRWdBRUVCSUFGQlAzRkJzZ1ZxRVFNQURBRUxJQUFvQWdBaUJVSEdBRFlDRkNBRklBRTJBaGdnQUNnQ0FDZ0NBQ0VCSUFBZ0FVSC9BWEZCckFOcUVRRUFDeUFFSUFZMkFnQWdCQ0FETmdJRUlBaEJBRXdFUUNBQ0pBWkJBUThMSUFBb0FoZ29BaEFoQXlBQUlBZ2dBMEUvY1VHeUJXb1JBd0FnQWlRR1FRRVBDeUFDSkFaQkFBdU1BZ0VHZnlBQUtBSVlJZ0lvQWdRaUFVVUVRQ0FDS0FJTUlRRWdBQ0FCUWY4QWNVRUlhaEVBQUFSL0lBSW9BZ1FGUVFBUEN5RUJDeUFDS0FJQUlnTkJBV29oQkNBRExRQUFJUU1nQVVGL2FpSUJSUVJBSUFJb0Fnd2hBU0FBSUFGQi93QnhRUWhxRVFBQUJIOGdBaWdDQUNFRUlBSW9BZ1FGUVFBUEN5RUJDeUFFTFFBQUlBTkIvd0Z4UVFoMGNpSUdRWDVxSVFVZ0FDZ0NBQ0lEUWQwQU5nSVVJQU1nQUNnQ3VBTTJBaGdnQUNnQ0FDQUZOZ0ljSUFBb0FnQW9BZ1FoQXlBQVFRRWdBMEUvY1VHeUJXb1JBd0FnQWlBRVFRRnFOZ0lBSUFJZ0FVRi9hallDQkNBR1FRSk5CRUJCQVE4TElBQW9BaGdvQWhBaEFTQUFJQVVnQVVFL2NVR3lCV29SQXdCQkFRdUJBUUVHZnlBQUtBSUVJZ1VnQVNnQ0JFWUVmeUFBS0FJSUlnUWdBU2dDQ0VZRWZ3Ti9JQUlnQlVnRWZ5QUNJQVJzSVFaQkFDRURBMEFnQXlBRVNBUkFJQUFvQWdBZ0F5QUdhaUlIUVFOMGFpQUJLQUlBSUFkQkEzUnFLd01BT1FNQUlBTkJBV29oQXd3QkN3c2dBa0VCYWlFQ0RBRUZRUUFMQ3dWQmZ3c0ZRWDhMQzZrQkFRSi9JQUFvQXJnRElnRkZCRUFnQUJDeEFnUi9JQUFvQXJnREJVRUFEd3NoQVFzZ0FDZ0MwQU1vQWhRaUFrSFFBV29nQVVZRVFDQUFLQUlBSWdGQjVBQTJBaFFnQVNBQ05nSVlJQUFvQWdBb0FnUWhBU0FBUVFNZ0FVRS9jVUd5QldvUkF3QWdBRUVBTmdLNEF3VWdBQ2dDR0NnQ0ZDRUJJQUFnQWlBQlFUOXhRWW9CYWhFQ0FFVUVRRUVBRHdzTElBQW9BdEFESWdBZ0FDZ0NGRUVCYWtFSGNUWUNGRUVCQzZSVUFTbC9Jd1loS1NNR1FZQUNhaVFHSUNraENpQUFLQUs0QXlFQkEwQUNRQ0FCUlFSQUFuOGdBQ2dDMEFNb0Fnd0VRQ0FBRUxFQ1JRUkFRZDRDSVFFTUJBc2dBQ2dDdUFNTUFRc2dBQ2dDR0NJR0tBSUVJZ0ZGQkVBZ0JpZ0NEQ0VCSUFBZ0FVSC9BSEZCQ0dvUkFBQkZCRUJCM2dJaEFRd0VDeUFHS0FJRUlRRUxJQVlvQWdBaUJFRUJhaUVDSUFRc0FBQWhBeUFCUVg5cUlnUUVmeUFDQlNBR0tBSU1JUUVnQUNBQlFmOEFjVUVJYWhFQUFFVUVRRUhlQWlFQkRBUUxJQVlvQWdRaEJDQUdLQUlBQ3lFQklBTkIvd0Z4SVFVZ0FTd0FBQ0lIUWY4QmNTRUNJQU5CZjBjZ0IwRllSM0lFUUNBQUtBSUFJZ05CTnpZQ0ZDQURJQVUyQWhnZ0FDZ0NBQ0FDTmdJY0lBQW9BZ0FvQWdBaEF5QUFJQU5CL3dGeFFhd0RhaEVCQUFzZ0FDQUNOZ0s0QXlBR0lBRkJBV28yQWdBZ0JpQUVRWDlxTmdJRUlBSUxJUUVMQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FDQUJRUUZyRHY0QkVCSVNFaElTRWhJU0VoSVNFaElTRWhJU0VoSVNFaElTRWhJU0VoSVNFaElTRWhJU0VoSVNFaElTRWhJU0VoSVNFaElTRWhJU0VoSVNFaElTRWhJU0VoSVNFaElTRWhJU0VoSVNFaElTRWhJU0VoSVNFaElTRWhJU0VoSVNFaElTRWhJU0VoSVNFaElTRWhJU0VoSVNFaElTRWhJU0VoSVNFaElTRWhJU0VoSVNFaElTRWhJU0VoSVNFaElTRWhJU0VoSVNFaElTRWhJU0VoSVNFaElTRWhJU0VoSVNFaElTRWhJU0VoSVNFaElTRWhJU0VoSVNFaElTRWhJU0VoSURCQVVJQ2dnSUNBZ0dCd2dKQ0FnSUVCQVFFQkFRRUJBQ0FRQUxFUXdTRWc0T0RnNE9EZzRPRGc0T0RnNE9EZzRTRWhJU0VoSVNFZzBTRWhJU0VnOFNDMEVaSVFFTUV3dEJ5d0FoQVF3U0N5QUFLQUlBSWdGQjZBQTJBaFFnQVNnQ0JDRUJJQUJCQVNBQlFUOXhRYklGYWhFREFDQUFLQUxRQTBFTWFpSUJLQUlBQkVBZ0FDZ0NBQ0lCUWNBQU5nSVVJQUVvQWdBaEFTQUFJQUZCL3dGeFFhd0RhaEVCQUNBQUtBTFFBMEVNYWlFQkN5QUFRZ0EzQU9nQklBQkNBRGNBOEFFZ0FFS0Jnb1NJa0tEQWdBRTNBUGdCSUFCQ2dZS0VpSkNnd0lBQk53Q0FBaUFBUW9XS2xLalFvTUdDQlRjQWlBSWdBRUtGaXBTbzBLREJnZ1UzQUpBQ0lBQkJBRFlDbUFJZ0FFRUFOZ0lvSUFCQkFEWUNzQUlnQUVFQU5nSzBBaUFBUVFBMkFwd0NJQUJCQVRvQW9BSWdBRUVCT2dDaEFpQUFRUUE2QUtJQ0lBQkJBVHNCcEFJZ0FFRUJPd0dtQWlBQVFRQTJBcWdDSUFCQkFEb0FyQUlnQVVFQk5nSUFEQkFMSUFCQkFVRUFRUUFRMkFGRkJFQkIzZ0loQVF3UkN3d1BDeUFBUVFCQkFFRUFFTmdCUlFSQVFkNENJUUVNRUFzTURnc2dBRUVBUVFGQkFCRFlBVVVFUUVIZUFpRUJEQThMREEwTElBQkJBRUVBUVFFUTJBRkZCRUJCM2dJaEFRd09Dd3dNQ3lBQVFRQkJBVUVCRU5nQlJRUkFRZDRDSVFFTURRc01Dd3NnQUNnQ0FDSUNRVDgyQWhRZ0FpQUJOZ0lZSUFBb0FnQW9BZ0FoQVNBQUlBRkIvd0Z4UWF3RGFoRUJBQXdLQ3lBQUtBSVlJZ01vQWdRaUFVVUVRQ0FES0FJTUlRRWdBQ0FCUWY4QWNVRUlhaEVBQUVVRVFFSGVBaUVCREF3TElBTW9BZ1FoQVFzZ0F5Z0NBQ0lFUVFGcUlRSWdCQzBBQUNFRUlBRkJmMm9pQVVVRVFDQURLQUlNSVFFZ0FDQUJRZjhBY1VFSWFoRUFBRVVFUUVIZUFpRUJEQXdMSUFNb0FnUWhBU0FES0FJQUlRSUxJQUl0QUFBZ0JFSC9BWEZCQ0hSeUlnWkJmbW9oQkNBQlFYOXFJUUVnQWtFQmFpRUNJQVpCQWtzRVFBTi9JQUZGQkVBZ0F5Z0NEQ0VCSUFBZ0FVSC9BSEZCQ0dvUkFBQkZCRUJCM2dJaEFRd09DeUFES0FJRUlRRWdBeWdDQUNFQ0N5QUNRUUZxSVFZZ0FpMEFBQ0VGSUFGQmYyb2lBa1VFUUNBREtBSU1JUUVnQUNBQlFmOEFjVUVJYWhFQUFFVUVRRUhlQWlFQkRBNExJQU1vQWdRaEFpQURLQUlBSVFZTElBWXNBQUFpQ1VIL0FYRWhCeUFBS0FJQUlnRkIwUUEyQWhRZ0FTQUZRZjhCY1NJQk5nSVlJQUFvQWdBZ0J6WUNIQ0FBS0FJQUtBSUVJUWdnQUVFQklBaEJQM0ZCc2dWcUVRTUFBa0FDUUNBRlFmOEJjVUVmU2dSQUlBQW9BZ0FpQlVFZE5nSVVJQVVnQVRZQ0dDQUFLQUlBS0FJQUlRVWdBQ0FGUWY4QmNVR3NBMm9SQVFBTUFRVWdCVUgvQVhGQkQwb05BU0FCSUFCQjZBRnFhaUFIUVE5eElnVTZBQUFnQVNBQVFmZ0JhbW9nQ1VIL0FYRkJCSFlpQVRvQUFDQUZJQUZMQkVBZ0FDZ0NBQ0lCUVI0MkFoUWdBU0FITmdJWUlBQW9BZ0FvQWdBaEFTQUFJQUZCL3dGeFFhd0RhaEVCQUFzTERBRUxJQUFnQVdwQitBRnFJQWs2QUFBTElBUkJmbW9oQVNBQ1FYOXFJUUlnQmtFQmFpRUdJQVJCQWtvRWZ5QUJJUVFnQWlFQklBWWhBZ3dCQlNBQklRUWdBaUVCSUFZTEN5RUNDeUFFQkVBZ0FDZ0NBQ0lFUVF3MkFoUWdCQ2dDQUNFRUlBQWdCRUgvQVhGQnJBTnFFUUVBQ3lBRElBSTJBZ0FnQXlBQk5nSUVEQWtMSUFBb0FoZ2lCU2dDQkNJQlJRUkFJQVVvQWd3aEFTQUFJQUZCL3dCeFFRaHFFUUFBUlFSQVFhNEJJUUVNQ3dzZ0JTZ0NCQ0VCQ3lBRktBSUFJZ0pCQVdvaEJDQUNMUUFBSVFZZ0FVRi9haUlCUlFSQUlBVW9BZ3doQVNBQUlBRkIvd0J4UVFocUVRQUFSUVJBUWE0QklRRU1Dd3NnQlNnQ0JDRUJJQVVvQWdBaEJBc2dBVUYvYWlFQklBUkJBV29oQWlBRUxRQUFJQVpCL3dGeFFRaDBjaUlHUVg1cUlRUWdCa0VTU3dSQUEwQWdBVVVFUUNBRktBSU1JUUVnQUNBQlFmOEFjVUVJYWhFQUFFVUVRRUd1QVNFQkRBMExJQVVvQWdRaEFTQUZLQUlBSVFJTElBSXRBQUFoQnlBQUtBSUFJZ1pCMGdBMkFoUWdCaUFITmdJWUlBQW9BZ0FvQWdRaEJpQUFRUUVnQmtFL2NVR3lCV29SQXdBZ0FrRUJhaUVHSUFGQmYyb2lBZ1IvSUFZRklBVW9BZ3doQVNBQUlBRkIvd0J4UVFocUVRQUFSUVJBUWE0QklRRU1EUXNnQlNnQ0JDRUNJQVVvQWdBTElnRXNBQUFoQ1NBQlFRRnFJUUVnQWtGL2FpSUNSUVJBSUFVb0Fnd2hBU0FBSUFGQi93QnhRUWhxRVFBQVJRUkFRYTRCSVFFTURRc2dCU2dDQkNFQ0lBVW9BZ0FoQVFzZ0FTd0FBQ0VJSUFGQkFXb2hBU0FDUVg5cUlnSkZCRUFnQlNnQ0RDRUJJQUFnQVVIL0FIRkJDR29SQUFCRkJFQkJyZ0VoQVF3TkN5QUZLQUlFSVFJZ0JTZ0NBQ0VCQ3lBQkxBQUFJUXNnQVVFQmFpRUJJQUpCZjJvaUFrVUVRQ0FGS0FJTUlRRWdBQ0FCUWY4QWNVRUlhaEVBQUVVRVFFR3VBU0VCREEwTElBVW9BZ1FoQWlBRktBSUFJUUVMSUFFc0FBQWhEU0FCUVFGcUlRRWdBa0YvYWlJQ1JRUkFJQVVvQWd3aEFTQUFJQUZCL3dCeFFRaHFFUUFBUlFSQVFhNEJJUUVNRFFzZ0JTZ0NCQ0VDSUFVb0FnQWhBUXNnQVN3QUFDRVFJQUZCQVdvaEFTQUNRWDlxSWdKRkJFQWdCU2dDRENFQklBQWdBVUgvQUhGQkNHb1JBQUJGQkVCQnJnRWhBUXdOQ3lBRktBSUVJUUlnQlNnQ0FDRUJDeUFCTEFBQUlSRWdBVUVCYWlFQklBSkJmMm9pQWtVRVFDQUZLQUlNSVFFZ0FDQUJRZjhBY1VFSWFoRUFBRVVFUUVHdUFTRUJEQTBMSUFVb0FnUWhBaUFGS0FJQUlRRUxJQUVzQUFBaEVpQUJRUUZxSVFFZ0FrRi9haUlDUlFSQUlBVW9BZ3doQVNBQUlBRkIvd0J4UVFocUVRQUFSUVJBUWE0QklRRU1EUXNnQlNnQ0JDRUNJQVVvQWdBaEFRc2dBU3dBQUNFVElBRkJBV29oQVNBQ1FYOXFJZ0pGQkVBZ0JTZ0NEQ0VCSUFBZ0FVSC9BSEZCQ0dvUkFBQkZCRUJCcmdFaEFRd05DeUFGS0FJRUlRSWdCU2dDQUNFQkN5QUJMQUFBSVJRZ0FVRUJhaUVCSUFKQmYyb2lBa1VFUUNBRktBSU1JUUVnQUNBQlFmOEFjVUVJYWhFQUFFVUVRRUd1QVNFQkRBMExJQVVvQWdRaEFpQUZLQUlBSVFFTElBRXNBQUFoRlNBQlFRRnFJUUVnQWtGL2FpSUNSUVJBSUFVb0Fnd2hBU0FBSUFGQi93QnhRUWhxRVFBQVJRUkFRYTRCSVFFTURRc2dCU2dDQkNFQ0lBVW9BZ0FoQVFzZ0FTd0FBQ0VXSUFGQkFXb2hBU0FDUVg5cUlnSkZCRUFnQlNnQ0RDRUJJQUFnQVVIL0FIRkJDR29SQUFCRkJFQkJyZ0VoQVF3TkN5QUZLQUlFSVFJZ0JTZ0NBQ0VCQ3lBQkxBQUFJUmNnQVVFQmFpRUJJQUpCZjJvaUFrVUVRQ0FGS0FJTUlRRWdBQ0FCUWY4QWNVRUlhaEVBQUVVRVFFR3VBU0VCREEwTElBVW9BZ1FoQWlBRktBSUFJUUVMSUFFc0FBQWhHQ0FCUVFGcUlRRWdBa0YvYWlJQ1JRUkFJQVVvQWd3aEFTQUFJQUZCL3dCeFFRaHFFUUFBUlFSQVFhNEJJUUVNRFFzZ0JTZ0NCQ0VDSUFVb0FnQWhBUXNnQVN3QUFDRVpJQUZCQVdvaEFTQUNRWDlxSWdKRkJFQWdCU2dDRENFQklBQWdBVUgvQUhGQkNHb1JBQUJGQkVCQnJnRWhBUXdOQ3lBRktBSUVJUUlnQlNnQ0FDRUJDeUFCTEFBQUlSb2dBVUVCYWlFR0lBSkJmMm9pQVFSL0lBWUZJQVVvQWd3aEFTQUFJQUZCL3dCeFFRaHFFUUFBUlFSQVFhNEJJUUVNRFFzZ0JTZ0NCQ0VCSUFVb0FnQUxJUUlnQWl3QUFDSW5RZjhCY1NJb0lCcEIvd0Z4SWlZZ0dVSC9BWEVpSlNBWVFmOEJjU0lrSUJkQi93RnhJaU1nRmtIL0FYRWlJaUFWUWY4QmNTSWhJQlJCL3dGeElpQWdFMEgvQVhFaUh5QVNRZjhCY1NJZUlCRkIvd0Z4SWgwZ0VFSC9BWEVpSENBTlFmOEJjU0liSUF0Qi93RnhJZzhnQ1VIL0FYRWlEaUFJUWY4QmNTSU1hbXBxYW1wcWFtcHFhbXBxYW1wcUlRWWdBQ2dDQUNJRElBNDJBaGdnQXlBTU5nSWNJQU1nRHpZQ0lDQURJQnMyQWlRZ0F5QWNOZ0lvSUFNZ0hUWUNMQ0FESUI0MkFqQWdBeUFmTmdJMElBTkIyQUEyQWhRZ0F5Z0NCQ0VESUFCQkFpQURRVDl4UWJJRmFoRURBQ0FBS0FJQUlnTWdJRFlDR0NBRElDRTJBaHdnQXlBaU5nSWdJQU1nSXpZQ0pDQURJQ1EyQWlnZ0F5QWxOZ0lzSUFNZ0pqWUNNQ0FESUNnMkFqUWdBMEhZQURZQ0ZDQURLQUlFSVFNZ0FFRUNJQU5CUDNGQnNnVnFFUU1BSUFSQmIyb2lEaUFHU0NBR1FZQUNTM0lFUUNBQUtBSUFJZ1JCQ1RZQ0ZDQUVLQUlBSVFRZ0FDQUVRZjhCY1VHc0Eyb1JBUUFMSUFGQmYyb2hBU0FDUVFGcUlRSWdDa0VBUVlBQ0VFVWFJQVlFUUVFQUlRUURRQ0FCQkg4Z0FnVWdCU2dDRENFQklBQWdBVUgvQUhGQkNHb1JBQUJGQkVCQnJnRWhBUXdQQ3lBRktBSUVJUUVnQlNnQ0FBc2hBeUFCUVg5cUlRRWdBMEVCYWlFQ0lBUWdDbW9nQXl3QUFEb0FBQ0FFUVFGcUlnUWdCa2tOQUFzRlFRQWhCZ3NnQnlBSFFYQnFJZ1FnQjBFUWNVVWlBeHNpREVFRFN3UkFJQUFvQWdBaUQwRWZOZ0lVSUE4Z0REWUNHQ0FBS0FJQUtBSUFJUXdnQUNBTVFmOEJjVUdzQTJvUkFRQUxJQUJCdEFGcUlBZEJBblJxSUFCQnhBRnFJQVJCQW5ScUlBTWJJZ01vQWdBaUJFVUVRQ0FESUFBUXNBVWlCRFlDQUFzZ0JFRUFPZ0FBSUFRZ0NUb0FBU0FFSUFnNkFBSWdCQ0FMT2dBRElBUWdEVG9BQkNBRUlCQTZBQVVnQkNBUk9nQUdJQVFnRWpvQUJ5QUVJQk02QUFnZ0JDQVVPZ0FKSUFRZ0ZUb0FDaUFFSUJZNkFBc2dCQ0FYT2dBTUlBUWdHRG9BRFNBRUlCazZBQTRnQkNBYU9nQVBJQVFnSnpvQUVDQURLQUlBUVJGcUlBcEJnQUlRVEJvZ0RpQUdheUlFUVJCS0RRQUxDeUFFQkVBZ0FDZ0NBQ0lFUVF3MkFoUWdCQ2dDQUNFRUlBQWdCRUgvQVhGQnJBTnFFUUVBQ3lBRklBSTJBZ0FnQlNBQk5nSUVEQWdMSUFBb0FoZ2lDQ2dDQkNJQlJRUkFJQWdvQWd3aEFTQUFJQUZCL3dCeFFRaHFFUUFBUlFSQVFkNENJUUVNQ2dzZ0NDZ0NCQ0VCQ3lBSUtBSUFJZ0pCQVdvaEJDQUNMUUFBSVFZZ0FVRi9haUlCUlFSQUlBZ29BZ3doQVNBQUlBRkIvd0J4UVFocUVRQUFSUVJBUWQ0Q0lRRU1DZ3NnQ0NnQ0JDRUJJQWdvQWdBaEJBc2dBVUYvYWlFQklBUkJBV29oQWlBRUxRQUFJQVpCL3dGeFFRaDBjaUlHUVg1cUlRUWdCa0VDU3dSQUEwQWdBUVIvSUFFaEJTQUNCU0FJS0FJTUlRRWdBQ0FCUWY4QWNVRUlhaEVBQUVVRVFFSGVBaUVCREF3TElBZ29BZ1FoQlNBSUtBSUFDeUlHTFFBQUlnRkJCSFloQWlBQUtBSUFJZ05CMHdBMkFoUWdBeUFCUVE5eElnRTJBaGdnQUNnQ0FDQUNOZ0ljSUFBb0FnQW9BZ1FoQXlBQVFRRWdBMEUvY1VHeUJXb1JBd0FnQVVFRFN3UkFJQUFvQWdBaUEwRWdOZ0lVSUFNZ0FUWUNHQ0FBS0FJQUtBSUFJUU1nQUNBRFFmOEJjVUdzQTJvUkFRQUxJQUJCcEFGcUlBRkJBblJxSWdFb0FnQWlBMFVFUUNBQklBQVFyd1VpQXpZQ0FBc2dCRUYvYWlFSkFuOENmd0pBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQ0FDUVFCSElnc0VmeUFFUVlFQlRnMEpJQU5CQVRzQkFDQURRUUU3QVFJZ0EwRUJPd0VFSUFOQkFUc0JCaUFEUVFFN0FRZ2dBMEVCT3dFS0lBTkJBVHNCRENBRFFRRTdBUTRnQTBFQk93RVFJQU5CQVRzQkVpQURRUUU3QVJRZ0EwRUJPd0VXSUFOQkFUc0JHQ0FEUVFFN0FSb2dBMEVCT3dFY0lBTkJBVHNCSGlBRFFRRTdBU0FnQTBFQk93RWlJQU5CQVRzQkpDQURRUUU3QVNZZ0EwRUJPd0VvSUFOQkFUc0JLaUFEUVFFN0FTd2dBMEVCT3dFdUlBTkJBVHNCTUNBRFFRRTdBVElnQTBFQk93RTBJQU5CQVRzQk5pQURRUUU3QVRnZ0EwRUJPd0U2SUFOQkFUc0JQQ0FEUVFFN0FUNGdBMEZBYTBFQk93RUFJQU5CQVRzQlFpQURRUUU3QVVRZ0EwRUJPd0ZHSUFOQkFUc0JTQ0FEUVFFN0FVb2dBMEVCT3dGTUlBTkJBVHNCVGlBRFFRRTdBVkFnQTBFQk93RlNJQU5CQVRzQlZDQURRUUU3QVZZZ0EwRUJPd0ZZSUFOQkFUc0JXaUFEUVFFN0FWd2dBMEVCT3dGZUlBTkJBVHNCWUNBRFFRRTdBV0lnQTBFQk93RmtJQU5CQVRzQlppQURRUUU3QVdnZ0EwRUJPd0ZxSUFOQkFUc0JiQ0FEUVFFN0FXNGdBMEVCT3dGd0lBTkJBVHNCY2lBRFFRRTdBWFFnQTBFQk93RjJJQU5CQVRzQmVDQURRUUU3QVhvZ0EwRUJPd0Y4SUFOQkFUc0JmaUFKUVFGMUJTQUVRY0VBVGcwSklBTkJBVHNCQUNBRFFRRTdBUUlnQTBFQk93RUVJQU5CQVRzQkJpQURRUUU3QVFnZ0EwRUJPd0VLSUFOQkFUc0JEQ0FEUVFFN0FRNGdBMEVCT3dFUUlBTkJBVHNCRWlBRFFRRTdBUlFnQTBFQk93RVdJQU5CQVRzQkdDQURRUUU3QVJvZ0EwRUJPd0VjSUFOQkFUc0JIaUFEUVFFN0FTQWdBMEVCT3dFaUlBTkJBVHNCSkNBRFFRRTdBU1lnQTBFQk93RW9JQU5CQVRzQktpQURRUUU3QVN3Z0EwRUJPd0V1SUFOQkFUc0JNQ0FEUVFFN0FUSWdBMEVCT3dFMElBTkJBVHNCTmlBRFFRRTdBVGdnQTBFQk93RTZJQU5CQVRzQlBDQURRUUU3QVQ0Z0EwRkFhMEVCT3dFQUlBTkJBVHNCUWlBRFFRRTdBVVFnQTBFQk93RkdJQU5CQVRzQlNDQURRUUU3QVVvZ0EwRUJPd0ZNSUFOQkFUc0JUaUFEUVFFN0FWQWdBMEVCT3dGU0lBTkJBVHNCVkNBRFFRRTdBVllnQTBFQk93RllJQU5CQVRzQldpQURRUUU3QVZ3Z0EwRUJPd0ZlSUFOQkFUc0JZQ0FEUVFFN0FXSWdBMEVCT3dGa0lBTkJBVHNCWmlBRFFRRTdBV2dnQTBFQk93RnFJQU5CQVRzQmJDQURRUUU3QVc0Z0EwRUJPd0Z3SUFOQkFUc0JjaUFEUVFFN0FYUWdBMEVCT3dGMklBTkJBVHNCZUNBRFFRRTdBWG9nQTBFQk93RjhJQU5CQVRzQmZpQUpDeUlCUVFSckRpNEFCZ1lHQmdFR0JnWUdCZ1lDQmdZR0JnWUdCZ1lEQmdZR0JnWUdCZ1lHQmdRR0JnWUdCZ1lHQmdZR0JnWUZCZ3RCd0NVaEFnd0dDMEhRSkNFQ0RBVUxRZEFqSVFJTUJBdEJvQ0loQWd3REMwSFFJQ0VDREFJTFFjQWVJUUlNQVFzZ0JVRi9haUVDSUFaQkFXb2hCaUFCUVFCS0JFQkJnQndoQnlBR0RBTUZJQUVoQkNBQ0lRRWdCZ3dFQ3dBTElBSWhCeUFGUVg5cUlRSWdCa0VCYWd3QkMwR0FIQ0VIUWNBQUlRRWdCVUYvYWlFQ0lBWkJBV29MSVFRZ0MwVUVRRUVBSVFVRFFDQUNSUVJBSUFnb0Fnd2hBaUFBSUFKQi93QnhRUWhxRVFBQVJRUkFRZDRDSVFFTUR3c2dDQ2dDQkNFQ0lBZ29BZ0FoQkFzZ0JVRUNkQ0FIYWlnQ0FFRUJkQ0FEYWlBRUxRQUFPd0VBSUFKQmYyb2hBaUFFUVFGcUlRWWdCVUVCYWlJRklBRklCRUFnQmlFRURBRUZJQUVoQkNBQ0lRRWdCZ3dEQ3dBQUN3QUxRUUFoQlFOL0lBSkZCRUFnQ0NnQ0RDRUNJQUFnQWtIL0FIRkJDR29SQUFCRkJFQkIzZ0loQVF3T0N5QUlLQUlFSVFJZ0NDZ0NBQ0VFQ3lBRVFRRnFJUVlnQkMwQUFDRU5JQUpCZjJvaUFnUi9JQVlGSUFnb0Fnd2hBaUFBSUFKQi93QnhRUWhxRVFBQVJRUkFRZDRDSVFFTURnc2dDQ2dDQkNFQ0lBZ29BZ0FMSVFRZ0JVRUNkQ0FIYWlnQ0FFRUJkQ0FEYWlBRUxRQUFJQTFCL3dGeFFRaDBjanNCQUNBQ1FYOXFJUUlnQkVFQmFpRUdJQVZCQVdvaUJTQUJTQVIvSUFZaEJBd0JCU0FCSVFRZ0FpRUJJQVlMQ3dzaEFpQUFLQUlBSWdVb0FtaEJBVW9FUUFKQVFRQWhCZ05BSUFVZ0JrRUJkQ0FEYWk4QkFEWUNHQ0FGSUFaQkFYSkJBWFFnQTJvdkFRQTJBaHdnQlNBR1FRSnlRUUYwSUFOcUx3RUFOZ0lnSUFVZ0JrRURja0VCZENBRGFpOEJBRFlDSkNBRklBWkJCSEpCQVhRZ0Eyb3ZBUUEyQWlnZ0JTQUdRUVZ5UVFGMElBTnFMd0VBTmdJc0lBVWdCa0VHY2tFQmRDQURhaThCQURZQ01DQUZJQVpCQjNKQkFYUWdBMm92QVFBMkFqUWdCVUhmQURZQ0ZDQUZLQUlFSVFVZ0FFRUNJQVZCUDNGQnNnVnFFUU1BSUFaQkNHb2lCa0hBQUU4TkFTQUFLQUlBSVFVTUFBQUxBQXNMSUFrZ0JHdEJBQ0FFYTBFQUlBc2JhaUlFUVFCS0RRQUxDeUFFQkVBZ0FDZ0NBQ0lFUVF3MkFoUWdCQ2dDQUNFRUlBQWdCRUgvQVhGQnJBTnFFUUVBQ3lBSUlBSTJBZ0FnQ0NBQk5nSUVEQWNMSUFBb0FoZ2lCaWdDQkNJQlJRUkFJQVlvQWd3aEFTQUFJQUZCL3dCeFFRaHFFUUFBUlFSQVFkNENJUUVNQ1FzZ0JpZ0NCQ0VCQ3lBR0tBSUFJZ0pCQVdvaEJDQUNMUUFBUVFoMElBRkJmMm9pQWdSL0lBUUZJQVlvQWd3aEFTQUFJQUZCL3dCeFFRaHFFUUFBUlFSQVFkNENJUUVNQ1FzZ0JpZ0NCQ0VDSUFZb0FnQUxJZ0V0QUFCeVFRUkhCRUFnQUNnQ0FDSUVRUXcyQWhRZ0JDZ0NBQ0VFSUFBZ0JFSC9BWEZCckFOcUVRRUFDeUFCUVFGcUlRRWdBa0YvYWlJQ1JRUkFJQVlvQWd3aEFTQUFJQUZCL3dCeFFRaHFFUUFBUlFSQVFkNENJUUVNQ1FzZ0JpZ0NCQ0VDSUFZb0FnQWhBUXNnQVVFQmFpRUVJQUV0QUFCQkNIUWdBa0YvYWlJQ0JIOGdCQVVnQmlnQ0RDRUJJQUFnQVVIL0FIRkJDR29SQUFCRkJFQkIzZ0loQVF3SkN5QUdLQUlFSVFJZ0JpZ0NBQXNpQVMwQUFISWhCQ0FBS0FJQUlnTkIxQUEyQWhRZ0F5QUVOZ0lZSUFBb0FnQW9BZ1FoQXlBQVFRRWdBMEUvY1VHeUJXb1JBd0FnQUNBRU5nS1lBaUFHSUFGQkFXbzJBZ0FnQmlBQ1FYOXFOZ0lFREFZTElBQW9BaGdpQlNnQ0FDRUNJQVVvQWdRaEFTQUFLQUxRQXlnQ0VFVUVRQ0FBS0FJQUlnUkJQRFlDRkNBRVFSaHFRZkw5QWtIUUFCRFZBU0FBS0FJQUtBSUFJUVFnQUNBRVFmOEJjVUdzQTJvUkFRQUxBa0FDUUNBQUtBSWtRUU5JRFFBZ0FVVUVRQ0FGS0FJTUlRRWdBQ0FCUWY4QWNVRUlhaEVBQUVVRVFFSGVBaUVCREFvTElBVW9BZ1FoQVNBRktBSUFJUUlMSUFKQkFXb2hCQ0FDTFFBQVFRaDBJQUZCZjJvaUFnUi9JQVFGSUFVb0Fnd2hBU0FBSUFGQi93QnhRUWhxRVFBQVJRUkFRZDRDSVFFTUNnc2dCU2dDQkNFQ0lBVW9BZ0FMSWdFdEFBQnlRUmhIQkVBZ0FDZ0NBQ0lFUVF3MkFoUWdCQ2dDQUNFRUlBQWdCRUgvQVhGQnJBTnFFUUVBQ3lBQlFRRnFJUUVnQWtGL2FpSUNSUVJBSUFVb0Fnd2hBU0FBSUFGQi93QnhRUWhxRVFBQVJRUkFRZDRDSVFFTUNnc2dCU2dDQkNFQ0lBVW9BZ0FoQVFzZ0FTd0FBRUVOUndSQUlBQW9BZ0FpQkVIR0FEWUNGQ0FFSUFBb0FyZ0ROZ0lZSUFBb0FnQW9BZ0FoQkNBQUlBUkIvd0Z4UWF3RGFoRUJBQXNnQVVFQmFpRUJJQUpCZjJvaUFrVUVRQ0FGS0FJTUlRRWdBQ0FCUWY4QWNVRUlhaEVBQUVVRVFFSGVBaUVCREFvTElBVW9BZ1FoQWlBRktBSUFJUUVMSUFGQkFXb2hCQ0FCTFFBQUlRWWdBa0YvYWlJQlJRUkFJQVVvQWd3aEFTQUFJQUZCL3dCeFFRaHFFUUFBUlFSQVFkNENJUUVNQ2dzZ0JTZ0NCQ0VCSUFVb0FnQWhCQXNnQVVGL2FpRUJJQVJCQVdvaEFpQUVMUUFBSUFaQi93RnhRUWgwY2tIL0FVY05BQ0FCQkg4Z0FnVWdCU2dDRENFQklBQWdBVUgvQUhGQkNHb1JBQUJGQkVCQjNnSWhBUXdLQ3lBRktBSUVJUUVnQlNnQ0FBc2hCQ0FCUVg5cUlRRWdCRUVCYWlFQ0lBUXNBQUJCQTBjTkFDQUJCSDhnQWdVZ0JTZ0NEQ0VCSUFBZ0FVSC9BSEZCQ0dvUkFBQkZCRUJCM2dJaEFRd0tDeUFGS0FJRUlRRWdCU2dDQUFzaEJDQUJRWDlxSVFFZ0JFRUJhaUVDSUFRdEFBQWdBQ2dDMkFFaUF5Z0NXRWNOQUNBQkJIOGdBU0VFSUFJaEJpQURCU0FGS0FJTUlRRWdBQ0FCUWY4QWNVRUlhaEVBQUVVRVFFSGVBaUVCREFvTElBVW9BZ1FoQkNBRktBSUFJUVlnQUNnQzJBRUxJUUVnQkVGL2FpRUNJQVpCQVdvaEJDQUdMUUFBSUFFb0FnQkdCRUFnQWdSL0lBRUZJQVVvQWd3aEFTQUFJQUZCL3dCeFFRaHFFUUFBUlFSQVFkNENJUUVNQ3dzZ0JTZ0NCQ0VDSUFVb0FnQWhCQ0FBS0FMWUFRc2hCaUFDUVg5cUlRRWdCRUVCYWlFQ0lBUXRBQUFnQmlnQ3NBRkhEUUVnQVFSL0lBSUZJQVVvQWd3aEFTQUFJQUZCL3dCeFFRaHFFUUFBUlFSQVFkNENJUUVNQ3dzZ0JTZ0NCQ0VCSUFVb0FnQUxJUVFnQVVGL2FpRUJJQVJCQVdvaEFpQUVMQUFBUVlCL1J3MEJJQUZGQkVBZ0JTZ0NEQ0VCSUFBZ0FVSC9BSEZCQ0dvUkFBQkZCRUJCM2dJaEFRd0xDeUFGS0FJRUlRRWdCU2dDQUNFQ0N5QUNRUUZxSVFRZ0FpMEFBQ0VHSUFGQmYyb2lBVVVFUUNBRktBSU1JUUVnQUNBQlFmOEFjVUVJYWhFQUFFVUVRRUhlQWlFQkRBc0xJQVVvQWdRaEFTQUZLQUlBSVFRTElBRkJmMm9oQVNBRVFRRnFJUUlnQkMwQUFDQUdRZjhCY1VFSWRISU5BU0FCUlFSQUlBVW9BZ3doQVNBQUlBRkIvd0J4UVFocUVRQUFSUVJBUWQ0Q0lRRU1Dd3NnQlNnQ0JDRUJJQVVvQWdBaEFnc2dBa0VCYWlFRUlBSXRBQUFoQmlBQlFYOXFJZ0ZGQkVBZ0JTZ0NEQ0VCSUFBZ0FVSC9BSEZCQ0dvUkFBQkZCRUJCM2dJaEFRd0xDeUFGS0FJRUlRRWdCU2dDQUNFRUN5QUJRWDlxSVFFZ0JFRUJhaUVDSUFRdEFBQWdCa0gvQVhGQkNIUnlEUUVnQVFSL0lBSUZJQVVvQWd3aEFTQUFJQUZCL3dCeFFRaHFFUUFBUlFSQVFkNENJUUVNQ3dzZ0JTZ0NCQ0VCSUFVb0FnQUxJUVFnQVVGL2FpRUJJQVJCQVdvaEFpQUVMQUFBRFFFZ0FVVUVRQ0FGS0FJTUlRRWdBQ0FCUWY4QWNVRUlhaEVBQUVVRVFFSGVBaUVCREFzTElBVW9BZ1FoQVNBRktBSUFJUUlMSUFKQkFXb2hCQ0FDTFFBQUlRWWdBVUYvYWlJQlJRUkFJQVVvQWd3aEFTQUFJQUZCL3dCeFFRaHFFUUFBUlFSQVFkNENJUUVNQ3dzZ0JTZ0NCQ0VCSUFVb0FnQWhCQXNnQVVGL2FpRUJJQVJCQVdvaEFpQUVMUUFBSUFaQi93RnhRUWgwY2tFQlJ3MEJJQUZGQkVBZ0JTZ0NEQ0VCSUFBZ0FVSC9BSEZCQ0dvUkFBQkZCRUJCM2dJaEFRd0xDeUFGS0FJRUlRRWdCU2dDQUNFQ0N5QUNRUUZxSVFRZ0FpMEFBQ0VHSUFGQmYyb2lBVVVFUUNBRktBSU1JUUVnQUNBQlFmOEFjVUVJYWhFQUFFVUVRRUhlQWlFQkRBc0xJQVVvQWdRaEFTQUZLQUlBSVFRTElBRkJmMm9oQVNBRVFRRnFJUUlnQkMwQUFDQUdRZjhCY1VFSWRISU5BU0FCQkg4Z0FnVWdCU2dDRENFQklBQWdBVUgvQUhGQkNHb1JBQUJGQkVCQjNnSWhBUXdMQ3lBRktBSUVJUUVnQlNnQ0FBc2hCQ0FCUVg5cUlRRWdCRUVCYWlFQ0lBUXNBQUFOQVNBQlJRUkFJQVVvQWd3aEFTQUFJQUZCL3dCeFFRaHFFUUFBUlFSQVFkNENJUUVNQ3dzZ0JTZ0NCQ0VCSUFVb0FnQWhBZ3NnQWtFQmFpRUVJQUl0QUFBaEJpQUJRWDlxSWdGRkJFQWdCU2dDRENFQklBQWdBVUgvQUhGQkNHb1JBQUJGQkVCQjNnSWhBUXdMQ3lBRktBSUVJUUVnQlNnQ0FDRUVDeUFCUVg5cUlRRWdCRUVCYWlFQ0lBUXRBQUFnQmtIL0FYRkJDSFJ5UVFGSERRRWdBVVVFUUNBRktBSU1JUUVnQUNBQlFmOEFjVUVJYWhFQUFFVUVRRUhlQWlFQkRBc0xJQVVvQWdRaEFTQUZLQUlBSVFJTElBSkJBV29oQkNBQ0xRQUFJUVlnQVVGL2FpSUJSUVJBSUFVb0Fnd2hBU0FBSUFGQi93QnhRUWhxRVFBQVJRUkFRZDRDSVFFTUN3c2dCU2dDQkNFQklBVW9BZ0FoQkFzZ0FVRi9haUVCSUFSQkFXb2hBaUFFTFFBQUlBWkIvd0Z4UVFoMGNnMEJCU0FDSVFFZ0JDRUNEQUVMREFFTElBQW9BZ0FpQkVFY05nSVVJQVFvQWdBaEJDQUFJQVJCL3dGeFFhd0RhaEVCQUFzZ0FFRUJOZ0t3QWlBRklBSTJBZ0FnQlNBQk5nSUVEQVVMSUFBb0F0QURJQUZCQW5ScVFhQjVhaWdDQUNFQklBQWdBVUgvQUhGQkNHb1JBQUJGQkVCQjNnSWhBUXdHQ3d3RUN5QUFLQUxRQXlnQ0hDRUJJQUFnQVVIL0FIRkJDR29SQUFCRkJFQkIzZ0loQVF3RkN3d0RDeUFBS0FJQUlnSkIzZ0EyQWhRZ0FpQUJOZ0lZSUFBb0FnQW9BZ1FoQVNBQVFRRWdBVUUvY1VHeUJXb1JBd0FNQWdzZ0FDZ0NHQ0lHS0FJRUlnRkZCRUFnQmlnQ0RDRUJJQUFnQVVIL0FIRkJDR29SQUFCRkJFQkIzZ0loQVF3RUN5QUdLQUlFSVFFTElBWW9BZ0FpQWtFQmFpRUVJQUl0QUFCQkNIUWdBVUYvYWlJQ0JIOGdCQVVnQmlnQ0RDRUJJQUFnQVVIL0FIRkJDR29SQUFCRkJFQkIzZ0loQVF3RUN5QUdLQUlFSVFJZ0JpZ0NBQXNpQVMwQUFISWlBMEYrYWlFRUlBQW9BZ0FpQlVIZEFEWUNGQ0FGSUFBb0FyZ0ROZ0lZSUFBb0FnQWdCRFlDSENBQUtBSUFLQUlFSVFVZ0FFRUJJQVZCUDNGQnNnVnFFUU1BSUFZZ0FVRUJhallDQUNBR0lBSkJmMm8yQWdRZ0EwRUNTd1JBSUFBb0FoZ29BaEFoQVNBQUlBUWdBVUUvY1VHeUJXb1JBd0FMREFFTElBQW9BZ0FpQWtIR0FEWUNGQ0FDSUFFMkFoZ2dBQ2dDQUNnQ0FDRUJJQUFnQVVIL0FYRkJyQU5xRVFFQUN5QUFRUUEyQXJnRFFRQWhBUXdCQ3dzQ1FDQUJRUmxHQkVBZ0FDZ0NHQ0lIS0FJQUlRUWdCeWdDQkNFQklBQW9BdEFES0FJUVJRUkFJQUFvQWdBaUFrRThOZ0lVSUFKQkdHcEI3djBDUWRBQUVOVUJJQUFvQWdBb0FnQWhBaUFBSUFKQi93RnhRYXdEYWhFQkFBc2dBUVIvSUFFaEFpQUVCU0FIS0FJTUlRRWdBQ0FCUWY4QWNVRUlhaEVBQUVVTkFpQUhLQUlFSVFJZ0J5Z0NBQXNpQVVFQmFpRUVJQUV0QUFBaEJTQUNRWDlxSWdJRWZ5QUVCU0FIS0FJTUlRRWdBQ0FCUWY4QWNVRUlhaEVBQUVVTkFpQUhLQUlFSVFJZ0J5Z0NBQXNpQVVFQmFpRUdJQUV0QUFBaENDQUNRWDlxSWdRRWZ5QUdCU0FIS0FJTUlRRWdBQ0FCUWY4QWNVRUlhaEVBQUVVTkFpQUhLQUlFSVFRZ0J5Z0NBQXNpQVN3QUFDSURRZjhCY1NFSklBQW9BZ0FpQWtIcEFEWUNGQ0FDSUFrMkFoZ2dBQ2dDQUNnQ0JDRUNJQUJCQVNBQ1FUOXhRYklGYWhFREFBSkFBa0FDUUFKL0FrQWdDVUVCZEVFR2FpQUlRZjhCY1NBRlFmOEJjVUVJZEhKSElBTkIvd0Z4UVFSS2NnMEFJQU1FUUNBQUlBazJBdFFDSUFGQkFXb2hBU0FFUVg5cUlnUWhBaUFFUlF3Q0N5QUFLQUxnQVVVTkFDQUFJQWsyQXRRQ0lBRkJBV29oQWlBRVFYOXFJZ0VFZjBFQkJVRUJJUVFNQkFzaEJBd0VDeUFBS0FJQUlnSkJERFlDRkNBQ0tBSUFJUUlnQUNBQ1FmOEJjVUdzQTJvUkFRQWdBQ0FKTmdMVUFpQUJRUUZxSVFJZ0JFRi9haUlFUlNFR0lBTUVmeUFDSVFFZ0JDRUNJQVlGSUFRaEFVRUJJUVFNQWdzTElRUkJBQ0VEQTBBQ1FDQUVCSDhnQnlnQ0RDRUJJQUFnQVVIL0FIRkJDR29SQUFCRkRRRWdCeWdDQkNFR0lBY29BZ0FGSUFJaEJpQUJDeUlFTFFBQUlRSWdBd1JBQWtCQkFDRUJBMEFnQUVIWUFtb2dBVUVDZEdvb0FnQW9BZ0FnQWtjRVFDQUJRUUZxSWdFZ0Ewa0VRQXdDQlF3REN3QUxDeUFBS0FMWUFpZ0NBQ0VCSUFOQkFVc0VRRUVCSVFJRFFDQUFRZGdDYWlBQ1FRSjBhaWdDQUNnQ0FDSUZJQUVnQlNBQlNoc2hBU0FDUVFGcUlnSWdBMGNOQUFzTElBRkJBV29oQWdzTElBWkJmMm9oQmlBRVFRRnFJUVVnQUNnQzJBRWhBUUpBQWtBZ0FDZ0NKQ0lJUVFCTURRQkJBQ0VFQWtBRFFDQUNJQUVvQWdCR0RRRWdBVUhZQUdvaEFTQUVRUUZxSWdRZ0NFZ05BQXNNQVFzTUFRc2dBQ2dDQUNJRVFRUTJBaFFnQkNBQ05nSVlJQUFvQWdBb0FnQWhBaUFBSUFKQi93RnhRYXdEYWhFQkFBc2dBRUhZQW1vZ0EwRUNkR29nQVRZQ0FDQUJJQVlFZnlBRkJTQUhLQUlNSVFJZ0FDQUNRZjhBY1VFSWFoRUFBRVVOQVNBSEtBSUVJUVlnQnlnQ0FBc2lBaTBBQUNJRVFRUjJOZ0lVSUFFZ0JFRVBjVFlDR0NBQUtBSUFJZ1FnQVNnQ0FEWUNHQ0FFSUFFb0FoUTJBaHdnQkNBQktBSVlOZ0lnSUFSQjZnQTJBaFFnQkNnQ0JDRUJJQUJCQVNBQlFUOXhRYklGYWhFREFDQUNRUUZxSVFJZ0JrRi9haUlFUlNFR0lBTkJBV29pQXlBSlNRUkFJQUloQVNBRUlRSWdCaUVFREFJRklBUWhBVUVBSVFRTUF3c0FDd3NNQkFzZ0JnMEFEQUVMSUFjb0Fnd2hBU0FBSUFGQi93QnhRUWhxRVFBQVJRMENJQWNvQWdBaEFpQUhLQUlFSVFFTElBSkJBV29oQmlBQUlBSXRBQUEyQXB3RElBRkJmMm9pQWdSL0lBWUZJQWNvQWd3aEFTQUFJQUZCL3dCeFFRaHFFUUFBUlEwQ0lBY29BZ1FoQWlBSEtBSUFDeUlCUVFGcUlRWWdBQ0FCTFFBQU5nS2dBeUFBSUFKQmYyb2lBZ1IvSUFZRklBY29BZ3doQVNBQUlBRkIvd0J4UVFocUVRQUFSUTBDSUFjb0FnUWhBaUFIS0FJQUN5SUJMUUFBSWdaQkJIWTJBcVFESUFBZ0JrRVBjVFlDcUFNZ0FDZ0NBQ0lHSUFBb0Fwd0ROZ0lZSUFZZ0FDZ0NvQU0yQWh3Z0JpQUFLQUtrQXpZQ0lDQUdJQUFvQXFnRE5nSWtJQVpCNndBMkFoUWdCaWdDQkNFR0lBQkJBU0FHUVQ5eFFiSUZhaEVEQUNBQUtBTFFBMEVBTmdJVUlBUkZCRUFnQUNBQUtBS1FBVUVCYWpZQ2tBRUxJQWNnQVVFQmFqWUNBQ0FISUFKQmYybzJBZ1FnQUVFQU5nSzRBeUFLSkFaQkFROEZJQUZCeXdCR0JFQWdBQ2dDQUNJQlFkY0FOZ0lVSUFFb0FnUWhBU0FBUVFFZ0FVRS9jVUd5QldvUkF3QWdBRUVBTmdLNEF5QUtKQVpCQWc4RklBRkJyZ0ZHQkVBTUF3VWdBVUhlQWtZTkF3c0xDMEVBRHdzZ0NpUUdRUUFMUVFFQmZ5QUFLQUxRQXlFQklBQkJBRFlDMkFFZ0FFRUFOZ0tRQVNBQVFRQTJBcmdESUFGQkFEWUNEQ0FCUVFBMkFoQWdBVUVBTmdJWUlBRkJBRFlDcEFFTGlRTUJBWDhnQUNnQ0JDZ0NBQ0VCSUFBZ0FFRUFRYXdCSUFGQlAzRkJ5Z0ZxRVFRQUlnRTJBdEFESUFGQml3RTJBZ0FnQVVIWEFEWUNCQ0FCUWRnQU5nSUlJQUZCMlFBMkFod2dBVUVBTmdKZ0lBRkJBRFlDWkNBQlFka0FOZ0lrSUFGQkFEWUNhQ0FCUWRrQU5nSW9JQUZCQURZQ2JDQUJRZGtBTmdJc0lBRkJBRFlDY0NBQlFka0FOZ0l3SUFGQkFEWUNkQ0FCUWRrQU5nSTBJQUZCQURZQ2VDQUJRZGtBTmdJNElBRkJBRFlDZkNBQlFka0FOZ0k4SUFGQkFEWUNnQUVnQVVGQWEwSFpBRFlDQUNBQlFRQTJBb1FCSUFGQjJRQTJBa1FnQVVFQU5nS0lBU0FCUWRrQU5nSklJQUZCQURZQ2pBRWdBVUhaQURZQ1RDQUJRUUEyQXBBQklBRkIyUUEyQWxBZ0FVRUFOZ0tVQVNBQlFka0FOZ0pVSUFGQkFEWUNtQUVnQVVFQU5nS2NBU0FCUWRrQU5nSmNJQUZCQURZQ29BRWdBVUhhQURZQ0lDQUJRZG9BTmdKWUlBQW9BdEFESVFFZ0FFRUFOZ0xZQVNBQVFRQTJBcEFCSUFCQkFEWUN1QU1nQVVFQU5nSU1JQUZCQURZQ0VDQUJRUUEyQWhnZ0FVRUFOZ0trQVFzZUFDQUFRUUVRcmdJZ0FFRUFFSzRDSUFBb0FnUVFPQ0FBUVFBMkFnUUwyUWNCQjM4Q1FBSkFJQUlnQTJvaUNTQUJLQUlFU3cwQUlBRW9BZ3dnQTBrTkFDQUJLQUlBUlEwQURBRUxJQUFvQWdBaUEwRVhOZ0lVSUFNb0FnQWhBeUFBSUFOQi93RnhRYXdEYWhFQkFBc0NRQUpBSUFFb0FoZ2lBeUFDU3cwQUlBa2dBeUFCS0FJUWFrc05BQXdCQ3lBQktBSW9SUVJBSUFBb0FnQWlBMEhIQURZQ0ZDQURLQUlBSVFNZ0FDQURRZjhCY1VHc0Eyb1JBUUFMSUFFb0FpUUVRQ0FCS0FJSVFRZDBJUW9nQVNnQ0dDRUdJQUVvQWhBaUJVRUFTZ1JBQWtBZ0FVRXdhaUVMSUFFb0FoUWlBeUFGSUFNZ0JVZ2JJZ1VnQVNnQ0hDQUdheUlESUFVZ0EwZ2JJZ1VnQVNnQ0JDQUdheUlESUFVZ0EwZ2JJZ05CQVU0RVFDQUdJQXBzSVFWQkFDRUdBMEFnQVNnQ05DRUhJQUFnQ3lBQktBSUFJQVpCQW5ScUtBSUFJQVVnQXlBS2JDSUlJQWRCUDNGQm1nWnFFUVVBSUFFb0FoQWlBeUFHSUFFb0FoUWlCMm9pQmt3TkFpQUZJQWhxSVFVZ0J5QURJQVpySWdNZ0J5QURTQnNpQ0NBQktBSWNJQUVvQWhnZ0Jtb2lCMnNpQXlBSUlBTklHeUlJSUFFb0FnUWdCMnNpQXlBSUlBTklHeUlEUVFGT0RRQUxDd3NMSUFGQkFEWUNKQXNnQVNnQ0VDRUdJQUVnQVNnQ0dDQUNTUVIvSUFJRklBa2dCbXNpQTBFQUlBTkJBRW9iQ3lJRk5nSVlJQUVvQWdoQkIzUWhDaUFHUVFCS0JFQWdBVUV3YWlFTElBRW9BaFFpQXlBR0lBTWdCa2diSWdZZ0FTZ0NIQ0FGYXlJRElBWWdBMGdiSWdZZ0FTZ0NCQ0FGYXlJRElBWWdBMGdiSWdOQkFVNEVRQ0FGSUFwc0lRVkJBQ0VHQTBBZ0N5Z0NBQ0VISUFBZ0N5QUJLQUlBSUFaQkFuUnFLQUlBSUFVZ0F5QUtiQ0lJSUFkQlAzRkJtZ1pxRVFVQUlBRW9BaEFpQXlBR0lBRW9BaFFpQjJvaUJrd05BeUFGSUFocUlRVWdCeUFESUFacklnTWdCeUFEU0JzaUNDQUJLQUljSUFFb0FoZ2dCbW9pQjJzaUF5QUlJQU5JR3lJSUlBRW9BZ1FnQjJzaUF5QUlJQU5JR3lJRFFRRk9EUUFMQ3dzTElBRW9BaHdpQXlBSlNRUkFBa0FnQkVVaEJRSkFBa0FnQXlBQ1NRUkFJQVVFZjBFQUlRVWdBZ1VnQUNnQ0FDSURRUmMyQWhRZ0F5Z0NBQ0VESUFBZ0EwSC9BWEZCckFOcUVRRUFJQUloQXd3Q0N5RURCU0FGUlEwQlFRQWhCUXNNQVFzZ0FTQUpOZ0ljUVFFaEJRc2dBU2dDSUVVRVFDQUZEUUVnQUNnQ0FDSURRUmMyQWhRZ0F5Z0NBQ0VESUFBZ0EwSC9BWEZCckFOcUVRRUFEQUVMSUFFb0FnaEJCM1FoQlNBRElBRW9BaGdpQTJzaUFDQUpJQU5ySWdOSkJFQURRQ0FCS0FJQUlBQkJBblJxS0FJQVFRQWdCUkJGR2lBQVFRRnFJZ0FnQTBjTkFBc0xDd3NnQkVVRVFDQUJLQUlBSUFJZ0FTZ0NHR3RCQW5ScUR3c2dBVUVCTmdJa0lBRW9BZ0FnQWlBQktBSVlhMEVDZEdvTE1nRUJmeUFBS0FJSUlBQW9BZ1FRcFFNaUFRUkFJQUVnQUJEcUJFRUFTQVJBSUFFUVNVRUFJUUVMQlVFQUlRRUxJQUVMMEFjQkIzOENRQUpBSUFJZ0Eyb2lDU0FCS0FJRVN3MEFJQUVvQWd3Z0Ewa05BQ0FCS0FJQVJRMEFEQUVMSUFBb0FnQWlBMEVYTmdJVUlBTW9BZ0FoQXlBQUlBTkIvd0Z4UWF3RGFoRUJBQXNDUUFKQUlBRW9BaGdpQXlBQ1N3MEFJQWtnQXlBQktBSVFha3NOQUF3QkN5QUJLQUlvUlFSQUlBQW9BZ0FpQTBISEFEWUNGQ0FES0FJQUlRTWdBQ0FEUWY4QmNVR3NBMm9SQVFBTElBRW9BaVFFUUNBQktBSUlJUW9nQVNnQ0dDRUdJQUVvQWhBaUJVRUFTZ1JBQWtBZ0FVRXdhaUVMSUFFb0FoUWlBeUFGSUFNZ0JVZ2JJZ1VnQVNnQ0hDQUdheUlESUFVZ0EwZ2JJZ1VnQVNnQ0JDQUdheUlESUFVZ0EwZ2JJZ05CQVU0RVFDQUdJQXBzSVFWQkFDRUdBMEFnQVNnQ05DRUhJQUFnQ3lBQktBSUFJQVpCQW5ScUtBSUFJQVVnQXlBS2JDSUlJQWRCUDNGQm1nWnFFUVVBSUFFb0FoQWlBeUFHSUFFb0FoUWlCMm9pQmt3TkFpQUZJQWhxSVFVZ0J5QURJQVpySWdNZ0J5QURTQnNpQ0NBQktBSWNJQUVvQWhnZ0Jtb2lCMnNpQXlBSUlBTklHeUlJSUFFb0FnUWdCMnNpQXlBSUlBTklHeUlEUVFGT0RRQUxDd3NMSUFGQkFEWUNKQXNnQVNnQ0VDRUdJQUVnQVNnQ0dDQUNTUVIvSUFJRklBa2dCbXNpQTBFQUlBTkJBRW9iQ3lJRk5nSVlJQUVvQWdnaENpQUdRUUJLQkVBZ0FVRXdhaUVMSUFFb0FoUWlBeUFHSUFNZ0JrZ2JJZ1lnQVNnQ0hDQUZheUlESUFZZ0EwZ2JJZ1lnQVNnQ0JDQUZheUlESUFZZ0EwZ2JJZ05CQVU0RVFDQUZJQXBzSVFWQkFDRUdBMEFnQ3lnQ0FDRUhJQUFnQ3lBQktBSUFJQVpCQW5ScUtBSUFJQVVnQXlBS2JDSUlJQWRCUDNGQm1nWnFFUVVBSUFFb0FoQWlBeUFHSUFFb0FoUWlCMm9pQmt3TkF5QUZJQWhxSVFVZ0J5QURJQVpySWdNZ0J5QURTQnNpQ0NBQktBSWNJQUVvQWhnZ0Jtb2lCMnNpQXlBSUlBTklHeUlJSUFFb0FnUWdCMnNpQXlBSUlBTklHeUlEUVFGT0RRQUxDd3NMSUFFb0Fod2lBeUFKU1FSQUFrQWdCRVVoQlFKQUFrQWdBeUFDU1FSQUlBVUVmMEVBSVFVZ0FnVWdBQ2dDQUNJRFFSYzJBaFFnQXlnQ0FDRURJQUFnQTBIL0FYRkJyQU5xRVFFQUlBSWhBd3dDQ3lFREJTQUZSUTBCUVFBaEJRc01BUXNnQVNBSk5nSWNRUUVoQlFzZ0FTZ0NJRVVFUUNBRkRRRWdBQ2dDQUNJRFFSYzJBaFFnQXlnQ0FDRURJQUFnQTBIL0FYRkJyQU5xRVFFQURBRUxJQUVvQWdnaEJTQURJQUVvQWhnaUEyc2lBQ0FKSUFOcklnTkpCRUFEUUNBQktBSUFJQUJCQW5ScUtBSUFRUUFnQlJCRkdpQUFRUUZxSWdBZ0EwY05BQXNMQ3dzZ0JFVUVRQ0FCS0FJQUlBSWdBU2dDR0d0QkFuUnFEd3NnQVVFQk5nSWtJQUVvQWdBZ0FpQUJLQUlZYTBFQ2RHb0w0QW9CRTM4Z0FDZ0NCQ0lLS0FKRUlnRUVmd04vSUFFb0FnQkZCRUFnQXlBQktBSUlJZ1FnQVNnQ0RHeHFJUU1nQWlBRUlBRW9BZ1JzYWlFQ0N5QUJLQUlzSWdFTkFDQURJUUVnQWdzRlFRQWhBVUVBQ3lFRElBb29Ba2dpQkFSQUlBRWhBZ05BSUFRb0FnQkZCRUFnQWlBRUtBSUlJZ0VnQkNnQ0RFRUhkR3hxSVFJZ0F5QUVLQUlFSUFGQkIzUnNhaUVEQ3lBRUtBSXNJZ1FOQUFzRklBRWhBZ3NnQWtFQlNBUkFEd3NnQ2lnQ1RCb2dBeUlCSUFOSUJIOGdBU0FDRURraUFVRUJJQUZCQVVvYkJVR0FsT3ZjQXdzaER5QUtLQUpFSWdJRVFBTkFJQUlvQWdCRkJFQWdBaWdDQkNJRlFYOXFJQUlvQWd3aUFSQklRUUZxSUE5S0JFQWdBaUFCSUE5c05nSVFJQUFnQlNBQ1FRaHFJZ01vQWdCc0VKOERJQUpCQVRZQ0tDQUNLQUlRSVFVRklBSWdCVFlDRUNBQ1FRaHFJUU1MSUFBb0FnUWhFa0h3ayt2Y0F5QURLQUlBSWdzUVNDRUJJQXRCOEpQcjNBTkxCRUFnQUNnQ0FDSURRY2dBTmdJVUlBQWdBeWdDQUVIL0FYRkJyQU5xRVFFQUN5QVNJQUVnQlNBQklBVklHeUlCTmdKUUlBQkJBU0FGUVFKMEVMVUJJUXdnQlFSQUlBVkJmM01oRUVFQUlRTURRQ0FBS0FJRUlRY2dBU0FGSUFOcklnUWdBU0FFU1JzaUJDQUxiQ0lHUWZDVDY5d0RTd1JBSUFBb0FnQWlDRUU0TmdJVUlBaEJBellDR0NBQUlBQW9BZ0FvQWdCQi93RnhRYXdEYWhFQkFBc2dCa0VJSUFaQkIzRWlDR3RCQUNBSUcyb2lDRUVRYWlJTkVFUWlCa1VFUUNBQUtBSUFJZ2xCT0RZQ0ZDQUpRUVEyQWhnZ0FDQUFLQUlBS0FJQVFmOEJjVUdzQTJvUkFRQUxJQWNnQnlnQ1RDQU5hallDVENBR0lBZEJRR3NpQnlnQ0FEWUNBQ0FHSUFnMkFnUWdCa0VBTmdJSUlBY2dCallDQUNBRUJFQWdBeUFRYWlJTklBRkJmM01pQ1VzaERpQUVJUWNnQmtFUWFpRUlJQU1oQVFOQUlBRkJBV29oQmlBQlFRSjBJQXhxSUFnMkFnQWdDQ0FMYWlFSUlBZEJmMm9pQndSQUlBWWhBUXdCQ3dzZ0EwRi9haUFOSUFrZ0RodHJJUU1MSUFNZ0JVa0VRQ0FFSVFFTUFRc0xDeUFDSUF3MkFnQWdBaUFLS0FKUU5nSVVJQUpCQURZQ0dDQUNRUUEyQWh3Z0FrRUFOZ0lrQ3lBQ0tBSXNJZ0lOQUFzTElBb29Ba2dpQWtVRVFBOExBMEFnQWlnQ0FFVUVRQ0FDS0FJRUlnVkJmMm9nQWlnQ0RDSUJFRWhCQVdvZ0Qwb0VRQ0FDSUFFZ0QydzJBaEFnQUNBQ1FRaHFJZ01vQWdBZ0JVRUhkR3dRbndNZ0FrRUJOZ0lvSUFJb0FoQWhCUVVnQWlBRk5nSVFJQUpCQ0dvaEF3c2dBQ2dDQkNFVFFmQ1Q2OXdESUFNb0FnQWlFRUVIZENJTEVFZ2hBU0FMUWZDVDY5d0RTd1JBSUFBb0FnQWlBMEhJQURZQ0ZDQUFJQU1vQWdCQi93RnhRYXdEYWhFQkFBc2dFeUFCSUFVZ0FTQUZTQnNpQVRZQ1VDQUFRUUVnQlVFQ2RCQzFBU0VNSUFVRVFDQUZRWDl6SVExQkFDRURBMEFnQUNnQ0JDRUhJQUVnQlNBRGF5SUVJQUVnQkVrYklnUWdDMndpQ0VId2srdmNBMHNFUUNBQUtBSUFJZ1pCT0RZQ0ZDQUdRUU0yQWhnZ0FDQUFLQUlBS0FJQVFmOEJjVUdzQTJvUkFRQUxJQWhCRUhJaUNSQkVJZ1pGQkVBZ0FDZ0NBQ0lPUVRnMkFoUWdEa0VFTmdJWUlBQWdBQ2dDQUNnQ0FFSC9BWEZCckFOcUVRRUFDeUFISUFrZ0J5Z0NUR28yQWt3Z0JpQUhRVUJySWdjb0FnQTJBZ0FnQmlBSU5nSUVJQVpCQURZQ0NDQUhJQVkyQWdBZ0JBUkFJQU1nRFdvaUNTQUJRWDl6SWc1TElSRWdCQ0VISUFaQkVHb2hDQ0FESVFFRFFDQUJRUUZxSVFZZ0FVRUNkQ0FNYWlBSU5nSUFJQkJCQjNRZ0NHb2hDQ0FIUVg5cUlnY0VRQ0FHSVFFTUFRc0xJQU5CZjJvZ0NTQU9JQkViYXlFREN5QURJQVZKQkVBZ0JDRUJEQUVMQ3dzZ0FpQU1OZ0lBSUFJZ0NpZ0NVRFlDRkNBQ1FRQTJBaGdnQWtFQU5nSWNJQUpCQURZQ0pBc2dBaWdDTENJQ0RRQUxDNHNCQVFKL0lBQW9BZ1FoQnlBQlFRRkdCRUJCQVNFQkJTQUFLQUlBSWdaQkR6WUNGQ0FHSUFFMkFoZ2dBQ2dDQUNnQ0FDRUdJQUFnQmtIL0FYRkJyQU5xRVFFQUN5QUFJQUZCZ0FFUXRRRWlBRUVBTmdJQUlBQWdCRFlDQkNBQUlBTTJBZ2dnQUNBRk5nSU1JQUFnQWpZQ0lDQUFRUUEyQWlnZ0FDQUhLQUpJTmdJc0lBY2dBRFlDU0NBQUM0c0JBUUovSUFBb0FnUWhCeUFCUVFGR0JFQkJBU0VCQlNBQUtBSUFJZ1pCRHpZQ0ZDQUdJQUUyQWhnZ0FDZ0NBQ2dDQUNFR0lBQWdCa0gvQVhGQnJBTnFFUUVBQ3lBQUlBRkJnQUVRdFFFaUFFRUFOZ0lBSUFBZ0JEWUNCQ0FBSUFNMkFnZ2dBQ0FGTmdJTUlBQWdBallDSUNBQVFRQTJBaWdnQUNBSEtBSkVOZ0lzSUFjZ0FEWUNSQ0FBQzR3Q0FRdC9JQUFvQWdRaERrSHdrK3ZjQXlBQ1FRZDBJZ29RU0NFRklBcEI4SlByM0FOTEJFQWdBQ2dDQUNJR1FjZ0FOZ0lVSUFZb0FnQWhCaUFBSUFaQi93RnhRYXdEYWhFQkFBc2dEaUFGSUFNZ0JTQURTQnNpQkRZQ1VDQUFJQUVnQTBFQ2RCQzFBU0VISUFORkJFQWdCdzhMSUFOQmYzTWhDMEVBSVFZRFFDQUFJQUVnQkNBRElBWnJJZ1VnQkNBRlNSc2lDQ0FLYkJDdkFpRUpJQWdFUUNBR0lBdHFJZ1VnQkVGL2N5SUVJQVVnQkVzYklRd2dDQ0VFSUFZaEJRTkFJQVZCQVdvaERTQUZRUUowSUFkcUlBazJBZ0FnQWtFSGRDQUphaUVKSUFSQmYyb2lCQVJBSUEwaEJRd0JDd3NnQmtGL2FpQU1heUVHQ3lBR0lBTkpCRUFnQ0NFRURBRUxDeUFIQzRRQ0FRcC9JQUFvQWdRaERVSHdrK3ZjQXlBQ0VFZ2hCU0FDUWZDVDY5d0RTd1JBSUFBb0FnQWlCa0hJQURZQ0ZDQUdLQUlBSVFZZ0FDQUdRZjhCY1VHc0Eyb1JBUUFMSUEwZ0JTQURJQVVnQTBnYklnUTJBbEFnQUNBQklBTkJBblFRdFFFaEJ5QURSUVJBSUFjUEN5QURRWDl6SVFwQkFDRUdBMEFnQUNBQklBSWdCQ0FESUFacklnVWdCQ0FGU1JzaUNHd1Fyd0loQ1NBSUJFQWdCaUFLYWlJRklBUkJmM01pQkNBRklBUkxHeUVMSUFnaEJDQUdJUVVEUUNBRlFRRnFJUXdnQlVFQ2RDQUhhaUFKTmdJQUlBSWdDV29oQ1NBRVFYOXFJZ1FFUUNBTUlRVU1BUXNMSUFaQmYyb2dDMnNoQmdzZ0JpQURTUVJBSUFnaEJBd0JDd3NnQnd2dEFnRURmeU1HSVFJakJrRVFhaVFHSUFCQkFEWUNCQ0FDUVFBMkFnaEIxQUFRUkNJQlJRUkFJQUFvQWdBaUEwRTROZ0lVSUFOQkFEWUNHQ0FBSUFBb0FnQW9BZ0JCL3dGeFFhd0RhaEVCQUFzZ0FVRWhOZ0lBSUFGQklqWUNCQ0FCUVFjMkFnZ2dBVUVJTmdJTUlBRkJJellDRUNBQlFTUTJBaFFnQVVHSkFUWUNHQ0FCUVJVMkFod2dBVUVXTmdJZ0lBRkJORFlDSkNBQlFZb0JOZ0lvSUFGQmdKVHIzQU0yQWpBZ0FVRUFOZ0lzSUFGQkFEWUNPQ0FCUVVCclFRQTJBZ0FnQVVFQU5nSTBJQUZCQURZQ1BDQUJRUUEyQWtRZ0FVRUFOZ0pJSUFGQjFBQTJBa3dnQUNBQk5nSUVRZUQ5QWhBTklnQkZCRUFnQWlRR0R3c2dBa0g0QURvQURDQUNJQUpCQ0dvMkFnQWdBaUFDUVF4cU5nSUVJQUJCNlAwQ0lBSVFnd0ZCQUVvRVFBSkFJQUlzQUF4QnpRQnJJZ0JCQUNBQVFTQkhHMFVFUUNBQ0lBSW9BZ2hCNkFkc0lnQTJBZ2dNQVFzZ0FpZ0NDQ0VBQ3lBQklBQkI2QWRzTmdJc0N5QUNKQVlMOVFFQkJIOGpCaUVFSXdaQkVHb2tCaUFBS0FJVUlnTkJ6UUZIQkVBZ0FDZ0NBQ0lGUVJVMkFoUWdCU0FETmdJWUlBQW9BZ0FvQWdBaEF5QUFJQU5CL3dGeFFhd0RhaEVCQUFzZ0FDZ0NqQUVpQlNBQUtBSjBJZ1pQQkVBZ0FDZ0NBQ0lCUWY0QU5nSVVJQUVvQWdRaEFTQUFRWDhnQVVFL2NVR3lCV29SQXdBZ0JDUUdRUUFQQ3lBQUtBSUlJZ01FUUNBRElBVTJBZ1FnQXlBR05nSUlJQU1vQWdBaEF5QUFJQU5CL3dGeFFhd0RhaEVCQUFzZ0JFRUFOZ0lBSUFBb0FzQURLQUlFSVFNZ0FDQUJJQVFnQWlBRFFSOXhRZm9GYWhFSEFDQUFJQVFvQWdBaUFTQUFLQUtNQVdvMkFvd0JJQVFrQmlBQkM1SUVBUjEvSUFBb0F1UURJUVFnQUNnQ2VDRUlJQUFvQW5BaENTQUFLQUxRQWlFU0lBTkJBRXdFUUE4TElBaEJBRW9oRXlBSlJTRVVJQWxCZjJvaUZTQUliQ0VXUVFBZ0NHc2hGeUFKUVFGcUlROERRQ0FLUVFKMElBSnFJaGdvQWdCQkFDQUpFRVVhSUJNRVFBSkFJQlFFUUNBRUtBSlVSU0VHUVFBaEFBTkFJQVJCeEFCcUlBQkJBblJxS0FJQUlnVWdEMEVCZENBRmFpQUdHMEVBT3dFQUlBZ2dBRUVCYWlJQVJ3MEFDd3dCQ3lBS1FRSjBJQUZxSVJsQkFDRUhBMEFnQnlBWktBSUFhaUVHSUJnb0FnQWhBQ0FFS0FKVUJIOUJmeUVMSUFSQnhBQnFJQWRCQW5ScUtBSUFJQTlCQVhScUlRMGdCaUFXYWlFR0lBQWdGV29oQUNBWEJVRUJJUXNnQkVIRUFHb2dCMEVDZEdvb0FnQWhEU0FJQ3lFYUlBUW9BaGdnQjBFQ2RHb29BZ0FoR3lBRUtBSVFJQWRCQW5ScUtBSUFJUndnQ1NBTGJDRWdRUUFoRUNBSklSRkJBQ0VPUVFBaERDQU5JUVVEUUNBQUlCc2dFaUFHTFFBQUlBdEJBWFFnQldvaUhpNEJBQ0FNUVFocWFrRUVkV3BxTFFBQUlneHFMUUFBSWg4Z0FDMEFBR282QUFBZ0JTQU9JQXdnSENBZmFpMEFBR3NpQlVFRGJHbzdBUUFnRUNBRlFRVnNhaUVPSUFWQkIyd2hEQ0FHSUJwcUlRWWdBQ0FMYWlFQUlCRkJmMm9pRVFSQUlBVWhFQ0FlSVFVTUFRc0xJQ0JCQVhRZ0RXb2dEanNCQUNBSFFRRnFJZ2NnQ0VjTkFBc0xDeUFFSUFRb0FsUkZOZ0pVSUFwQkFXb2lDaUFEUncwQUN3dkZBZ0VPZnlBQUtBTGtBeUVFSUFBb0FuZ2hDU0FBS0FKd0lRWWdBMEVBVEFSQUR3c2dDVUVBVEFSQVFRQWhBQU5BSUFCQkFuUWdBbW9vQWdCQkFDQUdFRVVhSUFRZ0JDZ0NNRUVCYWtFUGNUWUNNQ0FBUVFGcUlnQWdBMGNOQUFzUEN5QUdSU0VOQTBBZ0IwRUNkQ0FDYWlJT0tBSUFRUUFnQmhCRkdpQUVLQUl3SVF3Z0IwRUNkQ0FCYWlFUElBMUZCRUJCQUNFRkEwQWdCQ2dDR0NBRlFRSjBhaWdDQUNFUUlBUkJOR29nQlVFQ2RHb29BZ0FoRVNBR0lRQWdEaWdDQUNFSVFRQWhDaUFGSUE4b0FnQnFJUXNEUUNBSUlCQWdDeTBBQUNBTVFRWjBJQkZxSUFwQkFuUnFLQUlBYW1vdEFBQWdDQzBBQUdvNkFBQWdDU0FMYWlFTElBaEJBV29oQ0NBS1FRRnFRUTl4SVFvZ0FFRi9haUlBRFFBTElBa2dCVUVCYWlJRlJ3MEFDd3NnQkNBTVFRRnFRUTl4TmdJd0lBZEJBV29pQnlBRFJ3MEFDd3ZJQWdFUGZ5QUFLQUxrQXlJRUtBSVlJZ1VvQWdBaEN5QUZLQUlFSVF3Z0JTZ0NDQ0VOSUFBb0FuQWhDaUFEUVFCTUJFQVBDeUFFS0FJd0lRQWdDa1VFUUVFQUlRRURRQ0FBUVFGcVFROXhJUUFnQVVFQmFpSUJJQU5IRFFBTElBUWdBRFlDTUE4TEEwQWdCQ2dDTkNFT0lBUW9BamdoRHlBRUtBSThJUkFnQ2lFRlFRQWhCaUFJUVFKMElBSnFLQUlBSVFrZ0NFRUNkQ0FCYWlnQ0FDRUhBMEFnQjBFRGFpRVJJQWxCQVdvaEVpQUpJQTBnQnkwQUFpQUFRUVowSUJCcUlBWkJBblJxS0FJQWFtb3RBQUFnQnkwQUFDQUFRUVowSUE1cUlBWkJBblJxS0FJQWFpQUxhaTBBQUNBTUlBY3RBQUVnQUVFR2RDQVBhaUFHUVFKMGFpZ0NBR3BxTFFBQWFtbzZBQUFnQmtFQmFrRVBjU0VHSUFWQmYyb2lCUVJBSUJJaENTQVJJUWNNQVFzTElBUWdBRUVCYWtFUGNTSUFOZ0l3SUFoQkFXb2lDQ0FEUncwQUN3dnRBUUVLZnlBQUtBTGtBeWdDR0NFTUlBQW9BbmdoQmlBQUtBSndJZ3BGSUFOQkFVaHlCRUFQQ3lBR1FRQk1CRUJCQUNFQUEwQWdBRUVDZENBQ2FpZ0NBRUVBSUFvUVJSb2dBRUVCYWlJQUlBTkhEUUFMRHdzRFFDQUtJUXNnQlVFQ2RDQUNhaWdDQUNFSElBVkJBblFnQVdvb0FnQWhBQU5BUVFBaENFRUFJUWtnQUNFRUEwQWdCRUVCYWlFTklBa2dDRUVDZENBTWFpZ0NBQ0FFTFFBQWFpMEFBR29oQ1NBSVFRRnFJZ2dnQmtjRVFDQU5JUVFNQVFzTElBQWdCbW9oQUNBSFFRRnFJUVFnQnlBSk9nQUFJQXRCZjJvaUN3UkFJQVFoQnd3QkN3c2dCVUVCYWlJRklBTkhEUUFMQzY0QkFRbC9JQUFvQXVRREtBSVlJZ1FvQWdBaEJ5QUVLQUlFSVFnZ0JDZ0NDQ0VKSUFBb0FuQWlDa1VnQTBFQlNISUVRQThMQTBBZ0NpRUFJQVZCQW5RZ0Ftb29BZ0FoQmlBRlFRSjBJQUZxS0FJQUlRUURRQ0FFUVFOcUlRc2dCa0VCYWlFTUlBWWdDU0FFTFFBQ2FpMEFBQ0FFTFFBQUlBZHFMUUFBSUFnZ0JDMEFBV290QUFCcWFqb0FBQ0FBUVg5cUlnQUVRQ0FNSVFZZ0N5RUVEQUVMQ3lBRlFRRnFJZ1VnQTBjTkFBc0xKZ0VCZnlBQUtBSUFJZ0ZCTHpZQ0ZDQUJLQUlBSVFFZ0FDQUJRZjhCY1VHc0Eyb1JBUUFMdlFVQkNYOGdBQ0FBS0FMa0F5SUNLQUlRTmdLSUFTQUFJQUlvQWhRMkFvUUJBa0FDUUFKQUFrQWdBQ2dDV0E0REFBRUNBd3NnQUNnQ2VFRURSZ1JBSUFKQkZqWUNCQVVnQWtFWE5nSUVDdzhMSUFKQkdFRVpJQUFvQW5oQkEwWWJOZ0lFSUFKQkFEWUNNQ0FDS0FJY1JRUkFJQUFRb1FNTElBSW9BalFFUUE4TElBQW9BdVFESVFJZ0FDZ0NlQ0lCUVFCTUJFQVBDd05BSUFKQklHb2dCRUVDZEdvb0FnQWhCUUpBQWtBZ0JFVU5BRUVBSVFNRFFDQUNRU0JxSUFOQkFuUnFLQUlBSUFWSEJFQWdBMEVCYWlJRElBUlBEUUlNQVFzTElBSkJOR29nQTBFQ2RHb29BZ0FpQTBVTkFBd0JDeUFBS0FJRUtBSUFJUUVnQUVFQlFZQUlJQUZCUDNGQnlnRnFFUVFBSVFZZ0JVRUpkRUdBZkdvaEJVRUFJUUVEUUVFQUlRTURRRUgvQVNBRElBRkJCSFJCc0RKcWFpMEFBRUVCZEdzaUNFSC9BV3doQnlBQlFRWjBJQVpxSUFOQkFuUnFJQWhCQUVnRWYwRUFRUUFnQjJzZ0JSQTVhd1VnQnlBRkVEa0xOZ0lBSUFOQkFXb2lBMEVRUncwQUN5QUJRUUZxSWdGQkVFY05BQXNnQmlFRElBQW9BbmdoQVFzZ0FrRTBhaUFFUVFKMGFpQUROZ0lBSUFSQkFXb2lCQ0FCU0EwQUN3OExJQUpCR2pZQ0JDQUNRUUEyQWxRZ0FpZ0NSQVIvSUFCQitBQnFJZ0VoQXlBQktBSUFJUUVnQUVId0FHb0ZJQUJCOEFCcUlnUW9BZ0FoQ1NBQVFmZ0FhaUlES0FJQVFRQk1CRUFQQ3lBSlFRRjBRUVJxSVFWQkFDRUJBMzhnQUNnQ0JDZ0NCQ0VHSUFKQnhBQnFJQUZCQW5ScUlBQkJBU0FGSUFaQlAzRkJ5Z0ZxRVFRQU5nSUFJQUZCQVdvaUFTQURLQUlBSWdaSURRQWdCaUVCSUFRTEN5Z0NBQ0VLSUFGQkFFd0VRQThMSUFwQkFYUkJCR29oQVVFQUlRQURRQ0FDUWNRQWFpQUFRUUowYWlnQ0FFRUFJQUVRUlJvZ0FFRUJhaUlBSUFNb0FnQklEUUFMRHdzZ0FDZ0NBQ0lCUVRFMkFoUWdBU2dDQUNFQklBQWdBVUgvQVhGQnJBTnFFUUVBQzhzQkFRdC9JQUFvQXVRREtBSVlJUW9nQUNnQ2NDSUxSU0FEUVFGSWNnUkFEd3NEUUNBTElRZ2dCVUVDZENBQ2FpZ0NBQ0VHSUFWQkFuUWdBV29vQWdBaEJBTkFJQVF0QUFCQkEzWWlERUVDZENBS2FpZ0NBQ0FFTFFBQlFRSjJJZ2RCQm5ScUlBUXRBQUpCQTNZaURVRUJkR29pRGk0QkFDSUpSUVJBSUFBZ0RDQUhJQTBRb2dNZ0RpNEJBQ0VKQ3lBRVFRTnFJUVFnQmtFQmFpRUhJQVlnQ1VILy93TnhRZjhCYWpvQUFDQUlRWDlxSWdnRVFDQUhJUVlNQVFzTElBVkJBV29pQlNBRFJ3MEFDd3ZLQlFFbmZ5QUFLQUxrQXlJTEtBSVlJUndnQUNnQ2NDRU1JQUFvQXRBQ0lSTWdDeWdDS0NFVUlBQW9Bb2dCSWdRb0FnQWhIU0FFS0FJRUlSNGdCQ2dDQ0NFZklBTkJBRXdFUUE4TElBeEZJU0FnREVGL2FpSWhRUU5zSVNJZ0RFRURiRUVEYWlFakEwQWdEa0VDZENBQmFpZ0NBQ0VISUE1QkFuUWdBbW9vQWdBaERTQUxJQXNvQWlRRWYwRjlJUWxCZnlFV0lBc29BaUFnSTBFQmRHb2hDQ0FOSUNGcUlRMGdCeUFpYWlFSFFRQUZRUU1oQ1VFQklSWWdDeWdDSUNFSVFRRUxOZ0lrSUNBRVFFRUFJUTlCQUNFUVFRQWhCQVVnQ1VFQmFpRWtJQWxCQW1vaEpTQUpJQXhzSVNwQkFDRVJRUUFoRWtFQUlSZEJBQ0VZUVFBaEdVRUFJUTlCQUNFUVFRQWhHaUFNSVJ0QkFDRUZJQWdoQkFOQUlCTWdKRUVCZENBRWFpNEJBQ0FSUVFocWFrRUVkVUVDZENBVWFpZ0NBQ0FITFFBQmFtb3RBQUFpQ2tFQ2RpSUdRUVowSUJNZ0NVRUJkQ0FFYWlJbkxnRUFJQVZCQ0dwcVFRUjFRUUowSUJScUtBSUFJQWN0QUFCcWFpMEFBQ0lSUVFOMkloVkJBblFnSEdvb0FnQnFJQk1nSlVFQmRDQUVhaTRCQUNBU1FRaHFha0VFZFVFQ2RDQVVhaWdDQUNBSExRQUNhbW90QUFBaUVrRURkaUlvUVFGMGFpSXBMZ0VBSWdWRkJFQWdBQ0FWSUFZZ0tCQ2lBeUFwTGdFQUlRVUxJQTBnQlVILy93TnhRWDlxSWdZNkFBQWdDaUFHSUI1cUxRQUFheUVGSUJJZ0JpQWZhaTBBQUdzaENpQUVJQThnRVNBR0lCMXFMUUFBYXlJR1FRTnNhanNCQUNBWElBWkJCV3hxSVE4Z0JrRUhiQ0VWSUFRZ0VDQUZRUU5zYWpzQkFpQVlJQVZCQld4cUlSQWdCVUVIYkNFUklBUWdHaUFLUVFOc2Fqc0JCQ0FaSUFwQkJXeHFJUVFnQ2tFSGJDRVNJQWNnQ1dvaEJ5QU5JQlpxSVEwZ0cwRi9haUliQkVBZ0JpRVhJQVVoR0NBS0lSa2dCQ0VhSUJVaEJTQW5JUVFNQVFzTElDcEJBWFFnQ0dvaENBc2dDQ0FQT3dFQUlBZ2dFRHNCQWlBSUlBUTdBUVFnRGtFQmFpSU9JQU5IRFFBTEM5Z0lBUmQvSUFBZ0FDZ0M1QU1pRXlnQ0VEWUNpQUVnQUNnQ0JDZ0NBQ0VCSUFCQkFTQVRLQUlVSWd0QkJYUWdBVUUvY1VIS0FXb1JCQUFpQlVFQU5nSUFJQVZCSHpZQ0JDQUZRUUEyQWdnZ0JVRS9OZ0lNSUFWQkFEWUNFQ0FGUVI4MkFoUWdBQ0FGRUxBQ0lBdEJBVW9FZndKL1FRRWhCQU4vSUFSQkFYUWdDMG9FUUVFQUlRWkJBQ0VDSUFVaEFVRUFJUU1EZnlBQktBSVlJZ2tnQmtvaEJ5QUpJQVlnQnhzaEJpQUJJQU1nQnhzaEF5QUJRU0JxSVFFZ0FrRUJhaUlDSUFSSERRQWdBd3NoQVFWQkFDRUdRUUFoQWlBRklRTkJBQ0VCQTBBZ0F5Z0NIQ0lISUFaS0JFQWdBeUFCSUFNb0FoaEJBRW9pQ1JzaEFTQUhJQVlnQ1JzaEJnc2dBMEVnYWlFRElBSkJBV29pQWlBRVJ3MEFDd3NnQkNBQlJRMEJHaUFFUVFWMElBVnFJQUVvQWdRMkFnUWdCRUVGZENBRmFpQUJJZ01vQWd3MkFnd2dCRUVGZENBRmFpQUJJZ0lvQWhRMkFoUWdCRUVGZENBRmFpSUdJQUlvQWdBMkFnQWdCRUVGZENBRmFrRUlhaUlISUFJb0FnZzJBZ0FnQkVFRmRDQUZha0VRYWlJSklBSW9BaEEyQWdBQ1FBSi9Ba0FDUUFKQVFRSWdBaWdDQkNJSUlBSW9BZ0FpREd0QkJIUWlDaUFDS0FJTUlnMGdBaWdDQ0NJT2EwRU1iQ0lQU2lJUVFRRnpJQUlvQWhRaUVTQUNLQUlRSWhKclFRTjBJQW9nRHlBUUcwb2JRUU54RGdNQUFRSUVDeUFCSUFnZ0RHcEJBaEE1SWdNMkFnUWdCZ3dDQ3lBRElBMGdEbXBCQWhBNUlnTTJBZ3dnQnd3QkN5QUNJQkVnRW1wQkFoQTVJZ00yQWhRZ0NRc2dBMEVCYWpZQ0FBc2dBQ0FDRUxBQ0lBQWdCaEN3QWlBRVFRRnFJZ1FnQzBnTkFDQUVDd3NGUVFFTElRdEJBQ0VJQTBBZ0FDZ0M1QU1vQWhnaER5QUlRUVYwSUFWcUtBSUFJZ0lnQ0VFRmRDQUZhaWdDQkNJUlNpQUlRUVYwSUFWcUtBSUlJZzRnQ0VFRmRDQUZhaWdDRENJU1NuSWdDRUVGZENBRmFpZ0NFQ0lOSUFoQkJYUWdCV29vQWhRaUVFcHlCRUJCQUNFQlFRQWhBMEVBSVFSQkFDRUdCVUVBSVFGQkFDRURRUUFoQkVFQUlRWURRQ0FDUVFKMElBOXFLQUlBSVJRZ0FrRURkRUVFY2lFVklBNGhCd05BSUFkQkFuUkJBbkloRmlBSFFRWjBJQlJxSUExQkFYUnFJUXdnRFNFSkEwQWdEQzRCQUNJWFFmLy9BM0VoQ2lBWEJFQWdBU0FLSUFsQkEzUkJCSEpzYWlFQklBTWdDaUFXYkdvaEF5QUVJQW9nRld4cUlRUWdCaUFLYWlFR0N5QU1RUUpxSVF3Z0NVRUJhaUVLSUFrZ0VFZ0VRQ0FLSVFrTUFRc0xJQWRCQVdvaENTQUhJQkpJQkVBZ0NTRUhEQUVMQ3lBQ1FRRnFJUWNnQWlBUlNBUkFJQWNoQWd3QkN3c0xJQVFnQmtFQmRTSUVhaUFHRURsQi93RnhJUUlnQ0NBQUtBS0lBU2dDQUdvZ0Fqb0FBQ0FESUFScUlBWVFPVUgvQVhFaEF5QUlJQUFvQW9nQktBSUVhaUFET2dBQUlBRWdCR29nQmhBNVFmOEJjU0VCSUFnZ0FDZ0NpQUVvQWdocUlBRTZBQUFnQ0VFQmFpSUlJQXRJRFFBTElBQWdDellDaEFFZ0FDZ0NBQ0lCUWVJQU5nSVVJQUVnQ3pZQ0dDQUFLQUlBS0FJRUlRRWdBRUVCSUFGQlAzRkJzZ1ZxRVFNQUlCTkJBVFlDSEF1YkFRRUdmeUFBS0FMa0F5Z0NHQ0VHSUFBb0FuQWlCMFVnQTBFQlNISUVRQThMQTBBZ0J5RUFJQVJCQW5RZ0FXb29BZ0FoQWdOQUlBSXRBQUJCQTNaQkFuUWdCbW9vQWdBZ0FpMEFBVUVDZGtFR2RHb2dBaTBBQWtFRGRrRUJkR29pQ0M0QkFDSUpRUUZxUVJCMFFSQjFJUVVnQ0NBRklBa2dCUnM3QVFBZ0FrRURhaUVDSUFCQmYyb2lBQTBBQ3lBRVFRRnFJZ1FnQTBjTkFBc0xEUUFnQUNnQzVBTkJBVFlDSEF2akJRRURmeUFBS0FMa0F5SURLQUlZSVFJZ0FDZ0NXQVIvSUFCQkFqWUNXRUVDQlVFQUN5RUVJQUVFUUNBRFFSTTJBZ1FnQTBHSEFUWUNDQ0FEUVFFMkFod0ZJQU5CRkVFVklBUkJBa1liTmdJRUlBTkJpQUUyQWdnZ0FDZ0NoQUVpQVVFQlNBUkFJQUFvQWdBaUFVRTZOZ0lVSUFGQkFUWUNHQ0FBS0FJQUtBSUFJUUVnQUNBQlFmOEJjVUdzQTJvUkFRQUZJQUZCZ0FKS0JFQWdBQ2dDQUNJQlFUczJBaFFnQVVHQUFqWUNHQ0FBS0FJQUtBSUFJUUVnQUNBQlFmOEJjVUdzQTJvUkFRQUxDeUFBS0FKWVFRSkdCRUFnQUNnQ2NFRUdiRUVNYWlFRUlBTW9BaUFpQVVVRVFDQUFLQUlFS0FJRUlRRWdBeUFBUVFFZ0JDQUJRVDl4UWNvQmFoRUVBQ0lCTmdJZ0N5QUJRUUFnQkJCRkdpQURLQUlvUlFSQUlBQVFwQU1MSUFOQkFEWUNKQXNMSUFNb0FoeEZCRUFQQ3lBQ0tBSUFRUUJCZ0NBUVJSb2dBaWdDQkVFQVFZQWdFRVVhSUFJb0FnaEJBRUdBSUJCRkdpQUNLQUlNUVFCQmdDQVFSUm9nQWlnQ0VFRUFRWUFnRUVVYUlBSW9BaFJCQUVHQUlCQkZHaUFDS0FJWVFRQkJnQ0FRUlJvZ0FpZ0NIRUVBUVlBZ0VFVWFJQUlvQWlCQkFFR0FJQkJGR2lBQ0tBSWtRUUJCZ0NBUVJSb2dBaWdDS0VFQVFZQWdFRVVhSUFJb0FpeEJBRUdBSUJCRkdpQUNLQUl3UVFCQmdDQVFSUm9nQWlnQ05FRUFRWUFnRUVVYUlBSW9BamhCQUVHQUlCQkZHaUFDS0FJOFFRQkJnQ0FRUlJvZ0FrRkFheWdDQUVFQVFZQWdFRVVhSUFJb0FrUkJBRUdBSUJCRkdpQUNLQUpJUVFCQmdDQVFSUm9nQWlnQ1RFRUFRWUFnRUVVYUlBSW9BbEJCQUVHQUlCQkZHaUFDS0FKVVFRQkJnQ0FRUlJvZ0FpZ0NXRUVBUVlBZ0VFVWFJQUlvQWx4QkFFR0FJQkJGR2lBQ0tBSmdRUUJCZ0NBUVJSb2dBaWdDWkVFQVFZQWdFRVVhSUFJb0FtaEJBRUdBSUJCRkdpQUNLQUpzUVFCQmdDQVFSUm9nQWlnQ2NFRUFRWUFnRUVVYUlBSW9BblJCQUVHQUlCQkZHaUFDS0FKNFFRQkJnQ0FRUlJvZ0FpZ0NmRUVBUVlBZ0VFVWFJQU5CQURZQ0hBdVZCQUVUZnlBQUtBTFFBaUVGSUFBb0F0d0RJZ1FvQWhBaERDQUVLQUlVSVEwZ0JDZ0NHQ0VPSUFRb0Fod2hEeUFCS0FJQUlBSkJBblJxS0FJQUlRZ2dBU2dDQkNBQ1FRSjBhaWdDQUNFRUlBRW9BZ2dnQWtFQ2RHb29BZ0FoQ1NBREtBSUFJUVlnQUNnQ2NDSUJRUUYySWdvRVFDQUVJQXBxSVJZZ0FVRitjU0VTSUFwQkJtd2hFeUFKSVFNZ0NDRUNJQVloQVNBS0lSQURRQ0FFUVFGcUlSUWdBMEVCYWlFVklBTXRBQUFpQjBFQ2RDQU1haWdDQUNFRElBUXRBQUFpQzBFQ2RDQVBhaWdDQUNBSFFRSjBJQTVxS0FJQWFrRVFkU0VFSUF0QkFuUWdEV29vQWdBaEN5QUJJQU1nQWkwQUFDSUhhaUFGYWl3QUFEb0FBQ0FCSUFRZ0Iyb2dCV29zQUFBNkFBRWdBU0FISUF0cUlBVnFMQUFBT2dBQ0lBSkJBbW9oQnlBQklBTWdBaTBBQVNJQ2FpQUZhaXdBQURvQUF5QUJJQVVnQWlBRWFtb3NBQUE2QUFRZ0FTQUZJQUlnQzJwcUxBQUFPZ0FGSUFGQkJtb2hBU0FRUVg5cUloQUVRQ0FWSVFNZ0ZDRUVJQWNoQWd3QkN3c2dDU0FLYWlFSklCWWhCQ0FJSUJKcUlRZ2dCaUFUYWlFR0lBQW9BbkFoQVFzZ0FVRUJjVVVFUUE4TElBUXRBQUFpQUVFQ2RDQVBhaWdDQUNBSkxRQUFJZ0ZCQW5RZ0Rtb29BZ0JxUVJCMUlRSWdBRUVDZENBTmFpZ0NBQ0VESUFZZ0NDMEFBQ0lBSUFGQkFuUWdER29vQWdCcUlBVnFMQUFBT2dBQUlBWWdBQ0FDYWlBRmFpd0FBRG9BQVNBR0lBQWdBMm9nQldvc0FBQTZBQUlMUndBZ0FDZ0MzQU1vQWd3aEF5QUFJQUVnQWlnQ0FDQUZLQUlBUVFKMElBUnFJQU5CSDNGQitnVnFFUWNBSUFVZ0JTZ0NBRUVCYWpZQ0FDQUNJQUlvQWdCQkFXbzJBZ0FMZ0FZQkYzOGdBQ2dDMEFJaEJTQUFLQUxjQXlJRUtBSVFJUThnQkNnQ0ZDRVFJQVFvQWhnaEVTQUVLQUljSVJJZ0FTZ0NBQ0lISUFKQkFYUWlCRUVDZEdvb0FnQWhEQ0FFUVFGeVFRSjBJQWRxS0FJQUlRUWdBU2dDQkNBQ1FRSjBhaWdDQUNFR0lBRW9BZ2dnQWtFQ2RHb29BZ0FoRFNBREtBSUFJUWdnQXlnQ0JDRUpJQUFvQW5BaUFVRUJkaUlPQkVBZ0JpQU9haUVhSUE1QkJtd2hFeUFFSUFGQmZuRWlGbW9oRnlBTklRY2dCQ0VESUF3aEJDQUpJUUVnQ0NFQ0lBNGhGQU5BSUFaQkFXb2hHQ0FIUVFGcUlSa2dCeTBBQUNJS1FRSjBJQTlxS0FJQUlRY2dCaTBBQUNJTFFRSjBJQkpxS0FJQUlBcEJBblFnRVdvb0FnQnFRUkIxSVFZZ0MwRUNkQ0FRYWlnQ0FDRUxJQUlnQnlBRUxRQUFJZ3BxSUFWcUxBQUFPZ0FBSUFJZ0JpQUthaUFGYWl3QUFEb0FBU0FDSUFvZ0Myb2dCV29zQUFBNkFBSWdCRUVDYWlFS0lBSWdCU0FISUFRdEFBRWlCR3BxTEFBQU9nQURJQUlnQlNBRUlBWnFhaXdBQURvQUJDQUNJQVVnQkNBTGFtb3NBQUE2QUFVZ0FrRUdhaUVDSUFFZ0JTQUhJQU10QUFBaUJHcHFMQUFBT2dBQUlBRWdCU0FFSUFacWFpd0FBRG9BQVNBQklBVWdCQ0FMYW1vc0FBQTZBQUlnQTBFQ2FpRUVJQUVnQXkwQUFTSURJQWRxSUFWcUxBQUFPZ0FESUFFZ0F5QUdhaUFGYWl3QUFEb0FCQ0FCSUFNZ0Myb2dCV29zQUFBNkFBVWdBVUVHYWlFQklCUkJmMm9pRkFSQUlCa2hCeUFZSVFZZ0JDRURJQW9oQkF3QkN3c2dEU0FPYWlFTklCb2hCaUFYSVFRZ0RDQVdhaUVNSUFrZ0Uyb2hDU0FJSUJOcUlRZ2dBQ2dDY0NFQkN5QUJRUUZ4UlFSQUR3c2dEUzBBQUNJQlFRSjBJQTlxS0FJQUlRQWdCaTBBQUNJQ1FRSjBJQkpxS0FJQUlBRkJBblFnRVdvb0FnQnFRUkIxSVFFZ0FrRUNkQ0FRYWlnQ0FDRUNJQWdnQUNBTUxRQUFJZ05xSUFWcUxBQUFPZ0FBSUFnZ0FTQURhaUFGYWl3QUFEb0FBU0FJSUFJZ0Eyb2dCV29zQUFBNkFBSWdDU0FBSUFRdEFBQWlBR29nQldvc0FBQTZBQUFnQ1NBQUlBRnFJQVZxTEFBQU9nQUJJQWtnQUNBQ2FpQUZhaXdBQURvQUFndThFd0lQZndGOEl3WWhEaU1HUVJCcUpBWWdCQ2dDQUNJR0lRMGdBU0FDUVg5cUloQnNRUUYwSUFacUlRVURRQ0FISUFGSUJFQWdCVUVBT3dFQUlBMUJBRHNCQUNBTlFRSnFJUTBnQlVFQ2FpRUZJQWRCQVdvaEJ3d0JDd3NnQmlFSElBRkJmMm9pRVVFQmRDQUdhaUVOUVFBaEJRTkFJQVVnQWtnRVFDQU5RUUE3QVFBZ0IwRUFPd0VBSUFGQkFYUWdCMm9oQnlBQlFRRjBJQTFxSVEwZ0JVRUJhaUVGREFFTEN5QUVRWkNBeUFCcUlRZEJBQ0FCYXlFU0lBQWdBVUVCYWlJQWFpRU5RUUVoQzBFQUlRVWdBRUVCZENBR2FpRUdBbjhDUUFOQUFrQWdDeUFRVGcwQ0lBVWhBRUVCSVFrZ0JpRU1BMEFnQ1NBUlNBUkFJQTB0QUFBZ0Ewb0VRQUpBSUJKQkFYUWdER29pRHk0QkFDSUZRUUJLQkVBZ0RDQUZPd0VBSUFWQkIyd2lCa0VDZENBRWFrSDAvODhBYWlJRklBVW9BZ0JCQVdvMkFnQWdCa0VDZENBRWFrSDQvODhBYWlJRklBa2dCU2dDQUdvMkFnQWdCa0VDZENBRWFrSDgvODhBYWlJRklBc2dCU2dDQUdvMkFnQWdCa0VDZENBRWFrR01nTkFBYWlBTE5nSUFEQUVMSUE5QmZtb3VBUUFpQ2lFSUlBcEJBRW9oQmlBUExnRUNJZ1ZCQUV3RVFDQUdCRUFnRENBS093RUFJQWhCQjJ3aUJrRUNkQ0FFYWtIMC84OEFhaUlGSUFVb0FnQkJBV28yQWdBZ0JrRUNkQ0FFYWtINC84OEFhaUlGSUFrZ0JTZ0NBR28yQWdBZ0JrRUNkQ0FFYWtIOC84OEFhaUlGSUFzZ0JTZ0NBR28yQWdBZ0JrRUNkQ0FFYWtHRWdOQUFhaUlGS0FJQUlBbElCRUFnQlNBSk5nSUFDeUFHUVFKMElBUnFRWXlBMEFCcUlBczJBZ0FNQWdzZ0RFRithaTRCQUNJRlFRQktCRUFnRENBRk93RUFJQVZCQjJ3aUJrRUNkQ0FFYWtIMC84OEFhaUlGSUFVb0FnQkJBV28yQWdBZ0JrRUNkQ0FFYWtINC84OEFhaUlGSUFrZ0JTZ0NBR28yQWdBZ0JrRUNkQ0FFYWtIOC84OEFhaUlGSUFzZ0JTZ0NBR28yQWdBZ0JrRUNkQ0FFYWtHRWdOQUFhaUlGS0FJQUlBbE9EUUlnQlNBSk5nSUFCU0FBUWYvL0FVb05CaUFNSUFCQkFXb2lCVHNCQUNBRVFaQ0F5QUJxSUFCQkFuUnFJQVZCRUhSQkVIVTJBZ0FnQkVHUWdOQUFhaUFBUVFkc0lnQkJBblJxUVFFMkFnQWdBRUVDZENBRWFrR1VnTkFBYWlBSk5nSUFJQUJCQW5RZ0JHcEJtSURRQUdvZ0N6WUNBQ0FBUVFKMElBUnFRWnlBMEFCcUlBazJBZ0FnQUVFQ2RDQUVha0dnZ05BQWFpQUpOZ0lBSUFCQkFuUWdCR3BCcElEUUFHb2dDellDQUNBQVFRSjBJQVJxUWFpQTBBQnFJQXMyQWdBZ0JTRUFDd3dCQ3lBR0JFQUNRQ0FGUVFKMElBUnFRWXlBeUFCcUtBSUFJZ1VnQ0VFQ2RDQUVha0dNZ01nQWFpZ0NBQ0lJU2dSQUlBd2dDRHNCQUNBSElRWkJBQ0VLQTBBZ0NpQUFUZ1JBSUFnaEJRd0RDeUFGSUFZb0FnQkdCRUFnQmlBSU5nSUFDeUFHUVFScUlRWWdDa0VCYWlFS0RBQUFDd0FGSUF3Z0JUc0JBQ0FGSUFoSUJFQWdCeUVHUVFBaENnTkFJQW9nQUU0TkF5QUlJQVlvQWdCR0JFQWdCaUFGTmdJQUN5QUdRUVJxSVFZZ0NrRUJhaUVLREFBQUN3QUxDd3NnQlVFUWRFRVFkVUVIYkNJR1FRSjBJQVJxUWZUL3p3QnFJZ1VnQlNnQ0FFRUJhallDQUNBR1FRSjBJQVJxUWZqL3p3QnFJZ1VnQ1NBRktBSUFhallDQUNBR1FRSjBJQVJxUWZ6L3p3QnFJZ1VnQ3lBRktBSUFhallDQUNBR1FRSjBJQVJxUVl5QTBBQnFJQXMyQWdBTUFRc2dERUYrYWk0QkFDSUdRUUJNQkVBZ0RDQUZPd0VBSUFWQkIyd2lCa0VDZENBRWFrSDAvODhBYWlJRklBVW9BZ0JCQVdvMkFnQWdCa0VDZENBRWFrSDQvODhBYWlJRklBa2dCU2dDQUdvMkFnQWdCa0VDZENBRWFrSDgvODhBYWlJRklBc2dCU2dDQUdvMkFnQWdCa0VDZENBRWFrR0FnTkFBYWlJRktBSUFJQWxLQkVBZ0JTQUpOZ0lBQ3lBR1FRSjBJQVJxUVl5QTBBQnFJQXMyQWdBTUFRc0NRQ0FGUVFKMElBUnFRWXlBeUFCcUtBSUFJZ1VnQmtFQ2RDQUVha0dNZ01nQWFpZ0NBQ0lJU2dSQUlBd2dDRHNCQUNBSElRWkJBQ0VLQTBBZ0NpQUFUZ1JBSUFnaEJRd0RDeUFHS0FJQUlBVkdCRUFnQmlBSU5nSUFDeUFHUVFScUlRWWdDa0VCYWlFS0RBQUFDd0FGSUF3Z0JUc0JBQ0FGSUFoSUJFQWdCeUVHUVFBaENnTkFJQW9nQUU0TkF5QUlJQVlvQWdCR0JFQWdCaUFGTmdJQUN5QUdRUVJxSVFZZ0NrRUJhaUVLREFBQUN3QUxDd3NnQlVFUWRFRVFkVUVIYkNJR1FRSjBJQVJxUWZUL3p3QnFJZ1VnQlNnQ0FFRUJhallDQUNBR1FRSjBJQVJxUWZqL3p3QnFJZ1VnQ1NBRktBSUFhallDQUNBR1FRSjBJQVJxUWZ6L3p3QnFJZ1VnQ3lBRktBSUFhallDQUFzRklBeEJBRHNCQUFzZ0RVRUJhaUVOSUFsQkFXb2hDU0FNUVFKcUlRd01BUXNMSUExQkFtb2hEU0FMUVFGcUlRc2dBQ0VGSUF4QkJHb2hCZ3dCQ3d0QkFFRURRYWlsQVNBT0VEMUJmd3dCQ3lBRVFReHFJUTFCQVNFQVFRRWhDQU5BSUFnZ0JVd0VRQ0FJSUFjb0FnQWlCa1lFUUNBQVFRRnFJUU1GSUFBaEF5QUdRUUowSUFScVFZeUF5QUJxS0FJQUlRQUxJQWNnQURZQ0FDQURJUUFnQ0VFQmFpRUlJQWRCQkdvaEJ3d0JDd3NnQkNBQVFYOXFJZ2MyQWdnZ0J3Ui9JQTFCQUNBSFFRSjBFRVVhSUFSQmtJQW9ha0VBSUFkQkJIUVFSUnBCQUNFREEwQWdBeUFIU0FSQUlBUkJqSUFJYWlBRFFRSjBJZ0JCQW5ScUlBRTJBZ0FnQkVHTWdBaHFJQUJCQVhKQkFuUnFRUUEyQWdBZ0JFR01nQWhxSUFCQkFuSkJBblJxSUFJMkFnQWdCRUdNZ0FocUlBQkJBM0pCQW5ScVFRQTJBZ0FnQTBFQmFpRUREQUVMQzBFQUlRTURRQ0FESUFWSUJFQWdCRUVNYWlBRVFaQ0F5QUJxSUFOQkFuUnFLQUlBUVg5cUlnSkJBblJxSWdBZ0JFR1FnTkFBYWlBRFFRZHNJZ2RCQW5ScUtBSUFJQUFvQWdCcU5nSUFJQVJCa0lBb2FpQUNRUUYwSWdGQkEzUnFJZ0FnQUNzREFDQUhRUUowSUFScVFaU0EwQUJxS0FJQXQ2QTVBd0FnQkVHUWdDaHFJQUZCQVhKQkEzUnFJZ0FnQUNzREFDQUhRUUowSUFScVFaaUEwQUJxS0FJQXQ2QTVBd0FnQkVHTWdBaHFJQUpCQW5RaUFrRUNkR29pQVNnQ0FDQUhRUUowSUFScVFaeUEwQUJxS0FJQUlnQktCRUFnQVNBQU5nSUFDeUFFUVl5QUNHb2dBa0VCY2tFQ2RHb2lBU2dDQUNBSFFRSjBJQVJxUWFDQTBBQnFLQUlBSWdCSUJFQWdBU0FBTmdJQUN5QUVRWXlBQ0dvZ0FrRUNja0VDZEdvaUFTZ0NBQ0FIUVFKMElBUnFRYVNBMEFCcUtBSUFJZ0JLQkVBZ0FTQUFOZ0lBQ3lBRVFZeUFDR29nQWtFRGNrRUNkR29pQVNnQ0FDQUhRUUowSUFScVFhaUEwQUJxS0FJQUlnQklCRUFnQVNBQU5nSUFDeUFEUVFGcUlRTU1BUXNMSUFRb0FnZ2hBa0VBSVFNRGZ5QURJQUpJQkg4Z0JFR1FnQ2hxSUFOQkFYUWlBVUVEZEdvaUFDQUFLd01BSUFSQkRHb2dBMEVDZEdvb0FnQzNJaFNqT1FNQUlBUkJrSUFvYWlBQlFRRnlRUU4wYWlJQUlBQXJBd0FnRktNNUF3QWdBMEVCYWlFRERBRUZRUUFMQ3dWQkFBc0xJUk1nRGlRR0lCTUxuZ0lCQkg4akJpRURJd1pCRUdva0JpQUFLQUxjQXlJSEtBSWtCRUFnQjBFZ2FrRUFJQVVvQWdCQkFuUWdCR3BCQUVFQklBY29BaWdROXdFZ0IwRUFOZ0lrSUFVZ0JTZ0NBRUVCYWpZQ0FDQUhJQWNvQWl4QmYybzJBaXdGSUFZZ0JTZ0NBQ0lKYXlJR0lBY29BaXdpQ0VFQ0lBaEJBa2tiSWdnZ0NDQUdTeHNoQmlBRElBbEJBblFnQkdvb0FnQTJBZ0FnQmtFQlN3UkFJQU1nQ1VFQmFrRUNkQ0FFYWlnQ0FEWUNCQVVnQXlBSEtBSWdOZ0lFSUFkQkFUWUNKQXNnQnlnQ0RDRUVJQUFnQVNBQ0tBSUFJQU1nQkVFZmNVSDZCV29SQndBQ2Z5QUhLQUlrUlNFS0lBVWdCaUFGS0FJQWFqWUNBQ0FISUFjb0Fpd2dCbXMyQWl3Z0NrVUxCRUFnQXlRR0R3c0xJQUlnQWlnQ0FFRUJhallDQUNBREpBWUxHd0VCZnlBQUtBTGNBeUlCUVFBMkFpUWdBU0FBS0FKME5nSXNDN29CQVFkL0lBQW9BaVFoQlNBQUtBSndJUWdnQkVFQVRBUkFEd3NnQlVFQVRBUkFEd3NnQ0VVaENnTkFJQXBGQkVCQkFDRUFBMEJCQUNFSklBQkJBblFnQVdvb0FnQWdBa0VDZEdvb0FnQWhCaUFBSUFNb0FnQnFJUWNEUUNBR1FRRnFJUXNnQnlBR0xBQUFPZ0FBSUFVZ0Iyb2hCeUFJSUFsQkFXb2lDVWNFUUNBTElRWU1BUXNMSUFVZ0FFRUJhaUlBUncwQUN3c2dCRUYvYWlFQUlBSkJBV29oQWlBRFFRUnFJUU1nQkVFQlNnUkFJQUFoQkF3QkN3c0wyQUlCRDM4Z0FDZ0NjQ0VHSUFBb0F0QUNJUVVnQUNnQzRBTWlBQ2dDQ0NFSklBQW9BZ3doQ2lBQUtBSVFJUXNnQUNnQ0ZDRU1JQVJCQUV3RVFBOExJQVpGQkVBUEN3TkFJQVJCZjJvaERTQUJLQUlBSUFKQkFuUnFLQUlBSVE0Z0FTZ0NCQ0FDUVFKMGFpZ0NBQ0VQSUFFb0FnZ2dBa0VDZEdvb0FnQWhFQ0FCS0FJTUlBSkJBblJxS0FJQUlSRWdBa0VCYWlFU0lBTW9BZ0FoQWtFQUlRQURRQ0FBSUE5cUxRQUFJUWNnQWlBRklBQWdEbW9zQUFCQmYzTkIvd0Z4SWdnZ0FDQVFhaTBBQUNJVFFRSjBJQWxxS0FJQWEyb3NBQUE2QUFBZ0FpQUZJQWdnQjBFQ2RDQU1haWdDQUNBVFFRSjBJQXRxS0FJQWFrRVFkV3RxTEFBQU9nQUJJQUlnQlNBSUlBZEJBblFnQ21vb0FnQnJhaXdBQURvQUFpQUNJQUFnRVdvc0FBQTZBQU1nQWtFRWFpRUNJQVlnQUVFQmFpSUFSdzBBQ3lBRFFRUnFJUU1nQkVFQlNnUkFJQkloQWlBTklRUU1BUXNMQzlNQkFRbC9JQUFvQW5BaEJTQUVRUUJNQkVBUEN5QUZSUVJBRHdzRFFDQUVRWDlxSVFZZ0FTZ0NBQ0FDUVFKMGFpZ0NBQ0VISUFFb0FnUWdBa0VDZEdvb0FnQWhDQ0FCS0FJSUlBSkJBblJxS0FJQUlRa2dBa0VCYWlFS1FRQWhBQ0FES0FJQUlRSURRQ0FBSUFscUxRQUFJUXNnQWlBQUlBaHFMQUFBSWd4Qi93RnhRWUFCYWlJTklBQWdCMm90QUFCcU9nQUFJQUlnRERvQUFTQUNJQXNnRFdvNkFBSWdBa0VEYWlFQ0lBVWdBRUVCYWlJQVJ3MEFDeUFEUVFScUlRTWdCRUVCU2dSQUlBb2hBaUFHSVFRTUFRc0xDNzBCQVFaL0lBQW9BbkFoQlNBRVFRQk1CRUFQQ3lBRlJRUkFEd3NEUUNBRVFYOXFJUVlnQVNnQ0FDQUNRUUowYWlnQ0FDRUhJQUVvQWdRZ0FrRUNkR29vQWdBaENDQUJLQUlJSUFKQkFuUnFLQUlBSVFrZ0FrRUJhaUVLUVFBaEFDQURLQUlBSVFJRFFDQUNJQUFnQjJvc0FBQTZBQUFnQWlBQUlBaHFMQUFBT2dBQklBSWdBQ0FKYWl3QUFEb0FBaUFDUVFOcUlRSWdCU0FBUVFGcUlnQkhEUUFMSUFOQkJHb2hBeUFFUVFGS0JFQWdDaUVDSUFZaEJBd0JDd3NMdEFJQkRuOGdBQ2dDY0NFR0lBQW9BdEFDSVFVZ0FDZ0M0QU1pQUNnQ0NDRUpJQUFvQWd3aENpQUFLQUlRSVFzZ0FDZ0NGQ0VNSUFSQkFFd0VRQThMSUFaRkJFQVBDd05BSUFSQmYyb2hEU0FCS0FJQUlBSkJBblJxS0FJQUlRNGdBU2dDQkNBQ1FRSjBhaWdDQUNFUElBRW9BZ2dnQWtFQ2RHb29BZ0FoRUNBQ1FRRnFJUkVnQXlnQ0FDRUNRUUFoQUFOQUlBQWdEMm90QUFBaEJ5QUNJQVVnQUNBT2FpMEFBQ0lJSUFBZ0VHb3RBQUFpRWtFQ2RDQUphaWdDQUdwcUxBQUFPZ0FBSUFJZ0JTQUlJQWRCQW5RZ0RHb29BZ0FnRWtFQ2RDQUxhaWdDQUdwQkVIVnFhaXdBQURvQUFTQUNJQVVnQ0NBSFFRSjBJQXBxS0FJQWFtb3NBQUE2QUFJZ0FrRURhaUVDSUFZZ0FFRUJhaUlBUncwQUN5QURRUVJxSVFNZ0JFRUJTZ1JBSUJFaEFpQU5JUVFNQVFzTEM0b0JBUVYvSUFBb0FuQWlCMFVnQkVFQlNISUVRQThMQTBBZ0JFRi9haUVJSUFFb0FnQWdBa0VDZEdvb0FnQWhDVUVBSVFBZ0F5Z0NBQ0VGQTBBZ0JTQUFJQWxxTEFBQUlnWTZBQUlnQlNBR09nQUJJQVVnQmpvQUFDQUZRUU5xSVFVZ0J5QUFRUUZxSWdCSERRQUxJQUpCQVdvaEFpQURRUVJxSVFNZ0JFRUJTZ1JBSUFnaEJBd0JDd3NMOUFFQkNYOGdBQ2dDNEFNb0FoZ2hCU0FBS0FKd0lRWWdCRUVBVEFSQUR3c2dCa1VFUUE4TEEwQWdCRUYvYWlFSElBRW9BZ0FnQWtFQ2RHb29BZ0FoQ0NBQktBSUVJQUpCQW5ScUtBSUFJUWtnQVNnQ0NDQUNRUUowYWlnQ0FDRUtJQUpCQVdvaEFpQURLQUlBSVF0QkFDRUFBMEFnQUNBTGFpQUFJQWxxTFFBQUlneEJnQUZxSWcwZ0FDQUlhaTBBQUdwQi93RnhRUUowSUFWcUtBSUFJQXhCZ0FKeVFRSjBJQVZxS0FJQWFpQUFJQXBxTFFBQUlBMXFRZjhCY1VHQUJISkJBblFnQldvb0FnQnFRUkIyT2dBQUlBQkJBV29pQUNBR1J3MEFDeUFEUVFScUlRTWdCRUVCU2dSQUlBY2hCQXdCQ3dzTDNnRUJCMzhnQUNnQzRBTW9BaGdoQlNBQUtBSndJUVlnQkVFQVRBUkFEd3NnQmtVRVFBOExBMEFnQkVGL2FpRUhJQUVvQWdBZ0FrRUNkR29vQWdBaENDQUJLQUlFSUFKQkFuUnFLQUlBSVFrZ0FTZ0NDQ0FDUVFKMGFpZ0NBQ0VLSUFKQkFXb2hBaUFES0FJQUlRdEJBQ0VBQTBBZ0FDQUxhaUFBSUFwcUxRQUFRWUFFY2tFQ2RDQUZhaWdDQUNBQUlBaHFMUUFBUVFKMElBVnFLQUlBSUFBZ0NXb3RBQUJCZ0FKeVFRSjBJQVZxS0FJQWFtcEJFSFk2QUFBZ0FFRUJhaUlBSUFaSERRQUxJQU5CQkdvaEF5QUVRUUZLQkVBZ0J5RUVEQUVMQ3dzeUFRRi9JQUFvQWdRZ0FDZ0NDQkNMQVNJQkJFQWdBU0FBRUxRRlFRQklCRUFnQVJCSlFRQWhBUXNGUVFBaEFRc2dBUXNYQUNBQktBSUFJQUlnQTBFQUlBUWdBQ2dDY0JEM0FRdUhCQUVNZnlBREtBSUFJUWdnQVNnQ0JDSURJQUFvQXR3RElnVkJqQUZxYWl3QUFDRUJJQU1nQlVHV0FXcHFMUUFBSVFNZ0FDZ0N3QUlpQkVFQVRBUkFEd3NnQVVIL0FYRWhCU0FCUVFCSElRd2dBMEgvQVhFaUNrRi9haUVOSUFOQi93RnhRUUZLQkVBZ0JVRitJQVZCZjNNZ0FSdHFRUUpxSVE1QkFDRUVBMEFDUUNBRVFRSjBJQWhxS0FJQUlnTWdBQ2dDY0NJQmFpRVBJQUZCQUVvRVFDQU1SUTBCSUFaQkFuUWdBbW9vQWdBaEJ5QURJUUVEUUNBQklBY3NBQUFnRGhCRkdpQUZJUU1EUUNBQlFRRnFJUUVnQTBGL2FpRUxJQU5CQVVvRVFDQUxJUU1NQVFzTElBZEJBV29oQnlBQklBOUpEUUFMSUFBb0FuQWhBUXNnQ0NBRUlBZ2dCRUVCYWlBTklBRVE5d0VnQmtFQmFpRUdJQVFnQ21vaUJDQUFLQUxBQWtnTkFVRWJJUWtMQ3lBSlFSdEdCRUFQQ3dOQURBQUFDd0FMSUF4RkJFQWdBQ2dDY0VFQVNpRUJRUUFoQUFOL0lBRUVmMEVBQlNBQUlBcHFJZ0FnQkVnRWZ3d0NCVUViQ3dzTFFSdEdCRUFQQ3dOQURBQUFDd0FMUVFBaEJBTkFJQVpCQW5RZ0NHb29BZ0FpQVNBQUtBSndJZ05xSVFrZ0EwRUFTZ1JBSUFSQkFuUWdBbW9vQWdBaEJ3TkFJQUVnQnl3QUFDQUZFRVVhSUFVaEF3TkFJQUZCQVdvaEFTQURRWDlxSVFzZ0EwRUJTZ1JBSUFzaEF3d0JDd3NnQjBFQmFpRUhJQUVnQ1VrTkFBc0xJQVJCQVdvaEJDQUdJQXBxSWdZZ0FDZ0N3QUpJRFFBTEM2OEJBUVYvSUFNb0FnQWhCU0FBS0FMQUFrRUFUQVJBRHd0QkFDRURBMEFnQTBFQ2RDQUZhaWdDQUNJSElBQW9BbkFpQVdvaENDQUJRUUJLQkVBZ0JrRUNkQ0FDYWlnQ0FDRUVJQWNoQVFOQUlBUkJBV29oQnlBQklBUXNBQUFpQkRvQUFDQUJJQVE2QUFFZ0FVRUNhaUlCSUFoSkJFQWdCeUVFREFFTEN5QUFLQUp3SVFFTElBVWdBeUFGSUFOQkFYSkJBU0FCRVBjQklBWkJBV29oQmlBRFFRSnFJZ01nQUNnQ3dBSklEUUFMQzVVQkFRUi9JQU1vQWdBaEJpQUFLQUxBQWlJQlFRQk1CRUFQQzBFQUlRTURRQ0FEUVFKMElBWnFLQUlBSWdVZ0FDZ0NjQ0lFYWlFSElBUkJBRW9FUUNBRFFRSjBJQUpxS0FJQUlRUWdCU0VCQTBBZ0JFRUJhaUVGSUFFZ0JDd0FBQ0lFT2dBQUlBRWdCRG9BQVNBQlFRSnFJZ0VnQjBrRVFDQUZJUVFNQVFzTElBQW9Bc0FDSVFFTElBTkJBV29pQXlBQlNBMEFDd3NKQUNBRElBSTJBZ0FMQ1FBZ0EwRUFOZ0lBQzhvQ0FRTi9JQUFvQXR3RElnY29BbHdpQ0NBQUtBTEFBaUlEU0FSL0lBZ0ZJQUFvQWlSQkFFb0VRQ0FBS0FMWUFTRUlRUUFoQXdOQUlBZEJOR29nQTBFQ2RHb29BZ0FoQ1NBQUlBZ2dBMEVDZENBQmFpZ0NBQ0FDS0FJQUlBZEI1QUJxSUFOQkFuUnFLQUlBYkVFQ2RHb2dCMEVNYWlBRFFRSjBhaUFKUVI5eFFmb0ZhaEVIQUNBSVFkZ0FhaUVJSUFOQkFXb2lBeUFBS0FJa1NBMEFDeUFBS0FMQUFpRURDeUFIUVFBMkFseEJBQXNoQVNBR0lBVW9BZ0FpQm1zaUNDQUhLQUpnSWdrZ0F5QUJheUlESUFNZ0NVc2JJZ01nQXlBSVN4c2hBeUFBS0FMZ0F5Z0NCQ0VJSUFBZ0IwRU1haUFCSUFaQkFuUWdCR29nQXlBSVFUOXhRWm9HYWhFRkFDQUZJQU1nQlNnQ0FHbzJBZ0FnQnlBSEtBSmdJQU5yTmdKZ0lBY2dBeUFIS0FKY2FpSUJOZ0pjSUFFZ0FDZ0N3QUpJQkVBUEN5QUNJQUlvQWdCQkFXbzJBZ0FMSHdFQmZ5QUFLQUxjQXlJQklBQW9Bc0FDTmdKY0lBRWdBQ2dDZERZQ1lBdUhBZ0VGZnlBQUtBTElBeUlIS0FJWUlnTUVRQ0FIUVJScUlRRWdCMEVRYWlFQ0lBY29BZ3doQ1FVZ0FDZ0NCQ2dDSENFRElBY2dBQ0FIS0FJSUlBZEJGR29pQVNnQ0FDQUhRUkJxSWdJb0FnQkJBQ0FEUVI5eFFhSUNhaEVJQUNJSk5nSU1JQWNvQWhnaEF3c2dBQ2dDZENBQktBSUFheUlJSUFZZ0JTZ0NBQ0lLYXlJR0lBSW9BZ0FnQTJzaUN5QUxJQVpMR3lJR0lBWWdDRXNiSVFZZ0FDZ0M1QU1vQWdRaENDQUFJQU5CQW5RZ0NXb2dDa0VDZENBRWFpQUdJQWhCSDNGQitnVnFFUWNBSUFVZ0JpQUZLQUlBYWpZQ0FDQUhJQVlnQnlnQ0dHb2lBRFlDR0NBQUlBSW9BZ0FpQUVrRVFBOExJQUVnQUNBQktBSUFhallDQUNBSFFRQTJBaGdMaWdJQkJYOGdBQ2dDeUFNaUIwRVlhaUlJS0FJQUlnUUVRQ0FIUVJCcUlRWWdCMEVNYWlJSklRb2dDU2dDQUNFSkJTQUFLQUlFS0FJY0lRUWdCMEVNYWlJS0lBQWdCeWdDQ0NBSEtBSVVJQWRCRUdvaUJpZ0NBRUVCSUFSQkgzRkJvZ0pxRVFnQUlnazJBZ0FnQ0NnQ0FDRUVDeUFBS0FMY0F5Z0NCQ0VMSUFBZ0FTQUNJQU1nQ1NBSUlBWW9BZ0FnQzBFSGNVSGlCbW9SRFFBZ0NDZ0NBQ0lCSUFSTEJFQWdBQ2dDNUFNb0FnUWhBaUFBSUFvb0FnQWdCRUVDZEdwQkFDQUJJQVJySWdBZ0FrRWZjVUg2QldvUkJ3QWdCU0FBSUFVb0FnQnFOZ0lBSUFnb0FnQWhBUXNnQVNBR0tBSUFJZ0JKQkVBUEN5QUhJQUFnQnlnQ0ZHbzJBaFFnQ0VFQU5nSUFDNThCQVFSL0l3WWhCeU1HUVJCcUpBWWdCaUFGS0FJQWF5RUlJQUFvQXNnRElna29BaEFoQ2lBSFFRQTJBZ0FnQUNnQzNBTW9BZ1FoQmlBQUlBRWdBaUFESUFrb0Fnd2dCeUFLSUFnZ0NDQUtTeHNnQmtFSGNVSGlCbW9SRFFBZ0FDZ0M1QU1vQWdRaEFTQUFJQWtvQWd3Z0JTZ0NBRUVDZENBRWFpQUhLQUlBSUFGQkgzRkIrZ1ZxRVFjQUlBVWdCeWdDQUNBRktBSUFhallDQUNBSEpBWUxrZ0lCQVg4Z0FDZ0N5QU1oQWdKQUFrQUNRQUpBQWtBZ0FRNEVBQU1DQVFNTElBQW9BbFJGQkVBZ0FpQUFLQUxjQXlnQ0JEWUNCQXdFQ3lBQ1FRUTJBZ1FnQWlnQ0RFVUVRQ0FBS0FJRUtBSWNJUUVnQWlBQUlBSW9BZ2hCQUNBQ0tBSVFRUUVnQVVFZmNVR2lBbW9SQ0FBMkFnd0xEQU1MSUFJb0FnaEZCRUFnQUNnQ0FDSUJRUU0yQWhRZ0FTZ0NBQ0VCSUFBZ0FVSC9BWEZCckFOcUVRRUFDeUFDUVFVMkFnUU1BZ3NnQWlnQ0NFVUVRQ0FBS0FJQUlnRkJBellDRkNBQktBSUFJUUVnQUNBQlFmOEJjVUdzQTJvUkFRQUxJQUpCQmpZQ0JBd0JDeUFBS0FJQUlnRkJBellDRkNBQktBSUFJUUVnQUNBQlFmOEJjVUdzQTJvUkFRQUxJQUpCQURZQ0dDQUNRUUEyQWhRTEtRRUJmeUFBS0FMSUF5Z0NCQ0VFSUFCQkFFRUFRUUFnQVNBQ0lBTWdCRUVIY1VIaUJtb1JEUUFMZndFRWZ5QUFLQUxBQXlJRVFUQnFJZ1lvQWdBZ0JDZ0NOQ0lGU1FSQUlBUkJDR29oQndVZ0FDZ0N4QU1vQWd3aEJTQUFJQVJCQ0dvaUJ5QUZRVDl4UVlvQmFoRUNBQVIvSUFaQkFEWUNBQ0FFS0FJMEJROExJUVVMSUFBb0FzZ0RLQUlFSVFRZ0FDQUhJQVlnQlNBQklBSWdBeUFFUVFkeFFlSUdhaEVOQUF1VkJ3RVBmeUFBS0FMQUF5SUVLQUk0UlFSQUlBQW9Bc1FES0FJTUlRZ2dBQ0FFUVR4cUlBUW9Ba1JCQW5ScUtBSUFJQWhCUDNGQmlnRnFFUUlBQkVBZ0JFRUJOZ0k0SUFRZ0JDZ0NURUVCYWpZQ1RBVVBDd3NDUUFKQUFrQUNRQUpBQWtBZ0JDZ0NTQTREQVFJQUF3c2dBQ2dDeUFNb0FnUWhCU0FBSUFSQlBHb2dCQ2dDUkVFQ2RHb29BZ0FnQkVFd2FpSUlJQVJCTkdvaUNpZ0NBQ0FCSUFJZ0F5QUZRUWR4UWVJR2FoRU5BQ0FJS0FJQUlBb29BZ0JKQkVBUEN5QUVRUUEyQWtnZ0FpZ0NBQ0FEU1EwRER3c2dCRUV3YWlFSUlBUkJOR29oQ2d3Q0N5QUVRVEJxSVFnZ0JFRTBhaUVLREFJTER3c2dDRUVBTmdJQUlBb2dBQ2dDeUFJaURrRi9hallDQUNBRUtBSk1JQUFvQXN3Q1JnUkFJQUFvQXNBRElRc2dBQ2dDSkNJUFFRQktCRUFnQzBFOGFpQUxLQUpFUVFKMGFpRVFJQUFvQXRnQklRVURRQ0FGS0FJTUlBVW9BaWhzSWdjZ0RoQTVJUVlnQnlBRktBSXdJQWNRVGlJSElBZEZHeUVISUFsRkJFQWdDeUFIUVg5cUlBWVFPVUVCYWpZQ05Bc2dFQ2dDQUNBSlFRSjBhaWdDQUNFTklBWkJBWFFoRVNBR1FRQktCRUFnQjBGL2FrRUNkQ0FOYWlFTVFRQWhCZ05BSUFZZ0IycEJBblFnRFdvZ0RDZ0NBRFlDQUNBR1FRRnFJZ1lnRVVnTkFBc0xJQVZCMkFCcUlRVWdDVUVCYWlJSklBOUhEUUFMQ3dzZ0JFRUJOZ0pJQ3lBQUtBTElBeWdDQkNFRklBQWdCRUU4YWlBRUtBSkVRUUowYWlnQ0FDQUlJQW9vQWdBZ0FTQUNJQU1nQlVFSGNVSGlCbW9SRFFBZ0NDZ0NBQ0FLS0FJQVNRUkFEd3NnQkNnQ1RFRUJSZ1JBSUFBb0FzQURJUXNnQUNnQ3lBSWhBU0FBS0FJa0lnZEJBRW9FUUNBTFFVQnJJUTBnQVVFQmFpRU9JQUZCQW1vaER5QUFLQUxZQVNFQ1FRQWhBd05BSUFJb0Fnd2dBaWdDS0d3Z0FSQTVJUVVnQ3lnQ1BDQURRUUowYWlnQ0FDRUpJQTBvQWdBZ0EwRUNkR29vQWdBaEJpQUZRUUJLQkVBZ0JTQU9iQ0VRSUFVZ0Qyd2hFVUVBSVFBRFFDQUFJQVZySWd4QkFuUWdDV29nQUNBUWFpSVNRUUowSUFscUtBSUFOZ0lBSUF4QkFuUWdCbW9nRWtFQ2RDQUdhaWdDQURZQ0FDQUFJQkZxSWd4QkFuUWdDV29nQUVFQ2RDQUphaWdDQURZQ0FDQU1RUUowSUFacUlBQkJBblFnQm1vb0FnQTJBZ0FnQUVFQmFpSUFJQVZIRFFBTEN5QUNRZGdBYWlFQ0lBTkJBV29pQXlBSFJ3MEFDd3NGSUFBb0FzZ0NJUUVMSUFRZ0JDZ0NSRUVCY3pZQ1JDQUVRUUEyQWpnZ0NDQUJRUUZxTmdJQUlBb2dBVUVDYWpZQ0FDQUVRUUkyQWtnTDZRTUJFSDhnQUNnQ3dBTWhBZ0pBQWtBQ1FDQUJEZ01BQWdFQ0N5QUFLQUxjQXlnQ0NFVUVRQ0FDUVJFMkFnUWdBaUFDS0FJME5nSXdEd3NnQWtFUU5nSUVJQUFvQXNnQ0lRUWdBQ2dDSkNJTFFRQktCRUFnQWtGQWF5RU1JQVJCQW1vaERTQUVRWDVxSVE0Z0FDZ0MyQUVoQlVFQUlRQURRQ0FGS0FJTUlBVW9BaWhzSUFRUU9TRURJQUlvQWp3Z0FFRUNkR29vQWdBaEJpQU1LQUlBSUFCQkFuUnFLQUlBSVFjZ0FrRUlhaUFBUVFKMGFpZ0NBQ0VJSUFNZ0RXd2lDVUVBU2dSQVFRQWhBUU5BSUFGQkFuUWdCMm9nQVVFQ2RDQUlhaWdDQUNJS05nSUFJQUZCQW5RZ0Jtb2dDallDQUNBQlFRRnFJZ0VnQ1VjTkFBc0xJQU5CQVhRaENTQURRUUJLQkVBZ0F5QUViQ0VLSUFNZ0Rtd2hEMEVBSVFFRFFDQUJJQTlxSWhCQkFuUWdCMm9nQVNBS2FpSVJRUUowSUFocUtBSUFOZ0lBSUJGQkFuUWdCMm9nRUVFQ2RDQUlhaWdDQURZQ0FDQUJRUUZxSWdFZ0NVZ05BQXRCQUNFQkEwQWdBU0FEYTBFQ2RDQUdhaUFHS0FJQU5nSUFJQUZCQVdvaUFTQURSdzBBQ3dzZ0JVSFlBR29oQlNBQVFRRnFJZ0FnQzBjTkFBc0xJQUpCQURZQ1JDQUNRUUEyQWtnZ0FrRUFOZ0pNSUFKQkFEWUNPQThMSUFKQkVqWUNCQThMSUFBb0FnQWlBVUVETmdJVUlBRW9BZ0FoQVNBQUlBRkIvd0Z4UWF3RGFoRUJBQXVCQkFFSmZ5QUFJQUJCQVVIUUFDQUFLQUlFS0FJQVFUOXhRY29CYWhFRUFDSUVOZ0xBQXlBRVFUTTJBZ0FnQUNnQ3lBSWhBaUFBS0FMY0F5Z0NDQVIvSUFKQkFrZ0VRQ0FBS0FJQUlnTkJNRFlDRkNBQUlBTW9BZ0JCL3dGeFFhd0RhaEVCQUNBQUtBTElBaUVDQ3lBQUtBTEFBeUlESUFCQkFTQUFRU1JxSWdZb0FnQkJBM1FnQUNnQ0JDZ0NBRUUvY1VIS0FXb1JCQUFpQVRZQ1BDQURRVUJySWdjZ0FTQUFLQUlrSWdGQkFuUnFOZ0lBSUFGQkFFb0VRQ0FDUVFScUlRZ2dBQ2dDMkFFaEFrRUFJUUVEZnlBQVFRRWdBaWdDRENBQ0tBSW9iQ0FBS0FMSUFoQTVJZ1VnQ0d3aUNVRURkQ0FBS0FJRUtBSUFRVDl4UWNvQmFoRUVBQ0FGUVFKMGFpRUZJQU1vQWp3Z0FVRUNkR29nQlRZQ0FDQUhLQUlBSUFGQkFuUnFJQWxCQW5RZ0JXbzJBZ0FnQWtIWUFHb2hBaUFCUVFGcUlnRWdBQ2dDSkNJRlNBMEFJQVVMSVFFTElBQW9Bc2dDSWdWQkFtb2hBaUFCSVFNZ0JRVWdCQ0FDTmdJMElBQkJKR29oQmlBQUtBSWtJUU1nQWdzaEFTQURRUUJNQkVBUEN5QUVRUWhxSVFWQkFDRURJQUFvQXRnQklRUURRQ0FFS0FJTUlBUW9BaWhzSUFFUU9TRUJJQU5CQW5RZ0JXb2dBRUVCSUFRb0Fod2dCQ2dDSkd3Z0FTQUNiQ0FBS0FJRUtBSUlRUTl4UVlvQ2FoRUpBRFlDQUNBRFFRRnFJZ01nQmlnQ0FFZ0VRQ0FFUWRnQWFpRUVJQUFvQXNnQ0lRRU1BUXNMQzhJQkFRTi9JQUFvQWdRb0FnQWhBaUFBSUFCQkFVRWNJQUpCUDNGQnlnRnFFUVFBSWdJMkFzZ0RJQUpCTWpZQ0FDQUNRUUEyQWdnZ0FrRUFOZ0lNSUFBb0FsUkZCRUFQQ3lBQ0lBQW9Bc0FDSWdNMkFoQWdBQ2dDQkNFRUlBRUVRQ0FFS0FJUUlRRWdBaUFBUVFGQkFDQUFLQUp3SUFBb0FuaHNJQUFvQW5RZ0F4RDRBU0FDS0FJUUlBRkJQM0ZCeGdKcUVRb0FOZ0lJQlNBRUtBSUlJUUVnQWlBQVFRRWdBQ2dDY0NBQUtBSjRiQ0FESUFGQkQzRkJpZ0pxRVFrQU5nSU1Dd3VoQkFFTWZ5QUFLQUlFS0FJQUlRRWdBQ0FBUVFGQm9BRWdBVUUvY1VIS0FXb1JCQUFpQWpZQzNBTWdBa0dHQVRZQ0FDQUNRUU0yQWdRZ0FrRUFOZ0lJSUFBb0FyUUNCRUFnQUNnQ0FDSUJRUm8yQWhRZ0FTZ0NBQ0VCSUFBZ0FVSC9BWEZCckFOcUVRRUFDeUFBS0FJa1FRQk1CRUFQQ3lBQ1FlUUFhaUVKSUFKQk5Hb2hCU0FDUVF4cUlRb2dBa0dNQVdvaEN5QUNRWllCYWlFTUlBQW9BdGdCSVFKQkFDRUJBMEFnQWlnQ0NDQUNLQUlrYkNBQUtBTEVBaEE1SVFjZ0FpZ0NEQ0FDS0FJb2JDQUFLQUxJQWhBNUlRWWdBQ2dDdkFJaEJDQUFLQUxBQWlFSUlBRkJBblFnQ1dvZ0JqWUNBQ0FDS0FJMEJFQUNRQ0FHSUFoR0lnTWdCQ0FIUm5FRVFDQUJRUUowSUFWcVFRdzJBZ0FNQVFzZ0F5QUVJQWRCQVhSR0lnTnhCRUFnQVVFQ2RDQUZha0VOTmdJQUJRSkFJQU1nQ0NBR1FRRjBSbkVFUUNBQlFRSjBJQVZxUVE0MkFnQU1BUXNnQkNBSElBUWdCeEE1SWdSc2EwVUVRQ0FJSUFZZ0NDQUdFRGtpQTJ4clJRUkFJQUZCQW5RZ0JXcEJEellDQUNBQklBdHFJQVE2QUFBZ0FTQU1haUFET2dBQURBSUxDeUFBS0FJQUlnTkJKellDRkNBREtBSUFJUU1nQUNBRFFmOEJjVUdzQTJvUkFRQUxDeUFBS0FJRUtBSUlJUU1nQVVFQ2RDQUthaUFBUVFFZ0FDZ0NjQ0FBS0FLOEFoRDRBU0FBS0FMQUFpQURRUTl4UVlvQ2FoRUpBRFlDQUFzRklBRkJBblFnQldwQkN6WUNBQXNnQWtIWUFHb2hBaUFCUVFGcUlnRWdBQ2dDSkVnTkFBc0xraEFCQm44Z0FDZ0NCQ2dDQUNFQklBQWdBRUVCUVJ3Z0FVRS9jVUhLQVdvUkJBQWlBVFlDNEFNZ0FVR0ZBVFlDQUFKQUFrQUNRQUpBQWtBZ0FDZ0NLRUVCYXc0SEFBRUJBZ0lCQVFNTElBQW9BaVJCQVVjRVFDQUFLQUlBSWdKQkN6WUNGQ0FDS0FJQUlRSWdBQ0FDUWY4QmNVR3NBMm9SQVFBTERBTUxJQUFvQWlSQkEwY0VRQ0FBS0FJQUlnSkJDellDRkNBQ0tBSUFJUUlnQUNBQ1FmOEJjVUdzQTJvUkFRQUxEQUlMSUFBb0FpUkJCRWNFUUNBQUtBSUFJZ0pCQ3pZQ0ZDQUNLQUlBSVFJZ0FDQUNRZjhCY1VHc0Eyb1JBUUFMREFFTElBQW9BaVJCQVVnRVFDQUFLQUlBSWdKQkN6WUNGQ0FDS0FJQUlRSWdBQ0FDUWY4QmNVR3NBMm9SQVFBTEN5QUFLQUt3QWdSQUFrQUNRQ0FBS0FJb1FRSnJEZ1VCQUFBQUFRQUxJQUFvQWdBaUFrRWNOZ0lVSUFJb0FnQWhBaUFBSUFKQi93RnhRYXdEYWhFQkFBc0xBa0FDUUFKQUFrQUNRQUpBSUFBb0Fpd2lBa0VCYXc0R0FBRUVBd1FDQkFzZ0FFRUJOZ0o0QWtBQ1FBSkFBa0FnQUNnQ0tFRUJhdzRIQUFFQUFnSUNBQUlMSUFGQkpqWUNCQ0FBS0FJa0lnSkJBVXdOQnlBQUtBTFlBU0VEUVFFaEFRTkFJQUZCMkFCc0lBTnFRUUEyQWpRZ0FVRUJhaUlCSUFKSURRQUxEQUlMQWtBQ1FBSkFBa0FnQUNnQ3NBSU9BZ0FCQWdzZ0FVRW5OZ0lFREFJTElBRkJLRFlDQkF3QkN5QUFLQUlBSWdGQkhEWUNGQ0FCS0FJQUlRRWdBQ0FCUWY4QmNVR3NBMm9SQVFBTElBQW9BZ1FvQWdBaEFTQUFLQUxnQXlBQVFRRkJnQmdnQVVFL2NVSEtBV29SQkFBaUFqWUNHRUVBSVFFRFFDQUJRUUowSUFKcUlBRkJpNWtCYkRZQ0FDQUJRWUFDYWtFQ2RDQUNhaUFCUWNhc0FtdzJBZ0FnQVVHQUJHcEJBblFnQW1vZ0FVR3ZPbXhCZ0lBQ2FqWUNBQ0FCUVFGcUlnRkJnQUpIRFFBTERBRUxJQUFvQWdBaUFVRWNOZ0lVSUFFb0FnQWhBU0FBSUFGQi93RnhRYXdEYWhFQkFBd0ZDd3dFQ3lBQVFRTTJBbmdDUUFKQUFrQUNRQUpBQWtBZ0FDZ0NLRUVCYXc0SEFBTUJCQVFFQWdRTElBRkJLVFlDQkF3SUN5QUJRU28yQWdRZ0FDZ0NCQ2dDQUNFQ0lBQW9BdUFESWdFZ0FFRUJRWUFJSUFKQlAzRkJ5Z0ZxRVFRQU5nSUlJQUFvQWdRb0FnQWhBaUFCSUFCQkFVR0FDQ0FDUVQ5eFFjb0JhaEVFQURZQ0RDQUFLQUlFS0FJQUlRSWdBU0FBUVFGQmdBZ2dBa0UvY1VIS0FXb1JCQUEyQWhBZ0FDZ0NCQ2dDQUNFQ0lBRWdBRUVCUVlBSUlBSkJQM0ZCeWdGcUVRUUFJZ00yQWhRZ0FTZ0NDQ0VFSUFFb0Fnd2hCU0FCS0FJUUlRWkJBQ0VCUVlCL0lRSURRQ0FCUVFKMElBUnFJQUpCNmMwRmJFR0FnQUpxUVJCMU5nSUFJQUZCQW5RZ0JXb2dBa0dpaXdkc1FZQ0FBbXBCRUhVMkFnQWdBVUVDZENBR2FpQUNRYTZTZld3MkFnQWdBVUVDZENBRGFpQUNRZWZQZm14QmdJQUNhallDQUNBQ1FRRnFJUUlnQVVFQmFpSUJRWUFDUncwQUN3d0RDeUFCUVNvMkFnUWdBQ2dDQkNnQ0FDRUNJQUFvQXVBRElnRWdBRUVCUVlBSUlBSkJQM0ZCeWdGcUVRUUFOZ0lJSUFBb0FnUW9BZ0FoQWlBQklBQkJBVUdBQ0NBQ1FUOXhRY29CYWhFRUFEWUNEQ0FBS0FJRUtBSUFJUUlnQVNBQVFRRkJnQWdnQWtFL2NVSEtBV29SQkFBMkFoQWdBQ2dDQkNnQ0FDRUNJQUVnQUVFQlFZQUlJQUpCUDNGQnlnRnFFUVFBSWdNMkFoUWdBU2dDQ0NFRUlBRW9BZ3doQlNBQktBSVFJUVpCQUNFQlFZQi9JUUlEUUNBQlFRSjBJQVJxSUFKQjA1c0xiRUdBZ0FKcVFSQjFOZ0lBSUFGQkFuUWdCV29nQWtIRWxnNXNRWUNBQW1wQkVIVTJBZ0FnQVVFQ2RDQUdhaUFDUWQya2VtdzJBZ0FnQVVFQ2RDQURhaUFDUWMyZmZXeEJnSUFDYWpZQ0FDQUNRUUZxSVFJZ0FVRUJhaUlCUVlBQ1J3MEFDd3dDQ3dKQUFrQUNRQ0FBS0FLd0FnNENBQUVDQ3lBQlFTczJBZ1FNQndzZ0FVRXNOZ0lFREFZTElBQW9BZ0FpQVVFY05nSVVJQUVvQWdBaEFTQUFJQUZCL3dGeFFhd0RhaEVCQUF3RkN5QUFLQUlBSWdGQkhEWUNGQ0FCS0FJQUlRRWdBQ0FCUWY4QmNVR3NBMm9SQVFBTUJBc01Bd3NnQUVFRE5nSjRJQUFvQWloQkJrY0VRQ0FBS0FJQUlnRkJIRFlDRkNBQktBSUFJUUVnQUNBQlFmOEJjVUdzQTJvUkFRQU1Bd3NDUUFKQUFrQWdBQ2dDc0FJT0FnQUJBZ3NnQVVFck5nSUVEQVFMSUFGQkxEWUNCQXdEQ3lBQUtBSUFJZ0ZCSERZQ0ZDQUJLQUlBSVFFZ0FDQUJRZjhCY1VHc0Eyb1JBUUFNQWdzZ0FFRUVOZ0o0QWtBQ1FBSkFBa0FnQUNnQ0tFRUVhdzRDQVFBQ0N5QUJRUzAyQWdRZ0FDZ0NCQ2dDQUNFQ0lBQW9BdUFESWdFZ0FFRUJRWUFJSUFKQlAzRkJ5Z0ZxRVFRQU5nSUlJQUFvQWdRb0FnQWhBaUFCSUFCQkFVR0FDQ0FDUVQ5eFFjb0JhaEVFQURZQ0RDQUFLQUlFS0FJQUlRSWdBU0FBUVFGQmdBZ2dBa0UvY1VIS0FXb1JCQUEyQWhBZ0FDZ0NCQ2dDQUNFQ0lBRWdBRUVCUVlBSUlBSkJQM0ZCeWdGcUVRUUFJZ00yQWhRZ0FTZ0NDQ0VFSUFFb0Fnd2hCU0FCS0FJUUlRWkJBQ0VCUVlCL0lRSURRQ0FCUVFKMElBUnFJQUpCNmMwRmJFR0FnQUpxUVJCMU5nSUFJQUZCQW5RZ0JXb2dBa0dpaXdkc1FZQ0FBbXBCRUhVMkFnQWdBVUVDZENBR2FpQUNRYTZTZld3MkFnQWdBVUVDZENBRGFpQUNRZWZQZm14QmdJQUNhallDQUNBQ1FRRnFJUUlnQVVFQmFpSUJRWUFDUncwQUN3d0NDeUFCUVM0MkFnUU1Bd3NnQUNnQ0FDSUJRUncyQWhRZ0FTZ0NBQ0VCSUFBZ0FVSC9BWEZCckFOcUVRRUFEQUlMREFFTElBQW9BaWdnQWtZRVFDQUFJQUFvQWlRMkFuZ2dBVUV1TmdJRUJTQUFLQUlBSWdGQkhEWUNGQ0FCS0FJQUlRRWdBQ0FCUWY4QmNVR3NBMm9SQVFBTEN5QUFLQUpVQkVBZ0FFRUJOZ0o4RHdzZ0FDQUFLQUo0TmdKOEM4NEVBUWQvSUFBb0FnUW9BZ0FoQVNBQUlBQkJBVUV3SUFGQlAzRkJ5Z0ZxRVFRQUlnRTJBdHdESUFGQmhBRTJBZ0FnQVVFQU5nSUlJQUVnQUNnQ2VDQUFLQUp3YkNJQ05nSW9JQUFvQXNBQ1FRSkdCRUFnQVVFQk5nSUVJQUZCQ1RZQ0RDQUFLQUlFS0FJRUlRTWdBU0FBUVFFZ0FpQURRVDl4UWNvQmFoRUVBRFlDSUNBQUtBTGNBeUVCQlNBQlFRSTJBZ1FnQVVFS05nSU1JQUZCQURZQ0lBc0NmeUFBS0FJb1FRZEdJUWNnQUNnQ0JDZ0NBQ0VDSUFFZ0FFRUJRWUFJSUFKQlAzRkJ5Z0ZxRVFRQU5nSVFJQUFvQWdRb0FnQWhBaUFCSUFCQkFVR0FDQ0FDUVQ5eFFjb0JhaEVFQURZQ0ZDQUFLQUlFS0FJQUlRSWdBU0FBUVFGQmdBZ2dBa0UvY1VIS0FXb1JCQUEyQWhnZ0FDZ0NCQ2dDQUNFQ0lBRWdBRUVCUVlBSUlBSkJQM0ZCeWdGcUVRUUFJZ0kyQWh3Z0FTZ0NFQ0VESUFFb0FoUWhCQ0FCS0FJWUlRVWdCd3NFUUVFQUlRQkJnSDhoQVFOQUlBQkJBblFnQTJvZ0FVSFRtd3RzUVlDQUFtcEJFSFUyQWdBZ0FFRUNkQ0FFYWlBQlFjU1dEbXhCZ0lBQ2FrRVFkVFlDQUNBQVFRSjBJQVZxSUFGQjNhUjZiRFlDQUNBQVFRSjBJQUpxSUFGQnpaOTliRUdBZ0FKcU5nSUFJQUZCQVdvaEFTQUFRUUZxSWdCQmdBSkhEUUFMQlVFQUlRQkJnSDhoQVFOQUlBQkJBblFnQTJvZ0FVSHB6UVZzUVlDQUFtcEJFSFUyQWdBZ0FFRUNkQ0FFYWlBQlFhS0xCMnhCZ0lBQ2FrRVFkVFlDQUNBQVFRSjBJQVZxSUFGQnJwSjliRFlDQUNBQVFRSjBJQUpxSUFGQjU4OStiRUdBZ0FKcU5nSUFJQUZCQVdvaEFTQUFRUUZxSWdCQmdBSkhEUUFMQ3d2SEF3RURmeUFBS0FJRUtBSUFJUUVnQUNBQVFRRkJMQ0FCUVQ5eFFjb0JhaEVFQUNJRE5nTGtBeUFEUVRFMkFnQWdBMEdEQVRZQ0RDQURRUUEyQWlBZ0EwRUFOZ0lvSUFBb0FuaEJBMGNFUUNBQUtBSUFJZ0ZCTURZQ0ZDQUJLQUlBSVFFZ0FDQUJRZjhCY1VHc0Eyb1JBUUFMSUFBb0FnUW9BZ0FoQVNBRElBQkJBVUdBQVNBQlFUOXhRY29CYWhFRUFEWUNHRUVBSVFFRFFDQUFLQUlFS0FJRUlRSWdBRUVCUVlBZ0lBSkJQM0ZCeWdGcUVRUUFJUUlnQXlnQ0dDQUJRUUowYWlBQ05nSUFJQUZCQVdvaUFVRWdSdzBBQ3lBRFFRRTJBaHdnQUNnQ2JBUkFJQUFvQW1BaUFVRUlTQVJBSUFBb0FnQWlBa0U2TmdJVUlBSkJDRFlDR0NBQUtBSUFLQUlBSVFJZ0FDQUNRZjhCY1VHc0Eyb1JBUUFGSUFGQmdBSktCRUFnQUNnQ0FDSUNRVHMyQWhRZ0FrR0FBallDR0NBQUtBSUFLQUlBSVFJZ0FDQUNRZjhCY1VHc0Eyb1JBUUFMQ3lBQUtBSUVLQUlJSVFJZ0F5QUFRUUVnQVVFRElBSkJEM0ZCaWdKcUVRa0FOZ0lRSUFNZ0FUWUNGQVVnQTBFQU5nSVFDeUFBS0FKWVJRUkFEd3NnQUVFQ05nSllJQUFvQWdRb0FnUWhBU0FESUFCQkFTQUFLQUp3UVFac1FReHFJQUZCUDNGQnlnRnFFUVFBTmdJZ0lBQVFwQU1MalFrQkQzOGdBQ2dDQkNnQ0FDRUJJQUFnQUVFQlFkZ0FJQUZCUDNGQnlnRnFFUVFBSWdFMkF1UURJQUZCTURZQ0FDQUJRWUVCTmdJSUlBRkJnZ0UyQWd3Z0FVRUFOZ0pFSUFGQkFEWUNOQ0FBS0FKNFFRUktCRUFnQUNnQ0FDSUJRVGsyQWhRZ0FVRUVOZ0lZSUFBb0FnQW9BZ0FoQVNBQUlBRkIvd0Z4UWF3RGFoRUJBQXNnQUNnQ1lDSUZRWUFDU2dSQUlBQW9BZ0FpQVVFN05nSVVJQUZCZ0FJMkFoZ2dBQ2dDQUNnQ0FDRUJJQUFnQVVIL0FYRkJyQU5xRVFFQUlBQW9BbUFoQlFzZ0FDZ0M1QU1oQnlBQUtBSjRJZ1pCQVVvRVFFRUJJUUVEZjBFQklRTWdBVUVCYWlJRUlRSURRQ0FDSUFSc0lRSWdBMEVCYWlJRElBWkhEUUFMSUFJZ0JVb0VmeUFDSVFNZ0FRVWdCQ0VCREFFTEN5RUNCU0FGUVFFZ0JVRUJTaHNpQWtFQmFpRURDeUFDUVFKSkJFQWdBQ2dDQUNJQlFUbzJBaFFnQVNBRE5nSVlJQUFvQWdBb0FnQWhBU0FBSUFGQi93RnhRYXdEYWhFQkFBc2dCa0VBU2dSQVFRRWhBVUVBSVFNRFFDQUhRU0JxSUFOQkFuUnFJQUkyQWdBZ0FTQUNiQ0VCSUFOQkFXb2lBeUFHUncwQUN3SkFJQUFvQWl4QkFrWUVRRUVBSVFKQkFDRURBMEFnQjBFZ2FpQURRUUowUWRTSEFXb29BZ0JCQW5ScUlna29BZ0FpQkVFQmFpRUlBa0FDUUNBQklBUVFPU0FJYkNJRUlBVktEUUFnQ1NBSU5nSUFJQU5CQVdvaUF5QUdTQVIvUVFFaEFpQUVCVUVCSVFJZ0JDRUJEQUVMSVFFTUFRc2dBa1VOQTBFQUlRTkJBQ0VDQ3d3QUFBc0FCVUVBSVFKQkFDRURBMEFnQjBFZ2FpQURRUUowYWlJSktBSUFJZ1JCQVdvaENBSkFBa0FnQVNBRUVEa2dDR3dpQkNBRlNnMEFJQWtnQ0RZQ0FDQURRUUZxSWdNZ0JrZ0VmMEVCSVFJZ0JBVkJBU0VDSUFRaEFRd0JDeUVCREFFTElBSkZEUU5CQUNFRFFRQWhBZ3NNQUFBTEFBc0FDeUFCSVFJRlFRRWhBZ3NnQUNnQ0FDRUJJQUFvQW5oQkEwWUVRQ0FCSUFJMkFoZ2dBU0FIS0FJZ05nSWNJQUVnQnlnQ0pEWUNJQ0FCSUFjb0FpZzJBaVFnQVVIZ0FEWUNGQ0FCS0FJRUlRRUZJQUZCNFFBMkFoUWdBU0FDTmdJWUlBQW9BZ0FvQWdRaEFRc2dBRUVCSUFGQlAzRkJzZ1ZxRVFNQUlBQW9BZ1FvQWdnaEFTQUFRUUVnQWlBQUtBSjRJQUZCRDNGQmlnSnFFUWtBSVFvZ0FDZ0NlQ0lCUVFCS0JFQkJBQ0VFSUFJaEF3TkFJQU1nQjBFZ2FpQUVRUUowYWlnQ0FDSUpFRGtoQlNBSlFRQktCRUFnQ1VGL2FpSUxRUUlRT1NFTUlBUkJBblFnQ21vaERTQUZRUUJLQkVCQkFDRUdBMEFnQlNBR2JDSUJJQUpJQkVBZ0RDQUdRZjhCYkdvZ0N4QTVRZjhCY1NFT0EwQkJBQ0VJQTBBZ0RTZ0NBQ0FCSUFocWFpQU9PZ0FBSUFVZ0NFRUJhaUlJUncwQUN5QUJJQU5xSWdFZ0FrZ05BQXNMSUFrZ0JrRUJhaUlHUncwQUN5QUFLQUo0SVFFTEN5QUVRUUZxSWdRZ0FVZ0VRQ0FGSVFNTUFRc0xDeUFISUFvMkFoQWdCeUFDTmdJVUlBQVFvUU1nQUNnQ1dFRUNSd1JBRHdzZ0FDZ0M1QU1oQWlBQUtBSndJUThnQUNnQ2VFRUFUQVJBRHdzZ0QwRUJkRUVFYWlFRFFRQWhBUU5BSUFBb0FnUW9BZ1FoQkNBQ1FjUUFhaUFCUVFKMGFpQUFRUUVnQXlBRVFUOXhRY29CYWhFRUFEWUNBQ0FCUVFGcUlnRWdBQ2dDZUVnTkFBc0wyd1VCRDM4Z0FDZ0NGQ0lDUWNvQlJ3UkFJQUFvQWdBaUFVRVZOZ0lVSUFFZ0FqWUNHQ0FBS0FJQUtBSUFJUUlnQUNBQ1FmOEJjVUdzQTJvUkFRQUxJQUFRa1FZZ0FDZ0MyQUVoQkNBQUtBSWtJZ3hCQUVvaURnUi9JQUFvQXNnQ0lRSWdBQ2dDeEFJaUNFRUlRUVFnQUNnQ1RCc2lDVW9FUUNBQ0lBbEtJUTBnQ0VFQmRDRURJQVFoQVFOQUlBRWlCeUFJTmdJa0lBMEVRQ0FDSVFFRkFrQWdBQ2dDd0FJaENpQUhLQUlNSVF0QkFTRUdJQUloQVFOQUlBb2dCa0VCZENJR0lBdHNFRThOQVNBQ0lBWnNJZ0VnQ1V3TkFBc0xDeUFISWdZZ0FUWUNLQ0FJSUFGQkFYUWlDa29FUUNBSElBbzJBaVFGSUFFZ0Ewb0VRQ0FHSUFNMkFpZ0xDeUFHUWRnQWFpRUJJQVZCQVdvaUJTQU1TQTBBQ3dVZ0FDZ0N2QUloRFNBQ0lBbEtJUW9nQkNFQkEwQWdBU2dDQ0NFRFFRRWhCU0FJSVFjRFFDQU5JQU1nQlVFQmRDSUZiQkJQUlFSQUlBVWdDR3dpQnlBSlRBMEJDd3NnQVNJRklBYzJBaVFnQ2dSQUlBSWhBUVVDUUNBQUtBTEFBaUVMSUFVb0Fnd2hEMEVCSVFNZ0FpRUJBMEFnQ3lBUElBTkJBWFFpQTJ3UVR3MEJJQUlnQTJ3aUFTQUpUQTBBQ3dzTElBVWlBeUFCTmdJb0lBY2dBVUVCZENJTFNnUkFJQVVnQ3pZQ0pBVWdBU0FIUVFGMElnRktCRUFnQXlBQk5nSW9Dd3NnQTBIWUFHb2hBU0FHUVFGcUlnWWdERWdOQUFzTElBNEVmMEVBSVFJRGZ5QUVJQVFvQWlRZ0FDZ0NIQ0FFS0FJSWJHd2dBQ2dDdkFJZ0FDZ0NyQU5zRUdnMkFpd2dCQ0FFS0FJb0lBQW9BaUFnQkNnQ0RHeHNJQUFvQXNBQ0lBQW9BcXdEYkJCb05nSXdJQVJCMkFCcUlRUWdBa0VCYWlJQ0lBQW9BaVFpQVVnTkFDQUJDd1VnREFzRklBd0xJUUlDUUFKQUFrQUNRQUpBSUFBb0Fpd2lBVUVCYXc0SEFBRUNBd01CQWdRTElBRWhBZ3dEQzBFRElRSU1BZ3RCQXlFQ0RBRUxRUVFoQWdzZ0FDQUNOZ0o0SUFCQkFTQUNJQUFvQWxRYk5nSjhJQUFRcGdORkJFQWdBRUVCTmdLQUFROExJQUFnQUNnQ3dBSTJBb0FCQ3pzQkFuOGdBQ2dDdkFNaEFTQUFLQUpVQkVBZ0FDZ0M1QU1vQWdnaEFpQUFJQUpCL3dGeFFhd0RhaEVCQUFzZ0FTQUJLQUlNUVFGcU5nSU1DNUFFQVFOL0lBQW9BcndESWdJb0FnZ0VRQ0FDUVFBMkFnZ2dBQ2dDNUFNb0FnQWhBU0FBUVFBZ0FVRS9jVUd5QldvUkF3QWdBQ2dDeUFNb0FnQWhBU0FBUVFJZ0FVRS9jVUd5QldvUkF3QWdBQ2dDd0FNb0FnQWhBU0FBUVFJZ0FVRS9jVUd5QldvUkF3QUZJQUFvQWxRRVFDQUFLQUtJQVVVRVFBSkFJQUFvQWx3RVFDQUFLQUpzQkVBZ0FDQUNLQUlZTmdMa0F5QUNRUUUyQWdnTUFnc0xJQUFvQW1RRVFDQUFJQUlvQWhRMkF1UURCU0FBS0FJQUlnRkJMellDRkNBQktBSUFJUUVnQUNBQlFmOEJjVUdzQTJvUkFRQUxDd3NMSUFBb0F0Z0RLQUlBSVFFZ0FDQUJRZjhCY1VHc0Eyb1JBUUFnQUNnQ3hBTW9BZ2doQVNBQUlBRkIvd0Z4UWF3RGFoRUJBQ0FBS0FKRVJRUkFJQUlvQWhCRkJFQWdBQ2dDNEFNb0FnQWhBU0FBSUFGQi93RnhRYXdEYWhFQkFBc2dBQ2dDM0FNb0FnQWhBU0FBSUFGQi93RnhRYXdEYWhFQkFDQUFLQUpVQkVBZ0FDZ0M1QU1vQWdBaEFTQUFJQUlvQWdnZ0FVRS9jVUd5QldvUkF3QUxJQUFvQXNnREtBSUFJUUVnQUVFRFFRQWdBaWdDQ0JzZ0FVRS9jVUd5QldvUkF3QWdBQ2dDd0FNb0FnQWhBU0FBUVFBZ0FVRS9jVUd5QldvUkF3QUxDeUFBS0FJSUlnRkZCRUFQQ3lBQklBSW9BZ3dpQXpZQ0RDQUJJQU5CQWtFQklBSW9BZ2diYWlJQ05nSVFJQUJCUUdzb0FnQkZCRUFQQ3lBQUtBTE1BeWdDRkFSQUR3c2dBU0FDUVFKQkFTQUFLQUpzRzJvMkFoQUw4d1lCQkg4Z0FDZ0NCQ2dDQUNFQklBQWdBRUVCUVJ3Z0FVRS9jVUhLQVdvUkJBQWlBallDdkFNZ0FrSC9BRFlDQUNBQ1FZQUJOZ0lFSUFKQkFEWUNDQ0FBS0FMVUFTSUJRUWhIQkVBZ0FDZ0NBQ0lEUVJBMkFoUWdBeUFCTmdJWUlBQW9BZ0FvQWdBaEFTQUFJQUZCL3dGeFFhd0RhaEVCQUFzZ0FCRDNCU0FBS0FJRUtBSUFJUUVnQUVFQlFZQUtJQUZCUDNGQnlnRnFFUVFBSWdOQkFFR0FCQkJGR2lBQUlBTkJnQVJxSWdRMkF0QUNRUUFoQVFOQUlBRWdCR29nQVRvQUFDQUJRUUZxSWdGQmdBSkhEUUFMSUFOQmdBWnFRWDlCZ0FRUVJSb0NRQUpBSUFBb0FuUkZEUUFnQUNnQ2NFVU5BQ0FBUWZnQWFpSURLQUlBUVFGSURRQU1BUXNnQUNnQ0FDSUJRU0UyQWhRZ0FTZ0NBQ0VCSUFBZ0FVSC9BWEZCckFOcUVRRUFJQUJCK0FCcUlRTUxJQUpCQURZQ0RDQUNJQUFRcGdNMkFoQWdBa0VBTmdJVUlBSkJBRFlDR0NBQUtBSlVCRUFDUUNBQVFVQnJLQUlBUlFSQUlBQkJBRFlDWkNBQVFRQTJBbWdnQUVFQU5nSnNDeUFBUWNRQWFpSUJLQUlBQkVBZ0FDZ0NBQ0lFUVRBMkFoUWdCQ2dDQUNFRUlBQWdCRUgvQVhGQnJBTnFFUUVBQ3lBREtBSUFRUU5HQkVBQ1FDQUFLQUtJQVFSQUlBQkJBVFlDYUF3QkN5QUFLQUpjQkVBZ0FFRUJOZ0pzQlNBQVFRRTJBbVFMQ3dVZ0FFRUJOZ0prSUFCQkFEWUNhQ0FBUVFBMkFtd2dBRUVBTmdLSUFRc2dBQ2dDWkFSQUlBQVE5Z1VnQWlBQUtBTGtBellDRkFzZ0FDZ0NiRVVFUUNBQUtBSm9SUTBCQ3lBQUVQVUZJQUlnQUNnQzVBTTJBaGdMQlNBQVFRQTJBbVFnQUVFQU5nSm9JQUJCQURZQ2JDQUFRY1FBYWlFQkN5QUJLQUlBUlFSQUlBSW9BaEFFUUNBQUVQUUZCU0FBRVBNRklBQVE4Z1VMSUFBZ0FDZ0NiQkR4QlFzZ0FCREhCaUFBS0FMa0FRUkFJQUFRaXdZRklBQVFtd1lMSUFBZ0FDZ0N6QU1vQWhBRWYwRUJCU0FBUVVCcktBSUFRUUJIQ3hDS0JpQUJLQUlBUlFSQUlBQVE4QVVMSUFBb0FnUW9BaGdoQVNBQUlBRkIvd0Z4UWF3RGFoRUJBQ0FBS0FMTUF5Z0NDQ0VCSUFBZ0FVSC9BWEZCckFOcUVRRUFJQUFvQWdnaUFVVUVRQThMSUFCQlFHc29BZ0FFUUE4TElBQW9Bc3dES0FJUVJRUkFEd3NnQUNnQ0pDSURJQU5CQTJ4QkFtb2dBQ2dDNEFGRkd5RURJQUZCQURZQ0JDQUJJQU1nQUNnQ3pBSnNOZ0lJSUFGQkFEWUNEQ0FCUVFOQkFpQUFLQUpzR3pZQ0VDQUNJQUlvQWd4QkFXbzJBZ3dML2dRQkJYOENRQUpBQWtBQ1FBSkFBa0FnQUNnQ0ZDSUJRY29CYXc0REFBTUJBZ3NnQUJENkJTQUFRVUJyS0FJQVJRUkFJQUJCeXdFMkFoUU1Bd3NnQUVIUEFUWUNGRUVCRHdzZ0FFRzhBMm9oQXd3REN5QUFLQUlBSWdKQkZUWUNGQ0FDSUFFMkFoZ2dBQ2dDQUNnQ0FDRUJJQUFnQVVIL0FYRkJyQU5xRVFFQURBRUxJQUFvQXN3REtBSVFCRUFDUUNBQUtBSUlJUUVEUUFKQUlBRUVRQ0FCS0FJQUlRRWdBQ0FCUWY4QmNVR3NBMm9SQVFBTElBQW9Bc3dES0FJQUlRRUNRQ0FBSUFGQi93QnhRUWhxRVFBQUlnSU9Bd0VBQXdBTElBSkJBbkpCQTBZZ0FDZ0NDQ0lCUVFCSGNRUkFJQUVnQVNnQ0JFRUJhaUlDTmdJRUlBSWdBU2dDQ0NJQ1RnUkFJQUVnQWlBQUtBTE1BbW8yQWdnTEN3d0JDd3NnQWc4TEN5QUFJQUFvQXBBQk5nS1lBUXNnQUVHOEEyb2hBeUFBS0FJVVFjd0JSd1JBSUFNb0FnQW9BZ0FoQVNBQUlBRkIvd0Z4UWF3RGFoRUJBQ0FBUVFBMkFvd0JJQUJCekFFMkFoUUxDeUFES0FJQUlnRW9BZ2dFUUFKQUlBQkJqQUZxSWdVb0FnQWhBZ05BQWtBZ0FpQUFLQUowSWdSSkJFQWdBaUVCSUFRaEFnTkFJQUFvQWdnaUJBUi9JQVFnQVRZQ0JDQUVJQUkyQWdnZ0JDZ0NBQ0VCSUFBZ0FVSC9BWEZCckFOcUVRRUFJQVVvQWdBRklBRUxJUUlnQUNnQ3dBTW9BZ1FoQVNBQVFRQWdCVUVBSUFGQkgzRkIrZ1ZxRVFjQUlBVW9BZ0FpQVNBQ1JnMENJQUVnQUNnQ2RDSUNTUTBBQ3lBREtBSUFJUUVMSUFFb0FnUWhBU0FBSUFGQi93RnhRYXdEYWhFQkFDQURLQUlBS0FJQUlRRWdBQ0FCUWY4QmNVR3NBMm9SQVFBZ0JVRUFOZ0lBSUFNb0FnQWlBU2dDQ0VVTkFrRUFJUUlNQVFzTFFRQVBDd3NnQUVIT0FVSE5BU0FBS0FKRUd6WUNGRUVCQzFBQkEzOUJmeUVCQTBBQ1FBSkFBa0FnQUNBQ2Fpd0FBQ0lEQkVBZ0EwRXVSZ1JBREFJRkRBTUxBQXNNQWdzZ0FpRUJDeUFDUVFGcUlRSU1BUXNMSUFGQmYwY0VRQ0FBSUFGcVFRQTZBQUFMQzhvSkFRMS9JQUFvQXRRRElRVWdBQ2dDbUFJRVFDQUZLQUk0SWdKRkJFQWdBQ2dDMEFNb0FnZ2hBaUFBSUFKQi93QnhRUWhxRVFBQVJRUkFJQUFvQWdBaUFrRVpOZ0lVSUFJb0FnQWhBaUFBSUFKQi93RnhRYXdEYWhFQkFBc2dBQ2dDMUFKQkFFb0VRRUVBSVFJRFFDQUFRZGdDYWlBQ1FRSjBhaWdDQUNFRUFrQUNRQUpBSUFBb0F1QUJSUTBBSUFBb0Fwd0REUUVnQUNnQ3BBTkZEUUFNQWdzZ0JVRThhaUFFS0FJVVFRSjBhaWdDQUNJRFFnQTNBQUFnQTBJQU53QUlJQU5DQURjQUVDQURRZ0EzQUJnZ0EwSUFOd0FnSUFOQ0FEY0FLQ0FEUWdBM0FEQWdBMElBTndBNElBVkJHR29nQWtFQ2RHcEJBRFlDQUNBRlFTaHFJQUpCQW5ScVFRQTJBZ0FnQUNnQzRBRUVRQ0FBS0FLY0F3MEJCU0FBS0FLMEF3MEJDd3dCQ3lBRlFmd0FhaUFFS0FJWVFRSjBhaWdDQUVFQVFZQUNFRVVhQ3lBQ1FRRnFJZ0lnQUNnQzFBSklEUUFMQ3lBRlFRQTJBZ3dnQlVFQU5nSVFJQVZCY0RZQ0ZDQUZJQUFvQXBnQ0lnSTJBamdMSUFVZ0FrRi9hallDT0FzZ0JTZ0NGRUYvUmdSQVFRRVBDeUFBS0FLd0F5RU5JQUFvQXZBQ1FRQk1CRUJCQVE4TElBVkJ2QUZxSVE0Q1FBSkFBMEFDUUNBSVFRSjBJQUZxS0FJQUlRd2dBQ0FGUVR4cUlBQkIyQUpxSUFCQjlBSnFJQWhCQW5ScUtBSUFJZ3RCQW5ScUtBSUFJZ1lvQWhRaUIwRUNkR29pQXlnQ0FDQUZRU2hxSUF0QkFuUnFJZ2tvQWdCcUlnSVFYUVJBSUFBZ0FDQUNRUUZxRUYwaUNpQUNRUUpxYWlJRUVGMGlBZ1JBSUFBZ0F5Z0NBRUVVYWlJRUVGMEVRQU5BSUFKQkFYUWlBa0dBZ0FKR0RRUWdBQ0FFUVFGcUlnUVFYUTBBQ3dzRlFRQWhBZ3NnQ1NBQ1FRRWdCeUFBUWVnQmFtb3RBQUIwUVFGMVNBUi9RUUFGSUFwQkFuUWhBeUFDUVFFZ0J5QUFRZmdCYW1vdEFBQjBRUUYxU2dSL0lBTkJER29GSUFOQkJHb0xDellDQUNBRVFRNXFJUU1nQWtFQmRTSUVCRUFEUUNBQ0lBUkJBQ0FBSUFNUVhSdHlJUUlnQkVFQmRTSUVEUUFMQ3lBRlFSaHFJQXRCQW5ScUlnUW9BZ0FnQWtGL2N5QUNRUUZxSUFvYmFpRUNJQVFnQWpZQ0FBVWdDVUVBTmdJQUlBVkJHR29nQzBFQ2RHb29BZ0FoQWdzZ0RDQUNPd0VBSUFBb0FyUURCRUFDUUNBRlFmd0FhaUFHS0FJWUlnSkJBblJxSVFjZ0FpQUFRWWdDYW1vaENVRUFJUVFEUUNBQUlBY29BZ0FnQkVFRGJHb2lBeEJkRFFFZ0JFRUJhaUVDSUFBZ0EwRUJhaEJkQkVBZ0JDRUdJQUloQkFVZ0F5RUdBMzhnQWlBQUtBSzBBMDROQ0NBR1FRTnFJUU1nQWtFQmFpRUVJQUFnQmtFRWFoQmRCSDhnQWdVZ0F5RUdJQVFoQWd3QkN3c2hCZ3NnQUNBT0VGMGhDaUFBSUFOQkFtb2lBeEJkSWdJRVFDQUFJQU1RWFFSQUlBSkJBWFFoQWlBQUlBY29BZ0JCdlFGQjJRRWdCaUFKTFFBQVNCdHFJZ01RWFFSQUEwQWdBa0VCZENJQ1FZQ0FBa1lOQ2lBQUlBTkJBV29pQXhCZERRQUxDd3NnQTBFT2FpRUdJQUpCQVhVaUF3UkFBMEFnQWlBRFFRQWdBQ0FHRUYwYmNpRUNJQU5CQVhVaUF3MEFDd3NGUVFBaEFnc2dCRUVDZENBTmFpZ0NBRUVCZENBTWFpQUNRZi8vQTNNZ0FrRUJhaUFLR3pzQkFDQUVJQUFvQXJRRFNBMEFDd3NMSUFoQkFXb2lBaUFBS0FMd0FrNE5BaUFDSVFnTUFRc0xEQUVMUVFFUEN5QUFLQUlBSWdGQjlRQTJBaFFnQVNnQ0JDRUJJQUJCZnlBQlFUOXhRYklGYWhFREFDQUZRWDgyQWhSQkFRdTZCZ0VOZnlBQUtBTFVBeUVESUFBb0FwZ0NCRUFnQXlnQ09DSUNSUVJBSUFBb0F0QURLQUlJSVFJZ0FDQUNRZjhBY1VFSWFoRUFBRVVFUUNBQUtBSUFJZ0pCR1RZQ0ZDQUNLQUlBSVFJZ0FDQUNRZjhCY1VHc0Eyb1JBUUFMSUFBb0F0UUNRUUJLQkVCQkFDRUNBMEFnQUVIWUFtb2dBa0VDZEdvb0FnQWhCUUpBQWtBQ1FDQUFLQUxnQVVVTkFDQUFLQUtjQXcwQklBQW9BcVFEUlEwQURBSUxJQU5CUEdvZ0JTZ0NGRUVDZEdvb0FnQWlCRUlBTndBQUlBUkNBRGNBQ0NBRVFnQTNBQkFnQkVJQU53QVlJQVJDQURjQUlDQUVRZ0EzQUNnZ0JFSUFOd0F3SUFSQ0FEY0FPQ0FEUVJocUlBSkJBblJxUVFBMkFnQWdBMEVvYWlBQ1FRSjBha0VBTmdJQUlBQW9BdUFCQkVBZ0FDZ0NuQU1OQVFVZ0FDZ0N0QU1OQVFzTUFRc2dBMEg4QUdvZ0JTZ0NHRUVDZEdvb0FnQkJBRUdBQWhCRkdnc2dBa0VCYWlJQ0lBQW9BdFFDU0EwQUN3c2dBMEVBTmdJTUlBTkJBRFlDRUNBRFFYQTJBaFFnQXlBQUtBS1lBaUlDTmdJNEN5QURJQUpCZjJvMkFqZ0xJQU1vQWhSQmYwWUVRRUVCRHdzZ0FDZ0NzQU1oQmlBQktBSUFJUWNnQUNnQzJBSW9BaGdoQWtFQklBQW9BcWdESWdGMElRaEJmeUFCZENFSklBQW9BcUFESVFFRGZ3Si9JQUVnQVVFQ2RDQUdhaWdDQUVFQmRDQUhhaTRCQUEwQUdpQUJRWDlxSWdFTkFVRUFDd3NoQlNBRFFmd0FhaUFDUVFKMGFpRUtJQU5CdkFGcUlRc2dDRUgvL3dOeElRd2dDVUgvL3dOeElRMGdBQ2dDbkFOQmYyb2hBUUpBQTBBQ1FDQUtLQUlBSUFGQkEyeHFJUUlnQVNBRlRnUkFJQUFnQWhCZERRTUxBa0FDUUNBQlFRRnFJZ0ZCQW5RZ0Jtb29BZ0JCQVhRZ0Iyb2lCQzRCQUEwQUEwQWdBQ0FDUVFGcUVGMUZCRUFnQVNBQUtBS2dBMDROQkNBQ1FRTnFJUUlnQVVFQmFpSUJRUUowSUFacUtBSUFRUUYwSUFkcUlnUXVBUUJGRFFFTUFnc0xJQUFnQ3hCZEJFQWdCQ0FOT3dFQUJTQUVJQXc3QVFBTERBRUxJQUFnQWtFQ2FoQmRCRUFnQkM0QkFDSU9JUUlnRGtFQVNBUkFJQVFnQWlBSmFqc0JBQVVnQkNBQ0lBaHFPd0VBQ3dzTElBRWdBQ2dDb0FOSURRRU1BZ3NMSUFBb0FnQWlBVUgxQURZQ0ZDQUJLQUlFSVFFZ0FFRi9JQUZCUDNGQnNnVnFFUU1BSUFOQmZ6WUNGRUVCRHd0QkFRdmpBd0VFZnlBQUtBTFVBeUVESUFBb0FwZ0NCRUFnQXlnQ09DSUNSUVJBSUFBb0F0QURLQUlJSVFJZ0FDQUNRZjhBY1VFSWFoRUFBRVVFUUNBQUtBSUFJZ0pCR1RZQ0ZDQUNLQUlBSVFJZ0FDQUNRZjhCY1VHc0Eyb1JBUUFMSUFBb0F0UUNRUUJLQkVCQkFDRUNBMEFnQUVIWUFtb2dBa0VDZEdvb0FnQWhCUUpBQWtBQ1FDQUFLQUxnQVVVTkFDQUFLQUtjQXcwQklBQW9BcVFEUlEwQURBSUxJQU5CUEdvZ0JTZ0NGRUVDZEdvb0FnQWlCRUlBTndBQUlBUkNBRGNBQ0NBRVFnQTNBQkFnQkVJQU53QVlJQVJDQURjQUlDQUVRZ0EzQUNnZ0JFSUFOd0F3SUFSQ0FEY0FPQ0FEUVJocUlBSkJBblJxUVFBMkFnQWdBMEVvYWlBQ1FRSjBha0VBTmdJQUlBQW9BdUFCQkVBZ0FDZ0NuQU1OQVFVZ0FDZ0N0QU1OQVFzTUFRc2dBMEg4QUdvZ0JTZ0NHRUVDZEdvb0FnQkJBRUdBQWhCRkdnc2dBa0VCYWlJQ0lBQW9BdFFDU0EwQUN3c2dBMEVBTmdJTUlBTkJBRFlDRUNBRFFYQTJBaFFnQXlBQUtBS1lBaUlDTmdJNEN5QURJQUpCZjJvMkFqZ0xJQUFvQXFnRElRSWdBQ2dDOEFKQkFFd0VRRUVCRHdzZ0EwRzhBV29oQTBFQklBSjBJUVJCQUNFQ0EwQWdBQ0FERUYwRVFDQUNRUUowSUFGcUtBSUFJZ1VnQkNBRkx3RUFjanNCQUFzZ0FrRUJhaUlDSUFBb0F2QUNTQTBBQzBFQkM4MEdBUXAvSUFBb0F0UURJUVVnQUNnQ21BSUVRQ0FGS0FJNElnSkZCRUFnQUNnQzBBTW9BZ2doQWlBQUlBSkIvd0J4UVFocUVRQUFSUVJBSUFBb0FnQWlBa0VaTmdJVUlBSW9BZ0FoQWlBQUlBSkIvd0Z4UWF3RGFoRUJBQXNnQUNnQzFBSkJBRW9FUUVFQUlRSURRQ0FBUWRnQ2FpQUNRUUowYWlnQ0FDRUVBa0FDUUFKQUlBQW9BdUFCUlEwQUlBQW9BcHdERFFFZ0FDZ0NwQU5GRFFBTUFnc2dCVUU4YWlBRUtBSVVRUUowYWlnQ0FDSURRZ0EzQUFBZ0EwSUFOd0FJSUFOQ0FEY0FFQ0FEUWdBM0FCZ2dBMElBTndBZ0lBTkNBRGNBS0NBRFFnQTNBREFnQTBJQU53QTRJQVZCR0dvZ0FrRUNkR3BCQURZQ0FDQUZRU2hxSUFKQkFuUnFRUUEyQWdBZ0FDZ0M0QUVFUUNBQUtBS2NBdzBCQlNBQUtBSzBBdzBCQ3d3QkN5QUZRZndBYWlBRUtBSVlRUUowYWlnQ0FFRUFRWUFDRUVVYUN5QUNRUUZxSWdJZ0FDZ0MxQUpJRFFBTEN5QUZRUUEyQWd3Z0JVRUFOZ0lRSUFWQmNEWUNGQ0FGSUFBb0FwZ0NJZ0kyQWpnTElBVWdBa0YvYWpZQ09Bc2dCU2dDRkVGL1JnUkFRUUVQQ3lBQUtBS3dBeUVISUFFb0FnQWhDQ0FGUWZ3QWFpQUFLQUxZQWlnQ0dDSUJRUUowYWlFR0lBVkJ2QUZxSVFrZ0FTQUFRWWdDYW1vaENpQUFLQUtjQTBGL2FpRUNBa0FDUUFOQUFrQWdBQ0FHS0FJQUlBSkJBMnhxSWdNUVhRMENJQUpCQVdvaEFTQUFJQU5CQVdvUVhRUkFJQUloQkNBQklRSUZBMzhnQVNBQUtBS2dBMDROQWlBRFFRTnFJUVFnQVVFQmFpRUNJQUFnQTBFRWFoQmRCSDhnQkNFRElBRUZJQVFoQXlBQ0lRRU1BUXNMSVFRTElBQWdDUkJkSVFzZ0FDQURRUUpxSWdNUVhTSUJCRUFnQUNBREVGMEVRQ0FCUVFGMElRRWdBQ0FHS0FJQVFiMEJRZGtCSUFRZ0NpMEFBRWdiYWlJRUVGMEVRQU5BSUFGQkFYUWlBVUdBZ0FKR0RRY2dBQ0FFUVFGcUlnUVFYUTBBQ3dzRklBTWhCQXNnQkVFT2FpRURJQUZCQVhVaUJBUkFBMEFnQVNBRVFRQWdBQ0FERUYwYmNpRUJJQVJCQVhVaUJBMEFDd3NGUVFBaEFRc2dBa0VDZENBSGFpZ0NBRUVCZENBSWFpQUJRWDl6SUFGQkFXb2dDeHNnQUNnQ3FBTjBPd0VBSUFJZ0FDZ0NvQU5JRFFFTUFnc0xEQUVMUVFFUEN5QUFLQUlBSWdGQjlRQTJBaFFnQVNnQ0JDRUJJQUJCZnlBQlFUOXhRYklGYWhFREFDQUZRWDgyQWhSQkFRdmtCZ0VMZnlBQUtBTFVBeUVESUFBb0FwZ0NCRUFnQXlnQ09DSUNSUVJBSUFBb0F0QURLQUlJSVFJZ0FDQUNRZjhBY1VFSWFoRUFBRVVFUUNBQUtBSUFJZ0pCR1RZQ0ZDQUNLQUlBSVFJZ0FDQUNRZjhCY1VHc0Eyb1JBUUFMSUFBb0F0UUNRUUJLQkVCQkFDRUNBMEFnQUVIWUFtb2dBa0VDZEdvb0FnQWhCQUpBQWtBQ1FDQUFLQUxnQVVVTkFDQUFLQUtjQXcwQklBQW9BcVFEUlEwQURBSUxJQU5CUEdvZ0JDZ0NGRUVDZEdvb0FnQWlCVUlBTndBQUlBVkNBRGNBQ0NBRlFnQTNBQkFnQlVJQU53QVlJQVZDQURjQUlDQUZRZ0EzQUNnZ0JVSUFOd0F3SUFWQ0FEY0FPQ0FEUVJocUlBSkJBblJxUVFBMkFnQWdBMEVvYWlBQ1FRSjBha0VBTmdJQUlBQW9BdUFCQkVBZ0FDZ0NuQU1OQVFVZ0FDZ0N0QU1OQVFzTUFRc2dBMEg4QUdvZ0JDZ0NHRUVDZEdvb0FnQkJBRUdBQWhCRkdnc2dBa0VCYWlJQ0lBQW9BdFFDU0EwQUN3c2dBMEVBTmdJTUlBTkJBRFlDRUNBRFFYQTJBaFFnQXlBQUtBS1lBaUlDTmdJNEN5QURJQUpCZjJvMkFqZ0xJQU1vQWhSQmYwWUVRRUVCRHdzZ0FDZ0M4QUpCQUV3RVFFRUJEd3RCQUNFRkFrQUNRQU5BQWtBZ0JVRUNkQ0FCYWlnQ0FDRU1JQUFnQTBFOGFpQUFRZGdDYWlBQVFmUUNhaUFGUVFKMGFpZ0NBQ0lIUVFKMGFpZ0NBQ2dDRkNJSVFRSjBhaUlHS0FJQUlBTkJLR29nQjBFQ2RHb2lDU2dDQUdvaUFoQmRCRUFnQUNBQUlBSkJBV29RWFNJS0lBSkJBbXBxSWdRUVhTSUNCRUFnQUNBR0tBSUFRUlJxSWdRUVhRUkFBMEFnQWtFQmRDSUNRWUNBQWtZTkJDQUFJQVJCQVdvaUJCQmREUUFMQ3dWQkFDRUNDeUFKSUFKQkFTQUlJQUJCNkFGcWFpMEFBSFJCQVhWSUJIOUJBQVVnQ2tFQ2RDRUdJQUpCQVNBSUlBQkIrQUZxYWkwQUFIUkJBWFZLQkg4Z0JrRU1hZ1VnQmtFRWFnc0xOZ0lBSUFSQkRtb2hCaUFDUVFGMUlnUUVRQU5BSUFJZ0JFRUFJQUFnQmhCZEczSWhBaUFFUVFGMUlnUU5BQXNMSUFOQkdHb2dCMEVDZEdvaUJDZ0NBQ0FDUVg5eklBSkJBV29nQ2h0cUlRSWdCQ0FDTmdJQUJTQUpRUUEyQWdBZ0EwRVlhaUFIUVFKMGFpZ0NBQ0VDQ3lBTUlBSWdBQ2dDcUFOME93RUFJQVZCQVdvaUFpQUFLQUx3QWs0TkFpQUNJUVVNQVFzTERBRUxRUUVQQ3lBQUtBSUFJZ0ZCOVFBMkFoUWdBU2dDQkNFQklBQkJmeUFCUVQ5eFFiSUZhaEVEQUNBRFFYODJBaFJCQVF2S0NRRUpmeUFBS0FMVUF5RUNJQUFvQXB3RElnWkZJUU1nQUNnQzRBRUVRQ0FBS0FLZ0F5RUJBa0FDUUNBREJFQWdBUTBCQlNBQklBWklEUUVnQVNBQUtBSzBBMG9OQVNBQUtBTFVBa0VCUncwQkN5QUFLQUtrQXlJQkJFQWdBVUYvYWlJQklBQW9BcWdEUncwQkJTQUFLQUtvQXlFQkN5QUJRUTFLRFFBTUFRc2dBQ2dDQUNJQlFSRTJBaFFnQVNBR05nSVlJQUFvQWdBZ0FDZ0NvQU0yQWh3Z0FDZ0NBQ0FBS0FLa0F6WUNJQ0FBS0FJQUlBQW9BcWdETmdJa0lBQW9BZ0FvQWdBaEFTQUFJQUZCL3dGeFFhd0RhaEVCQUFzZ0FFSFVBbW9pQmlnQ0FDSUJRUUJLQkVBZ0FFR2tBMm9oQlVFQUlRTURRQ0FBUWRnQ2FpQURRUUowYWlnQ0FDZ0NCQ0VJSUFBb0FxQUJJUWtnQUNnQ25BTWlBUVJBSUFoQkNIUWdDV29vQWdCQkFFZ0VRQ0FBS0FJQUlnRkI5Z0EyQWhRZ0FTQUlOZ0lZSUFBb0FnQkJBRFlDSENBQUtBSUFLQUlFSVFFZ0FFRi9JQUZCUDNGQnNnVnFFUU1BSUFBb0Fwd0RJUUVMQlVFQUlRRUxJQUVnQUNnQ29BTk1CRUFEUUNBRktBSUFJQWhCQ0hRZ0NXb2dBVUVDZEdvaUJDZ0NBQ0lIUVFBZ0IwRUFTaHRIQkVBZ0FDZ0NBQ0lIUWZZQU5nSVVJQWNnQ0RZQ0dDQUFLQUlBSUFFMkFod2dBQ2dDQUNnQ0JDRUhJQUJCZnlBSFFUOXhRYklGYWhFREFBc2dCQ0FBS0FLb0F6WUNBQ0FCUVFGcUlRUWdBU0FBS0FLZ0EwZ0VRQ0FFSVFFTUFRc0xDeUFEUVFGcUlnTWdCaWdDQUNJQlNBMEFDd1VnQUVHa0Eyb2hCUXNnQUNnQ25BTkZJUU1nQlNnQ0FBUkFJQU1FUUNBQ1FTMDJBZ1FGSUFKQkxqWUNCQXNGSUFNRVFDQUNRU3MyQWdRRklBSkJMRFlDQkFzTEJRSkFBa0FnQTBVTkFDQUFLQUtrQXcwQUlBQW9BcWdERFFBZ0FDZ0NvQU1pQVVIQUFFZ0VRQ0FBS0FLMEF5QUJSdzBCQ3d3QkN5QUFLQUlBSWdGQi9RQTJBaFFnQVNnQ0JDRUJJQUJCZnlBQlFUOXhRYklGYWhFREFBc2dBa0V2TmdJRUlBQkIxQUpxSWdFaEJpQUJLQUlBSVFFTElBRkJBRXdFUUNBQ1FRQTJBZ3dnQWtFQU5nSVFJQUpCY0RZQ0ZDQUNJQUFvQXBnQ05nSTREd3RCQUNFREEwQWdBRUhZQW1vZ0EwRUNkR29vQWdBaEJBSkFBa0FDUUNBQUtBTGdBVVVOQUNBQUtBS2NBdzBCSUFBb0FxUURSUTBBREFJTElBUW9BaFFpQVVFUFN3UkFJQUFvQWdBaUJVRXlOZ0lVSUFVZ0FUWUNHQ0FBS0FJQUtBSUFJUVVnQUNBRlFmOEJjVUdzQTJvUkFRQUxJQUpCUEdvZ0FVRUNkR29pQlNnQ0FDSUJSUVJBSUFBb0FnUW9BZ0FoQVNBRklBQkJBVUhBQUNBQlFUOXhRY29CYWhFRUFDSUJOZ0lBQ3lBQlFnQTNBQUFnQVVJQU53QUlJQUZDQURjQUVDQUJRZ0EzQUJnZ0FVSUFOd0FnSUFGQ0FEY0FLQ0FCUWdBM0FEQWdBVUlBTndBNElBSkJHR29nQTBFQ2RHcEJBRFlDQUNBQ1FTaHFJQU5CQW5ScVFRQTJBZ0FnQUNnQzRBRUVRQ0FBS0FLY0F3MEJCU0FBS0FLMEF3MEJDd3dCQ3lBRUtBSVlJZ0ZCRDBzRVFDQUFLQUlBSWdSQk1qWUNGQ0FFSUFFMkFoZ2dBQ2dDQUNnQ0FDRUVJQUFnQkVIL0FYRkJyQU5xRVFFQUN5QUNRZndBYWlBQlFRSjBhaUlFS0FJQUlnRkZCRUFnQUNnQ0JDZ0NBQ0VCSUFRZ0FFRUJRWUFDSUFGQlAzRkJ5Z0ZxRVFRQUlnRTJBZ0FMSUFGQkFFR0FBaEJGR2dzZ0EwRUJhaUlESUFZb0FnQklEUUFMSUFKQkFEWUNEQ0FDUVFBMkFoQWdBa0Z3TmdJVUlBSWdBQ2dDbUFJMkFqZ0xtZ3dCTW44akJpRUhJd1pCZ0FGcUpBWWdBQ2dDeEFNaEZ5QUFLQUxNQWlFeElBQW9BcEFCSWdRZ0FDZ0NtQUVpQlV3RVFBSkFBMEFDUUNBQUtBTE1BeUlDS0FJVURRSWdCQ0FGUmdSQUlBQW9BcFFCSUFBb0Fwd0JJQUFvQXB3RFJXcExEUU1MSUFBZ0FpZ0NBRUgvQUhGQkNHb1JBQUJGRFFBZ0FDZ0NrQUVpQkNBQUtBS1lBU0lGVEEwQkRBSUxDeUFISkFaQkFBOExDeUF4UVg5cUlTb2dBQ2dDSkVFQVNnUi9JQUJCbkFGcUlSd2dBQ2dDMkFFaENnTi9JQW9vQWpRRVFDQWNLQUlBSWdnZ0tra0VmeUFLS0FJTUloRkJBWFFoQlNBUklRUkJBQVVnQ2lnQ0lDQUtLQUlNSWdRUVRpSUZJQVFnQlJzaUVTRUZRUUVMSVFrZ0NBUi9JQUFnRjBISUFHb2dEVUVDZEdvb0FnQWdCQ0FJUVg5cWJDQUVJQVZxUVFBZ0FDZ0NCQ2dDSUVFZmNVR2lBbW9SQ0FBZ0NpZ0NERUVDZEdvaEZFRUFCU0FBSUJkQnlBQnFJQTFCQW5ScUtBSUFRUUFnQlVFQUlBQW9BZ1FvQWlCQkgzRkJvZ0pxRVFnQUlSUkJBUXNoRWlBWEtBSndJQTFCQm14QkFuUnFJUk1nQ2lnQ1VDSUVMd0VBSVFnZ0JDOEJBaUVGSUFRdkFSQWhBaUFFTHdFZ0lRNGdCQzhCRWlFUElBUXZBUVFoQkNBQUtBTFlBMEVFYWlBTlFRSjBhaWdDQUNFcklCRkJBRW9FUUNBU1FRQkhJU3dnQ1VFQVJ5RXRJQkZCZjJvaExpQUlRU1JzSVIwZ0JVRUhkQ0VlSUFKQkIzUWhIeUFGUVFoMElTQWdDRUVKYkNFaElBNUJCM1FoSWlBQ1FRaDBJU01nQ2lFdklBaEJCV3doTUNBUFFRZDBJU1FnRGtFSWRDRWxJQVJCQjNRaEppQVBRUWgwSVNjZ0JFRUlkQ0VvUVFBaERDQU5RUUowSUFGcUtBSUFJUmdEUUNBTVFRSjBJQlJxS0FJQUlRSWdMQ0FNUlhFRWZ5QUNCU0FNUVg5cVFRSjBJQlJxS0FJQUN5RVZJQW9vQWh4QmYyb2hLU0F0SUF3Z0xrWnhCSDhnQWdVZ0RFRUJha0VDZENBVWFpZ0NBQXNpR1M0QkFDSUdJUVFnQWk0QkFDSUpJUVVnRlM0QkFDSVFJUWhCQUNFYUlBSWhGa0VBSVJzRFFDQUhJQlpCZ0FFUVRCb2dHaUFwU1FSL0lCa3VBWUFCSVE0Z0ZTNEJnQUVoRHlBV0xnR0FBUVVnQkNFT0lBZ2hEeUFGQ3lFU0lBY3VBUUpGSUJNb0FnUWlBa0VBUjNFRVFDQUhJQjBnQ1NBU2Eyd2lBMEYvU2dSL0lBTWdIbW9nSUJBNUlnTkJBU0FDZENJTFFYOXFJQU1nQzBnYklBTWdBa0VBU2hzRlFRQWdIaUFEYXlBZ0VEa2lBMEVCSUFKMElndEJmMm9nQXlBTFNCc2dBeUFDUVFCS0cyc0xPd0VDQ3lBSExnRVFSU0FUS0FJSUlnSkJBRWR4QkVBZ0J5QWRJQWdnQkd0c0lnTkJmMG9FZnlBRElCOXFJQ01RT1NJRFFRRWdBblFpQzBGL2FpQURJQXRJR3lBRElBSkJBRW9iQlVFQUlCOGdBMnNnSXhBNUlnTkJBU0FDZENJTFFYOXFJQU1nQzBnYklBTWdBa0VBU2h0ckN6c0JFQXNnQnk0QklFVWdFeWdDRENJQ1FRQkhjUVJBSUFjZ0lTQUVJQWdnQlVFQmRHdHFiQ0lEUVg5S0JIOGdBeUFpYWlBbEVEa2lBMEVCSUFKMElndEJmMm9nQXlBTFNCc2dBeUFDUVFCS0d3VkJBQ0FpSUFOcklDVVFPU0lEUVFFZ0FuUWlDMEYvYWlBRElBdElHeUFESUFKQkFFb2Jhd3M3QVNBTElBY3VBUkpGSUJNb0FoQWlBa0VBUjNFRVFDQUhJREFnRGlBUUlBWnJJQTlyYW13aUJrRi9TZ1IvSUFZZ0pHb2dKeEE1SWdaQkFTQUNkQ0lRUVg5cUlBWWdFRWdiSUFZZ0FrRUFTaHNGUVFBZ0pDQUdheUFuRURraUJrRUJJQUowSWhCQmYyb2dCaUFRU0JzZ0JpQUNRUUJLRzJzTE93RVNDeUFITGdFRVJTQVRLQUlVSWdKQkFFZHhCRUFnQnlBaElCSWdDU0FGUVFGMGEycHNJZ2xCZjBvRWZ5QUpJQ1pxSUNnUU9TSUpRUUVnQW5RaUJrRi9haUFKSUFaSUd5QUpJQUpCQUVvYkJVRUFJQ1lnQ1dzZ0tCQTVJZ2xCQVNBQ2RDSUdRWDlxSUFrZ0JrZ2JJQWtnQWtFQVNodHJDenNCQkFzZ0FDQUtJQWNnR0NBYklDdEJQM0ZCbWdacUVRVUFJQlpCZ0FGcUlSWWdGVUdBQVdvaEZTQVpRWUFCYWlFWklCc2dMeWdDSkdvaEd5QWFRUUZxSWhvZ0tVMEVRQ0FJSVRJZ0JTRUpJQVFoQmlBT0lRUWdFaUVGSUE4aENDQXlJUkFNQVFzTElBb29BaWhCQW5RZ0dHb2hHQ0FNUVFGcUlnd2dFVWNOQUFzTEN5QUtRZGdBYWlFS0lBMUJBV29pRFNBQUtBSWtTQTBBSUJ3TEJTQUFRWndCYWdzaUFTQUJLQUlBUVFGcUlnRTJBZ0JCQTBFRUlBRWdBQ2dDekFKSkd5RXpJQWNrQmlBekM1VUdBUlYvSUFBb0F1Z0NRWDlxSVFvZ0FDZ0N6QUlpQWtGL2FpRVRJQUFvQXNRRElnWW9BaGdpQ0NBR0tBSWNJZ05JQkVBQ1FDQUdRU0JxSVEwZ0FFR1VBV29oRGlBRElRSWdCaWdDRkNFSEFrQUNRQU5BQWtBZ0J5QUtUUVJBQTBBZ0FDZ0N0QU1FUUNBTktBSUFRUUFnQUNnQzhBSkJCM1FRUlJvTElBQW9BdFFES0FJRUlRSWdBQ0FOSUFKQlAzRkJpZ0ZxRVFJQVJRMENJQUFvQXRRQ0lnSkJBRW9FUUNBSElBcEpJUlJCQUNFRFFRQWhDd05BSUFCQjJBSnFJQXRCQW5ScUtBSUFJZ1FvQWpRRVFBSkFJQUFvQXRnRFFRUnFJQVFvQWdRaUJVRUNkR29vQWdBaEZTQUVRVGhxSWc4Z0JFSElBR29nRkJzb0FnQWhFQ0FFS0FJb0lSRWdCeUFFS0FKRWJDRVdJQVFvQWp3aUVrRUFTZ1JBSUJCQkFFd0VRQ0FQS0FJQUlRbEJBQ0VGQTBBZ0F5QUphaUVESUFWQkFXb2lCU0FTU0EwQUN3d0NDeUFGUVFKMElBRnFLQUlBSUFnZ0VXeEJBblJxSVFsQkFDRU1JQU1oQlNBU0lRSWdFU0VEQTBBQ1FBSkFJQTRvQWdBZ0Uwa05BQ0FJSUF4cUlBUW9Ba3hJRFFBTUFRc2dGaUVDUVFBaEF3TkFJQUFnQkNBR1FTQnFJQU1nQldwQkFuUnFLQUlBSUFrZ0FpQVZRVDl4UVpvR2FoRUZBQ0FDSUFRb0FpUnFJUUlnQTBFQmFpSURJQkJIRFFBTElBUW9BaWdoQXlBRUtBSThJUUlMSUFVZ0R5Z0NBR29oQlNBRFFRSjBJQWxxSVFrZ0RFRUJhaUlNSUFKSURRQUxJQVVoQXlBQUtBTFVBaUVDQ3dzRklBTWdCRUZBYXlnQ0FHb2hBd3NnQzBFQmFpSUxJQUpJRFFBTEN5QUhRUUZxSWdjZ0NrME5BQXNnQmlnQ0hDRUNDeUFHUVFBMkFoUWdDRUVCYWlJSUlBSk9EUUpCQUNFSERBRUxDd3dCQ3lBT0lRRWdBQ2dDekFJaEFnd0JDeUFHSUFnMkFoZ2dCaUFITmdJVVFRQVBDd1VnQUVHVUFXb2hBUXNnQUNBQUtBS2NBVUVCYWpZQ25BRWdBU0FCS0FJQVFRRnFJZ00yQWdBZ0F5QUNUd1JBSUFBb0Fzd0RLQUlNSVFFZ0FDQUJRZjhCY1VHc0Eyb1JBUUJCQkE4TElBQW9Bc1FESWdFZ0FDZ0MxQUpCQVVvRWYwRUJCU0FBS0FMWUFpSUFRUXhxSUFCQnpBQnFJQU1nQWtGL2Fra2JLQUlBQ3pZQ0hDQUJRUUEyQWhRZ0FVRUFOZ0lZUVFNTG9RRUJCSDhEUUFKQUFrQUNRQ0FBSUFGcUxBQUFJZ01FUUNBRFFTNUdCRUFNQWdVTUF3c0FDd3dDQ3lBQklRSUxJQUZCQVdvaEFRd0JDd3NnQUNBQmFpRURRWnk0QVJCZ1FRSnFJUVFDZndKQUlBSUVmeUFDSUFScVFZQUNTZ1IvUVg4RkRBSUxCU0FCSUFScVFZQUNTZ1IvUVg4RklBTkJMam9BQUNBQklRSU1BZ3NMREFFTElBQWdBa0VCYW1wQkFEb0FBQ0FBRUdBZ0FHb1FnUVZCQUFzYUM5b0RBUTkvSUFBb0FzUURJUXNnQUNnQ3pBSkJmMm9oREFKQUFrQURRQUpBSUFBb0FwQUJJZ0lnQUNnQ21BRWlBMDRFUUNBQ0lBTkhEUUVnQUNnQ2xBRWdBQ2dDbkFGTERRRUxJQUFvQXN3REtBSUFJUUlnQUNBQ1FmOEFjVUVJYWhFQUFBMEJEQUlMQ3d3QkMwRUFEd3NnQUNnQ0pFRUFTZ1JBSUFBb0F0Z0JJUUlEUUNBQ0tBSTBCRUFnQUNnQ0JDZ0NJQ0VESUFBZ0MwSElBR29nQkVFQ2RHb29BZ0FnQWlnQ0RDSUZJQUFvQXB3QmJDQUZRUUFnQTBFZmNVR2lBbW9SQ0FBaERTQUFLQUtjQVNBTVNRUi9JQUlvQWd3RklBSW9BaUFnQWlnQ0RDSUZFRTRoQXlBRElBVWdBeHNMSVFrZ0FDZ0MyQU5CQkdvZ0JFRUNkR29vQWdBaERpQUpRUUJLQkVBZ0JFRUNkQ0FCYWlnQ0FDRUdRUUFoQnlBQ0lnVWlEeWdDSENFREEwQWdBd1IvUVFBaEF5QUhRUUowSUExcUtBSUFJUWhCQUNFS0EzOGdBQ0FDSUFnZ0JpQURJQTVCUDNGQm1nWnFFUVVBSUFoQmdBRnFJUWdnQXlBUEtBSWthaUVESUFwQkFXb2lDaUFDS0FJY0loQkpEUUFnRUFzRlFRQUxJUU1nQlNnQ0tFRUNkQ0FHYWlFR0lBZEJBV29pQnlBSlJ3MEFDd3NMSUFKQjJBQnFJUUlnQkVFQmFpSUVJQUFvQWlSSURRQUxDeUFBSUFBb0Fwd0JRUUZxSWdFMkFwd0JRUU5CQkNBQklBQW9Bc3dDU1JzTG5RVUJFMzhqQmlFVEl3WkJFR29rQmlBVElRWWdBQ2dDeEFNaEJDQUFLQUxVQWtFQVNnUkFRUUFoQVFOQUlBQW9BZ1FvQWlBaEJTQUFRZGdDYWlBQlFRSjBhaWdDQUNJREtBSU1JUUlnQVVFQ2RDQUdhaUFBSUFSQnlBQnFJQU1vQWdSQkFuUnFLQUlBSUFBb0FwUUJJQUpzSUFKQkFTQUZRUjl4UWFJQ2FoRUlBRFlDQUNBQlFRRnFJZ0VnQUNnQzFBSklEUUFMQ3lBRUtBSVlJZ1VnQkNnQ0hDSUJTQVJBQWtBZ0JFRWdhaUVNSUFRb0FoUWhBeUFBS0FMb0FpRUNBMEFDUUNBRElBSkpCRUFnQXlFQ0EwQWdBQ2dDMUFJaURVRUFTZ1JBUVFBaEFVRUFJUWNEUUNBQ0lBQkIyQUpxSUFkQkFuUnFLQUlBSWdNb0FqZ2lDR3doRGlBREtBSThJZzlCQUVvRVFDQUhRUUowSUFacUtBSUFJUkFnQ0VFQVNnUkFRUUFoQ1FOQVFRQWhDeUFGSUFscVFRSjBJQkJxS0FJQUlBNUJCM1JxSVFvZ0FTRURBMEFnQ2tHQUFXb2hFU0FEUVFGcUlSSWdCRUVnYWlBRFFRSjBhaUFLTmdJQUlBdEJBV29pQ3lBSVJ3UkFJQkVoQ2lBU0lRTU1BUXNMSUFFZ0NHb2hBU0FKUVFGcUlna2dEMGdOQUFzTEN5QUhRUUZxSWdjZ0RVZ05BQXNMSUFBb0F0UURLQUlFSVFFZ0FDQU1JQUZCUDNGQmlnRnFFUUlBUlEwQ0lBSkJBV29pQWlBQUtBTG9BaUlCU1EwQUN5QUJJUUlnQkNnQ0hDRUJDeUFFUVFBMkFoUWdCVUVCYWlJRklBRk9EUUpCQUNFRERBRUxDeUFFSUFVMkFoZ2dCQ0FDTmdJVUlBWWtCa0VBRHdzTElBQWdBQ2dDbEFGQkFXb2lBallDbEFFZ0FpQUFLQUxNQWlJRlR3UkFJQUFvQXN3REtBSU1JUUVnQUNBQlFmOEJjVUdzQTJvUkFRQWdCaVFHUVFRUEN5QUFLQUxFQXlJQklBQW9BdFFDUVFGS0JIOUJBUVVnQUNnQzJBSWlBRUVNYWlBQVFjd0FhaUFDSUFWQmYycEpHeWdDQUFzMkFod2dBVUVBTmdJVUlBRkJBRFlDR0NBR0pBWkJBd3VsQXdFTGZ5QUFLQUxFQXlJQktBSVFSUVJBSUFCQkFEWUNuQUVQQ3lBQkFuOENRQ0FBS0FKUVJRMEFJQUFvQXVBQlJRMEFJQUFvQXFBQlJRMEFJQUVvQW5BaUFnUkFJQUJCSkdvaEJnVWdBQ2dDQkNnQ0FDRUNJQUVnQUVFQklBQkJKR29pQmlnQ0FFRVliQ0FDUVQ5eFFjb0JhaEVFQUNJQ05nSndDeUFHS0FJQVFRQk1EUUFnQUNnQzJBRWhDQU5BSUFnb0FsQWlBVVVOQVNBQkxnRUFSUTBCSUFFdUFRSkZEUUVnQVM0QkVFVU5BU0FCTGdFZ1JRMEJJQUV1QVJKRkRRRWdBUzRCQkVVTkFTQUFLQUtnQVNJQklBUkJDSFJxS0FJQVFRQklEUUVnQWlBRVFRaDBJQUZxSWdNb0FnUTJBZ1FnQXlnQ0JDRUpJQUlnQkVFSWRDQUJhaUlGS0FJSU5nSUlJQWtnQlNnQ0NISWhDaUFDSUFSQkNIUWdBV29pQlNnQ0REWUNEQ0FLSUFVb0FneHlJUXNnQWlBRVFRaDBJQUZxSWdVb0FoQTJBaEFnQ3lBRktBSVFjaUVESUFJZ0JFRUlkQ0FCYWlJQktBSVVOZ0lVUVFFZ0J5QURJQUVvQWhSeUd5RUhJQUpCR0dvaEFpQUlRZGdBYWlFSUlBUkJBV29pQkNBR0tBSUFTQTBBQ3lBSFJRMEFRU29NQVF0QktBczJBZ3dnQUVFQU5nS2NBUXRTQVFKL0lBQkJBRFlDbEFFZ0FDZ0N4QU1pQVNBQUtBTFVBa0VCU2dSL1FRRUZJQUFvQXRnQ0lnSkJ6QUJxSUFKQkRHb2dBQ2dDekFKQkFVWWJLQUlBQ3pZQ0hDQUJRUUEyQWhRZ0FVRUFOZ0lZQzZ3REFRVi9JQUFvQWdRb0FnQWhBeUFBSUFCQkFVSDBBQ0FEUVQ5eFFjb0JhaEVFQUNJQ05nTEVBeUFDUWYwQU5nSUFJQUpCL2dBMkFnZ2dBa0VBTmdKd0lBRkZCRUFnQUNnQ0JDZ0NCQ0VCSUFJZ0FFRUJRWUFLSUFGQlAzRkJ5Z0ZxRVFRQUlnRTJBaUFnQWlBQlFZQUJhallDSkNBQ0lBRkJnQUpxTmdJb0lBSWdBVUdBQTJvMkFpd2dBaUFCUVlBRWFqWUNNQ0FDSUFGQmdBVnFOZ0kwSUFJZ0FVR0FCbW8yQWpnZ0FpQUJRWUFIYWpZQ1BDQUNRVUJySUFGQmdBaHFOZ0lBSUFJZ0FVR0FDV28yQWtRZ0FDZ0N0QU5GQkVBZ0FVRUFRWUFLRUVVYUN5QUNRZFlBTmdJRUlBSkJLVFlDRENBQ1FRQTJBaEFQQ3lBQUtBSWtRUUJLQkVBZ0FrSElBR29oQkVFQUlRTWdBQ2dDMkFFaEFRTkFJQUVvQWd3aUJTQUZRUU5zSUFBb0F1QUJSUnNoQlNBQUtBSUVLQUlVSVFZZ0EwRUNkQ0FFYWlBQVFRRkJBU0FCS0FJY0lBRW9BZ2dRK0FFZ0FTZ0NJQ0FCS0FJTUVQZ0JJQVVnQmtFL2NVSEdBbW9SQ2dBMkFnQWdBVUhZQUdvaEFTQURRUUZxSWdNZ0FDZ0NKRWdOQUFzRklBSkJ5QUJxSVFRTElBSkIxUUEyQWdRZ0FrRW9OZ0lNSUFJZ0JEWUNFQXVoQWdFQ2Z5QUFLQUlFS0FJQUlRRWdBQ0FBUVFGQndBRWdBVUUvY1VIS0FXb1JCQUFpQWpZQzFBTWdBa0g3QURZQ0FDQUNRZndBTmdJSUlBSkJQR29pQVVJQU53SUFJQUZDQURjQ0NDQUJRZ0EzQWhBZ0FVSUFOd0lZSUFGQ0FEY0NJQ0FCUWdBM0FpZ2dBVUlBTndJd0lBRkNBRGNDT0NBQlFVQnJRZ0EzQWdBZ0FVSUFOd0pJSUFGQ0FEY0NVQ0FCUWdBM0FsZ2dBVUlBTndKZ0lBRkNBRGNDYUNBQlFnQTNBbkFnQVVJQU53SjRJQUpCOFFBNkFMd0JJQUFvQXVBQlJRUkFEd3NnQUNnQ0JDZ0NBQ0VCSUFBZ0FFRUJJQUFvQWlSQkNIUWdBVUUvY1VIS0FXb1JCQUFpQWpZQ29BRWdBQ2dDSkVFQVRBUkFEd3RCQUNFQkEwQWdBaUFCUVFoMGFrRi9RWUFDRUVVYUlBRkJBV29pQVNBQUtBSWtTQTBBQ3dzcUFRRi9JQUFvQXRRREtBSUlJUUVnQUNBQlFmOEJjVUdzQTJvUkFRQWdBQ2dDekFOQjFBQTJBZ0FMWWdFQmZ5QUFLQUxNQXlJQlFkUUFOZ0lBSUFGQkFEWUNFQ0FCUVFBMkFoUWdBVUVCTmdJWUlBQW9BZ0FvQWhBaEFTQUFJQUZCL3dGeFFhd0RhaEVCQUNBQUtBTFFBeWdDQUNFQklBQWdBVUgvQVhGQnJBTnFFUUVBSUFCQkFEWUNvQUVMWXdFQmZ5QUFRUUJISUFGQkFFZHhCRUFDUUNBQklBRVFZRUVCYWhDQUJTSUNSUVJBSUFCQkFEb0FBQXdCQ3lBQ1FRRnFJQUZySWdKQkFXcEJnQkJMQkVCQkFDRUFCU0FBSUFFZ0FoRFZBU0FBSUFKcVFRQTZBQUFMQ3dWQkFDRUFDeUFBQzZVUEFRbC9JQUFvQXN3RElnUW9BaFFFUUVFQ0R3c0NRQUpBQWtBRFFBSkFJQUFvQXRBREtBSUVJUUVDUUNBQUlBRkIvd0J4UVFocUVRQUFJZ0ZCQVdzT0FnQUVCUXNDUUFKQUFrQUNRQUpBSUFRb0FoZ09BZ0FCQWdzZ0JDZ0NFRVVFUUNBQUtBSUFJZ0ZCSkRZQ0ZDQUJLQUlBSVFFZ0FDQUJRZjhCY1VHc0Eyb1JBUUFMSUFBb0F0UUNEUVlNQXdzQ1FBSkFJQUFvQWlCQjNQOERTZzBBSUFBb0FoeEIzUDhEU2cwQURBRUxJQUFvQWdBaUFVRXFOZ0lVSUFGQjNQOEROZ0lZSUFBb0FnQW9BZ0FoQVNBQUlBRkIvd0Z4UWF3RGFoRUJBQXNnQUNnQzFBRWlBVUY0YWtFRVN3UkFJQUFvQWdBaUFrRVFOZ0lVSUFJZ0FUWUNHQ0FBS0FJQUtBSUFJUUVnQUNBQlFmOEJjVUdzQTJvUkFRQUxJQUFvQWlRaUFVRUtTZ1JBSUFBb0FnQWlBa0ViTmdJVUlBSWdBVFlDR0NBQUtBSUFRUW8yQWh3Z0FDZ0NBQ2dDQUNFQklBQWdBVUgvQVhGQnJBTnFFUUVBSUFBb0FpUWhBUXNnQUVFQk5nSzhBaUFBUVFFMkFzQUNJQUZCQUVvRVFFRUFJUWNnQUNnQzJBRWhBa0VCSVFOQkFTRUZBMEFDZndKQUlBSWlDQ2dDQ0NJR1FYOXFRUU5MRFFBZ0FpZ0NEQ0lKUVg5cVFRTkxEUUFnQ1F3QkN5QUFLQUlBSWdGQkV6WUNGQ0FCS0FJQUlRRWdBQ0FCUWY4QmNVR3NBMm9SQVFBZ0FDZ0N2QUloQlNBSUtBSUlJUVlnQUNnQ3dBSWhBeUFBS0FJa0lRRWdBaWdDREFzaEFpQUFJQVVnQmlBRklBWktHeUlGTmdLOEFpQUFJQU1nQWlBRElBSktHeUlETmdMQUFpQUlRZGdBYWlFQ0lBZEJBV29pQnlBQlNBMEFDd3NnQUFKL0FrQWdBQ2dDM0FFTkFBSi9JQUFvQXVBQkJFQWdBQ2dDMUFJTkFnc0NRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUlBQW9BcUFERG9BQ0FCQVFBUkFRRUJBQ0VCQVFFQkFRQXhBUUVCQVFFQkFRQkJBUUVCQVFFQkFRRUJBRkVCQVFFQkFRRUJBUUVCQVFCaEFRRUJBUUVCQVFFQkFRRUJBUUJ4QVFFQkFRRUJBUUVCQVFFQkFRRUJBSUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUNSQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFDaEFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBTEVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRREJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRFJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBT0VCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFEeEFMSUFCQkFUWUNyQU1nQUVHQUhEWUNzQU1nQUVFQU5nSzBBMEVCREJBTElBQkJBallDckFNZ0FFSEFKVFlDc0FNZ0FFRUROZ0swQTBFQ0RBOExJQUJCQXpZQ3JBTWdBRUhRSkRZQ3NBTWdBRUVJTmdLMEEwRUREQTRMSUFCQkJEWUNyQU1nQUVIUUl6WUNzQU1nQUVFUE5nSzBBMEVFREEwTElBQkJCVFlDckFNZ0FFR2dJallDc0FNZ0FFRVlOZ0swQTBFRkRBd0xJQUJCQmpZQ3JBTWdBRUhRSURZQ3NBTWdBRUVqTmdLMEEwRUdEQXNMSUFCQkJ6WUNyQU1nQUVIQUhqWUNzQU1nQUVFd05nSzBBMEVIREFvTElBQkJDRFlDckFNZ0FFR0FIRFlDc0FNZ0FFRS9OZ0swQTBFSURBa0xJQUJCQ1RZQ3JBTWdBRUdBSERZQ3NBTWdBRUUvTmdLMEEwRUpEQWdMSUFCQkNqWUNyQU1nQUVHQUhEWUNzQU1nQUVFL05nSzBBMEVLREFjTElBQkJDellDckFNZ0FFR0FIRFlDc0FNZ0FFRS9OZ0swQTBFTERBWUxJQUJCRERZQ3JBTWdBRUdBSERZQ3NBTWdBRUUvTmdLMEEwRU1EQVVMSUFCQkRUWUNyQU1nQUVHQUhEWUNzQU1nQUVFL05nSzBBMEVOREFRTElBQkJEallDckFNZ0FFR0FIRFlDc0FNZ0FFRS9OZ0swQTBFT0RBTUxJQUJCRHpZQ3JBTWdBRUdBSERZQ3NBTWdBRUUvTmdLMEEwRVBEQUlMSUFCQkVEWUNyQU1nQUVHQUhEWUNzQU1nQUVFL05nSzBBMEVRREFFTElBQW9BZ0FpQVVFUk5nSVVJQUVnQUNnQ25BTTJBaGdnQUNnQ0FDQUFLQUtnQXpZQ0hDQUFLQUlBSUFBb0FxUUROZ0lnSUFBb0FnQWdBQ2dDcUFNMkFpUWdBQ2dDQUNnQ0FDRUJJQUFnQVVIL0FYRkJyQU5xRVFFQUlBQW9BaVFoQVNBQUtBS3NBd3NNQVFzZ0FFRUlOZ0tzQXlBQVFZQWNOZ0t3QXlBQVFUODJBclFEUVFnTElnSTJBc1FDSUFBZ0FqWUN5QUlnQVVFQVNnUkFRUUFoQVNBQUtBTFlBU0VEQTBBZ0F5QUNOZ0lrSUFNZ0FqWUNLQ0FESUFBb0Fod2dBeWdDQ0d3Z0FpQUFLQUs4QW13UWFEWUNIQ0FESUFBb0FpQWdBeWdDREd3Z0FDZ0N3QUlnQUNnQ3JBTnNFR2cyQWlBZ0F5QUFLQUljSUFNb0FnaHNJQUFvQXJ3Q0VHZzJBaXdnQXlBQUtBSWdJQU1vQWd4c0lBQW9Bc0FDRUdnMkFqQWdBMEVCTmdJMElBTkJBRFlDVUNBQlFRRnFJZ0VnQUNnQ0pFZ0VRQ0FEUWRnQWFpRURJQUFvQXF3RElRSU1BUXNMSUFBb0Fxd0RJUUlMSUFBZ0FDZ0NJQ0FBS0FMQUFpQUNiQkJvTmdMTUFpQUFLQUxVQWlJQklBQW9BaVJPQkVBZ0FDZ0M0QUZGQkVBZ0FDZ0N6QU5CQURZQ0VBd0RDd3NnQUNnQ3pBTkJBVFlDRUF3QkN5QUFLQUxVQWlFQkN5QUJEUUVnQkVFQ05nSVlDd3dCQ3dzZ0JFRUFOZ0lZUVFFUEN5QUFFS2NEUVFFUEN5QUVRUUUyQWhRZ0JDZ0NHQVJBSUFBb0F0QURLQUlRUlFSQVFRSVBDeUFBS0FJQUlnRkJQallDRkNBQktBSUFJUUVnQUNBQlFmOEJjVUdzQTJvUkFRQUZJQUFvQXBnQklBQW9BcEFCSWdGTUJFQkJBZzhMSUFBZ0FUWUNtQUVMUVFJUEN5QUJDMTBCQVg4Z0FDZ0NCQ2dDQUNFQklBQWdBRUVBUVJ3Z0FVRS9jVUhLQVdvUkJBQWlBRFlDekFNZ0FFSFVBRFlDQUNBQVFmZ0FOZ0lFSUFCQitRQTJBZ2dnQUVINkFEWUNEQ0FBUVFBMkFoQWdBRUVBTmdJVUlBQkJBVFlDR0F2L0JRRUVmeUFBSUFBb0Fxd0RJZ0lnQUNnQ01Hd2lBU0FBS0FJMElnTkxCSDhDZnlBQklBTkJBWFJOQkVBZ0FDQUFLQUljUVFGMElBSVFhRFlDY0VFQ0lRRWdBQ2dDSUVFQmRBd0JDeUFCSUFOQkEyeE5CRUFnQUNBQUtBSWNRUU5zSUFJUWFEWUNjRUVESVFFZ0FDZ0NJRUVEYkF3QkN5QUJJQU5CQW5STkJFQWdBQ0FBS0FJY1FRSjBJQUlRYURZQ2NFRUVJUUVnQUNnQ0lFRUNkQXdCQ3lBQklBTkJCV3hOQkVBZ0FDQUFLQUljUVFWc0lBSVFhRFlDY0VFRklRRWdBQ2dDSUVFRmJBd0JDeUFCSUFOQkJteE5CRUFnQUNBQUtBSWNRUVpzSUFJUWFEWUNjRUVHSVFFZ0FDZ0NJRUVHYkF3QkN5QUJJQU5CQjJ4TkJFQWdBQ0FBS0FJY1FRZHNJQUlRYURZQ2NFRUhJUUVnQUNnQ0lFRUhiQXdCQ3lBQklBTkJBM1JOQkVBZ0FDQUFLQUljUVFOMElBSVFhRFlDY0VFSUlRRWdBQ2dDSUVFRGRBd0JDeUFCSUFOQkNXeE5CRUFnQUNBQUtBSWNRUWxzSUFJUWFEWUNjRUVKSVFFZ0FDZ0NJRUVKYkF3QkN5QUJJQU5CQ214TkJFQWdBQ0FBS0FJY1FRcHNJQUlRYURZQ2NFRUtJUUVnQUNnQ0lFRUtiQXdCQ3lBQklBTkJDMnhOQkVBZ0FDQUFLQUljUVF0c0lBSVFhRFlDY0VFTElRRWdBQ2dDSUVFTGJBd0JDeUFCSUFOQkRHeE5CRUFnQUNBQUtBSWNRUXhzSUFJUWFEWUNjRUVNSVFFZ0FDZ0NJRUVNYkF3QkN5QUJJQU5CRFd4TkJFQWdBQ0FBS0FJY1FRMXNJQUlRYURZQ2NFRU5JUUVnQUNnQ0lFRU5iQXdCQ3lBQklBTkJEbXhOQkVBZ0FDQUFLQUljUVE1c0lBSVFhRFlDY0VFT0lRRWdBQ2dDSUVFT2JBd0JDeUFBS0FJY0lRUWdBU0FEUVE5c1N3Ui9JQUFnQkVFRWRDQUNFR2cyQW5CQkVDRUJJQUFvQWlCQkJIUUZJQUFnQkVFUGJDQUNFR2cyQW5CQkR5RUJJQUFvQWlCQkQyd0xDd1VnQUNBQUtBSWNJQUlRYURZQ2NFRUJJUUVnQUNnQ0lBc2dBQ2dDckFNUWFEWUNkQ0FBSUFFMkFzUUNJQUFnQVRZQ3lBSWdBQ2dDSkNJRFFRQk1CRUFQQzBFQUlRSWdBQ2dDMkFFaEFBTkFJQUFnQVRZQ0pDQUFJQUUyQWlnZ0FFSFlBR29oQUNBQ1FRRnFJZ0lnQTBnTkFBc0x0QXNCRDM4akJpRUlJd1pCTUdva0JpQUFLQUxVQXlFSElBQW9BcGdDQkVBZ0J5Z0NMRVVFUUNBSEtBSVFRUWdRT1NFQ0lBQW9BdEFESWdVZ0FpQUZLQUlZYWpZQ0dDQUhRUUEyQWhBZ0JTZ0NDQ0VGSUFBZ0JVSC9BSEZCQ0dvUkFBQkZCRUFnQ0NRR1FRQVBDeUFBS0FMVUFrRUFTZ1JBUVFBaEJRTkFJQWRCR0dvZ0JVRUNkR3BCQURZQ0FDQUZRUUZxSWdVZ0FDZ0MxQUpJRFFBTEN5QUhRUUEyQWhRZ0J5QUFLQUtZQWpZQ0xDQUFLQUs0QTBVRVFDQUhRUUEyQWlnTEN3c2dDRUVVYWlFR0lBY29BaWhGQkVBZ0FDZ0NzQU1oRHlBQUtBSzBBeUVOSUFZZ0FEWUNFQ0FHSUFBb0FoZ2lCQ2dDQUNJSk5nSUFJQVlnQkNnQ0JDSUROZ0lFSUFjb0Fnd2hCU0FIS0FJUUlRSWdDQ0FIS1FJVU53SUFJQWdnQnlrQ0hEY0NDQ0FJSUFjb0FpUTJBaEFnQUNnQzhBSkJBRW9FUUFKQVFRQWhDUUpBQTBBZ0NVRUNkQ0FCYWlnQ0FDRUtJQWRCNUFCcUlBbEJBblJxS0FJQUlRUUNmd0pBSUFKQkNFZ0VRQ0FHSUFVZ0FrRUFFR2RGRFFRZ0JpZ0NDQ0VGSUFZb0Fnd2lBa0VJU0FSQVFRRWhBd3dDQ3dzZ0JFR1FBV29nQlNBQ1FYaHFkVUgvQVhFaUEwRUNkR29vQWdBaUN3Ui9JQU1nQkVHUUNXcHFMUUFBSVFRZ0FpQUxhd1ZCQ1NFRERBRUxEQUVMSUFZZ0JTQUNJQVFnQXhDZ0FTSUVRUUJJRFFJZ0JpZ0NDQ0VGSUFZb0Fnd0xJUUlnQjBHTUFXb2dDVUVDZEdvb0FnQWhDeUFFUVFCSElRTUNRQUpBSUFkQnRBRnFJQWxCQW5ScUtBSUFJZzRFUUFKQUlBTUVmeUFDSUFSSUJFQWdCaUFGSUFJZ0JCQm5SUTBISUFZb0FnZ2hCU0FHS0FJTUlRSUxJQVJCQW5SQjhERnFLQUlBSWdNZ0JTQUNJQVJySWdKMWNTSU1RUUFnQXlBTUlBUkJBblJCN0RGcUtBSUFTaHRyQlVFQUN5QUlRUVJxSUFCQjlBSnFJQWxCQW5ScUtBSUFRUUowYWlJREtBSUFhaUVFSUFNZ0JEWUNBQ0FLSUFRN0FRQWdEa0VCU2dSQVFRRWhCQU5BQW44Q1FDQUNRUWhJQkVBZ0JpQUZJQUpCQUJCblJRMEtJQVlvQWdnaEJTQUdLQUlNSWdKQkNFZ0VRRUVCSVFNTUFnc0xJQXRCa0FGcUlBVWdBa0Y0YW5WQi93RnhJZ05CQW5ScUtBSUFJZ3dFZnlBRElBdEJrQWxxYWkwQUFDRURJQUlnREdzRlFRa2hBd3dCQ3d3QkN5QUdJQVVnQWlBTElBTVFvQUVpQTBFQVNBMElJQVlvQWdnaEJTQUdLQUlNQ3lFQ0lBTkJCSFloRENBRFFROXhJZ01FUUNBQ0lBTklCRUFnQmlBRklBSWdBeEJuUlEwSklBWW9BZ2doQlNBR0tBSU1JUUlMSUFRZ0RHb2lCRUVDZENBUGFpZ0NBRUVCZENBS2FpQURRUUowUWZBeGFpZ0NBQ0lNSUFVZ0FpQURheUlDZFhFaUVFRUFJQXdnRUNBRFFRSjBRZXd4YWlnQ0FFb2JhenNCQUFVZ0RFRVBSdzBESUFSQkQyb2hCQXNnQkVFQmFpSUVJQTVJRFFBTERBTUZRUUVoQkF3REN3QUxCU0FEQkVBZ0FpQUVTQVJBSUFZZ0JTQUNJQVFRWjBVTkJpQUdLQUlJSVFVZ0JpZ0NEQ0VDQ3lBQ0lBUnJJUUlMUVFFaEJBd0JDd3dCQ3lBRUlBMU1CRUFEUUFKL0FrQWdBa0VJU0FSQUlBWWdCU0FDUVFBUVowVU5CeUFHS0FJSUlRVWdCaWdDRENJQ1FRaElCRUJCQVNFRERBSUxDeUFMUVpBQmFpQUZJQUpCZUdwMVFmOEJjU0lEUVFKMGFpZ0NBQ0lLQkg4Z0F5QUxRWkFKYW1vdEFBQWhBeUFDSUFwckJVRUpJUU1NQVFzTUFRc2dCaUFGSUFJZ0N5QURFS0FCSWdOQkFFZ05CU0FHS0FJSUlRVWdCaWdDREFzaEFpQURRUVIySVFvZ0EwRVBjU0lEQkVBZ0FpQURTQVJBSUFZZ0JTQUNJQU1RWjBVTkJpQUdLQUlJSVFVZ0JpZ0NEQ0VDQ3lBQ0lBTnJJUUlGSUFwQkQwY05BMEVQSVFvTElBUkJBV29nQ21vaUJDQU5UQTBBQ3dzTElBbEJBV29pQ1NBQUtBTHdBa2dOQUFzZ0FDZ0NHQ0VBSUFZb0FnQWhBU0FHS0FJRUlRUU1BUXNnQ0NRR1FRQVBDd1VnQkNFQUlBa2hBU0FESVFRTElBQWdBVFlDQUNBQUlBUTJBZ1FnQnlBRk5nSU1JQWNnQWpZQ0VDQUhJQWdwQWdBM0FoUWdCeUFJS1FJSU53SWNJQWNnQ0NnQ0VEWUNKQXNnQnlBSEtBSXNRWDlxTmdJc0lBZ2tCa0VCQzZJTEFRMS9Jd1loQ1NNR1FUQnFKQVlnQUNnQzFBTWhCeUFBS0FLWUFnUkFJQWNvQWl4RkJFQWdCeWdDRUVFSUVEa2hBaUFBS0FMUUF5SUVJQUlnQkNnQ0dHbzJBaGdnQjBFQU5nSVFJQVFvQWdnaEJDQUFJQVJCL3dCeFFRaHFFUUFBUlFSQUlBa2tCa0VBRHdzZ0FDZ0MxQUpCQUVvRVFFRUFJUVFEUUNBSFFSaHFJQVJCQW5ScVFRQTJBZ0FnQkVFQmFpSUVJQUFvQXRRQ1NBMEFDd3NnQjBFQU5nSVVJQWNnQUNnQ21BSTJBaXdnQUNnQ3VBTkZCRUFnQjBFQU5nSW9Dd3NMSUFsQkZHb2hCU0FIS0FJb1JRUkFJQVVnQURZQ0VDQUZJQUFvQWhnaUJpZ0NBQ0lLTmdJQUlBVWdCaWdDQkNJRE5nSUVJQWNvQWd3aEJDQUhLQUlRSVFJZ0NTQUhLUUlVTndJQUlBa2dCeWtDSERjQ0NDQUpJQWNvQWlRMkFoQWdBQ2dDOEFKQkFFb0VRQUpBUVFBaENnSkFBMEFnQ2tFQ2RDQUJhaWdDQUNFTklBZEI1QUJxSUFwQkFuUnFLQUlBSVFZQ2Z3SkFJQUpCQ0VnRVFDQUZJQVFnQWtFQUVHZEZEUVFnQlNnQ0NDRUVJQVVvQWd3aUFrRUlTQVJBUVFFaEF3d0NDd3NnQmtHUUFXb2dCQ0FDUVhocWRVSC9BWEVpQTBFQ2RHb29BZ0FpQ0FSL0lBTWdCa0dRQ1dwcUxRQUFJUVlnQWlBSWF3VkJDU0VEREFFTERBRUxJQVVnQkNBQ0lBWWdBeENnQVNJR1FRQklEUUlnQlNnQ0NDRUVJQVVvQWd3TElRSWdCMEdNQVdvZ0NrRUNkR29vQWdBaEN5QUdRUUJISVFNQ1FBSkFJQWRCdEFGcUlBcEJBblJxS0FJQUlnNEVRQUpBSUFNRWZ5QUNJQVpJQkVBZ0JTQUVJQUlnQmhCblJRMEhJQVVvQWdnaEJDQUZLQUlNSVFJTElBWkJBblJCOERGcUtBSUFJZ01nQkNBQ0lBWnJJZ0oxY1NJSVFRQWdBeUFJSUFaQkFuUkI3REZxS0FJQVNodHJCVUVBQ3lBSlFRUnFJQUJCOUFKcUlBcEJBblJxS0FJQVFRSjBhaUlES0FJQWFpRUdJQU1nQmpZQ0FDQU5JQVk3QVFBZ0RrRUJTZ1JBUVFFaEJnTkFBbjhDUUNBQ1FRaElCRUFnQlNBRUlBSkJBQkJuUlEwS0lBVW9BZ2doQkNBRktBSU1JZ0pCQ0VnRVFFRUJJUU1NQWdzTElBdEJrQUZxSUFRZ0FrRjRhblZCL3dGeElnTkJBblJxS0FJQUlnZ0VmeUFESUF0QmtBbHFhaTBBQUNFRElBSWdDR3NGUVFraEF3d0JDd3dCQ3lBRklBUWdBaUFMSUFNUW9BRWlBMEVBU0EwSUlBVW9BZ2doQkNBRktBSU1DeUVDSUFOQkJIWWhEQ0FEUVE5eElnZ0VRQ0FDSUFoSUJFQWdCU0FFSUFJZ0NCQm5SUTBKSUFVb0FnZ2hCQ0FGS0FJTUlRSUxJQVlnREdvaUEwRUNkRUdBSEdvb0FnQkJBWFFnRFdvZ0NFRUNkRUh3TVdvb0FnQWlCaUFFSUFJZ0NHc2lBblZ4SWd4QkFDQUdJQXdnQ0VFQ2RFSHNNV29vQWdCS0cyczdBUUFGSUF4QkQwY05BeUFHUVE5cUlRTUxJQU5CQVdvaUJpQU9TQTBBQ3lBRFFUOUlEUU1GUVFFaEJnd0RDd3NGSUFNRVFDQUNJQVpJQkVBZ0JTQUVJQUlnQmhCblJRMEdJQVVvQWdnaEJDQUZLQUlNSVFJTElBSWdCbXNoQWd0QkFTRUdEQUVMREFFTEEwQUNmd0pBSUFKQkNFZ0VRQ0FGSUFRZ0FrRUFFR2RGRFFZZ0JTZ0NDQ0VFSUFVb0Fnd2lBa0VJU0FSQVFRRWhBd3dDQ3dzZ0MwR1FBV29nQkNBQ1FYaHFkVUgvQVhFaUEwRUNkR29vQWdBaUNBUi9JQU1nQzBHUUNXcHFMUUFBSVFNZ0FpQUlhd1ZCQ1NFRERBRUxEQUVMSUFVZ0JDQUNJQXNnQXhDZ0FTSURRUUJJRFFRZ0JTZ0NDQ0VFSUFVb0Fnd0xJUUlnQTBFRWRpRUlJQU5CRDNFaUF3UkFJQUlnQTBnRVFDQUZJQVFnQWlBREVHZEZEUVVnQlNnQ0NDRUVJQVVvQWd3aEFnc2dBaUFEYXlFQ0JTQUlRUTlIRFFKQkR5RUlDeUFHUVFGcUlBaHFJZ1pCd0FCSURRQUxDeUFLUVFGcUlnb2dBQ2dDOEFKSURRQUxJQUFvQWhnaEFDQUZLQUlBSVFFZ0JTZ0NCQ0VHREFFTElBa2tCa0VBRHdzRklBWWhBQ0FLSVFFZ0F5RUdDeUFBSUFFMkFnQWdBQ0FHTmdJRUlBY2dCRFlDRENBSElBSTJBaEFnQnlBSktRSUFOd0lVSUFjZ0NTa0NDRGNDSENBSElBa29BaEEyQWlRTElBY2dCeWdDTEVGL2FqWUNMQ0FKSkFaQkFRdWVDZ0VSZnlNR0lRVWpCa0dnQW1va0JpQUFLQUxVQXlFSUlBQW9BcGdDQkVBZ0NDZ0NMRVVFUUNBSUtBSVFRUWdRT1NFRUlBQW9BdEFESWdJZ0JDQUNLQUlZYWpZQ0dDQUlRUUEyQWhBZ0FpZ0NDQ0VDSUFBZ0FrSC9BSEZCQ0dvUkFBQkZCRUFnQlNRR1FRQVBDeUFBS0FMVUFrRUFTZ1JBUVFBaEFnTkFJQWhCR0dvZ0FrRUNkR3BCQURZQ0FDQUNRUUZxSWdJZ0FDZ0MxQUpJRFFBTEN5QUlRUUEyQWhRZ0NDQUFLQUtZQWpZQ0xDQUFLQUs0QTBVRVFDQUlRUUEyQWlnTEN3c2dCVUdBQW1vaEJ5QUZJUW9nQ0NnQ0tFVUVRQUpBSUFBb0FxQURJUTVCQVNBQUtBS29BeUlDZENFTFFYOGdBblFoRHlBQUtBS3dBeUVRSUFjZ0FEWUNFQ0FISUFBb0FoZ2lBaWdDQURZQ0FDQUhJQUlvQWdRMkFnUWdDQ2dDRENFRklBZ29BaEFoQkNBQktBSUFJUTBnQ0VGQWF5Z0NBQ0VNSUFBb0Fwd0RJUUlDUUFKL0FrQWdDQ2dDRkNJSkRRQkJBQ0VCQWtBRFFBSkFBbjhDUUNBRVFRaElCRUFnQnlBRklBUkJBQkJuUlEwRklBY29BZ2doQlNBSEtBSU1JZ1JCQ0VnRVFFRUJJUU1NQWdzTElBeEJrQUZxSUFVZ0JFRjRhblZCL3dGeElnTkJBblJxS0FJQUlna0VmeUFESUF4QmtBbHFhaTBBQUNFR0lBUWdDV3NGUVFraEF3d0JDd3dCQ3lBSElBVWdCQ0FNSUFNUW9BRWlCa0VBU0EwRElBY29BZ2doQlNBSEtBSU1DeUVFSUFaQkJIWWhBd0ovQWtBQ1FBSkFJQVpCRDNFT0FnQUNBUXNnQTBFUFJ3MERJQVFoQmtFQURBSUxJQUFvQWdBaUJrSDVBRFlDRkNBR0tBSUVJUVlnQUVGL0lBWkJQM0ZCc2dWcUVRTUFDeUFFUVFGSUJFQWdCeUFGSUFSQkFSQm5SUTBFSUFjb0Fnd2hCQ0FIS0FJSUlRVUxJQXNnRHlBRlFRRWdCRUYvYWlJR2RIRWJDeUVKSUFNaEJDQUNJUU1nQmlFQ0EzOENmeUFEUVFKMElCQnFLQUlBUVFGMElBMXFJZ1l1QVFBRVFDQUNRUUZJQkVBZ0J5QUZJQUpCQVJCblJRMEdJQWNvQWd3aEFpQUhLQUlJSVFVTElBVkJBU0FDUVg5cUlnSjBjUVJBSUFZdUFRQWlFaUlSSUF0eFJRUkFJQkpCZjBvRVFDQUdJQXNnRVdvN0FRQUZJQVlnRHlBUmFqc0JBQXNMQ3dVZ0JFRi9haUVHSUFSQkFVZ0VmeUFDREFJRklBWUxJUVFMSUFOQkFXb2hCaUFESUE1SUJIOGdCaUVEREFJRklBWWhBeUFDQ3dzTElRUWdDUVJBSUFOQkFuUWdFR29vQWdBaUFrRUJkQ0FOYWlBSk93RUFJQUZCQW5RZ0Ntb2dBallDQUNBQlFRRnFJUUVMSUFOQkFXb2hBaUFESUE1SURRRWdCQ0VCUVFBTUJBc0xRUUVnQTNRaEJpQURCRUFnQkNBRFNBUkFJQWNnQlNBRUlBTVFaMFVOQWlBSEtBSU1JUVFnQnlnQ0NDRUZDeUFHSUFOQkFuUkI4REZxS0FJQUlBVWdCQ0FEYXlJRWRYRnFJZ2tFUUNBQklRWU1Bd1VnQkNFQlFRQU1CQXNBQlVFQklRa2dBU0VHREFJTEFBc01BZ3NnQWlFRElBUWhBU0FGSVFJRFFDQURRUUowSUJCcUtBSUFRUUYwSUExcUlnVXVBUUFFUUNBQlFRRklCRUFnQnlBQ0lBRkJBUkJuUlFSQUlBWWhBUXdGQ3lBSEtBSU1JUUVnQnlnQ0NDRUNDeUFDUVFFZ0FVRi9haUlCZEhFRVFDQUZMZ0VBSWd3aUJDQUxjVVVFUUNBTVFYOUtCRUFnQlNBRUlBdHFPd0VBQlNBRklBUWdEMm83QVFBTEN3c0xJQU5CQVdvaEJTQURJQTVJQkVBZ0JTRUREQUVMQ3lBQ0lRVWdDVUYvYWdzaEF5QUFLQUlZSWdBZ0J5Z0NBRFlDQUNBQUlBY29BZ1EyQWdRZ0NDQUZOZ0lNSUFnZ0FUWUNFQ0FJSUFNMkFoUU1BUXNnQVVVRVFDQUtKQVpCQUE4TEEwQWdBVUYvYWlJQlFRSjBJQXBxS0FJQVFRRjBJQTFxUVFBN0FRQWdBUTBBQ3lBS0pBWkJBQThMQ3lBSUlBZ29BaXhCZjJvMkFpd2dDaVFHUVFFTE9nQUNmd0pBQWtBQ1FBSkFBa0FnQUE0UEFBQUJBUUVDQVFNREF3TURBZ0lDQkF0QkF3d0VDMEVFREFNTFFRRU1BZ3RCQWd3QkMwRUFDd3ZFQXdFSWZ5TUdJUVFqQmtFZ2FpUUdJQUFvQXRRRElRSWdBQ2dDbUFJRVFDQUNLQUlzUlFSQUlBSW9BaEJCQ0JBNUlRTWdBQ2dDMEFNaUJTQURJQVVvQWhocU5nSVlJQUpCQURZQ0VDQUZLQUlJSVFNZ0FDQURRZjhBY1VFSWFoRUFBRVVFUUNBRUpBWkJBQThMSUFBb0F0UUNRUUJLQkVCQkFDRURBMEFnQWtFWWFpQURRUUowYWtFQU5nSUFJQU5CQVdvaUF5QUFLQUxVQWtnTkFBc0xJQUpCQURZQ0ZDQUNJQUFvQXBnQ05nSXNJQUFvQXJnRFJRUkFJQUpCQURZQ0tBc0xDeUFFSWdZZ0FEWUNFQ0FHSUFBb0FoZ2lCeWdDQUNJSU5nSUFJQVlnQnlnQ0JDSUZOZ0lFSUFJb0Fnd2hBeUFDS0FJUUlRUkJBU0FBS0FLb0EzUWhDU0FBS0FMd0FrRUFTZ1JBQWtCQkFDRUZBa0FEUUNBRVFRRklCRUFnQmlBRElBUkJBUkJuUlEwQ0lBWW9BZ3doQkNBR0tBSUlJUU1MSUFOQkFTQUVRWDlxSWdSMGNRUkFJQVZCQW5RZ0FXb29BZ0FpQ0NBSklBZ3ZBUUJ5T3dFQUN5QUZRUUZxSWdVZ0FDZ0M4QUpJRFFBTElBQW9BaGdoQnlBR0tBSUFJUWdnQmlnQ0JDRUZEQUVMSUFZa0JrRUFEd3NMSUFjZ0NEWUNBQ0FISUFVMkFnUWdBaUFETmdJTUlBSWdCRFlDRUNBQ0lBSW9BaXhCZjJvMkFpd2dCaVFHUVFFTHRnWUJESDhqQmlFRUl3WkJJR29rQmlBQUtBTFVBeUVGQWtBZ0FDZ0NtQUlFUUNBRktBSXNSUVJBSUFVb0FoQkJDQkE1SVFZZ0FDZ0MwQU1pQWlBR0lBSW9BaGhxTmdJWUlBVkJBRFlDRUNBQ0tBSUlJUUlnQUNBQ1FmOEFjVUVJYWhFQUFFVU5BaUFBS0FMVUFrRUFTZ1JBUVFBaEFnTkFJQVZCR0dvZ0FrRUNkR3BCQURZQ0FDQUNRUUZxSWdJZ0FDZ0MxQUpJRFFBTEN5QUZRUUEyQWhRZ0JTQUFLQUtZQWpZQ0xDQUFLQUs0QTBVRVFDQUZRUUEyQWlnTEN3c2dCU2dDS0VVRVFDQUZLQUlVSWdJRVFDQUNRWDlxSVFNRklBUWdBRFlDRUNBRUlBQW9BaGdpQWlnQ0FEWUNBQ0FFSUFJb0FnUTJBZ1FnQlNnQ0RDRUdJQVVvQWhBaEFpQUFLQUtvQXlFS0lBQW9BckFESVFzZ0FTZ0NBQ0VNSUFWQlFHc29BZ0FoQ0NBQUtBS2NBeUlESUFBb0FxQURJZzFLQkVCQkFDRURJQVloQVFVQ1FDQUdJUUVnQXlFR0FrQURRQUpBQW44Q1FDQUNRUWhJQkVBZ0JDQUJJQUpCQUJCblJRMEZJQVFvQWdnaEFTQUVLQUlNSWdKQkNFZ0VRRUVCSVFNTUFnc0xJQWhCa0FGcUlBRWdBa0Y0YW5WQi93RnhJZ05CQW5ScUtBSUFJZ2tFZnlBRElBaEJrQWxxYWkwQUFDRUhJQUlnQ1dzRlFRa2hBd3dCQ3d3QkN5QUVJQUVnQWlBSUlBTVFvQUVpQjBFQVNBMERJQVFvQWdnaEFTQUVLQUlNQ3lFQ0lBZEJCSFloQXlBSFFROXhJZ2NFUUNBQ0lBZElCRUFnQkNBQklBSWdCeEJuUlEwRUlBUW9BZ3doQWlBRUtBSUlJUUVMSUFNZ0Jtb2lBMEVDZENBTGFpZ0NBRUVCZENBTWFpQUhRUUowUWZBeGFpZ0NBQ0lHSUFFZ0FpQUhheUlDZFhFaUNVRUFJQVlnQ1NBSFFRSjBRZXd4YWlnQ0FFb2JheUFLZERzQkFBVUNRQ0FEQkVBZ0EwRVBSZ1JBREFJRkRBUUxBQXRCQUNFRERBVUxJQVpCRDJvaEF3c2dBMEVCYWlFR0lBTWdEVWdOQVVFQUlRTU1Bd3NMSUFJZ0EwZ0VRQ0FFSUFFZ0FpQURFR2RGRFFZZ0JDZ0NEQ0VDSUFRb0FnZ2hBUXRCQVNBRGRFRi9haUFEUVFKMFFmQXhhaWdDQUNBQklBSWdBMnNpQW5WeGFpRUREQUVMREFRTEN5QUFLQUlZSWdBZ0JDZ0NBRFlDQUNBQUlBUW9BZ1EyQWdRZ0JTQUJOZ0lNSUFVZ0FqWUNFQXNnQlNBRE5nSVVDeUFGSUFVb0FpeEJmMm8yQWl3Z0JDUUdRUUVQQ3lBRUpBWkJBQXVXQmdFTmZ5TUdJUVFqQmtFd2FpUUdJQUFvQXRRRElRSWdBQ2dDcUFNaEN5QUFLQUtZQWdSQUlBSW9BaXhGQkVBZ0FpZ0NFRUVJRURraEF5QUFLQUxRQXlJSUlBTWdDQ2dDR0dvMkFoZ2dBa0VBTmdJUUlBZ29BZ2doQXlBQUlBTkIvd0J4UVFocUVRQUFSUVJBSUFRa0JrRUFEd3NnQUNnQzFBSkJBRW9FUUVFQUlRTURRQ0FDUVJocUlBTkJBblJxUVFBMkFnQWdBMEVCYWlJRElBQW9BdFFDU0EwQUN3c2dBa0VBTmdJVUlBSWdBQ2dDbUFJMkFpd2dBQ2dDdUFORkJFQWdBa0VBTmdJb0N3c0xJQVJCRkdvaEJpQUVJUWtnQWlnQ0tFVUVRQ0FHSUFBMkFoQWdCaUFBS0FJWUlnY29BZ0FpQlRZQ0FDQUdJQWNvQWdRaUNEWUNCQ0FDS0FJTUlRTWdBaWdDRUNFRUlBa2dBaWtDRkRjQ0FDQUpJQUlwQWh3M0FnZ2dDU0FDS0FJa05nSVFJQUFvQXZBQ1FRQktCRUFDUUVFQUlRZ0NRQU5BSUFoQkFuUWdBV29vQWdBaERpQUNRVEJxSUFCQjJBSnFJQUJCOUFKcUlBaEJBblJxS0FJQUlnMUJBblJxS0FJQUtBSVVRUUowYWlnQ0FDRUtBbjhDUUNBRVFRaElCRUFnQmlBRElBUkJBQkJuUlEwRUlBWW9BZ2doQXlBR0tBSU1JZ1JCQ0VnRVFFRUJJUVVNQWdzTElBcEJrQUZxSUFNZ0JFRjRhblZCL3dGeElnVkJBblJxS0FJQUlnY0VmeUFGSUFwQmtBbHFhaTBBQUNFRklBUWdCMnNGUVFraEJRd0JDd3dCQ3lBR0lBTWdCQ0FLSUFVUW9BRWlBMEVBU0EwQ0lBTWhCU0FHS0FJSUlRTWdCaWdDREFzaEJDQUZCSDhnQkNBRlNBUkFJQVlnQXlBRUlBVVFaMFVOQXlBR0tBSU1JUVFnQmlnQ0NDRURDeUFGUVFKMFFmQXhhaWdDQUNJS0lBTWdCQ0FGYXlJRWRYRWlCMEVBSUFvZ0J5QUZRUUowUWV3eGFpZ0NBRW9iYXdWQkFBc2dDVUVFYWlBTlFRSjBhaUlGS0FJQWFpRUhJQVVnQnpZQ0FDQU9JQWNnQzNRN0FRQWdDRUVCYWlJSUlBQW9BdkFDU0EwQUN5QUFLQUlZSVFjZ0JpZ0NBQ0VGSUFZb0FnUWhDQXdCQ3lBSkpBWkJBQThMQ3lBSElBVTJBZ0FnQnlBSU5nSUVJQUlnQXpZQ0RDQUNJQVEyQWhBZ0FpQUpLUUlBTndJVUlBSWdDU2tDQ0RjQ0hDQUNJQWtvQWhBMkFpUUxJQUlnQWlnQ0xFRi9hallDTENBSkpBWkJBUXN2QVFKL0lBQW9BdFFESWdFb0FoQkJDQkE1SVFJZ0FDZ0MwQU1pQUNBQ0lBQW9BaGhxTmdJWUlBRkJBRFlDRUF2c0RBRUlmeUFBS0FMVUF5RUVJQUFvQXB3RElnSkZJUU1DUUNBQUtBTGdBVVVFUUFKQUFrQWdBMFVOQUNBQUtBS2tBdzBBSUFBb0FxZ0REUUFnQUNnQzNBRWdBQ2dDb0FNaUFVSEFBRWh5QkVBZ0FDZ0N0QU1nQVVjTkFRc01BUXNnQUNnQ0FDSUJRZjBBTmdJVUlBRW9BZ1FoQVNBQVFYOGdBVUUvY1VHeUJXb1JBd0FMSUFSQkprRW5JQUFvQXJRRFFUOUdHellDQkNBQUtBTFVBa0VBU2dSQVFRQWhBUU5BSUFCQkFTQUFRZGdDYWlBQlFRSjBhaWdDQUNJQ0tBSVVJZ01nQkVIRUFHb2dBMEVDZEdvUStRRWdBQ2dDdEFNRVFDQUFRUUFnQWlnQ0dDSUNJQVJCMUFCcUlBSkJBblJxRVBrQkN5QUVRUmhxSUFGQkFuUnFRUUEyQWdBZ0FVRUJhaUlCSUFBb0F0UUNTQTBBQ3dzZ0FDZ0M4QUpCQUV3TkFVRUFJUUVEUUNBRVFlUUFhaUFCUVFKMGFpQUVRY1FBYWlBQVFkZ0NhaUFBUWZRQ2FpQUJRUUowYWlnQ0FFRUNkR29vQWdBaUF5Z0NGRUVDZEdvb0FnQTJBZ0FnQkVHTUFXb2dBVUVDZEdvZ0JFSFVBR29nQXlnQ0dFRUNkR29vQWdBMkFnQWdCRUcwQVdvZ0FVRUNkR29nQXlnQ05BUi9BbjhnQXlnQ0tDRUNJQU1vQWlRaEF3SkFBa0FDUUFKQUFrQUNRQUpBQWtBZ0FDZ0N0QU1PTVFBSEJ3RUhCd2NIQWdjSEJ3Y0hCd01IQndjSEJ3Y0hCd1FIQndjSEJ3Y0hCd2NIQlFjSEJ3Y0hCd2NIQndjSEJ3WUhDMEVCREFjTElBSkJBVWRCQTNSQm9DdHFJQU5CQVVkQkFuUnFLQUlBUVFGcURBWUxJQUpCZjJvaUFrRUNJQUpCQWtrYlFReHNRYkFyYWlBRFFYOXFJZ0pCQWlBQ1FRSkpHMEVDZEdvb0FnQkJBV29NQlFzZ0FrRi9haUlDUVFNZ0FrRURTUnRCQkhSQjRDdHFJQU5CZjJvaUFrRURJQUpCQTBrYlFRSjBhaWdDQUVFQmFnd0VDeUFDUVg5cUlnSkJCQ0FDUVFSSkcwRVViRUdnTEdvZ0EwRi9haUlDUVFRZ0FrRUVTUnRCQW5ScUtBSUFRUUZxREFNTElBSkJmMm9pQWtFRklBSkJCVWtiUVJoc1FaQXRhaUFEUVg5cUlnSkJCU0FDUVFWSkcwRUNkR29vQWdCQkFXb01BZ3NnQWtGL2FpSUNRUVlnQWtFR1NSdEJIR3hCb0M1cUlBTkJmMm9pQWtFR0lBSkJCa2tiUVFKMGFpZ0NBRUVCYWd3QkN5QUNRWDlxSWdKQkJ5QUNRUWRKRzBFRmRFSHdMMm9nQTBGL2FpSUNRUWNnQWtFSFNSdEJBblJxS0FJQVFRRnFDd1ZCQUFzMkFnQWdBVUVCYWlJQklBQW9BdkFDU0EwQUN3d0JDeUFBS0FLZ0F5RUJBa0FDUUNBREJFQWdBUTBCQlNBQklBSklEUUVnQVNBQUtBSzBBMG9OQVNBQUtBTFVBa0VCUncwQkN5QUFLQUtrQXlJQkJFQWdBVUYvYWlJQklBQW9BcWdEUncwQkJTQUFLQUtvQXlFQkN5QUJRUTFLRFFBTUFRc2dBQ2dDQUNJQlFSRTJBaFFnQVNBQ05nSVlJQUFvQWdBZ0FDZ0NvQU0yQWh3Z0FDZ0NBQ0FBS0FLa0F6WUNJQ0FBS0FJQUlBQW9BcWdETmdJa0lBQW9BZ0FvQWdBaEFTQUFJQUZCL3dGeFFhd0RhaEVCQUFzZ0FDZ0MxQUlpQVVFQVNnUi9JQUJCcEFOcUlRVkJBQ0VDQTM4Z0FFSFlBbW9nQWtFQ2RHb29BZ0FvQWdRaEJpQUFLQUtnQVNFSUlBQW9BcHdESWdFRVFDQUdRUWgwSUFocUtBSUFRUUJJQkVBZ0FDZ0NBQ0lCUWZZQU5nSVVJQUVnQmpZQ0dDQUFLQUlBUVFBMkFod2dBQ2dDQUNnQ0JDRUJJQUJCZnlBQlFUOXhRYklGYWhFREFDQUFLQUtjQXlFQkN3VkJBQ0VCQ3lBQklBQW9BcUFEVEFSQUEwQWdCU2dDQUNBR1FRaDBJQWhxSUFGQkFuUnFJZ01vQWdBaUIwRUFJQWRCQUVvYlJ3UkFJQUFvQWdBaUIwSDJBRFlDRkNBSElBWTJBaGdnQUNnQ0FDQUJOZ0ljSUFBb0FnQW9BZ1FoQnlBQVFYOGdCMEUvY1VHeUJXb1JBd0FMSUFNZ0FDZ0NxQU0yQWdBZ0FVRUJhaUVESUFFZ0FDZ0NvQU5JQkVBZ0F5RUJEQUVMQ3dzZ0FrRUJhaUlDSUFBb0F0UUNJZ0ZJRFFBZ0JRc0ZJQUJCcEFOcUN5RUNJQVJCSWtFaklBQW9BcHdESWdORklnVWJRU1JCSlNBRkd5QUNLQUlBUlJzMkFnUWdBVUVBU2dSQUFrQWdCRUZBYXlFR1FRQWhBUU5BSUFCQjJBSnFJQUZCQW5ScUtBSUFJUVVnQXdSQUlBUkJNR29nQlNnQ0dDSUZRUUowYWlFRElBQkJBQ0FGSUFNUStRRWdCaUFES0FJQU5nSUFCU0FDS0FJQVJRUkFJQUJCQVNBRktBSVVJZ01nQkVFd2FpQURRUUowYWhENUFRc0xJQVJCR0dvZ0FVRUNkR3BCQURZQ0FDQUJRUUZxSWdFZ0FDZ0MxQUpPRFFFZ0FDZ0NuQU1oQXd3QUFBc0FDd3NnQkVFQU5nSVVJQVJCQURZQ0VDQUVRUUEyQWd3Z0JFRUFOZ0lvSUFRZ0FDZ0NtQUkyQWl3UEN5QUVRUUEyQWhBZ0JFRUFOZ0lNSUFSQkFEWUNLQ0FFSUFBb0FwZ0NOZ0lzQzljQkFRTi9JQUFvQWdRb0FnQWhBaUFBSUFCQkFVSGNBU0FDUVQ5eFFjb0JhaEVFQUNJQk5nTFVBeUFCUWZZQU5nSUFJQUZCOXdBMkFnZ2dBQ2dDNEFGRkJFQWdBVUlBTndKRUlBRkNBRGNDVENBQlFRQTJBbFFnQVVFQU5nSllJQUZCQURZQ1hDQUJRUUEyQW1BUEN5QUFLQUlFS0FJQUlRSWdBQ0FBUVFFZ0FDZ0NKRUVJZENBQ1FUOXhRY29CYWhFRUFDSUROZ0tnQVNBQUtBSWtRUUJLQkVCQkFDRUNBMEFnQXlBQ1FRaDBha0YvUVlBQ0VFVWFJQUpCQVdvaUFpQUFLQUlrU0EwQUN3c2dBVUlBTndJd0lBRkNBRGNDT0F2REFnRUpmeUFBS0FLNEF5RUNJQUFvQWdBaUEwSDhBRFlDRkNBRElBSTJBaGdnQUNnQ0FDQUJOZ0ljSUFBb0FnQW9BZ1FoQXlBQVFYOGdBMEUvY1VHeUJXb1JBd0FnQVVFQmFrRUhjVUhRQVhJaEJDQUJRUUpxUVFkeFFkQUJjaUVGSUFGQkIycEJCM0ZCMEFGeUlRWWdBVUVHYWtFSGNVSFFBWEloQndKQUEwQUNRQ0FDUWNBQlNDRUlJQUlnQkVZZ0FrRjRjVUhRQVVkeUlBSWdCVVp5SVFsQkFrRUJJQUlnQmtZZ0FpQUhSbkliSVFvRFFBSkFJQUFvQWdBaUFVSGpBRFlDRkNBQklBSTJBaGdnQUNnQ0FFRUNRUU1nQ2lBSkd5QUlHeUlETmdJY0lBQW9BZ0FvQWdRaEFTQUFRUVFnQVVFL2NVR3lCV29SQXdBQ1FBSkFJQU5CQTNGQkFXc09Bd1FDQUFFTFFRRWhBQXdGQ3d3QkN3c2dBQkN4QWdSQUlBQW9BcmdESVFJTUFnVkJBQ0VBREFNTEFBc0xJQUJCQURZQ3VBTkJBUThMSUFBTFlnRURmeUFBS0FJWUlRSWdBVUVBVEFSQUR3c2dBaWdDQkNJRElBRklCRUFEUUNBQ0tBSU1JUVFnQUNBRVFmOEFjVUVJYWhFQUFCb2dBU0FEYXlJQklBSW9BZ1FpQTBvTkFBc0xJQUlnQVNBQ0tBSUFhallDQUNBQ0lBTWdBV3MyQWdRTDd3RUJCSDlCQkVFRUVJc0JJUVFEUUNBQ1FRTkhCRUFnQWtFQ2RDRUZRUUFoQXdOQUlBTkJCRWNFUUNBRUtBSUFJQU1nQldwQkEzUnFJQUpCQkhRZ0FHb2dBMEVDZEdvcUFnQzdPUU1BSUFOQkFXb2hBd3dCQ3dzZ0FrRUJhaUVDREFFTEN5QUVLQUlBSWdCQ0FEY0RZQ0FBUWdBM0EyZ2dBRUlBTndOd0lBQkVBQUFBQUFBQThEODVBM2dnQkJEV0FScEJBQ0VBQTBBZ0FFRURSd1JBSUFCQkFuUWhBMEVBSVFJRFFDQUNRUVJIQkVBZ0FFRUVkQ0FCYWlBQ1FRSjBhaUFFS0FJQUlBSWdBMnBCQTNScUt3TUF0amdDQUNBQ1FRRnFJUUlNQVFzTElBQkJBV29oQUF3QkN3c2dCQkJKQzcwQkFRTi9JQUFvQWhnaUFTZ0NJRUVCUVlBZ0lBRW9BaHdRWVNJQ0JFQWdBU0FCS0FJZ05nSUFJQUVnQWpZQ0JDQUJRUUEyQWlSQkFROExJQUVvQWlRRVFDQUFLQUlBSWdKQkt6WUNGQ0FDS0FJQUlRSWdBQ0FDUWY4QmNVR3NBMm9SQVFBTEFuOGdBQ0VESUFBb0FnQWlBRUg3QURZQ0ZDQUFLQUlFSVFBZ0F3dEJmeUFBUVQ5eFFiSUZhaEVEQUNBQktBSWdRWDg2QUFBZ0FTZ0NJRUZaT2dBQklBRWdBU2dDSURZQ0FDQUJRUUkyQWdRZ0FVRUFOZ0lrUVFFTERBQWdBQ2dDR0VFQk5nSWtDNVlCQVFKL0lBQW9BaGdpQWtVRVFDQUFLQUlFS0FJQUlRSWdBQ0FBUVFCQktDQUNRVDl4UWNvQmFoRUVBQ0lETmdJWUlBQW9BZ1FvQWdBaEFpQURJQUJCQUVHQUlDQUNRVDl4UWNvQmFoRUVBRFlDSUNBQUtBSVlJUUlMSUFKQjlBQTJBZ2dnQWtIVEFEWUNEQ0FDUVM4MkFoQWdBa0VoTmdJVUlBSkI5UUEyQWhnZ0FpQUJOZ0ljSUFKQkFEWUNCQ0FDUVFBMkFnQUw2Z2tCRW44akJpRVRJd1pCZ0FKcUpBWWdBQ2dDMEFJaEZpQVRJZ0FoQmlBQktBSlVJUUZCQ0NFSkEwQUNmd0pBSUFJdUFSQWlCeUFDTGdFZ0lnVnlRZi8vQTNFRWZ3d0JCU0FDTGdFd0JIOUJBQ0VGREFJRklBSkJRR3N1QVFBRWYwRUFJUVVNQXdVZ0FpNEJVQVIvUVFBaEJRd0VCU0FDTGdGZ0JIOUJBQ0VGREFVRklBSXVBWEFFZjBFQUlRVU1CZ1VnQmlBQktBSUFJQUl1QVFCQkFuUnNJZ1UyQWdBZ0JpQUZOZ0lnSUFaQlFHc2dCVFlDQUNBR0lBVTJBbUFnQmlBRk5nS0FBU0FHSUFVMkFxQUJJQVlnQlRZQ3dBRkJPQXNMQ3dzTEN3d0JDeUFDTGdGd0lBRW9BdUFCYkNJSUlBSXVBVEFnQVNnQ1lHd2lDMm9pRENBQ0xnRlFJQUVvQXFBQmJDSU5JQWNnQVNnQ0lHd2lCMm9pQ21wQm9jc0FiQ0lPSUF4QnU0Si9iR29pRENBSElBaHFRYk5HYkNJUUlBaEJqaE5zYW1vaENDQU9JQXBCaEdkc2FpSUtJQkFnQjBHTDRBQnNhbW9oQnlBS0lBc2dEV3BCL2R0K2JDSUtJQTFCczRNQmJHcHFJUTBnQmlBSElBRW9Bb0FCSUFKQlFHc3VBUUJCRFhSc0lnNGdBU2dDQUNBQ0xnRUFRUTEwYkVHQUNISWlFR29pRVNBQlFVQnJLQUlBSUFWQkVIUkJFSFZzSWdVZ0FpNEJZQ0FCS0FMQUFXd2lFbXBCMFNKc0loUWdCVUgrTUd4cUlnVnFJaFZxUVF0MU5nSUFJQVlnRlNBSGEwRUxkVFlDNEFFZ0JpQU1JQW9nQzBIVXhBRnNhbW9pQ3lBUUlBNXJJZ2NnRkNBU1FkK0pmMnhxSWd4cUlncHFRUXQxTmdJZ0lBWWdDaUFMYTBFTGRUWUN3QUVnQmtGQWF5QU5JQWNnREdzaUMycEJDM1UyQWdBZ0JpQUxJQTFyUVF0MU5nS2dBU0FHSUFnZ0VTQUZheUlGYWtFTGRUWUNZQ0FGSUFoclFRdDFJUVZCSUF0QkFuUWdCbW9nQlRZQ0FDQUdRUVJxSVFZZ0FVRUVhaUVCSUFKQkFtb2hBaUFKUVg5cUlRVWdDVUVCU3dSQUlBVWhDUXdCQ3dzZ0ZrR0FmV29oQ1VFQUlRRURRQ0FFSUFGQkFuUWdBMm9vQWdCcUlRWWdBQ2dDQUVHUWdBRnFJUVVDUUFKQUlBQW9BZ1FpQ0NBQUtBSUlJZ0p5RFFBZ0FDZ0NEQVJBUVFBaEFnd0JCU0FBS0FJUUJFQkJBQ0VDREFJRklBQW9BaFFFUUVFQUlRSU1Bd1VnQUNnQ0dBUkFRUUFoQWd3RUJTQUFLQUljQkVCQkFDRUNEQVVGSUFZZ0NTQUZRUVYyUWY4SGNXb3NBQUFpQWpvQUFDQUdRUUZxSUFKQkJ4QkZHZ3NMQ3dzTERBRUxJQUFvQWh3aUN5QUFLQUlNSWcxcUlnOGdDQ0FBS0FJVUlnZHFJZ3hxUWFITEFHd2lDaUFQUWJ1Q2YyeHFJZzhnQ0NBTGFrR3pSbXdpRGlBTFFZNFRiR3BxSVFzZ0NpQU1RWVJuYkdvaURDQU9JQWhCaStBQWJHcHFJUWdnRENBSElBMXFRZjNiZm13aURDQUhRYk9EQVd4cWFpRUhJQVlnQ1NBRklBQW9BaEFpQ21wQkRYUWlEaUFBS0FJWUloQWdBbXBCMFNKc0loRWdBa0grTUd4cUlnSnFJaElnQ0dwQkVuWkIvd2R4YWl3QUFEb0FBQ0FHSUFrZ0VpQUlhMEVTZGtIL0IzRnFMQUFBT2dBSElBWWdDU0FGSUFwclFRMTBJZ1VnRVNBUVFkK0pmMnhxSWdocUlnb2dEeUFNSUExQjFNUUJiR3BxSWcxcVFSSjJRZjhIY1dvc0FBQTZBQUVnQmlBSklBb2dEV3RCRW5aQi93ZHhhaXdBQURvQUJpQUdJQWtnQlNBSWF5SUZJQWRxUVJKMlFmOEhjV29zQUFBNkFBSWdCaUFKSUFVZ0IydEJFblpCL3dkeGFpd0FBRG9BQlNBR0lBa2dEaUFDYXlJQ0lBdHFRUkoyUWY4SGNXb3NBQUE2QUFNZ0JpQUpJQUlnQzJ0QkVuWkIvd2R4YWl3QUFEb0FCQXNnQUVFZ2FpRUFJQUZCQVdvaUFVRUlSdzBBQ3lBVEpBWUxOQUFnQkNBREtBSUFhaUFBS0FMUUFrR0FmV29nQWk0QkFDQUJLQUpVS0FJQWJFR0VJR3BCQTNaQi93ZHhhaXdBQURvQUFBdkRBUUVGZnlBRUlBTW9BZ0JxSWdVZ0FDZ0MwQUpCZ0gxcUlnQWdBaTRCRUNBQktBSlVJZ0VvQWlCc0lnWWdBaTRCQUNBQktBSUFiRUdFSUdvaUIyb2lDQ0FDTGdFQ0lBRW9BZ1JzSWdrZ0FpNEJFaUFCS0FJa2JDSUJhaUlDYWtFRGRrSC9CM0ZxTEFBQU9nQUFJQVVnQ0NBQ2EwRURka0gvQjNFZ0FHb3NBQUE2QUFFZ0JDQURLQUlFYWlJQ0lBY2dCbXNpQXlBSklBRnJJZ0ZxUVFOMlFmOEhjU0FBYWl3QUFEb0FBQ0FDSUFNZ0FXdEJBM1pCL3dkeElBQnFMQUFBT2dBQkM2Z0ZBUWwvSXdZaEJTTUdRVEJxSkFZZ0FDZ0MwQUloQ0NBRklBRW9BbFFpQmlnQ0FDQUNMZ0VBUVExMGJFR0FDSElpQ1NBR1FVQnJLQUlBSUFJdUFTQkJvUzFzYkNJSGFpSUJJQVlvQWlBZ0FpNEJFRUd4emdCc2JDSUFha0VMZFNJTE5nSUFJQVVnQVNBQWEwRUxkVFlDR0NBRklBa2dCMEYrYkdwQkMzVTJBZ3dnQlNBR0tBSUVJQUl1QVFKQkRYUnNRWUFJY2lJSklBWW9Ba1FnQWk0QklrR2hMV3hzSWdkcUlnRWdCaWdDSkNBQ0xnRVNRYkhPQUd4c0lnQnFRUXQxSWd3MkFnUWdCU0FCSUFCclFRdDFOZ0ljSUFVZ0NTQUhRWDVzYWtFTGRTSU5OZ0lRSUFVZ0JpZ0NDQ0FDTGdFRVFRMTBiRUdBQ0hJaUNTQUdLQUpJSUFJdUFTUkJvUzFzYkNJSGFpSUJJQVlvQWlnZ0FpNEJGRUd4emdCc2JDSUFha0VMZFNJS05nSUlJQVVnQVNBQWEwRUxkU0lHTmdJZ0lBVWdDU0FIUVg1c2FrRUxkU0lKTmdJVUlBUWdBeWdDQUdvaUJ5QUlRWUI5YWlJSUlBdEJEWFJCZ0lDSXdBQnFJZ0lnQ2tHaExXeHFJZ0VnREVHeHpnQnNJZ0JxUVJKMlFmOEhjV29zQUFBNkFBQWdCeUFJSUFFZ0FHdEJFblpCL3dkeGFpd0FBRG9BQWlBSElBZ2dBaUFLUWI2bGYyeHFRUkoyUWY4SGNXb3NBQUE2QUFFZ0JDQURLQUlFYWlJSElBZ2dCU2dDREVFTmRFR0FnSWpBQUdvaUFpQUpRYUV0YkdvaUFTQU5RYkhPQUd3aUFHcEJFblpCL3dkeGFpd0FBRG9BQUNBSElBZ2dBU0FBYTBFU2RrSC9CM0ZxTEFBQU9nQUNJQWNnQ0NBQ0lBbEJ2cVYvYkdwQkVuWkIvd2R4YWl3QUFEb0FBU0FFSUFNb0FnaHFJZ01nQ0NBRktBSVlRUTEwUVlDQWlNQUFhaUlDSUFaQm9TMXNhaUlCSUFVb0FoeEJzYzRBYkNJQWFrRVNka0gvQjNGcUxBQUFPZ0FBSUFNZ0NDQUJJQUJyUVJKMlFmOEhjV29zQUFBNkFBSWdBeUFJSUFJZ0JrRytwWDlzYWtFU2RrSC9CM0ZxTEFBQU9nQUJJQVVrQmd2c0NRRUlmeU1HSVFVakJrRkFheVFHSUFBb0F0QUNJUWNnQlNBQ0xnRUFJQUVvQWxRaUNTZ0NBR3dpQ0NBQ0xnRWdJQWxCUUdzb0FnQnNJZ3RxUVFKMElnRWdBaTRCRUNBSktBSWdiQ0lBSUFJdUFUQWdDU2dDWUd3aUJtcEIwU0pzUVlBSWFpSUtJQUJCL2pCc2FrRUxkU0lBYWpZQ0FDQUZJQUVnQUdzMkFqQWdCU0FJSUF0clFRSjBJZ0VnQ2lBR1FkK0pmMnhxUVF0MUlnQnFOZ0lRSUFVZ0FTQUFhellDSUNBRklBSXVBUUlnQ1NnQ0JHd2lDQ0FDTGdFaUlBa29Ba1JzSWd0cVFRSjBJZ0VnQWk0QkVpQUpLQUlrYkNJQUlBSXVBVElnQ1NnQ1pHd2lCbXBCMFNKc1FZQUlhaUlLSUFCQi9qQnNha0VMZFNJQWFqWUNCQ0FGSUFFZ0FHczJBalFnQlNBSUlBdHJRUUowSWdFZ0NpQUdRZCtKZjJ4cVFRdDFJZ0JxTmdJVUlBVWdBU0FBYXpZQ0pDQUZJQUl1QVFRZ0NTZ0NDR3dpQ0NBQ0xnRWtJQWtvQWtoc0lndHFRUUowSWdFZ0FpNEJGQ0FKS0FJb2JDSUFJQUl1QVRRZ0NTZ0NhR3dpQm1wQjBTSnNRWUFJYWlJS0lBQkIvakJzYWtFTGRTSUFhaUlNTmdJSUlBVWdBU0FBYXpZQ09DQUZJQWdnQzJ0QkFuUWlBU0FLSUFaQjM0bC9iR3BCQzNVaUFHbzJBaGdnQlNBQklBQnJOZ0lvSUFVZ0FpNEJCaUFKS0FJTWJDSUxJQUl1QVNZZ0NTZ0NUR3dpQm1wQkFuUWlBU0FDTGdFV0lBa29BaXhzSWdBZ0FpNEJOaUFKS0FKc2JDSUtha0hSSW14QmdBaHFJZ0lnQUVIK01HeHFRUXQxSWdCcUlnZzJBZ3dnQlNBQklBQnJOZ0k4SUFVZ0N5QUdhMEVDZENJQklBSWdDa0hmaVg5c2FrRUxkU0lBYWlJTE5nSWNJQVVnQVNBQWF6WUNMQ0FFSUFNb0FnQnFJZ1lnQjBHQWZXb2lCeUFNSUFVb0FnQkJrSUFCYWlJS2FrRU5kQ0lCSUFnZ0JTZ0NCQ0lBYWtIUkltd2lBaUFBUWY0d2JHb2lBR3BCRW5aQi93ZHhhaXdBQURvQUFDQUdJQWNnQVNBQWEwRVNka0gvQjNGcUxBQUFPZ0FESUFZZ0J5QUtJQXhyUVExMElnRWdBaUFJUWQrSmYyeHFJZ0JxUVJKMlFmOEhjV29zQUFBNkFBRWdCaUFISUFFZ0FHdEJFblpCL3dkeGFpd0FBRG9BQWlBRUlBTW9BZ1JxSWdnZ0J5QUZLQUlRUVpDQUFXb2lCaUFGS0FJWUlncHFRUTEwSWdFZ0N5QUZLQUlVSWdCcVFkRWliQ0lDSUFCQi9qQnNhaUlBYWtFU2RrSC9CM0ZxTEFBQU9nQUFJQWdnQnlBQklBQnJRUkoyUWY4SGNXb3NBQUE2QUFNZ0NDQUhJQVlnQ210QkRYUWlBU0FDSUF0QjM0bC9iR29pQUdwQkVuWkIvd2R4YWl3QUFEb0FBU0FJSUFjZ0FTQUFhMEVTZGtIL0IzRnFMQUFBT2dBQ0lBUWdBeWdDQ0dvaUNDQUhJQVVvQWlCQmtJQUJhaUlMSUFVb0FpZ2lCbXBCRFhRaUFTQUZLQUlrSWdBZ0JTZ0NMQ0lLYWtIUkltd2lBaUFBUWY0d2JHb2lBR3BCRW5aQi93ZHhhaXdBQURvQUFDQUlJQWNnQVNBQWEwRVNka0gvQjNGcUxBQUFPZ0FESUFnZ0J5QUxJQVpyUVExMElnRWdBaUFLUWQrSmYyeHFJZ0JxUVJKMlFmOEhjV29zQUFBNkFBRWdDQ0FISUFFZ0FHdEJFblpCL3dkeGFpd0FBRG9BQWlBRUlBTW9BZ3hxSWdZZ0J5QUZLQUl3UVpDQUFXb2lDaUFGS0FJNElnUnFRUTEwSWdFZ0JTZ0NOQ0lBSUFVb0Fqd2lBMnBCMFNKc0lnSWdBRUgrTUd4cUlnQnFRUkoyUWY4SGNXb3NBQUE2QUFBZ0JpQUhJQUVnQUd0QkVuWkIvd2R4YWl3QUFEb0FBeUFHSUFjZ0NpQUVhMEVOZENJQklBSWdBMEhmaVg5c2FpSUFha0VTZGtIL0IzRnFMQUFBT2dBQklBWWdCeUFCSUFCclFSSjJRZjhIY1dvc0FBQTZBQUlnQlNRR0M5OFFBUXAvSXdZaEJTTUdRZkFBYWlRR0lBQW9BdEFDSVE0Z0FTZ0NWQ0lJS0FJQUlBSXVBUUJCRFhSc1FZQUljaUVHSUFVZ0FpNEJJQ0FJUVVCcktBSUFiQ0lCSUFKQlFHc3VBUUFnQ0NnQ2dBRnNJZ0JxUWN3eWJDSU5JQVlnQVNBQWF5SUpRZEFXYkdvaUNtb2lBU0FDTGdFUUlBZ29BaUJzSWdBZ0FpNEJNQ0FJS0FKZ2JDSUxha0dhTld3aURDQUFRZkVnYkdvaUFHcEJDM1UyQWdBZ0JTQUJJQUJyUVF0MU5nSlFJQVVnQ2lBTmF5SUJJQXdnQzBIYzlINXNhaUlBYWtFTGRUWUNGQ0FGSUFFZ0FHdEJDM1UyQWp3Z0JTQUdJQWxCd0tWL2JHcEJDM1UyQWlnZ0JTQUNMZ0VTSUFnb0FpUnNJZ0FnQWk0Qk1pQUlLQUprYkNJSGFrR2FOV3dpQmlBQVFmRWdiR29pRFNBQ0xnRWlJQWdvQWtSc0lnRWdBaTRCUWlBSUtBS0VBV3dpQUdwQnpESnNJZ2tnQ0NnQ0JDQUNMZ0VDUVExMGJFR0FDSElpQ2lBQklBQnJJZ3RCMEJac2FpSU1haUlBYWtFTGRUWUNCQ0FGSUFBZ0RXdEJDM1UyQWxRZ0JTQUdJQWRCM1BSK2JHb2lBU0FNSUFscklnQnFRUXQxTmdJWUlBVkJRR3NnQUNBQmEwRUxkVFlDQUNBRklBb2dDMEhBcFg5c2FrRUxkVFlDTENBRklBSXVBU1FnQ0NnQ1NHd2lBU0FDTGdGRUlBZ29Bb2dCYkNJQWFrSE1NbXdpQmlBSUtBSUlJQUl1QVFSQkRYUnNRWUFJY2lJTklBRWdBR3NpQ1VIUUZteHFJZ3BxSWdFZ0FpNEJGQ0FJS0FJb2JDSUFJQUl1QVRRZ0NDZ0NhR3dpQzJwQm1qVnNJZ3dnQUVIeElHeHFJZ0JxUVF0MU5nSUlJQVVnQVNBQWEwRUxkVFlDV0NBRklBb2dCbXNpQVNBTUlBdEIzUFIrYkdvaUFHcEJDM1UyQWh3Z0JTQUJJQUJyUVF0MU5nSkVJQVVnRFNBSlFjQ2xmMnhxUVF0MU5nSXdJQVVnQWk0QkppQUlLQUpNYkNJQklBSXVBVVlnQ0NnQ2pBRnNJZ0JxUWN3eWJDSUdJQWdvQWd3Z0FpNEJCa0VOZEd4QmdBaHlJZzBnQVNBQWF5SUpRZEFXYkdvaUNtb2lBU0FDTGdFV0lBZ29BaXhzSWdBZ0FpNEJOaUFJS0FKc2JDSUxha0dhTld3aURDQUFRZkVnYkdvaUFHcEJDM1UyQWd3Z0JTQUJJQUJyUVF0MU5nSmNJQVVnQ2lBR2F5SUJJQXdnQzBIYzlINXNhaUlBYWtFTGRUWUNJQ0FGSUFFZ0FHdEJDM1UyQWtnZ0JTQU5JQWxCd0tWL2JHcEJDM1UyQWpRZ0JTQUNMZ0VvSUFnb0FsQnNJZ0VnQWk0QlNDQUlLQUtRQVd3aUFHcEJ6REpzSWcwZ0NDZ0NFQ0FDTGdFSVFRMTBiRUdBQ0hJaUNTQUJJQUJySWdwQjBCWnNhaUlMYWlJQklBSXVBUmdnQ0NnQ01Hd2lBQ0FDTGdFNElBZ29BbkJzSWd4cVFabzFiQ0lDSUFCQjhTQnNhaUlBYWtFTGRUWUNFQ0FGSUFFZ0FHdEJDM1UyQW1BZ0JTQUxJQTFySWdFZ0FpQU1RZHowZm14cUlnQnFRUXQxTmdJa0lBVWdBU0FBYTBFTGRUWUNUQ0FGSUFrZ0NrSEFwWDlzYWtFTGRUWUNPQ0FFSUFNb0FnQnFJZ1lnRGtHQWZXb2lCeUFGS0FJSUlnRWdCU2dDRUNJQWFrSE1NbXdpRFNBRktBSUFRUTEwUVlDQWlNQUFhaUlKSUFFZ0FHc2lDa0hRRm14cUlndHFJZ0VnQlNnQ0JDSUFJQVVvQWd3aURHcEJtalZzSWdJZ0FFSHhJR3hxSWdCcVFSSjJRZjhIY1dvc0FBQTZBQUFnQmlBSElBRWdBR3RCRW5aQi93ZHhhaXdBQURvQUJDQUdJQWNnQ3lBTmF5SUJJQUlnREVIYzlINXNhaUlBYWtFU2RrSC9CM0ZxTEFBQU9nQUJJQVlnQnlBQklBQnJRUkoyUWY4SGNXb3NBQUE2QUFNZ0JpQUhJQWtnQ2tIQXBYOXNha0VTZGtIL0IzRnFMQUFBT2dBQ0lBUWdBeWdDQkdvaUJpQUhJQVVvQWh3aUFTQUZLQUlrSWdCcVFjd3liQ0lOSUFVb0FoUkJEWFJCZ0lDSXdBQnFJZ2tnQVNBQWF5SUtRZEFXYkdvaUMyb2lBU0FGS0FJWUlnQWdCU2dDSUNJTWFrR2FOV3dpQWlBQVFmRWdiR29pQUdwQkVuWkIvd2R4YWl3QUFEb0FBQ0FHSUFjZ0FTQUFhMEVTZGtIL0IzRnFMQUFBT2dBRUlBWWdCeUFMSUExcklnRWdBaUFNUWR6MGZteHFJZ0JxUVJKMlFmOEhjV29zQUFBNkFBRWdCaUFISUFFZ0FHdEJFblpCL3dkeGFpd0FBRG9BQXlBR0lBY2dDU0FLUWNDbGYyeHFRUkoyUWY4SGNXb3NBQUE2QUFJZ0JDQURLQUlJYWlJR0lBY2dCU2dDTUNJQklBVW9BamdpQUdwQnpESnNJZzBnQlNnQ0tFRU5kRUdBZ0lqQUFHb2lDU0FCSUFCcklncEIwQlpzYWlJTGFpSUJJQVVvQWl3aUFDQUZLQUkwSWd4cVFabzFiQ0lDSUFCQjhTQnNhaUlBYWtFU2RrSC9CM0ZxTEFBQU9nQUFJQVlnQnlBQklBQnJRUkoyUWY4SGNXb3NBQUE2QUFRZ0JpQUhJQXNnRFdzaUFTQUNJQXhCM1BSK2JHb2lBR3BCRW5aQi93ZHhhaXdBQURvQUFTQUdJQWNnQVNBQWEwRVNka0gvQjNGcUxBQUFPZ0FESUFZZ0J5QUpJQXBCd0tWL2JHcEJFblpCL3dkeGFpd0FBRG9BQWlBRUlBTW9BZ3hxSWdZZ0J5QUZLQUpFSWdFZ0JTZ0NUQ0lBYWtITU1td2lEU0FGS0FJOFFRMTBRWUNBaU1BQWFpSUpJQUVnQUdzaUNrSFFGbXhxSWd0cUlnRWdCVUZBYXlnQ0FDSUFJQVVvQWtnaURHcEJtalZzSWdJZ0FFSHhJR3hxSWdCcVFSSjJRZjhIY1dvc0FBQTZBQUFnQmlBSElBRWdBR3RCRW5aQi93ZHhhaXdBQURvQUJDQUdJQWNnQ3lBTmF5SUJJQUlnREVIYzlINXNhaUlBYWtFU2RrSC9CM0ZxTEFBQU9nQUJJQVlnQnlBQklBQnJRUkoyUWY4SGNXb3NBQUE2QUFNZ0JpQUhJQWtnQ2tIQXBYOXNha0VTZGtIL0IzRnFMQUFBT2dBQ0lBUWdBeWdDRUdvaUNTQUhJQVVvQWxnaUFTQUZLQUpnSWdCcVFjd3liQ0lLSUFVb0FsQkJEWFJCZ0lDSXdBQnFJZ3NnQVNBQWF5SU1RZEFXYkdvaUJHb2lBU0FGS0FKVUlnQWdCU2dDWENJRGFrR2FOV3dpQWlBQVFmRWdiR29pQUdwQkVuWkIvd2R4YWl3QUFEb0FBQ0FKSUFjZ0FTQUFhMEVTZGtIL0IzRnFMQUFBT2dBRUlBa2dCeUFFSUFwcklnRWdBaUFEUWR6MGZteHFJZ0JxUVJKMlFmOEhjV29zQUFBNkFBRWdDU0FISUFFZ0FHdEJFblpCL3dkeGFpd0FBRG9BQXlBSklBY2dDeUFNUWNDbGYyeHFRUkoyUWY4SGNXb3NBQUE2QUFJZ0JTUUdDOThFQVE5L0l3WWhFQ01HUVpBQmFpUUdJQUFvQXRBQ0lSTWdFQ0lBSVFVZ0FTZ0NWQ0VCQTBBZ0JTQUJLQUlBSUFJdUFRQkJEWFJzUVlBSWNpSUtJQUVvQW9BQklBSkJRR3N1QVFCQm9TMXNiQ0lNYWlJTklBRkJRR3NvQWdBZ0FpNEJJRUd4emdCc2JDSU9haUlQSUFJdUFSQWdBU2dDSUd3aUJpQUNMZ0ZRSUFFb0FxQUJiQ0lJYWtHMkYyd2lFU0FHSUFJdUFUQWdBU2dDWUd3aUNXcEJEWFJxSWhKcVFRdDFOZ0lBSUFVZ0R5QVNhMEVMZFRZQ2VDQUZJQW9nREVGK2JHcEJDM1VpQ2lBR0lBbHJJQWhyUVFKMElnWnFOZ0lZSUFVZ0NpQUdhellDWUNBRklBMGdEbXNpQmlBUklBZ2dDV3RCRFhScUlnaHFRUXQxTmdJd0lBVWdCaUFJYTBFTGRUWUNTQ0FDUVFKcUlRSWdBVUVFYWlFQklBVkJCR29oQlNBSFFRRnFJZ2RCQmtjTkFBc2dFMEdBZldvaEFrRUFJUUVEUUNBRUlBRkJBblFnQTJvb0FnQnFJZ1VnQUNnQ0JDSUhJQUFvQWhRaUJtcEJ0aGRzSWdzZ0J5QUFLQUlNSWdocVFRMTBhaUlLSUFBb0FnQkJEWFJCZ0lDSXdBQnFJZ3dnQUNnQ0VFR2hMV3dpQ1dvaURTQUFLQUlJUWJIT0FHd2lEbW9pRDJwQkVuWkIvd2R4SUFKcUxBQUFPZ0FBSUFVZ0R5QUthMEVTZGtIL0IzRWdBbW9zQUFBNkFBVWdCU0FISUFocklBWnJRUTEwSWdjZ0RDQUpheUFKYXlJSmFrRVNka0gvQjNFZ0Ftb3NBQUE2QUFFZ0JTQUpJQWRyUVJKMlFmOEhjU0FDYWl3QUFEb0FCQ0FGSUEwZ0Rtc2lCeUFMSUFZZ0NHdEJEWFJxSWdacVFSSjJRZjhIY1NBQ2Fpd0FBRG9BQWlBRklBY2dCbXRCRW5aQi93ZHhJQUpxTEFBQU9nQURJQUJCR0dvaEFDQUJRUUZxSWdGQkJrY05BQXNnRUNRR0MrMEJBUVIvUVFSQkJCQ0xBU0VFQTBBZ0FrRURSd1JBSUFKQkFuUWhCVUVBSVFNRFFDQURRUVJIQkVBZ0JDZ0NBQ0FESUFWcVFRTjBhaUFDUVFWMElBQnFJQU5CQTNScUt3TUFPUU1BSUFOQkFXb2hBd3dCQ3dzZ0FrRUJhaUVDREFFTEN5QUVLQUlBSWdCQ0FEY0RZQ0FBUWdBM0EyZ2dBRUlBTndOd0lBQkVBQUFBQUFBQThEODVBM2dnQkJEV0FScEJBQ0VBQTBBZ0FFRURSd1JBSUFCQkFuUWhBMEVBSVFJRFFDQUNRUVJIQkVBZ0FFRUZkQ0FCYWlBQ1FRTjBhaUFFS0FJQUlBSWdBMnBCQTNScUt3TUFPUU1BSUFKQkFXb2hBZ3dCQ3dzZ0FFRUJhaUVBREFFTEN5QUVFRWtMdFFZQkZIOGpCaUVWSXdaQjBBRnFKQVlnQUNnQzBBSWhHQ0FWSWdBaEJTQUJLQUpVSVFFRFFDQUNRVUJyTGdFQUlBRW9Bb0FCYkNJSElBSXVBV0FnQVNnQ3dBRnNJZ1pyUWJjNGJDSU9JQUl1QVNBZ0FVRkFheWdDQUd3aUNTQUhhMEdTRkd3aUVTQUJLQUlBSUFJdUFRQkJEWFJzUVlBSWNpSVBJQWRCbFlwL2JHcHFhaUVLSUFJdUFSQWdBU2dDSUd3aUN5QUNMZ0V3SUFFb0FtQnNJZ2hxUWU4N2JDSVNJQXNnQ0d0Qjh3cHNJaE5xSUFnZ0FpNEJVQ0FCS0FLZ0FXd2lDR3BCNGFkL2JDSVVhaUVOSUFVZ0R5QUdJQWxxSWhaQnh0RUFiR29pRnlBT0lBWkJnM3RzYW1vaUJpQUlJQXRxUWFNbmJDSUxJQklnRTJ0cUlnNXFRUXQxTmdJQUlBVWdCaUFPYTBFTGRUWUNxQUVnQlNBS0lBMXFRUXQxTmdJY0lBVWdDaUFOYTBFTGRUWUNqQUVnQlNBWElCRWdDVUh4NFg1c2Ftb2lCaUFVSUFzZ0NFSGU5d0JzYW1vaUNXcEJDM1UyQWpnZ0JTQUdJQWxyUVF0MU5nSndJQVVnRHlBSElCWnJRY0hhQUd4cVFRdDFOZ0pVSUFKQkFtb2hBaUFCUVFScUlRRWdCVUVFYWlFRklBeEJBV29pREVFSFJ3MEFDeUFZUVlCOWFpRUNRUUFoQVFOQUlBQW9BaEFpRENBQUtBSVlJZ2RyUWJjNGJDSU5JQUFvQWdnaUJpQU1hMEdTRkd3aUVDQUFLQUlBUVExMFFZQ0FpTUFBYWlJSklBeEJsWXAvYkdwcWFpRVBJQUFvQWdRaUNpQUFLQUlNSWdWcVFlODdiQ0lPSUFvZ0JXdEI4d3BzSWhGcUlBVWdBQ2dDRkNJTGFrSGhwMzlzSWhKcUlRZ2dCQ0FCUVFKMElBTnFLQUlBYWlJRklBSWdDU0FHSUFkcUloTkJ4dEVBYkdvaUZDQU5JQWRCZzN0c2Ftb2lCeUFLSUF0cVFhTW5iQ0lLSUE0Z0VXdHFJZzFxUVJKMlFmOEhjV29zQUFBNkFBQWdCU0FDSUFjZ0RXdEJFblpCL3dkeGFpd0FBRG9BQmlBRklBSWdDQ0FQYWtFU2RrSC9CM0ZxTEFBQU9nQUJJQVVnQWlBUElBaHJRUkoyUWY4SGNXb3NBQUE2QUFVZ0JTQUNJQlFnRUNBR1FmSGhmbXhxYWlJSElCSWdDaUFMUWQ3M0FHeHFhaUlHYWtFU2RrSC9CM0ZxTEFBQU9nQUNJQVVnQWlBSElBWnJRUkoyUWY4SGNXb3NBQUE2QUFRZ0JTQUNJQWtnRENBVGEwSEIyZ0JzYWtFU2RrSC9CM0ZxTEFBQU9nQURJQUJCSEdvaEFDQUJRUUZxSWdGQkIwY05BQXNnRlNRR0M2SUhBUlIvSXdZaEZTTUdRYUFDYWlRR0lBQW9BdEFDSVJnZ0ZTSUFJUVVnQVNnQ1ZDRUJBMEFnQVNnQ0FDQUNMZ0VBUVExMGJFR0FDSElpQnlBQktBTEFBU0FDTGdGZ1FhRXRiR3dpQm1vaENDQUhJQVpySUFackloQWdBaTRCSUNBQlFVQnJLQUlBYkNJR0lBSkJRR3N1QVFBZ0FTZ0NnQUZzSWdkckloRkJvUzFzYWlFSklBSXVBUkFnQVNnQ0lHd2lDaUFDTGdGUUlBRW9BcUFCYkNJTWFrR1hPbXdoRFNBRklBZ2dCaUFIYWtHSDFRQnNJaElnQjBIY0Qyd2lFMnRxSWhRZ0NpQUNMZ0Z3SUFFb0F1QUJiQ0lIYWtINkhtd2lGaUFOSUFFb0FtQWdBaTRCTUVIUHNYOXNiQ0lPYTJvaUYycEJDM1UyQWdBZ0JTQVVJQmRyUVF0MU5nS0FBaUFGSUFrZ0NpQU1heUFIYTBHeHpnQnNJZ3BxUVF0MU5nSWdJQVVnQ1NBS2EwRUxkVFlDNEFFZ0JVRkFheUFHUWF2RkFHd2lCaUFJSUJKcmFpSUpJQTBnRGlBTUlBZHJRWkhaQUd3aUIydHFJZ3BxUVF0MU5nSUFJQVVnQ1NBS2EwRUxkVFlDd0FFZ0JTQVRJQWdnQm10cUlnZ2dGaUFISUE1cWFpSUdha0VMZFRZQ1lDQUZJQWdnQm10QkMzVTJBcUFCSUFVZ0VDQVJRYjZsZjJ4cVFRdDFOZ0tBQVNBQ1FRSnFJUUlnQVVFRWFpRUJJQVZCQkdvaEJTQUxRUUZxSWd0QkNFY05BQXNnR0VHQWZXb2hBa0VBSVFFRFFDQUFLQUlBUVExMFFZQ0FpTUFBYWlJSUlBQW9BaGhCb1Mxc0lnVnFJUXNnQ0NBRmF5QUZheUlPSUFBb0FnZ2lDQ0FBS0FJUUlnWnJJZzlCb1Mxc2FpRUhJQUFvQWdRaUNTQUFLQUlVSWdwcVFaYzZiQ0VNSUFRZ0FVRUNkQ0FEYWlnQ0FHb2lCU0FDSUFzZ0JpQUlha0dIMVFCc0loQWdCa0hjRDJ3aUVXdHFJaElnQ1NBQUtBSWNJZ1pxUWZvZWJDSVRJQXdnQUNnQ0RFSFBzWDlzSWcxcmFpSVVha0VTZGtIL0IzRnFMQUFBT2dBQUlBVWdBaUFTSUJSclFSSjJRZjhIY1dvc0FBQTZBQWdnQlNBQ0lBY2dDU0FLYXlBR2EwR3h6Z0JzSWdscVFSSjJRZjhIY1dvc0FBQTZBQUVnQlNBQ0lBY2dDV3RCRW5aQi93ZHhhaXdBQURvQUJ5QUZJQUlnQ0VHcnhRQnNJZ2dnQ3lBUWEyb2lCeUFNSUEwZ0NpQUdhMEdSMlFCc0lnWnJhaUlKYWtFU2RrSC9CM0ZxTEFBQU9nQUNJQVVnQWlBSElBbHJRUkoyUWY4SGNXb3NBQUE2QUFZZ0JTQUNJQkVnQ3lBSWEyb2lDeUFUSUFZZ0RXcHFJZ2hxUVJKMlFmOEhjV29zQUFBNkFBTWdCU0FDSUFzZ0NHdEJFblpCL3dkeGFpd0FBRG9BQlNBRklBSWdEaUFQUWI2bGYyeHFRUkoyUWY4SGNXb3NBQUE2QUFRZ0FFRWdhaUVBSUFGQkFXb2lBVUVKUncwQUN5QVZKQVlML2djQkZYOGpCaUVWSXdaQndBSnFKQVlnQUNnQzBBSWhHU0FWSWdBaEJTQUJLQUpVSVFFRFFDQUNMZ0V3SUFFb0FtQnNJZ1lnQWk0QmNDQUJLQUxnQVd3aUNtb2hCeUFGSUFFb0FnQWdBaTRCQUVFTmRHeEJnQWh5SWdrZ0FrRkFheTRCQUNBQktBS0FBV3dpQzBHZHlRQnNhaUlRSUFJdUFTQWdBVUZBYXlnQ0FHd2lEQ0FDTGdGZ0lBRW9Bc0FCYkNJUmFrR2FOV3dpRFNBTVFmRWdiR29pREdvaURpQUdJQXBySWdwQjR4TnNJaElnQWk0QlVDQUJLQUtnQVd3aUZFRU5kQ0lQYWlJV0lBZEI3enhzSWhjZ0FpNEJFQ0FCS0FJZ2JDSUdRYlBaQUd4cWFpSVlha0VMZFRZQ0FDQUZJQTRnR0d0QkMzVTJBcUFDSUFVZ0NTQUxRWVJrYkdvaURpQU5JQkZCM1BSK2JHb2lFV29pRFNBR1FkUFFBR3dnQjBIUEpXd2lCMnNnRHlBU2F5QUtRUXgwYXlJU2F5SVBha0VMZFRZQ0lDQUZJQTBnRDJ0QkMzVTJBb0FDSUFWQlFHc2dDU0FMUWI2bGYyeHFRUXQxSWdrZ0JpQVVheUFLYTBFQ2RDSUxhallDQUNBRklBa2dDMnMyQXVBQklBVWdEaUFSYXlJSklCSWdCa0dNS1d3Z0IydHFJZ2RxUVF0MU5nSmdJQVVnQ1NBSGEwRUxkVFlDd0FFZ0JTQVFJQXhySWdjZ0ZpQUdRWlFPYkNBWGEyb2lCbXBCQzNVMkFvQUJJQVVnQnlBR2EwRUxkVFlDb0FFZ0FrRUNhaUVDSUFGQkJHb2hBU0FGUVFScUlRVWdDRUVCYWlJSVFRaEhEUUFMSUJsQmdIMXFJUUpCQUNFQkEwQWdBQ2dDRENJSUlBQW9BaHdpQ21vaEJpQUVJQUZCQW5RZ0Eyb29BZ0JxSWdVZ0FpQUFLQUlBUVExMFFZQ0FpTUFBYWlJSElBQW9BaEFpQ1VHZHlRQnNhaUlUSUFBb0FnZ2lDeUFBS0FJWUloQnFRWm8xYkNJTUlBdEI4U0JzYWlJUmFpSU5JQUFvQWhSQkRYUWlDeUFJSUFwcklncEI0eE5zSWc1cUloSWdCa0h2UEd3aUZDQUFLQUlFSWdoQnM5a0FiR3BxSWc5cVFSSjJRZjhIY1dvc0FBQTZBQUFnQlNBQ0lBMGdEMnRCRW5aQi93ZHhhaXdBQURvQUNTQUZJQUlnQnlBSlFZUmtiR29pRFNBTUlCQkIzUFIrYkdvaUVHb2lEQ0FJUWRQUUFHd2dCa0hQSld3aUJtc2dDeUFPYXlBS1FReDBheUlPYXlJUGFrRVNka0gvQjNGcUxBQUFPZ0FCSUFVZ0FpQU1JQTlyUVJKMlFmOEhjV29zQUFBNkFBZ2dCU0FDSUFjZ0NVRytwWDlzYWlJSElBZ2dDbXRCRFhRZ0Myc2lDV3BCRW5aQi93ZHhhaXdBQURvQUFpQUZJQUlnQnlBSmEwRVNka0gvQjNGcUxBQUFPZ0FISUFVZ0FpQU5JQkJySWdjZ0RpQUlRWXdwYkNBR2Eyb2lCbXBCRW5aQi93ZHhhaXdBQURvQUF5QUZJQUlnQnlBR2EwRVNka0gvQjNGcUxBQUFPZ0FHSUFVZ0FpQVRJQkZySWdZZ0VpQUlRWlFPYkNBVWEyb2lDR3BCRW5aQi93ZHhhaXdBQURvQUJDQUZJQUlnQmlBSWEwRVNka0gvQjNGcUxBQUFPZ0FGSUFCQklHb2hBQ0FCUVFGcUlnRkJDa2NOQUFzZ0ZTUUdDOTRKQVJsL0l3WWhHU01HUWVBQ2FpUUdJQUFvQXRBQ0lSMGdHU0lBSVFVZ0FTZ0NWQ0VCQTBBZ0FrRkFheTRCQUNBQktBS0FBV3dpQmlBQ0xnRWdJQUZCUUdzb0FnQnNJZ2xyUWNrYmJDRVVJQUVvQWdBZ0FpNEJBRUVOZEd4QmdBaHlJaFlnQ1NBQ0xnRmdJQUVvQXNBQmJDSUhhaUlRSUFackloZEI3TllBYkdvaERpQVVJQVlnQjJ0Qi9xSUJiQ0FPYWlJUklBWkJ0SXQvYkdwcUlRb2dBaTRCY0NBQktBTGdBV3dpQ3lBQ0xnRlFJQUVvQXFBQmJDSU5JQUl1QVJBZ0FTZ0NJR3dpQ0NBQ0xnRXdJQUVvQW1Cc0lnOXFJaE5xYWtIQUdXd2lFaUFJSUF0cVFiZ1hiR29pR0NBSUlBMXFRZlFxYkNJYUlCTkI2amhzSWhzZ0NFSDJSR3hxYW1vaENDQU5JQTlxUWNtMWYyd2dFbW9pSENBTlFkcXpmMndnR21wcUlSTWdCU0FSSUFkQnRZY0JiR29pRVNBSWFrRUxkVFlDQUNBRklCRWdDR3RCQzNVMkFzQUNJQVVnSENBTElBOXFRZldNZjJ3aUNDQVBRZGlFQVd3Z0cycHFhaUlSSUFwcVFRdDFOZ0lnSUFVZ0NpQVJhMEVMZFRZQ29BSWdCVUZBYXlBVElCQkJoYlovYkNBT2FpSUtJQWRCdzAxc2FpSUhha0VMZFRZQ0FDQUZJQWNnRTJ0QkMzVTJBb0FDSUFVZ0NDQUxRY2VHQVd4cUlCaHFJZ2NnRGlBVWFpQUpRWkdmZjJ4cUlnNXFRUXQxTmdKZ0lBVWdEaUFIYTBFTGRUWUM0QUVnQlNBUFFZMmlmMndnRFVHTHdBQnNhaUFMUVphVWYyeHFJQkpxSWdzZ0NpQUdRYm44QUd3Z0NVSDlwbjlzYW1vaUJtcEJDM1UyQW9BQklBVWdCaUFMYTBFTGRUWUN3QUVnQlNBV0lCZEJ2NlYvYkdwQkMzVTJBcUFCSUFKQkFtb2hBaUFCUVFScUlRRWdCVUVFYWlFRklBeEJBV29pREVFSVJ3MEFDeUFkUVlCOWFpRUNRUUFoQVFOQUlBQW9BaEFpRENBQUtBSUlJZzlyUWNrYmJDRU9JQUFvQWdCQkRYUkJnSUNJd0FCcUloTWdEeUFBS0FJWUlnbHFJaFVnREdzaUZrSHMxZ0JzYWlFSElBNGdEQ0FKYTBIK29nRnNJQWRxSWhBZ0RFRzBpMzlzYW1vaENDQUFLQUljSWdZZ0FDZ0NGQ0lMSUFBb0FnUWlCU0FBS0FJTUlnMXFJZ3BxYWtIQUdXd2lGQ0FGSUFacVFiZ1hiR29pRnlBRklBdHFRZlFxYkNJU0lBcEI2amhzSWhFZ0JVSDJSR3hxYW1vaENpQVVJQXNnRFdwQnliVi9iR29pR0NBU0lBdEIyck4vYkdwcUlSSWdCQ0FCUVFKMElBTnFLQUlBYWlJRklBSWdFQ0FKUWJXSEFXeHFJaEFnQ21wQkVuWkIvd2R4YWl3QUFEb0FBQ0FGSUFJZ0VDQUthMEVTZGtIL0IzRnFMQUFBT2dBS0lBVWdBaUFJSUJnZ0JpQU5ha0gxakg5c0lnb2dFU0FOUWRpRUFXeHFhbW9pRUdwQkVuWkIvd2R4YWl3QUFEb0FBU0FGSUFJZ0NDQVFhMEVTZGtIL0IzRnFMQUFBT2dBSklBVWdBaUFWUVlXMmYyd2dCMm9pQ0NBSlFjTk5iR29pQ1NBU2FrRVNka0gvQjNGcUxBQUFPZ0FDSUFVZ0FpQUpJQkpyUVJKMlFmOEhjV29zQUFBNkFBZ2dCU0FDSUFjZ0Rtb2dEMEdSbjM5c2FpSUpJQmNnQ2lBR1FjZUdBV3hxYWlJSGFrRVNka0gvQjNGcUxBQUFPZ0FESUFVZ0FpQUpJQWRyUVJKMlFmOEhjV29zQUFBNkFBY2dCU0FDSUFnZ0RFRzUvQUJzSUE5Qi9hWi9iR3BxSWd3Z0ZDQU5RWTJpZjJ3Z0MwR0x3QUJzYWlBR1FaYVVmMnhxYWlJR2FrRVNka0gvQjNGcUxBQUFPZ0FFSUFVZ0FpQU1JQVpyUVJKMlFmOEhjV29zQUFBNkFBWWdCU0FDSUJNZ0ZrRy9wWDlzYWtFU2RrSC9CM0ZxTEFBQU9nQUZJQUJCSUdvaEFDQUJRUUZxSWdGQkMwY05BQXNnR1NRR0M1a0pBUmQvSXdZaEdTTUdRWUFEYWlRR0lBQW9BdEFDSVJzZ0dTSUFJUVVnQVNnQ1ZDRUJBMEFnQVNnQ0FDQUNMZ0VBUVExMGJFR0FDSElpQ1NBQktBS0FBU0FDUVVCckxnRUFRYkhPQUd4c0loSnFJUTBnQ1NBQ0xnRWdJQUZCUUdzb0FnQnNJZ3BCRFhRZ0FTZ0N3QUVnQWk0QllFRU5kR3dpRG1zaUVHb2hFU0FGSUEwZ0NrRzIxd0JzSUE1cUloZHFJaE1nQWk0QmNDQUJLQUxnQVd3aUJpQUNMZ0VRSUFFb0FpQnNJZ2NnQWk0QlVDQUJLQUtnQVd3aUNHb2lDMnBCalRkc0lnOGdDMEhiRUd4cUloUWdBaTRCTUNBQktBSmdiQ0lMUWMvVEFHd2lHQ0FIUWZjUmJHcHFJaFZxUVF0MU5nSUFJQVVnRXlBVmEwRUxkVFlDNEFJZ0JTQUxJQWhySWhNZ0J5QUdheUlWYWtIUkltd2lHaUFWUWY0d2JHb2lGU0FSYWtFTGRUWUNJQ0FGSUJFZ0ZXdEJDM1UyQXNBQ0lBVkJRR3NnQ1NBU2F5SVJJQXBCdGhkc0lBNXJJZ3BxSWc0Z0ZDQUdJQWhxUVl1OWYyd2lFaUFMUWE5ZGJDSUxJQWhCc0tGL2JHcHFhaUlJYWtFTGRUWUNBQ0FGSUE0Z0NHdEJDM1UyQXFBQ0lBVWdFU0FLYXlJSUlCSWdEeUFHUWNibEFHd2dHR3RxYWlJS2FrRUxkVFlDWUNBRklBZ2dDbXRCQzNVMkFvQUNJQVVnR2lBVFFkK0pmMnhxSWdnZ0NTQVFheUlKYWtFTGRUWUNnQUVnQlNBSklBaHJRUXQxTmdMZ0FTQUZJQTBnRjJzaUNTQVBJQXNnQjBIY1ZHeHFJQVpCaklGL2JHcHFJZ1pxUVF0MU5nS2dBU0FGSUFrZ0JtdEJDM1UyQXNBQklBSkJBbW9oQWlBQlFRUnFJUUVnQlVFRWFpRUZJQXhCQVdvaURFRUlSdzBBQ3lBYlFZQjlhaUVDUVFBaEFRTkFJQUFvQWdCQkRYUkJnSUNJd0FCcUlnWWdBQ2dDRUVHeHpnQnNJZ3RxSVFnZ0JpQUFLQUlJSWcxQkRYUWdBQ2dDR0VFTmRDSUtheUlXYWlFT0lBUWdBVUVDZENBRGFpZ0NBR29pQlNBQ0lBZ2dEVUcyMXdCc0lBcHFJaEpxSWhBZ0FDZ0NIQ0lNSUFBb0FnUWlDU0FBS0FJVUlnZHFJZzlxUVkwM2JDSVJJQTlCMnhCc2FpSVhJQUFvQWd3aUQwSFAwd0JzSWhNZ0NVSDNFV3hxYWlJVWFrRVNka0gvQjNGcUxBQUFPZ0FBSUFVZ0FpQVFJQlJyUVJKMlFmOEhjV29zQUFBNkFBc2dCU0FDSUE0Z0NTQU1heUlRSUE4Z0Iyc2lGR3BCMFNKc0loZ2dFRUgrTUd4cUloQnFRUkoyUWY4SGNXb3NBQUE2QUFFZ0JTQUNJQTRnRUd0QkVuWkIvd2R4YWl3QUFEb0FDaUFGSUFJZ0JpQUxheUlPSUExQnRoZHNJQXBySWcxcUlnb2dGeUFISUF4cVFZdTlmMndpQ3lBUFFhOWRiQ0lQSUFkQnNLRi9iR3BxYWlJSGFrRVNka0gvQjNGcUxBQUFPZ0FDSUFVZ0FpQUtJQWRyUVJKMlFmOEhjV29zQUFBNkFBa2dCU0FDSUE0Z0RXc2lCeUFMSUJFZ0RFSEc1UUJzSUJOcmFtb2lEV3BCRW5aQi93ZHhhaXdBQURvQUF5QUZJQUlnQnlBTmEwRVNka0gvQjNGcUxBQUFPZ0FJSUFVZ0FpQUdJQlpySWdZZ0dDQVVRZCtKZjJ4cUlnZHFRUkoyUWY4SGNXb3NBQUE2QUFRZ0JTQUNJQVlnQjJ0QkVuWkIvd2R4YWl3QUFEb0FCeUFGSUFJZ0NDQVNheUlHSUJFZ0R5QUpRZHhVYkdvZ0RFR01nWDlzYW1vaURHcEJFblpCL3dkeGFpd0FBRG9BQlNBRklBSWdCaUFNYTBFU2RrSC9CM0ZxTEFBQU9nQUdJQUJCSUdvaEFDQUJRUUZxSWdGQkRFY05BQXNnR1NRR0Mrd0tBUmgvSXdZaEdTTUdRYUFEYWlRR0lBQW9BdEFDSVJ3Z0dTSUFJUVVnQVNnQ1ZDRUJBMEFnQWtGQWF5NEJBQ0FCS0FLQUFXd2lCaUFDTGdGZ0lBRW9Bc0FCYkNJSGFpRU5JQUl1QVJBZ0FTZ0NJR3dpRGlBQ0xnRXdJQUVvQW1Cc0lnaHFRZERVQUd3aENTQUZJQUVvQWdBZ0FpNEJBRUVOZEd4QmdBaHlJaEVnQmlBSGF5SUtRWmtHYkdvaUR5QU5RZm5KQUd3aUVpQUNMZ0VnSUFGQlFHc29BZ0JzSWdaQjhkY0FiR3BxSWhNZ0RpQUNMZ0Z3SUFFb0F1QUJiQ0lMYWlJWFFZSThiQ0lVSUE0Z0FpNEJVQ0FCS0FLZ0FXd2lCMnBCdnNvQWJDSVZJQWtnRGtIYi9uNXNhbXBxSWhacVFRdDFOZ0lBSUFVZ0V5QVdhMEVMZFRZQ2dBTWdCU0FJSUF0cVFjSzFmMndpRXlBSElBaHFRYXRxYkNJV0lBaEJ5elZzSUFscWFtb2lDU0FSSUFwQmxSOXNhaUlZSUFaQjRNTUFiQ0FOUWFBVWJDSWFhMm9pRzJwQkMzVTJBaUFnQlNBYklBbHJRUXQxTmdMZ0FpQUZRVUJySUFjZ0MycEIrRlZzSWdrZ0ZpQUhRYkdiZjJ4cUlCVnFhaUlWSUE4Z0JrR01JR3dnRW10cUlnOXFRUXQxTmdJQUlBVWdEeUFWYTBFTGRUWUN3QUlnQlNBVElBdEJsSTBCYkdvZ0ZHb2dDV29pQ1NBUklBcEJna1JzYWlJUElBWkJqSFZzSUExQjhodHNJZzFyYWlJU2FrRUxkVFlDWUNBRklCSWdDV3RCQzNVMkFxQUNJQVVnQ0VHV1ltd2dGMEhWRld3Z0J5QUlhMEdDUEd4cUlnZ2dEa0d6Rkd4cWFpSU9JQThnRFNBR1FjdE1iR3BxSWcxcVFRdDFOZ0tBQVNBRklBMGdEbXRCQzNVMkFvQUNJQVVnQ0NBSFFjNFliR29nQzBHL2tIOXNhaUlJSUJnZ0dpQUdRZTZ2ZjJ4cWFpSUhha0VMZFRZQ29BRWdCU0FISUFoclFRdDFOZ0xnQVNBRklCRWdDaUFHYTBIQjJnQnNha0VMZFRZQ3dBRWdBa0VDYWlFQ0lBRkJCR29oQVNBRlFRUnFJUVVnREVFQmFpSU1RUWhIRFFBTElCeEJnSDFxSVFKQkFDRUJBMEFnQUNnQ0VDSU1JQUFvQWhnaUNHb2hDeUFBS0FJRUlnY2dBQ2dDRENJR2FrSFExQUJzSVFvZ0JDQUJRUUowSUFOcUtBSUFhaUlGSUFJZ0FDZ0NBRUVOZEVHQWdJakFBR29pRFNBTUlBaHJJaEZCbVFac2FpSUpJQXRCK2NrQWJDSVFJQUFvQWdnaURFSHgxd0JzYW1vaUR5QUhJQUFvQWh3aURtb2lFa0dDUEd3aUV5QUhJQUFvQWhRaUNHcEJ2c29BYkNJWElBb2dCMEhiL241c2FtcHFJaFJxUVJKMlFmOEhjV29zQUFBNkFBQWdCU0FDSUE4Z0ZHdEJFblpCL3dkeGFpd0FBRG9BRENBRklBSWdEU0FSUVpVZmJHb2lEeUFNUWVEREFHd2dDMEdnRkd3aUZHdHFJaFVnQmlBT2FrSEN0WDlzSWhZZ0JpQUlha0dyYW13aUdDQUtJQVpCeXpWc2FtcHFJZ3BxUVJKMlFmOEhjV29zQUFBNkFBRWdCU0FDSUJVZ0NtdEJFblpCL3dkeGFpd0FBRG9BQ3lBRklBSWdDU0FNUVl3Z2JDQVFhMm9pQ2lBSUlBNXFRZmhWYkNJSklCY2dHQ0FJUWJHYmYyeHFhbW9pRUdwQkVuWkIvd2R4YWl3QUFEb0FBaUFGSUFJZ0NpQVFhMEVTZGtIL0IzRnFMQUFBT2dBS0lBVWdBaUFOSUJGQmdrUnNhaUlLSUF4QmpIVnNJQXRCOGh0c0lndHJhaUlRSUJNZ0ZpQU9RWlNOQVd4cWFpQUphaUlKYWtFU2RrSC9CM0ZxTEFBQU9nQURJQVVnQWlBUUlBbHJRUkoyUWY4SGNXb3NBQUE2QUFrZ0JTQUNJQW9nQ3lBTVFjdE1iR3BxSWdzZ0JrR1dZbXdnRWtIVkZXd2dDQ0FHYTBHQ1BHeHFJZ1lnQjBHekZHeHFhaUlIYWtFU2RrSC9CM0ZxTEFBQU9nQUVJQVVnQWlBTElBZHJRUkoyUWY4SGNXb3NBQUE2QUFnZ0JTQUNJQThnRkNBTVFlNnZmMnhxYWlJSElBWWdDRUhPR0d4cUlBNUJ2NUIvYkdvaUJtcEJFblpCL3dkeGFpd0FBRG9BQlNBRklBSWdCeUFHYTBFU2RrSC9CM0ZxTEFBQU9nQUhJQVVnQWlBTklCRWdER3RCd2RvQWJHcEJFblpCL3dkeGFpd0FBRG9BQmlBQVFTQnFJUUFnQVVFQmFpSUJRUTFIRFFBTElCa2tCZ3ZDQ2dFWmZ5TUdJUm9qQmtIQUEyb2tCaUFBS0FMUUFpRWRJQm9pQUNFRklBRW9BbFFoQVFOQUlBSXVBWEFnQVNnQzRBRnNJaFpCRFhRaUNTQUNMZ0VRSUFFb0FpQnNJZ1lnQWk0QlVDQUJLQUtnQVd3aUIyb2lERUhTekFCc0loRWdCaUFDTGdFd0lBRW9BbUJzSWdwcVFiZlZBR3dpRWlBR1FmQzNmMnhxYW1vaEN5QUdJQXBySWhOQjhoMXNJQWxySWhnZ0RFR1VNR3dpRnlBR1FZdThmMnhxYWlFUUlBVWdBU2dDQUNBQ0xnRUFRUTEwYkVHQUNISWlCaUFDUVVCckxnRUFJQUVvQW9BQmJDSU1RY2JSQUd4cUloUWdBaTRCSUNBQlFVQnJLQUlBYkNJTklBSXVBV0FnQVNnQ3dBRnNJZzVxUWVMR0FHd2lGU0FOUWIwUmJHb2lHMm9pR1NBTGFrRUxkVFlDQUNBRklCa2dDMnRCQzNVMkFxQURJQVVnQnlBS2FrSHZkV3dnQ1dzaUN5QUtRZTVrYkNBU2Ftb2lFaUFHSUF4QmtoUnNhaUlaSUJVZ0RrSDhrWDlzYWlJVmFpSWNha0VMZFRZQ0lDQUZJQndnRW10QkMzVTJBb0FESUFWQlFHc2dDeUFIUVlub2Ztd2dFV3BxSWdzZ0JpQU1RY2xIYkdvaUVTQU5RYU1uYkNBT1FlR25mMnhxSWcxcUlnNXFRUXQxTmdJQUlBVWdEaUFMYTBFTGRUWUM0QUlnQlNBVElBZHJJQlpxUVFKMElnc2dCaUFNUWI2bGYyeHFRUXQxSWdacU5nSmdJQVVnQmlBTGF6WUN3QUlnQlNBSElBcHJRZmpaQUd3aUJpQUhRZWFUZjJ4cUlCZHFJQWxxSWdjZ0VTQU5heUlKYWtFTGRUWUNnQUVnQlNBSklBZHJRUXQxTmdLZ0FpQUZJQVlnQ2tHWksyeHFJQmhxSWdjZ0dTQVZheUlLYWtFTGRUWUNvQUVnQlNBS0lBZHJRUXQxTmdLQUFpQUZJQlFnRzJzaUJ5QVFha0VMZFRZQ3dBRWdCU0FISUJCclFRdDFOZ0xnQVNBQ1FRSnFJUUlnQVVFRWFpRUJJQVZCQkdvaEJTQUlRUUZxSWdoQkNFY05BQXNnSFVHQWZXb2hBa0VBSVFFRFFDQUFLQUljUVExMElnb2dBQ2dDQkNJRklBQW9BaFFpQ0dvaUJrSFN6QUJzSWc0Z0JTQUFLQUlNSWdkcVFiZlZBR3dpRHlBRlFmQzNmMnhxYW1vaERDQUZJQWRySWhGQjhoMXNJQXBySWhJZ0JrR1VNR3dpRmlBRlFZdThmMnhxYWlFTElBUWdBVUVDZENBRGFpZ0NBR29pQlNBQ0lBQW9BZ0JCRFhSQmdJQ0l3QUJxSWdZZ0FDZ0NFQ0lKUWNiUkFHeHFJaGNnQUNnQ0NDSVFJQUFvQWhnaURXcEI0c1lBYkNJVElCQkJ2UkZzYWlJWWFpSVVJQXhxUVJKMlFmOEhjV29zQUFBNkFBQWdCU0FDSUJRZ0RHdEJFblpCL3dkeGFpd0FBRG9BRFNBRklBSWdCaUFKUVpJVWJHb2lEQ0FUSUExQi9KRi9iR29pRTJvaUZDQUhJQWhxUWU5MWJDQUtheUlWSUE4Z0IwSHVaR3hxYWlJUGFrRVNka0gvQjNGcUxBQUFPZ0FCSUFVZ0FpQVVJQTlyUVJKMlFmOEhjV29zQUFBNkFBd2dCU0FDSUFZZ0NVSEpSMnhxSWc4Z0VFR2pKMndnRFVIaHAzOXNhaUlRYWlJTklCVWdEaUFJUVlub2ZteHFhaUlPYWtFU2RrSC9CM0ZxTEFBQU9nQUNJQVVnQWlBTklBNXJRUkoyUWY4SGNXb3NBQUE2QUFzZ0JTQUNJQVlnQ1VHK3BYOXNhaUlHSUFvZ0VTQUlhMEVOZEdvaUNXcEJFblpCL3dkeGFpd0FBRG9BQXlBRklBSWdCaUFKYTBFU2RrSC9CM0ZxTEFBQU9nQUtJQVVnQWlBUElCQnJJZ1lnRmlBSUlBZHJRZmpaQUd3aUNTQUtJQWhCNXBOL2JHcHFhaUlJYWtFU2RrSC9CM0ZxTEFBQU9nQUVJQVVnQWlBR0lBaHJRUkoyUWY4SGNXb3NBQUE2QUFrZ0JTQUNJQXdnRTJzaUNDQVNJQWtnQjBHWksyeHFhaUlIYWtFU2RrSC9CM0ZxTEFBQU9nQUZJQVVnQWlBSUlBZHJRUkoyUWY4SGNXb3NBQUE2QUFnZ0JTQUNJQmNnR0dzaUNDQUxha0VTZGtIL0IzRnFMQUFBT2dBR0lBVWdBaUFJSUF0clFSSjJRZjhIY1dvc0FBQTZBQWNnQUVFZ2FpRUFJQUZCQVdvaUFVRU9SdzBBQ3lBYUpBWUxuZ3NCRzM4akJpRWRJd1pCNEFOcUpBWWdBQ2dDMEFJaEh5QWRJZ0FoQlNBQktBSlVJUUVEUUNBQktBSUFJQUl1QVFCQkRYUnNRWUFJY2lJTElBSXVBV0FnQVNnQ3dBRnNJZ2hCaEdSc2FpRVJJQUl1QVNBZ0FVRkFheWdDQUd3aURDQUNRVUJyTGdFQUlBRW9Bb0FCYkNJVGF5RUhJQUl1QVJBZ0FTZ0NJR3dpQmlBQ0xnRXdJQUVvQW1Cc0lnb2dBaTRCY0NBQktBTGdBV3dpRFdzaUZtcEJtalZzSWhjZ0JrSHhJR3hxSVFrZ0FTZ0NvQUVnQWk0QlVFR3h6Z0JzYkNJT0lBWWdEV3NpR0VHQzJnQnNhaUlQSUExQm81MEJiQ0FLUWZhcGYyd2lHV3RxSVJJZ0R5QUtRZVpLYkNJYUlBWkI1N2gvYkdwcUlRb2dCU0FTSUFzZ0NFR2R5UUJzYWlJUElBd2dFMm9pRTBITzFRQnNJaFFnQjBIMkFtd2lHMnBxSWh4cVFRdDFOZ0lBSUFVZ0hDQVNhMEVMZFRZQ3dBTWdCU0FSSUJOQnpESnNJaElnQjBIUUZtd2lIR3BxSWg0Z0NXcEJDM1UyQWlBZ0JTQWVJQWxyUVF0MU5nS2dBeUFGUVVCcklCaEJzYzRBYkNBT2F5SUpJQXNnQ0VHK3BYOXNhaUlMSUFkQm9DMXNhaUlJYWtFTGRUWUNBQ0FGSUFnZ0NXdEJDM1UyQW9BRElBVWdCaUFOYWtIb0pHd2lDQ0FHUWJrZWJDQWFhaUFPYTJvaUJpQVJJQnNnREVHVDNBQnNJZ3dnRkd0cWFpSUpha0VMZFRZQ1lDQUZJQWtnQm10QkMzVTJBdUFDSUFVZ0hDQVBJQkpyYWlJR0lCY2dGa0hjOUg1c2FpSUpha0VMZFRZQ2dBRWdCU0FHSUFsclFRdDFOZ0xBQWlBRklBZ2dEaUFaYWlBTlFhOUliR3BxSWdZZ0IwRzVabXdpRFNBUElCTkJnaU5zSWc1cmFpSUlha0VMZFRZQ29BRWdCU0FJSUFaclFRdDFOZ0tnQWlBRklBb2dFU0FOSUE0Z0RHdHFhaUlHYWtFTGRUWUN3QUVnQlNBR0lBcHJRUXQxTmdLQUFpQUZJQXNnQjBIQXBYOXNha0VMZFRZQzRBRWdBa0VDYWlFQ0lBRkJCR29oQVNBRlFRUnFJUVVnRUVFQmFpSVFRUWhIRFFBTElCOUJnSDFxSVFKQkFDRUJBMEFnQUNnQ0FFRU5kRUdBZ0lqQUFHb2lEaUFBS0FJWUlndEJoR1JzYWlFTklBQW9BZ2dpQ0NBQUtBSVFJZzlySVJBZ0FDZ0NCQ0lISUFBb0Fnd2lCU0FBS0FJY0lnWnJJaE5xUVpvMWJDSVZJQWRCOFNCc2FpRU1JQUFvQWhSQnNjNEFiQ0lSSUFjZ0Jtc2lGa0dDMmdCc2FpSUpJQVpCbzUwQmJDQUZRZmFwZjJ3aUYydHFJUW9nQ1NBRlFlWktiQ0lZSUFkQjU3aC9iR3BxSVFrZ0JDQUJRUUowSUFOcUtBSUFhaUlGSUFJZ0RpQUxRWjNKQUd4cUloSWdDQ0FQYWlJUFFjN1ZBR3dpR1NBUVFmWUNiQ0lhYW1vaUZDQUtha0VTZGtIL0IzRnFMQUFBT2dBQUlBVWdBaUFVSUFwclFSSjJRZjhIY1dvc0FBQTZBQTRnQlNBQ0lBMGdEMEhNTW13aUNpQVFRZEFXYkNJVWFtb2lHeUFNYWtFU2RrSC9CM0ZxTEFBQU9nQUJJQVVnQWlBYklBeHJRUkoyUWY4SGNXb3NBQUE2QUEwZ0JTQUNJQTRnQzBHK3BYOXNhaUlPSUJCQm9DMXNhaUlMSUJaQnNjNEFiQ0FSYXlJTWFrRVNka0gvQjNGcUxBQUFPZ0FDSUFVZ0FpQUxJQXhyUVJKMlFmOEhjV29zQUFBNkFBd2dCU0FDSUEwZ0dpQUlRWlBjQUd3aUN5QVphMnBxSWdnZ0JpQUhha0hvSkd3aURDQVlJQWRCdVI1c2FpQVJhMm9pQjJwQkVuWkIvd2R4YWl3QUFEb0FBeUFGSUFJZ0NDQUhhMEVTZGtIL0IzRnFMQUFBT2dBTElBVWdBaUFVSUJJZ0NtdHFJZ2NnRlNBVFFkejBmbXhxSWdocVFSSjJRZjhIY1dvc0FBQTZBQVFnQlNBQ0lBY2dDR3RCRW5aQi93ZHhhaXdBQURvQUNpQUZJQUlnRUVHNVptd2lCeUFTSUE5QmdpTnNJZ2hyYWlJS0lBd2dFU0FYYWlBR1FhOUliR3BxSWdacVFSSjJRZjhIY1dvc0FBQTZBQVVnQlNBQ0lBb2dCbXRCRW5aQi93ZHhhaXdBQURvQUNTQUZJQUlnRFNBSElBZ2dDMnRxYWlJSElBbHFRUkoyUWY4SGNXb3NBQUE2QUFZZ0JTQUNJQWNnQ1d0QkVuWkIvd2R4YWl3QUFEb0FDQ0FGSUFJZ0RpQVFRY0NsZjJ4cVFSSjJRZjhIY1dvc0FBQTZBQWNnQUVFZ2FpRUFJQUZCQVdvaUFVRVBSdzBBQ3lBZEpBWUwyd3dCSG44akJpRWdJd1pCZ0FScUpBWWdBQ2dDMEFJaElpQWdJZ0FoQlNBQktBSlVJUUVEUUNBQ0xnRWdJQUZCUUdzb0FnQnNJaEFnQWk0QllDQUJLQUxBQVd3aUQyc2lFVUhVRVd3aERDQUNMZ0VRSUFFb0FpQnNJZ1lnQWk0QlVDQUJLQUtnQVd3aUIyb2hDaUFHSUFJdUFYQWdBU2dDNEFGc0lnMXFRZnpGQUd3aUZ5QUtRZW5QQUd3aUV5QUdJQUl1QVRBZ0FTZ0NZR3dpQ0dwQnp0WUFiQ0lMSUFaQjF1MStiR3BxYWlFT0lBWWdEV3RCdGpsc0loa2dDa0hWS213aUdDQUdJQWhyUWFNYWJDSVNJQVpCd29wL2JHcHFhaUVLSUFnZ0RXb2lCa0dyVld3aUdpQUhJQWhxUWZBSWJDSVVJQWhCelFSc0lBdHFhbW9oQ3lBR1FaZXdmMndpR3lBSElBaHJRWW5hQUd3aUhDQUlRWnIrQUd3Z0VtcHFhaUVJSUFVZ0FTZ0NBQ0FDTGdFQVFRMTBiRUdBQ0hJaUJpQUNRVUJyTGdFQUlBRW9Bb0FCYkNJU1FjL1RBR3dpSFdvaUZTQVJRZVBZQUd3aUVTQVBRWU9rQVd4cUloNXFJaDhnRG1wQkMzVTJBZ0FnQlNBZklBNXJRUXQxTmdMZ0F5QUZJQXNnQmlBU1FkRWliQ0lPYWlJU0lBd2dFRUhOT1d4cUloOXFJaUZxUVF0MU5nSWdJQVVnSVNBTGEwRUxkVFlDd0FNZ0JVRkFheUFISUExcVFiS3BmMndpQ3lBVUlBZEIrcmQvYkdvZ0UycHFJaE1nQmlBT2F5SU9JQkVnRUVIQ1dXeHFJaEJxSWhGcVFRdDFOZ0lBSUFVZ0VTQVRhMEVMZFRZQ29BTWdCU0FhSUExQm1NUUFiR29nRjJvZ0Myb2lDeUFHSUIxcklnWWdEQ0FQUWJCZmJHb2lEMm9pREdwQkMzVTJBbUFnQlNBTUlBdHJRUXQxTmdLQUF5QUZJQnNnRFVHRnlRRnNhaUFaYWlBTklBZHJRYU1hYkNJTmFpSU1JQVlnRDJzaUJtcEJDM1UyQW9BQklBVWdCaUFNYTBFTGRUWUM0QUlnQlNBY0lBZEIrazVzYWlBWWFpQU5haUlHSUE0Z0VHc2lCMnBCQzNVMkFxQUJJQVVnQnlBR2EwRUxkVFlDd0FJZ0JTQUlJQklnSDJzaUJtcEJDM1UyQXNBQklBVWdCaUFJYTBFTGRUWUNvQUlnQlNBS0lCVWdIbXNpQm1wQkMzVTJBdUFCSUFVZ0JpQUthMEVMZFRZQ2dBSWdBa0VDYWlFQ0lBRkJCR29oQVNBRlFRUnFJUVVnQ1VFQmFpSUpRUWhIRFFBTElDSkJnSDFxSVFKQkFDRUJBMEFnQUNnQ0NDSU5JQUFvQWhnaUNHc2lDMEhVRVd3aEVDQUFLQUlFSWdVZ0FDZ0NGQ0lKYWlFUElBVWdBQ2dDSENJR2FrSDh4UUJzSWhZZ0QwSHB6d0JzSWhFZ0JTQUFLQUlNSWdkcVFjN1dBR3dpQ2lBRlFkYnRmbXhxYW1vaERDQUZJQVpyUWJZNWJDSVhJQTlCMVNwc0loTWdCU0FIYTBHakdtd2lEaUFGUWNLS2YyeHFhbW9oRHlBR0lBZHFJZ1ZCcTFWc0loZ2dCeUFKYWtId0NHd2lFaUFLSUFkQnpRUnNhbXBxSVFvZ0JVR1hzSDlzSWhrZ0NTQUhhMEdKMmdCc0lob2dEaUFIUVpyK0FHeHFhbW9oRGlBRUlBRkJBblFnQTJvb0FnQnFJZ1VnQWlBQUtBSUFRUTEwUVlDQWlNQUFhaUlISUFBb0FoQWlGRUhQMHdCc0lodHFJaHdnQzBIajJBQnNJZ3NnQ0VHRHBBRnNhaUlkYWlJVklBeHFRUkoyUWY4SGNXb3NBQUE2QUFBZ0JTQUNJQlVnREd0QkVuWkIvd2R4YWl3QUFEb0FEeUFGSUFJZ0J5QVVRZEVpYkNJTWFpSVVJQkFnRFVITk9XeHFJaFZxSWg0Z0NtcEJFblpCL3dkeGFpd0FBRG9BQVNBRklBSWdIaUFLYTBFU2RrSC9CM0ZxTEFBQU9nQU9JQVVnQWlBSElBeHJJZ3dnQ3lBTlFjSlpiR29pRFdvaUNpQUdJQWxxUWJLcGYyd2lDeUFSSUJJZ0NVSDZ0MzlzYW1wcUloRnFRUkoyUWY4SGNXb3NBQUE2QUFJZ0JTQUNJQW9nRVd0QkVuWkIvd2R4YWl3QUFEb0FEU0FGSUFJZ0J5QWJheUlISUJBZ0NFR3dYMnhxSWdocUloQWdGaUFZSUFaQm1NUUFiR3BxSUF0cUlncHFRUkoyUWY4SGNXb3NBQUE2QUFNZ0JTQUNJQkFnQ210QkVuWkIvd2R4YWl3QUFEb0FEQ0FGSUFJZ0J5QUlheUlISUJjZ0dTQUdRWVhKQVd4cWFpQUdJQWxyUWFNYWJDSUdhaUlJYWtFU2RrSC9CM0ZxTEFBQU9nQUVJQVVnQWlBSElBaHJRUkoyUWY4SGNXb3NBQUE2QUFzZ0JTQUNJQXdnRFdzaUJ5QVRJQm9nQ1VINlRteHFhaUFHYWlJSmFrRVNka0gvQjNGcUxBQUFPZ0FGSUFVZ0FpQUhJQWxyUVJKMlFmOEhjV29zQUFBNkFBb2dCU0FDSUJRZ0ZXc2lDU0FPYWtFU2RrSC9CM0ZxTEFBQU9nQUdJQVVnQWlBSklBNXJRUkoyUWY4SGNXb3NBQUE2QUFrZ0JTQUNJQndnSFdzaUNTQVBha0VTZGtIL0IzRnFMQUFBT2dBSElBVWdBaUFKSUE5clFSSjJRZjhIY1dvc0FBQTZBQWdnQUVFZ2FpRUFJQUZCQVdvaUFVRVFSdzBBQ3lBZ0pBWUw3Z3NCSEg4akJpRVhJd1pCZ0FKcUpBWWdBQ2dDMEFJaElDQVhJZ0FoQlNBQktBSlVJUUZCQ0NFSUEwQUNmd0pBSUFJdUFSQWlDaUFDTGdFZ0lnWnlRZi8vQTNFRWZ3d0JCU0FDTGdFd0JIOUJBQ0VHREFJRklBSkJRR3N1QVFBRWYwRUFJUVlNQXdVZ0FpNEJVQVIvUVFBaEJnd0VCU0FDTGdGZ0JIOUJBQ0VHREFVRklBSXVBWEFFZjBFQUlRWU1CZ1VnQlNBQktBSUFJQUl1QVFCQkFuUnNJZ1kyQWdBZ0JTQUdOZ0lnSUFWQlFHc2dCallDQUNBRklBWTJBbUFnQlNBR05nS0FBU0FGSUFZMkFxQUJJQVVnQmpZQ3dBRkJPQXNMQ3dzTEN3d0JDeUFDTGdGd0lBRW9BdUFCYkNJSElBSXVBVEFnQVNnQ1lHd2lEV29pQ3lBQ0xnRlFJQUVvQXFBQmJDSU1JQW9nQVNnQ0lHd2lDbW9pQ1dwQm9jc0FiQ0lQSUF0QnU0Si9iR29pQ3lBSElBcHFRYk5HYkNJT0lBZEJqaE5zYW1vaEJ5QVBJQWxCaEdkc2FpSUpJQTRnQ2tHTDRBQnNhbW9oQ2lBSklBd2dEV3BCL2R0K2JDSUpJQXhCczRNQmJHcHFJUXdnQlNBS0lBRW9Bb0FCSUFKQlFHc3VBUUJCRFhSc0lnOGdBU2dDQUNBQ0xnRUFRUTEwYkVHQUNISWlEbW9pRWlBQlFVQnJLQUlBSUFaQkVIUkJFSFZzSWdZZ0FpNEJZQ0FCS0FMQUFXd2lFV3BCMFNKc0loTWdCa0grTUd4cUlnWnFJaFJxUVF0MU5nSUFJQVVnRkNBS2EwRUxkVFlDNEFFZ0JTQUxJQWtnRFVIVXhBRnNhbW9pRFNBT0lBOXJJZ29nRXlBUlFkK0pmMnhxSWd0cUlnbHFRUXQxTmdJZ0lBVWdDU0FOYTBFTGRUWUN3QUVnQlVGQWF5QU1JQW9nQzJzaURXcEJDM1UyQWdBZ0JTQU5JQXhyUVF0MU5nS2dBU0FGSUFjZ0VpQUdheUlHYWtFTGRUWUNZQ0FHSUFkclFRdDFJUVpCSUF0QkFuUWdCV29nQmpZQ0FDQUZRUVJxSVFVZ0FVRUVhaUVCSUFKQkFtb2hBaUFJUVg5cUlRWWdDRUVCU3dSQUlBWWhDQXdCQ3dzZ0lFR0FmV29oQWtFQUlRRURRQ0FBS0FJSUlnMGdBQ2dDR0NJTWF5SU9RZFFSYkNFS0lBQW9BZ1FpQlNBQUtBSVVJZ2hxSVJBZ0JTQUFLQUljSWdacVFmekZBR3dpRWlBUVFlblBBR3dpRVNBRklBQW9BZ3dpQjJwQnp0WUFiQ0lKSUFWQjF1MStiR3BxYWlFTElBVWdCbXRCdGpsc0loTWdFRUhWS213aUZDQUZJQWRyUWFNYWJDSVBJQVZCd29wL2JHcHFhaUVRSUFZZ0Iyb2lCVUdyVld3aUdDQUhJQWhxUWZBSWJDSVpJQWtnQjBITkJHeHFhbW9oQ1NBRlFaZXdmMndpR2lBSUlBZHJRWW5hQUd3aUd5QVBJQWRCbXY0QWJHcHFhaUVQSUFRZ0FVRUNkQ0FEYWlnQ0FHb2lCU0FDSUFBb0FnQkJEWFJCZ0lDSXdBQnFJZ2NnQUNnQ0VDSVZRYy9UQUd3aUhHb2lIU0FPUWVQWUFHd2lEaUFNUVlPa0FXeHFJaDVxSWhZZ0MycEJFblpCL3dkeGFpd0FBRG9BQUNBRklBSWdGaUFMYTBFU2RrSC9CM0ZxTEFBQU9nQVBJQVVnQWlBSElCVkIwU0pzSWd0cUloVWdDaUFOUWMwNWJHb2lGbW9pSHlBSmFrRVNka0gvQjNGcUxBQUFPZ0FCSUFVZ0FpQWZJQWxyUVJKMlFmOEhjV29zQUFBNkFBNGdCU0FDSUFjZ0Myc2lDeUFPSUExQndsbHNhaUlOYWlJSklBWWdDR3BCc3FsL2JDSU9JQkVnR1NBSVFmcTNmMnhxYW1vaUVXcEJFblpCL3dkeGFpd0FBRG9BQWlBRklBSWdDU0FSYTBFU2RrSC9CM0ZxTEFBQU9nQU5JQVVnQWlBSElCeHJJZ2NnQ2lBTVFiQmZiR29pREdvaUNpQVNJQmdnQmtHWXhBQnNhbW9nRG1vaUNXcEJFblpCL3dkeGFpd0FBRG9BQXlBRklBSWdDaUFKYTBFU2RrSC9CM0ZxTEFBQU9nQU1JQVVnQWlBSElBeHJJZ2NnRXlBYUlBWkJoY2tCYkdwcUlBWWdDR3RCb3hwc0lnWnFJZ3hxUVJKMlFmOEhjV29zQUFBNkFBUWdCU0FDSUFjZ0RHdEJFblpCL3dkeGFpd0FBRG9BQ3lBRklBSWdDeUFOYXlJSElCUWdHeUFJUWZwT2JHcHFJQVpxSWdocVFSSjJRZjhIY1dvc0FBQTZBQVVnQlNBQ0lBY2dDR3RCRW5aQi93ZHhhaXdBQURvQUNpQUZJQUlnRlNBV2F5SUlJQTlxUVJKMlFmOEhjV29zQUFBNkFBWWdCU0FDSUFnZ0QydEJFblpCL3dkeGFpd0FBRG9BQ1NBRklBSWdIU0FlYXlJSUlCQnFRUkoyUWY4SGNXb3NBQUE2QUFjZ0JTQUNJQWdnRUd0QkVuWkIvd2R4YWl3QUFEb0FDQ0FBUVNCcUlRQWdBVUVCYWlJQlFRaEhEUUFMSUJja0JndlRFd0lRZndGOEl3WWhFeU1HUVJCcUpBWWdFeUVQSUFGQkFoQTVJUXdnQWtFQ0VEa2hEaUFFS0FJQUlnY2hBaUFNSUE1QmYyb2lFR3hCQVhRZ0Iyb2hCUU5BSUFZZ0RFZ0VRQ0FGUVFBN0FRQWdBa0VBT3dFQUlBSkJBbW9oQWlBRlFRSnFJUVVnQmtFQmFpRUdEQUVMQ3lBSElRSWdERUYvYWlJUlFRRjBJQWRxSVFWQkFDRUdBMEFnQmlBT1NBUkFJQVZCQURzQkFDQUNRUUE3QVFBZ0RFRUJkQ0FDYWlFQ0lBeEJBWFFnQldvaEJTQUdRUUZxSVFZTUFRc0xJQVJCa0lESUFHb2hBa0VBSUF4cklSSWdBQ0FCUVFGMFFRSnFhaUVOUVFFaEMwRUFJUVVnREVFQmFrRUJkQ0FIYWlFSEFuOENRQU5BQWtBZ0N5QVFUZzBDSUFVaEFFRUJJUWtEUUNBSklCRklCRUFnRFMwQUFDQURTZ1JBQWtBZ0VrRUJkQ0FIYWlJRkxnRUFJZ1pCQUVvRVFDQUhJQVk3QVFBZ0JrRUhiQ0lGUVFKMElBUnFRZlQvendCcUlnWWdCaWdDQUVFQmFqWUNBQ0FGUVFKMElBUnFRZmovendCcUlnWWdDU0FHS0FJQWFqWUNBQ0FGUVFKMElBUnFRZnovendCcUlnWWdDeUFHS0FJQWFqWUNBQ0FGUVFKMElBUnFRWXlBMEFCcUlBczJBZ0FNQVFzZ0JVRithaTRCQUNJR0lRZ2dCa0VBU2lFS0lBVXVBUUlpQlVFQVRBUkFJQW9FUUNBSElBWTdBUUFnQ0VFSGJDSUZRUUowSUFScVFmVC96d0JxSWdZZ0JpZ0NBRUVCYWpZQ0FDQUZRUUowSUFScVFmai96d0JxSWdZZ0NTQUdLQUlBYWpZQ0FDQUZRUUowSUFScVFmei96d0JxSWdZZ0N5QUdLQUlBYWpZQ0FDQUZRUUowSUFScVFZU0EwQUJxSWdZb0FnQWdDVWdFUUNBR0lBazJBZ0FMSUFWQkFuUWdCR3BCaklEUUFHb2dDellDQUF3Q0N5QUhRWDVxTGdFQUlnVkJBRW9FUUNBSElBVTdBUUFnQlVFSGJDSUZRUUowSUFScVFmVC96d0JxSWdZZ0JpZ0NBRUVCYWpZQ0FDQUZRUUowSUFScVFmai96d0JxSWdZZ0NTQUdLQUlBYWpZQ0FDQUZRUUowSUFScVFmei96d0JxSWdZZ0N5QUdLQUlBYWpZQ0FDQUZRUUowSUFScVFZU0EwQUJxSWdVb0FnQWdDVTROQWlBRklBazJBZ0FGSUFCQi8vOEJTZzBHSUFjZ0FFRUJhaUlGT3dFQUlBUkJrSURJQUdvZ0FFRUNkR29nQlVFUWRFRVFkVFlDQUNBRVFaQ0EwQUJxSUFCQkIyd2lBRUVDZEdwQkFUWUNBQ0FBUVFKMElBUnFRWlNBMEFCcUlBazJBZ0FnQUVFQ2RDQUVha0dZZ05BQWFpQUxOZ0lBSUFCQkFuUWdCR3BCbklEUUFHb2dDVFlDQUNBQVFRSjBJQVJxUWFDQTBBQnFJQWsyQWdBZ0FFRUNkQ0FFYWtHa2dOQUFhaUFMTmdJQUlBQkJBblFnQkdwQnFJRFFBR29nQ3pZQ0FDQUZJUUFMREFFTElBb0VRQUpBSUFWQkFuUWdCR3BCaklESUFHb29BZ0FpQlNBSVFRSjBJQVJxUVl5QXlBQnFLQUlBSWdaS0JFQWdCeUFHT3dFQUlBSWhDRUVBSVFvRFFDQUtJQUJPQkVBZ0JpRUZEQU1MSUFVZ0NDZ0NBRVlFUUNBSUlBWTJBZ0FMSUFoQkJHb2hDQ0FLUVFGcUlRb01BQUFMQUFVZ0J5QUZPd0VBSUFVZ0JrZ0VRQ0FDSVFoQkFDRUtBMEFnQ2lBQVRnMERJQVlnQ0NnQ0FFWUVRQ0FJSUFVMkFnQUxJQWhCQkdvaENDQUtRUUZxSVFvTUFBQUxBQXNMQ3lBRlFSQjBRUkIxUVFkc0lnVkJBblFnQkdwQjlQL1BBR29pQmlBR0tBSUFRUUZxTmdJQUlBVkJBblFnQkdwQitQL1BBR29pQmlBSklBWW9BZ0JxTmdJQUlBVkJBblFnQkdwQi9QL1BBR29pQmlBTElBWW9BZ0JxTmdJQUlBVkJBblFnQkdwQmpJRFFBR29nQ3pZQ0FBd0JDeUFIUVg1cUxnRUFJZ1pCQUV3RVFDQUhJQVU3QVFBZ0JVRUhiQ0lGUVFKMElBUnFRZlQvendCcUlnWWdCaWdDQUVFQmFqWUNBQ0FGUVFKMElBUnFRZmovendCcUlnWWdDU0FHS0FJQWFqWUNBQ0FGUVFKMElBUnFRZnovendCcUlnWWdDeUFHS0FJQWFqWUNBQ0FGUVFKMElBUnFRWUNBMEFCcUlnWW9BZ0FnQ1VvRVFDQUdJQWsyQWdBTElBVkJBblFnQkdwQmpJRFFBR29nQ3pZQ0FBd0JDd0pBSUFWQkFuUWdCR3BCaklESUFHb29BZ0FpQlNBR1FRSjBJQVJxUVl5QXlBQnFLQUlBSWdaS0JFQWdCeUFHT3dFQUlBSWhDRUVBSVFvRFFDQUtJQUJPQkVBZ0JpRUZEQU1MSUFVZ0NDZ0NBRVlFUUNBSUlBWTJBZ0FMSUFoQkJHb2hDQ0FLUVFGcUlRb01BQUFMQUFVZ0J5QUZPd0VBSUFVZ0JrZ0VRQ0FDSVFoQkFDRUtBMEFnQ2lBQVRnMERJQVlnQ0NnQ0FFWUVRQ0FJSUFVMkFnQUxJQWhCQkdvaENDQUtRUUZxSVFvTUFBQUxBQXNMQ3lBRlFSQjBRUkIxUVFkc0lnVkJBblFnQkdwQjlQL1BBR29pQmlBR0tBSUFRUUZxTmdJQUlBVkJBblFnQkdwQitQL1BBR29pQmlBSklBWW9BZ0JxTmdJQUlBVkJBblFnQkdwQi9QL1BBR29pQlNBTElBVW9BZ0JxTmdJQUN3VWdCMEVBT3dFQUN5QU5RUUpxSVEwZ0NVRUJhaUVKSUFkQkFtb2hCd3dCQ3dzZ0FTQU5ha0VFYWlFTklBdEJBV29oQ3lBQUlRVWdCMEVFYWlFSERBRUxDMEVBUVFOQnFLVUJJQThRUFVGL0RBRUxJQVJCREdvaEIwRUJJUUJCQVNFREEwQWdBeUFGVEFSQUlBTWdBaWdDQUNJR1JnUkFJQUJCQVdvaEFRVWdBQ0VCSUFaQkFuUWdCR3BCaklESUFHb29BZ0FoQUFzZ0FpQUFOZ0lBSUFFaEFDQURRUUZxSVFNZ0FrRUVhaUVDREFFTEN5QUVJQUJCZjJvaUFEWUNDQ0FBQkg4Z0IwRUFJQUJCQW5RUVJSb2dCRUdRZ0NocVFRQWdBRUVFZEJCRkdrRUFJUUVEUUNBQklBQklCRUFnQkVHTWdBaHFJQUZCQW5RaUFrRUNkR29nRERZQ0FDQUVRWXlBQ0dvZ0FrRUJja0VDZEdwQkFEWUNBQ0FFUVl5QUNHb2dBa0VDY2tFQ2RHb2dEallDQUNBRVFZeUFDR29nQWtFRGNrRUNkR3BCQURZQ0FDQUJRUUZxSVFFTUFRc0xRUUFoQVFOQUlBRWdCVWdFUUNBRVFReHFJQVJCa0lESUFHb2dBVUVDZEdvb0FnQkJmMm9pQWtFQ2RHb2lBeUFFUVpDQTBBQnFJQUZCQjJ3aUFFRUNkR29vQWdBZ0F5Z0NBR28yQWdBZ0JFR1FnQ2hxSUFKQkFYUWlBMEVEZEdvaUJ5QUhLd01BSUFCQkFuUWdCR3BCbElEUUFHb29BZ0Mzb0RrREFDQUVRWkNBS0dvZ0EwRUJja0VEZEdvaUF5QURLd01BSUFCQkFuUWdCR3BCbUlEUUFHb29BZ0Mzb0RrREFDQUVRWXlBQ0dvZ0FrRUNkQ0lDUVFKMGFpSURLQUlBSUFCQkFuUWdCR3BCbklEUUFHb29BZ0FpQjBvRVFDQURJQWMyQWdBTElBUkJqSUFJYWlBQ1FRRnlRUUowYWlJREtBSUFJQUJCQW5RZ0JHcEJvSURRQUdvb0FnQWlCMGdFUUNBRElBYzJBZ0FMSUFSQmpJQUlhaUFDUVFKeVFRSjBhaUlES0FJQUlBQkJBblFnQkdwQnBJRFFBR29vQWdBaUIwb0VRQ0FESUFjMkFnQUxJQVJCaklBSWFpQUNRUU55UVFKMGFpSUNLQUlBSUFCQkFuUWdCR3BCcUlEUUFHb29BZ0FpQUVnRVFDQUNJQUEyQWdBTElBRkJBV29oQVF3QkN3c2dCQ2dDQ0NFQlFRQWhBQU4vSUFBZ0FVZ0VmeUFFUVpDQUtHb2dBRUVCZENJQ1FRTjBhaUlESUFNckF3QWdCRUVNYWlBQVFRSjBhaWdDQUxjaUZhTTVBd0FnQkVHUWdDaHFJQUpCQVhKQkEzUnFJZ0lnQWlzREFDQVZvemtEQUNBQVFRRnFJUUFNQVFWQkFBc0xCVUVBQ3dzaEZDQVBKQVlnRkF2YUNBRVdmeU1HSVJnakJrSGdBV29rQmlBQUtBTFFBaUVhSUJnaUFDRUZJQUVvQWxRaEFRTkFJQUpCUUdzdUFRQWdBU2dDZ0FGc0lnZ2dBaTRCWUNBQktBTEFBV3dpQ1d0QnR6aHNJZ3dnQWk0QklDQUJRVUJyS0FJQWJDSUhJQWhyUVpJVWJDSVNJQUVvQWdBZ0FpNEJBRUVOZEd4QmdBaHlJZ29nQ0VHVmluOXNhbXBxSVEwZ0FpNEJFQ0FCS0FJZ2JDSU9JQUl1QVRBZ0FTZ0NZR3dpQzJwQjd6dHNJaE1nRGlBTGEwSHpDbXdpRkdvZ0N5QUNMZ0ZRSUFFb0FxQUJiQ0lMYWtIaHAzOXNJaFZxSVE4Z0JTQUtJQWNnQ1dvaUVVSEcwUUJzYWlJV0lBd2dDVUdEZTJ4cWFpSUpJQXNnRG1wQm95ZHNJZzRnRXlBVWEyb2lER3BCQzNVMkFnQWdCU0FKSUF4clFRdDFOZ0xBQVNBRklBMGdEMnBCQzNVMkFpQWdCU0FOSUE5clFRdDFOZ0tnQVNBRlFVQnJJQllnRWlBSFFmSGhmbXhxYWlJSklCVWdEaUFMUWQ3M0FHeHFhaUlIYWtFTGRUWUNBQ0FGSUFrZ0IydEJDM1UyQW9BQklBVWdDaUFJSUJGclFjSGFBR3hxUVF0MU5nSmdJQUpCQW1vaEFpQUJRUVJxSVFFZ0JVRUVhaUVGSUFaQkFXb2lCa0VJUncwQUN5QWFRWUI5YWlFQ1FRQWhBUU5BSUFBb0FoeEJEWFFpQ1NBQUtBSUVJZ1VnQUNnQ0ZDSUdhaUlIUWRMTUFHd2lFQ0FGSUFBb0Fnd2lDR3BCdDlVQWJDSU1JQVZCOExkL2JHcHFhaUVOSUFVZ0NHc2lFMEh5SFd3Z0NXc2lGQ0FIUVpRd2JDSVNJQVZCaTd4L2JHcHFJUTRnQkNBQlFRSjBJQU5xS0FJQWFpSUZJQUlnQUNnQ0FFRU5kRUdBZ0lqQUFHb2lCeUFBS0FJUUlncEJ4dEVBYkdvaUZTQUFLQUlJSWdzZ0FDZ0NHQ0lQYWtIaXhnQnNJaEVnQzBHOUVXeHFJaFpxSWhjZ0RXcEJFblpCL3dkeGFpd0FBRG9BQUNBRklBSWdGeUFOYTBFU2RrSC9CM0ZxTEFBQU9nQU5JQVVnQWlBSElBcEJraFJzYWlJTklCRWdEMEg4a1g5c2FpSVJhaUlYSUFZZ0NHcEI3M1ZzSUFsckloa2dEQ0FJUWU1a2JHcHFJZ3hxUVJKMlFmOEhjV29zQUFBNkFBRWdCU0FDSUJjZ0RHdEJFblpCL3dkeGFpd0FBRG9BRENBRklBSWdCeUFLUWNsSGJHb2lEQ0FMUWFNbmJDQVBRZUduZjJ4cUlndHFJZzhnR1NBUUlBWkJpZWgrYkdwcUloQnFRUkoyUWY4SGNXb3NBQUE2QUFJZ0JTQUNJQThnRUd0QkVuWkIvd2R4YWl3QUFEb0FDeUFGSUFJZ0J5QUtRYjZsZjJ4cUlnY2dDU0FUSUFaclFRMTBhaUlLYWtFU2RrSC9CM0ZxTEFBQU9nQURJQVVnQWlBSElBcHJRUkoyUWY4SGNXb3NBQUE2QUFvZ0JTQUNJQXdnQzJzaUJ5QVNJQVlnQ0d0QitOa0FiQ0lLSUFrZ0JrSG1rMzlzYW1wcUlnWnFRUkoyUWY4SGNXb3NBQUE2QUFRZ0JTQUNJQWNnQm10QkVuWkIvd2R4YWl3QUFEb0FDU0FGSUFJZ0RTQVJheUlHSUJRZ0NpQUlRWmtyYkdwcUlnaHFRUkoyUWY4SGNXb3NBQUE2QUFVZ0JTQUNJQVlnQ0d0QkVuWkIvd2R4YWl3QUFEb0FDQ0FGSUFJZ0ZTQVdheUlHSUE1cVFSSjJRZjhIY1dvc0FBQTZBQVlnQlNBQ0lBWWdEbXRCRW5aQi93ZHhhaXdBQURvQUJ5QUFRU0JxSVFBZ0FVRUJhaUlCUVFkSERRQUxJQmdrQmd1UkJ3RVZmeU1HSVJRakJrSEFBV29rQmlBQUtBTFFBaUVaSUJRaUFDRUZJQUVvQWxRaEFRTkFJQVVnQVNnQ0FDQUNMZ0VBUVExMGJFR0FDSElpQ0NBQktBS0FBU0FDUVVCckxnRUFRYUV0Ykd3aURHb2lEU0FCUVVCcktBSUFJQUl1QVNCQnNjNEFiR3dpRVdvaUNpQUNMZ0VRSUFFb0FpQnNJZ1lnQWk0QlVDQUJLQUtnQVd3aUMycEJ0aGRzSWc0Z0JpQUNMZ0V3SUFFb0FtQnNJZ2RxUVExMGFpSVNha0VMZFRZQ0FDQUZJQW9nRW10QkMzVTJBcUFCSUFVZ0NDQU1RWDVzYWtFTGRTSUlJQVlnQjJzZ0MydEJBblFpQm1vMkFpQWdCU0FJSUFack5nS0FBU0FGUVVCcklBMGdFV3NpQmlBT0lBc2dCMnRCRFhScUlndHFRUXQxTmdJQUlBVWdCaUFMYTBFTGRUWUNZQ0FDUVFKcUlRSWdBVUVFYWlFQklBVkJCR29oQlNBSlFRRnFJZ2xCQ0VjTkFBc2dHVUdBZldvaEFrRUFJUUVEUUNBQUtBSUFRUTEwUVlDQWlNQUFhaUlHSUFBb0FoQkJzYzRBYkNJT2FpRVFJQUFvQWdnaUNFRU5kQ0FBS0FJWVFRMTBJZ3hySWhJZ0Jtb2hEU0FFSUFGQkFuUWdBMm9vQWdCcUlnVWdEQ0FJUWJiWEFHeHFJaFVnRUdvaUR5QUFLQUljSWdrZ0FDZ0NCQ0lMSUFBb0FoUWlCMm9pQ21wQmpUZHNJaEVnQ2tIYkVHeHFJaFlnQUNnQ0RDSUtRYy9UQUd3aUZ5QUxRZmNSYkdwcUloTnFRUkoyUWY4SGNTQUNhaXdBQURvQUFDQUZJQThnRTJ0QkVuWkIvd2R4SUFKcUxBQUFPZ0FMSUFVZ0RTQUxJQWxySWc4Z0NpQUhheUlUYWtIUkltd2lHQ0FQUWY0d2JHb2lEMnBCRW5aQi93ZHhJQUpxTEFBQU9nQUJJQVVnRFNBUGEwRVNka0gvQjNFZ0Ftb3NBQUE2QUFvZ0JTQUlRYllYYkNBTWF5SUlJQVlnRG1zaURHb2lEU0FXSUFjZ0NXcEJpNzEvYkNJT0lBcEJyMTFzSWdvZ0IwR3dvWDlzYW1wcUlnZHFRUkoyUWY4SGNTQUNhaXdBQURvQUFpQUZJQTBnQjJ0QkVuWkIvd2R4SUFKcUxBQUFPZ0FKSUFVZ0RDQUlheUlISUE0Z0VTQUpRY2JsQUd3Z0YydHFhaUlJYWtFU2RrSC9CM0VnQW1vc0FBQTZBQU1nQlNBSElBaHJRUkoyUWY4SGNTQUNhaXdBQURvQUNDQUZJQVlnRW1zaUJpQVlJQk5CMzRsL2JHb2lCMnBCRW5aQi93ZHhJQUpxTEFBQU9nQUVJQVVnQmlBSGEwRVNka0gvQjNFZ0Ftb3NBQUE2QUFjZ0JTQVFJQlZySWdZZ0VTQUtJQXRCM0ZSc2FpQUpRWXlCZjJ4cWFpSUpha0VTZGtIL0IzRWdBbW9zQUFBNkFBVWdCU0FHSUFsclFSSjJRZjhIY1NBQ2Fpd0FBRG9BQmlBQVFTQnFJUUFnQVVFQmFpSUJRUVpIRFFBTElCUWtCZ3VjQmdFU2Z5TUdJUlFqQmtHZ0FXb2tCaUFBS0FMUUFpRVdJQlFpQUNFRklBRW9BbFFoQVFOQUlBVWdBaTRCSUNBQlFVQnJLQUlBYkNJSklBSkJRR3N1QVFBZ0FTZ0NnQUZzSWdacVFjd3liQ0lLSUFFb0FnQWdBaTRCQUVFTmRHeEJnQWh5SWc0Z0NTQUdheUlKUWRBV2JHb2lCbW9pQ3lBQ0xnRVFJQUVvQWlCc0lnd2dBaTRCTUNBQktBSmdiQ0lQYWtHYU5Xd2lEU0FNUWZFZ2JHb2lER3BCQzNVMkFnQWdCU0FMSUF4clFRdDFOZ0tBQVNBRklBWWdDbXNpQmlBTklBOUIzUFIrYkdvaUNtcEJDM1UyQWlBZ0JTQUdJQXByUVF0MU5nSmdJQVZCUUdzZ0RpQUpRY0NsZjJ4cVFRdDFOZ0lBSUFKQkFtb2hBaUFCUVFScUlRRWdCVUVFYWlFRklBZEJBV29pQjBFSVJ3MEFDeUFXUVlCOWFpRUNRUUFoQVFOQUlBQW9BZ3dpQnlBQUtBSWNJZ1pxSVFnZ0JDQUJRUUowSUFOcUtBSUFhaUlGSUFBb0FoUkJEWFFpQ1NBSElBWnJJZ1pCNHhOc0lndHFJZ3dnQ0VIdlBHd2lEeUFBS0FJRUlnZEJzOWtBYkdwcUlnMGdBQ2dDQUVFTmRFR0FnSWpBQUdvaUNpQUFLQUlRSWc1Qm5ja0FiR29pRlNBQUtBSUlJaEFnQUNnQ0dDSVJha0dhTld3aUVpQVFRZkVnYkdvaUVHb2lFMnBCRW5aQi93ZHhJQUpxTEFBQU9nQUFJQVVnRXlBTmEwRVNka0gvQjNFZ0Ftb3NBQUE2QUFrZ0JTQUhRZFBRQUd3Z0NFSFBKV3dpQ0dzZ0NTQUxheUFHUVF4MGF5SUxheUlOSUFvZ0RrR0VaR3hxSWhNZ0VpQVJRZHowZm14cUloRnFJaEpxUVJKMlFmOEhjU0FDYWl3QUFEb0FBU0FGSUJJZ0RXdEJFblpCL3dkeElBSnFMQUFBT2dBSUlBVWdCeUFHYTBFTmRDQUpheUlKSUFvZ0RrRytwWDlzYWlJR2FrRVNka0gvQjNFZ0Ftb3NBQUE2QUFJZ0JTQUdJQWxyUVJKMlFmOEhjU0FDYWl3QUFEb0FCeUFGSUJNZ0VXc2lDU0FMSUFkQmpDbHNJQWhyYWlJSWFrRVNka0gvQjNFZ0Ftb3NBQUE2QUFNZ0JTQUpJQWhyUVJKMlFmOEhjU0FDYWl3QUFEb0FCaUFGSUF3Z0IwR1VEbXdnRDJ0cUlnY2dGU0FRYXlJSWFrRVNka0gvQjNFZ0Ftb3NBQUE2QUFRZ0JTQUlJQWRyUVJKMlFmOEhjU0FDYWl3QUFEb0FCU0FBUVNCcUlRQWdBVUVCYWlJQlFRVkhEUUFMSUJRa0JndkJEQUVRZnlNR0lRNGpCa0dBQVdva0JpQUFLQUxRQWlFVUlBNGlBQ0FDTGdFQUlBRW9BbFFpQVNnQ0FHd2lCU0FDTGdFZ0lBRkJRR3NvQWdCc0lnZHFRUUowSWdnZ0FpNEJFQ0FCS0FJZ2JDSUdJQUl1QVRBZ0FTZ0NZR3dpQ21wQjBTSnNRWUFJYWlJSklBWkIvakJzYWtFTGRTSUdhallDQUNBQUlBZ2dCbXMyQW1BZ0FDQUZJQWRyUVFKMElnVWdDU0FLUWQrSmYyeHFRUXQxSWdkcU5nSWdJQUJCUUdzZ0JTQUhhellDQUNBQUlBSXVBUUlnQVNnQ0JHd2lCU0FDTGdFaUlBRW9Ba1JzSWdkcVFRSjBJZ2dnQWk0QkVpQUJLQUlrYkNJR0lBSXVBVElnQVNnQ1pHd2lDbXBCMFNKc1FZQUlhaUlKSUFaQi9qQnNha0VMZFNJR2FqWUNCQ0FBSUFnZ0JtczJBbVFnQUNBRklBZHJRUUowSWdVZ0NTQUtRZCtKZjJ4cVFRdDFJZ2RxTmdJa0lBQWdCU0FIYXpZQ1JDQUFJQUl1QVFRZ0FTZ0NDR3dpQlNBQ0xnRWtJQUVvQWtoc0lnZHFRUUowSWdnZ0FpNEJGQ0FCS0FJb2JDSUdJQUl1QVRRZ0FTZ0NhR3dpQ21wQjBTSnNRWUFJYWlJSklBWkIvakJzYWtFTGRTSUdhallDQ0NBQUlBZ2dCbXMyQW1nZ0FDQUZJQWRyUVFKMElnVWdDU0FLUWQrSmYyeHFRUXQxSWdkcU5nSW9JQUFnQlNBSGF6WUNTQ0FBSUFJdUFRWWdBU2dDREd3aUJTQUNMZ0VtSUFFb0FreHNJZ2RxUVFKMElnZ2dBaTRCRmlBQktBSXNiQ0lHSUFJdUFUWWdBU2dDYkd3aUNtcEIwU0pzUVlBSWFpSUpJQVpCL2pCc2FrRUxkU0lHYWpZQ0RDQUFJQWdnQm1zMkFtd2dBQ0FGSUFkclFRSjBJZ1VnQ1NBS1FkK0pmMnhxUVF0MUlnZHFOZ0lzSUFBZ0JTQUhhellDVENBQUlBSXVBUWdnQVNnQ0VHd2lCU0FDTGdFb0lBRW9BbEJzSWdkcVFRSjBJZ2dnQWk0QkdDQUJLQUl3YkNJR0lBSXVBVGdnQVNnQ2NHd2lDbXBCMFNKc1FZQUlhaUlKSUFaQi9qQnNha0VMZFNJR2FqWUNFQ0FBSUFnZ0JtczJBbkFnQUNBRklBZHJRUUowSWdVZ0NTQUtRZCtKZjJ4cVFRdDFJZ2RxTmdJd0lBQWdCU0FIYXpZQ1VDQUFJQUl1QVFvZ0FTZ0NGR3dpQlNBQ0xnRXFJQUVvQWxSc0lnZHFRUUowSWdnZ0FpNEJHaUFCS0FJMGJDSUdJQUl1QVRvZ0FTZ0NkR3dpQ21wQjBTSnNRWUFJYWlJSklBWkIvakJzYWtFTGRTSUdhallDRkNBQUlBZ2dCbXMyQW5RZ0FDQUZJQWRyUVFKMElnVWdDU0FLUWQrSmYyeHFRUXQxSWdkcU5nSTBJQUFnQlNBSGF6WUNWQ0FBSUFJdUFRd2dBU2dDR0d3aUJTQUNMZ0VzSUFFb0FsaHNJZ2RxUVFKMElnZ2dBaTRCSENBQktBSTRiQ0lHSUFJdUFUd2dBU2dDZUd3aUNtcEIwU0pzUVlBSWFpSUpJQVpCL2pCc2FrRUxkU0lHYWpZQ0dDQUFJQWdnQm1zMkFuZ2dBQ0FGSUFkclFRSjBJZ1VnQ1NBS1FkK0pmMnhxUVF0MUlnZHFOZ0k0SUFBZ0JTQUhhellDV0NBQUlBSXVBUTRnQVNnQ0hHd2lCU0FDTGdFdUlBRW9BbHhzSWdkcVFRSjBJZ2dnQWk0QkhpQUJLQUk4YkNJR0lBSXVBVDRnQVNnQ2ZHd2lBV3BCMFNKc1FZQUlhaUlDSUFaQi9qQnNha0VMZFNJR2FqWUNIQ0FBSUFnZ0JtczJBbndnQUNBRklBZHJRUUowSWdVZ0FpQUJRZCtKZjJ4cVFRdDFJZ0ZxTmdJOElBQWdCU0FCYXpZQ1hDQVVRWUI5YWlFQ1FRQWhBUU5BSUFBb0Fod2lDeUFBS0FJTUlnVnFJZ1lnQUNnQ0ZDSUhJQUFvQWdRaUNHb2lDbXBCb2NzQWJDSUpJQVpCdTRKL2JHb2lEeUFJSUF0cVFiTkdiQ0lNSUF0QmpoTnNhbW9oQmlBSklBcEJoR2RzYWlJTElBd2dDRUdMNEFCc2Ftb2hDQ0FMSUFVZ0IycEIvZHQrYkNJS0lBZEJzNE1CYkdwcUlRY2dCQ0FCUVFKMElBTnFLQUlBYWlJTElBSWdBQ2dDQUVHUWdBRnFJZ2tnQUNnQ0VDSU1ha0VOZENJUUlBQW9BZ2dpRFNBQUtBSVlJaEZxUWRFaWJDSVNJQTFCL2pCc2FpSU5haUlUSUFocVFSSjJRZjhIY1dvc0FBQTZBQUFnQ3lBQ0lCTWdDR3RCRW5aQi93ZHhhaXdBQURvQUJ5QUxJQUlnQ1NBTWEwRU5kQ0lJSUJJZ0VVSGZpWDlzYWlJSmFpSU1JQThnQ2lBRlFkVEVBV3hxYWlJRmFrRVNka0gvQjNGcUxBQUFPZ0FCSUFzZ0FpQU1JQVZyUVJKMlFmOEhjV29zQUFBNkFBWWdDeUFDSUFnZ0NXc2lCU0FIYWtFU2RrSC9CM0ZxTEFBQU9nQUNJQXNnQWlBRklBZHJRUkoyUWY4SGNXb3NBQUE2QUFVZ0N5QUNJQkFnRFdzaUJTQUdha0VTZGtIL0IzRnFMQUFBT2dBRElBc2dBaUFGSUFaclFSSjJRZjhIY1dvc0FBQTZBQVFnQUVFZ2FpRUFJQUZCQVdvaUFVRUVSdzBBQ3lBT0pBWUwrUW9CQzM4akJpRUZJd1pCMEFCcUpBWWdBQ2dDMEFJaEN5QUZJQUVvQWxRaUJpZ0NBQ0FDTGdFQVFRMTBiRUdBQ0hJaUJ5QUdRVUJyS0FJQUlBSXVBU0JCb1Mxc2JDSUlhaUlCSUFZb0FpQWdBaTRCRUVHeHpnQnNiQ0lBYWtFTGRUWUNBQ0FGSUFFZ0FHdEJDM1UyQWpBZ0JTQUhJQWhCZm14cVFRdDFOZ0lZSUFVZ0JpZ0NCQ0FDTGdFQ1FRMTBiRUdBQ0hJaUJ5QUdLQUpFSUFJdUFTSkJvUzFzYkNJSWFpSUJJQVlvQWlRZ0FpNEJFa0d4emdCc2JDSUFha0VMZFRZQ0JDQUZJQUVnQUd0QkMzVTJBalFnQlNBSElBaEJmbXhxUVF0MU5nSWNJQVVnQmlnQ0NDQUNMZ0VFUVExMGJFR0FDSElpQnlBR0tBSklJQUl1QVNSQm9TMXNiQ0lJYWlJQklBWW9BaWdnQWk0QkZFR3h6Z0JzYkNJQWFrRUxkVFlDQ0NBRklBRWdBR3RCQzNVMkFqZ2dCU0FISUFoQmZteHFRUXQxTmdJZ0lBVWdCaWdDRENBQ0xnRUdRUTEwYkVHQUNISWlCeUFHS0FKTUlBSXVBU1pCb1Mxc2JDSUlhaUlCSUFZb0Fpd2dBaTRCRmtHeHpnQnNiQ0lBYWtFTGRUWUNEQ0FGSUFFZ0FHdEJDM1UyQWp3Z0JTQUhJQWhCZm14cVFRdDFOZ0lrSUFVZ0JpZ0NFQ0FDTGdFSVFRMTBiRUdBQ0hJaUJ5QUdLQUpRSUFJdUFTaEJvUzFzYkNJSWFpSUJJQVlvQWpBZ0FpNEJHRUd4emdCc2JDSUFha0VMZFRZQ0VDQUZRVUJySUFFZ0FHdEJDM1UyQWdBZ0JTQUhJQWhCZm14cVFRdDFOZ0lvSUFVZ0JpZ0NGQ0FDTGdFS1FRMTBiRUdBQ0hJaUJ5QUdLQUpVSUFJdUFTcEJvUzFzYkNJSWFpSUJJQVlvQWpRZ0FpNEJHa0d4emdCc2JDSUFha0VMZFRZQ0ZDQUZJQUVnQUd0QkMzVTJBa1FnQlNBSElBaEJmbXhxUVF0MUlnODJBaXdnQkNBREtBSUFhaUlPSUF0QmdIMXFJZ2tnQlNnQ0FFRU5kRUdBZ0lqQUFHb2lDeUFGS0FJUVFhRXRiQ0lNYWlJSElBVW9BZ2hCc2M0QWJDSUlhaUlCSUFVb0FnUWlDaUFGS0FJVUlnMXFRYllYYkNJQ0lBb2dCU2dDRENJR2FrRU5kR29pQUdwQkVuWkIvd2R4YWl3QUFEb0FBQ0FPSUFrZ0FTQUFhMEVTZGtIL0IzRnFMQUFBT2dBRklBNGdDU0FMSUF4cklBeHJJZ0VnQ2lBR2F5QU5hMEVOZENJQWFrRVNka0gvQjNGcUxBQUFPZ0FCSUE0Z0NTQUJJQUJyUVJKMlFmOEhjV29zQUFBNkFBUWdEaUFKSUFjZ0NHc2lBU0FDSUEwZ0JtdEJEWFJxSWdCcVFSSjJRZjhIY1dvc0FBQTZBQUlnRGlBSklBRWdBR3RCRW5aQi93ZHhhaXdBQURvQUF5QUVJQU1vQWdScUlnd2dDU0FGS0FJWVFRMTBRWUNBaU1BQWFpSUxJQVVvQWloQm9TMXNJZ3BxSWdjZ0JTZ0NJRUd4emdCc0lnaHFJZ0VnRHlBRktBSWNJZzFxUWJZWGJDSUNJQTBnQlNnQ0pDSUdha0VOZEdvaUFHcEJFblpCL3dkeGFpd0FBRG9BQUNBTUlBa2dBU0FBYTBFU2RrSC9CM0ZxTEFBQU9nQUZJQXdnQ1NBTElBcHJJQXBySWdFZ0RTQUdheUFQYTBFTmRDSUFha0VTZGtIL0IzRnFMQUFBT2dBQklBd2dDU0FCSUFCclFSSjJRZjhIY1dvc0FBQTZBQVFnRENBSklBY2dDR3NpQVNBQ0lBOGdCbXRCRFhScUlnQnFRUkoyUWY4SGNXb3NBQUE2QUFJZ0RDQUpJQUVnQUd0QkVuWkIvd2R4YWl3QUFEb0FBeUFFSUFNb0FnaHFJZ29nQ1NBRktBSXdRUTEwUVlDQWlNQUFhaUlJSUFWQlFHc29BZ0JCb1Mxc0lnMXFJZ1FnQlNnQ09FR3h6Z0JzSWdOcUlnRWdCU2dDTkNJR0lBVW9Ba1FpQzJwQnRoZHNJZ0lnQmlBRktBSThJZ2RxUVExMGFpSUFha0VTZGtIL0IzRnFMQUFBT2dBQUlBb2dDU0FCSUFCclFSSjJRZjhIY1dvc0FBQTZBQVVnQ2lBSklBZ2dEV3NnRFdzaUFTQUdJQWRySUF0clFRMTBJZ0JxUVJKMlFmOEhjV29zQUFBNkFBRWdDaUFKSUFFZ0FHdEJFblpCL3dkeGFpd0FBRG9BQkNBS0lBa2dCQ0FEYXlJQklBSWdDeUFIYTBFTmRHb2lBR3BCRW5aQi93ZHhhaXdBQURvQUFpQUtJQWtnQVNBQWEwRVNka0gvQjNGcUxBQUFPZ0FESUFVa0JndUxCQUVLZnlNR0lRVWpCa0VnYWlRR0lBQW9BdEFDSVFjZ0JTQUNMZ0VBSUFFb0FsUWlCaWdDQUd3aUFTQUNMZ0VRSUFZb0FpQnNJZ0JxSWdnMkFnQWdCU0FCSUFCck5nSVFJQVVnQWk0QkFpQUdLQUlFYkNJQklBSXVBUklnQmlnQ0pHd2lBR29pQ2pZQ0JDQUZJQUVnQUdzaUN6WUNGQ0FGSUFJdUFRUWdCaWdDQ0d3aUFTQUNMZ0VVSUFZb0FpaHNJZ0JxSWd3MkFnZ2dCU0FCSUFCcklnMDJBaGdnQlNBQ0xnRUdJQVlvQWd4c0lnRWdBaTRCRmlBR0tBSXNiQ0lBYWlJT05nSU1JQVVnQVNBQWF5SUdOZ0ljSUFRZ0F5Z0NBR29pQ1NBSFFZQjlhaUlISUF3Z0NFR0VJR29pQ0dwQkRYUWlBU0FLSUE1cVFkRWliQ0lDSUFwQi9qQnNhaUlBYWtFUWRrSC9CM0ZxTEFBQU9nQUFJQWtnQnlBQklBQnJRUkIyUWY4SGNXb3NBQUE2QUFNZ0NTQUhJQWdnREd0QkRYUWlBU0FDSUE1QjM0bC9iR29pQUdwQkVIWkIvd2R4YWl3QUFEb0FBU0FKSUFFZ0FHdEJFSFpCL3dkeElBZHFMQUFBT2dBQ0lBUWdBeWdDQkdvaUJDQUZLQUlRUVlRZ2FpSURJQTFxUVExMElnRWdCaUFMYWtIUkltd2lBaUFMUWY0d2JHb2lBR3BCRUhaQi93ZHhJQWRxTEFBQU9nQUFJQVFnQVNBQWEwRVFka0gvQjNFZ0Iyb3NBQUE2QUFNZ0JDQURJQTFyUVExMElnRWdBaUFHUWQrSmYyeHFJZ0JxUVJCMlFmOEhjU0FIYWl3QUFEb0FBU0FFSUFFZ0FHdEJFSFpCL3dkeElBZHFMQUFBT2dBQ0lBVWtCZ3RoQUNBRUlBTW9BZ0JxSWdNZ0FDZ0MwQUpCZ0gxcUlnQWdBaTRCQUNBQktBSlVJZ0VvQWdCc1FZUWdhaUlFSUFJdUFRSWdBU2dDQkd3aUFXcEJBM1pCL3dkeGFpd0FBRG9BQUNBRElBUWdBV3RCQTNaQi93ZHhJQUJxTEFBQU9nQUJDOWNKQVI1L0l3WWhGaU1HUVlBRWFpUUdJQUFvQXRBQ0lTSWdGaUlBSVFVZ0FTZ0NWQ0VCQTBBZ0FpNEJJQ0FCUVVCcktBSUFiQ0lNSUFJdUFXQWdBU2dDd0FGc0loRnJJZzlCMUJGc0lRb2dBaTRCRUNBQktBSWdiQ0lHSUFJdUFWQWdBU2dDb0FGc0lnZHFJUkFnQmlBQ0xnRndJQUVvQXVBQmJDSUlha0g4eFFCc0loY2dFRUhwendCc0loUWdCaUFDTGdFd0lBRW9BbUJzSWdscVFjN1dBR3dpRFNBR1FkYnRmbXhxYW1vaERpQUdJQWhyUWJZNWJDSVpJQkJCMVNwc0loZ2dCaUFKYTBHakdtd2lFaUFHUWNLS2YyeHFhbW9oRUNBSUlBbHFJZ1pCcTFWc0lob2dCeUFKYWtId0NHd2lHeUFKUWMwRWJDQU5hbXBxSVEwZ0JrR1hzSDlzSWh3Z0J5QUphMEdKMmdCc0loMGdDVUdhL2dCc0lCSnFhbW9oQ1NBRklBRW9BZ0FnQWk0QkFFRU5kR3hCZ0FoeUlnWWdBa0ZBYXk0QkFDQUJLQUtBQVd3aUVrSFAwd0JzSWg1cUloOGdEMEhqMkFCc0lnOGdFVUdEcEFGc2FpSWdhaUlWSUE1cVFRdDFOZ0lBSUFVZ0ZTQU9hMEVMZFRZQzRBTWdCU0FOSUFZZ0VrSFJJbXdpRG1vaUVpQUtJQXhCelRsc2FpSVZhaUloYWtFTGRUWUNJQ0FGSUNFZ0RXdEJDM1UyQXNBRElBVkJRR3NnQnlBSWFrR3lxWDlzSWcwZ0d5QUhRZnEzZjJ4cUlCUnFhaUlVSUFZZ0Rtc2lEaUFQSUF4QndsbHNhaUlNYWlJUGFrRUxkVFlDQUNBRklBOGdGR3RCQzNVMkFxQURJQVVnR2lBSVFaakVBR3hxSUJkcUlBMXFJZzBnQmlBZWF5SUdJQW9nRVVHd1gyeHFJaEZxSWdwcVFRdDFOZ0pnSUFVZ0NpQU5hMEVMZFRZQ2dBTWdCU0FjSUFoQmhja0JiR29nR1dvZ0NDQUhhMEdqR213aUNHb2lDaUFHSUJGcklnWnFRUXQxTmdLQUFTQUZJQVlnQ210QkMzVTJBdUFDSUFVZ0hTQUhRZnBPYkdvZ0dHb2dDR29pQmlBT0lBeHJJZ2RxUVF0MU5nS2dBU0FGSUFjZ0JtdEJDM1UyQXNBQ0lBVWdDU0FTSUJWcklnWnFRUXQxTmdMQUFTQUZJQVlnQ1d0QkMzVTJBcUFDSUFVZ0VDQWZJQ0JySWdacVFRdDFOZ0xnQVNBRklBWWdFR3RCQzNVMkFvQUNJQUpCQW1vaEFpQUJRUVJxSVFFZ0JVRUVhaUVGSUF0QkFXb2lDMEVJUncwQUN5QWlRWUI5YWlFQ1FRQWhBUU5BSUFBb0Fod2lCU0FBS0FJTUlndHFJZ2dnQUNnQ0ZDSUdJQUFvQWdRaUIyb2lDV3BCb2NzQWJDSU1JQWhCdTRKL2JHb2lFU0FGSUFkcVFiTkdiQ0lLSUFWQmpoTnNhbW9oQ0NBTUlBbEJoR2RzYWlJRklBb2dCMEdMNEFCc2Ftb2hCeUFGSUFZZ0MycEIvZHQrYkNJSklBWkJzNE1CYkdwcUlRWWdCQ0FCUVFKMElBTnFLQUlBYWlJRklBSWdBQ2dDQUVHUWdBRnFJZ3dnQUNnQ0VDSUtha0VOZENJUUlBQW9BZ2dpRGlBQUtBSVlJZzFxUWRFaWJDSVRJQTVCL2pCc2FpSU9haUlQSUFkcVFSSjJRZjhIY1dvc0FBQTZBQUFnQlNBQ0lBOGdCMnRCRW5aQi93ZHhhaXdBQURvQUJ5QUZJQUlnRENBS2EwRU5kQ0lISUJNZ0RVSGZpWDlzYWlJTWFpSUtJQkVnQ1NBTFFkVEVBV3hxYWlJTGFrRVNka0gvQjNGcUxBQUFPZ0FCSUFVZ0FpQUtJQXRyUVJKMlFmOEhjV29zQUFBNkFBWWdCU0FDSUFjZ0RHc2lDeUFHYWtFU2RrSC9CM0ZxTEFBQU9nQUNJQVVnQWlBTElBWnJRUkoyUWY4SGNXb3NBQUE2QUFVZ0JTQUNJQkFnRG1zaUN5QUlha0VTZGtIL0IzRnFMQUFBT2dBRElBVWdBaUFMSUFoclFSSjJRZjhIY1dvc0FBQTZBQVFnQUVFZ2FpRUFJQUZCQVdvaUFVRVFSdzBBQ3lBV0pBWUxuUWdCR1g4akJpRVhJd1pCa0FOcUpBWWdBQ2dDMEFJaEhTQVhJZ0FoQlNBQktBSlVJUUVEUUNBQ0xnRndJQUVvQXVBQmJDSVRRUTEwSWdzZ0FpNEJFQ0FCS0FJZ2JDSUhJQUl1QVZBZ0FTZ0NvQUZzSWdacUlncEIwc3dBYkNJUElBY2dBaTRCTUNBQktBSmdiQ0lJYWtHMzFRQnNJaEFnQjBId3QzOXNhbXBxSVFrZ0J5QUlheUlZUWZJZGJDQUxheUlaSUFwQmxEQnNJaFFnQjBHTHZIOXNhbW9oRVNBRklBRW9BZ0FnQWk0QkFFRU5kR3hCZ0FoeUlnY2dBa0ZBYXk0QkFDQUJLQUtBQVd3aUNrSEcwUUJzYWlJYUlBSXVBU0FnQVVGQWF5Z0NBR3dpRENBQ0xnRmdJQUVvQXNBQmJDSU9ha0hpeGdCc0loVWdERUc5RVd4cUlodHFJaFlnQ1dwQkMzVTJBZ0FnQlNBV0lBbHJRUXQxTmdMc0FpQUZJQVlnQ0dwQjczVnNJQXRySWdrZ0NFSHVaR3dnRUdwcUloQWdCeUFLUVpJVWJHb2lGaUFWSUE1Qi9KRi9iR29pRldvaUhHcEJDM1UyQWh3Z0JTQWNJQkJyUVF0MU5nTFFBaUFGSUFrZ0JrR0o2SDVzSUE5cWFpSUpJQWNnQ2tISlIyeHFJZzhnREVHakoyd2dEa0hocDM5c2FpSU1haUlPYWtFTGRUWUNPQ0FGSUE0Z0NXdEJDM1UyQXJRQ0lBVWdHQ0FHYXlBVGFrRUNkQ0lKSUFjZ0NrRytwWDlzYWtFTGRTSUhhallDVkNBRklBY2dDV3MyQXBnQ0lBVWdCaUFJYTBINDJRQnNJZ2NnQmtIbWszOXNhaUFVYWlBTGFpSUdJQThnREdzaUMycEJDM1UyQW5BZ0JTQUxJQVpyUVF0MU5nTDhBU0FGSUFjZ0NFR1pLMnhxSUJscUlnWWdGaUFWYXlJSWFrRUxkVFlDakFFZ0JTQUlJQVpyUVF0MU5nTGdBU0FGSUJvZ0cyc2lCaUFSYWtFTGRUWUNxQUVnQlNBR0lCRnJRUXQxTmdMRUFTQUNRUUpxSVFJZ0FVRUVhaUVCSUFWQkJHb2hCU0FOUVFGcUlnMUJCMGNOQUFzZ0hVR0FmV29oQWtFQUlRRURRQ0FBS0FJUUlnMGdBQ2dDR0NJR2EwRzNPR3dpRENBQUtBSUlJZ2dnRFd0QmtoUnNJZzRnQUNnQ0FFRU5kRUdBZ0lqQUFHb2lCeUFOUVpXS2YyeHFhbW9oQ3lBQUtBSUVJZ29nQUNnQ0RDSUZha0h2TzJ3aUVpQUtJQVZyUWZNS2JDSVRhaUFGSUFBb0FoUWlDV3BCNGFkL2JDSVBhaUVSSUFRZ0FVRUNkQ0FEYWlnQ0FHb2lCU0FDSUFjZ0JpQUlhaUlRUWNiUkFHeHFJaFFnRENBR1FZTjdiR3BxSWdZZ0NTQUtha0dqSjJ3aUNpQVNJQk5yYWlJTWFrRVNka0gvQjNGcUxBQUFPZ0FBSUFVZ0FpQUdJQXhyUVJKMlFmOEhjV29zQUFBNkFBWWdCU0FDSUFzZ0VXcEJFblpCL3dkeGFpd0FBRG9BQVNBRklBSWdDeUFSYTBFU2RrSC9CM0ZxTEFBQU9nQUZJQVVnQWlBVUlBNGdDRUh4NFg1c2Ftb2lCaUFQSUFvZ0NVSGU5d0JzYW1vaUNHcEJFblpCL3dkeGFpd0FBRG9BQWlBRklBSWdCaUFJYTBFU2RrSC9CM0ZxTEFBQU9nQUVJQVVnQWlBSElBMGdFR3RCd2RvQWJHcEJFblpCL3dkeGFpd0FBRG9BQXlBQVFSeHFJUUFnQVVFQmFpSUJRUTVIRFFBTElCY2tCZ3ZuQmdFWGZ5TUdJUlFqQmtHZ0Ftb2tCaUFBS0FMUUFpRWJJQlFpQUNFRklBRW9BbFFoQVFOQUlBRW9BZ0FnQWk0QkFFRU5kR3hCZ0FoeUlnZ2dBU2dDZ0FFZ0FrRkFheTRCQUVHeHpnQnNiQ0lTYWlFUUlBZ2dBaTRCSUNBQlFVQnJLQUlBYkNJS1FRMTBJQUVvQXNBQklBSXVBV0JCRFhSc0lndHJJaFpxSVF3Z0JTQVFJQXBCdHRjQWJDQUxhaUlYYWlJVElBSXVBWEFnQVNnQzRBRnNJZ1lnQWk0QkVDQUJLQUlnYkNJTklBSXVBVkFnQVNnQ29BRnNJZ2RxSWc1cVFZMDNiQ0lSSUE1QjJ4QnNhaUlZSUFJdUFUQWdBU2dDWUd3aURrSFAwd0JzSWhrZ0RVSDNFV3hxYWlJUGFrRUxkVFlDQUNBRklCTWdEMnRCQzNVMkFvZ0NJQVVnRGlBSGF5SVRJQTBnQm1zaUQycEIwU0pzSWhvZ0QwSCtNR3hxSWc4Z0RHcEJDM1UyQWhnZ0JTQU1JQTlyUVF0MU5nTHdBU0FGSUFnZ0Vtc2lEQ0FLUWJZWGJDQUxheUlLYWlJTElCZ2dCaUFIYWtHTHZYOXNJaElnRGtHdlhXd2lEaUFIUWJDaGYyeHFhbW9pQjJwQkMzVTJBakFnQlNBTElBZHJRUXQxTmdMWUFTQUZJQXdnQ21zaUJ5QVNJQkVnQmtIRzVRQnNJQmxyYW1vaUNtcEJDM1UyQWtnZ0JTQUhJQXByUVF0MU5nTEFBU0FGSUJvZ0UwSGZpWDlzYWlJSElBZ2dGbXNpQ0dwQkMzVTJBbUFnQlNBSUlBZHJRUXQxTmdLb0FTQUZJQkFnRjJzaUNDQVJJQTRnRFVIY1ZHeHFJQVpCaklGL2JHcHFJZ1pxUVF0MU5nSjRJQVVnQ0NBR2EwRUxkVFlDa0FFZ0FrRUNhaUVDSUFGQkJHb2hBU0FGUVFScUlRVWdDVUVCYWlJSlFRWkhEUUFMSUJ0QmdIMXFJUUpCQUNFQkEwQWdCQ0FCUVFKMElBTnFLQUlBYWlJRklBSWdBQ2dDQUVFTmRFR0FnSWpBQUdvaUJ5QUFLQUlRUWFFdGJDSUphaUlRSUFBb0FnaEJzYzRBYkNJS2FpSUxJQUFvQWdRaUJpQUFLQUlVSWdocVFiWVhiQ0lNSUFZZ0FDZ0NEQ0lOYWtFTmRHb2lFV3BCRW5aQi93ZHhhaXdBQURvQUFDQUZJQUlnQ3lBUmEwRVNka0gvQjNGcUxBQUFPZ0FGSUFVZ0FpQUhJQWxySUFscklna2dCaUFOYXlBSWEwRU5kQ0lHYWtFU2RrSC9CM0ZxTEFBQU9nQUJJQVVnQWlBSklBWnJRUkoyUWY4SGNXb3NBQUE2QUFRZ0JTQUNJQkFnQ21zaUNTQU1JQWdnRFd0QkRYUnFJZ1pxUVJKMlFmOEhjV29zQUFBNkFBSWdCU0FDSUFrZ0JtdEJFblpCL3dkeGFpd0FBRG9BQXlBQVFSaHFJUUFnQVVFQmFpSUJRUXhIRFFBTElCUWtCZ3Y5QlFFVmZ5TUdJUlFqQmtIUUFXb2tCaUFBS0FMUUFpRVpJQlFpQUNFRklBRW9BbFFoQVFOQUlBSXVBVEFnQVNnQ1lHd2lCaUFDTGdGd0lBRW9BdUFCYkNJSWFpRUhJQVVnQVNnQ0FDQUNMZ0VBUVExMGJFR0FDSElpQ1NBQ1FVQnJMZ0VBSUFFb0FvQUJiQ0lMUVozSkFHeHFJZzBnQWk0QklDQUJRVUJyS0FJQWJDSU9JQUl1QVdBZ0FTZ0N3QUZzSWc5cVFabzFiQ0lRSUE1QjhTQnNhaUlPYWlJUklBWWdDR3NpQ0VIakUyd2lFaUFDTGdGUUlBRW9BcUFCYkNJVlFRMTBJaE5xSWhZZ0IwSHZQR3dpRnlBQ0xnRVFJQUVvQWlCc0lnWkJzOWtBYkdwcUloaHFRUXQxTmdJQUlBVWdFU0FZYTBFTGRUWUN0QUVnQlNBSklBdEJoR1JzYWlJUklCQWdEMEhjOUg1c2FpSVBhaUlRSUFaQjA5QUFiQ0FIUWM4bGJDSUhheUFUSUJKcklBaEJESFJySWhKckloTnFRUXQxTmdJVUlBVWdFQ0FUYTBFTGRUWUNvQUVnQlNBSklBdEJ2cVYvYkdwQkMzVWlDU0FHSUJWcklBaHJRUUowSWd0cU5nSW9JQVVnQ1NBTGF6WUNqQUVnQlNBUklBOXJJZ2tnRWlBR1FZd3BiQ0FIYTJvaUIycEJDM1UyQWp3Z0JTQUpJQWRyUVF0MU5nSjRJQVVnRFNBT2F5SUhJQllnQmtHVURtd2dGMnRxSWdacVFRdDFOZ0pRSUFVZ0J5QUdhMEVMZFRZQ1pDQUNRUUpxSVFJZ0FVRUVhaUVCSUFWQkJHb2hCU0FLUVFGcUlncEJCVWNOQUFzZ0dVR0FmV29oQWtFQUlRRURRQ0FFSUFGQkFuUWdBMm9vQWdCcUlnVWdBaUFBS0FJSUlnb2dBQ2dDRUNJR2FrSE1NbXdpQnlBQUtBSUFRUTEwUVlDQWlNQUFhaUlKSUFvZ0Jtc2lDa0hRRm14cUlnWnFJZ3NnQUNnQ0JDSUlJQUFvQWd3aURHcEJtalZzSWcwZ0NFSHhJR3hxSWdocVFSSjJRZjhIY1dvc0FBQTZBQUFnQlNBQ0lBc2dDR3RCRW5aQi93ZHhhaXdBQURvQUJDQUZJQUlnQmlBSGF5SUdJQTBnREVIYzlINXNhaUlIYWtFU2RrSC9CM0ZxTEFBQU9nQUJJQVVnQWlBR0lBZHJRUkoyUWY4SGNXb3NBQUE2QUFNZ0JTQUNJQWtnQ2tIQXBYOXNha0VTZGtIL0IzRnFMQUFBT2dBQ0lBQkJGR29oQUNBQlFRRnFJZ0ZCQ2tjTkFBc2dGQ1FHQytnUEFSQi9Jd1loQ0NNR1FZQUJhaVFHSUFBb0F0QUNJUkFnQ0NFQUlBRW9BbFFoQVVFRUlRWURRQUovQWtBZ0FpNEJFQ0lMSUFJdUFTQWlCWEpCLy84RGNRUi9EQUVGSUFJdUFUQUVmMEVBSVFVTUFnVWdBa0ZBYXk0QkFBUi9RUUFoQlF3REJTQUNMZ0ZRQkg5QkFDRUZEQVFGSUFJdUFXQUVmMEVBSVFVTUJRVWdBaTRCY0FSL1FRQWhCUXdHQlNBQUlBRW9BZ0FnQWk0QkFFRUNkR3dpQlRZQ0FDQUFJQVUyQWhBZ0FDQUZOZ0lnSUFBZ0JUWUNNQ0FBUVVCcklBVTJBZ0FnQUNBRk5nSlFJQUFnQlRZQ1lFRWNDd3NMQ3dzTERBRUxJQUl1QVhBZ0FTZ0M0QUZzSWdjZ0FpNEJNQ0FCS0FKZ2JDSUphaUlOSUFJdUFWQWdBU2dDb0FGc0lnb2dDeUFCS0FJZ2JDSUxhaUlNYWtHaHl3QnNJZzRnRFVHN2duOXNhaUlOSUFjZ0MycEJzMFpzSWc4Z0IwR09FMnhxYWlFSElBNGdERUdFWjJ4cUlnd2dEeUFMUVl2Z0FHeHFhaUVMSUF3Z0NTQUtha0g5MjM1c0lnd2dDa0d6Z3dGc2Ftb2hDaUFBSUFzZ0FTZ0NnQUVnQWtGQWF5NEJBRUVOZEd3aURpQUJLQUlBSUFJdUFRQkJEWFJzUVlBSWNpSVBhaUlSSUFGQlFHc29BZ0FnQlVFUWRFRVFkV3dpQlNBQ0xnRmdJQUVvQXNBQmJDSVNha0hSSW13aUV5QUZRZjR3YkdvaUJXb2lGR3BCQzNVMkFnQWdBQ0FVSUF0clFRdDFOZ0p3SUFBZ0RTQU1JQWxCMU1RQmJHcHFJZ2tnRHlBT2F5SUxJQk1nRWtIZmlYOXNhaUlOYWlJTWFrRUxkVFlDRUNBQUlBd2dDV3RCQzNVMkFtQWdBQ0FLSUFzZ0RXc2lDV3BCQzNVMkFpQWdBQ0FKSUFwclFRdDFOZ0pRSUFBZ0J5QVJJQVZySWdWcVFRdDFOZ0l3SUFVZ0IydEJDM1VoQlVFUUMwRUNkQ0FBYWlBRk5nSUFJQUJCQkdvaEFDQUJRUVJxSVFFZ0FrRUNhaUVDSUFaQmYyb2hCU0FHUVFGTEJFQWdCU0VHREFFTEN5QUVJQU1vQWdCcUlnRWdFRUdBZldvaUFDQUlLQUlBUVpDQUFXb2lBaUFJS0FJSUlnWnFRUTEwSWdVZ0NDZ0NCQ0lISUFnb0Fnd2lDV3BCMFNKc0lnb2dCMEgrTUd4cUlnZHFRUkoyUWY4SGNXb3NBQUE2QUFBZ0FTQUFJQVVnQjJ0QkVuWkIvd2R4YWl3QUFEb0FBeUFCSUFBZ0FpQUdhMEVOZENJQ0lBb2dDVUhmaVg5c2FpSUdha0VTZGtIL0IzRnFMQUFBT2dBQklBRWdBQ0FDSUFaclFSSjJRZjhIY1dvc0FBQTZBQUlnQkNBREtBSUVhaUlCSUFBZ0NDZ0NFRUdRZ0FGcUlnSWdDQ2dDR0NJR2FrRU5kQ0lGSUFnb0FoUWlCeUFJS0FJY0lnbHFRZEVpYkNJS0lBZEIvakJzYWlJSGFrRVNka0gvQjNGcUxBQUFPZ0FBSUFFZ0FDQUZJQWRyUVJKMlFmOEhjV29zQUFBNkFBTWdBU0FBSUFJZ0JtdEJEWFFpQWlBS0lBbEIzNGwvYkdvaUJtcEJFblpCL3dkeGFpd0FBRG9BQVNBQklBQWdBaUFHYTBFU2RrSC9CM0ZxTEFBQU9nQUNJQVFnQXlnQ0NHb2lBU0FBSUFnb0FpQkJrSUFCYWlJQ0lBZ29BaWdpQm1wQkRYUWlCU0FJS0FJa0lnY2dDQ2dDTENJSmFrSFJJbXdpQ2lBSFFmNHdiR29pQjJwQkVuWkIvd2R4YWl3QUFEb0FBQ0FCSUFBZ0JTQUhhMEVTZGtIL0IzRnFMQUFBT2dBRElBRWdBQ0FDSUFaclFRMTBJZ0lnQ2lBSlFkK0pmMnhxSWdacVFSSjJRZjhIY1dvc0FBQTZBQUVnQVNBQUlBSWdCbXRCRW5aQi93ZHhhaXdBQURvQUFpQUVJQU1vQWd4cUlnRWdBQ0FJS0FJd1FaQ0FBV29pQWlBSUtBSTRJZ1pxUVExMElnVWdDQ2dDTkNJSElBZ29BandpQ1dwQjBTSnNJZ29nQjBIK01HeHFJZ2RxUVJKMlFmOEhjV29zQUFBNkFBQWdBU0FBSUFVZ0IydEJFblpCL3dkeGFpd0FBRG9BQXlBQklBQWdBaUFHYTBFTmRDSUNJQW9nQ1VIZmlYOXNhaUlHYWtFU2RrSC9CM0ZxTEFBQU9nQUJJQUVnQUNBQ0lBWnJRUkoyUWY4SGNXb3NBQUE2QUFJZ0JDQURLQUlRYWlJQklBQWdDRUZBYXlnQ0FFR1FnQUZxSWdJZ0NDZ0NTQ0lHYWtFTmRDSUZJQWdvQWtRaUJ5QUlLQUpNSWdscVFkRWliQ0lLSUFkQi9qQnNhaUlIYWtFU2RrSC9CM0ZxTEFBQU9nQUFJQUVnQUNBRklBZHJRUkoyUWY4SGNXb3NBQUE2QUFNZ0FTQUFJQUlnQm10QkRYUWlBaUFLSUFsQjM0bC9iR29pQm1wQkVuWkIvd2R4YWl3QUFEb0FBU0FCSUFBZ0FpQUdhMEVTZGtIL0IzRnFMQUFBT2dBQ0lBUWdBeWdDRkdvaUFTQUFJQWdvQWxCQmtJQUJhaUlDSUFnb0FsZ2lCbXBCRFhRaUJTQUlLQUpVSWdjZ0NDZ0NYQ0lKYWtIUkltd2lDaUFIUWY0d2JHb2lCMnBCRW5aQi93ZHhhaXdBQURvQUFDQUJJQUFnQlNBSGEwRVNka0gvQjNGcUxBQUFPZ0FESUFFZ0FDQUNJQVpyUVExMElnSWdDaUFKUWQrSmYyeHFJZ1pxUVJKMlFmOEhjV29zQUFBNkFBRWdBU0FBSUFJZ0JtdEJFblpCL3dkeGFpd0FBRG9BQWlBRUlBTW9BaGhxSWdFZ0FDQUlLQUpnUVpDQUFXb2lBaUFJS0FKb0lnWnFRUTEwSWdVZ0NDZ0NaQ0lISUFnb0Ftd2lDV3BCMFNKc0lnb2dCMEgrTUd4cUlnZHFRUkoyUWY4SGNXb3NBQUE2QUFBZ0FTQUFJQVVnQjJ0QkVuWkIvd2R4YWl3QUFEb0FBeUFCSUFBZ0FpQUdhMEVOZENJQ0lBb2dDVUhmaVg5c2FpSUdha0VTZGtIL0IzRnFMQUFBT2dBQklBRWdBQ0FDSUFaclFSSjJRZjhIY1dvc0FBQTZBQUlnQkNBREtBSWNhaUlCSUFBZ0NDZ0NjRUdRZ0FGcUlnSWdDQ2dDZUNJRGFrRU5kQ0lFSUFnb0FuUWlCaUFJS0FKOElnVnFRZEVpYkNJSElBWkIvakJzYWlJR2FrRVNka0gvQjNGcUxBQUFPZ0FBSUFFZ0FDQUVJQVpyUVJKMlFmOEhjV29zQUFBNkFBTWdBU0FBSUFJZ0EydEJEWFFpQWlBSElBVkIzNGwvYkdvaUEycEJFblpCL3dkeGFpd0FBRG9BQVNBQklBQWdBaUFEYTBFU2RrSC9CM0ZxTEFBQU9nQUNJQWdrQmd1Z0N3RUxmeU1HSVFVakJrSFFBR29rQmlBQUtBTFFBaUVQSUFVZ0FTZ0NWQ0lJS0FJQUlBSXVBUUJCRFhSc1FZQUljaUlPSUFnb0FvQUJJQUpCUUdzdUFRQkJvUzFzYkNJS2FpSUdJQWhCUUdzb0FnQWdBaTRCSUVHeHpnQnNiQ0lKYWlJQklBSXVBUkFnQ0NnQ0lHd2lDeUFDTGdGUUlBZ29BcUFCYkNJTWFrRzJGMndpQnlBTElBSXVBVEFnQ0NnQ1lHd2lEV3BCRFhScUlnQnFRUXQxTmdJQUlBVWdBU0FBYTBFTGRUWUNQQ0FGSUE0Z0NrRitiR3BCQzNVaUFTQUxJQTFySUF4clFRSjBJZ0JxTmdJTUlBVWdBU0FBYXpZQ01DQUZJQVlnQ1dzaUFTQUhJQXdnRFd0QkRYUnFJZ0JxUVF0MU5nSVlJQVVnQVNBQWEwRUxkVFlDSkNBRklBZ29Ba1FnQWk0QklrR3h6Z0JzYkNJT0lBZ29BZ1FnQWk0QkFrRU5kR3hCZ0FoeUlnb2dDQ2dDaEFFZ0FpNEJRa0doTFd4c0lnWnFJZ2xxSWdFZ0FpNEJFaUFJS0FJa2JDSUxJQUl1QVZJZ0NDZ0NwQUZzSWd4cVFiWVhiQ0lISUFzZ0FpNEJNaUFJS0FKa2JDSU5ha0VOZEdvaUFHcEJDM1UyQWdRZ0JVRkFheUFCSUFCclFRdDFOZ0lBSUFVZ0N5QU5heUFNYTBFQ2RDSUJJQW9nQmtGK2JHcEJDM1VpQUdvMkFoQWdCU0FBSUFGck5nSTBJQVVnQ1NBT2F5SUJJQWNnRENBTmEwRU5kR29pQUdwQkMzVTJBaHdnQlNBQklBQnJRUXQxTmdJb0lBVWdDQ2dDQ0NBQ0xnRUVRUTEwYkVHQUNISWlEaUFJS0FLSUFTQUNMZ0ZFUWFFdGJHd2lDbW9pQmlBSUtBSklJQUl1QVNSQnNjNEFiR3dpQ1dvaUFTQUNMZ0VVSUFnb0FpaHNJZ3NnQWk0QlZDQUlLQUtvQVd3aURHcEJ0aGRzSWdjZ0N5QUNMZ0UwSUFnb0FtaHNJZ0pxUVExMGFpSUFha0VMZFNJTk5nSUlJQVVnQVNBQWEwRUxkVFlDUkNBRklBNGdDa0YrYkdwQkMzVWlBU0FMSUFKcklBeHJRUUowSWdCcUlnbzJBaFFnQlNBQklBQnJOZ0k0SUFVZ0JpQUpheUlCSUFjZ0RDQUNhMEVOZEdvaUFHcEJDM1VpQ1RZQ0lDQUZJQUVnQUd0QkMzVTJBaXdnQkNBREtBSUFhaUlISUE5QmdIMXFJZ1lnQlNnQ0FFRU5kRUdBZ0lqQUFHb2lBaUFOUWFFdGJHb2lBU0FGS0FJRVFiSE9BR3dpQUdwQkVuWkIvd2R4YWl3QUFEb0FBQ0FISUFZZ0FTQUFhMEVTZGtIL0IzRnFMQUFBT2dBQ0lBY2dCaUFDSUExQnZxVi9iR3BCRW5aQi93ZHhhaXdBQURvQUFTQUVJQU1vQWdScUlnY2dCaUFGS0FJTVFRMTBRWUNBaU1BQWFpSUNJQXBCb1Mxc2FpSUJJQVVvQWhCQnNjNEFiQ0lBYWtFU2RrSC9CM0ZxTEFBQU9nQUFJQWNnQmlBQklBQnJRUkoyUWY4SGNXb3NBQUE2QUFJZ0J5QUdJQUlnQ2tHK3BYOXNha0VTZGtIL0IzRnFMQUFBT2dBQklBUWdBeWdDQ0dvaUJ5QUdJQVVvQWhoQkRYUkJnSUNJd0FCcUlnSWdDVUdoTFd4cUlnRWdCU2dDSEVHeHpnQnNJZ0JxUVJKMlFmOEhjV29zQUFBNkFBQWdCeUFHSUFFZ0FHdEJFblpCL3dkeGFpd0FBRG9BQWlBSElBWWdBaUFKUWI2bGYyeHFRUkoyUWY4SGNXb3NBQUE2QUFFZ0JDQURLQUlNYWlJSklBWWdCU2dDSkVFTmRFR0FnSWpBQUdvaUJ5QUZLQUlzSWdKQm9TMXNhaUlCSUFVb0FpaEJzYzRBYkNJQWFrRVNka0gvQjNGcUxBQUFPZ0FBSUFrZ0JpQUJJQUJyUVJKMlFmOEhjV29zQUFBNkFBSWdDU0FHSUFjZ0FrRytwWDlzYWtFU2RrSC9CM0ZxTEFBQU9nQUJJQVFnQXlnQ0VHb2lDU0FHSUFVb0FqQkJEWFJCZ0lDSXdBQnFJZ2NnQlNnQ09DSUNRYUV0YkdvaUFTQUZLQUkwUWJIT0FHd2lBR3BCRW5aQi93ZHhhaXdBQURvQUFDQUpJQVlnQVNBQWEwRVNka0gvQjNGcUxBQUFPZ0FDSUFrZ0JpQUhJQUpCdnFWL2JHcEJFblpCL3dkeGFpd0FBRG9BQVNBRUlBTW9BaFJxSWdRZ0JpQUZLQUk4UVExMFFZQ0FpTUFBYWlJRElBVW9Ba1FpQWtHaExXeHFJZ0VnQlVGQWF5Z0NBRUd4emdCc0lnQnFRUkoyUWY4SGNXb3NBQUE2QUFBZ0JDQUdJQUVnQUd0QkVuWkIvd2R4YWl3QUFEb0FBaUFFSUFZZ0F5QUNRYjZsZjJ4cVFSSjJRZjhIY1dvc0FBQTZBQUVnQlNRR0M3SUVBUXAvSXdZaEJpTUdRU0JxSkFZZ0FDZ0MwQUloRENBR0lBSXVBUUFnQVNnQ1ZDSUhLQUlBYkNJSklBSXVBU0FnQjBGQWF5Z0NBR3dpQ21wQkRYUWlBU0FDTGdFUUlBY29BaUJzSWdBZ0FpNEJNQ0FIS0FKZ2JDSUZha0hSSW13aUNDQUFRZjR3YkdvaUFHb2lEVFlDQUNBR0lBRWdBR3MyQWhnZ0JpQUpJQXByUVExMElnRWdDQ0FGUWQrSmYyeHFJZ0JxSWc0MkFnZ2dCaUFCSUFCcklnazJBaEFnQmlBQ0xnRUNJQWNvQWdSc0lnb2dBaTRCSWlBSEtBSkViQ0lGYWtFTmRDSUJJQUl1QVJJZ0J5Z0NKR3dpQUNBQ0xnRXlJQWNvQW1Sc0lnaHFRZEVpYkNJQ0lBQkIvakJzYWlJQWFpSUxOZ0lFSUFZZ0FTQUFheUlITmdJY0lBWWdDaUFGYTBFTmRDSUJJQUlnQ0VIZmlYOXNhaUlBYWlJSU5nSU1JQVlnQVNBQWF5SUNOZ0lVSUFRZ0F5Z0NBR29pQVNBTVFZQjlhaUlGSUFzZ0RVR0FnSUlRYWlJQWFrRVFka0gvQjNGcUxBQUFPZ0FBSUFFZ0FDQUxhMEVRZGtIL0IzRWdCV29zQUFBNkFBRWdCQ0FES0FJRWFpSUJJQTVCZ0lDQ0VHb2lBQ0FJYWtFUWRrSC9CM0VnQldvc0FBQTZBQUFnQVNBQUlBaHJRUkIyUWY4SGNTQUZhaXdBQURvQUFTQUVJQU1vQWdocUlnRWdDVUdBZ0lJUWFpSUFJQUpxUVJCMlFmOEhjU0FGYWl3QUFEb0FBQ0FCSUFBZ0FtdEJFSFpCL3dkeElBVnFMQUFBT2dBQklBUWdBeWdDREdvaUFTQUdLQUlZUVlDQWdoQnFJZ0FnQjJwQkVIWkIvd2R4SUFWcUxBQUFPZ0FBSUFFZ0FDQUhhMEVRZGtIL0IzRWdCV29zQUFBNkFBRWdCaVFHQzJjQkFYOGdCQ0FES0FJQWFpQUFLQUxRQWtHQWZXb2lBQ0FDTGdFQUlBRW9BbFFpQVNnQ0FHeEJoQ0JxSWdVZ0FpNEJFQ0FCS0FJZ2JDSUJha0VEZGtIL0IzRnFMQUFBT2dBQUlBUWdBeWdDQkdvZ0JTQUJhMEVEZGtIL0IzRWdBR29zQUFBNkFBQUw4UWdCRVg4akJpRVNJd1pCZ0FKcUpBWWdBQ2dDMEFJaEZTQVNJZ0FoQmlBQktBSlVJUUZCQ0NFSkEwQUNmd0pBSUFJdUFSQWlCeUFDTGdFZ0lnVnlRZi8vQTNFRWZ3d0JCU0FDTGdFd0JIOUJBQ0VGREFJRklBSkJRR3N1QVFBRWYwRUFJUVVNQXdVZ0FpNEJVQVIvUVFBaEJRd0VCU0FDTGdGZ0JIOUJBQ0VGREFVRklBSXVBWEFFZjBFQUlRVU1CZ1VnQmlBQ0xnRUFJQUVvQWdCc0lnVTJBZ0FnQmlBRk5nSWdJQVpCUUdzZ0JUWUNBQ0FHSUFVMkFtQWdCaUFGTmdLQUFTQUdJQVUyQXFBQklBWWdCVFlDd0FGQk9Bc0xDd3NMQ3d3QkN5QUhJQUVvQWlCc0lnY2dBaTRCY0NBQktBTGdBV3dpQ0dvaUN5QUNMZ0V3SUFFb0FtQnNJZ29nQWk0QlVDQUJLQUtnQVd3aURXb2lEbXRCNmdKc1FRaDFJQTBnQ21zaUNpQUhJQWhySWcxcVFka0RiRUVJZFNJUElBcEJuUVZzUVFoMWF5QUxJQTVxSWdocklndHJJUWNnQmlBQ0xnRUFJQUVvQWdCc0lnb2dBa0ZBYXk0QkFDQUJLQUtBQVd3aURtb2lFQ0FCUVVCcktBSUFJQVZCRUhSQkVIVnNJaEVnQWk0QllDQUJLQUxBQVd3aUUyb2lCV29pRkNBSWFqWUNBQ0FHSUJRZ0NHczJBdUFCSUFZZ0N5QUtJQTVySWdnZ0VTQVRhMEhxQW14QkNIVWdCV3NpQ21vaURtbzJBaUFnQmlBT0lBdHJOZ0xBQVNBR1FVQnJJQWNnQ0NBS2F5SUlhallDQUNBR0lBZ2dCMnMyQXFBQklBWWdEeUFOUVpVQ2JFRUlkV3NnQjJzaUJ5QVFJQVZySWdWcU5nSmdJQVVnQjJzaEJVRWdDMEVDZENBR2FpQUZOZ0lBSUFaQkJHb2hCaUFCUVFScUlRRWdBa0VDYWlFQ0lBbEJmMm9oQlNBSlFRRkxCRUFnQlNFSkRBRUxDeUFWUVlCOWFpRUpRUUFoQVFOQUlBUWdBVUVDZENBRGFpZ0NBR29oQmlBQUtBSUFRWkNBQVdvaEJRSkFBa0FnQUNnQ0JDSUhJQUFvQWdnaUFuSU5BQ0FBS0FJTUJFQkJBQ0VDREFFRklBQW9BaEFFUUVFQUlRSU1BZ1VnQUNnQ0ZBUkFRUUFoQWd3REJTQUFLQUlZQkVCQkFDRUNEQVFGSUFBb0Fod0VRRUVBSVFJTUJRVWdCaUFKSUFWQkJYWkIvd2R4YWl3QUFDSUNPZ0FBSUFaQkFXb2dBa0VIRUVVYUN3c0xDd3NNQVFzZ0J5QUFLQUljSWdocUlnc2dBQ2dDRkNJTUlBQW9BZ3dpQ21vaURXdEI2Z0pzUVFoMUlBd2dDbXNpRENBSElBaHJJZ3BxUWRrRGJFRUlkU0lPSUF4Qm5RVnNRUWgxYXlBTElBMXFJZ2hySWd0cklRY2dCaUFKSUFVZ0FDZ0NFQ0lOYWlJUElBQW9BaGdpRUNBQ2FpSU1haUlSSUFocVFRVjJRZjhIY1dvc0FBQTZBQUFnQmlBSklCRWdDR3RCQlhaQi93ZHhhaXdBQURvQUJ5QUdJQWtnQlNBTmF5SUZJQUlnRUd0QjZnSnNRUWgxSUF4cklnSnFJZ2dnQzJwQkJYWkIvd2R4YWl3QUFEb0FBU0FHSUFrZ0NDQUxhMEVGZGtIL0IzRnFMQUFBT2dBR0lBWWdDU0FGSUFKcklnSWdCMnBCQlhaQi93ZHhhaXdBQURvQUFpQUdJQWtnQWlBSGEwRUZka0gvQjNGcUxBQUFPZ0FGSUFZZ0NTQVBJQXhySWdJZ0RpQUtRWlVDYkVFSWRXc2dCMnNpQldwQkJYWkIvd2R4YWl3QUFEb0FBeUFHSUFrZ0FpQUZhMEVGZGtIL0IzRnFMQUFBT2dBRUN5QUFRU0JxSVFBZ0FVRUJhaUlCUVFoSERRQUxJQklrQmd2ckJ3SUhmd3g5SXdZaENDTUdRWUFDYWlRR0lBQW9BdEFDSVFzZ0NDSUFJUVVnQVNnQ1ZDRUJRUWdoQndOQUFuOENRQ0FDTGdFUUlnb2dBaTRCSUNJR2NrSC8vd054Qkg4TUFRVWdBaTRCTUFSL1FRQWhCZ3dDQlNBQ1FVQnJMZ0VBQkg5QkFDRUdEQU1GSUFJdUFWQUVmMEVBSVFZTUJBVWdBaTRCWUFSL1FRQWhCZ3dGQlNBQ0xnRndCSDlCQUNFR0RBWUZJQVVnQVNvQ0FDQUNMZ0VBc3BRaUREZ0NBQ0FGSUF3NEFpQWdCVUZBYXlBTU9BSUFJQVVnRERnQ1lDQUZJQXc0QW9BQklBVWdERGdDb0FFZ0JTQU1PQUxBQVVFNEN3c0xDd3NMREFFTElBRXFBaUFnQ3JLVUlnd2dBU29DNEFFZ0FpNEJjTEtVSWcyU0loQWdBU29DWUNBQ0xnRXdzcFFpRGlBQktnS2dBU0FDTGdGUXNwUWlFWklpRDVORDh3UzFQNVFnRVNBT2t5SU9JQXdnRFpNaUVaSkRYb1BzUDVRaUV5QU9RM1U5SjBDVWt5QVBJQkNTSWcyVEloQ1RJUXdnQlNBQktnSUFJQUl1QVFDeWxDSVBJQUVxQW9BQklBSkJRR3N1QVFDeWxDSVNraUlVSUFGQlFHc3FBZ0FnQmtFUWRFRVFkYktVSWhVZ0FTb0N3QUVnQWk0QllMS1VJaGFTSWc2U0loY2dEWkk0QWdBZ0JTQVhJQTJUT0FMZ0FTQUZJQThnRXBNaURTQVZJQmFUUS9NRXRUK1VJQTZUSWcrU0loSWdFSkk0QWlBZ0JTQVNJQkNUT0FMQUFTQUZRVUJySUEwZ0Q1TWlEU0FNa2pnQ0FDQUZJQTBnREpNNEFxQUJJQVVnRkNBT2t5SU5JQk1nRVVQVWk0by9sSk1nREpNaURKSTRBbUFnRFNBTWt5RU1RU0FMUVFKMElBVnFJQXc0QWdBZ0JVRUVhaUVGSUFGQkJHb2hBU0FDUVFKcUlRSWdCMEYvYWlFR0lBZEJBVXNFUUNBR0lRY01BUXNMSUF0QmdIMXFJUUpCQUNFQkEwQWdBQ29DQkNJTUlBQXFBaHdpRFpJaUVDQUFLZ0lVSWc0Z0FDb0NEQ0lSa2lJUGswUHpCTFUvbENBT0lCR1RJZzRnRENBTmt5SVJra05lZyt3L2xDSVRJQTVEZFQwblFKU1RJQThnRUpJaURaTWlFSk1oRENBRUlBRkJBblFnQTJvb0FnQnFJZ1VnQWlBQUtnSUFRd0FnQUVTU0lnOGdBQ29DRUNJU2tpSVVJQUFxQWdnaUZTQUFLZ0lZSWhhU0lnNlNJaGNnRFpJUVEwSC9CM0ZxTEFBQU9nQUFJQVVnQWlBWElBMlRFRU5CL3dkeGFpd0FBRG9BQnlBRklBSWdEeUFTa3lJTklCVWdGcE5EOHdTMVA1UWdEcE1pRDVJaUVpQVFraEJEUWY4SGNXb3NBQUE2QUFFZ0JTQUNJQklnRUpNUVEwSC9CM0ZxTEFBQU9nQUdJQVVnQWlBTklBK1RJZzBnREpJUVEwSC9CM0ZxTEFBQU9nQUNJQVVnQWlBTklBeVRFRU5CL3dkeGFpd0FBRG9BQlNBRklBSWdGQ0FPa3lJTklCTWdFVVBVaTRvL2xKTWdESk1pREpJUVEwSC9CM0ZxTEFBQU9nQURJQVVnQWlBTklBeVRFRU5CL3dkeGFpd0FBRG9BQkNBQVFTQnFJUUFnQVVFQmFpSUJRUWhIRFFBTElBZ2tCZ3ZOS0FJTGZ3RjhJQUFvQXRnRElRc2dBQ2dDSkVFQVRBUkFEd3NnQUNnQzJBRWhBUU5BQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQWdBU0lJS0FJb0lBRW9BaVFpQkVFSWRHcEJnUUpyRHBBZUFCNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQllCSUIwZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBSWdJQndnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQlVnQXlBZ0lCc2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUVJQ0FnSUJvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQlFnSUFVZ0lDQWdJQmtnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdCaUFnSUNBZ0lCZ2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQk1nSUNBZklDQWdJQ0FnSUJjZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQWNnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQklnSUNBZ0NDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FKSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQkVnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ3lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQkFnSUNBZ0lDQU1JQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUEwZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQThnSUNBZ0lDQWdEaUFMUVFBaEFrRUVJUU1NSUF0QkFDRUNRUVVoQXd3ZkMwRUFJUUpCQmlFRERCNExRUUFoQWtFSElRTU1IUXRCQUNFQ1FRZ2hBd3djQzBFQUlRSkJDU0VEREJzTFFRQWhBa0VLSVFNTUdndEJBQ0VDUVFzaEF3d1pDMEVBSVFKQkRDRUREQmdMUVFBaEFrRU5JUU1NRnd0QkFDRUNRUTRoQXd3V0MwRUFJUUpCRHlFRERCVUxRUUFoQWtFUUlRTU1GQXRCQUNFQ1FSRWhBd3dUQzBFQUlRSkJFaUVEREJJTFFRQWhBa0VUSVFNTUVRdEJBQ0VDUVJRaEF3d1FDMEVBSVFKQkZTRUREQThMUVFBaEFrRVdJUU1NRGd0QkFDRUNRUmNoQXd3TkMwRUFJUUpCR0NFRERBd0xRUUFoQWtFWklRTU1Dd3RCQUNFQ1FSb2hBd3dLQzBFQUlRSkJHeUVEREFrTFFRQWhBa0VjSVFNTUNBdEJBQ0VDUVIwaEF3d0hDMEVBSVFKQkhpRUREQVlMUVFBaEFrRWZJUU1NQlF0QkFDRUNRU0FoQXd3RUMwRUFJUUpCSVNFRERBTUxRUUFoQWtFaUlRTU1BZ3NDUUFKQUFrQUNRQ0FBS0FKSUlnRU9Bd0FCQWdNTElBRWhBa0VqSVFNTUJBc2dBU0VDUVNRaEF3d0RDeUFCSVFKQkpTRUREQUlMSUFBb0FnQWlBVUV4TmdJVUlBRW9BZ0FoQVNBQUlBRkIvd0Z4UWF3RGFoRUJBQXdCQ3lBQUtBSUFJZ0ZCQnpZQ0ZDQUJJQVEyQWhnZ0FDZ0NBQ0FJS0FJb05nSWNJQUFvQWdBb0FnQWhBU0FBSUFGQi93RnhRYXdEYWhFQkFBc2dDMEVFYWlBSlFRSjBhaUFETmdJQUlBZ29BalFFUUNBTFFTeHFJQWxCQW5ScUlnRW9BZ0FnQWtjRVFDQUlLQUpRSWdZRVFDQUJJQUkyQWdBQ1FBSkFBa0FDUUFKQUlBSU9Bd0FCQWdNTElBZ29BbFFoQkVFQUlRRURRQ0FCUVFKMElBUnFJQUZCQVhRZ0Jtb3ZBUUEyQWdBZ0FVRUJhaUlCUWNBQVJ3MEFDd3dEQ3lBSUtBSlVJUVJCQUNFQkEwQWdBVUVDZENBRWFpQUJRUUYwSUFacUx3RUFJQUZCQVhSQjRDbHFMZ0VBYkVHQUVHcEJESFUyQWdBZ0FVRUJhaUlCUWNBQVJ3MEFDd3dDQ3lBSUtBSlVJUWRCQUNFQlFRQWhCQU5BSUFSQkFuUWdCMm9nQVVFRGRFSGdLbW9yQXdBaURDQUVRUUYwSUFacUx3RUF0NkpFQUFBQUFBQUF3RCtpdGpnQ0FDQUVRUUZ5SWdWQkFuUWdCMm9nRENBRlFRRjBJQVpxTHdFQXQ2SkU3MkZJc1ZBeDlqK2lSQUFBQUFBQUFNQS9vclk0QWdBZ0JVRUJhaUlGUVFKMElBZHFJQXdnQlVFQmRDQUdhaThCQUxlaVJNcHZUWkd1NS9RL29rUUFBQUFBQUFEQVA2SzJPQUlBSUFSQkEzSWlDa0VDZENBSGFpQU1JQXBCQVhRZ0Jtb3ZBUUMzb2tTcUVXenZZdER5UDZKRUFBQUFBQUFBd0QraXRqZ0NBQ0FLUVFGcUlnVkJBblFnQjJvZ0RDQUZRUUYwSUFacUx3RUF0NkpFQUFBQUFBQUF3RCtpdGpnQ0FDQUtRUUpxSWdWQkFuUWdCMm9nRENBRlFRRjBJQVpxTHdFQXQ2SkVPNytud0drazZUK2lSQUFBQUFBQUFNQS9vclk0QWdBZ0NrRURhaUlGUVFKMElBZHFJQXdnQlVFQmRDQUdhaThCQUxlaVJMc2d4M3Q2VWVFL29rUUFBQUFBQUFEQVA2SzJPQUlBSUFSQkIzSWlCVUVDZENBSGFpQU1JQVZCQVhRZ0Jtb3ZBUUMzb2tSZHEzTGVWYWpSUDZKRUFBQUFBQUFBd0QraXRqZ0NBQ0FFUVFocUlRUWdBVUVCYWlJQlFRaEhEUUFMREFFTElBQW9BZ0FpQVVFeE5nSVVJQUVvQWdBaEFTQUFJQUZCL3dGeFFhd0RhaEVCQUFzTEN3c2dDRUhZQUdvaEJDQUpRUUZxSWdFZ0FDZ0NKRWdFUUNBQklRa2dCQ0VCREFFTEN3dWxBUUVFZnlBQUtBSUVLQUlBSVFFZ0FDQUFRUUZCMUFBZ0FVRS9jVUhLQVdvUkJBQWlBVFlDMkFNZ0FVSHpBRFlDQUNBQUtBSWtRUUJNQkVBUEN5QUJRU3hxSVFSQkFDRUJJQUFvQXRnQklRSURRQ0FBS0FJRUtBSUFJUU1nQWlBQVFRRkJnQUlnQTBFL2NVSEtBV29SQkFBaUF6WUNWQ0FEUVFCQmdBSVFSUm9nQVVFQ2RDQUVha0YvTmdJQUlBSkIyQUJxSVFJZ0FVRUJhaUlCSUFBb0FpUklEUUFMQzhzRkFRdC9Jd1loRFNNR1FTQnFKQVlnQWlnQ0FDRUhJQUlvQWdRaEN5QUNLQUlJSVFvZ0JTZ0NBQ0lJUlFSQUlBVWdBQ2dDSENBQUtBSWdFS2tKSWdnMkFnQUxJQTBpQWtFY2FpRU9JQUpCR0dvaER5QUFLQUlNSUFCQk1Hb2dCMEV3YkdvaURDQUJLQUlBSWdrZ0IwSHdBR3hxS0FJQUlBZEI4QUJzSUFscUtBSUVLQUlBSUF0QkZHeHFJQW9nQ0JDb0NVRUFTQVIvUVg4RklBVW9BZ0FpQ0NnQ0hDRUpJQWdvQWd3Z0NDZ0NDRUVCYW1vZ0NDZ0NGQ0FJS0FJUVFRRnFhbXl5UXdBQW9FQ1VRd0FBb0VDVUlBa2dDV3l5WGdSL1FYOEZJQUVvQXBnQkloQkJBVVlFUUNBQUtBSU1JQXhCQUVFQUlBRW9BZ0FnQjBId0FHeHFLQUlFS0FJQUlBdEJGR3hxS0FJQUlBcEJGR3hxSUFJUTJnSUZJQUFvQWd3aENDQUFRWkFFYWlBSFFUQnNhaUVKSUJCQkFrWUVRQ0FJSUF3Z0NVRUFJQUVvQWdBZ0IwSHdBR3hxS0FJRUtBSUFJQXRCRkd4cUtBSUFJQXBCRkd4cUlBSVEyZ0lGSUFnZ0RDQUpJQUJCOEFkcUlBZEJNR3hxSUFFb0FnQWdCMEh3QUd4cUtBSUVLQUlBSUF0QkZHeHFLQUlBSUFwQkZHeHFJQUlRMmdJTEN5QURJQVFnQUNnQ0JDQUFLQUlJSUFBb0FoUWdCU2dDQUNBQUtBSVlJZ0FnQUNBQ0lBNGdEeUFHRUt3SlFRQklCSDlCZndVZ0JpQU9LQUlBc2pnQ0JDQUdJQThvQWdDeU9BSUlJQUVvQWdBaUFDQUhRZkFBYkdvb0FnUW9BZ0FnQzBFVWJHb29BZ0FpQWlBS1FSUnNhaUVCSUFZZ0IwSHdBR3dnQUdvcUFoZ2dCMEh3QUd3Z0FHb3FBZ3dnQVNvQ0NKUWdCMEh3QUd3Z0FHb3FBaEFnQ2tFVWJDQUNhaUlDS2dJTWxKS1NPQUlNSUFZZ0IwSHdBR3dnQUdvcUFpZ2dCMEh3QUd3Z0FHb3FBaHdnQVNvQ0NKUWdCMEh3QUd3Z0FHb3FBaUFnQWlvQ0RKU1NramdDRUNBR0lBZEI4QUJzSUFCcUtnSTRJQWRCOEFCc0lBQnFLZ0lzSUFFcUFnaVVJQWRCOEFCc0lBQnFLZ0l3SUFJcUFneVVrcEk0QWhSQkFBc0xDeUVSSUEwa0JpQVJDeUlCQVgxQmZ5QUFLZ0lBSUFFcUFnQ1RJZ0pEQUFBQUFGNGdBa01BQUFBQVhSc0xpaEFDREg4S2ZTTUdJUW9qQmtGQWF5UUdJQXBCT0dvaEJ5QUtRVEJxSVFnZ0NrRW9haUVMSUFwQklHb2hDU0FEUVFSSUJFQkRJTHkrVENFRkJTQUFLZ0lzUXdBQUFBQmJCRUJESUx5K1RDRUZCUUpBQW44Z0E3SWlHaUFGbEJCRElSQWdBMEVHZEJCRUlnWkZCRUJCQUVFRFFjcllBaUFKRUQxREFBQ0F2eUVGREFJTElBTkJBM1FRUkNJSlJRUkFRUUJCQTBISzJBSWdDeEE5SUFZUU9FTUFBSUMvSVFVTUFnc2dBMEVDZENJTEVFUWlEVVVFUUVFQVFRTkJ5dGdDSUFnUVBTQUdFRGdnQ1JBNFF3QUFnTDhoQlF3Q0N5QUxFRVFpQzBVRVFFRUFRUU5CeXRnQ0lBY1FQU0FHRURnZ0NSQTRJQTBRT0VNQUFJQy9JUVVNQWdzZ0VFRi9haUlIQzBFRUlBZEJCRW9iSVJGQkFDRUhBMEFnQjBFRFJ3UkFRUUFoQ0FOQUlBaEJCRWNFUUNBSFFRUjBJQVJxSUFoQkFuUnFJQWRCQkhRZ0FHb2dDRUVDZEdvcUFnQWdBQ29DTEpVNEFnQWdDRUVCYWlFSURBRUxDeUFIUVFGcUlRY01BUXNMSUJGQkFuUWdDMm9oRHdKQUFrQUNRQU5BQWtCQkFDRUhBMEFnQnlBRFNBUkFJQVFxQWdBaEZ5QUVLZ0lFSVJZZ0JDb0NEQ0VaSUFRcUFoQWhFeUFFS2dJVUlSZ2dCQ29DSENFYklBZEJER3dnQW1vcUFnQWlGQ0FFS2dJZ2xDQUhRUXhzSUFKcUtnSUVJaFVnQkNvQ0pKU1NRd0FBZ0QrU0lnVkRBQUFBQUZzTkFpQUhRUU4wSUFGcUtnSUVJQnNnRkNBVGxDQVZJQmlVa3BJaUdDQUZsWk1oRXlBSFFRRjBJZ0JCQW5RZ0NXb2dCMEVEZENBQmFpb0NBQ0FaSUJjZ0ZKUWdGaUFWbEpLU0loY2dCWldUSWhZNEFnQWdBRUVCY2tFQ2RDQUphaUFUT0FJQUlBZEJBblFnQzJvZ0ZpQVdsQ0FUSUJPVWtpSVRPQUlBSUFkQkFuUWdEV29nRXpnQ0FDQUhRUVIwSWdCQkFuUWdCbW9nRkNBRmxTSVRPQUlBSUFCQkFYSkJBblFnQm1vZ0ZTQUZsU0lXT0FJQUlBQkJBbkpCQW5RZ0JtcERBQUNBUHlBRmxTSVpPQUlBSUFCQkEzSkJBblFnQm1wREFBQUFBRGdDQUNBQVFRUnlRUUowSUFacVF3QUFBQUE0QWdBZ0FFRUZja0VDZENBR2FrTUFBQUFBT0FJQUlBQkJCbkpCQW5RZ0Jtb2dGQ0FYbEl3Z0JTQUZsQ0lGbFRnQ0FDQUFRUWR5UVFKMElBWnFJQlVnRjVTTUlBV1ZPQUlBSUFCQkNISkJBblFnQm1wREFBQUFBRGdDQUNBQVFRbHlRUUowSUFacVF3QUFBQUE0QWdBZ0FFRUtja0VDZENBR2FrTUFBQUFBT0FJQUlBQkJDM0pCQW5RZ0Jtb2dFemdDQUNBQVFReHlRUUowSUFacUlCWTRBZ0FnQUVFTmNrRUNkQ0FHYWlBWk9BSUFJQUJCRG5KQkFuUWdCbW9nRkNBWWxJd2dCWlU0QWdBZ0FFRVBja0VDZENBR2FpQVZJQmlVakNBRmxUZ0NBQ0FIUVFGcUlRY01BUXNMSUFzZ0EwRUVRU0FRZ2dOREFBQ0FRU0FQS2dJQVF3QUFnRUNVSWdVZ0JVTUFBSUJCWFJzaUZVTUFBTUJBbFNFRlF3QUFBQUFoRTBFQUlRQURRQ0FBSUFOSEJFQWdFeUFBUVFKMElBdHFLZ0lBSWhRZ0ZWNEVmU0FGQlNBRlF3QUFnRDlEQUFDQVB5QVVJQldWa3lJVUlCUWdGSlNVazVRTGtpRVRJQUJCQVdvaEFBd0JDd3NnRXlBYWxTSUZRODNNekQxZERRUWdEa0VBUnlBRlF3QUFnRUJkY1FSQUlBNUJDa1lnQlNBU2xVT2tjSDAvWG5JTkJRVWdEa0VLUmcwRkMwRUFJUUJCQUNFTUEwQWdBeUFNUndSQUlBeEJBblFnRFdvcUFnQWlFaUFWWHdSQUlBQkJBM1FpQjBFQ2RDQUdha01BQUlBL0lCSWdGWldUSWhJZ0VwUWlFaUFNUVFSMElnaEJBblFnQm1vcUFnQ1VPQUlBSUFkQkFYSkJBblFnQm1vZ0VpQUlRUUZ5UVFKMElBWnFLZ0lBbERnQ0FDQUhRUUp5UVFKMElBWnFJQklnQ0VFQ2NrRUNkQ0FHYWlvQ0FKUTRBZ0FnQjBFRGNrRUNkQ0FHYWlBU0lBaEJBM0pCQW5RZ0Jtb3FBZ0NVT0FJQUlBZEJCSEpCQW5RZ0Jtb2dFaUFJUVFSeVFRSjBJQVpxS2dJQWxEZ0NBQ0FIUVFWeVFRSjBJQVpxSUJJZ0NFRUZja0VDZENBR2Fpb0NBSlE0QWdBZ0IwRUdja0VDZENBR2FpQVNJQWhCQm5KQkFuUWdCbW9xQWdDVU9BSUFJQWRCQjNKQkFuUWdCbW9nRWlBSVFRZHlRUUowSUFacUtnSUFsRGdDQUNBSFFRaHFRUUowSUFacUlCSWdDRUVJY2tFQ2RDQUdhaW9DQUpRNEFnQWdCMEVKYWtFQ2RDQUdhaUFTSUFoQkNYSkJBblFnQm1vcUFnQ1VPQUlBSUFkQkNtcEJBblFnQm1vZ0VpQUlRUXB5UVFKMElBWnFLZ0lBbERnQ0FDQUhRUXRxUVFKMElBWnFJQklnQ0VFTGNrRUNkQ0FHYWlvQ0FKUTRBZ0FnQjBFTWFrRUNkQ0FHYWlBU0lBaEJESEpCQW5RZ0Jtb3FBZ0NVT0FJQUlBZEJEV3BCQW5RZ0Jtb2dFaUFJUVExeVFRSjBJQVpxS2dJQWxEZ0NBQ0FIUVE1cVFRSjBJQVpxSUJJZ0NFRU9ja0VDZENBR2Fpb0NBSlE0QWdBZ0IwRVBha0VDZENBR2FpQVNJQWhCRDNKQkFuUWdCbW9xQWdDVU9BSUFJQUJCQW5RZ0NXb2dFaUFNUVFGMElnZEJBblFnQ1dvcUFnQ1VPQUlBSUFCQkFXcEJBblFnQ1dvZ0VpQUhRUUZ5UVFKMElBbHFLZ0lBbERnQ0FDQUFRUUpxSVFBTElBeEJBV29oREF3QkN3c2dBRUVHU0EwQ0lBb2dDU0FHSUFBUXFBTkJBRWdOQXlBRUlBb3FBZ0FnQkNvQ0FKSTRBZ0FnQkNBS0tnSUVJQVFxQWdTU09BSUVJQVFnQ2lvQ0NDQUVLZ0lNa2pnQ0RDQUVJQW9xQWd3Z0JDb0NFSkk0QWhBZ0JDQUtLZ0lRSUFRcUFoU1NPQUlVSUFRZ0Npb0NGQ0FFS2dJY2tqZ0NIQ0FFSUFvcUFoZ2dCQ29DSUpJNEFpQWdCQ0FLS2dJY0lBUXFBaVNTT0FJa0lBVWhFaUFPUVFGcUlRNE1BUXNMSUFZUU9DQUpFRGdnRFJBNElBc1FPRU1ndkw1TUlRVU1Bd3NnQmhBNElBa1FPQ0FORURnZ0N4QTRRd0FBZ0w4aEJRd0NDeUFHRURnZ0NSQTRJQTBRT0NBTEVEaERJTHkrVENFRkRBRUxJQVlRT0NBSkVEZ2dEUkE0SUFzUU9Bc0xDeUFLSkFZZ0JRdkZDQUlHZnc1OUl3WWhCeU1HUVRCcUpBWWdCMEVvYWlFR0lBZEJJR29oQ0NBRFFRUklCRUJESUx5K1RDRUxCU0FBS2dJc1F3QUFBQUJiQkVCRElMeStUQ0VMQlFKQUlBTkJCblFRUkNJRlJRUkFRUUJCQTBISzJBSWdDQkE5UXdBQWdMOGhDd3dCQ3lBRFFRTjBFRVFpQ2tVRVFFRUFRUU5CeXRnQ0lBWVFQU0FGRURoREFBQ0F2eUVMREFFTFFRQWhCZ05BSUFaQkEwY0VRRUVBSVFnRFFDQUlRUVJIQkVBZ0JrRUVkQ0FFYWlBSVFRSjBhaUFHUVFSMElBQnFJQWhCQW5ScUtnSUFJQUFxQWl5Vk9BSUFJQWhCQVdvaENBd0JDd3NnQmtFQmFpRUdEQUVMQ3lBRHNpRVlJQU5CQVhRaENFRUFJUVlDUUFKQUEwQUNRRU1BQUFBQUlSSkJBQ0VKQTBBZ0NTQURTQVJBSUFRcUFnQWhEU0FFS2dJRUlSQWdCQ29DRENFUklBUXFBaEFoRXlBRUtnSVVJUlFnQkNvQ0hDRUxJQWxCREd3Z0Ftb3FBZ0FpRGlBRUtnSWdsQ0FKUVF4c0lBSnFLZ0lFSWc4Z0JDb0NKSlNTUXdBQWdEK1NJZ3hEQUFBQUFGc05BaUFKUVFOMElBRnFLZ0lFSUFzZ0RpQVRsQ0FQSUJTVWtwSWlGeUFNbFpNaEZTQUpRUUYwSWdCQkFuUWdDbW9nQ1VFRGRDQUJhaW9DQUNBUklBMGdEcFFnRUNBUGxKS1NJaEFnREpXVEloRTRBZ0FnQUVFQmNrRUNkQ0FLYWlBVk9BSUFJQWxCQkhRaUFFRUNkQ0FGYWlBT0lBeVZJaE00QWdBZ0FFRUJja0VDZENBRmFpQVBJQXlWSWhRNEFnQWdBRUVDY2tFQ2RDQUZha01BQUlBL0lBeVZJZ3M0QWdBZ0FFRURja0VDZENBRmFrTUFBQUFBT0FJQUlBQkJCSEpCQW5RZ0JXcERBQUFBQURnQ0FDQUFRUVZ5UVFKMElBVnFRd0FBQUFBNEFnQWdBRUVHY2tFQ2RDQUZhaUFPSUJDVWpDQU1JQXlVSWcyVk9BSUFJQUJCQjNKQkFuUWdCV29nRHlBUWxJd2dEWlU0QWdBZ0FFRUlja0VDZENBRmFrTUFBQUFBT0FJQUlBQkJDWEpCQW5RZ0JXcERBQUFBQURnQ0FDQUFRUXB5UVFKMElBVnFRd0FBQUFBNEFnQWdBRUVMY2tFQ2RDQUZhaUFUT0FJQUlBQkJESEpCQW5RZ0JXb2dGRGdDQUNBQVFRMXlRUUowSUFWcUlBczRBZ0FnQUVFT2NrRUNkQ0FGYWlBT0lCZVVqQ0FObFRnQ0FDQUFRUTl5UVFKMElBVnFJQThnRjVTTUlBMlZPQUlBSUJJZ0VTQVJsQ0FWSUJXVWtwSWhFaUFKUVFGcUlRa01BUXNMSUJJZ0dKVWlDMFBOek13OVhRMERJQVpCQUVjZ0MwTUFBSUJBWFhFRVFDQUdRUXBHSUFzZ0ZwVkRwSEI5UDE1eURRUUZJQVpCQ2tZTkJBc2dCeUFLSUFVZ0NCQ29BMEVBU0EwQ0lBUWdCeW9DQUNBRUtnSUFramdDQUNBRUlBY3FBZ1FnQkNvQ0JKSTRBZ1FnQkNBSEtnSUlJQVFxQWd5U09BSU1JQVFnQnlvQ0RDQUVLZ0lRa2pnQ0VDQUVJQWNxQWhBZ0JDb0NGSkk0QWhRZ0JDQUhLZ0lVSUFRcUFoeVNPQUljSUFRZ0J5b0NHQ0FFS2dJZ2tqZ0NJQ0FFSUFjcUFod2dCQ29DSkpJNEFpUWdDeUVXSUFaQkFXb2hCZ3dCQ3dzZ0JSQTRJQW9RT0VNZ3ZMNU1JUXNNQWdzZ0JSQTRJQW9RT0VNZ3ZMNU1JUXNNQVFzZ0JSQTRJQW9RT0FzTEN5QUhKQVlnQ3d1N0JnSU1md1I5SXdZaENTTUdRZEFBYWlRR0lBbEJNR29oRUNBSlFjd0FhaUVNSUFsQnlBQnFJUTBnQ1VGQWF5RU9JQWxCT0dvaER5QUFzaUVVSUFHeUlSVWdCVUhNSldvaEVVRUFJUUZCQUNFQUFuOENRQU5BQWtBZ0NDQURLQUlFVGcwQ1FRQWhDd05BSUF0QkEwY0VRRUVBSVFZRFFDQUdRUVJIQkVBZ0MwRUVkQ0FKYWlBR1FRSjBhaUFJUVRCc0lBSnFJQXRCQkhScUlBWkJBblJxS0FJQU5nSUFJQVpCQVdvaEJnd0JDd3NnQzBFQmFpRUxEQUVMQzBFQUlRY2dBeWdDQUNBSVFmQUFiR29vQWdRaEJnTkFJQWNnQmlnQ0JFZ0VRRUVBSVFvRFFDQUtJQVlvQWdBaUN5QUhRUlJzYWlnQ0JFZ0VRRUVBSUFrZ0IwRVViQ0FMYWlnQ0FDSUdJQXBCRkd4cUtnSUlJQXBCRkd3Z0Jtb3FBZ3dnRENBTkVJSUVRUUJJSUF3cUFnQWlFa01BQUFBQVhYSkZCRUFnRFNvQ0FDSVRJQlZnSUJOREFBQUFBRjBnRWlBVVlISnlSUVJBQWtBZ0RpQURLQUlBSUFoQjhBQnNhaWdDQkNnQ0FDQUhRUlJzYWlnQ0FDSUdJQXBCRkd4cUtBSUlOZ0lBSUE0Z0NrRVViQ0FHYWlnQ0REWUNCRUVBSUFrZ0RpQVBFSWNFSUE4cUFnUWlFaUFES0FJQUlBaEI4QUJzYWlnQ0JDZ0NBQ0lHSUFkQkZHeHFLZ0lNSWhOZkJFQWdFaUFIUVJSc0lBWnFLZ0lRWUFSQUlBQkJ5QUZHRFFrZ0FFRVliQ0FFYWlBSU5nSUFJQUJCR0d3Z0JHb2dCellDQkNBQVFSaHNJQVJxSUFvMkFnZ2dBRUVZYkNBRWFpQU1LQUlBTmdJUUlBQkJHR3dnQkdvZ0RTZ0NBRFlDRkNBQVFSaHNJQVJxUVFBMkFnd2dBRUVCYWlFQURBSUxDeUFTSUJOREFBQUFRSlJmQkVBZ0VpQUhRUlJzSUFacUtnSVFRd0FBQUQrVVlBUkFJQUZCeUFGR0JIOGdFVUYvTmdJQVFjZ0JCU0FCUVJoc0lBVnFJQWcyQWdBZ0FVRVliQ0FGYWlBSE5nSUVJQUZCR0d3Z0JXb2dDallDQ0NBQlFSaHNJQVZxSUF3b0FnQTJBaEFnQVVFWWJDQUZhaUFOS0FJQU5nSVVJQUZCR0d3Z0JXcEJBRFlDRENBQlFRRnFDeUVCQ3dzTEN3c2dDa0VCYWlFS0lBTW9BZ0FnQ0VId0FHeHFLQUlFSVFZTUFRc0xJQWRCQVdvaEJ3d0JDd3NnQ0VFQmFpRUlEQUVMQzBFQVFRTkIyZGdDSUJBUVBTQUVRY3dsYWd3QkN5QUFRUmhzSUFScVFYODJBZ3dnQVVFWWJDQUZha0VNYWd0QmZ6WUNBQ0FKSkFZTHd3Y0NEbjhJZlNNR0lRVWpCa0hRQUdva0JpQUZRVEJxSVJBZ0JVSE1BR29oRENBRlFjZ0FhaUVOSUFWQlFHc2hEaUFGUVRocUlROGdBQ2dDQUxJaEdTQUFLQUlFc2lFYUlBUkJ6Q1ZxSVJFQ2Z3SkFBMEFDUUNBS0lBSW9BZ1JPRFFKQkFDRUhBMEFnQjBFRFJ3UkFRUUFoQmdOQUlBWkJCRWNFUUNBSFFRUjBJQVZxSUFaQkFuUnFJQXBCTUd3Z0FXb2dCMEVFZEdvZ0JrRUNkR29vQWdBMkFnQWdCa0VCYWlFR0RBRUxDeUFIUVFGcUlRY01BUXNMUVFBaEJpQUNLQUlBSUFwQjhBQnNhaWdDQkNFSEEwQWdCaUFIS0FJRVNBUkFRUUFoQ3dOQUlBc2dCeWdDQUNJU0lBWkJGR3hxS0FJRVNBUkFJQUFnQlNBR1FSUnNJQkpxS0FJQUlnY2dDMEVVYkdvcUFnZ2dDMEVVYkNBSGFpb0NEQ0FNSUEwUWdnUkJBRWdnRENvQ0FDSVRRd0FBQUFCZGNrVUVRQ0FOS2dJQUloUWdHbUFnRkVNQUFBQUFYU0FUSUJsZ2NuSkZCRUFDUUNBRktnSU1JQVVxQWdBZ0FpZ0NBQ0FLUWZBQWJHb29BZ1FvQWdBZ0JrRVViR29vQWdBaUJ5QUxRUlJzYWlvQ0NDSVRsQ0FGS2dJRUlBdEJGR3dnQjJvcUFnd2lGSlNTa2lJV0lCYVVJQVVxQWh3Z0V5QUZLZ0lRbENBVUlBVXFBaFNVa3BJaUZ5QVhsSklnQlNvQ0xDQVRJQVVxQWlDVUlCUWdCU29DSkpTU2tpSVlJQmlVa3BFaEZTQUZLZ0lvSUJnZ0ZaV1VJQVVxQWdnZ0ZpQVZsWlFnQlNvQ0dDQVhJQldWbEpLU1E4M016TDFlUlFSQUlBNGdFemdDQUNBT0lCUTRBZ1FnQUNBRklBNGdEeENIQkNBUEtnSUVJaE1nQWlnQ0FDQUtRZkFBYkdvb0FnUW9BZ0FpQnlBR1FSUnNhaW9DRENJVVh3UkFJQk1nQmtFVWJDQUhhaW9DRUdBRVFDQUpRY2dCUmcwS0lBbEJHR3dnQTJvZ0NqWUNBQ0FKUVJoc0lBTnFJQVkyQWdRZ0NVRVliQ0FEYWlBTE5nSUlJQWxCR0d3Z0Eyb2dEQ2dDQURZQ0VDQUpRUmhzSUFOcUlBMG9BZ0EyQWhRZ0NVRVliQ0FEYWtFQU5nSU1JQWxCQVdvaENRd0RDd3NnRXlBVVF3QUFBRUNVWHdSQUlCTWdCa0VVYkNBSGFpb0NFRU1BQUFBL2xHQUVRQ0FJUWNnQlJnUi9JQkZCZnpZQ0FFSElBUVVnQ0VFWWJDQUVhaUFLTmdJQUlBaEJHR3dnQkdvZ0JqWUNCQ0FJUVJoc0lBUnFJQXMyQWdnZ0NFRVliQ0FFYWlBTUtBSUFOZ0lRSUFoQkdHd2dCR29nRFNnQ0FEWUNGQ0FJUVJoc0lBUnFRUUEyQWd3Z0NFRUJhZ3NoQ0FzTEN3c0xDeUFMUVFGcUlRc2dBaWdDQUNBS1FmQUFiR29vQWdRaEJ3d0JDd3NnQmtFQmFpRUdEQUVMQ3lBS1FRRnFJUW9NQVFzTFFRQkJBMEhaMkFJZ0VCQTlJQU5CekNWcURBRUxJQWxCR0d3Z0EycEJmellDRENBSVFSaHNJQVJxUVF4cUMwRi9OZ0lBSUFVa0JndlZFUUlVZndGOUl3WWhCU01HUVRCcUpBWWdCU0lNUVNocUlSSWdCVUVnYWlFVElBQkJBRWNnQVVFQVIzRWdBa0VBUjNFZ0EwRUFSM0VnQkVFQVIzRUVmeUFCS0FLWUFVRUJTQVIvUVg0RkFuOGdCRU1BQUFBQU9BSUFJQUZCQ0dvaERTQUJRVGhxSVFnZ0FVSG9BR29oQ2tFQUlRVURRQ0FGSUFFb0FnUklCRUFnRFNBQktBSUFJQVZCOEFCc2FrRU1haUFBUVRCcUlBVkJNR3hxRUxJQ0lBRW9BcGdCUVFGS0JFQWdDQ0FCS0FJQUlBVkI4QUJzYWtFTWFpQUFRWkFFYWlBRlFUQnNhaEN5QWlBQktBS1lBVUVDU2dSQUlBb2dBU2dDQUNBRlFmQUFiR3BCREdvZ0FFSHdCMm9nQlVFd2JHb1FzZ0lMQ3lBRlFRRnFJUVVNQVFzTElBQW9BZ0JCQVVZRVFDQUFRUXhxSWhRb0FnQWdBRUV3YWlBQklBQkI4QlJxSWc0Z0FFSElPbW9pQ2hETkJpQUFRUVJxSVE4Z0FFRUlhaUVRQlNBQVFRUnFJZzhvQWdBZ0FFRUlhaUlRS0FJQUlBQkJNR29nQVNBQVFmQVVhaUlPSUFCQnlEcHFJZ29RekFZZ0FFRU1haUVVQ3lBQVFlRG5BR29oRnlBQlFad0JhaUVWSUFCQjBBdHFJUllnRGlFSUEwQUNRQ0FMSUFBb0FpUk9EUUJCQUNFSklBWWhCeUFJSVFVRFFBSkFJQWtnRnlnQ0FFNEVRQ0FGSVFnTUFRc2dDeUFBS0FJa1JnUkFJQVVoQ0F3QkN5QUZJQlVnQnlBV0lBOG9BZ0FnRUNnQ0FCQ0ZCQ0lJUVFCSUJFQWdCU0FPUndSQUlBVWhDQXdDQ3lBS0lCVWdCeUFXSUE4b0FnQWdFQ2dDQUJDRkJDSUlRUUJJQkg4Z0NpRUlEQUlGSUFvTElRVUxJQWxCQW5RZ0RHb2dDRUVZYkNBRmFpSVJOZ0lBSUFCQjBBdHFJQWRCQTNScUlBaEJHR3dnQldvb0FoQTJBZ0FnQUNBSFFRTjBha0hVQzJvZ0NFRVliQ0FGYWlnQ0ZEWUNBQ0FBUWVUbkFHb2dDVUUwYkdvZ0FEWUNBQ0FBSUFsQk5HeHFRZWpuQUdvZ0FUWUNBQ0FBSUFsQk5HeHFRZXpuQUdvZ0VUWUNBQ0FBSUFsQk5HeHFRZkRuQUdvZ0FqWUNBQ0FKUVFGcUlRa2dCaUFIUVFGcUlnZ2dDRUVGUmhzaEJ5QUxRUUZxSVFzTUFRc0xJQWxGRFFCQkFDRUhJQVloQlFOQUlBY2dDVWNFUUNBQUlBZEJOR3hxUVpUb0FHb2dBRUhrNXdCcUlBZEJOR3hxS0FJQUlBQWdCMEUwYkdwQjZPY0FhaWdDQUNBQUlBZEJOR3hxUWV6bkFHb29BZ0FnQUNBSFFUUnNha0h3NXdCcUtBSUFJQUFnQjBFMGJHcEI5T2NBYWlnQ0FDQUFJQWRCTkd4cVFmam5BR29nQUNBSFFUUnNha0g4NXdCcUlnWVF5QVlpRVRZQ0FDQVJSUVJBSUFZcUFnQWdBQ29DS0Y0RVFDQUFLQUlBUVFGR0JFQWdGQ2dDQUNJR1FlZ0FhaUFBSUFkQk5HeHFRWURvQUdvcUFnQzdJQUFnQjBFMGJHcEJoT2dBYWlvQ0FMc2dFaUFUSUFZb0FyQUJFTjhFSUFCQjBBNXFJQVZCQTNScUlCSXJBd0MyT0FJQUlBQWdCVUVEZEdwQjFBNXFJQk1yQXdDMk9BSUFCU0FBUWRBT2FpQUZRUU4wYWlBQUlBZEJOR3hxUVlEb0FHb29BZ0EyQWdBZ0FDQUZRUU4wYWtIVURtb2dBQ0FIUVRSc2FrR0U2QUJxS0FJQU5nSUFDeUFBUVpBUmFpQUZRUXhzYWlBQUlBZEJOR3hxUVlqb0FHb29BZ0EyQWdBZ0FDQUZRUXhzYWtHVUVXb2dBQ0FIUVRSc2FrR002QUJxS0FJQU5nSUFJQUFnQlVFTWJHcEJtQkZxSUFBZ0IwRTBiR3BCa09nQWFpZ0NBRFlDQUNBQVFkQUxhaUFGUVFOMGFpQUhRUUowSUF4cUtBSUFJZ1lvQWhBMkFnQWdBQ0FGUVFOMGFrSFVDMm9nQmlnQ0ZEWUNBQ0FBUWFEZ0FHb2dCVUVZYkdvZ0JpZ0NBRFlDQUNBQUlBVkJHR3hxUWFUZ0FHb2dCaWdDQkRZQ0FDQUFJQVZCR0d4cVFhamdBR29nQmlnQ0NEWUNBQ0FBSUFWQkdHeHFRYXpnQUdwQkFEWUNBQ0FGUVFGcUlRVUxDeUFIUVFGcUlRY01BUXNMSUFVaEJnd0JDd3RCQUNFQ0EwQWdBaUFHU0FSQUlBRkJuQUZxSUFKQkdHeHFJZ1VnQUVHZzRBQnFJQUpCR0d4cUlnZ3BBZ0EzQWdBZ0JTQUlLUUlJTndJSUlBVWdDQ2tDRURjQ0VDQUNRUUZxSVFJTUFRc0xJQUVnQmtFWWJHcEJmellDcUFFZ0JrRURTQ0VDSUFBb0FnQkJBVVlFUUNBQ0JFQWdBVUVBTmdLWUFVRjlEQUlMSUFRZ0FDZ0NFQ0FOSUFCQjBBNXFJZ0lnQUVHUUVXb2lCU0FHSUFOQkFCRGJBU0laT0FJQUlCa2dBQ29DTEY0RVFDQUFLQUlRUkFBQUFLQ1ptZWsvRUkwQklBUWdBQ2dDRUNBRElBSWdCU0FHSUFOQkFSRGJBU0laT0FJQUlCa2dBQ29DTEY0RVFDQUFLQUlRUkFBQUFFQXpNK00vRUkwQklBUWdBQ2dDRUNBRElBSWdCU0FHSUFOQkFSRGJBU0laT0FJQUlCa2dBQ29DTEY0RVFDQUFLQUlRUkFBQUFLQ1ptZGsvRUkwQklBUWdBQ2dDRUNBRElBSWdCU0FHSUFOQkFSRGJBU0laT0FJQUlCa2dBQ29DTEY0RVFDQUFLQUlRUkFBQUFBQUFBQUFBRUkwQklBUWdBQ2dDRUNBRElBSWdCU0FHSUFOQkFSRGJBU0laT0FJQUlCa2dBQ29DTEY0RVFDQUJRUUEyQXBnQlFYd01CZ3NMQ3dzTEJTQUNCRUFnQVVFQU5nS1lBVUY5REFJTElBUWdEU0FBUWRBT2FpSUNJQUJCa0JGcUlnVWdCaUFEUVFCREFBQ0FQeERhQVNJWk9BSUFJQmtnQUNvQ0xGNEVRQ0FFSUFNZ0FpQUZJQVlnQTBFQlE4M01URDhRMmdFaUdUZ0NBQ0FaSUFBcUFpeGVCRUFnQkNBRElBSWdCU0FHSUFOQkFVT2FtUmsvRU5vQkloazRBZ0FnR1NBQUtnSXNYZ1JBSUFRZ0F5QUNJQVVnQmlBRFFRRkR6Y3pNUGhEYUFTSVpPQUlBSUJrZ0FDb0NMRjRFUUNBRUlBTWdBaUFGSUFZZ0EwRUJRd0FBQUFBUTJnRWlHVGdDQUNBWklBQXFBaXhlQkVBZ0FVRUFOZ0tZQVVGOERBWUxDd3NMQ3dzZ0FTQUJLQUtZQVVFQmFqWUNtQUZCQUNFQUEwQWdBRUVEUndSQVFRQWhBZ05BSUFKQkJFY0VRQ0FCUWVnQWFpQUFRUVIwYWlBQ1FRSjBhaUFCUVRocUlBQkJCSFJxSUFKQkFuUnFLQUlBTmdJQUlBSkJBV29oQWd3QkN3c2dBRUVCYWlFQURBRUxDMEVBSVFBRFFDQUFRUU5IQkVCQkFDRUNBMEFnQWtFRVJ3UkFJQUZCT0dvZ0FFRUVkR29nQWtFQ2RHb2dBVUVJYWlBQVFRUjBhaUFDUVFKMGFpZ0NBRFlDQUNBQ1FRRnFJUUlNQVFzTElBQkJBV29oQUF3QkN3dEJBQ0VBQTM4Z0FFRURSZ1IvUVFBRlFRQWhBZ05BSUFKQkJFY0VRQ0FCUVFocUlBQkJCSFJxSUFKQkFuUnFJQUJCQkhRZ0Eyb2dBa0VDZEdvb0FnQTJBZ0FnQWtFQmFpRUNEQUVMQ3lBQVFRRnFJUUFNQVFzTEN3c0ZRWDhMSVJnZ0RDUUdJQmdMd1FFQkEzOGpCaUVFSXdaQkVHb2tCa0drNndBUVJDSURSUVJBUVFCQkEwRzUyQUlnQkJBOVFRRVFBUXNnQkVFSWFpRUZJQU1nQURZQ0ZDQURJQUUyQWdRZ0F5QUNOZ0lJSUFOQkdUWUNHQ0FEUVFzMkFod2dBMEVMTmdJZ0lBTkJDallDSkNBRFE1cVpHVDg0QWlnZ0EwTUFBQUJBT0FJc0lBTkI0T2NBYWtFQk5nSUFJQU5COU9jQWFpQUJJQUpzRUVRaUFEWUNBQ0FBQkVBZ0EwSDQ1d0JxUVFBMkFnQWdCQ1FHSUFNUEJVRUFRUU5CdWRnQ0lBVVFQVUVCRUFFTFFRQUxMd0FnQUNnQ0NDQUJRUUowYWlJQktBSUFCSDhnQVVFQU5nSUFJQUFnQUNnQ0FFRi9hallDQUVFQUJVRi9DeG9MUGdBZ0FTQUFLQUlBSUFBb0FnUVF6d1lpQVVFQk5nSUFJQUVnQURZQ0RDQUJJQUJCQ0dvUTR3SWlBRFlDRUNBQVJBQUFBQUFBQUFBQUVJMEJJQUVMdWdFQkJuOGdBQ2dDQUNFQlFiVEVBeWdDQUNJQ0JFQUNRQ0FDSUFKQmYyb2lCSEZGSWdVRWZ5QUJJQVJ4QlNBQklBSkpCSDhnQVFVZ0FTQUNFRTRMQ3lJR1FRSjBRYkRFQXlnQ0FHb29BZ0FpQUFSL0EwQWdBQ2dDQUNJQVJRUkFRUUFoQUF3REN5QUFLQUlFSWdNZ0FVWUVRQ0FCSUFBb0FnaEdEUU1GSUFVRWZ5QURJQVJ4QlNBRElBSlBCSDhnQXlBQ0VFNEZJQU1MQ3lBR1J3UkFRUUFoQUF3RUN3c01BQUFMQUFWQkFBc2hBQXNGUVFBaEFBc2dBQXY3QWdFR2Z5TUdJUU1qQmtFd2FpUUdJQU5CR0dvaEJTQURRUkJxSVFZZ0EwRUlhaUVISUFOQklHb2lBaUFBTmdJQUlBTkJIR29pQkNBQk5nSUFJQUlRVXdSL0FuOGdBaEJTSVFBZ0JCRFNCZ1IvSUFCQkNHb2lBU0FFRUt3RFFiZ0JFRXdhSUFBb0Fnd2hBZ0pBQWtBZ0FTZ0NBQ0lFSUFBb0F0QUJSdzBBSUFBb0F0UUJJQUpIRFFBTUFRc2dBeUFFTmdJQUlBTWdBallDQkVFQVFRSkJtZGNDSUFNUVBTQUJJQUFvQXRBQklBQW9BdFFCSUFFUStRc0xJQUFRcVFNZ0FDQUJFTHdMSWdJMkFzQUJJQUpGQkVCQkFFRURRY2pYQWlBSEVEMUJmd3dDQ3lBQUlBSVFvZ2tpQWpZQzJBRWdBa1VFUUVFQVFRTkI3dGNDSUFZUVBVRi9EQUlMSUFJZ0FDZ0MyQU1RNHdnZ0FDQUJRUWhxRUs4SklnRTJBdVFCSUFFRVFDQUFLQUxZQVNBQUtBTGNBUkRIQnlBQUtBTEFBU0FBS3dPNEFpQUFLd1BBQWlBQVFkZ0NhaERHQ3lBQUlBQW9Bc0FCRUlBRU5nTG9BUVZCQUVFRFFaUFlBaUFGRUQwTFFRQUZRWDhMQ3dWQmZ3c2FJQU1rQmdzekFRSi9Jd1loQkNNR1FSQnFKQVlnQkNBQklBSWdBeUFBUVQ5eFFjb0JhaEVFQURZQ0FDQUVLQUlBSVFVZ0JDUUdJQVVMN3dJQkNIOGdBU2dDQUNJRktBSUVJUU5Cb01RREtBSUFJZ1JCZjJvaEJpQUVJQVp4UlNJSUJIOGdBeUFHY1FVZ0F5QUVUd1IvSUFNZ0JCQk9CU0FEQ3dzaEEwR2N4QU1vQWdBZ0EwRUNkR29pQnlnQ0FDRUJBMEFnQlNBQktBSUFJZ0pIQkVBZ0FpRUJEQUVMQ3dKL0FrQWdBVUdreEFOR0RRQWdBU2dDQkNFQ0lBZ0VmeUFDSUFaeEJTQUNJQVJQQkg4Z0FpQUVFRTRGSUFJTEN5QURSdzBBSUFVTUFRc2dCU2dDQUNJQ0JFQWdBaWdDQkNFQ0lBVWdDQVIvSUFJZ0JuRUZJQUlnQkU4RWZ5QUNJQVFRVGdVZ0Fnc0xJQU5HRFFFYUN5QUhRUUEyQWdBZ0JRc2lDU2dDQUNJQ0lRY2dBU0FDQkg4Z0FpZ0NCQ0VDSUFNZ0NBUi9JQUlnQm5FRklBSWdCRThFZnlBQ0lBUVFUZ1VnQWdzTElnSkhCSDlCbk1RREtBSUFJQUpCQW5ScUlBRTJBZ0FnQlNnQ0FBVWdCd3NGSUFjTE5nSUFJQWxCQURZQ0FFR294QU5CcU1RREtBSUFRWDlxTmdJQUlBQWdCVFlDQUNBQVFhVEVBellDQkNBQVFRRTZBQWdMWlFFQmZ5TUdJUUVqQmtFZ2FpUUdJQUFvQWdBaUFDZ0NBQm9nQVNBQU5nSUFJQUZCRUdvaUFDQUJLQUlBTmdJQUlBRkJCR29nQUJEVkJpQUJLQUlFSVFBZ0FVRUFOZ0lFSUFBRVFDQUJMQUFNQkVBZ0FFRVFhaEN6QXdzZ0FCQTRDeUFCSkFZTE9RRUNmeU1HSVFFakJrRVFhaVFHSUFGQkJHb2hBaUFBRUZNaUFBUkFJQUVnQURZQ0FDQUNJQUVvQWdBMkFnQWdBaERXQmdzZ0FTUUdDeThCQW44akJpRUNJd1pCRUdva0JpQUNJQUVnQUVIL0FIRkJDR29SQUFBMkFnQWdBaWdDQUNFRElBSWtCaUFEQzFBQkFuOGpCaUVESXdaQkVHb2tCaUFCSUFJb0FnQWdBQkNxQXlJQk5nSUFJQUZCQUVnRWZ5QURJQUEyQWdCQkFFRURRZlRUQWlBREVEMGdBaWdDQUJDNEFrRUFCVUVCQ3lFRUlBTWtCaUFFQzBFQkFuOGpCaUVESXdaQkVHb2tCaUFESUFJUXJRTWdBMEVNYWlJQ0lBRWdBeUFBUVQ5eFFZb0JhaEVDQURZQ0FDQUNLQUlBSVFRZ0F4QkhJQU1rQmlBRUMzd0JBbjhqQmlFRUl3WkJFR29rQmlBRElBQWdBaWdDQUJEbENTSUFOZ0lBSUFBRWZ3Si9Ba0FDUUFKQUlBQW9BbXdPQWdBQkFnc2dBVUVBRUlvQ0drRUJEQUlMSUFGQkFoQ0tBaHBCQVF3QkN5QUJRUU1RaWdJYVFRRUxCVUVBUVFOQnJkTUNJQVFRUFNBQ0tBSUFFTGdDUVFBTElRVWdCQ1FHSUFVTG5BTUJEMzhqQmlFREl3WkI0QUJxSkFZZ0EwSFFBR29oQ2lBRFFjZ0FhaUVMSUFOQlFHc2hEQ0FEUVRocUlRVWdBMEV3YWlFR0lBTkJLR29oRFNBRFFTQnFJUTRnQTBFWWFpRVBJQU5CRUdvaEJ5QURRUWhxSVFnZ0FDZ0M2QUVoRUNBRFFkZ0FhaUlFUVFBMkFnQWdBeUFDTmdJQVFRQkJBVUh1MEFJZ0F4QTlJQUlnQTBIVUFHb2lDUkNoQ1VFQVNBUi9JQWdnQWpZQ0FFRUFRUU5CaHRFQ0lBZ1FQVUVBQlFKL0lBY2dBVFlDQUVFQVFRRkJyTkVDSUFjUVBTQUpLQUlBSUFFUW9BbEJBRWdFUUVFQVFRTkJ4ZEVDSUE4UVBVRUFEQUVMSUFRZ0NSQ2pDVUVBU0FSQVFRQkJBMEhwMFFJZ0RoQTlRUUFNQVF0QkFFRUJRWVRTQWlBTkVEMGdCaUFDTmdJQVFRQkJBVUdOMGdJZ0JoQTlJQUJCK0FGcUlBRkJBblJxSUFJUXJna2lBRFlDQUNBQVJRUkFJQVVnQWpZQ0FFRUFRUU5CbzlJQ0lBVVFQUXRCQUVFQlFZVFNBaUFNRUQwZ0FVRUtSZ1JBUVg4UUFRc2dFQ0FFS0FJQUVKNEpRUUJJQkg5QkFFRURRY1RTQWlBTEVEMUJBQVVnQkJEL0EwRUFRUUZCM2RJQ0lBb1FQVUVCQ3dzTElSRWdBeVFHSUJFTE1RRUNmeU1HSVFNakJrRVFhaVFHSUFNZ0FTQUNJQUJCUDNGQmlnRnFFUUlBTmdJQUlBTW9BZ0FoQkNBREpBWWdCQXVZQVFFQ2Z5QUFRUUZHQkg5QkFnVWdBQ0FBUVg5cWNRUi9JQUFRMFFFRklBQUxDeUlBUWJURUF5Z0NBQ0lDU3dSQUlBQVFxd01GSUFBZ0Fra0VRRUc4eEFNb0FnQ3pRY0RFQXlvQ0FKV05FSklCSVFFZ0FrRi9haUFDY1VVZ0FrRUNTM0VFZnlBQlFRRkJJQ0FCUVg5cVoydDBJQUZCQWtrYkJTQUJFTkVCQ3lJQklBQWdBQ0FCU1JzaUFDQUNTUVJBSUFBUXF3TUxDd3NMU0FFQmZ5QUFRY2dCRUZFaUF6WUNBQ0FBUWJqRUF6WUNCQ0FESUFJb0FnQW9BZ0EyQWdnZ0EwRVFha0VBUWJnQkVFVWFJQUJCQVRvQUNDQURJQUUyQWdRZ0EwRUFOZ0lBQ3o4QkFuOGpCaUVDSXdaQkVHb2tCaUFDSUFFUXJRTWdBa0VNYWlJQklBSWdBRUgvQUhGQkNHb1JBQUEyQWdBZ0FTZ0NBQ0VESUFJUVJ5QUNKQVlnQXd2REJnSVFmd0Y4SXdZaEFpTUdRU0JxSkFZZ0FrRVlhaUVOSUFKQkVHb2hBeUFDUVFocUlRUWdBaUVNSUFBRVFBSkFJQUZGQkVCQkFFRURRYTJwQVNBRUVEMUJmeUVFREFFTElBQW9BZ1FoQWtFQUlRUURRQUpBSUFRZ0FrNE5BQ0FBS0FJSUlBUkJBblJxS0FJQVJRMEFJQVJCQVdvaEJBd0JDd3NnQWlBRVJnUkFRWDhoQkFVZ0FSQ0lBeUlMUlFSQVFRQkJBMEhhcVFFZ0F4QTlRWDhoQkF3Q0N5QUVRUUowSVE0Z0N4RDNBaUVCQWtBRFFBSkFJQXBCQkU4TkFpQUtJQTVxSVFoQkFDRUNRUUFoQlFOQUlBVkJBMGtFUUNBRlJTRVBJQVZCQWtZaEVFRUFJUWNnQUNnQ0hDRURBMEFnQnlBRFNBUkFRUUFoQmdOQUlBWWdBMGdFUUNBQlJRMEdJQUVRN2dRaEEwRUFFUGNDSVFFZ0FDZ0NEQ0FJUVFKMGFpZ0NBQ0FGSUFZZ0J5QUFLQUljYkdwQkEyeHFRUUowYWtIL0FTQURheUlETmdJQUlBQW9BaFFnQ0VFQ2RHb29BZ0FpRVNBR0lBY2dBQ2dDSEd4cVFRSjBhaUVKSUE4RVFDQUpJQU0yQWdBRklBa2dBeUFKS0FJQWFqWUNBQ0FRQkVBZ0JpQUhJQUFvQWh4c2FrRUNkQ0FSYWlJSklBa29BZ0JCQXhBNU5nSUFDd3NnQmtFQmFpRUdJQUlnQTJvaEFpQUFLQUljSVFNTUFRc0xJQWRCQVdvaEJ3d0JDd3NnQlVFQmFpRUZEQUVMQ3lBQ0lBQW9BaHdpQWlBQ1FRTnNiQkE1SVFkQkFDRUZRUUFoQXdOQUlBTWdBa0VEYkNBQ2JFa0VRQ0FBS0FJTUlBaEJBblJxS0FJQUlBTkJBblJxSWdZb0FnQWdCMnNoQWlBR0lBSTJBZ0FnQlNBQ0lBSnNhaUVGSUFOQkFXb2hBeUFBS0FJY0lRSU1BUXNMSUFBb0FoQWdDRUVEZEdwRVNLKzhtdkxYZWo0Z0JiZWZJaElnRWtRQUFBQUFBQUFBQUdFYk9RTUFRUUFoQlVFQUlRTURRQ0FESUFJZ0FteEpCRUFnQUNnQ0ZDQUlRUUowYWlnQ0FDQURRUUowYWlJR0tBSUFJQWRySVFJZ0JpQUNOZ0lBSUFVZ0FpQUNiR29oQlNBRFFRRnFJUU1nQUNnQ0hDRUNEQUVMQ3lBQUtBSVlJQWhCQTNScVJFaXZ2SnJ5MTNvK0lBVzNueUlTSUJKRUFBQUFBQUFBQUFCaEd6a0RBQ0FLUVFGcUlRb01BUXNMUVFCQkEwSDJxUUVnRFJBOUlBc1FPRUYvSVFRTUFnc2dDeEE0SUFBb0FnZ2dCRUVDZEdwQkFUWUNBQ0FBSUFBb0FnQkJBV28yQWdBTEN3VkJBRUVEUVpTcEFTQU1FRDFCZnlFRUN5QU1KQVlnQkFzc0FRSi9Jd1loQVNNR1FSQnFKQVlnQVNBQVFRRnhRUVpxRVJBQU5nSUFJQUVvQWdBaEFpQUJKQVlnQWdzdEFnRi9BbndqQmlFQ0l3WkJFR29rQmlBQ0lBRWdBRUVEY1JFU0FEa0RBQ0FDS3dNQUlRUWdBaVFHSUFRTGpBRUFJQUJCQURZQ3dBRWdBRUVBTmdMRUFTQUFRZ0EzQXN3QklBQkNBRGNDMUFFZ0FFSUFOd0xjQVNBQVFYNDJBdkFCSUFCQkFEWUM5QUVnQUVJQU53S2dBaUFBUWdBM0FxZ0NJQUJCZ0lDQS9BTTJBckFDSUFCRUxVTWM2K0kyR2o4NUE3Z0NJQUJFQUFBQUFBQkFqMEE1QThBQ0lBQkNBRGNDeUFJZ0FFSUFOd0xRQWlBQVFRSTJBdGdEQzBFQkEzOGdBQ2dDQ0NFQkEwQWdBUVJBSUFFb0FnQWhBeUFCRURnZ0F5RUJEQUVMQ3lBQUtBSUFJUUlnQUVFQU5nSUFJQUlFUUNBQUtBSUVHaUFDRURnTEM2d0tBUTEvSXdZaEN5TUdRYUFCYWlRR0lBdEJtQUZxSVFVZ0MwR1FBV29oRHlBTFFZQUJhaUlJUVFBMkFnQWdDRUcyQVRZQ0JDQUlRY01CTmdJSUlBaEJEVFlDREVGL0lRWURRQ0FIUVFSSEJFQWdBQ0FIUVFKMElBaHFLQUlBYWl3QUFDRUtJQWRCQVdvaEJ5QUtJQWtnQ2tIL0FYRWdDVUgvQVhGS0d5RUpJQW9nQmlBS1FmOEJjU0FHUWY4QmNVZ2JJUVlNQVFzTElBbEIvd0Z4SWdjZ0JrSC9BWEVpQ1d0QkhrZ0VmeUFDUVFBMkFnQWdBMFFBQUFBQUFBRHd2emtEQUVGK0JRSi9JQWNnQ1dwQkFYWWhDa0VBSVFjRFFDQUhRUVJIQkVBZ0JTQUhhaUFLSUFBZ0IwRUNkQ0FJYWlnQ0FHb3RBQUJMT2dBQUlBZEJBV29oQnd3QkN3dEJBQ0VKQTBBQ1FDQUpRUVJQRFFBZ0NVRUJhaUVJSUFVZ0NXb3NBQUJCQVVZRVFDQUlRUU54SUFWcUxBQUFRUUZHQkVBZ0NVRUNha0VEY1NBRmFpd0FBRVVOQWdzTElBZ2hDUXdCQ3dzZ0F3SjhBa0FDUUFKQUFrQUNRQUpBQWtBZ0NVSC8vLy8vQjNFT0JRRUNBd1FBQlFzZ0FrRUFOZ0lBSUFORUFBQUFBQUFBOEw4NUF3QkJmUXdIQzBIM0FDRUlRUUFoQlVIL0FTRUhBMEFnQlVFT1JnUkFEQVlGSUFWQmZXb2hEQ0FGUWY3Ly8vOEhjVUVNUmlFTklBVkJEbXdoRGtFQUlRWURRQ0FHUVE1SEJFQWdEQ0FHUVgxcWNrRUlUd1JBSUFaQi92Ly8vd2R4SVFNZ0JTQUdja0grLy8vL0IzRUVRQ0FOSUFORklBTkJERVp5Y1VVRVFDQUlJQXRxSUFBZ0JpQU9hbW90QUFBZ0Ntc2lBMEVmZGpvQUFDQUlRWDlxSVFnZ0EwRUFJQU5ySUFOQmYwb2JJZ01nQnlBRElBZElHeUVIQ3dzTElBWkJBV29oQmd3QkN3c2dCVUVCYWlFRkRBRUxBQUFMQUF0Qjl3QWhDRUgvQVNFSFFRQWhCZ05BSUFaQkRrWUVRQXdGQlNBR1FYMXFJUXdnQmtIKy8vLy9CM0VpQlVVaERTQUZRUXhHSVE1QkRTRUZBMEFnQlVGL1NnUkFJQVZCZldvZ0RISkJDRThFUUNBTklBVkJmbkZCREVZaUEzRkZCRUFnRGlBRElBVkJBa2x5Y1VVRVFDQUlJQXRxSUFBZ0JpQUZRUTVzYW1vdEFBQWdDbXNpQTBFZmRqb0FBQ0FJUVg5cUlRZ2dBMEVBSUFOcklBTkJmMG9iSWdNZ0J5QURJQWRJR3lFSEN3c0xJQVZCZjJvaEJRd0JDd3NnQmtFQmFpRUdEQUVMQUFBTEFBdEJEU0VGUWZjQUlRaEIvd0VoQndOQUlBVkJmMG9FUUNBRlFYMXFJUXdnQlVGK2NVRU1SaUFGUVFKSmNpRU5JQVZCRG13aERrRU5JUVlEUUNBR1FYOUtCRUFnRENBR1FYMXFja0VJVHdSQUlBWkJmbkZCREVZZ0RYRWdCU0FHY2tFQ1NYSkZCRUFnQ0NBTGFpQUFJQVlnRG1wcUxRQUFJQXBySWdOQkgzWTZBQUFnQ0VGL2FpRUlJQU5CQUNBRGF5QURRWDlLR3lJRElBY2dBeUFIU0JzaEJ3c0xJQVpCZjJvaEJnd0JDd3NnQlVGL2FpRUZEQUVGREFRTEFBQUxBQXRCRFNFRlFmY0FJUWhCL3dFaEJ3TkFJQVZCZjBvRVFDQUZRWDFxSVEwZ0JVRitjU0lNUVF4R0lRNGdERVVoRUVFQUlRWURRQ0FHUVE1SEJFQWdCa0Y5YWlBTmNrRUlUd1JBSUE0Z0JrSCsvLy8vQjNFaUEwVnhSUVJBSUFNZ0RISkZJQkFnQTBFTVJuRnlSUVJBSUFnZ0Myb2dBQ0FGSUFaQkRteHFhaTBBQUNBS2F5SURRUjkyT2dBQUlBaEJmMm9oQ0NBRFFRQWdBMnNnQTBGL1Noc2lBeUFISUFNZ0IwZ2JJUWNMQ3dzZ0JrRUJhaUVHREFFTEN5QUZRWDlxSVFVTUFRVU1Bd3NBQUFzQUN5QUNJQWsyQWdCRUFBQUFBQUFBOEQ4TUFRc2dCeUVBSUFJZ0NUWUNBRVFBQUFBQUFBRHdQeUFBdDBRQUFBQUFBQUErUUtNZ0FFRWVTaHNMT1FNQVFZNFdRZ0FnQ3lBUEVMVURJZ0JCQUVnRWYwRjhCU0FFQkVBZ0JDQUFOZ0lBQ3lBQklBOHBBd0EzQXdCQkFBc0xDeUVSSUFza0JpQVJDNWdCQVFKL0lBQkJBVVlFZjBFQ0JTQUFJQUJCZjJweEJIOGdBQkRSQVFVZ0FBc0xJZ0JCb01RREtBSUFJZ0pMQkVBZ0FCQ3lBd1VnQUNBQ1NRUkFRYWpFQXlnQ0FMTkJyTVFES2dJQWxZMFFrZ0VoQVNBQ1FYOXFJQUp4UlNBQ1FRSkxjUVIvSUFGQkFVRWdJQUZCZjJwbmEzUWdBVUVDU1JzRklBRVEwUUVMSWdFZ0FDQUFJQUZKR3lJQUlBSkpCRUFnQUJDeUF3c0xDd3RQQVFGL0lBQkI4QU1RVVNJRE5nSUFJQUJCcE1RRE5nSUVJQU1nQWlnQ0FDZ0NBRFlDQ0NBRFFSQnFJZ0pCQUVIZ0F4QkZHaUFDRU9RR0lBQkJBVG9BQ0NBRElBRTJBZ1FnQTBFQU5nSUFDMWdCQTM4akJpRUJJd1pCRUdva0JpQUJRUVJxSVFJZ0FTQUFOZ0lBSUFFUVV3Ui9JQUVRVWlnQzJBRWlBQVIvSUFJZ0FDZ0NGRFlDQUVFQUJVRi9DMFVoQUNBQ0tBSUFRWDhnQUJzRlFYOExJUU1nQVNRR0lBTUxYd0VDZnlNR0lRSWpCa0VRYWlRR0lBSkJCR29pQXlBQU5nSUFJQU1RVXdSQUlBTVFVaWdDMkFFaUFFRUFSeUFCUVFKSmNRUi9JQUFnQVRZQ0ZFRUFCVUYvQzBVRVFDQUNJQUUyQWdCQkFFRUJRWnkyQWlBQ0VEMExDeUFDSkFZTFlRRURmeU1HSVFFakJrRVFhaVFHSUFGQkJHb2hBaUFCSUFBMkFnQWdBUkJUQkg4Z0FSQlNLQUxZQVNJQVFRQkhJQUpCQUVkeEJIOGdBaUFBS0FJTU5nSUFRUUFGUVg4TFJTRUFJQUlvQWdCQmZ5QUFHd1ZCZndzaEF5QUJKQVlnQXd0ZkFRSi9Jd1loQWlNR1FSQnFKQVlnQWtFRWFpSURJQUEyQWdBZ0F4QlRCRUFnQXhCU0tBTFlBU0lBUVFCSElBRkJBa2x4Qkg4Z0FDQUJOZ0lNUVFBRlFYOExSUVJBSUFJZ0FUWUNBRUVBUVFGQnViWUNJQUlRUFFzTElBSWtCZ3RCQVFOL0l3WWhBU01HUVJCcUpBWWdBVUVFYWlFQ0lBRWdBRFlDQUNBQkVGTUVmeUFCRUZJb0F0Z0JJQUlRN2dnZ0FpZ0NBQVZCZndzaEF5QUJKQVlnQXd0QkFRRi9Jd1loQWlNR1FSQnFKQVlnQWlBQU5nSUFJQUlRVXdSQUlBSVFVaWdDMkFFaUFBUi9JQUJCbUlldkEyb2dBVFlDQUVFQUJVRi9DeG9MSUFJa0JndDdBZ0ovQW53akJpRUJJd1pCRUdva0JpQUJRUWhxSWdJZ0FEWUNBQ0FDRUZNRWZDQUNFRklvQXRnQklnQUVmQ0FBQkg4Z0FTQUFRWkNIcndOcUt3TUFPUU1BUVFBRlFYOExSU0VBSUFFckF3QkVBQUFBQUFBQThMOGdBQnNGUkFBQUFBQUFBUEMvQ3dWRUFBQUFBQUFBOEw4TElRUWdBU1FHSUFRTEtnRUNmd0ovSXdZaEFTTUdRUkJxSkFaQjc2Z0NRUU5COUlZQlFkSzJBa0VCUVFFUUNTQUJDeVFHQzNFQ0FuOEJmQ01HSVFJakJrRVFhaVFHSUFKQkNHb2lBeUFBTmdJQUlBTVFVd1JBSUFNUVVpRUFJQUZEQUFBQUFGOGdBVU1BQUlBL1lISkZCRUFnQWJzaEJDQUFLQUxZQVNJQUJFQWdBQ0FFRU9vSVJRUkFJQUlnQkRrREFFRUFRUUZCMTdZQ0lBSVFQUXNMQ3dzZ0FpUUdDMWdCQTM4akJpRUJJd1pCRUdva0JpQUJRUVJxSVFJZ0FTQUFOZ0lBSUFFUVV3Ui9JQUVRVWlnQzJBRWlBQVIvSUFJZ0FDZ0NHRFlDQUVFQUJVRi9DMFVoQUNBQ0tBSUFRWDhnQUJzRlFYOExJUU1nQVNRR0lBTUxTZ0VDZnlNR0lRSWpCa0VRYWlRR0lBSkJCR29pQXlBQU5nSUFJQU1RVXdSQUlBTVFVaWdDMkFFZ0FSQ0tBa1VFUUNBQ0lBRTJBZ0JCQUVFQlFmYTJBaUFDRUQwTEN5QUNKQVlMWVFFRGZ5TUdJUUVqQmtFUWFpUUdJQUZCQkdvaEFpQUJJQUEyQWdBZ0FSQlRCSDhnQVJCU0tBTFlBU0lBUVFCSElBSkJBRWR4Qkg4Z0FpQUFLQUlRTmdJQVFRQUZRWDhMUlNFQUlBSW9BZ0JCZnlBQUd3VkJmd3NoQXlBQkpBWWdBd3RyQVFKL0l3WWhBaU1HUVJCcUpBWWdBa0VFYWlJRElBQTJBZ0FnQXhCVEJFQWdBeEJTSVFBZ0FVSC9BVTBFUUNBQUtBTFlBU0lBUlNBQlFmOEJTM0lFZjBGL0JTQUFJQUUyQWhCQkFBdEZCRUFnQWlBQk5nSUFRUUJCQVVHWnR3SWdBaEE5Q3dzTElBSWtCZ3RKQVFOL0l3WWhBU01HUVJCcUpBWWdBVUVFYWlFQ0lBRWdBRFlDQUNBQkVGTUVmeUFCRUZJb0F0Z0JJQUlRL1FoRklRQWdBaWdDQUVGL0lBQWJCVUYvQ3lFRElBRWtCaUFEQzBvQkFuOGpCaUVDSXdaQkVHb2tCaUFDUVFScUlnTWdBRFlDQUNBREVGTUVRQ0FERUZJb0F0Z0JJQUVRK3dORkJFQWdBaUFCTmdJQVFRQkJBVUd6dHdJZ0FoQTlDd3NnQWlRR0N6a0NBWDhDZkNNR0lRRWpCa0VRYWlRR0lBRWdBRFlDQUNBQkVGTUVmQ0FCRUZJckE4QUNCVVFBQUFBQUFBRHd2d3NoQXlBQkpBWWdBd3NyQVFGL0l3WWhBaU1HUVJCcUpBWWdBaUFBTmdJQUlBSVFVd1JBSUFJUVVpQUJPUVBBQWdzZ0FpUUdDemtDQVg4Q2ZDTUdJUUVqQmtFUWFpUUdJQUVnQURZQ0FDQUJFRk1FZkNBQkVGSXJBN2dDQlVRQUFBQUFBQUR3dndzaEF5QUJKQVlnQXdzckFRRi9Jd1loQWlNR1FSQnFKQVlnQWlBQU5nSUFJQUlRVXdSQUlBSVFVaUFCT1FPNEFnc2dBaVFHQ3lzQkFuOENmeU1HSVFFakJrRVFhaVFHUVoybkFrRUJRYUNIQVVIV3R3SkIwZ0JCQVJBSklBRUxKQVlMQ1FCQjBJVUJLQUlBQzVzRUFnSi9BWDRqQmlFVEl3WkJrT0FBYWlRR0lCTkJnT0FBYWlFVUlBSkJmbXBCQTBrRVFBSkFJQkJCamhaSEJFQWdBVUVDSUJCQi93RnhJaFFnRkVFRGJDQURJQVFnQlNBR0lBY2dDQ0FKSUJNUSt3RkJBRWdFUUNBTlFYODJBZ0JCZWlFTkRBSUxJQk1nRkNBTklBNGdEeUFRSUJFUXFRY2hEU0FTUlEwQklCSkNBRGNEQUF3QkN5QUJRUUpCRGtFcUlBTWdCQ0FGSUFZZ0J5QUlSQUFBQUFBQUFPdy9JQk1RK3dGQkFFZ0VRQ0FOUVg4MkFnQkJlaUVOREFFTElCTWdGQ0FPSUE4Z0VSRG1CaUlPUVFCSUJFQWdEVUYvTmdJQUlBNGhEUXdCQ3lBVUtRTUFJaFZDZjFFRVFDQU5RWDgyQWdCQmV5RU5EQUVMSUEwZ0ZhZEIvLzhCY1VFQUlCVkNnSUQrL3crRFVCczJBZ0FnRWdSQUlCSWdGVGNEQUFzZ0RpRU5Dd1ZCQVNFTkN3Si9Ba0FDUUNBQ0RnVUFBQUVBQUFFTElBQkZCRUFnQ2tGL05nSUFRWDhNQWdzZ0FDZ0NIQ0lPUVFKMElROENRQUpBSUFJT0JBQUJBUUFCQ3lBQlFRQWdEaUFQSUFNZ0JDQUZJQVlnQnlBSUlBa2dFeEQ3QVVFQVNBUkFJQXBCZnpZQ0FFRjZEQU1GSUFCQkFDQVRJQUFvQWh3Z0NpQUxJQXdRdGdNTUF3c0FDeUFCUVFFZ0RpQVBJQU1nQkNBRklBWWdCeUFJSUFrZ0V4RDdBVUVBU0FSQUlBcEJmellDQUVGNkRBSUZJQUJCQVNBVElBQW9BaHdnQ2lBTElBd1F0Z01NQWdzQUMwRUJDeUVBSUExQkFVY0VRQ0FOSUFCQkFDQUFJQTF4UVFCSUd5QUFRUUZHR3lFQUN5QVRKQVlnQUFzckFRSi9BbjhqQmlFQkl3WkJFR29rQmtHUnB3SkJBa0draHdGQjJiY0NRUzVCOGdBUUNTQUJDeVFHQ3dzQVFkQ0ZBU0FBTmdJQUN6a0JBbjhqQmlFQkl3WkJFR29rQmlBQklBQTJBZ0FnQVJCVEJIOGdBUkJTS0FMWUFVSGtocWNDYWlnQ0FBVkJBQXNoQWlBQkpBWWdBZ3RCQVFOL0l3WWhBU01HUVJCcUpBWWdBVUVFYWlFQ0lBRWdBRFlDQUNBQkVGTUVmeUFCRUZJb0F0Z0JJQUlRZ0FrZ0FpZ0NBQVZCQUFzaEF5QUJKQVlnQXd0YkFRSi9Jd1loQWlNR1FSQnFKQVlnQWtFRWFpSURJQUEyQWdBZ0F4QlRCRUFnQXhCU0tBTFlBU0FCUVFCSElnQVEvUU1nQWtIZHR3SkI0YmNDSUFBYk5nSUFRUUJCQVVIbXR3SWdBaEE5QlVFQUlRRUxJQUlrQmlBQkMrRUZBZ3AvQVgwakJpRUNJd1pCMEFCcUpBWWdBa0U0YWlFSUlBSkJNR29oQ1NBQ1Fjd0FhaUVFSUFKQnhBQnFJUVVnQWtGQWF5RUhJQUpCeUFCcUlnTWdBRFlDQUNBREVGTUVmd0ovSUFNUVVpSURLQUwwQVNBQlRBUkFRZkNHQVNnQ0FBd0JDeUFFUVFBMkFnQWdCVUYvTmdJQUlBZERBQUNBdnpnQ0FBSkFBa0FnQXlnQzhBRWlBRUYrUmdSQUlBTW9BdWdCSUFNb0Fzd0JFSmNKSUFNb0F1Z0JJZ0FFZnlBRUlBQW9BalEyQWdBZ0JTQUFLQUk0TmdJQVFRQUZRWDhMR2lBRktBSUFJUVlnQkNnQ0FDRUZRWDhoQUVFQUlRUURRQ0FFSUFaSUJFQWdBU0FFUWNRQWJDQUZhaWdDTUVZRVFDQUVRY1FBYkNBRmFpZ0NQRVVFUUFKQUlBY2dBRUYvUmdSL0lBUkJ4QUJzSUFWcUtBSTBCU0FIS2dJQUlBUkJ4QUJzSUFWcUtnSTBJZ3hlUlEwQklBeThDellDQUNBRUlRQUxDd3NnQkVFQmFpRUVEQUVMQ3lBQVFYOU1CRUFnQTBGK05nTHdBUXdDQ3lBRElBVW9BakFpQ2pZQzhBRkJBQ0VFQTBBZ0JFRURSd1JBUVFBaEJnTkFJQVpCQkVjRVFDQUVRUVIwSUFKcUlBWkJBblJxSUFCQnhBQnNJQVZxSUFSQkJIUnFJQVpCQW5ScUtBSUFOZ0lBSUFaQkFXb2hCZ3dCQ3dzZ0JFRUJhaUVFREFFTEN5QURRZmdCYWlBS1FRSjBhaWdDQUNBQ0VLMEpJQU1vQXZBQklRQUxJQUJCZjB3TkFDQURLQUxzQVNBRFFmZ0JhaUFBUVFKMGFpZ0NBQ0FES0FMRUFTQUNJQWNRemdZaUFFRUFTQVJBSUFrZ0FEWUNBRUVBUVFGQi9MY0NJQWtRUFNBRFFYNDJBdkFCREFFTElBTW9BdlFCUVg5cUlRQWdDQ0FEUWZnQmFpQURLQUx3QVVFQ2RHb29BZ0EyQWdBZ0NDQUFOZ0lFUVFCQkFVR1B1QUlnQ0JBOUlBTW9BdkFCUVg5TURRQkJBeUFCSUFjcUFnQzdJQUlxQWdDN0lBSXFBZ1M3SUFJcUFnaTdJQUlxQWd5N0lBSXFBaEM3SUFJcUFoUzdJQUlxQWhpN0lBSXFBaHk3SUFJcUFpQzdJQUlxQWlTN0lBSXFBaWk3SUFJcUFpeTdFQ3NhREFFTFFRUWdBUkFzR2d0QkFBc0ZRZWlHQVNnQ0FBc2hDeUFDSkFZZ0N3dWFBZ0VDZnlNR0lRSWpCa0VRYWlRR0lBSWdBRFlDQUNBQ0VGTUVmeUFDRUZJb0F0Z0JJZ0FvQWl3Z0FVb0VmMEVDUWVpOEF5QUFRVEJxSUFGQkNIUnFJQUZCQUVnYklnQW9BZ0FnQUNnQ0JDQUFLQUlJSUFBb0Fnd2dBQ2dDRUNBQUtBSVVJQUFvQWhnZ0FDc0RJQ0FBS3dNb0lBQXJBekFnQUNzRE9DQUFRVUJyS3dNQUlBQXJBMGdnQUNzRFVDQUFLd05ZSUFBckEyQWdBQ3NEYUNBQUt3TndJQUFyQTNnZ0FDc0RnQUVnQUNzRGlBRWdBQ3NEa0FFZ0FDc0RtQUVnQUNzRG9BRWdBQ3NEcUFFZ0FDc0RzQUVnQUNzRHVBRWdBQ3NEd0FFZ0FDc0R5QUVnQUNzRDBBRWdBQ3NEMkFFZ0FDc0Q0QUVnQUNnQzhBRVFLQnBCQUFWQjhJWUJLQUlBQ3dWQjZJWUJLQUlBQ3lFRElBSWtCaUFEQzgwQkFRTi9Jd1loQXlNR1FSQnFKQVlnQXlBQU5nSUFJQU1RVXdSL0FuOGdBeEJTSWdRb0FzZ0NJUUFnQVVFQVNDQUVLQUxNQWlBQWEwRURkU0FCVFhJRVFFSHNoZ0VvQWdBTUFRc2dBa0VBU0NBQlFRTjBJQUJxS0FJRUlnQW9BZ1FnQWt4eUJIOUI4SVlCS0FJQUJTQUFLQUlBSWdBZ0FrSEFBbXhxUVJCcUVMUUNRUUVnQWtIQUFtd2dBR29vQXJBQ0lBSkJ3QUpzSUFCcUtBSUFJQUpCd0FKc0lBQnFLQUlFSUFKQndBSnNJQUJxS3dNSUVDb2FRUUFMQ3dWQjZJWUJLQUlBQ3lFRklBTWtCaUFGQ3lnQkFYOGpCaUVCSXdaQkVHb2tCaUFCSUFBMkFnQWdBUkJUQkVBZ0FSQlNHZ3NnQVNRR1FYOExPQUVDZnlNR0lRRWpCa0VRYWlRR0lBRWdBRFlDQUNBQkVGTUVmeUFCRUZJb0F0Z0JRU3hxQlVIb2hnRUxLQUlBSVFJZ0FTUUdJQUlMb0FVQkNYOUJDRUVJRUlzQklRZEJDRUVCRUlzQklRaEJDRUVCRUlzQklRa0RRQ0FGUVFSSEJFQWdCeWdDQUNJRUlBVkJCSFFpQTBFRGRHb2dCVUVFZENBQWFpSUdLd01BT1FNQUlBTkJBWEpCQTNRZ0JHb2dCVUVFZENBQWFpSUtLd01JT1FNQUlBTkJBbkpCQTNRZ0JHcEVBQUFBQUFBQThEODVBd0FnQTBFRGNrRURkQ0FFYWtRQUFBQUFBQUFBQURrREFDQURRUVJ5UVFOMElBUnFSQUFBQUFBQUFBQUFPUU1BSUFOQkJYSkJBM1FnQkdwRUFBQUFBQUFBQUFBNUF3QWdBMEVHY2tFRGRDQUVhaUFHS3dNQUlBVkJCSFFnQVdvaUN5c0RBS0thT1FNQUlBTkJCM0pCQTNRZ0JHb2dDaXNEQ0NBTEt3TUFvcG81QXdBZ0EwRUlja0VEZENBRWFrUUFBQUFBQUFBQUFEa0RBQ0FEUVFseVFRTjBJQVJxUkFBQUFBQUFBQUFBT1FNQUlBTkJDbkpCQTNRZ0JHcEVBQUFBQUFBQUFBQTVBd0FnQTBFTGNrRURkQ0FFYWlBR0t3TUFPUU1BSUFOQkRISkJBM1FnQkdvZ0Npc0RDRGtEQUNBRFFRMXlRUU4wSUFScVJBQUFBQUFBQVBBL09RTUFJQU5CRG5KQkEzUWdCR29nQmlzREFDQUZRUVIwSUFGcUlnWXJBd2lpbWprREFDQURRUTl5UVFOMElBUnFJQW9yQXdnZ0Jpc0RDS0thT1FNQUlBZ29BZ0FpQkNBRlFRRjBJZ05CQTNScUlBc3JBd0E1QXdBZ0EwRUJja0VEZENBRWFpQUdLd01JT1FNQUlBVkJBV29oQlF3QkN3c2dCeERXQVJvZ0NTQUhJQWdRclFJYUlBa29BZ0FoQVVFQUlRQURRQ0FBUVFKSEJFQWdBRUVZYkNBQ2FpQUFRUU5zSWdOQkEzUWdBV29yQXdBNUF3QWdBRUVZYkNBQ2FpQURRUUZxUVFOMElBRnFLd01BT1FNSUlBQkJHR3dnQW1vZ0EwRUNha0VEZENBQmFpc0RBRGtERUNBQVFRRnFJUUFNQVFzTElBSWdBU3NETURrRE1DQUNJQUVyQXpnNUF6Z2dBa0ZBYTBRQUFBQUFBQUR3UHprREFDQUhFRWtnQ0JCSklBa1FTUXZTRXdJUGZ3RjhJd1loRGlNR1FSQnFKQVlnQkNnQ0FDSUhJUXdnQVNBQ1FYOXFJaEJzUVFGMElBZHFJUVlEUUNBRklBRklCRUFnQmtFQU93RUFJQXhCQURzQkFDQU1RUUpxSVF3Z0JVRUJhaUVGSUFaQkFtb2hCZ3dCQ3d0QkFDRU1JQWNpQmlBQlFYOXFJaEZCQVhScUlRVURRQ0FNSUFKSUJFQWdCVUVBT3dFQUlBWkJBRHNCQUNBQlFRRjBJQVpxSVFZZ0RFRUJhaUVNSUFGQkFYUWdCV29oQlF3QkN3c2dCRUdRZ01nQWFpRUdRUUFnQVdzaEVpQUFJQUZCQVdvaUFHb2hEU0FBSUFOcUlReEJBU0VLUVFBaEJTQUFRUUYwSUFkcUlRTUNmd0pBQTBBQ1FDQUtJQkJPRFFJZ0JTRUFRUUVoQ0NBRElRc0RRQ0FJSUJGSUJFQWdEUzBBQUNBTUxRQUFTZ1JBSUF0QkFEc0JBQVVDUUNBU1FRRjBJQXRxSWc4dUFRQWlBMEVBU2dSQUlBc2dBenNCQUNBRFFRZHNJZ1ZCQW5RZ0JHcEI5UC9QQUdvaUF5QURLQUlBUVFGcU5nSUFJQVZCQW5RZ0JHcEIrUC9QQUdvaUF5QUlJQU1vQWdCcU5nSUFJQVZCQW5RZ0JHcEIvUC9QQUdvaUF5QUtJQU1vQWdCcU5nSUFJQVZCQW5RZ0JHcEJqSURRQUdvZ0NqWUNBQXdCQ3lBUFFYNXFMZ0VBSWdraEJ5QUpRUUJLSVFVZ0R5NEJBaUlEUVFCTUJFQWdCUVJBSUFzZ0NUc0JBQ0FIUVFkc0lnVkJBblFnQkdwQjlQL1BBR29pQXlBREtBSUFRUUZxTmdJQUlBVkJBblFnQkdwQitQL1BBR29pQXlBSUlBTW9BZ0JxTmdJQUlBVkJBblFnQkdwQi9QL1BBR29pQXlBS0lBTW9BZ0JxTmdJQUlBVkJBblFnQkdwQmhJRFFBR29pQXlnQ0FDQUlTQVJBSUFNZ0NEWUNBQXNnQlVFQ2RDQUVha0dNZ05BQWFpQUtOZ0lBREFJTElBdEJmbW91QVFBaUEwRUFTZ1JBSUFzZ0F6c0JBQ0FEUVFkc0lnVkJBblFnQkdwQjlQL1BBR29pQXlBREtBSUFRUUZxTmdJQUlBVkJBblFnQkdwQitQL1BBR29pQXlBSUlBTW9BZ0JxTmdJQUlBVkJBblFnQkdwQi9QL1BBR29pQXlBS0lBTW9BZ0JxTmdJQUlBVkJBblFnQkdwQmhJRFFBR29pQXlnQ0FDQUlUZzBDSUFNZ0NEWUNBQVVnQUVILy93RktEUVlnQ3lBQVFRRnFJZ003QVFBZ0JFR1FnTWdBYWlBQVFRSjBhaUFEUVJCMFFSQjFOZ0lBSUFSQmtJRFFBR29nQUVFSGJDSUFRUUowYWtFQk5nSUFJQUJCQW5RZ0JHcEJsSURRQUdvZ0NEWUNBQ0FBUVFKMElBUnFRWmlBMEFCcUlBbzJBZ0FnQUVFQ2RDQUVha0djZ05BQWFpQUlOZ0lBSUFCQkFuUWdCR3BCb0lEUUFHb2dDRFlDQUNBQVFRSjBJQVJxUWFTQTBBQnFJQW8yQWdBZ0FFRUNkQ0FFYWtHb2dOQUFhaUFLTmdJQUlBTWhBQXNNQVFzZ0JRUkFBa0FnQTBFQ2RDQUVha0dNZ01nQWFpZ0NBQ0lESUFkQkFuUWdCR3BCaklESUFHb29BZ0FpQjBvRVFDQUxJQWM3QVFBZ0JpRUZRUUFoQ1FOQUlBa2dBRTRFUUNBSElRTU1Bd3NnQXlBRktBSUFSZ1JBSUFVZ0J6WUNBQXNnQlVFRWFpRUZJQWxCQVdvaENRd0FBQXNBQlNBTElBTTdBUUFnQXlBSFNBUkFJQVloQlVFQUlRa0RRQ0FKSUFCT0RRTWdCeUFGS0FJQVJnUkFJQVVnQXpZQ0FBc2dCVUVFYWlFRklBbEJBV29oQ1F3QUFBc0FDd3NMSUFOQkVIUkJFSFZCQjJ3aUJVRUNkQ0FFYWtIMC84OEFhaUlESUFNb0FnQkJBV28yQWdBZ0JVRUNkQ0FFYWtINC84OEFhaUlESUFnZ0F5Z0NBR28yQWdBZ0JVRUNkQ0FFYWtIOC84OEFhaUlESUFvZ0F5Z0NBR28yQWdBZ0JVRUNkQ0FFYWtHTWdOQUFhaUFLTmdJQURBRUxJQXRCZm1vdUFRQWlCVUVBVEFSQUlBc2dBenNCQUNBRFFRZHNJZ1ZCQW5RZ0JHcEI5UC9QQUdvaUF5QURLQUlBUVFGcU5nSUFJQVZCQW5RZ0JHcEIrUC9QQUdvaUF5QUlJQU1vQWdCcU5nSUFJQVZCQW5RZ0JHcEIvUC9QQUdvaUF5QUtJQU1vQWdCcU5nSUFJQVZCQW5RZ0JHcEJnSURRQUdvaUF5Z0NBQ0FJU2dSQUlBTWdDRFlDQUFzZ0JVRUNkQ0FFYWtHTWdOQUFhaUFLTmdJQURBRUxBa0FnQTBFQ2RDQUVha0dNZ01nQWFpZ0NBQ0lESUFWQkFuUWdCR3BCaklESUFHb29BZ0FpQjBvRVFDQUxJQWM3QVFBZ0JpRUZRUUFoQ1FOQUlBa2dBRTRFUUNBSElRTU1Bd3NnQXlBRktBSUFSZ1JBSUFVZ0J6WUNBQXNnQlVFRWFpRUZJQWxCQVdvaENRd0FBQXNBQlNBTElBTTdBUUFnQXlBSFNBUkFJQVloQlVFQUlRa0RRQ0FKSUFCT0RRTWdCeUFGS0FJQVJnUkFJQVVnQXpZQ0FBc2dCVUVFYWlFRklBbEJBV29oQ1F3QUFBc0FDd3NMSUFOQkVIUkJFSFZCQjJ3aUJVRUNkQ0FFYWtIMC84OEFhaUlESUFNb0FnQkJBV28yQWdBZ0JVRUNkQ0FFYWtINC84OEFhaUlESUFnZ0F5Z0NBR28yQWdBZ0JVRUNkQ0FFYWtIOC84OEFhaUlESUFvZ0F5Z0NBR28yQWdBTEN5QU5RUUZxSVEwZ0RFRUJhaUVNSUFoQkFXb2hDQ0FMUVFKcUlRc01BUXNMSUExQkFtb2hEU0FNUVFKcUlRd2dDa0VCYWlFS0lBQWhCU0FMUVFScUlRTU1BUXNMUVFCQkEwR29wUUVnRGhBOVFYOE1BUXNnQkVFTWFpRU5RUUVoQUVFQklRY0RRQ0FISUFWTUJFQWdCeUFHS0FJQUlneEdCRUFnQUVFQmFpRURCU0FBSVFNZ0RFRUNkQ0FFYWtHTWdNZ0FhaWdDQUNFQUN5QUdJQUEyQWdBZ0F5RUFJQWRCQVdvaEJ5QUdRUVJxSVFZTUFRc0xJQVFnQUVGL2FpSUdOZ0lJSUFZRWZ5QU5RUUFnQmtFQ2RCQkZHaUFFUVpDQUtHcEJBQ0FHUVFSMEVFVWFRUUFoQXdOQUlBTWdCa2dFUUNBRVFZeUFDR29nQTBFQ2RDSUFRUUowYWlBQk5nSUFJQVJCaklBSWFpQUFRUUZ5UVFKMGFrRUFOZ0lBSUFSQmpJQUlhaUFBUVFKeVFRSjBhaUFDTmdJQUlBUkJqSUFJYWlBQVFRTnlRUUowYWtFQU5nSUFJQU5CQVdvaEF3d0JDd3RCQUNFREEwQWdBeUFGU0FSQUlBUkJER29nQkVHUWdNZ0FhaUFEUVFKMGFpZ0NBRUYvYWlJQ1FRSjBhaUlBSUFSQmtJRFFBR29nQTBFSGJDSUdRUUowYWlnQ0FDQUFLQUlBYWpZQ0FDQUVRWkNBS0dvZ0FrRUJkQ0lCUVFOMGFpSUFJQUFyQXdBZ0JrRUNkQ0FFYWtHVWdOQUFhaWdDQUxlZ09RTUFJQVJCa0lBb2FpQUJRUUZ5UVFOMGFpSUFJQUFyQXdBZ0JrRUNkQ0FFYWtHWWdOQUFhaWdDQUxlZ09RTUFJQVJCaklBSWFpQUNRUUowSWdKQkFuUnFJZ0VvQWdBZ0JrRUNkQ0FFYWtHY2dOQUFhaWdDQUNJQVNnUkFJQUVnQURZQ0FBc2dCRUdNZ0FocUlBSkJBWEpCQW5ScUlnRW9BZ0FnQmtFQ2RDQUVha0dnZ05BQWFpZ0NBQ0lBU0FSQUlBRWdBRFlDQUFzZ0JFR01nQWhxSUFKQkFuSkJBblJxSWdFb0FnQWdCa0VDZENBRWFrR2tnTkFBYWlnQ0FDSUFTZ1JBSUFFZ0FEWUNBQXNnQkVHTWdBaHFJQUpCQTNKQkFuUnFJZ0VvQWdBZ0JrRUNkQ0FFYWtHb2dOQUFhaWdDQUNJQVNBUkFJQUVnQURZQ0FBc2dBMEVCYWlFRERBRUxDeUFFS0FJSUlRSkJBQ0VEQTM4Z0F5QUNTQVIvSUFSQmtJQW9haUFEUVFGMElnRkJBM1JxSWdBZ0FDc0RBQ0FFUVF4cUlBTkJBblJxS0FJQXR5SVVvemtEQUNBRVFaQ0FLR29nQVVFQmNrRURkR29pQUNBQUt3TUFJQlNqT1FNQUlBTkJBV29oQXd3QkJVRUFDd3NGUVFBTEN5RVRJQTRrQmlBVEM0TUJBUU4vSXdZaEFTTUdRVEJxSkFZZ0FVRW9haUlDSUFBMkFnQWdBaEJUQkg4Z0FoQlNJUUFnQVVJQU53TUFJQUZDQURjRENDQUJRZ0EzQXhBZ0FVSUFOd01ZSUFGQ0FEY0RJQ0FCSUFBb0FzUUJOZ0lBSUFGQkFUWUNFQ0FCSUFBb0Fzd0JOZ0lNSUFBb0F0Z0JJQUVRMXdnRlFlaUdBU2dDQUFzaEF5QUJKQVlnQXd1TEFRRURmeU1HSVFJakJrRVFhaVFHSUFJZ0FEWUNBQ0FDRUZNRWZ5QUNFRklpQUNnQ3lBSWhBeUFCUVFCSUlBQW9Bc3dDSUFOclFRTjFJQUZOY2dSL1FleUdBU2dDQUFVZ0FDZ0M1QUVnQUNnQzJBRWlBRUV3YWlBQUtBSXNJQUZCQTNRZ0Eyb29BZ1FpQUVFQkVKY0VJQUJCQ0dvUXRBSkJBQXNGUWVpR0FTZ0NBQXNoQkNBQ0pBWWdCQXVMQVFFRGZ5TUdJUUlqQmtFUWFpUUdJQUlnQURZQ0FDQUNFRk1FZnlBQ0VGSWlBQ2dDeUFJaEF5QUJRUUJJSUFBb0Fzd0NJQU5yUVFOMUlBRk5jZ1IvUWV5R0FTZ0NBQVVnQUNnQzVBRWdBQ2dDMkFFaUFFRXdhaUFBS0FJc0lBRkJBM1FnQTJvb0FnUWlBRUVBRUpjRUlBQkJDR29RdEFKQkFBc0ZRZWlHQVNnQ0FBc2hCQ0FDSkFZZ0JBdHRBUU4vSXdZaEF5TUdRUkJxSkFZZ0F5QUFOZ0lBSUFNUVV3Ui9JQU1RVWlJRUtBTFlBU0lBS0FJc0lBRktCSDhnQkNnQzVBRkI2THdESUFCQk1Hb2dBVUVJZEdvZ0FVRUFTQnNnQXJjUW1RaEJBQVZCOElZQktBSUFDd1ZCNklZQktBSUFDeUVGSUFNa0JpQUZDM0lCQTM4akJpRURJd1pCRUdva0JpQURJQUEyQWdBZ0F4QlRCSDhnQXhCU0lnUW9BdGdCSWdBb0Fpd2dBVW9FZnlBRUtBTGtBVUhvdkFNZ0FFRXdhaUFCUVFoMGFpQUJRUUJJR3lBQ3QwR0FwQU1RMmdNYVFRQUZRZkNHQVNnQ0FBc0ZRZWlHQVNnQ0FBc2hCU0FESkFZZ0JRdVFBZ0lDZndoOEl3WWhBaU1HUVJCcUpBWWdBaUFBTmdJQUlBSVFVd1IvSUFJUVVpZ0MyQUVpQUNnQ0xDQUJTZ1IvUWVpOEF5QUFRVEJxSUFGQkNIUnFJQUZCQUVnYklnQkJnS1FES3dNQUlnUTVBNmdCSUFCQmlLUURLd01BSWdVNUE3QUJJQUJCa0tRREt3TUFJZ1k1QTdnQklBQkJtS1FES3dNQUlnYzVBOEFCSUFCQm9LUURLd01BSWdnNUE4Z0JJQUJCcUtRREt3TUFJZ2s1QTlBQklBQkJzS1FES3dNQUlnbzVBOWdCSUFCQnVLUURLd01BSWdzNUErQUJJQUFnQkNBR29DQUlvQ0FLb0VRQUFBQUFBQURRUDZJNUF6Z2dBRUZBYXlBRklBZWdJQW1nSUF1Z1JBQUFBQUFBQU5BL29qa0RBRUVBQlVId2hnRW9BZ0FMQlVIb2hnRW9BZ0FMSVFNZ0FpUUdJQU1MWkFFQ2Z5TUdJUU1qQmtFUWFpUUdJQU1nQURZQ0FDQURFRk1FZnlBREVGSW9BdGdCSWdBb0Fpd2dBVW9FZjBIb3ZBTWdBRUV3YWlBQlFRaDBhaUFCUVFCSUd5QUNOZ0lRUVFBRlFmQ0dBU2dDQUFzRlFlaUdBU2dDQUFzaEJDQURKQVlnQkFzckFRSi9BbjhqQmlFQkl3WkJFR29rQmtHRHBRSkJBa0dzaHdGQm1NOENRUjlCeGdBUUNTQUJDeVFHQzVvQkFRUi9Jd1loQVNNR1FkQUJhaVFHSUFGQndBRnFJUU1nQUN3QUMwRUFTQVIvSUFBb0FnQUZJQUFMSUFFZ0FVRzRBV29pQWhESUMwRUFTQVIvSUFBc0FBdEJBRWdFUUNBQUtBSUFJUUFMSUFNZ0FEWUNBRUVBUVFOQmdkQUNJQU1RUFVGL0JVSEV4QU5CeE1RREtBSUFJZ0JCQVdvMkFnQWdBaUFBTmdJQUlBSVFyQU1nQVVHNEFSQk1HaUFDS0FJQUN5RUVJQUVrQmlBRUN6d0JBbjhqQmlFQkl3WkJFR29rQmlBQklBQTJBZ0FnQVJCVEJIOGdBUkJTSWdBb0Fzd0NJQUFvQXNnQ2EwRURkUVZCZndzaEFpQUJKQVlnQWd0aUFRSi9Jd1loQWlNR1FSQnFKQVlnQWlBQU5nSUFJQUlRVXdSL0lBSVFVaUVBSUFGQkFFZ0VmMEYvQlNBQUtBTE1BaUFBS0FMSUFpSUFhMEVEZFNBQlN3Ui9JQUZCQTNRZ0FHb29BZ1FvQWdRRlFYOExDd1ZCZndzaEF5QUNKQVlnQXd0M0FRSi9Jd1loQXlNR1FSQnFKQVlnQTBFRWFpSUNJQUEyQWdBZ0FoQlRCRUFnQWhCU0lnSW9BdlFCSVFBZ0FTd0FDMEVBU0FSQUlBRW9BZ0FoQVFzZ0FpQUFJQUVRM0FZRVFDQUNJQUlvQXZRQlFRRnFOZ0wwQVFWQkFFRURRY0hRQWlBREVEMUJmeUVBQ3dWQmZ5RUFDeUFESkFZZ0FBdlVBUUVFZnlNR0lRSWpCa0VRYWlRR0lBSkJDR29oQkNBQ1FReHFJZ01nQURZQ0FDQURFRk1FZndKL0lBTVFVaUVBSUFFc0FBdEJBRWdFUUNBQktBSUFJUUVMSUFFZ0FDZ0MyQUVnQUVIY0FXb2dBRUhnQVdvaUF4RGJCa1VFUUVFQVFRTkIvTklDSUFRUVBVRi9EQUVMSUFJZ0FDZ0N6QUlpQVNBQVFjZ0NhaUlFS0FJQWEwRURkVFlDQUNBQ0lBTW9BZ0EyQWdRZ0FTQUFLQUxRQWtZRVFDQUVJQUlRbGdFRklBRWdBaWtEQURjQ0FDQUFJQUFvQXN3Q1FRaHFOZ0xNQWdzZ0FpZ0NBQXNGUVg4TElRVWdBaVFHSUFVTGJ3RURmeU1HSVFNakJrRVFhaVFHSUFOQkJHb2lBaUFBTmdJQUlBSVFVd1IvSUFJUVVpRUNJQUVzQUF0QkFFZ0VRQ0FCS0FJQUlRRUxJQUVnQWtIVUFtb2lBQ0FDUWR3QmFoRFpCZ1IvSUFBb0FnQUZRUUJCQTBISTB3SWdBeEE5UVg4TEJVRi9DeUVFSUFNa0JpQUVDNWNDQVFSL0l3WWhBaU1HUVJCcUpBWWdBa0VFYWlJQklBQTJBZ0FnQVJCVEJIOGdBUkJTSWdFb0FzQUJJQUVvQXRnREVORUdJUUFnQVNBQU5nTHNBU0FBQkVBZ0FVSG9BV29oQXdWQkFFRURRYUxVQWlBQ0VEMGdBVUhvQVdvaUF4Q2tDU0FCS0FMc0FTRUFDeUFBQkg4Z0FFTUFBS0JBT0FJc1FRQUZRWDhMR2lBQktBTHNBU0lBQkg4Z0FFTUFBQUEvT0FJb1FRQUZRWDhMR2lBQktBTHNBU0lBQkg4Z0FFRVFOZ0lrUVFBRlFYOExHaUFCS0FMc0FTSUFCSDhnQUVFR05nSVlRUUFGUVg4TEdpQUJLQUxzQVNJQUJIOGdBRUVHTmdJY1FRQUZRWDhMR2lBQktBTHNBU0lBQkg4Z0FFRUdOZ0lnUVFBRlFYOExHaUFESUFFb0FzQUJFSUFFTmdJQVFRQUZRWDhMSVFRZ0FpUUdJQVFMdGdFQkJYOGpCaUVDSXdaQkVHb2tCaUFDSUFBMkFnQWdBaEJUQkg4Z0FoQlNJZ0FvQXNRQklnRUVRQ0FCRURnZ0FFRUFOZ0xFQVNBQVFRQTJBc2dCQ3lBQUVLa0RJQUFvQXR3QkVMZ0NJQUlRMXdZZ0FFSElBbW9oQTBFQUlRRURRQ0FCSUFBb0Fzd0NJQU1vQWdBaUJHdEJBM1ZKQkVBZ0FVRURkQ0FFYWlnQ0JDSUVLQUlBRURnZ0JCQTRJQUZCQVdvaEFRd0JDd3NnQXhCVklBTVFPQ0FBRUxNRElBQVFPRUVBQlVGL0N5RUZJQUlrQmlBRkMrNEJBUVIvSXdZaEJDTUdRUkJxSkFaQnlNUURRY2pFQXlnQ0FDSURRUUZxTmdJQUlBUkJER29pQlNBRE5nSUFJQVVRVWlJRElBVW9BZ0EyQWdBZ0F5QUFOZ0xRQVNBRElBRTJBdFFCSUFNZ0FTQUFRUUowYkNJQU5nTElBU0FESUFBUVJEWUN4QUVnQXlBREtBTElBVUVFRURrUVJEWUN6QUVnQXhDM0J5SUFOZ0xjQVNBQVJRUkFRUUJCQTBIQjFBSWdCQkE5Q3lBRktBSUFJQUlRMHdZZ0JFRUlhaUlBSUFNb0FzZ0JOZ0lBUVFCQkFVSG0xQUlnQUJBOVFRQWdBeWdDQUNBREtBTEVBU0FES0FMSUFTQURRZGdDYWtHQXBBTWdBeWdDekFFUUtSb2dBeWdDQUNFR0lBUWtCaUFHQzRjSkFRRi9Jd1loQUNNR1FSQnFKQVpCbktRQ1FSb1EzQUZCb3FRQ1FjTUFFSVFCUWF1a0FrSEVBQkNFQVVHMHBBSkJGQkMyQWtHL3BBSkJGUkMyQWtIUHBBSkJGaEMyQWtIZHBBSkJGeEMyQVVIdnBBSkJ4UUFRaEFFUWtnZEJqNlVDUVJzUTNBRkJvS1VDUVJnUXRnRkJ0S1VDUVJ3UTNBRkJ4cVVDUVIwUTNBRkIzS1VDUVJrUXRnRkI4NlVDUVJvUXRnRkJrS1lDUWNjQUVJUUJRWjJtQWtISUFCQ0VBVUdxcGdKQnlRQVFoQUZCdXFZQ1FSNFEzQUZCemFZQ1FSc1F0Z0ZCMTZZQ1FSd1F0Z0ZCNUtZQ1FSMFF0Z0ZCOGFZQ1Fjb0FFSVFCUWY2bUFrSExBQkNFQVJEL0JoRDhCa0dwcHdKQkFSQzBBMEhBcHdKQkFSQzFBa0hYcHdKQkFoQzBBMEh0cHdKQkFoQzFBa0dEcUFKQktCREFBVUdVcUFKQnpBQVFoQUZCcGFnQ1FTa1F3QUZCc3FnQ1FjMEFFSVFCUWIrb0FrRXFFTUFCUWRlb0FrSE9BQkNFQVJEd0JrSDhxQUpCQXhDMUFrR0pxUUpCS3hEQUFVR2JxUUpCendBUWhBRkJyYWtDUVN3UXdBRkJ2YWtDUWRBQUVJUUJRYzJwQWtFdEVNQUJRZDZwQWtIUkFCQ0VBVUh2cVFKQjZJWUJFRXRCaktvQ1FleUdBUkJMUWFpcUFrSHdoZ0VRU3lBQVFRQTJBZ0JCeWFvQ0lBQVFTeUFBUVFFMkFnQkIycW9DSUFBUVN5QUFRUUEyQWdCQjZxb0NJQUFRU3lBQVFRQTJBZ0JCZ0tzQ0lBQVFTeUFBUVFFMkFnQkJtYXNDSUFBUVN5QUFRUUUyQWdCQnNxc0NJQUFRU3lBQVFlUUFOZ0lBUWN1ckFpQUFFRXNnQUVFQU5nSUFRZWFyQWlBQUVFc2dBRUVCTmdJQVFZQ3NBaUFBRUVzZ0FFRUFOZ0lBUVpxc0FpQUFFRXNnQUVFQU5nSUFRYldzQWlBQUVFc2dBRUVCTmdJQVFkQ3NBaUFBRUVzZ0FFRUNOZ0lBUWVxc0FpQUFFRXNnQUVFRE5nSUFRWU90QWlBQUVFc2dBRUVFTmdJQVFhbXRBaUFBRUVzZ0FFRUFOZ0lBUWM2dEFpQUFFRXNnQUVFQU5nSUFRZkN0QWlBQUVFc2dBRUVCTmdJQVFZaXVBaUFBRUVzZ0FFRUNOZ0lBUWFLdUFpQUFFRXNnQUVFQ05nSUFRYjJ1QWlBQUVFc2dBRUVGTmdJQVFkK3VBaUFBRUVzZ0FFUUFBQUFBQUFEZ1B6a0RBRUh4cmdKQm1Qa0FJQUFyQXdBUUZ5QUFRUUEyQWdCQmhxOENJQUFRU3lBQVFRRTJBZ0JCbWE4Q0lBQVFTeUFBUVFJMkFnQkJxNjhDSUFBUVN5QUFRUU0yQWdCQnZhOENJQUFRU3lBQVFRUTJBZ0JCMEs4Q0lBQVFTeUFBUVFNMkFnQkI1cThDSUFBUVN5QUFRWU1FTmdJQVFmbXZBaUFBRUVzZ0FFR0RBallDQUVHV3NBSWdBQkJMSUFCQkJEWUNBRUd5c0FJZ0FCQkxJQUJCaEFZMkFnQkJ4YkFDSUFBUVN5QUFRWVFJTmdJQVFlT3dBaUFBRUVzZ0FFRUFOZ0lBUVlHeEFpQUFFRXNnQUVFQk5nSUFRYUN4QWlBQUVFc2dBRUVDTmdJQVFjU3hBaUFBRUVzZ0FFRUROZ0lBUWVheEFpQUFFRXNnQUVFQU5nSUFRWXl5QWlBQUVFc2dBRUVCTmdJQVFhMnlBaUFBRUVzZ0FFRUNOZ0lBUWR5eUFpQUFFRXNnQUVFRE5nSUFRWWF6QWlBQUVFc2dBRUVFTmdJQVFiR3pBaUFBRUVzZ0FFRUZOZ0lBUWVXekFpQUFFRXNnQUVFR05nSUFRWmkwQWlBQUVFc2dBRUVITmdJQVFjVzBBaUFBRUVzZ0FFRUlOZ0lBUWV5MEFpQUFFRXNnQUVFSk5nSUFRWm0xQWlBQUVFc2dBQ1FHQzBNQVFaekVBMElBTndJQVFhVEVBMElBTndJQVFhekVBMEdBZ0lEOEF6WUNBRUd3eEFOQ0FEY0NBRUc0eEFOQ0FEY0NBRUhBeEFOQmdJQ0EvQU0yQWdBUW5BY0xxQUlDQkg4Q2ZDTUdJUUVqQmtFUWFpUUdJQUFyQXdBaUJVUUFBQUFBQUFBQUFHWkZCRUFnQVVIQXlBTkIxcUVDRURkQi9hRUNFRGRCNzZJQ0VEZEIwQUFRUGtIMm9nSVFOMEg1b2dJUU55SUVLQUlBUVhScUtBSUFJQVJxRURzZ0FVR0F6Z01RT2lJQ0tBSUFLQUljSVFNZ0FrRUtJQU5CUDNGQmlnRnFFUUlBSVFNZ0FSQThJQVFnQXhCQUlBUVFQeEFBQ3lBQUt3TUlJZ1pFQUFBQUFBQUFBQUJtQkVBZ0FTUUdJQVlnQmFFUEJTQUJRY0RJQTBHVW93SVFOMEg5b1FJUU4wSHZvZ0lRTjBIUkFCQStRZmFpQWhBM1FicWpBaEEzSWdJZ0FpZ0NBRUYwYWlnQ0FHb1FPeUFCUVlET0F4QTZJZ01vQWdBb0Fod2hBQ0FEUVFvZ0FFRS9jVUdLQVdvUkFnQWhBQ0FCRUR3Z0FpQUFFRUFnQWhBL0VBQUxSQUFBQUFBQUFBQUFDN1lCQVFOL0l3WWhBU01HUVJCcUpBWWdBQ3NEQUVRQUFBQUFBQUFBQUdZRVFDQUJRUUFRRkJvZ0FDQUJLQUlFdDBTTjdiV2c5OGF3UHFJZ0FTZ0NBTGVnT1FNSUlBRWtCZ1VnQVVIQXlBTkIxcUVDRURkQi9hRUNFRGRCNzZJQ0VEZEJ3d0FRUGtIMm9nSVFOMEg1b2dJUU55SUNLQUlBUVhScUtBSUFJQUpxRURzZ0FVR0F6Z01RT2lJREtBSUFLQUljSVFBZ0EwRUtJQUJCUDNGQmlnRnFFUUlBSVFBZ0FSQThJQUlnQUJCQUlBSVFQeEFBQ3dzMkFRRi9Jd1loQVNNR1FSQnFKQVlnQVVFQUVCUWFJQUFnQVNnQ0JMZEVqZTIxb1BmR3NENmlJQUVvQWdDM29Ea0RBQ0FCSkFZTFJ3RUJmeU1HSVFNakJrR0FFR29rQmlBRFFZQVFJQUVvQWdBZ0FTQUJMQUFMUVFCSUd5QUNFS2tCR2lBQVFnQTNBZ0FnQUVFQU5nSUlJQUFnQXlBREVHQVFmaUFESkFZTFRRRURmd05BSUFJZ0FDZ0NCQ0FBS0FJQUlnTnJRUU4xU1FSQUlBSkJBM1FnQTJvb0FnQWlBeWdDQUNnQ0NDRUVJQU5CQ0NBQklBUkJBM0ZCOWdWcUVRWUFJQUpCQVdvaEFnd0JDd3NMRkFBZ0FFRU1ha0VBSUFFb0FnUkI5NkFDUmhzTENBQWdBQ2dDREJvTFVRRUNmeU1HSVFNakJrRVFhaVFHSUFBZ0FUWUNBRUVRRUZFaUFrRUFOZ0lFSUFKQkFEWUNDQ0FDUWRTR0FUWUNBQ0FDSUFFMkFnd2dBQ0FDTmdJRUlBTWdBVFlDQUNBRElBRTJBZ1FnQXlRR0N4UUFJQUJCREdwQkFDQUJLQUlFUWYyZkFrWWJDd2tBSUFBb0Fnd1FPQXRSQVFKL0l3WWhBeU1HUVJCcUpBWWdBQ0FCTmdJQVFSQVFVU0lDUVFBMkFnUWdBa0VBTmdJSUlBSkJ1SVlCTmdJQUlBSWdBVFlDRENBQUlBSTJBZ1FnQXlBQk5nSUFJQU1nQVRZQ0JDQURKQVlMbFJJQ0MzOEJmaU1HSVF3akJrRWdhaVFHSUF4QkdHb2hDQ0FNUVJCcUlRNGdBVUY5YWtFRlN3Ui9JQUpCZnpZQ0FDQURRUUEyQWdBZ0JFUUFBQUFBQUFEd3Z6a0RBRUYvQlFKL0lBeEJBRFlDQUNBTUlBRWdBVUYvYWlJTGJEWUNCQ0FNSUFFZ0FXd2lEMEYvYWpZQ0NDQU1JQXMyQWd4QmZ5RUpBMEFnQjBFRVJ3UkFJQUFnQjBFQ2RDQU1haWdDQUdvc0FBQWhEU0FIUVFGcUlRY2dEU0FLSUExQi93RnhJQXBCL3dGeFNoc2hDaUFOSUFrZ0RVSC9BWEVnQ1VIL0FYRklHeUVKREFFTEN5QUtRZjhCY1NJSElBbEIvd0Z4SWdwclFSNUlCRUFnQWtGL05nSUFJQU5CQURZQ0FDQUVSQUFBQUFBQUFQQy9PUU1BUVg0TUFRc2dCeUFLYWtFQmRpRUpRUUFoQndOQUlBZEJCRWNFUUNBSElBaHFJQWtnQUNBSFFRSjBJQXhxS0FJQWFpMEFBRXM2QUFBZ0IwRUJhaUVIREFFTEMwRUFJUWNDUUFKQUEwQUNRQ0FIUVFSUERRSWdCMEVCYWlFS0lBY2dDR29zQUFCQkFVWUVRQ0FLUVFOeElBaHFMQUFBUVFGR0JFQWdCMEVDYWtFRGNTQUlhaXdBQUVVTkFnc0xJQW9oQnd3QkN3c2dBeUFITmdJQURBRUxJQWRCQkVZRVFDQUNRWDgyQWdBZ0EwRUFOZ0lBSUFSRUFBQUFBQUFBOEw4NUF3QkJmUXdDQ3d0Qi93RWhDa0VBSVFjRFFDQUhJQTlIQkVCQkFDQUFJQWRxSWcwdEFBQWlFQ0FKYXlJSWF5QUlJQWhCQUVnYklRZ2dEU0FKSUJCTE9nQUFJQWdnQ2lBSUlBcElHeUVLSUFkQkFXb2hCd3dCQ3dzQ1FBSkFBa0FDUUFKQUlBTW9BZ0FpQXc0RUFBRUNBd1FMQTBBZ0F5QUJTQVJBSUFNZ0MwWWhDQ0FCSUFOc0lRbEJBQ0VIQTBBZ0FTQUhSd1JBSUFNZ0IzSUVRQ0FJSUFkRklBY2dDMFp5Y1VVRVFDQUFJQWNnQ1dwcUxBQUFRUUJIclNBU1FnR0doQ0VTQ3dzZ0IwRUJhaUVIREFFTEN5QURRUUZxSVFNTUFRVU1CUXNBQUFzQUMwRUFJUWNEUUNBSElBRklCRUFnQjBVaENDQUhJQXRHSVFrZ0N5RURBMEFnQTBGL1NnUkFJQWdnQXlBTFJpSU5jVVVFUUNBSklBMGdBMFZ5Y1VVRVFDQUFJQWNnQVNBRGJHcHFMQUFBUVFCSHJTQVNRZ0dHaENFU0N3c2dBMEYvYWlFRERBRUxDeUFIUVFGcUlRY01BUVVNQkFzQUFBc0FDeUFMSVFNRFFDQURRWDlLQkVBZ0EwVWdBeUFMUm5JaENDQUJJQU5zSVFrZ0N5RUhBMEFnQjBGL1NnUkFJQU1nQjNKRklBY2dDMFlnQ0hGeVJRUkFJQUFnQnlBSmFtb3NBQUJCQUVldElCSkNBWWFFSVJJTElBZEJmMm9oQnd3QkN3c2dBMEYvYWlFRERBRUZEQU1MQUFBTEFBc2dDeUVEQTBBZ0EwRi9TZ1JBSUFNZ0MwWWhDQ0FEUlNFSlFRQWhCd05BSUFjZ0FVZ0VRQ0FKSUFjZ0MwWnhJQU1nQjNKRklBZ2dCMFZ4Y25KRkJFQWdBQ0FESUFFZ0IyeHFhaXdBQUVFQVI2MGdFa0lCaG9RaEVnc2dCMEVCYWlFSERBRUxDeUFEUVg5cUlRTU1BUXNMQ3lBRVJBQUFBQUFBQVBBL0lBcTNSQUFBQUFBQUFENUFveUFLUVI1S0d6a0RBQUpBQWtBQ1FBSkFBa0FnQlVHREFtc09nd2dBQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREFRTURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01DQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREFnSURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01DQXdzZ0RpQVNwMEhnQ1dvc0FBQWlBS3czQXdBZ0FFRUFTQVJBSUFKQmZ6WUNBQ0FFUkFBQUFBQUFBUEMvT1FNQVFYd01CUXNNQXdzZ0RpQVNweUlBUWVBSWFpd0FBQ0lCckRjREFDQUdCRUFnQmlBQVFhQUphaTBBQURZQ0FBc2dBVUVBU0FSQUlBSkJmellDQUNBRVJBQUFBQUFBQVBDL09RTUFRWHdNQkFzTUFnc2dCU0FTUVFBZ0RoQzFBeUlBUVFCSUJFQWdBa0YvTmdJQUlBUkVBQUFBQUFBQThMODVBd0JCZkF3REN5QUFRUUJISUFaQkFFZHhCRUFnQmlBQU5nSUFDd3dCQ3lBT0lCSTNBd0FMSUFJZ0Rpa0RBRDRDQUVFQUN3c2hFU0FNSkFZZ0VRc2xBQ0FBUWdBM0FnQWdBRUlBTndJSUlBQkNBRGNDRUNBQVFnQTNBaGdnQUNBQkVLc0hDNjhCQVFOL0l3WWhBaU1HUVJCcUpBWWdBQ0FCS0FJQU5nSUFJQUFnQVNnQ0JEWUNCQ0FBSUFFb0FnZzJBZ2dnQUNBQktBSU1OZ0lNSUFBZ0FTZ0NFRFlDRUNBQUlBRW9BaFEyQWhRZ0FpQUJLQUlZSWdRMkFnQWdBa0VFYWlJRElBRW9BaHdpQVRZQ0FDQUJCSDhnQVNBQktBSUVRUUZxTmdJRUlBTW9BZ0FGUVFBTElRRWdBaUFBS0FJWU5nSUFJQUFnQkRZQ0dDQURJQUFvQWh3MkFnQWdBQ0FCTmdJY0lBSVFsUUVnQWlRR0N6QUJBWDhnQUNnQ0NDRURBMEFnQXlBQ0xBQUFPZ0FBSUFBZ0FDZ0NDRUVCYWlJRE5nSUlJQUZCZjJvaUFRMEFDd3U1QVFFRmZ5TUdJUVFqQmtFZ2FpUUdJQUFvQWdnZ0FDZ0NCQ0lEYXlBQlNRUkFRZi8vLy84SElBRWdBeUFBS0FJQWEyb2lBMGtFUUJBQUJTQUVJQU1nQUNnQ0NDQUFLQUlBSWdWcklnWkJBWFFpQnlBSElBTkpHMEgvLy8vL0J5QUdRZi8vLy84RFNSc2dBQ2dDQkNBRmF5QUFRUWhxRU5nQ0lBUWdBU0FDRUt3SElBQWdCQkRYQWlBRUVOWUNDd1VEUUNBRElBSXNBQUE2QUFBZ0FDQUFLQUlFUVFGcUlnTTJBZ1FnQVVGL2FpSUJEUUFMQ3lBRUpBWUxPQUVDZnlBQUtBSUVJQUFvQWdBaUJHc2lBeUFCU1FSQUlBQWdBU0FEYXlBQ0VLMEhCU0FESUFGTEJFQWdBQ0FCSUFScU5nSUVDd3NMSWdBZ0FDQUJJQUFvQWdSQmZtcXpFT01CSUFJZ0FDZ0NDRUYrYXJNUTR3RVFUUXRoQVFGOUlBTVE5Z0lnQkpRaEJTQURFUFVDSUFTVUlRTWdBQ0FGT0FJQUlBQWdBNHc0QWdRZ0FDQUJPQUlJSUFBZ0F6Z0NEQ0FBSUFVNEFoQWdBQ0FDT0FJVUlBQkRBQUFBQURnQ0dDQUFRd0FBQUFBNEFod2dBRU1BQUlBL09BSWdDeUlBSUFGQkNCQTVJQUJxSWdBZ0FDMEFBQ0FDUWY4QmNTQUJRUWR4ZEhJNkFBQUxpd0VCQ0g4Z0FFSFVBQkRaQTBFa0lRVkJJeUVHUVNRaEJ3TkFJQUpCSlVjRVFDQUNRUUowSUFGcUlRa2dBa0VCYWlJQ0lRZ2dCQ0VEQTBBZ0F5QUhSd1JBSUFBZ0F5QUpLZ0lBSUFoQkFuUWdBV29xQWdCZEVMRUhJQWhCQVdvaENDQURRUUZxSVFNTUFRc0xJQVlnQjJvaEJ5QUVJQVZxSVFRZ0JVRi9haUVGSUFaQmYyb2hCZ3dCQ3dzTHFBNENJSDhDZlNNR0lSSWpCa0hRQW1va0JpQVNRYUFDYWlJUklBSXFBZ0FnQWlvQ0JDQUNLZ0lJUXdBQWdEOGdBaW9DRENBUWxDSVFJQkJEQUFDQVAxMGJJakVRc0FjZ0VTb0NDQ0V5SUJFcUFoUWhFQ0FTUWZBQmFpSVRJQkVnQXhCYklCTkJDR29pR0NBUklBTkJDR29RV3lBVFFSQnFJaGtnRVNBRFFSQnFFRnNnRTBFWWFpSWFJQkVnQTBFWWFoQmJJQk5CSUdvaUd5QVJJQU5CSUdvUVd5QVRRU2hxSWh3Z0VTQURRU2hxRUZzZ0VrSEFBV29pRkNBUklBUVFXeUFVUVFocUloMGdFU0FFUVFocUVGc2dGRUVRYWlJZUlCRWdCRUVRYWhCYklCUkJHR29pSHlBUklBUkJHR29RV3lBVVFTQnFJaUFnRVNBRVFTQnFFRnNnRkVFb2FpSWhJQkVnQkVFb2FoQmJJQkpCa0FGcUloVWdFU0FGRUZzZ0ZVRUlhaUlpSUJFZ0JVRUlhaEJiSUJWQkVHb2lJeUFSSUFWQkVHb1FXeUFWUVJocUlpUWdFU0FGUVJocUVGc2dGVUVnYWlJbElCRWdCVUVnYWhCYklCVkJLR29pSmlBUklBVkJLR29RV3lBU1FlQUFhaUlXSUJFZ0JoQmJJQlpCQ0dvaUp5QVJJQVpCQ0dvUVd5QVdRUkJxSWlnZ0VTQUdRUkJxRUZzZ0ZrRVlhaUlwSUJFZ0JrRVlhaEJiSUJaQklHb2lLaUFSSUFaQklHb1FXeUFXUVNocUlpc2dFU0FHUVNocUVGc2dFa0V3YWlJWElCRWdCeEJiSUJkQkNHb2lMQ0FSSUFkQkNHb1FXeUFYUVJCcUlpMGdFU0FIUVJCcUVGc2dGMEVZYWlJdUlCRWdCMEVZYWhCYklCZEJJR29pTHlBUklBZEJJR29RV3lBWFFTaHFJakFnRVNBSFFTaHFFRnNnRWlBUklBZ1FXeUFTUVFocUlnWWdFU0FJUVFocUVGc2dFa0VRYWlJRklCRWdDRUVRYWhCYklCSkJHR29pQkNBUklBaEJHR29RV3lBU1FTQnFJZ01nRVNBSVFTQnFFRnNnRWtFb2FpSUNJQkVnQ0VFb2FoQmJJQUVnRWtISUFtb2lDQ0FTUWNRQ2FpSUhJREVnRDVRUXR3RWdBQ0FCSUJJcUFnQWdFaW9DQkNBSUtBSUFJQWNvQWdBUVdUZ0NBQ0FBSUFFZ0Jpb0NBQ0FTS2dJTUlBZ29BZ0FnQnlnQ0FCQlpPQUlFSUFBZ0FTQUZLZ0lBSUJJcUFoUWdDQ2dDQUNBSEtBSUFFRms0QWdnZ0FDQUJJQVFxQWdBZ0Vpb0NIQ0FJS0FJQUlBY29BZ0FRV1RnQ0RDQUFJQUVnQXlvQ0FDQVNLZ0lrSUFnb0FnQWdCeWdDQUJCWk9BSVFJQUFnQVNBQ0tnSUFJQklxQWl3Z0NDZ0NBQ0FIS0FJQUVGazRBaFFnQVNBSUlBY2dNU0FPbEJDM0FTQUFJQUVnRnlvQ0FDQVhLZ0lFSUFnb0FnQWdCeWdDQUJCWk9BSVlJQUFnQVNBc0tnSUFJQmNxQWd3Z0NDZ0NBQ0FIS0FJQUVGazRBaHdnQUNBQklDMHFBZ0FnRnlvQ0ZDQUlLQUlBSUFjb0FnQVFXVGdDSUNBQUlBRWdMaW9DQUNBWEtnSWNJQWdvQWdBZ0J5Z0NBQkJaT0FJa0lBQWdBU0F2S2dJQUlCY3FBaVFnQ0NnQ0FDQUhLQUlBRUZrNEFpZ2dBQ0FCSURBcUFnQWdGeW9DTENBSUtBSUFJQWNvQWdBUVdUZ0NMQ0FCSUFnZ0J5QXhJQTJVRUxjQklBQWdBU0FXS2dJQUlCWXFBZ1FnQ0NnQ0FDQUhLQUlBRUZrNEFqQWdBQ0FCSUNjcUFnQWdGaW9DRENBSUtBSUFJQWNvQWdBUVdUZ0NOQ0FBSUFFZ0tDb0NBQ0FXS2dJVUlBZ29BZ0FnQnlnQ0FCQlpPQUk0SUFBZ0FTQXBLZ0lBSUJZcUFod2dDQ2dDQUNBSEtBSUFFRms0QWp3Z0FFRkFheUFCSUNvcUFnQWdGaW9DSkNBSUtBSUFJQWNvQWdBUVdUZ0NBQ0FBSUFFZ0t5b0NBQ0FXS2dJc0lBZ29BZ0FnQnlnQ0FCQlpPQUpFSUFFZ0NDQUhJREVnREpRUXR3RWdBQ0FCSUJVcUFnQWdGU29DQkNBSUtBSUFJQWNvQWdBUVdUZ0NTQ0FBSUFFZ0lpb0NBQ0FWS2dJTUlBZ29BZ0FnQnlnQ0FCQlpPQUpNSUFBZ0FTQWpLZ0lBSUJVcUFoUWdDQ2dDQUNBSEtBSUFFRms0QWxBZ0FDQUJJQ1FxQWdBZ0ZTb0NIQ0FJS0FJQUlBY29BZ0FRV1RnQ1ZDQUFJQUVnSlNvQ0FDQVZLZ0lrSUFnb0FnQWdCeWdDQUJCWk9BSllJQUFnQVNBbUtnSUFJQlVxQWl3Z0NDZ0NBQ0FIS0FJQUVGazRBbHdnQVNBSUlBY2dNU0FMbEJDM0FTQUFJQUVnRkNvQ0FDQVVLZ0lFSUFnb0FnQWdCeWdDQUJCWk9BSmdJQUFnQVNBZEtnSUFJQlFxQWd3Z0NDZ0NBQ0FIS0FJQUVGazRBbVFnQUNBQklCNHFBZ0FnRkNvQ0ZDQUlLQUlBSUFjb0FnQVFXVGdDYUNBQUlBRWdIeW9DQUNBVUtnSWNJQWdvQWdBZ0J5Z0NBQkJaT0FKc0lBQWdBU0FnS2dJQUlCUXFBaVFnQ0NnQ0FDQUhLQUlBRUZrNEFuQWdBQ0FCSUNFcUFnQWdGQ29DTENBSUtBSUFJQWNvQWdBUVdUZ0NkQ0FCSUFnZ0J5QXhJQXFVRUxjQklBQWdBU0FUS2dJQUlCTXFBZ1FnQ0NnQ0FDQUhLQUlBRUZrNEFuZ2dBQ0FCSUJncUFnQWdFeW9DRENBSUtBSUFJQWNvQWdBUVdUZ0NmQ0FBSUFFZ0dTb0NBQ0FUS2dJVUlBZ29BZ0FnQnlnQ0FCQlpPQUtBQVNBQUlBRWdHaW9DQUNBVEtnSWNJQWdvQWdBZ0J5Z0NBQkJaT0FLRUFTQUFJQUVnR3lvQ0FDQVRLZ0lrSUFnb0FnQWdCeWdDQUJCWk9BS0lBU0FBSUFFZ0hDb0NBQ0FUS2dJc0lBZ29BZ0FnQnlnQ0FCQlpPQUtNQVNBQklBZ2dCeUF4SUFtVUVMY0JJQUFnQVNBeUlCQWdDQ2dDQUNBSEtBSUFFRms0QXBBQklCSWtCa0VCQzB3QkFuOGpCaUVSSXdaQm9BRnFKQVlnRVNBQklBSWdBeUFFSUFVZ0JpQUhJQWdnQ1NBS0lBc2dEQ0FOSUE0Z0R5QVFFTE1IQkg4Z0FDQVJFTElIUVFFRlFRQUxJUklnRVNRR0lCSUx0Z1FCQm44akJpRVRJd1pCRUdva0JpQUJSUVJBSUJOQndNZ0RRY2VXQWhBM1FlYVdBaEEzUWUraUFoQTNRWmtFRUQ1QjlxSUNFRGRCMUpjQ0VEY2lFU0FSS0FJQVFYUnFLQUlBYWhBN0lCTkJnTTRERURvaUVpZ0NBQ2dDSENFVUlCSkJDaUFVUVQ5eFFZb0JhaEVDQUNFU0lCTVFQQ0FSSUJJUVFDQVJFRDhRQUFzZ0FCQnhJQUlvQWdRaUZDQUNLQUlBSWhWclFSUVFPVWNFUUNBVFFjRElBMEhrbHdJUU4wSG1sZ0lRTjBIdm9nSVFOMEdhQkJBK1FmYWlBaEEzUVptWUFoQTNJaEVnRVNnQ0FFRjBhaWdDQUdvUU95QVRRWURPQXhBNkloSW9BZ0FvQWh3aEZpQVNRUW9nRmtFL2NVR0tBV29SQWdBaEVpQVRFRHdnRVNBU0VFQWdFUkEvRUFBTFFRQWhFa0VBSVJFRFFDQVNJQlFnRld0QkZCQTVJaFJKQkVBZ0FDZ0NCQ0FSSUFBb0FnQnNhaUFCSUFJb0FnQWdFa0VVYkdvZ0F5QUVJQVVnQmlBSElBZ2dDU0FLSUFzZ0RDQU5JQTRnRHlBUUVMUUhCRUFnQUNnQ0VDQVJRUlJzYWlJVUlBSW9BZ0FnRWtFVWJHb2lGU2tDQURjQ0FDQVVJQlVwQWdnM0FnZ2dGQ0FWTEFBUU9nQVFJQkZCQVdvaEVRc2dFa0VCYWlFU0lBSW9BZ1FoRkNBQ0tBSUFJUlVNQVFzTElCRWdGRVlFUUNBQUlCRVF2QU1nRXlRR0JTQVRRY0RJQTBHK21BSVFOMEhtbGdJUU4wSHZvZ0lRTjBIcEJCQStRZmFpQWhBM1FmR1lBaEEzSWdBZ0FDZ0NBRUYwYWlnQ0FHb1FPeUFUUVlET0F4QTZJZ0VvQWdBb0Fod2hBaUFCUVFvZ0FrRS9jVUdLQVdvUkFnQWhBU0FURUR3Z0FDQUJFRUFnQUJBL0VBQUxDM01BSUFFUTBnTWdBU0FES0FJRUlBTW9BZ0JyUVJRUU9SQzhBeUFCSUFJZ0F5QUFJQUJCTUdvZ0FFSGdBR29nQUVHUUFXb2dBRUhBQVdvZ0FFSHdBV29nQUNvQ29BSWdBQ29DcEFJZ0FDb0NxQUlnQUNvQ3JBSWdBQ29Dc0FJZ0FDb0N0QUlnQUNvQ3VBSWdBQ29DdkFJUXRRY0x4d01CRFg4akJpRUNJd1pCUUdza0JpQUNRVGhxSVFrZ0FrRXdhaUVLSUFKQktHb2hDeUFDUVNCcUlRTWdBa0VZYWlFRklBSkJFR29oQmlBQ1FRaHFJUUJCSUJCRUlnRkZCRUJCQUVFRFFibllBaUFDRUQxQkFSQUJDeUFCUVFBMkFnQWdBVUV5TmdJRUlBRkJFRFlDSENBQlFjZ0JFRVFpQnpZQ0NDQUhSUVJBUVFCQkEwRzUyQUlnQUJBOVFRRVFBUXNnQVVHZ0JoQkVJZ2cyQWd3Z0NFVUVRRUVBUVFOQnVkZ0NJQVlRUFVFQkVBRUxJQUZCb0FZUVJDSUFOZ0lVSUFCRkJFQkJBRUVEUWJuWUFpQUZFRDFCQVJBQkN5QUJRY0FNRUVRaUFEWUNFQ0FBUlFSQVFRQkJBMEc1MkFJZ0F4QTlRUUVRQVFzZ0FVSEFEQkJFSWdBMkFoZ2dBRVVFUUVFQVFRTkJ1ZGdDSUFzUVBVRUJFQUVMQWtBQ1FBSkFBMEFDUUNBRVFUSk9CRUFnQVNFTURBVUxJQVJCQW5RZ0IycEJBRFlDQUNBRVFRSjBJUVZCQUNFREEwQWdBMEVFU1FSQUlBTWdCV29pQmtFQ2RDQUlha0dBR0JCRUlnQTJBZ0FnQUVVTkFrR0FDQkJFSVFBZ0FTZ0NGQ0FHUVFKMGFpQUFOZ0lBSUFCRkRRUWdBMEVCYWlFRERBRUxDeUFFUVFGcUlRUU1BUXNMUVFCQkEwRzUyQUlnQ2hBOURBRUxRUUJCQTBHNTJBSWdDUkE5QzBFQkVBRUxJQUlrQmlBTUM2a0JBQ0FBUWRBVlFRd1F1QUVnQUVFd2FrR0FGa0VNRUxnQklBQkI0QUJxUWJBV1FRd1F1QUVnQUVHUUFXcEI0QlpCREJDNEFTQUFRY0FCYWtHUUYwRU1FTGdCSUFCQjhBRnFRY0FYUVF3UXVBRWdBRVBOek13OU9BS2dBaUFBUXpNek16NDRBcVFDSUFCREFBQ0FQamdDcUFJZ0FFTm1acVkrT0FLc0FpQUFRODNNekQ0NEFyQUNJQUJETXpQelBqZ0N0QUlnQUVQTnpBdy9PQUs0QWlBQVF3QUE0RUE0QXJ3Q0MwOEJBWDBnQVVNQUFBQUFPQUlBSUFKQmZ6WUNBQ0FBUWVRQWFpRUFBMEFnQUNnQ0FDSUFCRUFnQXlBQUtBSU1zMTBFUUNBQ0lBQW9BZ2cyQWdBZ0FTQUFLQUlNc3lJRE9BSUFDd3dCQ3dzTHV3TUNDbjhEZlNNR0lRVWpCa0VRYWlRR0lBRkJBRXdFUUNBRlFjRElBMEgxbEFJUU4wR1NsUUlRTjBIdm9nSVFOMEUxRUQ1QjlxSUNFRGRCaEpZQ0VEY2lBeUFES0FJQVFYUnFLQUlBYWhBN0lBVkJnTTRERURvaUJDZ0NBQ2dDSENFR0lBUkJDaUFHUVQ5eFFZb0JhaEVDQUNFRUlBVVFQQ0FESUFRUVFDQURFRDhRQUFzZ0FrRUFUQVJBSUFWQndNZ0RRWmVXQWhBM1FaS1ZBaEEzUWUraUFoQTNRVFlRUGtIMm9nSVFOMEcwbGdJUU55SURJQU1vQWdCQmRHb29BZ0JxRURzZ0JVR0F6Z01RT2lJRUtBSUFLQUljSVFZZ0JFRUtJQVpCUDNGQmlnRnFFUUlBSVFRZ0JSQThJQU1nQkJCQUlBTVFQeEFBQ3lBQ1FYOXFJZ2xCQW5RZ0FHb2hDaUFCUVg5cUlRY0RRQ0FLS2dJQUlRMGdDQ0FIU0FSQUlBZ2hBU0FISVFNRFFBTkFJQUZCQVdvaEJDQUJRUUowSUFCcUlnc3FBZ0FpRGlBTlhRUkFJQVFoQVF3QkN3c0RRQ0FEUVg5cUlRWWdEU0FEUVFKMElBQnFJZ3dxQWdBaUQxMEVRQ0FHSVFNTUFRc0xJQUVnQTB3RVFDQUxJQTg0QWdBZ0RDQU9PQUlBSUFRaEFTQUdJUU1MSUFFZ0Ewd05BQXNnQnlBRElBRWdBa2diSVFjZ0FTQUlJQU1nQ1VnYklRZ01BUXNMSUFVa0JpQU5DelVCQVgwZ0FSRDJBaUFDbENFRElBRVE5UUlnQXBRaEFTQUFJQU00QWdBZ0FDQUJqRGdDQkNBQUlBRTRBZ2dnQUNBRE9BSU1DMElCQVg4Z0FFRVFFRkVpQkRZQ0FDQUFJQUZCQ0dvMkFnUWdCQ0FES0FJQU5nSUlJQVFnQXlnQ0JEWUNEQ0FBUVFFNkFBZ2dCQ0FDTmdJRUlBUkJBRFlDQUF1YUFRRUJmU0FBS0FJMHNpRUpJQUVnQlNBQUtnSVVJZ1dUSUFBcUFoZ2dCWk1RM2dFZ0NaUTRBZ0FnQUNnQ09MSWhCU0FDSUFZZ0FDb0NIQ0lHa3lBQUtnSWdJQWFURU40QklBV1VPQUlBSUFNZ0I3dEVHQzFFVlBzaENVQ2dSSVBJeVcwd1g4US9vaUFBS0FJOHQ2SzJPQUlBSUFCQlFHc29BZ0N5SVFVZ0JDQUlJQUFxQWlRaUJwTWdBQ29DS0NBR2t4RGVBU0FGbERnQ0FBdTdEQU1MZndaOUFYd2pCaUVJSXdaQkVHb2tCaUFBS2dJVUloQWdBVjRFZjBFQUJTQUFLZ0lZSWhFZ0FWOEVmMEVBQlNBQUtnSWNJaElnQWw0RWYwRUFCU0FBS2dJZ0loTWdBbDhFZjBFQUJTQUR1eUlXUkJndFJGVDdJUW5BWlNBV1JCZ3RSRlQ3SVFsQVpISUVmMEVBQlNBQUtnSWtJaFFnQkY0RWYwRUFCU0FBS2dJb0loVWdCRjhFZjBFQUJTQVFJQUZmUlFSQUlBaEJ3TWdEUVpHS0FoQTNRYk9LQWhBM1FlK2lBaEEzUWVnQ0VENUI5cUlDRURkQnM0c0NFRGNpQmlBR0tBSUFRWFJxS0FJQWFoQTdJQWhCZ000REVEb2lCeWdDQUNnQ0hDRUZJQWRCQ2lBRlFUOXhRWW9CYWhFQ0FDRUZJQWdRUENBR0lBVVFRQ0FHRUQ4UUFBc2dFU0FCWGtVRVFDQUlRY0RJQTBIQ2l3SVFOMEd6aWdJUU4wSHZvZ0lRTjBIcEFoQStRZmFpQWhBM1FiT0xBaEEzSWdZZ0JpZ0NBRUYwYWlnQ0FHb1FPeUFJUVlET0F4QTZJZ2NvQWdBb0Fod2hCU0FIUVFvZ0JVRS9jVUdLQVdvUkFnQWhCU0FJRUR3Z0JpQUZFRUFnQmhBL0VBQUxJQklnQWw5RkJFQWdDRUhBeUFOQjQ0c0NFRGRCczRvQ0VEZEI3NklDRURkQjZnSVFQa0gyb2dJUU4wR0ZqQUlRTnlJR0lBWW9BZ0JCZEdvb0FnQnFFRHNnQ0VHQXpnTVFPaUlIS0FJQUtBSWNJUVVnQjBFS0lBVkJQM0ZCaWdGcUVRSUFJUVVnQ0JBOElBWWdCUkJBSUFZUVB4QUFDeUFUSUFKZVJRUkFJQWhCd01nRFFaU01BaEEzUWJPS0FoQTNRZStpQWhBM1Flc0NFRDVCOXFJQ0VEZEJoWXdDRURjaUJpQUdLQUlBUVhScUtBSUFhaEE3SUFoQmdNNERFRG9pQnlnQ0FDZ0NIQ0VGSUFkQkNpQUZRVDl4UVlvQmFoRUNBQ0VGSUFnUVBDQUdJQVVRUUNBR0VEOFFBQXNnRmtRWUxVUlUreUVKd0dSRkJFQWdDRUhBeUFOQnRZd0NFRGRCczRvQ0VEZEI3NklDRURkQjdBSVFQa0gyb2dJUU4wSFlqQUlRTnlJR0tBSUFRWFJxS0FJQUlBWnFFRHNnQ0VHQXpnTVFPaUlIS0FJQUtBSWNJUVVnQjBFS0lBVkJQM0ZCaWdGcUVRSUFJUVVnQ0JBOElBWWdCUkJBSUFZUVB4QUFDeUFXUkJndFJGVDdJUWxBWlVVRVFDQUlRY0RJQTBIcmpBSVFOMEd6aWdJUU4wSHZvZ0lRTjBIdEFoQStRZmFpQWhBM1FkaU1BaEEzSWdZZ0JpZ0NBRUYwYWlnQ0FHb1FPeUFJUVlET0F4QTZJZ2NvQWdBb0Fod2hCU0FIUVFvZ0JVRS9jVUdLQVdvUkFnQWhCU0FJRUR3Z0JpQUZFRUFnQmhBL0VBQUxJQlFnQkY5RkJFQWdDRUhBeUFOQmpvMENFRGRCczRvQ0VEZEI3NklDRURkQjdnSVFQa0gyb2dJUU4wRzRqUUlRTnlJR0lBWW9BZ0JCZEdvb0FnQnFFRHNnQ0VHQXpnTVFPaUlIS0FJQUtBSWNJUVVnQjBFS0lBVkJQM0ZCaWdGcUVRSUFJUVVnQ0JBOElBWWdCUkJBSUFZUVB4QUFDeUFWSUFSZVJRUkFJQWhCd01nRFFjdU5BaEEzUWJPS0FoQTNRZStpQWhBM1FlOENFRDVCOXFJQ0VEZEJ1STBDRURjaUJpQUdLQUlBUVhScUtBSUFhaEE3SUFoQmdNNERFRG9pQnlnQ0FDZ0NIQ0VGSUFkQkNpQUZRVDl4UVlvQmFoRUNBQ0VGSUFnUVBDQUdJQVVRUUNBR0VEOFFBQXNnQUNBQVFjUUFhaUlKSUFCQnlBQnFJZ1lnQUVITUFHb2lCU0FBUWRBQWFpSUhJQUVnQWlBRElBUVF2UWNnQ1NvQ0FFTUFBQUMva280UVF5RUtJQVlxQWdCREFBQUF2NUtPRUVNaEN3Si9JQVVxQWdCREFBQUF2NUtPRUVNaERpQUhLZ0lBUXdBQUFMK1NqaEJESVF3Z0RpQUFLQUk4SWdWcUN5QUZFRThoRFNBS1FRQklCSDlCQUFVZ0MwRUFTQ0FLUVFGcUlna2dBQ2dDTkU1eUJIOUJBQVVnREVFQVNDQUxRUUZxSWdZZ0FDZ0NPRTV5Qkg5QkFBVWdERUVCYWlJSElBQkJRR3NvQWdCSUJIOGdEVUVCYWlBRkVFOGhCU0FBSUFBZ0NpQUxJQTBnREJCOEVIc2dBQ0FBSUFrZ0N5QU5JQXdRZkJCN0lBQWdBQ0FKSUFZZ0RTQU1FSHdRZXlBQUlBQWdDU0FHSUFVZ0RCQjhFSHNnQUNBQUlBa2dCaUFGSUFjUWZCQjdJQUFnQUNBSklBWWdEU0FIRUh3UWV5QUFJQUFnQ1NBTElBVWdEQkI4RUhzZ0FDQUFJQWtnQ3lBRklBY1FmQkI3SUFBZ0FDQUpJQXNnRFNBSEVId1FleUFBSUFBZ0NpQUdJQTBnREJCOEVIc2dBQ0FBSUFvZ0JpQUZJQXdRZkJCN0lBQWdBQ0FLSUFZZ0JTQUhFSHdRZXlBQUlBQWdDaUFHSUEwZ0J4QjhFSHNnQUNBQUlBb2dDeUFGSUF3UWZCQjdJQUFnQUNBS0lBc2dCU0FIRUh3UWV5QUFJQUFnQ2lBTElBMGdCeEI4RUh0QkFRVkJBQXNMQ3dzTEN3c0xDd3NMSVE4Z0NDUUdJQThMSndBZ0FBUi9JQUJCOElhdkEyb2lBQ2dDQUFSL0lBQkJBRFlDQUVFQUJVRi9Dd1ZCZndzYUM0Y0VBZ1YvQVh3akJpRU5Jd1pCSUdva0JpQU5RUkJxSVE0Z0F5QUhJQXVUSWdjNEFnQUNRQUpBSUFlN0loSkVHQzFFVlBzaENjQmxCRUFnRWtRWUxVUlUreUVaUUtDMklRY01BUVVnRWtRWUxVUlUreUVKUUdRRVFDQVNSQmd0UkZUN0lSbkFvTFloQnd3Q0N3c01BUXNnQXlBSE9BSUFDeUFIdXlJU1JCZ3RSRlQ3SVFuQVpFVUVRQ0FPUWNESUEwRzFqQUlRTjBHemlnSVFOMEh2b2dJUU4wSFVBeEErUWZhaUFoQTNRZGlNQWhBM0lnOGdEeWdDQUVGMGFpZ0NBR29RT3lBT1FZRE9BeEE2SWhBb0FnQW9BaHdoRVNBUVFRb2dFVUUvY1VHS0FXb1JBZ0FoRUNBT0VEd2dEeUFRRUVBZ0R4QS9FQUFMSUJKRUdDMUVWUHNoQ1VCbEJFQWdCQ0FJSUF3UTNnRWlCemdDQUNBTklBTXFBZ0FnQnhDN0J5QUVJQVFxQWdBUTBnRWdBQ29DTUpRNEFnQWdEU29DQ0NFSElBMHFBZ3doQ0NBQklBVWdEU29DQUNJRklBbVVJQTBxQWdRaUN5QUtsSktUSUFVZ0FDb0NDSlFnQ3lBQUtnSU1sSktTT0FJQUlBSWdCaUFISUFtVUlBZ2dDcFNTa3lBSElBQXFBZ2lVSUFnZ0FDb0NESlNTa2pnQ0FDQU5KQVlGSUE1QndNZ0RRZXVNQWhBM1FiT0tBaEEzUWUraUFoQTNRZFVERUQ1QjlxSUNFRGRCMkl3Q0VEY2lBQ0FBS0FJQVFYUnFLQUlBYWhBN0lBNUJnTTRERURvaUFTZ0NBQ2dDSENFQ0lBRkJDaUFDUVQ5eFFZb0JhaEVDQUNFQklBNFFQQ0FBSUFFUVFDQUFFRDhRQUFzTDdRUUNCMzhDZlNNR0lRY2pCa0VRYWlRR0lBZEJER29oQkNBQUtBSUFJQUFvQWdRUXhnRWhDaUFISUFNUWhBSWdBMEVBVEFSQUlBUkJ3TWdEUWJtU0FoQTNRZG1TQWhBM1FlK2lBaEEzUWRBQkVENUI5cUlDRURkQjI1TUNFRGNpQlNBRktBSUFRWFJxS0FJQWFoQTdJQVJCZ000REVEb2lCaWdDQUNnQ0hDRUlJQVpCQ2lBSVFUOXhRWW9CYWhFQ0FDRUdJQVFRUENBRklBWVFRQ0FGRUQ4UUFBc2dBQ2dDQUVFQVRBUkFJQVJCd01nRFFmR1RBaEEzUWRtU0FoQTNRZStpQWhBM1FkRUJFRDVCOXFJQ0VEZEJtNVFDRURjaUJTQUZLQUlBUVhScUtBSUFhaEE3SUFSQmdNNERFRG9pQmlnQ0FDZ0NIQ0VJSUFaQkNpQUlRVDl4UVlvQmFoRUNBQ0VHSUFRUVBDQUZJQVlRUUNBRkVEOFFBQXNnQUNnQ0JFRUFUQVJBSUFSQndNZ0RRYktVQWhBM1FkbVNBaEEzUWUraUFoQTNRZElCRUQ1QjlxSUNFRGRCM1pRQ0VEY2lCU0FGS0FJQVFYUnFLQUlBYWhBN0lBUkJnTTRERURvaUJpZ0NBQ2dDSENFSUlBWkJDaUFJUVQ5eFFZb0JhaEVDQUNFR0lBUVFQQ0FGSUFZUVFDQUZFRDhRQUFzZ0NySWhDMEVBSVFRRFFDQURJQVJIQkVBZ0JFRUNkQ0lGUVFKMElBRnFLZ0lNSUFWQkFuUWdBbW9xQWd3UTNnRWdDNVFoRENBSEtBSUFJQVJCQW5ScUlBdzRBZ0FnQkVFQmFpRUVEQUVMQ3lBSEtBSUFJZ0VnQnlnQ0JDQUJhMEVDZFNJQklBRkJBaEE1SUFGQkFYRkJmMnBxRUxvSFF3QUFnRDZVSVFzZ0FFRUZJQUFxQWhnZ0FDb0NGSk1nQzVXTkVFTVF4Z0UyQWpRZ0FFRUZJQUFxQWlBZ0FDb0NISk1nQzVXTkVFTVF4Z0VpQVRZQ09DQUFJQUVnQUNnQ05Hd2lBVFlDVkNBQUlBRWdBQ2dDUEd3MkFsZ2dCeEJWSUFja0JndTdBZ0VLZnlNR0lRVWpCa0VRYWlRR0lBVkJER29oQ1NBRlFRaHFJUW9nQlVFRWFpRUxJQUJCM0FCcUVMMERJQU1FUUNBQVFmQUFhaUlNSUFOQkFuUVFod0VnQUVIOEFHb2lEU0FERUljQklBQXNBQkFFUUNBQUlBRWdBaUFERU1FSEN3TkFJQWNnQTBnRVFDQUFJQWtnQ2lBTElBVWdCMEVDZENJRVFRSjBJQUZxSWdncUFnQWdDQ29DQkNBSUtnSUlJQWdxQWd3Z0JFRUNkQ0FDYWlJRUtnSUFJQVFxQWdRZ0JDb0NDQ0FFS2dJTUVNQUhJQUFnQ1NvQ0FDQUtLZ0lBSUFzcUFnQWdCU29DQUJDK0J3UkFJQXdvQWdBZ0JrRUVkR29pQkNBQUtBSkVOZ0lBSUFRZ0FDZ0NTRFlDQkNBRUlBQW9Ba3cyQWdnZ0JDQUFLQUpRTmdJTUlBMG9BZ0FnQmtFQ2RHb2dCellDQUNBR1FRRnFJUVlMSUFkQkFXb2hCd3dCQ3dzZ0RDQUdRUUowRUljQklBMGdCaENIQVFzZ0JTUUdDNE1CQUNBQUlBRTRBaFFnQUNBQ09BSVlJQUFnQXpnQ0hDQUFJQVE0QWlBZ0FFTUFBSUMvT0FJa0lBQkRBQUNBUHpnQ0tDQUFRUUEyQWpRZ0FFRUFOZ0k0SUFCQkREWUNQQ0FBUVVCclFRbzJBZ0FnQUVFQU5nSlVJQUJCQURZQ1dDQUFRd0FBSUVFNEFpd2dBRVBZVzk0K09BSXdJQUJCQVRvQUVDQUFRZHdBYWhDOUF3c3BBUUYvSUFBb0FnZ1F2Z01nQUNnQ0FDRUJJQUJCQURZQ0FDQUJCRUFnQUNnQ0JCb2dBUkE0Q3d1UEFRRUJmeUFBUWdBM0FnQWdBRUlBTndJSUlBQkJBVG9BRUNBQVFSUnFJZ0ZDQURjQ0FDQUJRZ0EzQWdnZ0FVSUFOd0lRSUFGQ0FEY0NHQ0FCUWdBM0FpQWdBVUlBTndJb0lBRkNBRGNDTUNBQlFnQTNBamdnQVVGQWEwSUFOd0lBSUFGQ0FEY0NTQ0FCUWdBM0FsQWdBRUdBZ0lEOEF6WUNiQ0FBUWdBM0FuQWdBRUlBTndKNElBQkNBRGNDZ0FFTExRQWdBQ0FCUVVCcktBSUFOZ0lBSUFBZ0FTZ0NSQ0lBTmdJRUlBQUVRQ0FBSUFBb0FnUkJBV28yQWdRTEN5Y0FJQUFFZnlBQVFmQ0dyd05xSWdBb0FnQUVmMEYvQlNBQUlBRTJBZ0JCQUFzRlFYOExHZ3NyQVFKL0l3WWhBaU1HUVJCcUpBWWdBaUFCTmdJQUlBQW9BZ0JCQkdvZ0FoRERBaUVESUFJa0JpQURDN2dCQVFOL0lBRWdBU2dDQkVFQUlBSWdBQ2dDQUNJRWF5SURRUUoxYTBFQ2RHb2lCVFlDQkNBRFFRQktCRUFnQlNBRUlBTVFUQm9MSUFBb0FnUWdBbXNpQTBFQVNnUkFJQUVvQWdnZ0FpQURFRXdhSUFFZ0FTZ0NDQ0FEUVFKMlFRSjBhallDQ0FzZ0FDZ0NBQ0VDSUFBZ0FTZ0NCRFlDQUNBQklBSTJBZ1FnQUNnQ0JDRUNJQUFnQVNnQ0NEWUNCQ0FCSUFJMkFnZ2dBQ2dDQ0NFQ0lBQWdBU2dDRERZQ0NDQUJJQUkyQWd3Z0FTQUJLQUlFTmdJQUMwUUJBbjhnQWlnQ0FDRURJQUVvQWdBaEFnTkFJQUlnQTBjRVFDQUFLQUlJSWdRZ0FpZ0NBRFlDQUNBQUlBUkJCR28yQWdnZ0FTQUNRUVJxSWdJMkFnQU1BUXNMQzJNQkJIOGdBQ2dDQkNJRklBTnJJZ1pCQW5VaUIwRUNkQ0FCYWlFRUlBVWhBd05BSUFRZ0Fra0VRQ0FESUFRb0FnQTJBZ0FnQUNBRFFRUnFJZ00yQWdRZ0JFRUVhaUVFREFFTEN5QUdCRUJCQUNBSGEwRUNkQ0FGYWlBQklBWVE1d0VhQ3dzL0FRRi9JQUlvQWdBaEFpQUJLQUlBSVFFRFFDQUJJQUpIQkVBZ0FDZ0NCQ0lESUFFb0FnQTJBZ0FnQUNBRFFRUnFOZ0lFSUFGQkJHb2hBUXdCQ3dzTE5BRUJmeUFBS0FJRUlRSURRQ0FDUVFBMkFnQWdBa0VBTmdJRUlBQWdBQ2dDQkVFSWFpSUNOZ0lFSUFGQmYyb2lBUTBBQ3dzN0FRSi9JQUFvQWdRaEFRTkFJQUFvQWdnaUFpQUJSd1JBSUFBZ0FrRjRhallDQ0F3QkN3c2dBQ2dDQUNJQkJFQWdBQ2dDREJvZ0FSQTRDd3VUQVFFQ2Z5QUFLQUlBSVFNZ0FDZ0NCQ0VDQTBBZ0FpQURSd1JBSUFFb0FnUkJlR29nQWtGNGFpSUNLUUlBTndJQUlBRWdBU2dDQkVGNGFqWUNCQXdCQ3dzZ0FDZ0NBQ0VDSUFBZ0FTZ0NCRFlDQUNBQklBSTJBZ1FnQUNnQ0JDRUNJQUFnQVNnQ0NEWUNCQ0FCSUFJMkFnZ2dBQ2dDQ0NFQ0lBQWdBU2dDRERZQ0NDQUJJQUkyQWd3Z0FTQUJLQUlFTmdJQUM2RUJBUVIvSXdZaEF5TUdRUkJxSkFZZ0FrRUJTZ1JBSUFKQmZtcEJBaEE1SWdKQkEzUWdBQ2dDQUNJRmFpRUFJQUVnQVNnQ0FFRjRhaUlFTmdJQUlBQWdCQkRCQVFSQUlBTWdCQ2tDQURjREFBTkFBa0FnQkNBQUtRSUFOd0lBSUFFZ0FEWUNBQ0FDUlEwQUlBSkJmMnBCQWhBNUlnSkJBM1FnQldvaUJpQURFTUVCQkVBZ0FDRUVJQVloQUF3Q0N3c0xJQUFnQXlrREFEY0NBQXNMSUFNa0JndWRBUUVGZnlNR0lRSWpCa0VnYWlRR1FmLy8vLzhCSUFBb0FnUWdBQ2dDQUd0QkEzVkJBV29pQTBrRVFCQUFCU0FDSUFNZ0FDZ0NDQ0FBS0FJQUlnUnJJZ1ZCQW5VaUJpQUdJQU5KRzBILy8vLy9BU0FGUVFOMVFmLy8vLzhBU1JzZ0FDZ0NCQ0FFYTBFRGRTQUFRUWhxRUlnQ0lBSW9BZ2dnQVNrQ0FEY0NBQ0FDSUFJb0FnaEJDR28yQWdnZ0FDQUNFTThISUFJUXpnY2dBaVFHQ3dzcUFDQUFRUUEyQWdBZ0FFRUFOZ0lFSUFCQkFEWUNDQ0FCQkVBZ0FDQUJFTUVESUFBZ0FSRE5Cd3NMaEFVQkNIOGpCaUVJSXdaQk1Hb2tCaUFJUVFocUlRVWdDRUVRYWlJSklBQW9BbXdnQUNnQ2FHdEJBblVRMGdkQmZ5RUVRWDhoQ2dOQUlBWWdDU2dDQkNBSktBSUFhMEVEZFVrRVFDQUFLQUpvSUFaQkFuUnFLQUlBUVFScUlBTVFnZ0loQnlBRklBQW9BbWdnQmtFQ2RHb29BZ0EyQWdBZ0JTQUhOZ0lFSUFrb0FnQWdCa0VEZEdvZ0JTa0RBRGNDQUNBR0lBb2dCeUFFU1NJTEd5RUtJQWNnQkNBTEd5RUVJQVpCQVdvaEJnd0JDd3NnQ2tGL1JnUkFJQVZCd01nRFFkbUpBaEEzUWRIeEFSQTNRZStpQWhBM1Fac0JFRDVCOXFJQ0VEZEIrNGtDRURjaUF5QURLQUlBUVhScUtBSUFhaEE3SUFWQmdNNERFRG9pQkNnQ0FDZ0NIQ0VHSUFSQkNpQUdRVDl4UVlvQmFoRUNBQ0VFSUFVUVBDQURJQVFRUUNBREVEOFFBQXNnQlNBQUtBSm9JQXBCQW5ScUtBSUFJZ00yQWdBZ0FTZ0NCQ0lFSUFFb0FnaEpCRUFnQkNBRE5nSUFJQUVnQVNnQ0JFRUVhallDQkFVZ0FTQUZFTUlDQ3lBSVFTUnFJUVpCQUNFRUEwQWdDU2dDQUNJRElRY2dCQ0FKS0FJRUlBTnJRUU4xU1FSQUlBUWdDa2NFUUNBRVFRTjBJQWRxS0FJRUlBa29BZ0FnQ2tFRGRHb29BZ1JHQkVBZ0JTQUFLQUpvSUFSQkFuUnFLQUlBSWdNMkFnQWdBU2dDQkNJSElBRW9BZ2hKQkVBZ0J5QUROZ0lBSUFFZ0FTZ0NCRUVFYWpZQ0JBVWdBU0FGRU1JQ0N3VWdDU2dDQUNBRVFRTjBhaUVESUFJb0FnUWlCeUFDS0FJSVJnUkFJQUlnQXhEUkJ5QUNLQUlFSVFNRklBY2dBeWtDQURjQ0FDQUNJQUlvQWdSQkNHb2lBellDQkFzZ0NDQUNLQUlBSWdjMkFpQWdDQ0FETmdJY0lBWWdDQ2dDSURZQ0FDQUZJQWdvQWh3MkFnQWdCaUFGSUFNZ0IydEJBM1VRMEFjTEN5QUVRUUZxSVFRTUFRc0xJQWtRMHdNZ0NDUUdDNTREQVFoL0l3WWhCQ01HUVRCcUpBWWdCRUVvYWlFSUlBUkJKR29oQ1NBRVFRaHFJUVVnQVNnQ0FDQUFLQUlBSWdFaUJtdEJBblZCQW5RZ0FXb2hBU0FES0FJQUlnb2dBaWdDQUNJRGF5SUNRUUoxSVFjZ0FrRUFTZ1JBQWtBZ0J5QUFLQUlJSUFBb0FnUWlDeUlDYTBFQ2RVb0VRRUgvLy8vL0F5QUhJQUlnQm10QkFuVnFJZ1pKQkVBUUFBVWdCU0FHSUFBb0FnZ2dBQ2dDQUNJQ2F5SUhRUUYxSWdzZ0N5QUdTUnRCLy8vLy93TWdCMEVDZFVILy8vLy9BVWtiSUFFZ0FtdEJBblVnQUVFSWFoRElBU0FFSUFNMkFnUWdCQ0FLTmdJQUlBa2dCQ2dDQkRZQ0FDQUlJQVFvQWdBMkFnQWdCU0FKSUFnUXlnY2dBQ0FGSUFFUXlRY2dCUkRIQVF3Q0N3c2dBaUFCYXlJRlFRSjFJZ1pCQW5RZ0Eyb2hBaUFISUFaS0JFQWdCQ0FDTmdJZ0lBUWdDallDSENBSklBUW9BaUEyQWdBZ0NDQUVLQUljTmdJQUlBQWdDU0FJRU13SElBVkJBRXdOQVFVZ0NpRUNDeUFBSUFFZ0N5QUhRUUowSUFGcUVNc0hJQUVoQUFOQUlBSWdBMGNFUUNBQUlBTW9BZ0EyQWdBZ0FFRUVhaUVBSUFOQkJHb2hBd3dCQ3dzTEN5QUVKQVlMaEFNQ0IzOEJmaU1HSVFRakJrRXdhaVFHSUFSQkNHb2hCU0FBS0FJSVJRUkFJQVZCd01nRFFhS0pBaEEzUWRIeEFSQTNRZStpQWhBM1FaVURFRDVCOXFJQ0VEZEJ4WWtDRURjaUFpQUNLQUlBUVhScUtBSUFhaEE3SUFWQmdNNERFRG9pQXlnQ0FDZ0NIQ0VHSUFOQkNpQUdRVDl4UVlvQmFoRUNBQ0VESUFVUVBDQUNJQU1RUUNBQ0VEOFFBQXNnQkVFY2FpRUdJQUJCQURZQ1pDQUFJQUFvQWtnMkFrd2dBRUhVQUdvaEJ5QUFLQUpZSVFJRFFDQUNJQWNvQWdBaUEwY0VRQ0FDSUFOcklnaEJDRW9FZnlBRklBTXBBZ0FpQ1RjREFDQURJQUpCZUdvaUFpa0NBRGNDQUNBQ0lBazNBZ0FnQkNBRE5nSVlJQVFnQWpZQ0ZDQUVJQU0yQWhBZ0JpQUVLQUlZTmdJQUlBUWdCQ2dDRkRZQ0lDQUZJQVFvQWhBMkFnQWdCaUFJUVFOMlFYOXFJQVVRdndNZ0FDZ0NXQVVnQWdzaEEwRUFJUUlEUUNBQ1FYOUhCRUFnQWtGL2FpRUNEQUVMQ3lBQUlBTkJlR29pQWpZQ1dBd0JDd3NnQUNBSElBQW9BZ2dnQVJDN0FpQUFLQUpNSUFBb0FraHJHaUFFSkFZTHlBRUJBWDhqQmlFTkl3WkJFR29rQmlBQklBVWdDWk9MT0FJQUlBSWdCaUFLazRzNEFnQWdCQ0FJSUF5VGl6Z0NBQ0FESUFjZ0M1T0xJZ1VnQUNnQ1BMSWdCWk1RL2dFaUJUZ0NBQ0FGUXdBQUFBQmdCRUFnRFNRR0JTQU5RY0RJQTBIWGlBSVFOMEd6aWdJUU4wSHZvZ0lRTjBITkFoQStRZmFpQWhBM1FZQ0pBaEEzSWdJZ0FpZ0NBRUYwYWlnQ0FHb1FPeUFOUVlET0F4QTZJZ0VvQWdBb0Fod2hBQ0FCUVFvZ0FFRS9jVUdLQVdvUkFnQWhBQ0FORUR3Z0FpQUFFRUFnQWhBL0VBQUxDK29JQVFOL0l3WWhCaU1HUVJCcUpBWWdBU0FGSUFBb0FsZ1FUeUFBS0FKVUVFOGdBQ2dDTkJCUElnYzJBZ0FnQWlBRklBZHJJQUFvQWxnUVR5QUFLQUpVRUU4Z0FDZ0NOQkE1SWdjMkFnQWdBeUFGSUFFb0FnQnJJQWNnQUNnQ05HeHJJQUFvQWxnUVR5QUFLQUpVRURraUJ6WUNBQ0FFSUFVZ0FTZ0NBR3NnQWlnQ0FDQUFLQUkwYkNBSElBQW9BbFJzYW1zZ0FDZ0NXQkE1SWdjMkFnQWdBU2dDQUNJRlFYOU1CRUFnQmtIQXlBTkJxWTRDRURkQnM0b0NFRGRCNzZJQ0VEZEJ2Z0VRUGtIMm9nSVFOMEhLamdJUU55SUlJQWdvQWdCQmRHb29BZ0JxRURzZ0JrR0F6Z01RT2lJRUtBSUFLQUljSVFFZ0JFRUtJQUZCUDNGQmlnRnFFUUlBSVFFZ0JoQThJQWdnQVJCQUlBZ1FQeEFBQ3lBRklBQW9BalJPQkVBZ0JrSEF5QU5CM0k0Q0VEZEJzNG9DRURkQjc2SUNFRGRCdndFUVBrSDJvZ0lRTjBIS2pnSVFOeUlGSUFVb0FnQkJkR29vQWdCcUVEc2dCa0dBemdNUU9pSUVLQUlBS0FJY0lRRWdCRUVLSUFGQlAzRkJpZ0ZxRVFJQUlRRWdCaEE4SUFVZ0FSQkFJQVVRUHhBQUN5QUNLQUlBSWdSQmYwd0VRQ0FHUWNESUEwR0Vqd0lRTjBHemlnSVFOMEh2b2dJUU4wSEFBUkErUWZhaUFoQTNRYVdQQWhBM0lnVWdCU2dDQUVGMGFpZ0NBR29RT3lBR1FZRE9BeEE2SWdJb0FnQW9BaHdoQVNBQ1FRb2dBVUUvY1VHS0FXb1JBZ0FoQVNBR0VEd2dCU0FCRUVBZ0JSQS9FQUFMSUFRZ0FDZ0NPRTRFUUNBR1FjRElBMEczandJUU4wR3ppZ0lRTjBIdm9nSVFOMEhCQVJBK1FmYWlBaEEzUWFXUEFoQTNJZ1FvQWdCQmRHb29BZ0FnQkdvUU95QUdRWURPQXhBNklnSW9BZ0FvQWh3aEFTQUNRUW9nQVVFL2NVR0tBV29SQWdBaEFTQUdFRHdnQkNBQkVFQWdCQkEvRUFBTElBTW9BZ0FpQTBGL1RBUkFJQVpCd01nRFFkK1BBaEEzUWJPS0FoQTNRZStpQWhBM1FjSUJFRDVCOXFJQ0VEZEJoSkFDRURjaUJDQUVLQUlBUVhScUtBSUFhaEE3SUFaQmdNNERFRG9pQWlnQ0FDZ0NIQ0VCSUFKQkNpQUJRVDl4UVlvQmFoRUNBQ0VCSUFZUVBDQUVJQUVRUUNBRUVEOFFBQXNnQXlBQUtBSThUZ1JBSUFaQndNZ0RRWnFRQWhBM1FiT0tBaEEzUWUraUFoQTNRY01CRUQ1QjlxSUNFRGRCaEpBQ0VEY2lBeUFES0FJQVFYUnFLQUlBYWhBN0lBWkJnTTRERURvaUFpZ0NBQ2dDSENFQklBSkJDaUFCUVQ5eFFZb0JhaEVDQUNFQklBWVFQQ0FESUFFUVFDQURFRDhRQUFzZ0IwRi9UQVJBSUFaQndNZ0RRY3FRQWhBM1FiT0tBaEEzUWUraUFoQTNRY1FCRUQ1QjlxSUNFRGRCNzVBQ0VEY2lBeUFES0FJQVFYUnFLQUlBYWhBN0lBWkJnTTRERURvaUFpZ0NBQ2dDSENFQklBSkJDaUFCUVQ5eFFZb0JhaEVDQUNFQklBWVFQQ0FESUFFUVFDQURFRDhRQUFzZ0J5QUFRVUJyS0FJQVNBUkFJQVlrQmdVZ0JrSEF5QU5CaFpFQ0VEZEJzNG9DRURkQjc2SUNFRGRCeFFFUVBrSDJvZ0lRTjBIdmtBSVFOeUlDSUFJb0FnQkJkR29vQWdCcUVEc2dCa0dBemdNUU9pSUJLQUlBS0FJY0lRQWdBVUVLSUFCQlAzRkJpZ0ZxRVFJQUlRQWdCaEE4SUFJZ0FCQkFJQUlRUHhBQUN3dnhBZ0VMZnlBQUlBRVF2QUlpQWtFQVNBUi9JQUlGQW44Z0FDZ0NBQVJBSUFCQkJHb2hDQ0FBUVFocUlRVUZJQUFnQUVFSWFpSUZLQUlBSUFCQkJHb2lDQ2dDQUd3UVJDSUNOZ0lBUVg4Z0FrVU5BUm9MQTBBZ0JpQUZLQUlBSWdKSUJFQkJBQ0VDQTBBZ0FpQUlLQUlBSWdsSUJFQkJmQ0VIUVFBaENrRUFJUU1EUUNBSFFRUk1CRUFnQmlBSGFpSUVRUUJPQkVBZ0JDQUZLQUlBU0FSQUFrQWdCQ0FKYkNFTVFYd2hCQU5BSUFSQkJFb05BU0FDSUFScUlndEJmMG9nQ3lBSlNIRUVRQ0FLUVFGcUlRb2dBeUFCSUFzZ0RHcHFMUUFBYWlFREN5QUVRUUZxSVFRTUFBQUxBQXNMQ3lBSFFRRnFJUWNNQVFzTElBTWdDaEE1UWY4QmNTRURJQUFvQWdBZ0FpQUdJQWxzYW1vZ0F6b0FBQ0FDUVFGcUlRSU1BUXNMSUFaQkFXb2hCZ3dCQ3d0QkFDRURJQUloQVFOL0lBTWdDQ2dDQUNBQmJFZ0VmeUFESUFBb0FnQnFJZ0VnQVMwQUFFRjVham9BQUNBRFFRRnFJUU1nQlNnQ0FDRUJEQUVGUVFBTEN3c0xDN3dUQWc5L0FYd2pCaUVPSXdaQkVHb2tCaUFFS0FJQUlnWWhEU0FCSUFKQmYyb2lFR3hCQVhRZ0Jtb2hCUU5BSUFjZ0FVZ0VRQ0FGUVFBN0FRQWdEVUVBT3dFQUlBMUJBbW9oRFNBRlFRSnFJUVVnQjBFQmFpRUhEQUVMQ3lBR0lRY2dBVUYvYWlJUlFRRjBJQVpxSVExQkFDRUZBMEFnQlNBQ1NBUkFJQTFCQURzQkFDQUhRUUE3QVFBZ0FVRUJkQ0FIYWlFSElBRkJBWFFnRFdvaERTQUZRUUZxSVFVTUFRc0xJQVJCa0lESUFHb2hCMEVBSUFGcklSSWdBQ0FCUVFGcUlnQnFJUTFCQVNFTFFRQWhCU0FBUVFGMElBWnFJUVlDZndKQUEwQUNRQ0FMSUJCT0RRSWdCU0VBUVFFaENTQUdJUXdEUUNBSklCRklCRUFnRFMwQUFDQURTZ1JBSUF4QkFEc0JBQVVDUUNBU1FRRjBJQXhxSWc4dUFRQWlCVUVBU2dSQUlBd2dCVHNCQUNBRlFRZHNJZ1pCQW5RZ0JHcEI5UC9QQUdvaUJTQUZLQUlBUVFGcU5nSUFJQVpCQW5RZ0JHcEIrUC9QQUdvaUJTQUpJQVVvQWdCcU5nSUFJQVpCQW5RZ0JHcEIvUC9QQUdvaUJTQUxJQVVvQWdCcU5nSUFJQVpCQW5RZ0JHcEJqSURRQUdvZ0N6WUNBQXdCQ3lBUFFYNXFMZ0VBSWdvaENDQUtRUUJLSVFZZ0R5NEJBaUlGUVFCTUJFQWdCZ1JBSUF3Z0Nqc0JBQ0FJUVFkc0lnWkJBblFnQkdwQjlQL1BBR29pQlNBRktBSUFRUUZxTmdJQUlBWkJBblFnQkdwQitQL1BBR29pQlNBSklBVW9BZ0JxTmdJQUlBWkJBblFnQkdwQi9QL1BBR29pQlNBTElBVW9BZ0JxTmdJQUlBWkJBblFnQkdwQmhJRFFBR29pQlNnQ0FDQUpTQVJBSUFVZ0NUWUNBQXNnQmtFQ2RDQUVha0dNZ05BQWFpQUxOZ0lBREFJTElBeEJmbW91QVFBaUJVRUFTZ1JBSUF3Z0JUc0JBQ0FGUVFkc0lnWkJBblFnQkdwQjlQL1BBR29pQlNBRktBSUFRUUZxTmdJQUlBWkJBblFnQkdwQitQL1BBR29pQlNBSklBVW9BZ0JxTmdJQUlBWkJBblFnQkdwQi9QL1BBR29pQlNBTElBVW9BZ0JxTmdJQUlBWkJBblFnQkdwQmhJRFFBR29pQlNnQ0FDQUpUZzBDSUFVZ0NUWUNBQVVnQUVILy93RktEUVlnRENBQVFRRnFJZ1U3QVFBZ0JFR1FnTWdBYWlBQVFRSjBhaUFGUVJCMFFSQjFOZ0lBSUFSQmtJRFFBR29nQUVFSGJDSUFRUUowYWtFQk5nSUFJQUJCQW5RZ0JHcEJsSURRQUdvZ0NUWUNBQ0FBUVFKMElBUnFRWmlBMEFCcUlBczJBZ0FnQUVFQ2RDQUVha0djZ05BQWFpQUpOZ0lBSUFCQkFuUWdCR3BCb0lEUUFHb2dDVFlDQUNBQVFRSjBJQVJxUWFTQTBBQnFJQXMyQWdBZ0FFRUNkQ0FFYWtHb2dOQUFhaUFMTmdJQUlBVWhBQXNNQVFzZ0JnUkFBa0FnQlVFQ2RDQUVha0dNZ01nQWFpZ0NBQ0lGSUFoQkFuUWdCR3BCaklESUFHb29BZ0FpQ0VvRVFDQU1JQWc3QVFBZ0J5RUdRUUFoQ2dOQUlBb2dBRTRFUUNBSUlRVU1Bd3NnQlNBR0tBSUFSZ1JBSUFZZ0NEWUNBQXNnQmtFRWFpRUdJQXBCQVdvaENnd0FBQXNBQlNBTUlBVTdBUUFnQlNBSVNBUkFJQWNoQmtFQUlRb0RRQ0FLSUFCT0RRTWdDQ0FHS0FJQVJnUkFJQVlnQlRZQ0FBc2dCa0VFYWlFR0lBcEJBV29oQ2d3QUFBc0FDd3NMSUFWQkVIUkJFSFZCQjJ3aUJrRUNkQ0FFYWtIMC84OEFhaUlGSUFVb0FnQkJBV28yQWdBZ0JrRUNkQ0FFYWtINC84OEFhaUlGSUFrZ0JTZ0NBR28yQWdBZ0JrRUNkQ0FFYWtIOC84OEFhaUlGSUFzZ0JTZ0NBR28yQWdBZ0JrRUNkQ0FFYWtHTWdOQUFhaUFMTmdJQURBRUxJQXhCZm1vdUFRQWlCa0VBVEFSQUlBd2dCVHNCQUNBRlFRZHNJZ1pCQW5RZ0JHcEI5UC9QQUdvaUJTQUZLQUlBUVFGcU5nSUFJQVpCQW5RZ0JHcEIrUC9QQUdvaUJTQUpJQVVvQWdCcU5nSUFJQVpCQW5RZ0JHcEIvUC9QQUdvaUJTQUxJQVVvQWdCcU5nSUFJQVpCQW5RZ0JHcEJnSURRQUdvaUJTZ0NBQ0FKU2dSQUlBVWdDVFlDQUFzZ0JrRUNkQ0FFYWtHTWdOQUFhaUFMTmdJQURBRUxBa0FnQlVFQ2RDQUVha0dNZ01nQWFpZ0NBQ0lGSUFaQkFuUWdCR3BCaklESUFHb29BZ0FpQ0VvRVFDQU1JQWc3QVFBZ0J5RUdRUUFoQ2dOQUlBb2dBRTRFUUNBSUlRVU1Bd3NnQmlnQ0FDQUZSZ1JBSUFZZ0NEWUNBQXNnQmtFRWFpRUdJQXBCQVdvaENnd0FBQXNBQlNBTUlBVTdBUUFnQlNBSVNBUkFJQWNoQmtFQUlRb0RRQ0FLSUFCT0RRTWdDQ0FHS0FJQVJnUkFJQVlnQlRZQ0FBc2dCa0VFYWlFR0lBcEJBV29oQ2d3QUFBc0FDd3NMSUFWQkVIUkJFSFZCQjJ3aUJrRUNkQ0FFYWtIMC84OEFhaUlGSUFVb0FnQkJBV28yQWdBZ0JrRUNkQ0FFYWtINC84OEFhaUlGSUFrZ0JTZ0NBR28yQWdBZ0JrRUNkQ0FFYWtIOC84OEFhaUlGSUFzZ0JTZ0NBR28yQWdBTEN5QU5RUUZxSVEwZ0NVRUJhaUVKSUF4QkFtb2hEQXdCQ3dzZ0RVRUNhaUVOSUF0QkFXb2hDeUFBSVFVZ0RFRUVhaUVHREFFTEMwRUFRUU5CcUtVQklBNFFQVUYvREFFTElBUkJER29oRFVFQklRQkJBU0VJQTBBZ0NDQUZUQVJBSUFnZ0J5Z0NBQ0lHUmdSQUlBQkJBV29oQXdVZ0FDRURJQVpCQW5RZ0JHcEJqSURJQUdvb0FnQWhBQXNnQnlBQU5nSUFJQU1oQUNBSVFRRnFJUWdnQjBFRWFpRUhEQUVMQ3lBRUlBQkJmMm9pQnpZQ0NDQUhCSDhnRFVFQUlBZEJBblFRUlJvZ0JFR1FnQ2hxUVFBZ0IwRUVkQkJGR2tFQUlRTURRQ0FESUFkSUJFQWdCRUdNZ0FocUlBTkJBblFpQUVFQ2RHb2dBVFlDQUNBRVFZeUFDR29nQUVFQmNrRUNkR3BCQURZQ0FDQUVRWXlBQ0dvZ0FFRUNja0VDZEdvZ0FqWUNBQ0FFUVl5QUNHb2dBRUVEY2tFQ2RHcEJBRFlDQUNBRFFRRnFJUU1NQVFzTFFRQWhBd05BSUFNZ0JVZ0VRQ0FFUVF4cUlBUkJrSURJQUdvZ0EwRUNkR29vQWdCQmYyb2lBa0VDZEdvaUFDQUVRWkNBMEFCcUlBTkJCMndpQjBFQ2RHb29BZ0FnQUNnQ0FHbzJBZ0FnQkVHUWdDaHFJQUpCQVhRaUFVRURkR29pQUNBQUt3TUFJQWRCQW5RZ0JHcEJsSURRQUdvb0FnQzNvRGtEQUNBRVFaQ0FLR29nQVVFQmNrRURkR29pQUNBQUt3TUFJQWRCQW5RZ0JHcEJtSURRQUdvb0FnQzNvRGtEQUNBRVFZeUFDR29nQWtFQ2RDSUNRUUowYWlJQktBSUFJQWRCQW5RZ0JHcEJuSURRQUdvb0FnQWlBRW9FUUNBQklBQTJBZ0FMSUFSQmpJQUlhaUFDUVFGeVFRSjBhaUlCS0FJQUlBZEJBblFnQkdwQm9JRFFBR29vQWdBaUFFZ0VRQ0FCSUFBMkFnQUxJQVJCaklBSWFpQUNRUUp5UVFKMGFpSUJLQUlBSUFkQkFuUWdCR3BCcElEUUFHb29BZ0FpQUVvRVFDQUJJQUEyQWdBTElBUkJqSUFJYWlBQ1FRTnlRUUowYWlJQktBSUFJQWRCQW5RZ0JHcEJxSURRQUdvb0FnQWlBRWdFUUNBQklBQTJBZ0FMSUFOQkFXb2hBd3dCQ3dzZ0JDZ0NDQ0VDUVFBaEF3Ti9JQU1nQWtnRWZ5QUVRWkNBS0dvZ0EwRUJkQ0lCUVFOMGFpSUFJQUFyQXdBZ0JFRU1haUFEUVFKMGFpZ0NBTGNpRktNNUF3QWdCRUdRZ0NocUlBRkJBWEpCQTNScUlnQWdBQ3NEQUNBVW96a0RBQ0FEUVFGcUlRTU1BUVZCQUFzTEJVRUFDd3NoRXlBT0pBWWdFd3M2QVFGL0lBQW9BZ1FoQWdOQUlBSkRBQUFBQURnQ0FDQUNRd0FBQUFBNEFnUWdBQ0FBS0FJRVFRaHFJZ0kyQWdRZ0FVRi9haUlCRFFBTEM1TUJBUUYvUVFkQkJrRUZRUVJCQTBFQ0lBQXFBZ1FnQUNvQ0FGNGlBU0FBS2dJSUlBRkJBblFnQUdvcUFnQmVHeUlCSUFBcUFnd2dBVUVDZENBQWFpb0NBRjRiSWdFZ0FDb0NFQ0FCUVFKMElBQnFLZ0lBWGhzaUFTQUFLZ0lVSUFGQkFuUWdBR29xQWdCZUd5SUJJQUFxQWhnZ0FVRUNkQ0FBYWlvQ0FGNGJJZ0VnQUNvQ0hDQUJRUUowSUFCcUtnSUFYaHNMZlFFQmYwRUdRUVZCQkVFRFFRSWdBQ29DQkNBQUtnSUFYaUlCSUFBcUFnZ2dBVUVDZENBQWFpb0NBRjRiSWdFZ0FDb0NEQ0FCUVFKMElBQnFLZ0lBWGhzaUFTQUFLZ0lRSUFGQkFuUWdBR29xQWdCZUd5SUJJQUFxQWhRZ0FVRUNkQ0FBYWlvQ0FGNGJJZ0VnQUNvQ0dDQUJRUUowSUFCcUtnSUFYaHNMWndFQmYwRUZRUVJCQTBFQ0lBQXFBZ1FnQUNvQ0FGNGlBU0FBS2dJSUlBRkJBblFnQUdvcUFnQmVHeUlCSUFBcUFnd2dBVUVDZENBQWFpb0NBRjRiSWdFZ0FDb0NFQ0FCUVFKMElBQnFLZ0lBWGhzaUFTQUFLZ0lVSUFGQkFuUWdBR29xQWdCZUd3dFJBUUYvUVFSQkEwRUNJQUFxQWdRZ0FDb0NBRjRpQVNBQUtnSUlJQUZCQW5RZ0FHb3FBZ0JlR3lJQklBQXFBZ3dnQVVFQ2RDQUFhaW9DQUY0YklnRWdBQ29DRUNBQlFRSjBJQUJxS2dJQVhoc0xPd0VCZjBFRFFRSWdBQ29DQkNBQUtnSUFYaUlCSUFBcUFnZ2dBVUVDZENBQWFpb0NBRjRiSWdFZ0FDb0NEQ0FCUVFKMElBQnFLZ0lBWGhzTDhBRUNBMzhIZlNBQUlBRVF2QUlpQVVFQVRnUkFRUUVoQVFOQUlBY2dBRUVNYWlBQlFRSjBhaWdDQUNBQmJMT1NJUWNnQVVFQmFpSUJRWUFDUncwQUN5QUFLQUlFSUFBb0FnaHNzaUVNUVFBaEFRTkFBa0FnQmlBQVFReHFJQU5CQW5ScUtBSUFJZ1N6a2lJR1F3QUFBQUJjQkVBZ0RDQUdreUlMUXdBQUFBQmJEUUVnQ1NBRElBUnNzNUlpQ1NBR2xTQUhJQW1USUF1Vmt5SUtJQVlnQzVRZ0NwU1VJZ29nQ0Y0aEJTQURRZjhCY1NJRUlBRWdCUnNoQVNBS0lBZ2dCUnNoQ0FVZ0EwSC9BWEVoQkFzZ0EwRUJhaUVESUFSQi93RnhRZjhCUncwQkN3c2dBaUFCT2dBQVFRQWhBUXNnQVFzbEFRRi9RUUlnQUNvQ0JDQUFLZ0lBWGlJQklBQXFBZ2dnQVVFQ2RDQUFhaW9DQUY0YkM2a0JBUUYvUVFoQkIwRUdRUVZCQkVFRFFRSWdBQ29DQkNBQUtnSUFYaUlCSUFBcUFnZ2dBVUVDZENBQWFpb0NBRjRiSWdFZ0FDb0NEQ0FCUVFKMElBQnFLZ0lBWGhzaUFTQUFLZ0lRSUFGQkFuUWdBR29xQWdCZUd5SUJJQUFxQWhRZ0FVRUNkQ0FBYWlvQ0FGNGJJZ0VnQUNvQ0dDQUJRUUowSUFCcUtnSUFYaHNpQVNBQUtnSWNJQUZCQW5RZ0FHb3FBZ0JlR3lJQklBQXFBaUFnQVVFQ2RDQUFhaW9DQUY0YkMra0JBUU4vSXdZaEFpTUdRWUFEYWlRR0lBSkIwQUpxSWdNZ0FpQUJRUUFRb1FFNEFnQWdBeUFDUVNScUlBRkJBUkNoQVRnQ0JDQURJQUpCeUFCcUlBRkJBaENoQVRnQ0NDQURJQUpCN0FCcUlBRkJBeENoQVRnQ0RDQURJQUpCa0FGcUlBRkJCQkNoQVRnQ0VDQURJQUpCdEFGcUlBRkJCUkNoQVRnQ0ZDQURJQUpCMkFGcUlBRkJCaENoQVRnQ0dDQURJQUpCL0FGcUlBRkJCeENoQVRnQ0hDQURJQUpCb0FKcUlBRkJDQkNoQVRnQ0lDQURFT0lISWdGQkFuUWdBMm9xQWdCREFBQUFBRnNFZjBFQUJTQUFJQUZCQ1d4QkFuUWdBbW9RdmdKQkFRc2hCQ0FDSkFZZ0JBdW9BUUVFZnlBQUlBRVE5Z2NpQVVFQVNBUi9JQUVGSUFBb0FnZ2dBQ2dDQkd5eVF3QUFBRCtVRUpJQklRUkJBQ0VCQTBBZ0FVRUJha0VZZEVFWWRTRURJQUJCakFocUlBRkIvd0Z4SWdaQkFuUnFLQUlBSWdVZ0JFa0VRQ0FESVFFTUFRc0xBMEFnQVVFQmFrRVlkRUVZZFNFRElBUWdCVVlFUUNBQVFZd0lhaUFESWdGQi93RnhRUUowYWlnQ0FDRUZEQUVMQ3lBQ0lBWWdBVUgvQVhGcVFRRjJPZ0FBUVFBTEMwQUNBWDhCZlNBQVFmd0JhaUlDSUFCQjJBRnFJQUZCL0FGcUVHVWdBaEJhSWdOREFBQUFBRnNFZjBFQUJTQUNJQUpEQUFDQVB5QURrWlVRbEFGQkFRc0xyUUVCQlg4akJpRUNJd1pCRUdva0JpQUFRZGdCYWlJRElBQkJ0QUZxSWdVZ0FVSFlBV29pQkJCbElBQkIvQUZxSWdBZ0JTQUJRZndCYWhCbElBSWdBeEJhT0FJQUlBSWdBQkJhT0FJRUlBSXFBZ1FnQWlvQ0FGNGlBRUVDZENBQ2FpSUJLZ0lBUXdBQUFBQmJCSDlCQUFVZ0F5QUFRUWxzSWdCQkFuUWdBMm9RakFFZ0JDQUFRUUowSUFScUVJd0JJQU1nQTBNQUFJQS9JQUVxQWdDUmxSQ1VBVUVCQ3lFR0lBSWtCaUFHQzhJQkFRWi9Jd1loQWlNR1FSQnFKQVlnQUVHMEFXb2lBeUFBUVpBQmFpSUVJQUZCdEFGcUlnVVFaU0FBUWRnQmFpSUdJQVFnQVVIWUFXb1FaU0FBUWZ3QmFpSUFJQVFnQVVIOEFXb1FaU0FDSUFNUVdqZ0NBQ0FDSUFZUVdqZ0NCQ0FDSUFBUVdqZ0NDQ0FDRU9FSElnQkJBblFnQW1vaUFTb0NBRU1BQUFBQVd3Ui9RUUFGSUFNZ0FFRUpiQ0lBUVFKMElBTnFFSXdCSUFVZ0FFRUNkQ0FGYWhDTUFTQURJQU5EQUFDQVB5QUJLZ0lBa1pVUWxBRkJBUXNoQnlBQ0pBWWdCd3ZkQVFFSGZ5TUdJUUlqQmtFUWFpUUdJQUJCa0FGcUlnTWdBRUhzQUdvaUJDQUJRWkFCYWlJRkVHVWdBRUcwQVdvaUJpQUVJQUZCdEFGcUVHVWdBRUhZQVdvaUJ5QUVJQUZCMkFGcUVHVWdBRUg4QVdvaUFDQUVJQUZCL0FGcUVHVWdBaUFERUZvNEFnQWdBaUFHRUZvNEFnUWdBaUFIRUZvNEFnZ2dBaUFBRUZvNEFnd2dBaERmQnlJQVFRSjBJQUpxSWdFcUFnQkRBQUFBQUZzRWYwRUFCU0FESUFCQkNXd2lBRUVDZENBRGFoQ01BU0FGSUFCQkFuUWdCV29RakFFZ0F5QURRd0FBZ0Q4Z0FTb0NBSkdWRUpRQlFRRUxJUWdnQWlRR0lBZ0wrQUVCQ0g4akJpRUNJd1pCSUdva0JpQUFRZXdBYWlJRElBQkJ5QUJxSWdRZ0FVSHNBR29pQlJCbElBQkJrQUZxSWdZZ0JDQUJRWkFCYWhCbElBQkJ0QUZxSWdjZ0JDQUJRYlFCYWhCbElBQkIyQUZxSWdnZ0JDQUJRZGdCYWhCbElBQkIvQUZxSWdBZ0JDQUJRZndCYWhCbElBSWdBeEJhT0FJQUlBSWdCaEJhT0FJRUlBSWdCeEJhT0FJSUlBSWdDQkJhT0FJTUlBSWdBQkJhT0FJUUlBSVEzZ2NpQUVFQ2RDQUNhaUlCS2dJQVF3QUFBQUJiQkg5QkFBVWdBeUFBUVFsc0lnQkJBblFnQTJvUWpBRWdCU0FBUVFKMElBVnFFSXdCSUFNZ0EwTUFBSUEvSUFFcUFnQ1JsUkNVQVVFQkN5RUpJQUlrQmlBSkM1SUNBUWwvSXdZaEFpTUdRU0JxSkFZZ0FFSElBR29pQXlBQVFTUnFJZ1FnQVVISUFHb2lCUkJsSUFCQjdBQnFJZ1lnQkNBQlFld0FhaEJsSUFCQmtBRnFJZ2NnQkNBQlFaQUJhaEJsSUFCQnRBRnFJZ2dnQkNBQlFiUUJhaEJsSUFCQjJBRnFJZ2tnQkNBQlFkZ0JhaEJsSUFCQi9BRnFJZ0FnQkNBQlFmd0JhaEJsSUFJZ0F4QmFPQUlBSUFJZ0JoQmFPQUlFSUFJZ0J4QmFPQUlJSUFJZ0NCQmFPQUlNSUFJZ0NSQmFPQUlRSUFJZ0FCQmFPQUlVSUFJUTNRY2lBRUVDZENBQ2FpSUJLZ0lBUXdBQUFBQmJCSDlCQUFVZ0F5QUFRUWxzSWdCQkFuUWdBMm9RakFFZ0JTQUFRUUowSUFWcUVJd0JJQU1nQTBNQUFJQS9JQUVxQWdDUmxSQ1VBVUVCQ3lFS0lBSWtCaUFLQzZZQ0FRcC9Jd1loQWlNR1FTQnFKQVlnQUVFa2FpSURJQUFnQVVFa2FpSUVFR1VnQUVISUFHb2lCU0FBSUFGQnlBQnFFR1VnQUVIc0FHb2lCaUFBSUFGQjdBQnFFR1VnQUVHUUFXb2lCeUFBSUFGQmtBRnFFR1VnQUVHMEFXb2lDQ0FBSUFGQnRBRnFFR1VnQUVIWUFXb2lDU0FBSUFGQjJBRnFFR1VnQUVIOEFXb2lDaUFBSUFGQi9BRnFFR1VnQWlBREVGbzRBZ0FnQWlBRkVGbzRBZ1FnQWlBR0VGbzRBZ2dnQWlBSEVGbzRBZ3dnQWlBSUVGbzRBaEFnQWlBSkVGbzRBaFFnQWlBS0VGbzRBaGdnQWhEY0J5SUFRUUowSUFKcUlnRXFBZ0JEQUFBQUFGc0VmMEVBQlNBRElBQkJDV3dpQUVFQ2RDQURhaENNQVNBRUlBQkJBblFnQkdvUWpBRWdBeUFEUXdBQWdEOGdBU29DQUpHVkVKUUJRUUVMSVFzZ0FpUUdJQXNMeXdFQkJYOGpCaUVDSXdaQklHb2tCaUFDSUFFUVdqZ0NBQ0FDSUFGQkpHb2lBeEJhT0FJRUlBSWdBVUhJQUdvUVdqZ0NDQ0FDSUFGQjdBQnFFRm80QWd3Z0FpQUJRWkFCYWhCYU9BSVFJQUlnQVVHMEFXb1FXamdDRkNBQ0lBRkIyQUZxRUZvNEFoZ2dBaUFCUWZ3QmFoQmFPQUljSUFJUTJ3Y2lCRUVDZENBQ2FpSUZLZ0lBUXdBQUFBQmJCSDlCQUFVZ0FTQUVRUWxzUVFKMElBRnFFSXdCSUFBZ0FVTUFBSUEvSUFVcUFnQ1JsUkNVQVNBQVFTUnFJQU5CUHhDNEFVRUJDeUVHSUFJa0JpQUdDNGNCQVFKL0l3WWhBaU1HUWFBQ2FpUUdJQUlnQVJEc0J3Ui9JQUlnQVJEckJ3Ui9JQUlnQVJEcUJ3Ui9JQUlnQVJEcEJ3Ui9JQUlnQVJEb0J3Ui9JQUlnQVJEbkJ3Ui9JQUlnQVJEbUJ3Ui9JQUlnQVJEbEJ3Ui9JQUFnQWhEakJ3VkJBQXNGUVFBTEJVRUFDd1ZCQUFzRlFRQUxCVUVBQ3dWQkFBc0ZRUUFMSVFNZ0FpUUdJQU1MTWdBZ0FDQUJJQVVRL0FFZ0FFSElBR29nQWlBR0VQd0JJQUJCa0FGcUlBTWdCeEQ4QVNBQVFkZ0JhaUFFSUFnUS9BRUxtQUlCQm4wZ0FTb0NHQ0lHSUFVcUFnQWlCNVFnQVNvQ0FDQUVsWkloQ2lBSElBRXFBaHdpQ0pRZ0FTb0NCQ0FFbFpJaEJ5QUdJQVVxQWdRaUNaUWdBU29DRENBRWxaSWhCaUFJSUFtVUlBRXFBaEFnQkpXU0lRZ2dBeW9DQUNBQ2xDRUpJQU1xQWdRZ0FwUWhDeUFBSUFvZ0FwUTRBZ0FnQUNBSElBS1VPQUlFSUFBZ0FTb0NJQ0FGS2dJQWxDQUJLZ0lJSUFTVmtpQUtJQW1Va3lBSElBdVVremdDQ0NBQUlBWWdBcFE0QWd3Z0FDQUlJQUtVT0FJUUlBQWdBU29DSUNBRktnSUVsQ0FCS2dJVUlBU1ZraUFHSUFtVWt5QUlJQXVVa3pnQ0ZDQUFJQUVxQWhnZ0FwUWlCRGdDR0NBQUlBRXFBaHdnQXBRaUFqZ0NIQ0FBSUFFcUFpQWdCQ0FES2dJQWxKTWdBaUFES2dJRWxKTTRBaUFMVEFFQ2Z5TUdJUWtqQmtHZ0Ftb2tCaUFKSUFFZ0FpQURJQVFnQlNBR0lBY2dDQkR1QnlBQUlBa1E3UWNFZnlBQUVNY0RpN3RFOFdqamlMWDQ1RDVqUlFWQkFBc2hDaUFKSkFZZ0NndTJCQUlLZndOOUl3WWhCeU1HUVJCcUpBWWdBa0VBVEFSQUlBZEJ3TWdEUWZXVUFoQTNRWktWQWhBM1FlK2lBaEEzUWRJQUVENUI5cUlDRURkQmhKWUNFRGNpQkNBRUtBSUFRWFJxS0FJQWFoQTdJQWRCZ000REVEb2lCU2dDQUNnQ0hDRUdJQVZCQ2lBR1FUOXhRWW9CYWhFQ0FDRUZJQWNRUENBRUlBVVFRQ0FFRUQ4UUFBc2dBMEVBVEFSQUlBZEJ3TWdEUVplV0FoQTNRWktWQWhBM1FlK2lBaEEzUWRNQUVENUI5cUlDRURkQnRKWUNFRGNpQkNBRUtBSUFRWFJxS0FJQWFoQTdJQWRCZ000REVEb2lCU2dDQUNnQ0hDRUdJQVZCQ2lBR1FUOXhRWW9CYWhFQ0FDRUZJQWNRUENBRUlBVVFRQ0FFRUQ4UUFBc2dBMEYvYWlJS1FRTjBJQUZxSVFzZ0NrRURkQ0FCYWlFTklBSkJmMm9oQlVFQUlRWURRQ0FHSUFWSUJFQWdDeW9DQUNFT0lBMG9BZ1FoRENBR0lRSWdCU0VFQTBBRFFBSkFJQUpCQTNRZ0FXb2lDQ29DQUNJUElBNWRSUVJBSUE0Z0QxME5BU0FDUVFOMElBRnFLQUlFSUF4T0RRRUxJQUpCQVdvaEFnd0JDd3NEUUFKQUlBNGdCRUVEZENBQmFpSUpLZ0lBSWhCZFJRUkFJQkFnRGwwTkFTQU1JQVJCQTNRZ0FXb29BZ1JPRFFFTElBUkJmMm9oQkF3QkN3c2dBaUFFVEFSQUlBZ2dFRGdDQUNBSklBODRBZ0FnQWtFRGRDQUJhaUlJS0FJRUlRa2dDQ0FFUVFOMElBRnFJZ2dvQWdRMkFnUWdDQ0FKTmdJRUlBSkJBV29oQWlBRVFYOXFJUVFMSUFJZ0JFd05BQXNnQlNBRUlBSWdBMGdiSVFVZ0FpQUdJQVFnQ2tnYklRWU1BUXNMSUFBZ0N5a0NBRGNDQUNBSEpBWUxnUUVCQVgwZ0FDQUFLZ0lBUXdBQWdEOGdBQ29DSUpVaUFaUTRBZ0FnQUNBQklBQXFBZ1NVT0FJRUlBQWdBU0FBS2dJSWxEZ0NDQ0FBSUFFZ0FDb0NESlE0QWd3Z0FDQUJJQUFxQWhDVU9BSVFJQUFnQVNBQUtnSVVsRGdDRkNBQUlBRWdBQ29DR0pRNEFoZ2dBQ0FCSUFBcUFoeVVPQUljSUFCREFBQ0FQemdDSUF0NUFnTi9BbjBqQmlFRUl3WkJFR29rQmlBRVFRaHFJZ1ZCQkdvaEJpQUZJQVlnQUNBQktnSUFJQUVxQWdRUXZRSWdCQ0FGS2dJQUlBSXFBZ0NUT0FJQUlBUWdCaW9DQUNBQ0tnSUVremdDQkNBRUtnSUFJZ2NnQjVRZ0JDb0NCQ0lISUFlVWtpQURsRU1BQUlBL2toRFNBU0VJSUFRa0JpQUlDL2NCQVExL0l3WWhBaU1HUVRCcUpBWUNmeUFDUVNCcUlnTWdBQ0FCRUtvQklBSkJHR29pQkNBQUlBRkJDR29pQnhDcUFTQUNRUkJxSWdVZ0FDQUJRUkJxSWdZUXFnRWdBa0VJYWlJS0lBTVF4UU1nQWlBRUVNVURJQUVnQnlBR0lBTWdCQ0FGRVAwQkJIOUJBeUVJSUFjaENTQUJJUXNEUUNBSVFRUklCRUFnQXlBQUlBWkJDR29pQmhDcUFVRUFJQXRCQ0dvaUN5QUpRUWhxSWdrZ0JpQUVJQVVnQXhEOUFVVU5BeG9nQXlFTklBaEJBV29oQ0NBRUlRTWdCU0VFSUEwaEJRd0JDd3NnQ1NBR0lBRWdCQ0FGSUFvUS9RRUVmeUFHSUFFZ0J5QUZJQW9nQWhEOUFRVkJBQXNGUVFBTEN5RU9JQUlrQmlBT0M5UUJBUTUvSXdZaENTTUdRWUFCYWlRR0lBbEIrQUJxSVFvZ0NVSG9BR29oQ3lBSlFVQnJJUXdnQ1VFNGFpRU5JQWxCTUdvaERpQUpRU2hxSVE4Z0NVSGdBR29pRUNBSlFkZ0FhaUlSSUFsQjBBQnFJaElnQ1VISUFHb2lFeUFKUWZ3QWFpSVVJQWxCOEFCcUloVWdBU0FDSUFNZ0JCREVBd1IvSUF3Z0RTQU9JQThnQ2lBTElBVWdCaUFISUFnUXhBTUVmeUFKSUJBZ0VTQVNJQk1nRENBTklBNGdEeER3QndSL0lBQWdDU0FVS2dJQUlCVWdDaW9DQUNBTEVPOEhRUUVGUVFBTEJVRUFDd1ZCQUFzaEZpQUpKQVlnRmd0UEFRRi9JQUFnQVJDOEFpSUJRUUJPQkVCQkFDRUJBMzhnQUVHTUNHb2dBVUVDZEdvZ0FpQUFRUXhxSUFGQkFuUnFLQUlBYWlJQ05nSUFJQUZCQVdvaUFVR0FBa2NOQUVFQUN5RUJDeUFCQzVrQkFRRi9JQUFnQVNBQ0VJVUJRd0FBQUFCZUlRZ2dCQ0FGSUFZUWhRRkRBQUFBQUY0Z0NITUVmMEVBQlNBQklBSWdBeENGQVVNQUFBQUFYaUFGSUFZZ0J4Q0ZBVU1BQUFBQVhuTUVmMEVBQlNBQ0lBTWdBQkNGQVVNQUFBQUFYaUFHSUFjZ0JCQ0ZBVU1BQUFBQVhuTUVmMEVBQlNBRElBQWdBUkNGQVVNQUFBQUFYaUFISUFRZ0JSQ0ZBVU1BQUFBQVhuTkJBWE1MQ3dzTGtBa0NDbjhCZlNNR0lSRWpCa0VRYWlRR0lCRkJDR29oRHlBRktBSUVJQVVvQWdCclFRSjFJQWxCQ1d4SkJFQWdEMEhBeUFOQjA0UUNFRGRCallVQ0VEZEI3NklDRURkQjl3QVFQa0gyb2dJUU4wR1VoZ0lRTnlJTUlBd29BZ0JCZEdvb0FnQnFFRHNnRDBHQXpnTVFPaUlOS0FJQUtBSWNJUTRnRFVFS0lBNUJQM0ZCaWdGcUVRSUFJUTBnRHhBOElBd2dEUkJBSUF3UVB4QUFDeUFHS0FJRUlBWW9BZ0FpREd0QkFuVWdBMGtFUUNBUFFjRElBMEhHaGdJUU4wR05oUUlRTjBIdm9nSVFOMEg0QUJBK1FmYWlBaEEzUWZpR0FoQTNJZ1lnQmlnQ0FFRjBhaWdDQUdvUU95QVBRWURPQXhBNklnMG9BZ0FvQWh3aERpQU5RUW9nRGtFL2NVR0tBV29SQWdBaERTQVBFRHdnQmlBTkVFQWdCaEEvRUFBTElBY29BZ1FnQnlnQ0FHdEJBM1VnQ1VrRVFDQVBRY0RJQTBHaWh3SVFOMEdOaFFJUU4wSHZvZ0lRTjBINUFCQStRZmFpQWhBM1FlQ0hBaEEzSWdZZ0JpZ0NBRUYwYWlnQ0FHb1FPeUFQUVlET0F4QTZJZzBvQWdBb0Fod2hEaUFOUVFvZ0RrRS9jVUdLQVdvUkFnQWhEU0FQRUR3Z0JpQU5FRUFnQmhBL0VBQUxJQU5CQkVnRWYwRUFCU0FSUWRJSk5nSUFJQWdRYVNFSUlBc2dBeENGQWlFTklBd2dBeERjQXlBTUlBTWdBeUFSRU1FQ1FRQWhCZ05BSUJBZ0NrZ2dCaUFKU0hFRVFDQU1JQU5CQkNBUkVNRUNJQXdvQWdCQkFYUWlDMEVDZENBQmFpQU1LQUlFUVFGMElnNUJBblFnQVdvZ0RDZ0NDRUVCZENJU1FRSjBJQUZxSUF3b0FneEJBWFFpRTBFQ2RDQUJhaUFMUVFKMElBSnFJQTVCQW5RZ0Ftb2dFa0VDZENBQ2FpQVRRUUowSUFKcUVQY0hCRUFnQlNnQ0FDQUdRUWxzSWd0QkFuUnFJQXdvQWdCQkFYUWlEa0VDZENBQmFpQU1LQUlFUVFGMEloSkJBblFnQVdvZ0RDZ0NDRUVCZENJVFFRSjBJQUZxSUF3b0FneEJBWFFpRkVFQ2RDQUJhaUFPUVFKMElBSnFJQkpCQW5RZ0Ftb2dFMEVDZENBQ2FpQVVRUUowSUFKcUVQVUhCRUFnQlNnQ0FDQUxRUUowYWlBRUVQUUhCRUFnQmtFQmFpRUdDd3NMSUJCQkFXb2hFQXdCQ3d0REFBQ0FQeUFJbFNFSUlBWUVmeUFIS0FJQUlRUkJBQ0VMQTBBZ0N5QUdTQVJBSUF0QkEzUWdCR3BEQUFBQUFEZ0NBQ0FMUVFOMElBUnFJQXMyQWdRZ0MwRUJhaUVMREFFTEMwRUFJUXNnQmlFS0EwQWdDeUFEU0NBS1FRSktjUVJBSUEwZ0F5QUxheENGQWlBTGFpRUdRUUFoRUNBSEtBSUFJUVFEUUNBS0lCQkhCRUFnQlNnQ0FDQVFRUU4wSUFScUtBSUVRUWxzUVFKMGFpRU9JQXNoQ1FOQUlBa2dCa2dFUUNBT0lBbEJBblFnREdvb0FnQkJBWFFpQkVFQ2RDQUJhaUFFUVFKMElBSnFJQWdROHdjaEZpQUhLQUlBSWdRZ0VFRURkR29pRWlBV0lCSXFBZ0NTT0FJQUlBbEJBV29oQ1F3QkN3c2dFRUVCYWlFUURBRUxDeUFQSUFRZ0NpQUtRUUlRT1NBS1FRRnhRWDlxYWhEeEJ5QUdJUXNnQ2tFQmRTRUtEQUVMQzBFQklRTWdCeWdDQUNJQ0tnSUFJUWdnQWlnQ0JDRUJBMEFnQXlBS1NBUkFJQU5CQTNRZ0Ftb3FBZ0FpRmlBSVhRUkFJQlloQ0NBRFFRTjBJQUpxS0FJRUlRRUxJQU5CQVdvaEF3d0JDd3NnQUNBRktBSUFJQUZCQ1d4QkFuUnFFTDRDSUFBUThnZEJBUVZCQUFzTElSVWdFU1FHSUJVTFpRQkJBVUYvSUFBZ0FTQUNFSVVCUXdBQUFBQmVHMEVCUVg4Z0FTQUNJQU1RaFFGREFBQUFBRjRiYWtFQlFYOGdBaUFESUFBUWhRRkRBQUFBQUY0YmFrRUJRWDhnQXlBQUlBRVFoUUZEQUFBQUFGNGJhaUlBUVFBZ0FHc2dBRUYvU2h0QkJFWUxqZ0VDQkg4R2ZTTUdJUVFqQmtFd2FpUUdJQVJCSUdvaUJTQUJJQUFRM3dFZ0JFRVlhaUlHSUFJZ0FCRGZBU0FFUVJCcUlnY2dBeUFBRU44QklBUkJDR29pQUNBQklBSVEzd0VnQkNBRElBSVEzd0VnQlNBR0VQOEJBbjBnQmlBSEVQOEJJUXdnQlNBSEVQOEJJUW9nQUNBRUVQOEJJUXNnREFzUS9nRWdDaEQrQVNBTEVQNEJJUTBnQkNRR0lBMEw2Z0VDQ1g4QmZTTUdJUU1qQmtIZ0FHb2tCaUFEUWRnQWFpRUVJQU5CMEFCcUlRVWdBMEhJQUdvaEJpQURRVUJySVFjZ0EwRTRhaUVJSUFOQk1Hb2hDU0FEUVNocUlRb2dBeUFBUTZ6Rkp6Y1F5QU1FZnlBSUlBR3lJZ3c0QWdBZ0NFTUFBQUFBT0FJRUlBa2dERGdDQUNBSklBS3lJZ3c0QWdRZ0NrTUFBQUFBT0FJQUlBb2dERGdDQkNBRUlBTkJsTVFERUtvQklBVWdBeUFJRUtvQklBWWdBeUFKRUtvQklBY2dBeUFLRUtvQklBUWdCU0FHSUFjUStnY2dBU0FDYkxkRUxVTWM2K0kyR2oraXRsMEVmMEVBQlNBRUlBVWdCaUFIRVBrSEN3VkJBQXNoQ3lBREpBWWdDd3M2QVFGL0lBQkJER29pQmlBRUVJY0JJQUVnQWlBRElBUWdCU0FBSUFZZ0FFRVlhaUFBS2dJa0lBQW9BaWdnQUNnQ0xDQUFLQUl3RVBnSEM4b0dBZzEvQVgwakJpRUlJd1pCUUdza0JpQUlRU2hxSVFRZ0NFRTBhaUVNSUFoQk1Hb2hEU0FBSUFBb0FnQTJBZ1FnQVJCeEJFQWdBaEJ4QkVCREFBQWdRUkJwSVJFZ0NDQURRd0FBQUFBUXlBTkZCRUFnQkVIQXlBTkI0b0VDRURkQis0RUNFRGRCNzZJQ0VEZEJ4QUVRUGtIMm9nSVFOMEg2Z2dJUU55SURJQU1vQWdCQmRHb29BZ0JxRURzZ0JFR0F6Z01RT2lJRktBSUFLQUljSVFZZ0JVRUtJQVpCUDNGQmlnRnFFUUlBSVFVZ0JCQThJQU1nQlJCQUlBTVFQeEFBQ3lBQUlBRVFjUkNBQWdKQUFrQURRQ0FKSUFFUWNVa0VRQ0FCSUFrUXhBRWhEeUFNSUEwZ0NDQUJJQWtRd3dFaURpb0NBQ0FPS2dJRUVMMENRUUFoQmtGL0lRVkJmeUVLUWYvLy8vOEhJUU1EUUNBR0lBSVFjVWtFUUNBQ0lBWVF3d0VoQnlBT0xBQVFJQWNzQUJCR0JFQWdEQ29DQUNBSEtnSUFreEJwSUEwcUFnQWdCeW9DQkpNUWFaSWdFVjVGQkVBZ0R5QUNJQVlReEFFUTJ3TWlCeUFGU1NFTElBVWdCeUFLSUFjZ0Nra2JJQXNiSVFvZ0JpQURJQXNiSVFNZ0J5QUZJQXNiSVFVTEN5QUdRUUZxSVFZTUFRc0xJQVZCZjBjRVFBSkFJQU5CZjBZTkJDQUtRWDlHQkVBZ0JDQUpJQU1Rd2dFZ0FDZ0NCQ0lESUFBb0FnaEpCRUFnQXlBRUtRTUFOd0lBSUFBZ0FDZ0NCRUVJYWpZQ0JBVWdBQ0FFRUpZQkN3d0JDeUFGc3lBS3M1VWdBQ29DREYwRVFDQUVJQWtnQXhEQ0FTQUFLQUlFSWdNZ0FDZ0NDRWtFUUNBRElBUXBBd0EzQWdBZ0FDQUFLQUlFUVFocU5nSUVCU0FBSUFRUWxnRUxDd3NMSUFsQkFXb2hDUXdCQ3dzTUFRc2dCRUhBeUFOQm00TUNFRGRCKzRFQ0VEZEI3NklDRURkQjhRRVFQa0gyb2dJUU4wSGpnd0lRTnlJQ0lBSW9BZ0JCZEdvb0FnQnFFRHNnQkVHQXpnTVFPaUlES0FJQUtBSWNJUVVnQTBFS0lBVkJQM0ZCaWdGcUVRSUFJUU1nQkJBOElBSWdBeEJBSUFJUVB4QUFDeUFBS0FJRUlBQW9BZ0JyUVFOMUlBRVFjVXNFUUNBRVFjRElBMEgxZ3dJUU4wSDdnUUlRTjBIdm9nSVFOMEdBQWhBK1FmYWlBaEEzUWJHRUFoQTNJZ0FnQUNnQ0FFRjBhaWdDQUdvUU95QUVRWURPQXhBNklnRW9BZ0FvQWh3aEFpQUJRUW9nQWtFL2NVR0tBV29SQWdBaEFTQUVFRHdnQUNBQkVFQWdBQkEvRUFBRklBQW9BZ1FnQUNnQ0FHdEJBM1VoRUFzTEN5QUlKQVlnRUF2OEF3RU1meU1HSVE0akJrRVFhaVFHSUE0aEJDQUFJQUFvQWdBMkFnUWdBUkJ4QkVBZ0FoQnhCRUFnQUNBQkVIRVFnQUlEUUNBRklBRVFjVWtFUUNBQklBVVF4QUVoRENBQklBVVF3d0VoRFVFQUlRZEJmeUVHUWYvLy8vOEhJUWhCZnlFREEwQWdCeUFDRUhGSkJFQWdEU3dBRUNBQ0lBY1F3d0VzQUJCR0JFQWdCeUFJSUF3Z0FpQUhFTVFCRUlJQ0lnb2dCa2tpQ3hzaENDQUdJQW9nQXlBS0lBTkpHeUFMR3lFRElBb2dCaUFMR3lFR0N5QUhRUUZxSVFjTUFRc0xJQVpCZjBjRVFBSkFJQU5CZjBZRVFDQUVJQVVnQ0JEQ0FTQUFLQUlFSWdNZ0FDZ0NDRWtFUUNBRElBUXBBd0EzQWdBZ0FDQUFLQUlFUVFocU5nSUVCU0FBSUFRUWxnRUxEQUVMSUFheklBT3psU0FBS2dJTVhRUkFJQVFnQlNBSUVNSUJJQUFvQWdRaUF5QUFLQUlJU1FSQUlBTWdCQ2tEQURjQ0FDQUFJQUFvQWdSQkNHbzJBZ1FGSUFBZ0JCQ1dBUXNMQ3dzZ0JVRUJhaUVGREFFTEN5QUFLQUlFSUFBb0FnQnJRUU4xSUFFUWNVc0VRQ0FFUWNESUEwSDFnd0lRTjBIN2dRSVFOMEh2b2dJUU4wSHdBQkErUWZhaUFoQTNRYkdFQWhBM0lnSWdBaWdDQUVGMGFpZ0NBR29RT3lBRVFZRE9BeEE2SWdFb0FnQW9BaHdoQUNBQlFRb2dBRUUvY1VHS0FXb1JBZ0FoQUNBRUVEd2dBaUFBRUVBZ0FoQS9FQUFGSUFBb0FnUWdBQ2dDQUd0QkEzVWhDUXNMQ3lBRUpBWWdDUXVwQlFFTGZ5TUdJUVFqQmtFUWFpUUdJQUFnQUNnQ0FEWUNCQ0FCRUhFRVFDQUNFSEVFUUNBQUlBRVFjUkNBQWdKQUFrQURRQ0FHSUFFUWNVa0VRQ0FESUFFZ0JoREVBU0lNRU5VSElBRWdCaEREQVNFTklBTkJ5QUJxSVFwQkFDRUhRWDhoQlVGL0lRaEIvLy8vL3djaEN3TkFJQWNnQ2lnQ0JDQUtLQUlBSWdsclFRSjFTUVJBSUEwc0FCQWdBaUFIUVFKMElBbHFLQUlBRU1NQkxBQVFSZ1JBSUF3Z0FpQUtLQUlBSUFkQkFuUnFLQUlBRU1RQkVJSUNJZ2tnQlVrRWZ5QUZJUWdnQ2lnQ0FDQUhRUUowYWlnQ0FDRUxJQWtGSUFrZ0NDQUpJQWhKR3lFSUlBVUxJUVVMSUFkQkFXb2hCd3dCQ3dzZ0JVRi9Sd1JBQWtBZ0MwRi9SZzBFSUFoQmYwWUVRQ0FFSUFZZ0N4RENBU0FBS0FJRUlnVWdBQ2dDQ0VrRVFDQUZJQVFwQXdBM0FnQWdBQ0FBS0FJRVFRaHFOZ0lFQlNBQUlBUVFsZ0VMREFFTElBV3pJQWl6bFNBQUtnSU1YUVJBSUFRZ0JpQUxFTUlCSUFBb0FnUWlCU0FBS0FJSVNRUkFJQVVnQkNrREFEY0NBQ0FBSUFBb0FnUkJDR28yQWdRRklBQWdCQkNXQVFzTEN3c2dCa0VCYWlFR0RBRUxDd3dCQ3lBRVFjRElBMEdiZ3dJUU4wSDdnUUlRTjBIdm9nSVFOMEdnQVJBK1FmYWlBaEEzUWVPREFoQTNJZ0lnQWlnQ0FFRjBhaWdDQUdvUU95QUVRWURPQXhBNklnTW9BZ0FvQWh3aEJTQURRUW9nQlVFL2NVR0tBV29SQWdBaEF5QUVFRHdnQWlBREVFQWdBaEEvRUFBTElBQW9BZ1FnQUNnQ0FHdEJBM1VnQVJCeFN3UkFJQVJCd01nRFFmV0RBaEEzUWZ1QkFoQTNRZStpQWhBM1FhOEJFRDVCOXFJQ0VEZEJzWVFDRURjaUFDQUFLQUlBUVhScUtBSUFhaEE3SUFSQmdNNERFRG9pQVNnQ0FDZ0NIQ0VDSUFGQkNpQUNRVDl4UVlvQmFoRUNBQ0VCSUFRUVBDQUFJQUVRUUNBQUVEOFFBQVVnQUNnQ0JDQUFLQUlBYTBFRGRTRU9Dd3NMSUFRa0JpQU9DNXNHQVE5L0l3WWhCU01HUVpBQmFpUUdJQVZCNkFCcUlRSWdCVUhJQUdvaEF5QUZRU2hxSVFRZ0FDQUFRUXhxSWcwb0FnQTJBaEFnQUVGL05nSVlJQUVRaGdGQkVHb2hDU0FBUWZ3RWFpRUlJQUJCakFWcUlRd2dBRUdVQm1vaERpQUFRUnhxSVE4Z0FFSFFBR29oQ3dOQUlBc29BZ0FpQ3dSQUlBSkJub0FDRUhrZ0FDd0FDRVVoRUNBQkVJWUJJUWNnQzBFTWFpSUdLQUlBRUlZQklRb0NRQUpBSUJBRVFDQUlJQWNnQ2hEK0J5QUFLQUlBVHcwQkJTQUlJQWNnQ2lBTEtBSU1RU1JxRVA4SElBQW9BZ0JQRFFFTElBSVFhd3dCQ3lBQ0VHc2dCaWdDQUJDR0FSQ0JBaUVISUFKQnI0QUNFSGtnRENBSklBY2dDQ0FCS0FJQUlBRW9BZ1FnQmlnQ0FDZ0NBQ0FHS0FJQUtBSUVFTXdESWdwQkFFZ0VRQ0FDRUdzTUFRc2dBaEJySUFKQkFEWUNBQ0FDUVFBMkFnUWdBa0VBTmdJSUlBVkJ3SUFDRUhrZ0FpQU1JQWdnQ2hETEF5QUZFR3NnQTBIWGdBSVFlUUpBSUFVZ0NTQUhJQUlnRGlBR0tBSUFLQUlBSUFZb0FnQW9BZ1FReWdORkJFQWdBeEJyREFFTElBTVFheUFEUVFBMkFnQWdBMEVBTmdJRUlBTkJBRFlDQ0NBRVFlK0FBaEI1SUFNZ0JTQUpJQWNnQWlBQUtnSUVFTWtEQWtBZ0F5Z0NCQ0FES0FJQWEwRURkU0FBS0FJQVNRUkFJQVFRYXd3QkN5QUVFR3NnQkVHQWdRSVFlU0FJSUFFUWhnRWdCaWdDQUJDR0FTQUZFUDBISUFBb0FnQkpCRUFnQkJCckRBRUxJQVFRYXlBRVFaR0JBaEI1SUF3Z0NTQUhJQWdnQVNnQ0FDQUJLQUlFSUFZb0FnQW9BZ0FnQmlnQ0FDZ0NCQkRNQXlJS1FRQklCRUFnQkJCckRBRUxJQVFRYXlBRVFhS0JBaEI1SUFJZ0RDQUlJQW9ReXdNZ0JCQnJJQVJCdVlFQ0VIa2dCU0FKSUFjZ0FpQU9JQVlvQWdBb0FnQWdCaWdDQUNnQ0JCREtBMFVFUUNBRUVHc01BUXNnQkJCcklBTWdBeWdDQURZQ0JDQUVRZEdCQWhCNUlBTWdCU0FKSUFjZ0FpQUFLZ0lFRU1rRElBUVFheUFES0FJRUlBTW9BZ0JyUVFOMUlnWWdBQ2dDQUU4RVFDQUdJQUFvQWhBZ0RTZ0NBR3RCQTNWTEJFQWdEeUFGRUw0Q0lBMGdBeENKQWlBQUlBc29BZ2cyQWhnTEN3c2dBeEJWQ3lBQ0VGVUxEQUVMQ3lBQUtBSVlHaUFGSkFZTDNBSUJCMzhqQmlFQ0l3WkJRR3NrQmlBQ1FSQnFJUU1nQWtFNGFpRUVBa0FDUUNBQVFhQUJhaUlHS0FJQUlBRVFkQ2dDQUNnQ0JFY05BQ0FHS0FJRUlBRVFkQ2dDQUNnQ0NFY05BQXdCQ3lBR0lBRVErd2dMUVpRQkVGRWlCUkRuQXlBQ1FRQTJBakFnQXlBQ0tBSXdOZ0lBSUFRZ0JSRG1BeUFFS0FJQUlRY2dCQ0FBUVVCcklnVW9BZ0EyQWdBZ0JTQUhOZ0lBSUFRb0FnUWhCeUFFSUFBb0FrUTJBZ1FnQUNBSE5nSkVJQVFRbFFFZ0JTZ0NBQ0FCRUhRb0FnQW9BZ1FRNVFNZ0JTZ0NBQ0FCRUhRb0FnQW9BZ2dRNUFNZ0EwR0k4UUVRZVNBRktBSUFJQUVnQmlBQVFid0NhaEN0Q0NBREVHc0NmeERqQXlFSUlBTVF1d01nQXlnQ0FDQURJQU1zQUF0QkFFZ2JJUVFnQlNnQ0FCQ0dBUkJ4SVFZZ0FrSHdvd0kyQWdBZ0FpQUVOZ0lFSUFKQi9QMEJOZ0lJSUFJZ0JqWUNEQ0FJQzBIUS9RRWdBaEMzQXlBREVFY2dBQ0FGS0FJQUVJQUlJQUlrQmd1UUFRRURmeU1HSVFNakJrRWdhaVFHQWtBQ1FDQUFRZHdBYWlJQ0VIUWlCQ2dDQkNBRUtBSUFSZzBBSUFJUWRDZ0NBQ2dDQkNBQktBSUVSdzBBSUFJUWRDZ0NBQ2dDQ0NBQktBSUlSdzBBREFFTElBRW9BZ1FnQVNnQ0NCQ3VDQ0VFSUFJZ0FTZ0NCQ0FCS0FJSUlBUVEwQWdMSUFOQit2QUJFSGtnQWlBQkVNZ0lJQU1RYXlBQUlBSVFnUWdnQXlRR0N5VUJBWDlCa0JBUVJDSUNCRUFnQWtFQU5nSUFJQUlnQURZQ0JDQUNJQUUyQWdnTElBSUxOQUVCZnlNR0lRUWpCa0VnYWlRR0lBUWdBVUVCSUFJZ0F5QUNFTGdESUFBb0FnQW9BZ0FnQkJDQ0NDQUVFTjBCSUFRa0Jnc3JBUUYvSUFBb0FnZ2hBZ05BSUFJUTFBTWdBQ0FBS0FJSVFSUnFJZ0kyQWdnZ0FVRi9haUlCRFFBTEM2Z0JBUVYvSXdZaEFpTUdRU0JxSkFZZ0FDZ0NDQ0FBS0FJRUlnTnJRUlFRT1NBQlNRUkFRY3lacytZQUlBTWdBQ2dDQUd0QkZCQTVJQUZxSWdOSkJFQVFBQVVnQWlBRElBQW9BZ2dnQUNnQ0FDSUVhMEVVRURraUJVRUJkQ0lHSUFZZ0Ewa2JRY3lacytZQUlBVkI1c3laTTBrYklBQW9BZ1FnQkd0QkZCQTVJQUJCQ0dvUStnTWdBaUFCRUlVSUlBQWdBaEQ1QXlBQ0VQZ0RDd1VnQUNBQkVOVURDeUFDSkFZTFVnRUNmeUFBS0FJQUlnSUVRQ0FBS0FJRUlRRURRQ0FCSUFKSEJFQWdBVUZzYWlFQkRBRUxDeUFBSUFJMkFnUWdBQ2dDQ0JvZ0FDZ0NBQkE0SUFCQkFEWUNDQ0FBUVFBMkFnUWdBRUVBTmdJQUN3c3RBUUYvSUFBb0FnZ2hBZ05BSUFKQkFEb0FBQ0FBSUFBb0FnaEJBV29pQWpZQ0NDQUJRWDlxSWdFTkFBc0xMUUVCZnlBQUtBSUVJUUlEUUNBQ1FRQTZBQUFnQUNBQUtBSUVRUUZxSWdJMkFnUWdBVUYvYWlJQkRRQUxDNWtCQVFWL0l3WWhBaU1HUVNCcUpBWWdBQ2dDQ0NBQUtBSUVJZ05ySUFGSkJFQkIvLy8vL3djZ0FTQURJQUFvQWdCcmFpSURTUVJBRUFBRklBSWdBeUFBS0FJSUlBQW9BZ0FpQkdzaUJVRUJkQ0lHSUFZZ0Ewa2JRZi8vLy84SElBVkIvLy8vL3dOSkd5QUFLQUlFSUFScklBQkJDR29RMkFJZ0FpQUJFSWdJSUFBZ0FoRFhBaUFDRU5ZQ0N3VWdBQ0FCRUlrSUN5QUNKQVlMTHdFQmYwSC8vLy8vQnlBQlNRUkFFQUFGSUFBZ0FSQlJJZ0kyQWdRZ0FDQUNOZ0lBSUFBZ0FTQUNhallDQ0FzTFhRRUJmMEhWcXRXcUFTQUJTUVJBRUFBTElBRkIxYXJWcWdGTEJFQkJDQkFGSWdBUWlBRWdBRUcwaXdFMkFnQWdBRUg0OXdCQkZoQUVCU0FBSUFGQkRHd1FVU0lDTmdJRUlBQWdBallDQUNBQUlBRkJER3dnQW1vMkFnZ0xDK2NCQVFkL0lBSWdBV3RCREJBNUlRTWdBQ2dDQUNJRUlRY2dBeUFBS0FJSUlBUnJRUXdRT1VzRVFDQUFFTThEUWRXcTFhb0JJQU5KQkVBUUFBVWdBQ0FESUFBb0FnZ2dBQ2dDQUd0QkRCQTVJZ1JCQVhRaUJTQUZJQU5KRzBIVnF0V3FBU0FFUWFyVnF0VUFTUnNRakFnZ0FDQUJJQUlnQXhEUUF3c0ZJQU1nQUNnQ0JDQUVhMEVNRURraUJrc2hCU0FHUVF4c0lBRnFJQUlnQlJzaUNDQUJheUlHUVF3UU9TRUpJQVlFUUNBRUlBRWdCaERuQVJvTElBVUVRQ0FBSUFnZ0FpQURJQUFvQWdRZ0FDZ0NBR3RCREJBNWF4RFFBd1VnQUNBSlFReHNJQWRxTmdJRUN3c0x5QUVCQW44akJpRUVJd1pCRUdva0JpQUVRUVJxSVFNZ0JDQUNOZ0lBSUFCQnlBQnFJZ0lnQkJEb0F3UkFRUkFRQlNFQUlBTkNBRGNDQUNBRFFRQTJBZ2dnQTBIbzhBRkI2UEFCRUdBUWZpQUFJQU1RaGdJZ0FFR0k4Z0JCQlJBRUN5QUNJQVFRcXdnaEFDQURJQUVvQWdBaUFqWUNBQ0FESUFFb0FnUWlBVFlDQkNBQkJIOGdBU0FCS0FJRVFRRnFOZ0lFSUFNb0FnUUZRUUFMSVFFZ0F5QUFLQUlBTmdJQUlBQWdBallDQUNBRElBQW9BZ1EyQWdRZ0FDQUJOZ0lFSUFNUWxRRWdCQ1FHQzhNQkFRVi9JQUFvQWdBaUF5RUZJQUlnQVdzaUJDQUFLQUlJSUFOclN3UkFJQUFRendOQi8vLy8vd2NnQkVrRVFCQUFCU0FBSUFRZ0FDZ0NDQ0FBS0FJQWF5SURRUUYwSWdVZ0JTQUVTUnRCLy8vLy93Y2dBMEgvLy8vL0Ewa2JFSXNJSUFBZ0FTQUNJQVFRemdNTEJTQUVJQUFvQWdRZ0Eyc2lCa3NoQXlBQklBWnFJQUlnQXhzaUJ5QUJheUlHQkVBZ0JTQUJJQVlRNXdFYUN5QURCRUFnQUNBSElBSWdBQ2dDQUNBRUlBQW9BZ1JyYWhET0F3VWdBQ0FGSUFacU5nSUVDd3NMTmdFQ2Z5QUFLQUlFSUFBb0FnQWlBMnNpQWlBQlNRUkFJQUFnQVNBQ2F4Q0tDQVVnQWlBQlN3UkFJQUFnQVNBRGFqWUNCQXNMQzRrQ0FRaC9JQUlnQVd0QkZCQTVJUU1nQUNnQ0FDSUVJUWNnQXlBQUtBSUlJQVJyUVJRUU9Vc0VRQ0FBRUljSVFjeVpzK1lBSUFOSkJFQVFBQVVnQUNBRElBQW9BZ2dnQUNnQ0FHdEJGQkE1SWdSQkFYUWlCU0FGSUFOSkcwSE1tYlBtQUNBRVFlYk1tVE5KR3hEV0F5QUFJQUVnQWlBREVNMERDd1VDUUNBRElBQW9BZ1FnQkd0QkZCQTVJZ1pMSVFVZ0JrRVViQ0FCYWlBQ0lBVWJJZ2dnQVdzaUJrRVVFRGtoQ2lBR0JFQWdCQ0FCSUFZUTV3RWFDeUFGQkVBZ0FDQUlJQUlnQXlBQUtBSUVJQUFvQWdCclFSUVFPV3NRelFNTUFRc2dDa0VVYkNBSGFpRUNJQUFvQWdRaEFRTkFJQUVnQWtjRVFDQUJRV3hxSVFFTUFRc0xJQUFnQWpZQ0JBc0xDOWtDQVFWL0l3WWhCeU1HUVNCcUpBWWdCMEVNYWlJSUlBWTJBZ0JCbEFFUVVTSUpFT2NESUFkQkFEWUNDQ0FIUVJocUlnb2dCeWdDQ0RZQ0FDQUhRUkJxSWdZZ0NSRG1BeUFHS0FJQUlBUVE1UU1nQmlnQ0FDQUZFT1FESUFZb0FnQVFoZ0VRMGdNZ0JpZ0NBQkNHQVJDQkFpQUJLQUlFSUFFb0FnQnJRUlFRT1JEUkF5QUdLQUlBRUlZQkVJRUNJZ1FnQVVjRVFDQUVJQUVvQWdBZ0FTZ0NCQkNSQ0FzZ0JpZ0NBQkNHQVJCMElBSW9BZ1FnQWlnQ0FHc1FrQWdnQmlnQ0FCQ0dBUkIwSWdFZ0FrY0VRQ0FCSUFJb0FnQWdBaWdDQkJDUENBc2dCaWdDQUJDc0NBSi9JQUFvQWdBb0FnQWhDeUFISUFZb0FnQTJBZ0FnQnlBR0tBSUVJZ0UyQWdRZ0FRUkFJQUVnQVNnQ0JFRUJhallDQkFzZ0N3c2dCeUFJS0FJQUVJNElJQWNRbFFFZ0FDZ0NBRUVFYWlBSUVNTUNJZ0FnQTBjRVFDQUFJQU1vQWdBZ0F5Z0NCQkNOQ0FzZ0JoQ1ZBU0FISkFZTFB3QWdBQ0FCTmdJQUlBQkJCR29pQUVJQU53SUFJQUJDQURjQ0NDQUFRZ0EzQWhBZ0FFSUFOd0lZSUFCQ0FEY0NJQ0FBUWdBM0FpZ2dBRUlBTndJd0Mxd0JBWDhnQUVIU0NUWUNBQ0FBUVFBMkFnUWdBRUVBTmdJSUlBQkJER29pQVNBQUVKTUlJQUJCQURZQ1pDQUFRUUEyQW1nZ0FFSUFOd0pJSUFCQ0FEY0NVQ0FBUWdBM0FsZ2dBRUVRTmdKc0lBRVEyQU1nQVVFQkVOY0RDeFFBSUFCQkRHcEJBQ0FCS0FJRVFiWDhBVVliQ3hVQUlBQW9BZ3dpQUFSQUlBQVFtd2dnQUJBNEN3c2VBQ0FBUVRCcUVGVWdBRUVrYWhCVklBQkJHR29RVlNBQVFReHFFRlVMT1FFQmZ5QUFRZFFBYWhEVEF5QUFRY2dBYWhCVklBQkJER29RbHdnZ0FDZ0NDQ0VCSUFCQkFEWUNDQ0FCQkVBZ0FSREVBaUFCRURnTEM4WURBZ04vQVh3akJpRURJd1pCd0FGcUpBWWdBeUFCUWFnQmFrRUVJQUVvQWd4QkFFZ0VmeUFCUVJScUJTQUJLQUlJUVFCSUJIOGdBVUVZYWdVZ0FVRVFhZ3NMS0FJQUlnUnJRUVFRVHlJRlFRUjBhaXNEQURrRFlDQURJQUVnQlVFRWRHb3JBN0FCT1FOb0lBTWdBVUdvQVdwQkJTQUVhMEVFRUU4aUJVRUVkR29yQXdBNUEzQWdBeUFCSUFWQkJIUnFLd093QVRrRGVDQURJQUZCcUFGcVFRWWdCR3RCQkJCUElnVkJCSFJxS3dNQU9RT0FBU0FESUFFZ0JVRUVkR29yQTdBQk9RT0lBU0FESUFGQnFBRnFRUWNnQkd0QkJCQlBJZ1JCQkhScUt3TUFPUU9RQVNBRElBRWdCRUVFZEdvckE3QUJPUU9ZQVNBRElBSkVBQUFBQUFBQTRMK2lJZ1k1QXdBZ0F5QUNSQUFBQUFBQUFPQS9vaUlDT1FNSUlBTkVBQUFBQUFBQUFBQTVBeEFnQXlBQ09RTVlJQU1nQWprRElDQURSQUFBQUFBQUFBQUFPUU1vSUFNZ0Fqa0RNQ0FESUFZNUF6Z2dBMEZBYTBRQUFBQUFBQUFBQURrREFDQURJQVk1QTBnZ0F5QUdPUU5RSUFORUFBQUFBQUFBQUFBNUExZ2dBMEdvQVdvaUFTQURRZUFBYWpZQ0FDQUJJQU0yQWdRZ0FVRUVOZ0lJSUFBb0FnQWdBVUdBcEFOQmdLUURJQU5Cb0FGcUVPb0JHaUFES3dPZ0FSb2dBeVFHQzlNVEFoQi9BWHdqQmlFVEl3WkJFR29rQmlBVElROGdBVUVDRURraERDQUNRUUlRT1NFT0lBUW9BZ0FpQnlFQ0lBd2dEa0YvYWlJUWJFRUJkQ0FIYWlFRkEwQWdCaUFNU0FSQUlBVkJBRHNCQUNBQ1FRQTdBUUFnQWtFQ2FpRUNJQVZCQW1vaEJTQUdRUUZxSVFZTUFRc0xJQWNoQWlBTVFYOXFJaEZCQVhRZ0Iyb2hCVUVBSVFZRFFDQUdJQTVJQkVBZ0JVRUFPd0VBSUFKQkFEc0JBQ0FNUVFGMElBSnFJUUlnREVFQmRDQUZhaUVGSUFaQkFXb2hCZ3dCQ3dzZ0JFR1FnTWdBYWlFQ1FRQWdER3NoRWlBQUlBRkJBWFJCQW1wcUlRMUJBU0VMUVFBaEJTQU1RUUZxUVFGMElBZHFJUWNDZndKQUEwQUNRQ0FMSUJCT0RRSWdCU0VBUVFFaENRTkFJQWtnRVVnRVFDQU5MUUFBSUFOS0JFQWdCMEVBT3dFQUJRSkFJQkpCQVhRZ0Iyb2lCUzRCQUNJR1FRQktCRUFnQnlBR093RUFJQVpCQjJ3aUJVRUNkQ0FFYWtIMC84OEFhaUlHSUFZb0FnQkJBV28yQWdBZ0JVRUNkQ0FFYWtINC84OEFhaUlHSUFrZ0JpZ0NBR28yQWdBZ0JVRUNkQ0FFYWtIOC84OEFhaUlHSUFzZ0JpZ0NBR28yQWdBZ0JVRUNkQ0FFYWtHTWdOQUFhaUFMTmdJQURBRUxJQVZCZm1vdUFRQWlCaUVJSUFaQkFFb2hDaUFGTGdFQ0lnVkJBRXdFUUNBS0JFQWdCeUFHT3dFQUlBaEJCMndpQlVFQ2RDQUVha0gwLzg4QWFpSUdJQVlvQWdCQkFXbzJBZ0FnQlVFQ2RDQUVha0g0Lzg4QWFpSUdJQWtnQmlnQ0FHbzJBZ0FnQlVFQ2RDQUVha0g4Lzg4QWFpSUdJQXNnQmlnQ0FHbzJBZ0FnQlVFQ2RDQUVha0dFZ05BQWFpSUdLQUlBSUFsSUJFQWdCaUFKTmdJQUN5QUZRUUowSUFScVFZeUEwQUJxSUFzMkFnQU1BZ3NnQjBGK2FpNEJBQ0lGUVFCS0JFQWdCeUFGT3dFQUlBVkJCMndpQlVFQ2RDQUVha0gwLzg4QWFpSUdJQVlvQWdCQkFXbzJBZ0FnQlVFQ2RDQUVha0g0Lzg4QWFpSUdJQWtnQmlnQ0FHbzJBZ0FnQlVFQ2RDQUVha0g4Lzg4QWFpSUdJQXNnQmlnQ0FHbzJBZ0FnQlVFQ2RDQUVha0dFZ05BQWFpSUZLQUlBSUFsT0RRSWdCU0FKTmdJQUJTQUFRZi8vQVVvTkJpQUhJQUJCQVdvaUJUc0JBQ0FFUVpDQXlBQnFJQUJCQW5ScUlBVkJFSFJCRUhVMkFnQWdCRUdRZ05BQWFpQUFRUWRzSWdCQkFuUnFRUUUyQWdBZ0FFRUNkQ0FFYWtHVWdOQUFhaUFKTmdJQUlBQkJBblFnQkdwQm1JRFFBR29nQ3pZQ0FDQUFRUUowSUFScVFaeUEwQUJxSUFrMkFnQWdBRUVDZENBRWFrR2dnTkFBYWlBSk5nSUFJQUJCQW5RZ0JHcEJwSURRQUdvZ0N6WUNBQ0FBUVFKMElBUnFRYWlBMEFCcUlBczJBZ0FnQlNFQUN3d0JDeUFLQkVBQ1FDQUZRUUowSUFScVFZeUF5QUJxS0FJQUlnVWdDRUVDZENBRWFrR01nTWdBYWlnQ0FDSUdTZ1JBSUFjZ0Jqc0JBQ0FDSVFoQkFDRUtBMEFnQ2lBQVRnUkFJQVloQlF3REN5QUZJQWdvQWdCR0JFQWdDQ0FHTmdJQUN5QUlRUVJxSVFnZ0NrRUJhaUVLREFBQUN3QUZJQWNnQlRzQkFDQUZJQVpJQkVBZ0FpRUlRUUFoQ2dOQUlBb2dBRTROQXlBR0lBZ29BZ0JHQkVBZ0NDQUZOZ0lBQ3lBSVFRUnFJUWdnQ2tFQmFpRUtEQUFBQ3dBTEN3c2dCVUVRZEVFUWRVRUhiQ0lGUVFKMElBUnFRZlQvendCcUlnWWdCaWdDQUVFQmFqWUNBQ0FGUVFKMElBUnFRZmovendCcUlnWWdDU0FHS0FJQWFqWUNBQ0FGUVFKMElBUnFRZnovendCcUlnWWdDeUFHS0FJQWFqWUNBQ0FGUVFKMElBUnFRWXlBMEFCcUlBczJBZ0FNQVFzZ0IwRithaTRCQUNJR1FRQk1CRUFnQnlBRk93RUFJQVZCQjJ3aUJVRUNkQ0FFYWtIMC84OEFhaUlHSUFZb0FnQkJBV28yQWdBZ0JVRUNkQ0FFYWtINC84OEFhaUlHSUFrZ0JpZ0NBR28yQWdBZ0JVRUNkQ0FFYWtIOC84OEFhaUlHSUFzZ0JpZ0NBR28yQWdBZ0JVRUNkQ0FFYWtHQWdOQUFhaUlHS0FJQUlBbEtCRUFnQmlBSk5nSUFDeUFGUVFKMElBUnFRWXlBMEFCcUlBczJBZ0FNQVFzQ1FDQUZRUUowSUFScVFZeUF5QUJxS0FJQUlnVWdCa0VDZENBRWFrR01nTWdBYWlnQ0FDSUdTZ1JBSUFjZ0Jqc0JBQ0FDSVFoQkFDRUtBMEFnQ2lBQVRnUkFJQVloQlF3REN5QUZJQWdvQWdCR0JFQWdDQ0FHTmdJQUN5QUlRUVJxSVFnZ0NrRUJhaUVLREFBQUN3QUZJQWNnQlRzQkFDQUZJQVpJQkVBZ0FpRUlRUUFoQ2dOQUlBb2dBRTROQXlBR0lBZ29BZ0JHQkVBZ0NDQUZOZ0lBQ3lBSVFRUnFJUWdnQ2tFQmFpRUtEQUFBQ3dBTEN3c2dCVUVRZEVFUWRVRUhiQ0lGUVFKMElBUnFRZlQvendCcUlnWWdCaWdDQUVFQmFqWUNBQ0FGUVFKMElBUnFRZmovendCcUlnWWdDU0FHS0FJQWFqWUNBQ0FGUVFKMElBUnFRZnovendCcUlnVWdDeUFGS0FJQWFqWUNBQXNMSUExQkFtb2hEU0FKUVFGcUlRa2dCMEVDYWlFSERBRUxDeUFCSUExcVFRUnFJUTBnQzBFQmFpRUxJQUFoQlNBSFFRUnFJUWNNQVFzTFFRQkJBMEdvcFFFZ0R4QTlRWDhNQVFzZ0JFRU1haUVIUVFFaEFFRUJJUU1EUUNBRElBVk1CRUFnQXlBQ0tBSUFJZ1pHQkVBZ0FFRUJhaUVCQlNBQUlRRWdCa0VDZENBRWFrR01nTWdBYWlnQ0FDRUFDeUFDSUFBMkFnQWdBU0VBSUFOQkFXb2hBeUFDUVFScUlRSU1BUXNMSUFRZ0FFRi9haUlBTmdJSUlBQUVmeUFIUVFBZ0FFRUNkQkJGR2lBRVFaQ0FLR3BCQUNBQVFRUjBFRVVhUVFBaEFRTkFJQUVnQUVnRVFDQUVRWXlBQ0dvZ0FVRUNkQ0lDUVFKMGFpQU1OZ0lBSUFSQmpJQUlhaUFDUVFGeVFRSjBha0VBTmdJQUlBUkJqSUFJYWlBQ1FRSnlRUUowYWlBT05nSUFJQVJCaklBSWFpQUNRUU55UVFKMGFrRUFOZ0lBSUFGQkFXb2hBUXdCQ3d0QkFDRUJBMEFnQVNBRlNBUkFJQVJCREdvZ0JFR1FnTWdBYWlBQlFRSjBhaWdDQUVGL2FpSUNRUUowYWlJRElBUkJrSURRQUdvZ0FVRUhiQ0lBUVFKMGFpZ0NBQ0FES0FJQWFqWUNBQ0FFUVpDQUtHb2dBa0VCZENJRFFRTjBhaUlISUFjckF3QWdBRUVDZENBRWFrR1VnTkFBYWlnQ0FMZWdPUU1BSUFSQmtJQW9haUFEUVFGeVFRTjBhaUlESUFNckF3QWdBRUVDZENBRWFrR1lnTkFBYWlnQ0FMZWdPUU1BSUFSQmpJQUlhaUFDUVFKMElnSkJBblJxSWdNb0FnQWdBRUVDZENBRWFrR2NnTkFBYWlnQ0FDSUhTZ1JBSUFNZ0J6WUNBQXNnQkVHTWdBaHFJQUpCQVhKQkFuUnFJZ01vQWdBZ0FFRUNkQ0FFYWtHZ2dOQUFhaWdDQUNJSFNBUkFJQU1nQnpZQ0FBc2dCRUdNZ0FocUlBSkJBbkpCQW5ScUlnTW9BZ0FnQUVFQ2RDQUVha0drZ05BQWFpZ0NBQ0lIU2dSQUlBTWdCellDQUFzZ0JFR01nQWhxSUFKQkEzSkJBblJxSWdJb0FnQWdBRUVDZENBRWFrR29nTkFBYWlnQ0FDSUFTQVJBSUFJZ0FEWUNBQXNnQVVFQmFpRUJEQUVMQ3lBRUtBSUlJUUZCQUNFQUEzOGdBQ0FCU0FSL0lBUkJrSUFvYWlBQVFRRjBJZ0pCQTNScUlnTWdBeXNEQUNBRVFReHFJQUJCQW5ScUtBSUF0eUlWb3prREFDQUVRWkNBS0dvZ0FrRUJja0VEZEdvaUFpQUNLd01BSUJXak9RTUFJQUJCQVdvaEFBd0JCVUVBQ3dzRlFRQUxDeUVVSUE4a0JpQVVDeDRBSUFCQkpHb1FtQWdnQUVFSWFpSUFRUkJxRU5rQ0lBQkJCR29RVlFzcUFDQUFRUUEyQWdBZ0FFRUFOZ0lFSUFCQkFEWUNDQ0FCQkVBZ0FDQUJFTllESUFBZ0FSRFZBd3NMWFFFQmYwSC8vLy8vQXlBQlNRUkFFQUFMSUFGQi8vLy8vd05MQkVCQkNCQUZJZ0FRaUFFZ0FFRzBpd0UyQWdBZ0FFSDQ5d0JCRmhBRUJTQUFJQUZCQW5RUVVTSUNOZ0lFSUFBZ0FqWUNBQ0FBSUFGQkFuUWdBbW8yQWdnTEN6c0JBMzhnQVNFRUlBQW9BZ2dpQlNFREEwQWdBeUFDS0FJQU5nSUFJQU5CQkdvaEF5QUVRWDlxSWdRTkFBc2dBQ0FCUVFKMElBVnFOZ0lJQzlvQkFRWi9Jd1loQ0NNR1FTQnFKQVlnQ0NFRUlBQW9BZ1FpQXlFR0lBQW9BZ2dnQTJ0QkFuVWdBVWtFUUVILy8vLy9BeUFCSUFNZ0FDZ0NBR3RCQW5WcUlnZEpCRUFRQUFVZ0JDQUhJQUFvQWdnZ0FDZ0NBQ0lGYXlJR1FRRjFJZ01nQXlBSFNSdEIvLy8vL3dNZ0JrRUNkVUgvLy8vL0FVa2JJQUFvQWdRZ0JXdEJBblVnQUVFSWFoRElBU0FFSUFFZ0FoQ2VDQ0FBSUFRUTVBRWdCQkRIQVFzRklBRWhBeUFHSVFVRFFDQUZJQUlvQWdBMkFnQWdCVUVFYWlFRklBTkJmMm9pQXcwQUN5QUFJQUZCQW5RZ0JtbzJBZ1FMSUFRa0JndUZCUUVIZnlNR0lRa2pCa0VRYWlRR0lBQW9BZ1FnQUNnQ0FHdEJBblVnQkVjRVFDQUpRY0RJQTBHWjhRRVFOMEczOVFFUU4wSHZvZ0lRTjBIR0FSQStRZmFpQWhBM1FhejRBUkEzSWdjZ0J5Z0NBRUYwYWlnQ0FHb1FPeUFKUVlET0F4QTZJZ2dvQWdBb0Fod2hDaUFJUVFvZ0NrRS9jVUdLQVdvUkFnQWhDQ0FKRUR3Z0J5QUlFRUFnQnhBL0VBQUxJQUpCQUV3RVFDQUpRY0RJQTBIVjlnRVFOMEczOVFFUU4wSHZvZ0lRTjBISEFSQStRZmFpQWhBM1FmMzJBUkEzSWdjZ0J5Z0NBRUYwYWlnQ0FHb1FPeUFKUVlET0F4QTZJZ2dvQWdBb0Fod2hDaUFJUVFvZ0NrRS9jVUdLQVdvUkFnQWhDQ0FKRUR3Z0J5QUlFRUFnQnhBL0VBQUxJQVFnQWtvRVFDQUpRY0RJQTBHaDl3RVFOMEczOVFFUU4wSHZvZ0lRTjBISUFSQStRZmFpQWhBM1FkVDNBUkEzSWdJZ0FpZ0NBRUYwYWlnQ0FHb1FPeUFKUVlET0F4QTZJZ2NvQWdBb0Fod2hDQ0FIUVFvZ0NFRS9jVUdLQVdvUkFnQWhCeUFKRUR3Z0FpQUhFRUFnQWhBL0VBQUxJQVpCQUV3RVFDQUpRY0RJQTBISitBRVFOMEczOVFFUU4wSHZvZ0lRTjBISkFSQStRZmFpQWhBM1FmRDRBUkEzSWdJZ0FpZ0NBRUYwYWlnQ0FHb1FPeUFKUVlET0F4QTZJZ2NvQWdBb0Fod2hDQ0FIUVFvZ0NFRS9jVUdLQVdvUkFnQWhCeUFKRUR3Z0FpQUhFRUFnQWhBL0VBQUxRUUFoQ0FOQUlBZ2dCRWdFUUNBSVFRSjBJQU5xSVF4QkFDRUtRWDhoQWdOQUlBWWdDa2NFUUNBQklBd29BZ0JCNEFCc2FpQUJJQXBCQW5RZ0JXb2lEU2dDQUVFQ2RDQURhaWdDQUVIZ0FHeHFFSUlDSWdjZ0Fra0VRQ0FBS0FJQUlBaEJBblJxSUEwb0FnQTJBZ0FnQnlFQ0N5QUtRUUZxSVFvTUFRc0xJQUlnQzJvaEN5QUlRUUZxSVFnTUFRc0xJQWtrQmlBTEMxQUJBWDhnQUVFWUVGRWlCRFlDQUNBQUlBRkJDR28yQWdRZ0JDQURLQUlBS0FJQU5nSUlJQVJCQURZQ0RDQUVRUUEyQWhBZ0JFRUFOZ0lVSUFCQkFUb0FDQ0FFSUFJMkFnUWdCRUVBTmdJQUN6SUFJQUFnQVRZQ0FDQUFRUUU2QUdRZ0FFSUFOd0pvSUFCQ0FEY0NjQ0FBUWdBM0FuZ2dBRUVFYWlBQ1FlQUFFRXdhQzB3QkFuOGpCaUVDSXdaQklHb2tCaUFBS0FJSUlBQW9BZ0FpQTJ0QkFuVWdBVWtFUUNBQ0lBRWdBQ2dDQkNBRGEwRUNkU0FBUVFocUVNZ0JJQUFnQWhEa0FTQUNFTWNCQ3lBQ0pBWUxuQUVCQlg4akJpRUNJd1pCSUdva0JrSC8vLy8vQXlBQUtBSUVJQUFvQWdCclFRSjFRUUZxSWdOSkJFQVFBQVVnQWlBRElBQW9BZ2dnQUNnQ0FDSUVheUlGUVFGMUlnWWdCaUFEU1J0Qi8vLy8vd01nQlVFQ2RVSC8vLy8vQVVrYklBQW9BZ1FnQkd0QkFuVWdBRUVJYWhESUFTQUNLQUlJSWdNZ0FTZ0NBRFlDQUNBQ0lBTkJCR28yQWdnZ0FDQUNFT1FCSUFJUXh3RWdBaVFHQ3d2REJnRUdmeU1HSVFZakJrRVFhaVFHSUFBb0FnUWlDQ0FBS0FJUUlBQW9BZ3hyUVFKMVJ3UkFJQVpCd01nRFFZcjFBUkEzUWJmMUFSQTNRZStpQWhBM1Fab0JFRDVCOXFJQ0VEZEJxUFlCRURjaUJTQUZLQUlBUVhScUtBSUFhaEE3SUFaQmdNNERFRG9pQnlnQ0FDZ0NIQ0VKSUFkQkNpQUpRVDl4UVlvQmFoRUNBQ0VISUFZUVBDQUZJQWNRUUNBRkVEOFFBQXNnQWtFQVRBUkFJQVpCd01nRFFkWDJBUkEzUWJmMUFSQTNRZStpQWhBM1Fac0JFRDVCOXFJQ0VEZEIvZllCRURjaUJTQUZLQUlBUVhScUtBSUFhaEE3SUFaQmdNNERFRG9pQnlnQ0FDZ0NIQ0VKSUFkQkNpQUpRVDl4UVlvQmFoRUNBQ0VISUFZUVBDQUZJQWNRUUNBRkVEOFFBQXNnQkNBQ1NnUkFJQVpCd01nRFFhSDNBUkEzUWJmMUFSQTNRZStpQWhBM1Fad0JFRDVCOXFJQ0VEZEIxUGNCRURjaUJTQUZLQUlBUVhScUtBSUFhaEE3SUFaQmdNNERFRG9pQnlnQ0FDZ0NIQ0VKSUFkQkNpQUpRVDl4UVlvQmFoRUNBQ0VISUFZUVBDQUZJQWNRUUNBRkVEOFFBQXNnQ0NBRVNnUkFJQVpCd01nRFFlLzNBUkEzUWJmMUFSQTNRZStpQWhBM1FaMEJFRDVCOXFJQ0VEZEJtUGdCRURjaUJTQUZLQUlBUVhScUtBSUFhaEE3SUFaQmdNNERFRG9pQ0NnQ0FDZ0NIQ0VISUFoQkNpQUhRVDl4UVlvQmFoRUNBQ0VJSUFZUVBDQUZJQWdRUUNBRkVEOFFBQXNnQmtGL05nSUFJQUJCR0dvaUNpQUVJQVlRM1FNZ0JrRi9OZ0lBSUFCQkpHb2lDU0FFSUFZUTNRTWdBRUV3YWlBRUVJY0JJQUFvQWpBaUJTQUFLQUkwSUFWclFRSjFFTndEUVg4aEJVRUFJUWNEUUNBSElBQW9BZ2hJQkVBZ0FDZ0NNQ0lJSUFBb0FqUWdDR3RCQW5VZ0FDZ0NCQ0FBS0FJQUVNRUNJQWtnQVNBQ0lBTWdCQ0FBS0FJd0lBQW9BZ1FRb0FnaUNDQUZTUVJBSUFvZ0NSQ0pBaUFBS0FJTUlBQW9BakFnQUNnQ0JFRUNkQkJNR2lBSUlRVUxJQWRCQVdvaEJ3d0JDd3NnQUNnQ0JDQUFLQUlRSUFBb0FneHJRUUoxUmdSQUlBWWtCZ1VnQmtIQXlBTkJpdlVCRURkQnQvVUJFRGRCNzZJQ0VEZEJ1d0VRUGtIMm9nSVFOMEdvOWdFUU55SUFJQUFvQWdCQmRHb29BZ0JxRURzZ0JrR0F6Z01RT2lJQktBSUFLQUljSVFJZ0FVRUtJQUpCUDNGQmlnRnFFUUlBSVFFZ0JoQThJQUFnQVJCQUlBQVFQeEFBQ3d2a0JBSU5md044SXdZaENpTUdRUkJxSkFZZ0NrRUVhaUVRUVFJUTV3SWhEa0VDRU9jQ0lRdEJBa0VDRUlzQklRd0Nmd0pBQWtBRFFBSkFJQWRCQkU4TkFpQUhRUUZxSWdKQkFuUWdBMm9vQWdBaUQwRUJhaUFIUVFKMElBTnFLQUlBSWdocnQwU2FtWm1abVptcFA2SkVBQUFBQUFBQTREK2dJaFFnQ0xlZ0VITWhFU0FQdHlBVW9SQnpJQkZySWhKQkFXcEJBaENMQVNFTlFRQWhDUU5BSUFrZ0Vrd0VRQ0FFSUFrZ0VXb2lDRUVDZENBQWFpZ0NBTElnQ0VFQ2RDQUJhaWdDQUxJZ0VDQUtFS1lCUVFCSURRSWdEU2dDQUNJSUlBbEJBWFFpRDBFRGRHb2dFQ29DQUxzNUF3QWdEMEVCY2tFRGRDQUlhaUFLS2dJQXV6a0RBQ0FKUVFGcUlRa01BUXNMSUEwZ0RDQU9JQXNRblFWQkFFZ05BeUFIUVJoc0lBVnFJQXdvQWdBaUNDc0RDQ0lWT1FNQUlBZEJHR3dnQldvZ0NDc0RBSm9pRkRrRENDQUhRUmhzSUFWcUlCVWdDeWdDQUNJSEt3TUFvaUFIS3dNSUlCU2lvSm81QXhBZ0RSQkpJQUloQnd3QkN3c01BUXNnREJCSklBc1F6d0VnRGhEUEFVRUFJUVFEZjBFQUlBUkJCRThOQWhvZ0JFRURha0VEY1NJQVFSaHNJQVZxSWdNckF3QWdCRUVZYkNBRmFpc0RDQ0lWb2lBRVFSaHNJQVZxSWdJckF3QWdBRUVZYkNBRmFpc0RDQ0lVb3FFaUZwbEVMVU1jNitJMkdqOWpCSDlCZndVZ0JFRUVkQ0FHYWlBVUlBUkJHR3dnQldvaUFTc0RFS0lnRlNBQVFSaHNJQVZxSWdBckF4Q2lvU0FXb3prREFDQUVRUVIwSUFacUlBSXJBd0FnQUNzREVLSWdBeXNEQUNBQkt3TVFvcUVnRnFNNUF3Z2dCRUVCYWlFRURBRUxDd3dCQ3lBTkVFa2dEQkJKSUFzUXp3RWdEaERQQVVGL0N5RVRJQW9rQmlBVEN6QUFJQUFnQVRZQ0FDQUFRUUU2QUdRZ0FFSUFOd0pvSUFCQ0FEY0NjQ0FBUWdBM0FuZ2dBRUVFYWtIZ0FCRFpBd3RPQVFKL1FZQUJFRkVpQmlBQUVPRURFS2NJSUFBb0FnZ2hCU0FBSUFZMkFnZ2dCUVIvSUFVUXhBSWdCUkE0SUFBb0FnZ0ZJQVlMUVFBUWd3SWdBQ0FBS0FJSUlBRWdBaUFESUFRUTRBTUxYZ0VFZnlNR0lRTWpCa0VRYWlRR0lBTWdBaENFQWlBREtBSUVJQU1vQWdBaUJXdEJBblVoQmdOQUlBUWdCa2NFUUNBRVFRSjBJQVZxSUFRMkFnQWdCRUVCYWlFRURBRUxDeUFBSUFFZ0FpQUZJQVlRcUFnZ0F4QlZJQU1rQmd0SkFRRi9JQUJCRkJCUklnUTJBZ0FnQUNBQlFRaHFOZ0lFSUFRZ0F5Z0NBQ2dDQURZQ0NDQUVRUUEyQWd3Z0JFRUFOZ0lRSUFCQkFUb0FDQ0FFSUFJMkFnUWdCRUVBTmdJQUM2SUVBZ3AvQW4wakJpRUhJd1pCSUdva0JpQUhRUVJxSVFVZ0IwRVFhaUVKSUFjZ0FUWUNBQ0FCS0FJQUlRTUNRQUpBSUFBb0FnUWlCRVVpQ2dSQVFRQWhBUXdCQlNBRUlBUkJmMm9pQ0hGRklnc0VmeUFESUFoeEJTQURJQVJKQkg4Z0F3VWdBeUFFRUU0TEN5SUJRUUowSUFBb0FnQnFLQUlBSWdJRVFBTkFJQUlvQWdBaUFrVU5BeUFESUFJb0FnUWlCa2NFUUNBTEJFQWdCaUFJY1NFR0JTQUdJQVJQQkVBZ0JpQUVFRTRoQmdzTElBRWdCa2NOQkFzZ0F5QUNLQUlJUncwQUN3VU1BZ3NMREFFTElBVWdBQ0FESUFjUXFnZ2dBQ29DRUNJTUlBU3psQ0FBS0FJTVFRRnFzeUlOWFNBS2NnUkFBbjhnQUNBTklBeVZqUkNTQVNJQ0lBUkJmMm9nQkhGQkFFY2dCRUVEU1hJZ0JFRUJkSElpQVNBQklBSkpHeERGQWlBQUtBSUVJZ0pCZjJvaEFTQUJJQU54SUFFZ0FuRkZEUUFhSUFNZ0Fra0VmeUFEQlNBRElBSVFUZ3NMSVFFRklBUWhBZ3NnQUNnQ0FDQUJRUUowYWlnQ0FDSURCSDhnQlNnQ0FDQURLQUlBTmdJQUlBTWdCU2dDQURZQ0FDQUZCU0FGS0FJQUlBQW9BZ2cyQWdBZ0FDQUZLQUlBTmdJSUlBQW9BZ0FnQVVFQ2RHb2dBRUVJYWpZQ0FDQUZLQUlBSWdZb0FnQWlBUVJBSUFFb0FnUWhBU0FDSUFKQmYyb2lBM0VFUUNBQklBSlBCRUFnQVNBQ0VFNGhBUXNGSUFFZ0EzRWhBUXNnQUNnQ0FDQUJRUUowYWlBR05nSUFDeUFGQ3lJQktBSUFJUUlnQUNBQUtBSU1RUUZxTmdJTUlBRkJBRFlDQUFzZ0J5UUdJQUpCREdvTFB3RUJmeUFBUVNScUlnRkJER3BCZ0FFUTF3TWdBVUVNYWhEWUF5QUJRUWcyQW1nZ0FVRVFOZ0pzSUFFZ0FFRUlhaUlBRUhRb0FnQWdBQkJ4RUtrSUM4OEdBUVYvSXdZaENDTUdRU0JxSkFZZ0NFRVVhaUVHSUFGRkJFQWdCa0hBeUFOQng1WUNFRGRCa1BrQkVEZEI3NklDRURkQjFBRVFQa0gyb2dJUU4wSFVsd0lRTnlJRUlBUW9BZ0JCZEdvb0FnQnFFRHNnQmtHQXpnTVFPaUlGS0FJQUtBSWNJUWNnQlVFS0lBZEJQM0ZCaWdGcUVRSUFJUVVnQmhBOElBUWdCUkJBSUFRUVB4QUFDeUFDUlFSQUlBWkJ3TWdEUVlqNkFSQTNRWkQ1QVJBM1FlK2lBaEEzUWRVQkVENUI5cUlDRURkQnFQb0JFRGNpQkNBRUtBSUFRWFJxS0FJQWFoQTdJQVpCZ000REVEb2lCU2dDQUNnQ0hDRUhJQVZCQ2lBSFFUOXhRWW9CYWhFQ0FDRUZJQVlRUENBRUlBVVFRQ0FFRUQ4UUFBc2dBUkIwSWdRb0FnUWdCQ2dDQUVZRVFDQUdRY0RJQTBHNStnRVFOMEdRK1FFUU4wSHZvZ0lRTjBIV0FSQStRZmFpQWhBM1FlMzZBUkEzSWdRZ0JDZ0NBRUYwYWlnQ0FHb1FPeUFHUVlET0F4QTZJZ1VvQWdBb0Fod2hCeUFGUVFvZ0IwRS9jVUdLQVdvUkFnQWhCU0FHRUR3Z0JDQUZFRUFnQkJBL0VBQUxJQUVRZENnQ0FDZ0NCQ0FDS0FJQVJ3UkFJQVpCd01nRFFmNzZBUkEzUVpENUFSQTNRZStpQWhBM1FkY0JFRDVCOXFJQ0VEZEJ4L3NCRURjaUJDQUVLQUlBUVhScUtBSUFhaEE3SUFaQmdNNERFRG9pQlNnQ0FDZ0NIQ0VISUFWQkNpQUhRVDl4UVlvQmFoRUNBQ0VGSUFZUVBDQUVJQVVRUUNBRUVEOFFBQXNnQVJCMEtBSUFLQUlJSUFJb0FnUkhCRUFnQmtIQXlBTkI2dnNCRURkQmtQa0JFRGRCNzZJQ0VEZEIyQUVRUGtIMm9nSVFOMEhIK3dFUU55SUVJQVFvQWdCQmRHb29BZ0JxRURzZ0JrR0F6Z01RT2lJRktBSUFLQUljSVFjZ0JVRUtJQWRCUDNGQmlnRnFFUUlBSVFVZ0JoQThJQVFnQlJCQUlBUVFQeEFBQ3lBQ0lBRVE5QWdnQmlBQ0VNQUNJZ1FvQWdRZ0JDZ0NBR3RCSkJBNUVKd0lRUUFoQkFOQUlBUWdBaERBQWlJRktBSUVJQVVvQWdCclFTUVFPVWtFUUNBSUlBSVF3QUlvQWdBaUJTQUVRU1JzYWlvQ0FDQUVRU1JzSUFWcUtnSUVJQVJCSkd3Z0JXb3FBZ2dnQkVFa2JDQUZhaW9DSENBRVFTUnNJQVZxS2dJWVF3QUFBQUJlRVB3RElBWW9BZ0FnQkVFVWJHb2lCU0FJS1FJQU53SUFJQVVnQ0NrQ0NEY0NDQ0FGSUFnc0FCQTZBQkFnQkVFQmFpRUVEQUVMQ3lBRElBQVFoZ0VnQVNBR0VMWUhJQVlRMlFJZ0NDUUdDeThCQVg4RFFDQUFRUWhJSUFGQkNFaHlSUVJBSUFKQkFXb2hBaUFCUVFGMUlRRWdBRUVCZFNFQURBRUxDeUFDQ3lJQkFYOGdBQ2dDQ0NJQ1FRQWdBVUVEZEJCRkdpQUFJQUZCQTNRZ0FtbzJBZ2dMSWdFQmZ5QUFLQUlFSWdKQkFDQUJRUU4wRUVVYUlBQWdBVUVEZENBQ2FqWUNCQXVsQVFFRmZ5TUdJUUlqQmtFZ2FpUUdJQUFvQWdnZ0FDZ0NCQ0lEYTBFRGRTQUJTUVJBUWYvLy8vOEJJQUVnQXlBQUtBSUFhMEVEZFdvaUEwa0VRQkFBQlNBQ0lBTWdBQ2dDQ0NBQUtBSUFJZ1JySWdWQkFuVWlCaUFHSUFOSkcwSC8vLy8vQVNBRlFRTjFRZi8vLy84QVNSc2dBQ2dDQkNBRWEwRURkU0FBUVFocUVJZ0NJQUlnQVJDdkNDQUFJQUlRelFJZ0FoRE1BZ3NGSUFBZ0FSQ3dDQXNnQWlRR0N6MEJBbjhnQUNnQ0JDQUFLQUlBSWdKclFRTjFJZ0ZCZ0FoSkJFQWdBRUdBQ0NBQmF4Q3hDQVVnQVVHQUNFc0VRQ0FBSUFKQmdFQnJOZ0lFQ3dzTE5BQWdBRUdBeUFBUWh3RWdBRUVZYWhDeUNDQUFRd3JYSXp3NEFpUWdBRUdBQ0RZQ0tDQUFRYWdJTmdJc0lBQkJNallDTUFzcUFDQUFRZ0EzQWdBZ0FFSUFOd0lJSUFCQ0FEY0NFQ0FBUWdBM0FoZ2dBRUVBTmdJZ0lBQVFzd2dMeEFFQkFYOGdBRUVBTmdJTUlBQkJBRFlDRUNBQVFRQTJBaFFnQUVGQWF5SUJRZ0EzQWdBZ0FVSUFOd0lJSUFGQ0FEY0NFQ0FBUVlDQWdQd0ROZ0pZSUFCQjNBQnFFTkVJSUFCQm9BRnFJZ0VRZ2drZ0FFRzhBbW9RdUFjZ0FFRUFOZ0w4QkNBQVFRQTJBb0FGSUFCQkFEWUNoQVVnQUVNek16TS9PQUtJQlNBQVFZd0ZhaERGQnlBQVFaUUdhaEMwQ0NBQlF3QUFRRUE0QWpRZ0FVTUFBSUJBT0FJNElBRkI5QU1ROXdNZ0FFTUFBRUJBT0FJRUlBQkJDRFlDQUNBQVFRRTZBQWdMSkFFQ2Z3TkFJQUFFUUNBQUtBSUFJUUlnQUVFTWFoQlZJQUFRT0NBQ0lRQU1BUXNMQzQ4RkFnOS9BWHdqQmlFRUl3WkI0QUJxSkFZZ0JFRXdhaUVISUFSQjNBQnFJUU1nQkVIWUFHb2hCU0FCUVJ4cUlnZ29BZ0FoQ3lBQlFkeTRBbW9pQ1NnQ0FDRU1JQUVvQWhoQmYyb2hEVUVCSVFZRFFDQUdJQTFJQkVBZ0JpQUNJQUZCSEdvZ0JrRUNkR29vQWdBZ0Myc2lBaUFDYkNBQlFkeTRBbW9nQmtFQ2RHb29BZ0FnREdzaUFpQUNiR29pRGlBS1NpSVBHeUVDSUFaQkFXb2hCaUFPSUFvZ0R4c2hDZ3dCQ3dzZ0EwRUFOZ0lBSUFWQkFEWUNBQ0FJSUFsQkFDQUNJQUMzUkFBQUFBQUFBT2cvbzBSN0ZLNUg0WHFFUDZJaUVTQUhJQU1RcXdGQkFFZ0VmMEYvQlNBSUlBa2dBaUFCS0FJWVFYOXFJQkVnQkNBRkVLc0JRUUJJQkg5QmZ3VUNmeUFES0FJQUlnQkJBVVlnQlNnQ0FDSUdRUUZHY1FSQUlBUW9BZ0FoQUNBSEtBSUFJUU1GQW44Z0JrVWdBRUVCU25FRVFDQUNRUUlRT1NFQUlBVkJBRFlDQUNBRFFRQTJBZ0JCZnlBSUlBbEJBQ0FBSUJFZ0J5QURFS3NCUVFCSURRTWFRWDhnQ0NBSklBQWdBaUFSSUFRZ0JSQ3JBVUVBU0EwREdrRi9JQU1vQWdCQkFVWWdCU2dDQUVFQlJuRkZEUU1hSUFJaEFDQUhLQUlBSVFNZ0JDZ0NBQXdCQzBGL0lBQkZJQVpCQVVweFJRMENHaUFCS0FJWUlBSkJmMnBxUVFJUU9TRUFJQVZCQURZQ0FDQURRUUEyQWdCQmZ5QUlJQWtnQWlBQUlCRWdCeUFERUtzQlFRQklEUUlhUVg4Z0NDQUpJQUFnQVNnQ0dFRi9haUFSSUFRZ0JSQ3JBVUVBU0EwQ0drRi9JQU1vQWdCQkFVWWdCU2dDQUVFQlJuRkZEUUlhSUFRb0FnQWhBQ0FDSVFNZ0J5Z0NBQXNoQWdzZ0FVR2M4UVJxUVFBMkFnQWdBVUdnOFFScUlBTTJBZ0FnQVVHazhRUnFJQUkyQWdBZ0FVR284UVJxSUFBMkFnQWdBVUdzOFFScUlBRW9BaGhCZjJvMkFnQkJBQXNMQ3lFUUlBUWtCaUFRQ3lVQkFuOERRQ0FBQkVBZ0FDZ0NBQ0VDSUFCQkRHb1FsUUVnQUJBNElBSWhBQXdCQ3dzTEtRRUJmeUFBS0FJSUVMZ0lJQUFvQWdBaEFTQUFRUUEyQWdBZ0FRUkFJQUFvQWdRYUlBRVFPQXNMU2dFQ2Z5QUFRZ0EzQWdBZ0FFSUFOd0lJSUFCQkFEWUNFQ0FBUVlDQWdQd0ROZ0lVUWNnR0VGRWlBaEMxQ0NBQUtBSUFJUUVnQUNBQ05nSUFJQUVFUUNBQkVPb0RJQUVRT0FzTE1BRUNmeUFBUVFBMkFnQkJHQkJSSWdJUXVnZ2dBQ2dDQUNFQklBQWdBallDQUNBQkJFQWdBUkRyQXlBQkVEZ0xDOXdCQWdGL0JuMGdCU29DQUNJSUlBTXFBZ0FpQjVNaENTQUlJQVFxQWdBaUNKTWdDWlFoQ2lBSElBaVRJZ3NnQ1pRaENTQUtRd0FBQUFCYklBbERBQUFBQUZ0eUlBdERBQUFBQUZ0eUJIOGdBRU1BQUFBQU9BSUFJQUZEQUFBQUFEZ0NBRU1BQUFBQUlRZEJBQVVnQUNBRktnSUVJQVFxQWdRaURKTWdDcFVnQXlvQ0JDQU1reUFKbFpNaUNUZ0NBQ0FCSUFNcUFnUWdCQ29DQkpNZ0NDQUlsQ0FISUFlVUlnZVRJQW1Va2lBTGxTSUlPQUlBSUFNcUFnUWdCeUFBS2dJQWxKTWdDQ0FES2dJQWxKTWhCMEVCQ3lFR0lBSWdCemdDQUNBR0M2UUJBZ0ovQW4wZ0FTb0NBQ0VHSUFKQmYyb2lBMEVDZENBQmFpSUVLZ0lBSVFWQkFDRUNBMEFnQWlBRFJ3UkFJQUpCQW5RZ0FHb2dCVUdJaGdFcUFnQ1VJQUpCQW5RZ0FXb3FBZ0FpQlVHTWhnRXFBZ0NVa2tHUWhnRXFBZ0FnQWtFQmFpSUNRUUowSUFGcUtnSUFsSkk0QWdBTUFRc0xJQU5CQW5RZ0FHb2dCVUdJaGdFcUFnQ1VRWXlHQVNvQ0FDQUVLZ0lBbEpJZ0JrR1FoZ0VxQWdDVWtqZ0NBQXYyQndFTWZ5TUdJUWNqQmtHZzhRUnFKQVlnQjBHUThRUnFJUTBnQjBHSThRUnFJUTRnQjBHQThRUnFJUWdnQjBIQXVBSnFJUXdnQnlFTElBUW9BZ1FoQ2lBRUtBSUFJZ2toQnlBSklBRWdCQ2dDQ0NJSmJHcEJBWFFnQUdvaEJnSi9Ba0FEUUFKQUlBY2dDa29OQWlBR0xnRUFJZ1JCQUVvRVFDQURJQVJCZjJwQkFuUWdBbW9vQWdCR0RRRUxJQWRCQVdvaEJ5QUdRUUpxSVFZTUFRc0xJQWRCZjBZTkFDQUZRUUUyQWhnZ0JTQUhOZ0ljSUFWQjNMZ0NhaUlQSUFrMkFnQkJCU0VHSUFraEJDQUhJUU5CQVNFQ0FrQUNRQU5BQWtBZ0FTQUViQ0FEYWtFQmRDQUFhaUVRUVFBaENDQUdRUVZxSVFZQ1FBSkFBMEFnQmtFSUVFOGhCaUFJUVFoUERRRWdCa0VDZEVIQUNHb29BZ0FpQkNBQklBWkJBblJCb0FocUtBSUFJZ3BzYWtFQmRDQVFhaTRCQUVFQVRBUkFJQWhCQVdvaENDQUdRUUZxSVFZTUFRc0xEQUVMSUFoQkNFWU5BU0FHUVFKMFFjQUlhaWdDQUNFRUlBWkJBblJCb0FocUtBSUFJUW9MSUFWQkhHb2dBa0VDZEdvZ0F5QUVhallDQUNBRlFkeTRBbW9nQlNnQ0dDSUNRUUowYWlBQ1FRSjBJQVZxUWRpNEFtb29BZ0FnQ21vMkFnQWdCeUFGUVJ4cUlBVW9BaGdpQTBFQ2RHb2lDQ2dDQUVZRVFDQUpJQVZCM0xnQ2FpQURRUUowYWlnQ0FFWU5Bd3NnQlNBRFFRRnFJZ0kyQWhnZ0FrR1B6Z0JHRFFNZ0JVSGN1QUpxSUFOQkFuUnFLQUlBSVFRZ0NDZ0NBQ0VEREFFTEMwRUFRUU5CNUtnQklBNFFQVUYvREFNTFFRQWhBRUVBSVFaQkFTRUJBMEFnQVNBRFNBUkFJQUVnQUNBRlFSeHFJQUZCQW5ScUtBSUFJQWRySWdBZ0FHd2dCVUhjdUFKcUlBRkJBblJxS0FJQUlBbHJJZ0FnQUd4cUlnSWdCa29pQkJzaEFDQUNJQVlnQkJzaEJpQUJRUUZxSVFFTUFRc0xRUUFoQVFOQUlBRWdBRWdFUUNBQlFRSjBJQXhxSUFWQkhHb2dBVUVDZEdvb0FnQTJBZ0FnQVVFQ2RDQUxhaUFGUWR5NEFtb2dBVUVDZEdvb0FnQTJBZ0FnQVVFQmFpRUJEQUVMQ3lBQUlRRURRQ0FCSUFOSUJFQWdCVUVjYWlBQklBQnJJZ0pCQW5ScUlBVkJIR29nQVVFQ2RHb29BZ0EyQWdBZ0JVSGN1QUpxSUFKQkFuUnFJQVZCM0xnQ2FpQUJRUUowYWlnQ0FEWUNBQ0FCUVFGcUlRRWdCU2dDR0NFRERBRUxDMEVBSVFFRFFDQUJJQUJJQkVBZ0JVRWNhaUFCSUFCcklnSWdCU2dDR0dwQkFuUnFJQUZCQW5RZ0RHb29BZ0EyQWdBZ0JVSGN1QUpxSUFJZ0JTZ0NHR3BCQW5ScUlBRkJBblFnQzJvb0FnQTJBZ0FnQVVFQmFpRUJEQUVMQ3lBRlFSeHFJQVVvQWhoQkFuUnFJQVVvQWh3MkFnQWdCVUhjdUFKcUlBVW9BaGhCQW5ScUlBOG9BZ0EyQWdBZ0JTQUZLQUlZUVFGcU5nSVlRUUFNQWd0QkFFRURRZXVvQVNBTkVEMUJmd3dCQzBFQVFRTkIzYWdCSUFnUVBVRi9DeUVSSUFza0JpQVJDOFFJQWdWL0FYMGpCaUVGSXdaQkVHb2tCaUFBUlFSQUlBVkJ3TWdEUWNMckFSQTNRZWJyQVJBM1FlK2lBaEEzUVlzQkVENUI5cUlDRURkQjV1d0JFRGNpQmlBR0tBSUFRWFJxS0FJQWFoQTdJQVZCZ000REVEb2lDQ2dDQUNnQ0hDRUVJQWhCQ2lBRVFUOXhRWW9CYWhFQ0FDRUVJQVVRUENBR0lBUVFRQ0FHRUQ4UUFBc2dBVU1BQUFBL2trTUFBQUFBWGdSQUlBRkRBQUFBdjVJaUNTQURzbDBFUUNBQ1F3QUFBQUJnUlFSQUlBVkJ3TWdEUWVudEFSQTNRZWJyQVJBM1FlK2lBaEEzUVkwQkVENUI5cUlDRURkQmorNEJFRGNpQmlBR0tBSUFRWFJxS0FJQWFoQTdJQVZCZ000REVEb2lDQ2dDQUNnQ0hDRUVJQWhCQ2lBRVFUOXhRWW9CYWhFQ0FDRUVJQVVRUENBR0lBUVFRQ0FHRUQ4UUFBc2dBMEYvVEFSQUlBVkJ3TWdEUWF6dUFSQTNRZWJyQVJBM1FlK2lBaEEzUVk0QkVENUI5cUlDRURkQjBlNEJFRGNpQmlBR0tBSUFRWFJxS0FJQWFoQTdJQVZCZ000REVEb2lDQ2dDQUNnQ0hDRUVJQWhCQ2lBRVFUOXhRWW9CYWhFQ0FDRUVJQVVRUENBR0lBUVFRQ0FHRUQ4UUFBdERBQUNBUHlBQklBbU9FRU1pQkxLVFF3QUFBTCtTSWdtVElRRWdBeUFFYWlBREVFOGhCaUFFUVFGcUlBTVFUeUVJSUFGREFBQUFBR0JGQkVBZ0JVSEF5QU5CN3U0QkVEZEI1dXNCRURkQjc2SUNFRGRCbGdFUVBrSDJvZ0lRTjBHTjd3RVFOeUlISUFjb0FnQkJkR29vQWdCcUVEc2dCVUdBemdNUU9pSUVLQUlBS0FJY0lRTWdCRUVLSUFOQlAzRkJpZ0ZxRVFJQUlRTWdCUkE4SUFjZ0F4QkFJQWNRUHhBQUN5QUpRd0FBQUFCZ1JRUkFJQVZCd01nRFFhSHZBUkEzUWVickFSQTNRZStpQWhBM1FaY0JFRDVCOXFJQ0VEZEJ3TzhCRURjaUJ5QUhLQUlBUVhScUtBSUFhaEE3SUFWQmdNNERFRG9pQkNnQ0FDZ0NIQ0VESUFSQkNpQURRVDl4UVlvQmFoRUNBQ0VESUFVUVBDQUhJQU1RUUNBSEVEOFFBQXNnQmtGL1RBUkFJQVZCd01nRFFkVHZBUkEzUWVickFSQTNRZStpQWhBM1FaZ0JFRDVCOXFJQ0VEZEJoUEFCRURjaUJ5QUhLQUlBUVhScUtBSUFhaEE3SUFWQmdNNERFRG9pQkNnQ0FDZ0NIQ0VESUFSQkNpQURRVDl4UVlvQmFoRUNBQ0VESUFVUVBDQUhJQU1RUUNBSEVEOFFBQXNnQ0VGL1NnUkFJQVpCQW5RZ0FHb2lBeUFCSUFLVUlBTXFBZ0NTT0FJQUlBaEJBblFnQUdvaUFDQUpJQUtVSUFBcUFnQ1NPQUlBSUFVa0JnOEZJQVZCd01nRFFaN3dBUkEzUWVickFSQTNRZStpQWhBM1Faa0JFRDVCOXFJQ0VEZEJ6dkFCRURjaUJDQUVLQUlBUVhScUtBSUFhaEE3SUFWQmdNNERFRG9pQXlnQ0FDZ0NIQ0VBSUFOQkNpQUFRVDl4UVlvQmFoRUNBQ0VBSUFVUVBDQUVJQUFRUUNBRUVEOFFBQXNMQ3lBRlFjRElBMEdBN1FFUU4wSG02d0VRTjBIdm9nSVFOMEdNQVJBK1FmYWlBaEEzUWNIdEFSQTNJZ1FnQkNnQ0FFRjBhaWdDQUdvUU95QUZRWURPQXhBNklnTW9BZ0FvQWh3aEFDQURRUW9nQUVFL2NVR0tBV29SQWdBaEFDQUZFRHdnQkNBQUVFQWdCQkEvRUFBTFF3QWdBRU1BQU1CQWtpQUFsRU1BQVBCQmtpQUFsRU1BQVBCQ2tpQUFsRU1BQUxSRGtpQUFsRU1BQURSRWtpQUFsRU1BQURSRWtydEVPV3hTL212QlZqK2l0Z3Y0REFJT2Z3TjlJd1loRENNR1FUQnFKQVlnREVFZ2FpRUtJQVZEQUFBQUFHQkZCRUFnQ2tIQXlBTkI2ZWNCRURkQnZ1WUJFRGRCNzZJQ0VEZEI5d0FRUGtIMm9nSVFOMEdINkFFUU55SUlJQWdvQWdCQmRHb29BZ0JxRURzZ0NrR0F6Z01RT2lJSktBSUFLQUljSVFzZ0NVRUtJQXRCUDNGQmlnRnFFUUlBSVFrZ0NoQThJQWdnQ1JCQUlBZ1FQeEFBQ3lBQUtBSW9JQVFnQXlBQUtBSUViR3BCQlhScUtBSUVzeUFGWGtVRVFDQUtRY0RJQTBHYTZBRVFOMEcrNWdFUU4wSHZvZ0lRTjBINEFCQStRZmFpQWhBM1Flcm9BUkEzSWdnZ0NDZ0NBRUYwYWlnQ0FHb1FPeUFLUVlET0F4QTZJZ2tvQWdBb0Fod2hDeUFKUVFvZ0MwRS9jVUdLQVdvUkFnQWhDU0FLRUR3Z0NDQUpFRUFnQ0JBL0VBQUxJQVpEQUFBQUFHQkZCRUFnQ2tIQXlBTkJqdWtCRURkQnZ1WUJFRGRCNzZJQ0VEZEIrUUFRUGtIMm9nSVFOMEdzNlFFUU55SUlJQWdvQWdCQmRHb29BZ0JxRURzZ0NrR0F6Z01RT2lJSktBSUFLQUljSVFzZ0NVRUtJQXRCUDNGQmlnRnFFUUlBSVFrZ0NoQThJQWdnQ1JCQUlBZ1FQeEFBQ3lBQUtBSW9JQVFnQXlBQUtBSUViR3BCQlhScUtBSUlzeUFHWGtVRVFDQUtRY0RJQTBHLzZRRVFOMEcrNWdFUU4wSHZvZ0lRTjBINkFCQStRZmFpQWhBM1FaRHFBUkEzSWdnZ0NDZ0NBRUYwYWlnQ0FHb1FPeUFLUVlET0F4QTZJZ2tvQWdBb0Fod2hDeUFKUVFvZ0MwRS9jVUdLQVdvUkFnQWhDU0FLRUR3Z0NDQUpFRUFnQ0JBL0VBQUxJQUFvQWlnZ0JDQURJQUFvQWdSc2FrRUZkR29pQ1NnQ0VFRUNSd1JBSUFwQndNZ0RRYlhxQVJBM1FiN21BUkEzUWUraUFoQTNRZjRBRUQ1QjlxSUNFRGRCM3VvQkVEY2lBeUFES0FJQVFYUnFLQUlBYWhBN0lBcEJnTTRERURvaUJDZ0NBQ2dDSENFSUlBUkJDaUFJUVQ5eFFZb0JhaEVDQUNFRUlBb1FQQ0FESUFRUVFDQURFRDhRQUFzZ0RFRVlhaUVMSUF4QkVHb2hEeUFNUVF4cUlSQWdERUVJYWlFUklBeEJCR29oRWlBQ1FRQTJBZ0FnQlVNQUFBQS9raEJESVFNZ0JrTUFBQUEva2hCRElRUWdBMEVBVGdSQUlBUkJBRWdnQ1NnQ0JDQURUWEpGQkVBZ0NTZ0NDQ0FFU3dSQUFrQkRBQUNBdjBNQUFJQS9JQUFxQWd3Z0I1UWlCME1BQUlBL0lBZGVHeUlIRUdsREFBQUFRSlNWSVJjZ0J5QUFLZ0lRbENJSEVHbU5JUmhCQUNBRElBZERBQUFBUDVJUVF5SU5heERHQVNFSUlBTWdEV29nQ1NnQ0JFRi9haENGQWlFT1FRQWdCQ0FOYXhER0FTRURJQVFnRFdvZ0NTZ0NDRUYvYWhDRkFpRU5JQUFvQWh3aUJFRUFJQUFvQWlBZ0JHdEJBblZCQW5RUVJSb0RRQ0FESUExTUJFQWdBN0lnQnBNUWFTRUhJQWtnQXhCUUlSTWdDQ0VFQTBBZ0JDQU9UQVJBSUFjZ0JMSWdCWk1RYVpJaUZpQVlYa1VFUUNBWElCYVVFTUFJSVJZZ0FDZ0NIQ0FFUVFOMElCTnFJaFFxQWdBZ0FDZ0NDQ0lWc3BTN1JIZkl5VzB3WDhRL29yWWdGaUFVS2dJRWxDQVZFTDhJQ3lBRVFRRnFJUVFNQVFzTElBTkJBV29oQXd3QkN3dEJBQ0VEQTBBZ0F5QUFLQUlVU0FSQUlBQW9BaHdpQkNBRUlBQW9BZ2dRdlFnZ0EwRUJhaUVEREFFTEN5QUFLQUlJSVFOQkFDRUVRd0FBQUFBaEJRTkFJQVFnQTBnRVFDQUFLQUljSUFSQkFuUnFLZ0lBSVFZZ0JFRUJhaUVFSUFZZ0JTQUdJQVZlR3lFRkRBRUxDeUFGUXdBQUFBQmNCRUFnQlVNQUFBQUFYa1VFUUNBS1FjRElBMEg5NmdFUU4wRys1Z0VRTjBIdm9nSVFOMEhhQVJBK1FmYWlBaEEzUWFQckFSQTNJZ1FnQkNnQ0FFRjBhaWdDQUdvUU95QUtRWURPQXhBNklnZ29BZ0FvQWh3aENTQUlRUW9nQ1VFL2NVR0tBV29SQWdBaENDQUtFRHdnQkNBSUVFQWdCQkEvRUFBTFFRQWhCQU5BSUFRZ0EwNE5BaUFLSUFTeUlnYzRBZ0FnQ2lBQUtBSWNJZ2dnQkVFQ2RHb2lDU2dDQUNJTk5nSUVJQXNnQkVGL2FpSU9zamdDQUNBTElBTWdEbW9nQXhCUFFRSjBJQWhxS0FJQUlnNDJBZ1FnRHlBRVFRRnFJZ1N5T0FJQUlBOGdBeUFFYWlBREVFOUJBblFnQ0dvb0FnQWlDRFlDQkNBTnZpRUdJQWtxQWdBZ0JTQUFLZ0lZbEY0RVFDQUdJQTYrWGlBR0lBaStYbkVFUUNBTUlBYzRBZ0FnRUNBUklCSWdDeUFLSUE4UXZBZ0VRQ0FSS2dJQUlRWWdFaW9DQUJvZ0VDb0NBQ0lIUXdBQUFBQmNCRUFnRENBR2pDQUhRd0FBQUVDVWxUZ0NBQXNMSUF3cUFnQkRBQUFBUDVJZ0FDZ0NDTElpQnBJZ0JwVzdSQmd0UkZUN0lSbEFva1FZTFVSVSt5RVpRQkFldGlFR0lBSW9BZ0FpQTBFQ2RDQUJhaUFHT0FJQUlBSWdBMEVCYWpZQ0FDQUFLQUlJSVFNTEN3d0FBQXNBQ3dzTEN3c2dEQ1FHQytVQkFRTi9Jd1loQkNNR1FSQnFKQVlDUUFOQUlBSWdBUkIwSWdNb0FnUWdBeWdDQUd0QkJYVkpCRUFnQVJCMEtBSUFJQUpCQlhScUlnTW9BZ1FnQXlnQ0RFRUNka2NOQWlBQUtBSW9JQUpCQlhScUtBSVlJQU1vQWhnZ0F5Z0NCQ0FES0FJSUVNVUlJQUpCQVdvaEFnd0JDd3NnQkNRR0R3c2dCRUhBeUFOQmdlWUJFRGRCdnVZQkVEZEI3NklDRURkQjRBQVFQa0gyb2dJUU4wSEE1d0VRTnlJQUlBQW9BZ0JCZEdvb0FnQnFFRHNnQkVHQXpnTVFPaUlCS0FJQUtBSWNJUUlnQVVFS0lBSkJQM0ZCaWdGcUVRSUFJUUVnQkJBOElBQWdBUkJBSUFBUVB4QUFDN3NCQVFWL0lBQWdBellDQUNBQUlBUTJBZ1FnQUVFa05nSUlJQUJEQUFCQVFEZ0NEQ0FBUXdBQXdEODRBaEFnQUVFRk5nSVVJQUJEemN4TVB6Z0NHQ0FBUVJ4cVFTUVFod0VnQUNJR1FTaHFJQUFvQWdBZ0FDZ0NCR3dRMUFKQkFDRUFBMEFnQUNBRFJ3UkFJQUFnQkd3aEJ5QUJJQUIySVFnZ0FpQUFkaUVKUVFBaEJRTkFJQVFnQlVjRVFDQUdLQUlvSUFVZ0IycEJCWFJxUVFJZ0NDQUpRUUlRdHdJZ0JVRUJhaUVGREFFTEN5QUFRUUZxSVFBTUFRc0xDek1BSUFCQkFEWUNBQ0FBUVFBMkFnUWdBRUlBTndJTUlBQkNBRGNDRkNBQVFnQTNBaHdnQUVJQU53SWtJQUJDQURjQ0xBdU5Cd0lKZndKOUlBSkJmMm9oQ1NBQlFRUnFJZ1FxQWdBZ0FTb0NBQ0lOa3lFT0lBQWdBa0VDZENBQmFpSUdLZ0lBSUEyVElnMGdEaENkQWJ0RUdDMUVWUHNoQ1VDZ3RqZ0NBQ0FBSUE0Z0RwUWdEU0FObEpLUk9BSUVRUUVoQ0NBR0lRY0RRQ0FBUVFocUlRVWdCMEVFYWlFSElBZ2dDVWtFUUNBRklBY3FBZ0FnQkNvQ0FKTWlEaUFFUVFScUlnb3FBZ0FnQkVGOGFpb0NBSk1pRFJDZEFidEVHQzFFVlBzaENVQ2d0amdDQUNBQUlBMGdEWlFnRGlBT2xKS1JPQUlNSUFoQkFXb2hDQ0FLSVFRZ0JTRUFEQUVMQ3lBRFFYOXFJUXdnQkNvQ0FDSU5JQVJCZkdvcUFnQ1RJUTRnQlNBSEtnSUFJQTJUSWcwZ0RoQ2RBYnRFR0MxRVZQc2hDVUNndGpnQ0FDQUFJQTRnRHBRZ0RTQU5sSktST0FJTVFRRWhDQ0FGSVFNZ0FrRUNkQ0FHYWlFRUlBRWhCUU5BSUFOQkNHb2hBQ0FJSUF4SkJFQWdBQ0FFS2dJQUlBVXFBZ0NUSWc0Z0JrRUVhaUlBS2dJQUlBWXFBZ0NUSWcwUW5RRzdSQmd0UkZUN0lRbEFvTFk0QWdBZ0F5QU5JQTJVSUE0Z0RwU1NrVGdDREVFQklRc2dBMEVRYWlFREEwQWdCRUVFYWlFSElBVkJCR29oQmlBTElBbEpCRUFnQXlBSEtnSUFJQVlxQWdDVElnNGdBRUVFYWlJS0tnSUFJQUJCZkdvcUFnQ1RJZzBRblFHN1JCZ3RSRlQ3SVFsQW9MWTRBZ0FnQXlBTklBMlVJQTRnRHBTU2tUZ0NCQ0FMUVFGcUlRc2dCeUVFSUFZaEJTQUtJUUFnQTBFSWFpRUREQUVMQ3lBRElBY3FBZ0FnQmlvQ0FKTWlEaUFBS2dJQUlBQkJmR29xQWdDVElnMFFuUUc3UkJndFJGVDdJUWxBb0xZNEFnQWdBeUFOSUEyVUlBNGdEcFNTa1RnQ0JDQUlRUUZxSVFnZ0JFRUlhaUVFSUFWQkNHb2hCU0FBUVFScUlRWU1BUXNMSUFJZ0RHeEJBblFnQVdvaUFVRUFJQUpyUVFKMGFpRUNJQUZCQkdvaUJDb0NBQ0FCS2dJQUlnMlRJUTRnQUNBTklBSXFBZ0NUSWcwZ0RoQ2RBYnRFR0MxRVZQc2hDVUNndGpnQ0FDQURJQTRnRHBRZ0RTQU5sSktST0FJTVFRRWhCU0FBSVFFZ0JDRUFBMEFnQVVFSWFpRURJQUpCQkdvaEFpQUZJQWxKQkVBZ0F5QUFLZ0lBSUFJcUFnQ1RJZzRnQUVFRWFpSUVLZ0lBSUFCQmZHb3FBZ0NUSWcwUW5RRzdSQmd0UkZUN0lRbEFvTFk0QWdBZ0FTQU5JQTJVSUE0Z0RwU1NrVGdDRENBRlFRRnFJUVVnQXlFQklBUWhBQXdCQ3dzZ0FDb0NBQ0lOSUFCQmZHb3FBZ0NUSVE0Z0F5QU5JQUlxQWdDVElnMGdEaENkQWJ0RUdDMUVWUHNoQ1VDZ3RqZ0NBQ0FCSUE0Z0RwUWdEU0FObEpLUk9BSU1DeHNBSUFCQkJHb2lBQ3dBQzBFQVNBUkFJQUFvQWdBaEFBc2dBQXNMQUNBQUVPMERJQUFRT0F2K0JnRUVmeU1HSVFRakJrRVFhaVFHSUFFb0FnQkJBVWNFUUNBRVFjRElBMEhYNFFFUU4wR1o0QUVRTjBIdm9nSVFOMEhLQWhBK1FmYWlBaEEzUVlyaUFSQTNJZ0lnQWlnQ0FFRjBhaWdDQUdvUU95QUVRWURPQXhBNklnTW9BZ0FvQWh3aEJTQURRUW9nQlVFL2NVR0tBV29SQWdBaEF5QUVFRHdnQWlBREVFQWdBaEEvRUFBTElBRW9BaEJCQVVjRVFDQUVRY0RJQTBHaTRnRVFOMEdaNEFFUU4wSHZvZ0lRTjBITEFoQStRZmFpQWhBM1FjL2lBUkEzSWdJZ0FpZ0NBRUYwYWlnQ0FHb1FPeUFFUVlET0F4QTZJZ01vQWdBb0Fod2hCU0FEUVFvZ0JVRS9jVUdLQVdvUkFnQWhBeUFFRUR3Z0FpQURFRUFnQWhBL0VBQUxJQUFvQWhBZ0FDZ0NGR3dnQUNnQ0NDQUFLQUlFYTBFRmRVY0VRQ0FFUWNESUEwSHA0Z0VRTjBHWjRBRVFOMEh2b2dJUU4wSE5BaEErUWZhaUFoQTNRYlBqQVJBM0lnSWdBaWdDQUVGMGFpZ0NBR29RT3lBRVFZRE9BeEE2SWdNb0FnQW9BaHdoQlNBRFFRb2dCVUUvY1VHS0FXb1JBZ0FoQXlBRUVEd2dBaUFERUVBZ0FoQS9FQUFMSUFFb0FnUWdBQ2dDQkNnQ0JFY0VRQ0FFUWNESUEwSFc0d0VRTjBHWjRBRVFOMEh2b2dJUU4wSE9BaEErUWZhaUFoQTNRWkxrQVJBM0lnSWdBaWdDQUVGMGFpZ0NBR29RT3lBRVFZRE9BeEE2SWdNb0FnQW9BaHdoQlNBRFFRb2dCVUUvY1VHS0FXb1JBZ0FoQXlBRUVEd2dBaUFERUVBZ0FoQS9FQUFMSUFFb0FnZ2dBQ2dDQkNnQ0NFY0VRQ0FFUWNESUEwR3k1QUVRTjBHWjRBRVFOMEh2b2dJUU4wSFBBaEErUWZhaUFoQTNRWkxrQVJBM0lnSWdBaWdDQUVGMGFpZ0NBR29RT3lBRVFZRE9BeEE2SWdNb0FnQW9BaHdoQlNBRFFRb2dCVUUvY1VHS0FXb1JBZ0FoQXlBRUVEd2dBaUFERUVBZ0FoQS9FQUFMSUFBZ0FDZ0NCQ0FCRU9BQklBQWdBQ2dDQkNJQlFTQnFJQUVRNEFFZ0FDQUFLQUlFSWdGQlFHc2dBVUVnYWhEdUEwRUJJUUVEUUNBQklBQW9BaEJKQkVBZ0FDZ0NCQ0FCSUFBb0FoUnNRUVYwYWlnQ0dDQUFLQUlFSUFFZ0FDZ0NGR3hCZjJwQkJYUnFLQUlZSUFBb0FnUWdBU0FBS0FJVWJFRi9ha0VGZEdvb0FnUWdBQ2dDQkNBQklBQW9BaFJzUVg5cVFRVjBhaWdDQ0JEVUNDQUFJQUFvQWdRaUFpQUJJQUFvQWhSc0lnTkJBV3BCQlhScUlBTkJCWFFnQW1vUTRBRWdBQ0FBS0FJRUlnSWdBU0FBS0FJVWJDSURRUUpxUVFWMGFpQURRUUZxUVFWMElBSnFFTzRESUFGQkFXb2hBUXdCQ3dzZ0JDUUdDejhCQW44Z0FDZ0NCQ0VDSUFBb0FnZ2hBUU5BSUFFZ0FrY0VRQ0FBSUFGQmZtb2lBVFlDQ0F3QkN3c2dBQ2dDQUNJQkJFQWdBQ2dDREJvZ0FSQTRDd3VYQVFFRWZ5QUJRUVJxSWdNb0FnQkJBQ0FBS0FJRUlBQW9BZ0FpQkdzaUJVRUJkV3RCQVhScUlRSWdBeUFDTmdJQUlBVkJBRW9FUUNBQ0lBUWdCUkJNR2lBREtBSUFJUUlMSUFBb0FnQWhCQ0FBSUFJMkFnQWdBeUFFTmdJQUlBQW9BZ1FoQWlBQUlBRW9BZ2cyQWdRZ0FTQUNOZ0lJSUFBb0FnZ2hBaUFBSUFFb0FndzJBZ2dnQVNBQ05nSU1JQUVnQXlnQ0FEWUNBQXNpQVFGL0lBQW9BZ2dpQWtFQUlBRkJBWFFRUlJvZ0FDQUJRUUYwSUFKcU5nSUlDMjhCQVg4Z0FFRUFOZ0lNSUFBZ0F6WUNFQ0FCQkVBZ0FVRUFTQVJBUVFnUUJTSURFSWdCSUFOQnRJc0JOZ0lBSUFOQitQY0FRUllRQkFVZ0FVRUJkQkJSSVFRTEN5QUFJQVEyQWdBZ0FDQUNRUUYwSUFScUlnSTJBZ2dnQUNBQ05nSUVJQUFnQVVFQmRDQUVhallDREFzaUFRRi9JQUFvQWdRaUFrRUFJQUZCQVhRUVJSb2dBQ0FCUVFGMElBSnFOZ0lFQzZBQkFRUi9Jd1loQWlNR1FTQnFKQVlnQUNnQ0NDQUFLQUlFSWdOclFRRjFJQUZKQkVCQi8vLy8vd2NnQVNBRElBQW9BZ0JyUVFGMWFpSURTUVJBRUFBRklBSWdBeUFBS0FJSUlBQW9BZ0FpQldzaUJDQUVJQU5KRzBILy8vLy9CeUFFUVFGMVFmLy8vLzhEU1JzZ0FDZ0NCQ0FGYTBFQmRTQUFRUWhxRU13SUlBSWdBUkRMQ0NBQUlBSVF5Z2dnQWhESkNBc0ZJQUFnQVJETkNBc2dBaVFHQ3p3QkFuOGdBQ2dDQkNBQUtBSUFJZ05yUVFGMUlnSWdBVWtFUUNBQUlBRWdBbXNRemdnRklBSWdBVXNFUUNBQUlBRkJBWFFnQTJvMkFnUUxDd3ViQVFFR2Z5QUFJQU1RMGdnZ0FFRUVhaUlHSUFNZ0FDZ0NGR3dRMUFJRFFDQUVJQU5JQkVBZ0FTQUVkaUVISUFJZ0JIWWhDRUVBSVFVRFFDQUZJQUFvQWhRaUNVa0VRQ0FHS0FJQUlBVWdCQ0FKYkdwQkJYUnFRUUlnQnlBSVFRRVF0d0lnQlVFQmFpRUZEQUVMQ3lBRVFRRnFJUVFNQVFzTElBQkJJR29nQVNBQ2JDSUJFTThJSUFCQkxHb2dBUkNIQVNBQVFUaHFJQUVRaHdFTE9BQWdBQkRUQ0NBQVFkeUZBVFlDQUNBQVFTQnFJZ0JDQURjQ0FDQUFRZ0EzQWdnZ0FFSUFOd0lRSUFCQ0FEY0NHQ0FBUVFBMkFpQUxOUUVCZlNBQUlBRTJBaEFnQUVFRE5nSVVJQUJFQUFBQUFBQUE0RDhRSTdZaUFqZ0NHQ0FBUXdBQWdEOGdBaERTQVpVNEFod0xMQUFnQUVIc2hRRTJBZ0FnQUVFRWFpSUFRZ0EzQWdBZ0FFSUFOd0lJSUFCQ0FEY0NFQ0FBUVFBMkFoZ0xud0VCQjM4Z0FrRUJkaUVJSUFOQkFYWWhDU0FDUVFGMElRb0RRQ0FFSUFsSEJFQkJBQ0VHSUFRZ0NteEJBblFnQVdvaUF5QUNRUUowYWlFRklBQWhCd05BSUFZZ0NFY0VRQ0FISUFNcUFnQWdBeW9DQkpJZ0JTb0NBSklnQlNvQ0JKSkRBQUNBUHBRNEFnQWdCa0VCYWlFR0lBVkJDR29oQlNBRFFRaHFJUU1nQjBFRWFpRUhEQUVMQ3lBRVFRRnFJUVFnQ0VFQ2RDQUFhaUVBREFFTEN3dXVDd0lMZndGOUl3WWhDeU1HUVJCcUpBWWdBMEVFVFFSQUlBdEJ3TWdEUWZmZkFSQTNRWm5nQVJBM1FlK2lBaEEzUWFnQkVENUI5cUlDRURkQm9lRUJFRGNpQlNBRktBSUFRWFJxS0FJQWFoQTdJQXRCZ000REVEb2lCeWdDQUNnQ0hDRUdJQWRCQ2lBR1FUOXhRWW9CYWhFQ0FDRUhJQXNRUENBRklBY1FRQ0FGRUQ4UUFBc2dCRUVFVFFSQUlBdEJ3TWdEUWJUaEFSQTNRWm5nQVJBM1FlK2lBaEEzUWFrQkVENUI5cUlDRURkQm9lRUJFRGNpQlNBRktBSUFRWFJxS0FJQWFoQTdJQXRCZ000REVEb2lCeWdDQUNnQ0hDRUdJQWRCQ2lBR1FUOXhRWW9CYWhFQ0FDRUhJQXNRUENBRklBY1FRQ0FGRUQ4UUFBc2dBMEYvYWlFTUlBTkJmbW9oQ1NBRFFYMXFJUTBnQTBGOGFpRU9JQUVoQndOQUlBUWdDRWNFUUNBRElBaHNRUUowSUFKcUlnWXFBZ0FoRUNBSElBWXFBZ2dnRUNBUVF3QUF3RUNVSUJBZ0Jpb0NCSkpEQUFDQVFKU1NrcEk0QWdBZ0J5QUdLZ0lNSUFZcUFnQWlFQ0FHS2dJRVF3QUF3RUNVSUJBZ0Jpb0NDSkpEQUFDQVFKU1NrcEk0QWdSQkFpRUZJQWRCQ0dvaENnTkFJQVVnQ1VjRVFDQUtJQVZCQW1wQkFuUWdCbW9xQWdBZ0JVRitha0VDZENBR2Fpb0NBQ0FGUVFKMElBWnFLZ0lBUXdBQXdFQ1VJQVZCZjJwQkFuUWdCbW9xQWdBZ0JVRUJhaUlGUVFKMElBWnFLZ0lBa2tNQUFJQkFsSktTa2pnQ0FDQUtRUVJxSVFvTUFRc0xJQWxCQW5RZ0Iyb2lCU0FNUVFKMElBWnFJZ29xQWdBaUVDQU9RUUowSUFacUtnSUFJQWxCQW5RZ0Jtb2lEeW9DQUVNQUFNQkFsQ0FOUVFKMElBWnFJZ1lxQWdBZ0VKSkRBQUNBUUpTU2twSTRBZ0FnQlNBS0tnSUFJaEFnQmlvQ0FDQVFRd0FBd0VDVUlCQWdEeW9DQUpKREFBQ0FRSlNTa3BJNEFnUWdBMEVDZENBSGFpRUhJQWhCQVdvaENBd0JDd3NnQkVGK2FpRU5RUUFoQ1NBRFFRSjBJQUZxSWdJZ0EwRUNkR29pQ0NFS0lBSWhCU0FCSVFjZ0FDRUdBMEFnQXlBSlJ3UkFJQVlnQ2lvQ0FDQUhLZ0lBSWhBZ0VFTUFBTUJBbENBUUlBVXFBZ0NTUXdBQWdFQ1VrcEtTUXdBQWdEdVVPQUlBSUFsQkFXb2hDU0FLUVFScUlRb2dCVUVFYWlFRklBZEJCR29oQnlBR1FRUnFJUVlNQVFzTFFRQWhCaUFEUVFKMElBaHFJUWtnQ0NFRklBRWhCeUFEUVFKMElBQnFJUWdEUUNBRElBWkhCRUFnQ0NBSktnSUFJQWNxQWdBaUVDQUNLZ0lBUXdBQXdFQ1VJQkFnQlNvQ0FKSkRBQUNBUUpTU2twSkRBQUNBTzVRNEFnQWdCa0VCYWlFR0lBbEJCR29oQ1NBRlFRUnFJUVVnQWtFRWFpRUNJQWRCQkdvaEJ5QUlRUVJxSVFnTUFRc0xRUUloQ0FOQUlBZ2dEVWNFUUVFQUlRa2dBeUFJUVg1cWJFRUNkQ0FCYWlJR0lBTkJBblJxSWdjZ0EwRUNkR29pQlNBRFFRSjBhaUlDSUFOQkFuUnFJUW9nQXlBSWJFRUNkQ0FBYWlFTUEwQWdBeUFKUndSQUlBd2dDaW9DQUNBR0tnSUFJQVVxQWdCREFBREFRSlFnQnlvQ0FDQUNLZ0lBa2tNQUFJQkFsSktTa2tNQUFJQTdsRGdDQUNBSlFRRnFJUWtnQ2tFRWFpRUtJQUpCQkdvaEFpQUZRUVJxSVFVZ0IwRUVhaUVISUFaQkJHb2hCaUFNUVFScUlRd01BUXNMSUFoQkFXb2hDQXdCQ3d0QkFDRUdJQU1nQkVGOGFteEJBblFnQVdvaUJ5QURRUUowYWlJRklBTkJBblJxSWdJZ0EwRUNkR29oQ0NBRElBMXNRUUowSUFCcUlRa0RRQ0FESUFaSEJFQWdDU0FJS2dJQUloQWdCeW9DQUNBQ0tnSUFRd0FBd0VDVUlBVXFBZ0FnRUpKREFBQ0FRSlNTa3BKREFBQ0FPNVE0QWdBZ0JrRUJhaUVHSUFoQkJHb2hDQ0FDUVFScUlRSWdCVUVFYWlFRklBZEJCR29oQnlBSlFRUnFJUWtNQVFzTFFRQWhCU0FESUFSQmZXcHNRUUowSUFGcUlnSWdBMEVDZEdvaUFTQURRUUowYWlFSElBTWdCRUYvYW14QkFuUWdBR29oQUFOQUlBTWdCVWNFUUNBQUlBY3FBZ0FpRUNBQ0tnSUFJQkJEQUFEQVFKUWdBU29DQUNBUWtrTUFBSUJBbEpLU2trTUFBSUE3bERnQ0FDQUZRUUZxSVFVZ0IwRUVhaUVISUFGQkJHb2hBU0FDUVFScUlRSWdBRUVFYWlFQURBRUxDeUFMSkFZTHpnb0JESDhqQmlFTUl3WkJFR29rQmlBRFFRUk5CRUFnREVIQXlBTkI5OThCRURkQm1lQUJFRGRCNzZJQ0VEZEJOeEErUWZhaUFoQTNRYUhoQVJBM0lnVWdCU2dDQUVGMGFpZ0NBR29RT3lBTVFZRE9BeEE2SWdjb0FnQW9BaHdoQ0NBSFFRb2dDRUUvY1VHS0FXb1JBZ0FoQnlBTUVEd2dCU0FIRUVBZ0JSQS9FQUFMSUFSQkJFMEVRQ0FNUWNESUEwRzA0UUVRTjBHWjRBRVFOMEh2b2dJUU4wRTRFRDVCOXFJQ0VEZEJvZUVCRURjaUJTQUZLQUlBUVhScUtBSUFhaEE3SUF4QmdNNERFRG9pQnlnQ0FDZ0NIQ0VJSUFkQkNpQUlRVDl4UVlvQmFoRUNBQ0VISUF3UVBDQUZJQWNRUUNBRkVEOFFBQXNnQTBGL2FpRU5JQU5CZm1vaENpQURRWDFxSVE0Z0EwRjhhaUVQSUFFaENBTkFJQVFnQ1VjRVFDQUlJQUlnQXlBSmJHb2lCaTBBQUNJRklBWXRBQUZxUVFKMElBWXRBQUlnQlVFSGJHcHFPd0VBSUFnZ0JpMEFBQ0lGSUFZdEFBSnFRUUowSUFZdEFBTWdCaTBBQVVFR2JDQUZhbXBxT3dFQ1FRSWhCU0FJUVFScUlRc0RRQ0FGSUFwSEJFQWdDeUFGUVFKcUlBWnFMUUFBSUFWQmZtb2dCbW90QUFBZ0JTQUdhaTBBQUVFR2JHb2dCVUYvYWlBR2FpMEFBQ0FGUVFGcUlnY2dCbW90QUFCcVFRSjBhbW83QVFBZ0J5RUZJQXRCQW1vaEN3d0JDd3NnQ2tFQmRDQUlhaUlGSUFZZ0RXb2lDeTBBQUNJUUlBWWdEbW9pQnkwQUFHcEJBblFnQmlBUGFpMEFBQ0FHSUFwcUlnWXRBQUJCQm13Z0VHcHFhanNCQUNBRklBc3RBQUFpQlNBR0xRQUFha0VDZENBSExRQUFJQVZCQjJ4cWFqc0JBaUFEUVFGMElBaHFJUWdnQ1VFQmFpRUpEQUVMQ3lBRVFYNXFJUTFCQUNFSklBTkJBWFFnQVdvaUFpQURRUUYwYWlJR0lRb2dBaUVGSUFFaEJ5QUFJUWdEUUNBRElBbEhCRUFnQ0NBS0x3RUFJQWN2QVFBaUN5QUZMd0VBYWtFQ2RDQUxRUWRzYW1xeVF3QUFnRHVVT0FJQUlBbEJBV29oQ1NBS1FRSnFJUW9nQlVFQ2FpRUZJQWRCQW1vaEJ5QUlRUVJxSVFnTUFRc0xRUUFoQ0NBRFFRRjBJQVpxSVFrZ0JpRUZJQUVoQnlBRFFRSjBJQUJxSVFZRFFDQURJQWhIQkVBZ0JpQUpMd0VBSUFjdkFRQWlDaUFGTHdFQWFrRUNkQ0FDTHdFQVFRWnNJQXBxYW1xeVF3QUFnRHVVT0FJQUlBaEJBV29oQ0NBSlFRSnFJUWtnQlVFQ2FpRUZJQUpCQW1vaEFpQUhRUUpxSVFjZ0JrRUVhaUVHREFFTEMwRUNJUVlEUUNBR0lBMUhCRUJCQUNFSklBTWdCa0YrYW14QkFYUWdBV29pQ0NBRFFRRjBhaUlISUFOQkFYUnFJZ1VnQTBFQmRHb2lBaUFEUVFGMGFpRUtJQU1nQm14QkFuUWdBR29oQ3dOQUlBTWdDVWNFUUNBTElBb3ZBUUFnQ0M4QkFDQUZMd0VBUVFac2FpQUhMd0VBSUFJdkFRQnFRUUowYW1xeVF3QUFnRHVVT0FJQUlBbEJBV29oQ1NBS1FRSnFJUW9nQWtFQ2FpRUNJQVZCQW1vaEJTQUhRUUpxSVFjZ0NFRUNhaUVJSUF0QkJHb2hDd3dCQ3dzZ0JrRUJhaUVHREFFTEMwRUFJUWdnQXlBRVFYeHFiRUVCZENBQmFpSUhJQU5CQVhScUlnVWdBMEVCZEdvaUFpQURRUUYwYWlFR0lBTWdEV3hCQW5RZ0FHb2hDUU5BSUFNZ0NFY0VRQ0FKSUFZdkFRQWlDaUFITHdFQUlBSXZBUUJCQm14cUlBVXZBUUFnQ21wQkFuUnFhckpEQUFDQU81UTRBZ0FnQ0VFQmFpRUlJQVpCQW1vaEJpQUNRUUpxSVFJZ0JVRUNhaUVGSUFkQkFtb2hCeUFKUVFScUlRa01BUXNMUVFBaEJTQURJQVJCZldwc1FRRjBJQUZxSWdJZ0EwRUJkR29pQVNBRFFRRjBhaUVISUFNZ0JFRi9hbXhCQW5RZ0FHb2hBQU5BSUFNZ0JVY0VRQ0FBSUFjdkFRQWlCQ0FDTHdFQUlBUkJCbXhxSUFRZ0FTOEJBR3BCQW5ScWFySkRBQUNBTzVRNEFnQWdCVUVCYWlFRklBZEJBbW9oQnlBQlFRSnFJUUVnQWtFQ2FpRUNJQUJCQkdvaEFBd0JDd3NnRENRR0M1UVpBaFovQlh3akJpRUlJd1pCUUdza0JpQUlRU0JxSVFvZ0NFRVlhaUVOSUFoQk5Hb2hCQ0FJUVNocUlRVWdBRUVBUnlBQlFRQkhjUVIvQW44Z0FFRXNhaUlMUVFBMkFnQUNRQUpBSUFCQjlJYXZBMm9pRHlnQ0FDSUNRUVJIRFFBQ1FDQUFRZnlHcndOcUlnd29BZ0FpQWtFQVNnUkFJQXdnQWtGL2FqWUNBQVVDUUNBRUlBQW9BaEFpQnlBQVFZQ0hyd05xSWdZb0FnQnFJZ0pCL3dFZ0FrSC9BVWdiSWhBMkFnQWdCQ0FISUFCQmhJZXZBMm9pQ1NnQ0FHc2lBa0VBSUFKQkFFb2JJaEUyQWdRZ0JDQUhOZ0lJSUFCQjRJYW5BbW9oQXlBQVFiajRBR29oRGlBQVFiRDRBR29oRWlBQVFmQ0dyd05xSVJNZ0FFR1FoNjhEYWlFVUlBQkJNR29oRlNBQVFaaUhyd05xSVJaQkFDRUNBa0FDUUFOQUlBSkJBMGtFUUNBQktBSU1JQUFvQWlRZ0FDZ0NLQ0FBS0FJQUlBQW9BZ3dnQWtFQ2RDQUVhaWdDQUNBQUtBSVVJQU5CQUJDNkFrRUFTQTBDSUFBb0FpUWdBQ2dDS0NBRElBQW9BaFFnRGlBU0VPd0RRUUJJRFFJZ0FTZ0NBQ0FBS0FJa0lBQW9BaWdnQUNnQ0JDQU9JQklvQWdBZ0V5Z0NBQ0FBS0FJVUlBQW9BaGdnQUNnQ0lFRzRBV29nRkNzREFDQVZJQXNnRmlnQ0FCRGVBMEVBU0EwQ0lBSkJBblFnQldvZ0N5Z0NBRFlDQUNBQ1FRRnFJUUlNQVFzTERBRUxRWDhNQmdzZ0FDZ0NBRUVCUmdSQUlBVW9BZ1FoRGlBRktBSUlJUU1nQlNnQ0FDRUNJQWdnRVRZQ0FDQUlJQTQyQWdRZ0NDQUhOZ0lJSUFnZ0F6WUNEQ0FJSUJBMkFoQWdDQ0FDTmdJVVFRQkJBMEdpcHdFZ0NCQTlCU0FGS0FJQUlRSWdCU2dDQ0NFREN5QUNJQU5LSUFVb0FnUWlCU0FEU25JRVFDQUFJQkVnRUNBQ0lBVklHeUlDTmdJUUlBa2dBaUFIYXlJRFFRQktCSDhnQmlBRE5nSUFRUUVGSUFaQkFUWUNBRUVBSUFOckN6WUNBQ0FBS0FJQVFRRkdCRUFnRFNBQ05nSUFRUUJCQTBIdXB3RWdEUkE5Q3lBTUlBQkIrSWF2QTJvb0FnQTJBZ0FNQVFzZ0JpZ0NBQ0lCSUFrb0FnQWlBa2dFUUNBR0lBRkJBV29pQVRZQ0FBVWdBU0FDVEFSQUlBWWdBVUVCYWlJQk5nSUFDeUFKSUFKQkFXbzJBZ0FMSUFjZ0FTQUhha0grQVVvRWZ5QUdRUUUyQWdCQkFRVWdBUXRNQkVBZ0NVRUJOZ0lBQ3lBTUlBQkIrSWF2QTJvb0FnQTJBZ0FNQWdzTElBOG9BZ0FoQWd3QkN3d0JDd0pBQWtBQ1FBSkFJQUpCQVdzT0F3RUJBQUlMSUFCQmlJZXZBMm9pQWlnQ0FDQUJLQUlNRU5nSElnTkJBRWdFUUNBRERBVUxJQUVvQWd3Z0FpZ0NBQ0lES0FJRUlBTW9BZ2dnQUNnQ0FDQUFLQUlNUVFCQkFDQUFRZUNHcHdKcUlnSWdBeWdDQUJDNkFpSURRUUJJQkVBZ0F3d0ZDeUFBUVNScUlRTWdBRUVvYWlFRUlBQkJGR29oQlF3Q0N5QUFRZnlHcndOcUlnTW9BZ0FpQlVFQVNnUkFJQU1nQlVGL2FqWUNBQXdCQ3lBQVFZaUhyd05xS0FJQUlRVWdBU2dDRENFSElBSkJBVVlFZnlBRklBY2dCQkRrQndVZ0JTQUhJQVFRNEFjTElnSkJBRWdFUUNBQ0RBUUxJQUFvQWdCQkFVWUVRQ0FFTFFBQUlnSWdBQ2dDRUVjRVFDQUtRYUtvQVVHcHFBRWdEeWdDQUVFQlJoczJBZ0FnQ2lBQ05nSUVRUUJCQTBHdXFBRWdDaEE5Q3dzZ0FDQUVMUUFBTmdJUUlBTWdBRUg0aHE4RGFpZ0NBRFlDQUF0QmZ5QUJLQUlNSUFCQkpHb2lBeWdDQUNBQVFTaHFJZ1FvQWdBZ0FDZ0NBQ0FBS0FJTUlBQW9BaEFnQUVFVWFpSUZLQUlBSUFCQjRJYW5BbW9pQWtFQUVMb0NRUUJJRFFJYUMwRi9JQU1vQWdBZ0JDZ0NBQ0FDSUFVb0FnQWdBRUc0K0FCcUlnSWdBRUd3K0FCcUlnY1E3QU5CQUVnTkFScEJmeUFCS0FJQUlBTW9BZ0FnQkNnQ0FDQUFLQUlFSUFJZ0J5Z0NBQ0FBUWZDR3J3TnFLQUlBSUFVb0FnQWdBQ2dDR0NBQUtBSWdRYmdCYWlBQVFaQ0hyd05xS3dNQUlBQkJNR29nQ3lBQVFaaUhyd05xS0FJQUVONERRUUJJRFFFYUN5QUFLQUljUVFGR0JFQWdBQkR2QTBFQURBRUxJQUJCK0lxbUFtb2lCeWdDQUNFSlFRQWhBd05BSUFNZ0NVZ0VRQ0FMS0FJQUlRUWdBRUdBaTZZQ2FpQURRWWdDYkdvaEJTQUFJQU5CaUFKc2FrRzRpNllDYWlFR0lBQWdBMEdJQW14cVFjQ0xwZ0pxSVFwQkFDRUNRWDhoQVVRQUFBQUFBQURnUHlFWkEwQWdBaUFFU0FSQUlBVW9BZ0MzSUFCQk1Hb2dBa0VJZEdvb0FnQzNJaGlqSWhwRVptWm1abVptNWo5aklCcEU0WG9VcmtmaDlqOWtja1VFUUNBQUlBSkJDSFJxS3dOb0lBWXJBd0NoSWhvZ0dxSWdBQ0FDUVFoMGFpc0RjQ0FLS3dNQW9TSWFJQnFpb0NBWW95SVlJQmxqQkVBZ0dDRVpJQUloQVFzTElBSkJBV29oQWd3QkN3c2dBVUYvU2dSQUFrQUNRQUpBQWtBZ0FDZ0NHQ0lLRGdVQ0FnSUFBQUVMSUFBZ0FVRUlkR29pQkNzRFdDQUFJQU5CaUFKc2FrR29pNllDYWlzREFDSVlZd1JBSUFBZ0FVRUlkR3BCNEFCcUlRSWdBQ0FEUVlnQ2JHcEJzSXVtQW1vckF3QWhHUVVnQUNBQlFRaDBha0hnQUdvaUFpc0RBQ0FBSUFOQmlBSnNha0d3aTZZQ2Fpc0RBQ0laWTBVTkF3c2dCQ0FZT1FOWUlBQWdBVUVJZEdvZ0FDQURRWWdDYkdwQmlJdW1BbW9vQWdBMkFqZ2dBaUFaT1FNQUlBQWdBVUVJZEdvZ0FDQURRWWdDYkdwQmpJdW1BbW9vQWdBMkFqeEJBQ0VGUVg4aEFrUUFBQUFBaE5lWFFTRVlBMEFnQlVFRVJ3UkFRUUFoQkVRQUFBQUFBQUFBQUNFWkEwQWdCRUVFUndSQUlBQWdBMEdJQW14cVFhaU1wZ0pxSUFSQkJIUnFLd01BSUFBZ0FVRUlkR3BCMkFGcUlBUWdCV3BCQTNFaUJrRUVkR29yQXdDaElSb2dBQ0FEUVlnQ2JHb2dCRUVFZEdwQnNJeW1BbW9yQXdBZ0FDQUJRUWgwYWlBR1FRUjBhaXNENEFHaElSc2dCRUVCYWlFRUlCa2dHaUFhb2lBYklCdWlvS0FoR1F3QkN3c2dCU0FDSUJrZ0dHTWlCQnNoQWlBRlFRRnFJUVVnR1NBWUlBUWJJUmdNQVFzTElBQWdBVUVJZEdwQkJDQUNheUlDSUFBZ0EwR0lBbXhxUVpTTHBnSnFLQUlBYWtFRUVFODJBa1FnQUNBQlFRaDBhaUFDSUFBZ0EwR0lBbXhxUVppTHBnSnFLQUlBYWtFRUVFODJBa2dNQWd0QmZ3d0ZDeUFBSUFGQkNIUnFJZ0lyQTFBZ0FDQURRWWdDYkdwQm9JdW1BbW9yQXdBaUdtTUVRQ0FDSUJvNUExQWdBQ0FCUVFoMGFpQUFJQU5CaUFKc2FrR0VpNllDYWlnQ0FDSUdOZ0kwSUFBZ0EwR0lBbXhxUVpDTHBnSnFJUXhCZnlFQ1JBQUFBQUNFMTVkQklSbEJBQ0VGQTBBZ0JVRUVSd1JBUVFBaEJFUUFBQUFBQUFBQUFDRVlBMEFnQkVFRVJ3UkFJQUFnQTBHSUFteHFRYWlNcGdKcUlBUkJCSFJxS3dNQUlBQWdBVUVJZEdwQjJBRnFJQVFnQldwQkEzRWlEVUVFZEdvckF3Q2hJUnNnQUNBRFFZZ0NiR29nQkVFRWRHcEJzSXltQW1vckF3QWdBQ0FCUVFoMGFpQU5RUVIwYWlzRDRBR2hJUndnQkVFQmFpRUVJQmdnR3lBYm9pQWNJQnlpb0tBaEdBd0JDd3NnR0NBWll3UkFJQmdoR1NBTUtBSUFRUVFnQld0cVFRUVFUeUVDQ3lBRlFRRnFJUVVNQVFzTElBQWdBVUVJZEdwQlFHc2dBallDQUNBS1FRSkpCRUFnQUNBQlFRaDBhaUFHTmdJNElBQWdBVUVJZEdvZ0dqa0RXQ0FBSUFGQkNIUnFJQUkyQWtRRklBQWdBVUVJZEdvZ0JqWUNQQ0FBSUFGQkNIUnFJQm81QTJBZ0FDQUJRUWgwYWlBQ05nSklDd3NMQ3lBRFFRRnFJUU1NQVFzTElBQVE3d05CQUNFQ1FRQWhBUU5BSUFJZ0J5Z0NBRWdFUUNBQUlBSkJpQUpzYWtHQWphWUNhaUlFS0FJQUlRTWdCQ0FEUVFGcU5nSUFJQU5CQTBnRVFDQUJJQUpIQkVBZ0FFR0FpNllDYWlBQlFZZ0NiR29nQUVHQWk2WUNhaUFDUVlnQ2JHcEJpQUlRVEJvTElBRkJBV29oQVFzZ0FrRUJhaUVDREFFTEN5QUhJQUUyQWdBZ0N5Z0NBQ0VEUVFBaEJBTkFBa0FnQkNBRFRnMEFJQUJCTUdvZ0JFRUlkR29oQlNBQUlBUkJDSFJxS0FJMElnWkJBRTRFUUVFQUlRSURRQUpBSUFJZ0FVNE5BQ0FHSUFBZ0FrR0lBbXhxUVlTTHBnSnFLQUlBUmcwQUlBSkJBV29oQWd3QkN3c2dBU0FDUmdSQUlBRkJQRVlOQWlBSElBRkJBV29pQVRZQ0FBc2dBRUdBaTZZQ2FpQUNRWWdDYkdvZ0JVR0FBaEJNR2lBQUlBSkJpQUpzYWtHQWphWUNha0VCTmdJQUN5QUVRUUZxSVFRTUFRc0xJQUFvQWh4QkFrWUVmMEVBQlVFQUlRUWdBU0VDSUFNaEFRTkFRUUFnQkNBQ1RnMENHaUFBUVlDTHBnSnFJQVJCaUFKc2FpRUZJQUFnQkVHSUFteHFRYmlMcGdKcUlRWWdBQ0FFUVlnQ2JHcEJ3SXVtQW1vaENVRUFJUU1EUUFKQUlBTWdBVTROQUNBRktBSUF0eUFBUVRCcUlBTkJDSFJxS0FJQXR5SVpveUlZUkdabVptWm1adVkvWXlBWVJPRjZGSzVINGZZL1pISkZCRUFnQUNBRFFRaDBhaXNEYUNBR0t3TUFvU0lZSUJpaUlBQWdBMEVJZEdvckEzQWdDU3NEQUtFaUdDQVlvcUFnR2FORUFBQUFBQUFBNEQ5akRRRUxJQU5CQVdvaEF3d0JDd3NnQVNBRFJnUkFJQUJCTUdvZ0FVRUlkR29nQUVHQWk2WUNhaUFFUVlnQ2JHcEJnQUlRVEJvZ0N5QUJRUUZxSWdFMkFnQWdCeWdDQUNFQ0N5QUVRUUZxSVFRTUFBQUxBQXNMQlVGL0N5RVhJQWdrQmlBWEN3c0FJQUFReGdJZ0FCQTRDd3NBSUFBUXh3SWdBQkE0Qzd3QkFRTi9Jd1loQWlNR1FSQnFKQVlnQUNnQ0JDQUFLQUlBSWdOclFRVjFJQUZMQkVBZ0F5Z0NCQ0FBS0FJQUlBRkJCWFJxS0FJRUVFaXpFUEVERVBBREVFTWhCQ0FDSkFZZ0JBOEZJQUpCd01nRFFaWGZBUkEzUWM3TEFSQTNRZStpQWhBM1FkNEFFRDVCOXFJQ0VEZEJ3OThCRURjaUFDQUFLQUlBUVhScUtBSUFhaEE3SUFKQmdNNERFRG9pQVNnQ0FDZ0NIQ0VESUFGQkNpQURRVDl4UVlvQmFoRUNBQ0VCSUFJUVBDQUFJQUVRUUNBQUVEOFFBQXRCQUF0SkFRRi9JQUFvQWdnaEFnTkFJQUpDQURjQ0FDQUNRZ0EzQWdnZ0FrSUFOd0lRSUFKQ0FEY0NHQ0FDUVFBMkFpQWdBQ0FBS0FJSVFTUnFJZ0kyQWdnZ0FVRi9haUlCRFFBTEMwa0JBWDhnQUNnQ0JDRUNBMEFnQWtJQU53SUFJQUpDQURjQ0NDQUNRZ0EzQWhBZ0FrSUFOd0lZSUFKQkFEWUNJQ0FBSUFBb0FnUkJKR29pQWpZQ0JDQUJRWDlxSWdFTkFBc0xwZ0VCQlg4akJpRUNJd1pCSUdva0JpQUFLQUlJSUFBb0FnUWlBMnRCSkJBNUlBRkpCRUJCeCtQeE9DQURJQUFvQWdCclFTUVFPU0FCYWlJRFNRUkFFQUFGSUFJZ0F5QUFLQUlJSUFBb0FnQWlCR3RCSkJBNUlnVkJBWFFpQmlBR0lBTkpHMEhINC9FNElBVkI0L0c0SEVrYklBQW9BZ1FnQkd0QkpCQTVJQUJCQ0dvUTBBSWdBaUFCRU5zSUlBQWdBaERQQWlBQ0VNNENDd1VnQUNBQkVOd0lDeUFDSkFZTG9Bd0NCbjhGZlNNR0lRY2pCa0VRYWlRR0lBU09FRU1pQ2lBRUVFTkhCRUFnQjBIQXlBTkI2dEVCRURkQm50SUJFRGRCNzZJQ0VEZEJ4UUFRUGtIMm9nSVFOMEdUMHdFUU55SUlJQWdvQWdCQmRHb29BZ0JxRURzZ0IwR0F6Z01RT2lJSktBSUFLQUljSVFZZ0NVRUtJQVpCUDNGQmlnRnFFUUlBSVFZZ0J4QThJQWdnQmhCQUlBZ1FQeEFBQ3lBRmpoQkRJZ3NnQlJCRFJ3UkFJQWRCd01nRFFiSFRBUkEzUVo3U0FSQTNRZStpQWhBM1FjWUFFRDVCOXFJQ0VEZEJrOU1CRURjaUNDQUlLQUlBUVhScUtBSUFhaEE3SUFkQmdNNERFRG9pQ1NnQ0FDZ0NIQ0VHSUFsQkNpQUdRVDl4UVlvQmFoRUNBQ0VHSUFjUVBDQUlJQVlRUUNBSUVEOFFBQXNnQ3lBQ1NTQUxRWDlLY1VVRVFDQUhRY0RJQTBIbDB3RVFOMEdlMGdFUU4wSHZvZ0lRTjBIUEFCQStRZmFpQWhBM1FaUFVBUkEzSWdnZ0NDZ0NBRUYwYWlnQ0FHb1FPeUFIUVlET0F4QTZJZ2tvQWdBb0Fod2hCaUFKUVFvZ0JrRS9jVUdLQVdvUkFnQWhCaUFIRUR3Z0NDQUdFRUFnQ0JBL0VBQUxJQXRCQVdvaUNTQUNUd1JBSUFkQndNZ0RRYVRVQVJBM1FaN1NBUkEzUWUraUFoQTNRZEFBRUQ1QjlxSUNFRGRCNE5RQkVEY2lDQ0FJS0FJQVFYUnFLQUlBYWhBN0lBZEJnTTRERURvaUJpZ0NBQ2dDSENFQ0lBWkJDaUFDUVQ5eFFZb0JhaEVDQUNFQ0lBY1FQQ0FJSUFJUVFDQUlFRDhRQUFzZ0NpQUJTU0FLUVg5S2NVVUVRQ0FIUWNESUEwSDQxQUVRTjBHZTBnRVFOMEh2b2dJUU4wSFJBQkErUWZhaUFoQTNRYVhWQVJBM0lnZ2dDQ2dDQUVGMGFpZ0NBR29RT3lBSFFZRE9BeEE2SWdZb0FnQW9BaHdoQWlBR1FRb2dBa0UvY1VHS0FXb1JBZ0FoQWlBSEVEd2dDQ0FDRUVBZ0NCQS9FQUFMSUFwQkFXb2lDQ0FCVHdSQUlBZEJ3TWdEUWJiVkFSQTNRWjdTQVJBM1FlK2lBaEEzUWRJQUVENUI5cUlDRURkQjhkVUJFRGNpQmlBR0tBSUFRWFJxS0FJQWFoQTdJQWRCZ000REVEb2lBaWdDQUNnQ0hDRUJJQUpCQ2lBQlFUOXhRWW9CYWhFQ0FDRUJJQWNRUENBR0lBRVFRQ0FHRUQ4UUFBc2dDTElnQkpNaURpQUpzaUFGa3lJTWxDSU5Rd0FBQUFCZ1JTQU51MFJ4ckl2YmFBRHdQMlZGY2dSQUlBZEJ3TWdEUVluV0FSQTNRWjdTQVJBM1FlK2lBaEEzUWQ0QUVENUI5cUlDRURkQnVOWUJFRGNpQmlBR0tBSUFRWFJxS0FJQWFoQTdJQWRCZ000REVEb2lBaWdDQUNnQ0hDRUJJQUpCQ2lBQlFUOXhRWW9CYWhFQ0FDRUJJQWNRUENBR0lBRVFRQ0FHRUQ4UUFBc2dCQ0FLc3BNaUR5QU1sQ0lNUXdBQUFBQmdSU0FNdTBSeHJJdmJhQUR3UDJWRmNnUkFJQWRCd01nRFFjWFdBUkEzUVo3U0FSQTNRZStpQWhBM1FkOEFFRDVCOXFJQ0VEZEJ1TllCRURjaUJpQUdLQUlBUVhScUtBSUFhaEE3SUFkQmdNNERFRG9pQWlnQ0FDZ0NIQ0VCSUFKQkNpQUJRVDl4UVlvQmFoRUNBQ0VCSUFjUVBDQUdJQUVRUUNBR0VEOFFBQXNnRGlBRklBdXlreUlFbENJRlF3QUFBQUJnUlNBRnUwUnhySXZiYUFEd1AyVkZjZ1JBSUFkQndNZ0RRZlRXQVJBM1FaN1NBUkEzUWUraUFoQTNRZUFBRUQ1QjlxSUNFRGRCdU5ZQkVEY2lCaUFHS0FJQVFYUnFLQUlBYWhBN0lBZEJnTTRERURvaUFpZ0NBQ2dDSENFQklBSkJDaUFCUVQ5eFFZb0JhaEVDQUNFQklBY1FQQ0FHSUFFUVFDQUdFRDhRQUFzZ0R5QUVsQ0lFUXdBQUFBQmdSU0FFdTBSeHJJdmJhQUR3UDJWRmNnUkFJQWRCd01nRFFhUFhBUkEzUVo3U0FSQTNRZStpQWhBM1FlRUFFRDVCOXFJQ0VEZEJ1TllCRURjaUJpQUdLQUlBUVhScUtBSUFhaEE3SUFkQmdNNERFRG9pQWlnQ0FDZ0NIQ0VCSUFKQkNpQUJRVDl4UVlvQmFoRUNBQ0VCSUFjUVBDQUdJQUVRUUNBR0VEOFFBQXNnQXlBQUlBTWdDMnhxSWdGcUlRQWdCQ0FGSUEwZ0RKS1NrcnRFY2F5TDIyZ0E4RDlsQkVBZ0RTQUtRUUowSUFGcUtnSUFsQ0FNSUFoQkFuUWdBV29xQWdDVWtpQUZJQXBCQW5RZ0FHb3FBZ0NVa2lBRUlBaEJBblFnQUdvcUFnQ1VraUVRSUFja0JpQVFEd1VnQjBIQXlBTkIwdGNCRURkQm50SUJFRGRCNzZJQ0VEZEI0Z0FRUGtIMm9nSVFOMEc0MWdFUU55SUNJQUlvQWdCQmRHb29BZ0JxRURzZ0IwR0F6Z01RT2lJQktBSUFLQUljSVFBZ0FVRUtJQUJCUDNGQmlnRnFFUUlBSVFBZ0J4QThJQUlnQUJCQUlBSVFQeEFBQzBNQUFBQUFDNzhKQWcxL0JYMGpCaUVLSXdaQklHb2tCaUFLUVJ4cUlRY2dDa0VZYWlFTElBcEJGR29oRENBS1FSQnFJUThnQ2tFTWFpRVFJQXBCQ0dvaEVTQUtRUVJxSVJJZ0JVRUFTZ1JBSUFWQkFXb2dBeWdDQkVrRVFDQUdRWDlxSVE0Z0JrRUFTZ1JBSUFaQkFXb2lFeUFES0FJSVNRUkFJQU1vQWdRZ0FpZ0NCRUVCZGtjRVFDQUhRY0RJQTBIa3p3RVFOMEhPeXdFUU4wSHZvZ0lRTjBIcEFoQStRZmFpQWhBM1FaM1FBUkEzSWdnZ0NDZ0NBRUYwYWlnQ0FHb1FPeUFIUVlET0F4QTZJZ2tvQWdBb0Fod2hEU0FKUVFvZ0RVRS9jVUdLQVdvUkFnQWhDU0FIRUR3Z0NDQUpFRUFnQ0JBL0VBQUxJQVFvQWdRZ0FpZ0NCRUVCZGtjRVFDQUhRY0RJQTBHNzBBRVFOMEhPeXdFUU4wSHZvZ0lRTjBIcUFoQStRZmFpQWhBM1FaM1FBUkEzSWdnZ0NDZ0NBRUYwYWlnQ0FHb1FPeUFIUVlET0F4QTZJZ2tvQWdBb0Fod2hEU0FKUVFvZ0RVRS9jVUdLQVdvUkFnQWhDU0FIRUR3Z0NDQUpFRUFnQ0JBL0VBQUxJQU1vQWdnZ0FpZ0NDRUVCZGtjRVFDQUhRY0RJQTBIMDBBRVFOMEhPeXdFUU4wSHZvZ0lRTjBIckFoQStRZmFpQWhBM1FaM1FBUkEzSWdnZ0NDZ0NBRUYwYWlnQ0FHb1FPeUFIUVlET0F4QTZJZ2tvQWdBb0Fod2hEU0FKUVFvZ0RVRS9jVUdLQVdvUkFnQWhDU0FIRUR3Z0NDQUpFRUFnQ0JBL0VBQUxJQVFvQWdnZ0FpZ0NDRUVCZGtZRVFDQURJQVlRVUNBRlFRSjBhaUVJSUFRZ0RoQlFJQVZCQW5ScUlRNGdCQ0FHRUZBZ0JVRUNkR29oQnlBRUlCTVFVQ0FGUVFKMGFpRUVJQXNnRENBRnNpQUdza0VCRU9FQklBOGdFQ0FSSUJJZ0NpQURJQVVnQmhESkFpQUNJQXNxQWdBZ0RDb0NBQkJOSVJRZ0J5b0NBQ0lYSUJRZ0NDb0NBRU1BQUFCQWxKT1NJUmdnQWlBTEtnSUFRd0FBQU1DU0lBd3FBZ0FRVFNBSEtnSUVraUFDSUFzcUFnQkRBQUFBUUpJZ0RDb0NBQkJOSUFkQmZHb3FBZ0NTazBNQUFJQStsQ0VWSUFJZ0N5b0NBQ0FNS2dJQVF3QUFBTUNTRUUwZ0JDb0NBSklnQWlBTEtnSUFJQXdxQWdCREFBQUFRSklRVFNBT0tnSUFrcE5EQUFDQVBwUWhGaUFBSUJFb0FnQTJBZ0FnQUNBS0tBSUFJZ0kyQWdRZ0FDQVZPQUlJSUFBZ0FqWUNEQ0FBSUJJb0FnQTJBaEFnQUNBV09BSVVJQUFnRlRnQ0dDQUFJQlk0QWh3Z0FDQVlPQUlnSUFFZ0R5b0NBSXc0QWdBZ0FTQVFLZ0lBakRnQ0JDQUJJQmNnRkpOREFBQUFQNVNNT0FJSUlBb2tCZzhGSUFkQndNZ0RRYS9SQVJBM1FjN0xBUkEzUWUraUFoQTNRZXdDRUQ1QjlxSUNFRGRCbmRBQkVEY2lBQ0FBS0FJQVFYUnFLQUlBYWhBN0lBZEJnTTRERURvaUFTZ0NBQ2dDSENFQ0lBRkJDaUFDUVQ5eFFZb0JhaEVDQUNFQklBY1FQQ0FBSUFFUVFDQUFFRDhRQUFzTEN5QUhRY0RJQTBHWnp3RVFOMEhPeXdFUU4wSHZvZ0lRTjBIb0FoQStRZmFpQWhBM1FkVFBBUkEzSWdBZ0FDZ0NBRUYwYWlnQ0FHb1FPeUFIUVlET0F4QTZJZ0VvQWdBb0Fod2hBaUFCUVFvZ0FrRS9jVUdLQVdvUkFnQWhBU0FIRUR3Z0FDQUJFRUFnQUJBL0VBQUxDeUFIUWNESUEwSFB6Z0VRTjBIT3l3RVFOMEh2b2dJUU4wSG5BaEErUWZhaUFoQTNRWW5QQVJBM0lnQWdBQ2dDQUVGMGFpZ0NBR29RT3lBSFFZRE9BeEE2SWdFb0FnQW9BaHdoQWlBQlFRb2dBa0UvY1VHS0FXb1JBZ0FoQVNBSEVEd2dBQ0FCRUVBZ0FCQS9FQUFMencwQ0RuOEZmU01HSVFzakJrRWdhaVFHSUF0QkhHb2hCeUFMUVJocUlRMGdDMEVVYWlFTUlBdEJFR29oRVNBTFFReHFJUklnQzBFSWFpRVRJQXRCQkdvaEZDQUZRUUJLQkVBZ0JVRUJhaUFES0FJRVNRUkFJQVpCZjJvaERpQUdRUUJLQkVBZ0JrRUJhaUlQSUFNb0FnaEpCRUFnQWlnQ0JDQURLQUlFUndSQUlBZEJ3TWdEUWZMWUFSQTNRYzdMQVJBM1FlK2lBaEEzUVo4REVENUI5cUlDRURkQm5kQUJFRGNpQ0NBSUtBSUFRWFJxS0FJQWFoQTdJQWRCZ000REVEb2lDaWdDQUNnQ0hDRUpJQXBCQ2lBSlFUOXhRWW9CYWhFQ0FDRUtJQWNRUENBSUlBb1FRQ0FJRUQ4UUFBc2dCQ2dDQkNBQ0tBSUVRUUYyUndSQUlBZEJ3TWdEUWJ2UUFSQTNRYzdMQVJBM1FlK2lBaEEzUWFBREVENUI5cUlDRURkQm5kQUJFRGNpQ0NBSUtBSUFRWFJxS0FJQWFoQTdJQWRCZ000REVEb2lDaWdDQUNnQ0hDRUpJQXBCQ2lBSlFUOXhRWW9CYWhFQ0FDRUtJQWNRUENBSUlBb1FRQ0FJRUQ4UUFBc2dBaWdDQ0NBREtBSUlSd1JBSUFkQndNZ0RRYWJaQVJBM1FjN0xBUkEzUWUraUFoQTNRYUVERUQ1QjlxSUNFRGRCbmRBQkVEY2lDQ2dDQUVGMGFpZ0NBQ0FJYWhBN0lBZEJnTTRERURvaUNpZ0NBQ2dDSENFSklBcEJDaUFKUVQ5eFFZb0JhaEVDQUNFS0lBY1FQQ0FJSUFvUVFDQUlFRDhRQUFzZ0JDZ0NDQ0FDS0FJSVFRRjJSd1JBSUFkQndNZ0RRYS9SQVJBM1FjN0xBUkEzUWUraUFoQTNRYUlERUQ1QjlxSUNFRGRCbmRBQkVEY2lDQ0FJS0FJQVFYUnFLQUlBYWhBN0lBZEJnTTRERURvaUNpZ0NBQ2dDSENFSklBcEJDaUFKUVQ5eFFZb0JhaEVDQUNFS0lBY1FQQ0FJSUFvUVFDQUlFRDhRQUFzZ0FpQU9FRkFoQ0NBQ0lBWVFVQ0VPSUFJZ0R4QlFJUThnQXlBR0VGQWhDaUFOSUF3Z0JiSWdCckpCQVJETEFpQU5LZ0lBSWhWREFBQUF2NUpEQUFBQUFHQkZCRUFnQjBIQXlBTkIzTmtCRURkQnpzc0JFRGRCNzZJQ0VEZEJyQU1RUGtIMm9nSVFOMEdGMmdFUU55SUNJQUlvQWdCQmRHb29BZ0JxRURzZ0IwR0F6Z01RT2lJSktBSUFLQUljSVJBZ0NVRUtJQkJCUDNGQmlnRnFFUUlBSVFrZ0J4QThJQUlnQ1JCQUlBSVFQeEFBQ3lBTUtnSUFRd0FBQUwrU1F3QUFBQUJnUlFSQUlBZEJ3TWdEUWJ2YUFSQTNRYzdMQVJBM1FlK2lBaEEzUWEwREVENUI5cUlDRURkQjVOb0JFRGNpQWlBQ0tBSUFRWFJxS0FJQWFoQTdJQWRCZ000REVEb2lDU2dDQUNnQ0hDRVFJQWxCQ2lBUVFUOXhRWW9CYWhFQ0FDRUpJQWNRUENBQ0lBa1FRQ0FDRUQ4UUFBc2dGVU1BQUFBL2tpQUVLQUlFczExRkJFQWdCMEhBeUFOQm10c0JFRGRCenNzQkVEZEI3NklDRURkQnJnTVFQa0gyb2dJUU4wR0YyZ0VRTnlJQ0lBSW9BZ0JCZEdvb0FnQnFFRHNnQjBHQXpnTVFPaUlKS0FJQUtBSWNJUkFnQ1VFS0lCQkJQM0ZCaWdGcUVRSUFJUWtnQnhBOElBSWdDUkJBSUFJUVB4QUFDeUFGUVFKMElBaHFJUWdnQlVFQ2RDQU9haUVDSUFWQkFuUWdEMm9oRGlBRlFRSjBJQXBxSVE4Z0RDb0NBRU1BQUFBL2tpQUVLQUlJczEwRVFDQVJJQklnRXlBVUlBc2dBeUFGSUFZUXlRSWdCQ0FOS2dJQUlBd3FBZ0FRVFNJWElBSXFBZ0FpR0NBUEtnSUFRd0FBQUVDVWs1SWhHU0FDUVh4cUtnSUFJQVFnRFNvQ0FFTUFBQUEva2lBTUtnSUFFRTJTSUFJcUFnUWdCQ0FOS2dJQVF3QUFBTCtTSUF3cUFnQVFUWktUUXdBQWdENlVJUlVnQ0NvQ0FDQUVJQTBxQWdBZ0RDb0NBRU1BQUFBL2toQk5raUFPS2dJQUlBUWdEU29DQUNBTUtnSUFRd0FBQUwrU0VFMlNrME1BQUlBK2xDRVdJQUFnRXlnQ0FEWUNBQ0FBSUFzb0FnQWlBallDQkNBQUlCVTRBZ2dnQUNBQ05nSU1JQUFnRkNnQ0FEWUNFQ0FBSUJZNEFoUWdBQ0FWT0FJWUlBQWdGamdDSENBQUlCazRBaUFnQVNBUktnSUFqRGdDQUNBQklCSXFBZ0NNT0FJRUlBRWdGeUFZazBNQUFBQS9sSXc0QWdnZ0N5UUdEd1VnQjBIQXlBTkJ6ZHNCRURkQnpzc0JFRGRCNzZJQ0VEZEJyd01RUGtIMm9nSVFOMEhrMmdFUU55SUFJQUFvQWdCQmRHb29BZ0JxRURzZ0IwR0F6Z01RT2lJQktBSUFLQUljSVFJZ0FVRUtJQUpCUDNGQmlnRnFFUUlBSVFFZ0J4QThJQUFnQVJCQUlBQVFQeEFBQ3dzTElBZEJ3TWdEUVpuUEFSQTNRYzdMQVJBM1FlK2lBaEEzUVo0REVENUI5cUlDRURkQjFNOEJFRGNpQUNBQUtBSUFRWFJxS0FJQWFoQTdJQWRCZ000REVEb2lBU2dDQUNnQ0hDRUNJQUZCQ2lBQ1FUOXhRWW9CYWhFQ0FDRUJJQWNRUENBQUlBRVFRQ0FBRUQ4UUFBc0xJQWRCd01nRFFjL09BUkEzUWM3TEFSQTNRZStpQWhBM1FaMERFRDVCOXFJQ0VEZEJpYzhCRURjaUFDQUFLQUlBUVhScUtBSUFhaEE3SUFkQmdNNERFRG9pQVNnQ0FDZ0NIQ0VDSUFGQkNpQUNRVDl4UVlvQmFoRUNBQ0VCSUFjUVBDQUFJQUVRUUNBQUVEOFFBQXY4Q0FJTWZ3VjlJd1loQ2lNR1FTQnFKQVlnQ2tFVWFpRUhJQXBCRUdvaERTQUtRUXhxSVE0Z0NrRUlhaUVQSUFwQkJHb2hFQ0FGUVFCS0JFQWdCVUVCYWlBREtBSUVTUVJBSUFaQmYyb2hEQ0FHUVFCS0JFQWdCa0VCYWlJUklBTW9BZ2hKQkVBZ0FpZ0NCQ0FES0FJRVJ3UkFJQWRCd01nRFFmTFlBUkEzUWM3TEFSQTNRZStpQWhBM1FiY0NFRDVCOXFJQ0VEZEJuZEFCRURjaUNDQUlLQUlBUVhScUtBSUFhaEE3SUFkQmdNNERFRG9pQ1NnQ0FDZ0NIQ0VMSUFsQkNpQUxRVDl4UVlvQmFoRUNBQ0VKSUFjUVBDQUlJQWtRUUNBSUVEOFFBQXNnQWlnQ0JDQUVLQUlFUndSQUlBZEJ3TWdEUVlIY0FSQTNRYzdMQVJBM1FlK2lBaEEzUWJnQ0VENUI5cUlDRURkQm5kQUJFRGNpQ0NBSUtBSUFRWFJxS0FJQWFoQTdJQWRCZ000REVEb2lDU2dDQUNnQ0hDRUxJQWxCQ2lBTFFUOXhRWW9CYWhFQ0FDRUpJQWNRUENBSUlBa1FRQ0FJRUQ4UUFBc2dBaWdDQ0NBREtBSUlSd1JBSUFkQndNZ0RRYWJaQVJBM1FjN0xBUkEzUWUraUFoQTNRYmtDRUQ1QjlxSUNFRGRCbmRBQkVEY2lDQ0FJS0FJQVFYUnFLQUlBYWhBN0lBZEJnTTRERURvaUNTZ0NBQ2dDSENFTElBbEJDaUFMUVQ5eFFZb0JhaEVDQUNFSklBY1FQQ0FJSUFrUVFDQUlFRDhRQUFzZ0FpZ0NDQ0FFS0FJSVJnUkFJQUlnREJCUUlBVkJBblJxSVJJZ0FpQUdFRkFnQlVFQ2RHb2hCeUFDSUJFUVVDQUZRUUowYWlFSklBTWdCaEJRSUFWQkFuUnFJUXNnQkNBTUVGQWdCVUVDZEdvaERDQUVJQVlRVUNBRlFRSjBhaUVDSUFRZ0VSQlFJQVZCQW5ScUlRUWdEU0FPSUE4Z0VDQUtJQU1nQlNBR0VNa0NJQUlxQWdBaUZTQUhLZ0lBSWhZZ0N5b0NBRU1BQUFCQWxKT1NJUmNnQjBGOGFpb0NBQ0FIS2dJRWt5QUNLZ0lFSUFKQmZHb3FBZ0NUa2tNQUFJQStsQ0VUSUJJcUFnQWdDU29DQUpNZ0JDb0NBQ0FNS2dJQWs1SkRBQUNBUHBRaEZDQUFJQThvQWdBMkFnQWdBQ0FLS0FJQUlnSTJBZ1FnQUNBVE9BSUlJQUFnQWpZQ0RDQUFJQkFvQWdBMkFoQWdBQ0FVT0FJVUlBQWdFemdDR0NBQUlCUTRBaHdnQUNBWE9BSWdJQUVnRFNvQ0FJdzRBZ0FnQVNBT0tnSUFqRGdDQkNBQklCVWdGcE5EQUFBQVA1U01PQUlJSUFva0JnOEZJQWRCd01nRFFiWGNBUkEzUWM3TEFSQTNRZStpQWhBM1Fib0NFRDVCOXFJQ0VEZEJuZEFCRURjaUFDQUFLQUlBUVhScUtBSUFhaEE3SUFkQmdNNERFRG9pQVNnQ0FDZ0NIQ0VDSUFGQkNpQUNRVDl4UVlvQmFoRUNBQ0VCSUFjUVBDQUFJQUVRUUNBQUVEOFFBQXNMQ3lBSFFjRElBMEdaendFUU4wSE95d0VRTjBIdm9nSVFOMEcyQWhBK1FmYWlBaEEzUWRUUEFSQTNJZ0FnQUNnQ0FFRjBhaWdDQUdvUU95QUhRWURPQXhBNklnRW9BZ0FvQWh3aEFpQUJRUW9nQWtFL2NVR0tBV29SQWdBaEFTQUhFRHdnQUNBQkVFQWdBQkEvRUFBTEN5QUhRY0RJQTBIUHpnRVFOMEhPeXdFUU4wSHZvZ0lRTjBHMUFoQStRZmFpQWhBM1FZblBBUkEzSWdBZ0FDZ0NBRUYwYWlnQ0FHb1FPeUFIUVlET0F4QTZJZ0VvQWdBb0Fod2hBaUFCUVFvZ0FrRS9jVUdLQVdvUkFnQWhBU0FIRUR3Z0FDQUJFRUFnQUJBL0VBQUxXZ0VDZlNBQUtnSWdJQUFxQWdRUWFaUWhBU0FBS2dJRVF3QUFBRUNVSUFBcUFnZ2lBcFFnQUNvQ0ZKUWdBWk1nQUNvQ0VDQUNFR21Va3lBQUtnSUFJQUFxQWhRUWFaU1RJQUFxQWdBZ0FDb0NFSlFnQUNvQ0lKU1NDOHdCQVFKL0l3WWhBaU1HUVJCcUpBWWdBQVIvSUFFZ0FDZ0NCRVlFZjBFQUJRSi9JQUZCRDA4RVFDQUNJQUUyQWdCQkFFRURRZkdtQVNBQ0VEMUJmd3dCQ3lBQUlBRTJBZ1FnQUNBQkVKVUdOZ0lJSUFBb0FoZ2hBMEdnNEFFZ0FVSC8vd0Z4ZGtFQmNRUkFBa0FDUUFKQUlBTU9CQUFDQWdFQ0N5QUFRUUUyQWhoQkFBd0RDeUFBUVFRMkFoaEJBQXdDQ3dVQ1FBSkFBa0FnQTBFQmF3NEVBQUlDQVFJTElBQkJCRFlDR0VFQURBTUxJQUJCQXpZQ0dFRUFEQUlMQzBFQUN3c0ZRWDhMR2lBQ0pBWUxlZ0FnQUNBQktnSUFJQUlxQWdDVUlBRXFBZ1FnQWlvQ0JKU1NJQUVxQWdnZ0Fpb0NDSlNTT0FJQUlBQWdBU29DRENBQ0tnSUFsQ0FCS2dJUUlBSXFBZ1NVa2lBQktnSVVJQUlxQWdpVWtqZ0NCQ0FBSUFFcUFoZ2dBaW9DQUpRZ0FTb0NIQ0FDS2dJRWxKSWdBU29DSUNBQ0tnSUlsSkk0QWdnTDZ3RUJBWDBnQVJEaUNDSUNpME1BQUFBMFh3Ui9RUUFGSUFCREFBQ0FQeUFDbFNJQ0lBRXFBaEFnQVNvQ0ZDQUJLZ0lnRU1vQ2xEZ0NBQ0FBSUFJZ0FTb0NDQ0FCS2dJRUlBRXFBaUFnQVNvQ0hCQ0FBWlE0QWdRZ0FDQUNJQUVxQWdRZ0FTb0NDQ0FCS2dJUUlBRXFBaFFRZ0FHVU9BSUlJQUFnQWlBQktnSUFJQUVxQWdnZ0FTb0NJQkRLQXBRNEFoQWdBQ0FDSUFFcUFnZ2dBU29DQUNBQktnSVVJQUVxQWd3UWdBR1VPQUlVSUFBZ0FpQUJLZ0lBSUFFcUFnUWdBU29DRUJES0FwUTRBaUFnQUNBQUtBSUVOZ0lNSUFBZ0FDZ0NDRFlDR0NBQUlBQW9BaFEyQWh4QkFRc0xQQUVCZlNBQktnSUFJQUVxQWhDVUlBRXFBZ1FRYVpNaUFrTUFBQUFBV3dSL1FRQUZJQUFnQVNvQ0FDQUJLZ0lRa2hCcElBS1ZPQUlBUVFFTEN5OEJBbjhqQmlFREl3WkJNR29rQmlBRElBRVE1UWdFZnlBQUlBTWdBaERrQ0VFQkJVRUFDeUVFSUFNa0JpQUVDNmtGQVFSL0l3WWhCeU1HUVJCcUpBWWdCQ2dDQkNBQ0tBSUVJQU1vQWdSR1JnUkFJQVFvQWdnZ0FpZ0NDQ0FES0FJSVJrWUVRQ0FBSUFFZ0FpQURJQVFnQlNBR0VPRUlCU0FIUWNESUEwR0h5d0VRTjBIT3l3RVFOMEh2b2dJUU4wSFNBeEErUWZhaUFoQTNRZFRNQVJBM0lnQWdBQ2dDQUVGMGFpZ0NBR29RT3lBSFFZRE9BeEE2SWdFb0FnQW9BaHdoQWlBQlFRb2dBa0UvY1VHS0FXb1JBZ0FoQVNBSEVEd2dBQ0FCRUVBZ0FCQS9FQUFMQlFKQUlBSW9BZ1FnQXlnQ0JFWUVRQ0FFS0FJRUlBTW9BZ1JCQVhaR0JFQWdBaWdDQ0NBREtBSUlSZ1JBSUFRb0FnZ2dBeWdDQ0VFQmRrWUVRQ0FBSUFFZ0FpQURJQVFnQlNBR0VPQUlEQVFMQ3lBSFFjRElBMEgwekFFUU4wSE95d0VRTjBIdm9nSVFOMEhWQXhBK1FmYWlBaEEzUWRUTUFSQTNJZ2dnQ0NnQ0FFRjBhaWdDQUdvUU95QUhRWURPQXhBNklna29BZ0FvQWh3aENpQUpRUW9nQ2tFL2NVR0tBV29SQWdBaENTQUhFRHdnQ0NBSkVFQWdDQkEvRUFBTEN5QURLQUlFSUFJb0FnUkJBWFpHQkVBZ0F5Z0NCQ0FFS0FJRVJnUkFJQU1vQWdRZ0FpZ0NCRUVCZGtZRVFDQURLQUlFSUFRb0FnUkdCRUFnQUNBQklBSWdBeUFFSUFVZ0JoRGZDQXdFQ3dzZ0IwSEF5QU5CMWMwQkVEZEJ6c3NCRURkQjc2SUNFRGRCMkFNUVBrSDJvZ0lRTjBIVXpBRVFOeUlBSUFBb0FnQkJkR29vQWdCcUVEc2dCMEdBemdNUU9pSUJLQUlBS0FJY0lRSWdBVUVLSUFKQlAzRkJpZ0ZxRVFJQUlRRWdCeEE4SUFBZ0FSQkFJQUFRUHhBQUN3c2dCMEhBeUFOQjRvRUNFRGRCenNzQkVEZEI3NklDRURkQjJ3TVFQa0gyb2dJUU4wR3l6Z0VRTnlJQUtBSUFRWFJxS0FJQUlBQnFFRHNnQjBHQXpnTVFPaUlCS0FJQUtBSWNJUUlnQVVFS0lBSkJQM0ZCaWdGcUVRSUFJUUVnQnhBOElBQWdBUkJBSUFBUVB4QUFDd3NnQnlRR1FRRUxQUUVDZnlBQUtBSUVJQUFvQWdBaUEydEJKQkE1SWdJZ0FVa0VRQ0FBSUFFZ0Ftc1EzUWdGSUFJZ0FVc0VRQ0FBSUFGQkpHd2dBMm8yQWdRTEN3czRBQ0FBQkg4Z0FVUUFBQUFBQUFBQUFHVWdBVVFBQUFBQUFBRHdQMlp5Qkg5QmZ3VWdBRUdRaDY4RGFpQUJPUU1BUVFBTEJVRi9Dd3ZNQVFJRmZ3SjlJQUVvQWdBaUJFRjRhaUVHSUFBb0FnQWhBZ05BSUFJZ0JrY0VRQ0FDSUFSR0JFQWdCQ0VCQlFKQUlBSWhBUU5BSUFFaEJRTkFBa0FnQkNBRlFRaHFJZ05HRFFNZ0FTb0NBQ0lISUFNcUFnQWlDRjBOQUNBSUlBZGRSUVJBSUFFb0FnUWdCU2dDREVrTkFRc2dBeUVGREFFTEN5QURJUUVNQUFBTEFBc0xJQUVnQWtjRVFDQUNLQUlBSVFNZ0FpQUJLQUlBTmdJQUlBRWdBellDQUNBQ0tBSUVJUU1nQWlBQktBSUVOZ0lFSUFFZ0F6WUNCQXNnQUNBQ1FRaHFJZ0kyQWdBTUFRc0xDOTBNQWhGL0EzMGpCaUVJSXdaQk1Hb2tCaUFJUVNocUlRc2dDRUVrYWlFTUlBaEJJR29oRVNBQktBSUFJUTBDUUFKQUFrQUNRQU5BQWtBZ0FpZ0NBQ0lPUVhocUlRWWdEa0Y4YWlFS0lBMGdEa1lOQUNBR0lRY2dBQ2dDQUNJQklRUUNmd0pBQWtBQ1FBTkFBa0FDUUNBT0lBUnJJZ05CQTNVaUNRNEVCd2NKQ2dBTElBTkJ3QUJJRFFvZ0NDQUVOZ0lJSUFnZ0NVRUJkaUlEUVFOMElBRnFJZ2syQWdRZ0NDQUhOZ0lBSUJFZ0NDZ0NDRFlDQUNBTUlBZ29BZ1EyQWdBZ0N5QUlLQUlBTmdJQUlCRWdEQ0FMRVBJRElROGdDU29DQUNJVUlBUXFBZ0FpRlYwTkF5QURRUU4wSUFGcUlSSWdGU0FVWFVVRVFDQVNLQUlFSUFRb0FnUkpEUVFMSUFZaEF3TkFJQU5CZUdvaUJTQUVSd1JBSUJRZ0JTb0NBQ0lWWFEwQ0lCVWdGRjFGQkVBZ0VpZ0NCQ0FEUVh4cUtBSUFJaEJKRFFVTElBVWhBd3dCQ3dzZ0JFRUlhaUlGSVFRZ0Jpb0NBQ0lWSUFFcUFnQWlGRjFGQkVBQ1FDQVVJQlZkQkVBZ0FVRUVhaUVEQlNBS0tBSUFJQUZCQkdvaUF5Z0NBRWtOQVFzQ2Z3SkFBMEFDUUNBRklBWkdEUXdnQlNvQ0FDSVdJQlJkRFFBZ0ZDQVdYVVVFUUNBRktBSUVJZ1FnQXlnQ0FFa05Bd3NnQlVFSWFpRUZEQUVMQ3lBRktBSUVJUVFnQlVFRWFnd0JDeUFGUVFScUN5RVRJQVVnRlRnQ0FDQUdJQlk0QWdBZ0V5QUtLQUlBTmdJQUlBb2dCRFlDQUNBRlFRaHFJUVFMQ3lBRUlBWkdEUVlnQVNFSklBY2hBUU5BSUFrcUFnQWhGQU5BQWtBZ0JDb0NBQ0lWSUJSZERRQWdGQ0FWWFVVRVFDQUVLQUlFSUFrb0FnUkpEUUVMSUFSQkNHb2hCQXdCQ3dzZ0JDRURJQUVoQkFOQUFrQWdCRUY0YWlJQktnSUFJaFVnRkYxRkJFQWdGQ0FWWFEwQklBUkJmR29vQWdBZ0NTZ0NCRThOQVFzZ0FTRUVEQUVMQ3lBQklBTkxCRUFnQXlnQ0FDRUZJQU1nRlRnQ0FDQUJJQVUyQWdBZ0F5Z0NCQ0VGSUFNZ0JFRjhhaUlFS0FJQU5nSUVJQVFnQlRZQ0FDQURRUWhxSVFRTUFRc0xJQTBnQXlJQlNRMEdJQUFnQVRZQ0FDQUJJUVFNQVFzTElBTkJmR29pQVNFRElBRW9BZ0FoRUF3Q0N5QURRWHhxSVFNTUFRc2dEeUVESUFZTUFRc2dCQ2dDQUNFQklBUWdGVGdDQUNBRklBRTJBZ0FnQkNnQ0JDRUJJQVFnRURZQ0JDQURJQUUyQWdBZ0QwRUJhaUVESUFVTElRRWdCRUVJYWlJSElRWWdCeUFCU1FSL0lBTWhCU0FHSVFNRFFDQUpLZ0lBSVJRRFFBSkFJQlFnQXlvQ0FDSVZYVVVFUUNBVklCUmREUUVnQ1NnQ0JDQURLQUlFVHcwQkN5QURRUWhxSVFNTUFRc0xJQU1oQnlBQklRTURRQUpBSUJRZ0EwRjRhaUlCS2dJQUloVmREUUFnRlNBVVhVVUVRQ0FKS0FJRUlBTkJmR29vQWdCSkRRRUxJQUVoQXd3QkN3c2dBU0FIU3dSQUlBY29BZ0FoQmlBSElCVTRBZ0FnQVNBR05nSUFJQWNvQWdRaEJpQUhJQU5CZkdvaUF5Z0NBRFlDQkNBRElBWTJBZ0FnQlVFQmFpRUZJQUVnQ1NBSElBbEdHeUVKSUFkQkNHb2hBd3dCQ3dzZ0J5RUdJQVVGSUFNTElRRWdCeUFKUndSQUFrQWdCeW9DQUNJVklBa3FBZ0FpRkYwRVFDQUpRUVJxSVFVZ0IwRUVhaUVQSUFrb0FnUWhBeUFIS0FJRUlSQUZJQlFnRlYwTkFTQUhRUVJxSWc4b0FnQWlFQ0FKUVFScUlnVW9BZ0FpQTA4TkFRc2dCaWdDQUNFS0lBWWdGRGdDQUNBSklBbzJBZ0FnRHlBRE5nSUFJQVVnRURZQ0FDQUJRUUZxSVFFTEN5QUhJQTFHRFFBZ0JpRURJQUZGQkVBQ1FDQU5JQWRKQkVBRFFDQUhJQVJCQ0dvaUFVWU5CQ0FFS2dJQUloUWdBU29DQUNJVlhRMENJQlVnRkYxRkJFQWdCQ2dDQkNBRUtBSU1TUTBEQ3lBQklRUU1BQUFMQUFVZ0F5RUJBMEFnRGlBQlFRaHFJZ05HRFFRZ0FTb0NBQ0lVSUFNcUFnQWlGVjBOQWlBVklCUmRSUVJBSUFFb0FnUWdBU2dDREVrTkF3c2dBeUVCREFBQUN3QUxBQXNMSUEwZ0Iwa0VRQ0FDSUFZMkFnQUZJQUFnQjBFSWFqWUNBQXNNQVFzTERBTUxJQUlnQmpZQ0FDQUJLZ0lBSWhRZ0Jpb0NBQ0lWWFFSQUlBRkJCR29oQXlBS0tBSUFJUUFnQVNnQ0JDRUNCU0FWSUJSZERRTWdBVUVFYWlJREtBSUFJZ0lnQ2lnQ0FDSUFUdzBEQ3lBQklCVTRBZ0FnQmlBVU9BSUFJQU1nQURZQ0FDQUtJQUkyQWdBTUFnc2dDQ0FFTmdJY0lBZ2dCRUVJYWpZQ0dDQUNJQVkyQWdBZ0NDQUdOZ0lVSUJFZ0NDZ0NIRFlDQUNBTUlBZ29BaGcyQWdBZ0N5QUlLQUlVTmdJQUlCRWdEQ0FMRVBJREdnd0JDeUFJSUFRMkFoQWdDQ0FPTmdJTUlBd2dDQ2dDRURZQ0FDQUxJQWdvQWd3MkFnQWdEQ0FMRU9zSUN5QUlKQVlMcGdjQ0NIOERmU01HSVFnakJrRXdhaVFHSUFoQkNHb2hDU0FJUVNCcUlRMGdDRUVjYWlFT0lBTWdCR3doQ2dKOUlBV3lJQU95bFkwaEVpQUdzaUFFc3BXTklSRWdBU0FCS0FJQU5nSUVJQUVnQnhEUkFpQUFLQUlFSUFBb0FnQWlBMnRCREJBNUlRdEJBQ0VGQTBBZ0JTQUxSd1JBSUFWQkRHd2dBMm9vQWdRZ0JVRU1iQ0FEYWlnQ0FDSUVhMEVNRURraERFRUFJUVlEUUNBR0lBeEhCRUFnQmtFTWJDQUVhaUFHUVF4c0lBUnFLQUlBTmdJRUlBWkJBV29oQmd3QkN3c2dCVUVCYWlFRkRBRUxDeUFISUFvUU9TRUxJQklMRUVPeUlSQWdFUkJEc2lFUlFRQWhCQU5BSUFRZ0FpZ0NCQ0FDS0FJQUlnTnJRU1FRT1VrRVFDQUVRU1JzSUFOcUtnSUFJQkNWRUVNaEJpQUVRU1JzSUFOcUtnSUVJQkdWRUVNaEJTQUFLQUlBSUFaQkRHeHFLQUlBSVFZZ0NTQUVRU1JzSUFOcUtnSVlpemdDQUNBSklBUTJBZ1FnQlVFTWJDQUdhaUlES0FJRUlnY2dCVUVNYkNBR2FpZ0NDRWtFUUNBSElBa3BBd0EzQWdBZ0F5QURLQUlFUVFocU5nSUVCU0FGUVF4c0lBWnFJQWtRbGdFTElBUkJBV29oQkF3QkN3dEJBQ0VHSUFBb0FnQWlCU0lFSVFNQ1FBTkFJQVlnQUNnQ0JDQUZhMEVNRURsSkJFQkJBQ0VGQTBBZ0JTQUdRUXhzSUFScUtBSUVJQVpCREd3Z0JHb29BZ0FpQjJ0QkRCQTVTUVJBSUFzZ0JVRU1iQ0FIYWlJS0tBSUVJZzhnQlVFTWJDQUhhaUlNS0FJQUlnUnJRUU4xSWdjZ0N5QUhTUnNpQndSQUlBZ2dCRFlDR0NBSUlBZEJBM1FnQkdvMkFoUWdDQ0FQTmdJUUlBNGdDQ2dDR0RZQ0FDQU5JQWdvQWhRMkFnQWdDU0FJS0FJUU5nSUFJQTRnRFNBSkVPd0lJQXdvQWdBaUJDRURJQWNnQ2lnQ0JDQUVhMEVEZFVzRVFDQURLZ0lBSUFkQkEzUWdBMm9xQWdCZ1JRMEdDMEVBSVFvRFFDQUtJQWRKQkVBZ0FpZ0NBQ0FNS0FJQUlBcEJBM1JxS0FJRVFTUnNhaUVESUFFb0FnUWlCQ0FCS0FJSVJnUkFJQUVnQXhEaUFRVWdCQ0FES1FJQU53SUFJQVFnQXlrQ0NEY0NDQ0FFSUFNcEFoQTNBaEFnQkNBREtRSVlOd0lZSUFRZ0F5Z0NJRFlDSUNBQklBRW9BZ1JCSkdvMkFnUUxJQXBCQVdvaENnd0JDd3NnQUNnQ0FDRURDeUFGUVFGcUlRVWdBeUVFREFFTEN5QUdRUUZxSVFZZ0JDRUZEQUVMQ3lBSUpBWVBDeUFKUWNESUEwSHB5QUVRTjBIQXZBRVFOMEh2b2dJUU4wR1ZCUkErUWZhaUFoQTNRYVBKQVJBM0lnQWdBQ2dDQUVGMGFpZ0NBR29RT3lBSlFZRE9BeEE2SWdFb0FnQW9BaHdoQWlBQlFRb2dBa0UvY1VHS0FXb1JBZ0FoQVNBSkVEd2dBQ0FCRUVBZ0FCQS9FQUFMSmdBZ0FFRUFSeUFCUVFCSGNRUi9JQUVnQUVHWWg2OERhaWdDQURZQ0FFRUFCVUYvQ3hvTFJBRUNmVU1BQUlBL1FRRWdCblN5bFNJSFF3QUFBRCtVUXdBQUFMK1NJUWdnQUNBSElBT1VJQWlTT0FJQUlBRWdCeUFFbENBSWtqZ0NBQ0FDSUFjZ0JaUTRBZ0FMM1FRQ0RIOEJmU01HSVFJakJrRkFheVFHSUFKQk1Hb2hDaUFDUVN4cUlRY2dBa0VvYWlFSUlBSkJKR29oQ3lBQUxBQWNCRUFnQUNBQVFjZ0FhaUlKS0FJQU5nSk1JQWtnQUVGQWF5SU1LQUlBSUFCQlBHb2lCU2dDQUdzUTBRSWdBRUhjQUdvaURTQUJFTUlJQTBBZ0JTZ0NBQ0lHSVFNZ0JDQU1LQUlBSUFaclFTUVFPVWtFUUNBSElBZ2dDeUFFUVNSc0lBTnFLZ0lBSUFSQkpHd2dBMm9xQWdRZ0JFRWtiQ0FEYWlvQ0hDQUVRU1JzSUFOcUtBSU1FTzhJSUFjZ0J5b0NBQ0FCSUFVb0FnQWdCRUVrYkdvb0FneEJBQkNzQVNnQ0JFRi9hck1RNHdFNEFnQWdDQ0FJS2dJQUlBRWdCU2dDQUNBRVFTUnNhaWdDREVFQUVLd0JLQUlJUVg5cXN4RGpBU0lPT0FJQUlBMGdBQ2dDa0FFZ0NpQUZLQUlBSWdNZ0JFRWtiR29vQWd3Z0JFRWtiQ0FEYWlnQ0VDQUhLZ0lBSUE0Z0N5b0NBQkRCQ0VFQUlRWURRQ0FHSUFvb0FnQklCRUFnQWlBRktBSUFJQVJCSkd4cUlnTXBBZ0EzQWdBZ0FpQURLUUlJTndJSUlBSWdBeWtDRURjQ0VDQUNJQU1wQWhnM0FoZ2dBaUFES0FJZ05nSWdJQUlnQUNnQ2tBRWdCa0VDZEdvb0FnQTJBZ2dnQUNnQ1RDSURJQUFvQWxCR0JFQWdDU0FDRU9JQkJTQURJQUlwQWdBM0FnQWdBeUFDS1FJSU53SUlJQU1nQWlrQ0VEY0NFQ0FESUFJcEFoZzNBaGdnQXlBQ0tBSWdOZ0lnSUFBZ0FDZ0NURUVrYWpZQ1RBc2dCa0VCYWlFR0RBRUxDeUFFUVFGcUlRUU1BUXNMSUFVZ0NSQ0pBZ1VDUUNBQVFVQnJLQUlBSUFBb0Fqd2lBR3RCSkJBNUlRRURRQ0FCSUFWR0RRRWdCVUVrYkNBQWFrTUFBQUFBT0FJSUlBVkJBV29oQlF3QUFBc0FDd3NnQWlRR0M1SUVBUXQvSXdZaEF5TUdRUkJxSkFZZ0EwRU1haUVCSUFCQlFHc2lDQ2dDQUNBQVFUeHFJZ1FvQWdCclFTUVFPU0FBS0FKVUlnbExCRUFnQUNnQ0ZDQUFRUkJxSWdvb0FnQWlCbXRCREJBNUlnc2dBQ2dDQ0VjRVFDQUJRY0RJQTBHQnh3RVFOMEhBdkFFUU4wSHZvZ0lRTjBIR0F4QStRZmFpQWhBM1FiakhBUkEzSWdJZ0FpZ0NBRUYwYWlnQ0FHb1FPeUFCUVlET0F4QTZJZ1VvQWdBb0Fod2hCeUFGUVFvZ0IwRS9jVUdLQVdvUkFnQWhCU0FCRUR3Z0FpQUZFRUFnQWhBL0VBQUxJQVlvQWdRZ0JpZ0NBR3RCREJBNUlnWWdBQ2dDREVjRVFDQUJRY0RJQTBIU3h3RVFOMEhBdkFFUU4wSHZvZ0lRTjBISEF4QStRZmFpQWhBM1FiakhBUkEzSWdJZ0FpZ0NBRUYwYWlnQ0FHb1FPeUFCUVlET0F4QTZJZ1VvQWdBb0Fod2hCeUFGUVFvZ0IwRS9jVUdLQVdvUkFnQWhCU0FCRUR3Z0FpQUZFRUFnQWhBL0VBQUxJQU5CQURZQ0FDQURRUUEyQWdRZ0EwRUFOZ0lJSUFvZ0F5QUVJQXNnQmlBQUtBSUFJQUFvQWdRZ0NSRHRDQ0FFSUFNUWlRSWdDQ2dDQUNBRUtBSUFhMEVrRURrZ0FDZ0NWRXNFUUNBQlFjRElBMEdNeUFFUU4wSEF2QUVRTjBIdm9nSVFOMEhWQXhBK1FmYWlBaEEzUWRISUFSQTNJZ0FnQUNnQ0FFRjBhaWdDQUdvUU95QUJRWURPQXhBNklnUW9BZ0FvQWh3aEFpQUVRUW9nQWtFL2NVR0tBV29SQWdBaEJDQUJFRHdnQUNBRUVFQWdBQkEvRUFBRklBTVFWUXNMSUFNa0JndWFCd0lWZndSOUl3WWhCU01HUWRBQWFpUUdJQVZCeEFCcUlRa2dCVUU0YWlFTUlBVkJMR29oQnlBRlFTaHFJUTBnQlVFa2FpRU9JQUFxQWpRUWFTRVlJQUFxQWpoREFBQ0FQNUlRYVNBQUtnSTRsU0VaSUFCQlBHb2hEeUFBUVVCcklSVWdBRUVnYWlFR0FrQUNRQUpBQTBBZ0FpQVZLQUlBSUE4b0FnQWlBMnRCSkJBNVNRUkFJQUpCSkd3Z0Eyb2lFaWdDRUNBR0tBSVFUZzBDSUJJb0FoQWdCaWdDRUNBQ1FTUnNJQU5xSWhBb0FneHNhaUVLSUEwZ0RpQUNRU1JzSUFOcUlnZ3FBZ0FnQWtFa2JDQURha0VFYWlJVEtnSUFJQkFvQWd3UXl3SWdEU29DQUVNQUFBQS9raEJESVFzZ0Rpb0NBRU1BQUFBL2toQkRJUkVnQlNBTUlBWW9BZ0FnQ2tGL2FrRUZkR29nQmlnQ0FDQUtRUVYwYWlJVUlBWW9BZ0FnQ2tFQmFrRUZkR29nQ3lBUkVPZ0lCRUFnQnlBRklBd1E1d2dFUUNBSEtnSUFFR2tnQnlvQ0JCQnBraUFBS2dKWVhrVUVRQ0FDUVNSc0lBTnFJaFpCSUdvZ0JSRG1DQVJBSUFKQkpHd2dBMm9pQ2lvQ0dDQVVJQkVRVUNBTFFRSjBhaW9DQUZ3TkJ5QUtJQlFnRVJCUUlBdEJBblJxS2dJQUlBd3FBZ0FnQnlvQ0FDSVhsQ0FNS2dJRUlBY3FBZ1FpR3BTU0lBd3FBZ2dnQnlvQ0NKU1NremdDR0NBSUlCTWdGeUFOS2dJQWtpQWFJQTRxQWdDU0lCQW9BZ3dRNFFFZ0FrRWtiQ0FEYWlJTElBY3FBZ2dnRWlnQ0VMS1NJaGM0QWhRZ0N5QVhJQVlvQWhDeUVPTUJPQUlVSUJZcUFpQ0xJQmxkQkg4Z0Npb0NHQkJwSUJoZ0JIOGdDQ29DQUNJWFF3QUFBQUJnQkg4Z0Z5QUdLQUlBS0FJRXMxMEVmeUFUS2dJQUloZERBQUFBQUdBRWZ5QVhJQVlvQWdBb0FnaXpYUVIvSUFKQkpHd2dBMm9nQVNBUUtBSU1JQXNxQWhRUWh3STRBaHdnRHlnQ0FDQUVRU1JzYWlJRElBZ3BBZ0EzQWdBZ0F5QUlLUUlJTndJSUlBTWdDQ2tDRURjQ0VDQURJQWdwQWhnM0FoZ2dBeUFJS0FJZ05nSWdJQVJCQVdvRklBUUxCU0FFQ3dVZ0JBc0ZJQVFMQlNBRUN3VWdCQXNoQkFzTEN3c2dBa0VCYWlFQ0RBRUxDeUFQSUFRUTZRZ2dCU1FHRHdzZ0NVSEF5QU5CdHNrQkVEZEJ3THdCRURkQjc2SUNFRGRCNlFNUVBrSDJvZ0lRTjBIK3lRRVFOeUlBSUFBb0FnQkJkR29vQWdCcUVEc01BUXNnQ1VIQXlBTkJvOG9CRURkQndMd0JFRGRCNzZJQ0VEZEJqZ1FRUGtIMm9nSVFOMEhjeWdFUU55SUFJQUFvQWdCQmRHb29BZ0JxRURzTElBbEJnTTRERURvaUFTZ0NBQ2dDSENFQ0lBRkJDaUFDUVQ5eFFZb0JhaEVDQUNFQklBa1FQQ0FBSUFFUVFDQUFFRDhRQUF1TUpBSWNmd3A5SXdZaEJTTUdRVEJxSkFZZ0FFRkFheUlSSUFCQlBHb2lHQ2dDQURZQ0FDQUFLZ0kwRUdraEpTQUFRU0JxSVJrZ0JVRUVhaUVhSUFWQkJHb2hHeUFGUVFScUlSeEJBU0VEQWtBQ1FBSkFBa0FDUUFKQUFrQURRQ0FESUJrb0FnUWdHU2dDQUd0QkJYVkJmMnBKQkVBZ0FpQURRWDlxRU1nQ0lRY2dBaUFERU1nQ0lRb2dBaUFEUVFGcUloMFF5QUloQ0NBQ0lBTVEyZ2doRWlBRElBSW9BaEFRVHlFV0FrQUNRQ0FIS0FJRUlBb29BZ1JIRFFBZ0J5Z0NCQ0FJS0FJRVJ3MEFJQWNvQWdnZ0NpZ0NDRWNOQkNBSEtBSUlJQWdvQWdoSERRVWdDaWdDQkVGL2FpRVhJQW9vQWdoQmYyb2hIaUFXc2lFZ1FRRWhBd05BSUFNZ0hra0VRQ0FISUFOQmYyb2lCQkJRSVJNZ0J5QURFRkFoQ3lBSElBTkJBV29pRkJCUUlRd2dDaUFFRUZBaERTQUtJQU1RVUNFVklBb2dGQkJRSVE0Z0NDQUVFRkFoRHlBSUlBTVFVQ0VRSUFnZ0ZCQlFJUWtnQTdNaElVRUJJUU1EUUNBRElCZEpCRUFnQTBFQ2RDQVZhaUlFS2dJQUVHa2dKVjFGQkVBQ1FBSkFBa0FnQkNvQ0FDSWZJQU5CZjJvaUJFRUNkQ0FUYWlvQ0FDSWlYa1VOQUNBZklBTkJBblFnRTJvcUFnQmVSUTBBSUI4Z0EwRUJhaUlHUVFKMElCTnFLZ0lBWGtVTkFDQWZJQVJCQW5RZ0Myb3FBZ0JlUlEwQUlCOGdBMEVDZENBTGFpb0NBRjVGRFFBZ0h5QUdRUUowSUF0cUtnSUFYa1VOQUNBZklBUkJBblFnREdvcUFnQmVSUTBBSUI4Z0EwRUNkQ0FNYWlvQ0FGNUZEUUFnSHlBR1FRSjBJQXhxS2dJQVhrVU5BQ0FmSUFSQkFuUWdEV29xQWdCZVJRMEFJQjhnQTBFQ2RDQU5haW9DQUY1RkRRQWdIeUFHUVFKMElBMXFLZ0lBWGtVTkFDQWZJQVJCQW5RZ0ZXb3FBZ0JlUlEwQUlCOGdCa0VDZENBVmFpb0NBRjVGRFFBZ0h5QUVRUUowSUE1cUtnSUFYa1VOQUNBZklBTkJBblFnRG1vcUFnQmVSUTBBSUI4Z0JrRUNkQ0FPYWlvQ0FGNUZEUUFnSHlBRVFRSjBJQTlxS2dJQVhrVU5BQ0FmSUFOQkFuUWdEMm9xQWdCZVJRMEFJQjhnQmtFQ2RDQVBhaW9DQUY1RkRRQWdIeUFFUVFKMElCQnFLZ0lBWGtVTkFDQWZJQU5CQW5RZ0VHb3FBZ0JlUlEwQUlCOGdCa0VDZENBUWFpb0NBRjVGRFFBZ0h5QUVRUUowSUFscUtnSUFYa1VOQUNBZklBTkJBblFnQ1dvcUFnQmVSUTBBSUI4Z0JrRUNkQ0FKYWlvQ0FGNUZEUUFNQVFzZ0h5QWlYVVVOQVNBZklBTkJBblFnRTJvcUFnQmRSUTBCSUI4Z0EwRUJhaUlHUVFKMElCTnFLZ0lBWFVVTkFTQWZJQVJCQW5RZ0Myb3FBZ0JkUlEwQklCOGdBMEVDZENBTGFpb0NBRjFGRFFFZ0h5QUdRUUowSUF0cUtnSUFYVVVOQVNBZklBUkJBblFnREdvcUFnQmRSUTBCSUI4Z0EwRUNkQ0FNYWlvQ0FGMUZEUUVnSHlBR1FRSjBJQXhxS2dJQVhVVU5BU0FmSUFSQkFuUWdEV29xQWdCZFJRMEJJQjhnQTBFQ2RDQU5haW9DQUYxRkRRRWdIeUFHUVFKMElBMXFLZ0lBWFVVTkFTQWZJQVJCQW5RZ0ZXb3FBZ0JkUlEwQklCOGdCa0VDZENBVmFpb0NBRjFGRFFFZ0h5QUVRUUowSUE1cUtnSUFYVVVOQVNBZklBTkJBblFnRG1vcUFnQmRSUTBCSUI4Z0JrRUNkQ0FPYWlvQ0FGMUZEUUVnSHlBRVFRSjBJQTlxS2dJQVhVVU5BU0FmSUFOQkFuUWdEMm9xQWdCZFJRMEJJQjhnQmtFQ2RDQVBhaW9DQUYxRkRRRWdIeUFFUVFKMElCQnFLZ0lBWFVVTkFTQWZJQU5CQW5RZ0VHb3FBZ0JkUlEwQklCOGdCa0VDZENBUWFpb0NBRjFGRFFFZ0h5QUVRUUowSUFscUtnSUFYVVVOQVNBZklBTkJBblFnQ1dvcUFnQmRSUTBCSUI4Z0JrRUNkQ0FKYWlvQ0FGMUZEUUVMSUFVZ0VqWUNEQ0FGSUJZMkFoQWdCU0FmT0FJWUlBVWdBU0FTSUNBUWh3STRBaHdnQlNBYUlBT3pJQ0VnRWhEaEFTQVJLQUlBSWdRZ0FDZ0NSRVlFUUNBWUlBVVE0Z0VGSUFRZ0JTa0NBRGNDQUNBRUlBVXBBZ2czQWdnZ0JDQUZLUUlRTndJUUlBUWdCU2tDR0RjQ0dDQUVJQVVvQWlBMkFpQWdFU0FSS0FJQVFTUnFOZ0lBQ3dzTElBTkJBV29oQXd3QkN3c2dGQ0VEREFFTEN3d0JDeUFIS0FJRUlBb29BZ1JHQkVBZ0NDZ0NCQ0FLS0FJRVFRRjJSZ1JBSUFjb0FnZ2dDaWdDQ0VjTkJ5QUlLQUlJSUFvb0FnaEJBWFpIRFFnZ0NDZ0NCRUYvYXJOREFBQUF2NUpEQUFBQVFKUkRBQUFBUDVLT0VKSUJJUk1nQ0NnQ0NFRi9hck5EQUFBQXY1SkRBQUFBUUpSREFBQUFQNUtPRUpJQklSVWdGckloSmtFQ0lRTURRQ0FESUJWUERRTWdCeUFEUVg5cUlnUVFVQ0VQSUFjZ0F4QlFJUXNnQnlBRFFRRnFJaFFRVUNFTUlBb2dCQkJRSVEwZ0NpQURFRkFoRUNBS0lCUVFVQ0VPSUFPeklpZERBQUFBUDVSREFBQ0F2cElpSVVNQUFBQy9raUVpSUNGREFBQUFQNUloSTBFQ0lRUURRQ0FFSUJOSkJFQWdCRUVDZENBUWFpSURLZ0lBRUdrZ0pWMUZCRUFDUUNBRXN5SW9Rd0FBQUQrVVF3QUFnTDZTSVNBQ1FBSkFJQU1xQWdBaUh5QUVRWDlxSWdaQkFuUWdEMm9pRnlvQ0FGNUZEUUFnSHlBRVFRSjBJQTlxS2dJQVhrVU5BQ0FmSUFSQkFXb2lDVUVDZENBUGFpb0NBRjVGRFFBZ0h5QUdRUUowSUF0cUtnSUFYa1VOQUNBZklBUkJBblFnQzJvcUFnQmVSUTBBSUI4Z0NVRUNkQ0FMYWlvQ0FGNUZEUUFnSHlBR1FRSjBJQXhxS2dJQVhrVU5BQ0FmSUFSQkFuUWdER29xQWdCZVJRMEFJQjhnQ1VFQ2RDQU1haW9DQUY1RkRRQWdIeUFHUVFKMElBMXFLZ0lBWGtVTkFDQWZJQVJCQW5RZ0RXb3FBZ0JlUlEwQUlCOGdDVUVDZENBTmFpb0NBRjVGRFFBZ0h5QUdRUUowSUJCcUtnSUFYa1VOQUNBZklBbEJBblFnRUdvcUFnQmVSUTBBSUI4Z0JrRUNkQ0FPYWlvQ0FGNUZEUUFnSHlBRVFRSjBJQTVxS2dJQVhrVU5BQ0FmSUFsQkFuUWdEbW9xQWdCZVJRMEFJQjhnQ0NBZ1F3QUFBTCtTSWg4Z0loQk5Ya1VOQUNBREtnSUFJQWdnSUNBaUVFMWVSUTBBSUFNcUFnQWdDQ0FnUXdBQUFEK1NJaVFnSWhCTlhrVU5BQ0FES2dJQUlBZ2dIeUFoRUUxZVJRMEFJQU1xQWdBZ0NDQWdJQ0VRVFY1RkRRQWdBeW9DQUNBSUlDUWdJUkJOWGtVTkFDQURLZ0lBSUFnZ0h5QWpFRTFlUlEwQUlBTXFBZ0FnQ0NBZ0lDTVFUVjVGRFFBZ0F5b0NBQ0FJSUNRZ0l4Qk5Ya1VOQUF3QkN5QURLZ0lBSWg4Z0Z5b0NBRjFGRFFFZ0h5QUVRUUowSUE5cUtnSUFYVVVOQVNBZklBUkJBV29pQ1VFQ2RDQVBhaW9DQUYxRkRRRWdIeUFHUVFKMElBdHFLZ0lBWFVVTkFTQWZJQVJCQW5RZ0Myb3FBZ0JkUlEwQklCOGdDVUVDZENBTGFpb0NBRjFGRFFFZ0h5QUdRUUowSUF4cUtnSUFYVVVOQVNBZklBUkJBblFnREdvcUFnQmRSUTBCSUI4Z0NVRUNkQ0FNYWlvQ0FGMUZEUUVnSHlBR1FRSjBJQTFxS2dJQVhVVU5BU0FmSUFSQkFuUWdEV29xQWdCZFJRMEJJQjhnQ1VFQ2RDQU5haW9DQUYxRkRRRWdIeUFHUVFKMElCQnFLZ0lBWFVVTkFTQWZJQWxCQW5RZ0VHb3FBZ0JkUlEwQklCOGdCa0VDZENBT2Fpb0NBRjFGRFFFZ0h5QUVRUUowSUE1cUtnSUFYVVVOQVNBZklBbEJBblFnRG1vcUFnQmRSUTBCSUI4Z0NDQWdRd0FBQUwrU0loOGdJaEJOWFVVTkFTQURLZ0lBSUFnZ0lDQWlFRTFkUlEwQklBTXFBZ0FnQ0NBZ1F3QUFBRCtTSWlRZ0loQk5YVVVOQVNBREtnSUFJQWdnSHlBaEVFMWRSUTBCSUFNcUFnQWdDQ0FnSUNFUVRWMUZEUUVnQXlvQ0FDQUlJQ1FnSVJCTlhVVU5BU0FES2dJQUlBZ2dIeUFqRUUxZFJRMEJJQU1xQWdBZ0NDQWdJQ01RVFYxRkRRRWdBeW9DQUNBSUlDUWdJeEJOWFVVTkFRc2dCU0FTTmdJTUlBVWdGallDRUNBRklBTW9BZ0EyQWhnZ0JTQUJJQklnSmhDSEFqZ0NIQ0FGSUJzZ0tDQW5JQklRNFFFZ0VTZ0NBQ0lESUFBb0FrUkdCRUFnR0NBRkVPSUJCU0FESUFVcEFnQTNBZ0FnQXlBRktRSUlOd0lJSUFNZ0JTa0NFRGNDRUNBRElBVXBBaGczQWhnZ0F5QUZLQUlnTmdJZ0lCRWdFU2dDQUVFa2FqWUNBQXNMQ3lBRVFRRnFJUVFNQVFzTElCUWhBd3dBQUFzQUN3c2dDaWdDQkNBSEtBSUVRUUYyUmdSQUlBZ29BZ1FnQnlnQ0JFRUJka1lFUUNBS0tBSUlJQWNvQWdoQkFYWkhEUWtnQ0NnQ0NDQUhLQUlJUVFGMlJ3MEtJQW9vQWdSQmYyb2hFeUFLS0FJSVFYOXFJUlVnRnJJaEprRUJJUU1EUUNBRElCVlBEUU1nQ2lBRFFYOXFJZ1FRVUNFUElBb2dBeEJRSVJBZ0NpQURRUUZxSWhRUVVDRUxJQWdnQkJCUUlRd2dDQ0FERUZBaERTQUlJQlFRVUNFT0lBT3pJU2NnQTBFQmRMTkRBQUFBUDVJaUlVTUFBQURBa2lFaUlDRkRBQUFBUUpJaEkwRUJJUU1EUUNBRElCTkpCRUFnQTBFQ2RDQVFhaUlFS2dJQUVHa2dKVjFGQkVBQ1FDQURRUUYwczBNQUFBQS9raUVnQWtBQ1FDQUVLZ0lBSWg4Z0EwRi9haUlHUVFKMElBOXFJaGNxQWdCZVJRMEFJQjhnQTBFQ2RDQVBhaW9DQUY1RkRRQWdIeUFEUVFGcUlnbEJBblFnRDJvcUFnQmVSUTBBSUI4Z0JrRUNkQ0FRYWlvQ0FGNUZEUUFnSHlBSlFRSjBJQkJxS2dJQVhrVU5BQ0FmSUFaQkFuUWdDMm9xQWdCZVJRMEFJQjhnQTBFQ2RDQUxhaW9DQUY1RkRRQWdIeUFKUVFKMElBdHFLZ0lBWGtVTkFDQWZJQVpCQW5RZ0RHb3FBZ0JlUlEwQUlCOGdBMEVDZENBTWFpb0NBRjVGRFFBZ0h5QUpRUUowSUF4cUtnSUFYa1VOQUNBZklBWkJBblFnRFdvcUFnQmVSUTBBSUI4Z0EwRUNkQ0FOYWlvQ0FGNUZEUUFnSHlBSlFRSjBJQTFxS2dJQVhrVU5BQ0FmSUFaQkFuUWdEbW9xQWdCZVJRMEFJQjhnQTBFQ2RDQU9haW9DQUY1RkRRQWdIeUFKUVFKMElBNXFLZ0lBWGtVTkFDQWZJQWNnSUVNQUFBREFraUlmSUNJUVRWNUZEUUFnQkNvQ0FDQUhJQ0FnSWhCTlhrVU5BQ0FFS2dJQUlBY2dJRU1BQUFCQWtpSWtJQ0lRVFY1RkRRQWdCQ29DQUNBSElCOGdJUkJOWGtVTkFDQUVLZ0lBSUFjZ0lDQWhFRTFlUlEwQUlBUXFBZ0FnQnlBa0lDRVFUVjVGRFFBZ0JDb0NBQ0FISUI4Z0l4Qk5Ya1VOQUNBRUtnSUFJQWNnSUNBakVFMWVSUTBBSUFRcUFnQWdCeUFrSUNNUVRWNUZEUUFNQVFzZ0JDb0NBQ0lmSUJjcUFnQmRSUTBCSUI4Z0EwRUNkQ0FQYWlvQ0FGMUZEUUVnSHlBRFFRRnFJZ2xCQW5RZ0Qyb3FBZ0JkUlEwQklCOGdCa0VDZENBUWFpb0NBRjFGRFFFZ0h5QUpRUUowSUJCcUtnSUFYVVVOQVNBZklBWkJBblFnQzJvcUFnQmRSUTBCSUI4Z0EwRUNkQ0FMYWlvQ0FGMUZEUUVnSHlBSlFRSjBJQXRxS2dJQVhVVU5BU0FmSUFaQkFuUWdER29xQWdCZFJRMEJJQjhnQTBFQ2RDQU1haW9DQUYxRkRRRWdIeUFKUVFKMElBeHFLZ0lBWFVVTkFTQWZJQVpCQW5RZ0RXb3FBZ0JkUlEwQklCOGdBMEVDZENBTmFpb0NBRjFGRFFFZ0h5QUpRUUowSUExcUtnSUFYVVVOQVNBZklBWkJBblFnRG1vcUFnQmRSUTBCSUI4Z0EwRUNkQ0FPYWlvQ0FGMUZEUUVnSHlBSlFRSjBJQTVxS2dJQVhVVU5BU0FmSUFjZ0lFTUFBQURBa2lJZklDSVFUVjFGRFFFZ0JDb0NBQ0FISUNBZ0loQk5YVVVOQVNBRUtnSUFJQWNnSUVNQUFBQkFraUlrSUNJUVRWMUZEUUVnQkNvQ0FDQUhJQjhnSVJCTlhVVU5BU0FFS2dJQUlBY2dJQ0FoRUUxZFJRMEJJQVFxQWdBZ0J5QWtJQ0VRVFYxRkRRRWdCQ29DQUNBSElCOGdJeEJOWFVVTkFTQUVLZ0lBSUFjZ0lDQWpFRTFkUlEwQklBUXFBZ0FnQnlBa0lDTVFUVjFGRFFFTElBVWdFallDRENBRklCWTJBaEFnQlNBRUtBSUFOZ0lZSUFVZ0FTQVNJQ1lRaHdJNEFod2dCU0FjSUFPeklDY2dFaERoQVNBUktBSUFJZ1FnQUNnQ1JFWUVRQ0FZSUFVUTRnRUZJQVFnQlNrQ0FEY0NBQ0FFSUFVcEFnZzNBZ2dnQkNBRktRSVFOd0lRSUFRZ0JTa0NHRGNDR0NBRUlBVW9BaUEyQWlBZ0VTQVJLQUlBUVNScU5nSUFDd3NMSUFOQkFXb2hBd3dCQ3dzZ0ZDRUREQUFBQ3dBTEN3c2dIU0VEREFFTEN5QUZKQVlQQ3lBRlFjRElBMEhyM0FFUU4wSEF2QUVRTjBIdm9nSVFOMEhBQVJBK1FmYWlBaEEzUVovZEFSQTNJZ0FnQUNnQ0FFRjBhaWdDQUdvUU93d0ZDeUFGUWNESUEwRzIzUUVRTjBIQXZBRVFOMEh2b2dJUU4wSEJBUkErUWZhaUFoQTNRWi9kQVJBM0lnQWdBQ2dDQUVGMGFpZ0NBR29RT3d3RUN5QUZRY0RJQTBIcjNBRVFOMEhBdkFFUU4wSHZvZ0lRTjBHVkFoQStRZmFpQWhBM1FaL2RBUkEzSWdBZ0FDZ0NBRUYwYWlnQ0FHb1FPd3dEQ3lBRlFjRElBMEhxM1FFUU4wSEF2QUVRTjBIdm9nSVFOMEdXQWhBK1FmYWlBaEEzUVovZEFSQTNJZ0FnQUNnQ0FFRjBhaWdDQUdvUU93d0NDeUFGUWNESUEwR2ozZ0VRTjBIQXZBRVFOMEh2b2dJUU4wSHFBaEErUWZhaUFoQTNRWi9kQVJBM0lnQWdBQ2dDQUVGMGFpZ0NBR29RT3d3QkN5QUZRY0RJQTBIYzNnRVFOMEhBdkFFUU4wSHZvZ0lRTjBIckFoQStRZmFpQWhBM1FaL2RBUkEzSWdBZ0FDZ0NBRUYwYWlnQ0FHb1FPd3NnQlVHQXpnTVFPaUlCS0FJQUtBSWNJUUlnQVVFS0lBSkJQM0ZCaWdGcUVRSUFJUUVnQlJBOElBQWdBUkJBSUFBUVB4QUFDL0FCQVFSL0l3WWhBaU1HUVNCcUpBWWdBU2dDRUVFQVRBUkFJQUpCd01nRFFkdStBUkEzUWNDOEFSQTNRZStpQWhBM1FaTUJFRDVCOXFJQ0VEZEJqTDhCRURjaUF5QURLQUlBUVhScUtBSUFhaEE3SUFKQmdNNERFRG9pQkNnQ0FDZ0NIQ0VGSUFSQkNpQUZRVDl4UVlvQmFoRUNBQ0VFSUFJUVBDQURJQVFRUUNBREVEOFFBQXNnQWtHNHhnRVFlU0FBUVNCcUlBRVFoUWtnQWhCcklBSkJ4TVlCRUhrZ0FDQUJJQUJCSUdvUTh3Z2dBaEJySUFKQjJNWUJFSGtnQUNBQkVQSUlJQUlRYXlBQ1FlSEdBUkI1SUFBUThRZ2dBaEJySUFKQjc4WUJFSGtnQUNBQkVQQUlJQUlRYXlBQ0pBWUxRZ0VDZnlBQUtBSUVJUUVEUUNBQUtBSUlJZ0lnQVVjRVFDQUFJQUpCZEdvaUFqWUNDQ0FDRU5NQ0RBRUxDeUFBS0FJQUlnRUVRQ0FBS0FJTUdpQUJFRGdMQzZrQkFRVi9Jd1loQWlNR1FTQnFKQVlnQUNnQ0NDQUFLQUlFSWdOclFRd1FPU0FCU1FSQVFkV3ExYW9CSUFNZ0FDZ0NBR3RCREJBNUlBRnFJZ05KQkVBUUFBVWdBaUFESUFBb0FnZ2dBQ2dDQUNJRWEwRU1FRGtpQlVFQmRDSUdJQVlnQTBrYlFkV3ExYW9CSUFWQnF0V3ExUUJKR3lBQUtBSUVJQVJyUVF3UU9TQUFRUWhxRU5VQ0lBSWdBUkQwQXlBQUlBSVE4d01nQWhEMUNBc0ZJQUFnQVJEMUF3c2dBaVFHQzBFQkFuOGdBQ2dDQkNFQkEwQWdBQ2dDQ0NJQ0lBRkhCRUFnQUNBQ1FYUnFJZ0kyQWdnZ0FoQlZEQUVMQ3lBQUtBSUFJZ0VFUUNBQUtBSU1HaUFCRURnTEM2a0JBUVYvSXdZaEFpTUdRU0JxSkFZZ0FDZ0NDQ0FBS0FJRUlnTnJRUXdRT1NBQlNRUkFRZFdxMWFvQklBTWdBQ2dDQUd0QkRCQTVJQUZxSWdOSkJFQVFBQVVnQWlBRElBQW9BZ2dnQUNnQ0FDSUVhMEVNRURraUJVRUJkQ0lHSUFZZ0Ewa2JRZFdxMWFvQklBVkJxdFdxMVFCSkd5QUFLQUlFSUFSclFRd1FPU0FBUVFocUVOVUNJQUlnQVJEMEF5QUFJQUlROHdNZ0FoRDNDQXNGSUFBZ0FSRDFBd3NnQWlRR0MxMEJBMzhnQUNnQ0JDSUVJQUFvQWdBaUFtdEJEQkE1SWdNZ0FVa0VRQ0FBSUFFZ0Eyc1ErQWdGSUFNZ0FVc0VRQ0FCUVF4c0lBSnFJUUlnQkNFQkEwQWdBU0FDUndSQUlBRkJkR29pQVJCVkRBRUxDeUFBSUFJMkFnUUxDd3RlQVFOL0lBQW9BZ1FpQkNBQUtBSUFJZ0pyUVF3UU9TSURJQUZKQkVBZ0FDQUJJQU5yRVBZSUJTQURJQUZMQkVBZ0FVRU1iQ0FDYWlFQ0lBUWhBUU5BSUFFZ0FrY0VRQ0FCUVhScUlnRVEwd0lNQVFzTElBQWdBallDQkFzTEM1Y0JBUUYvSUFCQklHb2dBUkNOQ1NBQVFkd0FhaUFCRUhRb0FnQW9BZ1FnQVJCMEtBSUFLQUlJSUFFb0FoQWdBU2dDRkJERENDQUFJQUVRZENnQ0FDZ0NCRFlDQUNBQUlBRVFkQ2dDQUNnQ0NEWUNCQ0FBUVJCcUlBQW9BZ2dRK2doQkFDRUJBMEFnQVNBQUtBSVVJQUFvQWhBaUFtdEJEQkE1U1FSQUlBRkJER3dnQW1vZ0FDZ0NEQkQ1Q0NBQlFRRnFJUUVNQVFzTEMwQUJBWDhnQUVHUUFXb1FWU0FBUWR3QWFpSUJRU2hxRU5JQ0lBRkJIR29RVlNBQVFjZ0FhaEJWSUFCQlBHb1FWU0FBUVNCcUVOSUNJQUJCRUdvUWdRa0xKUUFnQUVFQVJ5QUJRUUJIY1FSL0lBRWdBRUgwaHE4RGFpZ0NBRFlDQUVFQUJVRi9Dd3NpQVFGL0lBQW9BZ2dpQWtFQUlBRkJBblFRUlJvZ0FDQUJRUUowSUFKcU5nSUlDNlVCQVFWL0l3WWhBaU1HUVNCcUpBWWdBQ2dDQ0NBQUtBSUVJZ05yUVFKMUlBRkpCRUJCLy8vLy93TWdBU0FESUFBb0FnQnJRUUoxYWlJRFNRUkFFQUFGSUFJZ0F5QUFLQUlJSUFBb0FnQWlCR3NpQlVFQmRTSUdJQVlnQTBrYlFmLy8vLzhESUFWQkFuVkIvLy8vL3dGSkd5QUFLQUlFSUFSclFRSjFJQUJCQ0dvUXlBRWdBaUFCRVA0SUlBQWdBaERrQVNBQ0VNY0JDd1VnQUNBQkVQWURDeUFDSkFZTElBQWdBRUVBUnlBQlFRQkhjUVIvSUFFZ0FDZ0NBRFlDQUVFQUJVRi9DeG9MUUFFQ2Z5QUFLQUlBSWdJRVFDQUFLQUlFSVFFRFFDQUJJQUpIQkVBZ0FVRjBhaUlCRU5NQ0RBRUxDeUFBSUFJMkFnUWdBQ2dDQ0JvZ0FDZ0NBQkE0Q3d1NUFRRUJmeUFBUVFBMkFnQWdBRUVBTmdJRUlBQkJDallDQ0NBQVFRbzJBZ3dnQUVFQU5nSVFJQUJCQURZQ0ZDQUFRUUEyQWhnZ0FFRUJPZ0FjSUFCQ0FEY0NJQ0FBUWdBM0FpZ2dBRUVBTmdJd0lBQkRBQUFBQURnQ05DQUFRd0FBSUVFNEFqZ2dBRUlBTndJOElBQkNBRGNDUkNBQVFnQTNBa3dnQUVNQUFCQkJPQUpZSUFCQjNBQnFFTVFJSUFCQmtBRnFJZ0ZCQURZQ0FDQUFRUUEyQXBRQklBQkJBRFlDbUFFZ0FFR0lKeEQzQXlBQlFTUVFod0VMb1FFQkEzOGpCaUVDSXdaQkVHb2tCaUFBS0FJSUlBRkxCRUFnQUNnQ0dDQUJJQUFvQWd4c2FpRUVJQUlrQmlBRUR3VWdBa0hBeUFOQjdjUUJFRGRCa3NVQkVEZEI3NklDRURkQjl3QVFQa0gyb2dJUU4wR0J4Z0VRTnlJRElBTW9BZ0JCZEdvb0FnQnFFRHNnQWtHQXpnTVFPaUlCS0FJQUtBSWNJUUFnQVVFS0lBQkJQM0ZCaWdGcUVRSUFJUUFnQWhBOElBTWdBQkJBSUFNUVB4QUFDMEVBQzhBS0FRWi9Jd1loQlNNR1FSQnFKQVlnQUNnQ0FFRUNSd1JBSUFWQndNZ0RRWnZBQVJBM1FjQzhBUkEzUWUraUFoQTNRZFlBRUQ1QjlxSUNFRGRCeU1BQkVEY2lBeUFES0FJQVFYUnFLQUlBYWhBN0lBVkJnTTRERURvaUJDZ0NBQ2dDSENFR0lBUkJDaUFHUVQ5eFFZb0JhaEVDQUNFRUlBVVFQQ0FESUFRUVFDQURFRDhRQUFzZ0FTZ0NBRUVDUndSQUlBVkJ3TWdEUWVMQUFSQTNRY0M4QVJBM1FlK2lBaEEzUWRjQUVENUI5cUlDRURkQnlNQUJFRGNpQXlBREtBSUFRWFJxS0FJQWFoQTdJQVZCZ000REVEb2lCQ2dDQUNnQ0hDRUdJQVJCQ2lBR1FUOXhRWW9CYWhFQ0FDRUVJQVVRUENBRElBUVFRQ0FERUQ4UUFBc2dBaWdDQUVFQ1J3UkFJQVZCd01nRFFaSEJBUkEzUWNDOEFSQTNRZStpQWhBM1FkZ0FFRDVCOXFJQ0VEZEJ5TUFCRURjaUF5QURLQUlBUVhScUtBSUFhaEE3SUFWQmdNNERFRG9pQkNnQ0FDZ0NIQ0VHSUFSQkNpQUdRVDl4UVlvQmFoRUNBQ0VFSUFVUVBDQURJQVFRUUNBREVEOFFBQXNnQUNnQ0VFRUJSd1JBSUFWQndNZ0RRY0RCQVJBM1FjQzhBUkEzUWUraUFoQTNRZGtBRUQ1QjlxSUNFRGRCNmNFQkVEY2lBeUFES0FJQVFYUnFLQUlBYWhBN0lBVkJnTTRERURvaUJDZ0NBQ2dDSENFR0lBUkJDaUFHUVQ5eFFZb0JhaEVDQUNFRUlBVVFQQ0FESUFRUVFDQURFRDhRQUFzZ0FTZ0NFRUVCUndSQUlBVkJ3TWdEUVk3Q0FSQTNRY0M4QVJBM1FlK2lBaEEzUWRvQUVENUI5cUlDRURkQjZjRUJFRGNpQXlBREtBSUFRWFJxS0FJQWFoQTdJQVZCZ000REVEb2lCQ2dDQUNnQ0hDRUdJQVJCQ2lBR1FUOXhRWW9CYWhFQ0FDRUVJQVVRUENBRElBUVFRQ0FERUQ4UUFBc2dBaWdDRUVFQlJ3UkFJQVZCd01nRFFibkNBUkEzUWNDOEFSQTNRZStpQWhBM1Fkc0FFRDVCOXFJQ0VEZEI2Y0VCRURjaUF5Z0NBRUYwYWlnQ0FDQURhaEE3SUFWQmdNNERFRG9pQkNnQ0FDZ0NIQ0VHSUFSQkNpQUdRVDl4UVlvQmFoRUNBQ0VFSUFVUVBDQURJQVFRUUNBREVEOFFBQXNnQUNnQ0JDQUNLQUlFUndSQUlBVkJ3TWdEUWVUQ0FSQTNRY0M4QVJBM1FlK2lBaEEzUWR3QUVENUI5cUlDRURkQmxNTUJFRGNpQXlBREtBSUFRWFJxS0FJQWFoQTdJQVZCZ000REVEb2lCQ2dDQUNnQ0hDRUdJQVJCQ2lBR1FUOXhRWW9CYWhFQ0FDRUVJQVVRUENBRElBUVFRQ0FERUQ4UUFBc2dBQ2dDQ0NBQ0tBSUlSd1JBSUFWQndNZ0RRYlREQVJBM1FjQzhBUkEzUWUraUFoQTNRZDBBRUQ1QjlxSUNFRGRCNXNNQkVEY2lBeUFES0FJQVFYUnFLQUlBYWhBN0lBVkJnTTRERURvaUJDZ0NBQ2dDSENFR0lBUkJDaUFHUVQ5eFFZb0JhaEVDQUNFRUlBVVFQQ0FESUFRUVFDQURFRDhRQUFzZ0FTZ0NCQ0FDS0FJRVJ3UkFJQVZCd01nRFFZZkVBUkEzUWNDOEFSQTNRZStpQWhBM1FkNEFFRDVCOXFJQ0VEZEJsTU1CRURjaUF5QURLQUlBUVhScUtBSUFhaEE3SUFWQmdNNERFRG9pQkNnQ0FDZ0NIQ0VHSUFSQkNpQUdRVDl4UVlvQmFoRUNBQ0VFSUFVUVBDQURJQVFRUUNBREVEOFFBQXNnQVNnQ0NDQUNLQUlJUndSQUlBVkJ3TWdEUWJuRUFSQTNRY0M4QVJBM1FlK2lBaEEzUWQ4QUVENUI5cUlDRURkQjVzTUJFRGNpQXlBREtBSUFRWFJxS0FJQWFoQTdJQVZCZ000REVEb2lCQ2dDQUNnQ0hDRUdJQVJCQ2lBR1FUOXhRWW9CYWhFQ0FDRUVJQVVRUENBRElBUVFRQ0FERUQ4UUFBdEJBQ0VEQTBBZ0F5QUJLQUlJU1FSQUlBQWdBeENEQ1NFR0lBRWdBeEJRSVFjZ0FpQURFRkFoQ0VFQUlRUURRQ0FFSUFFb0FnUkpCRUFnQkVFQ2RDQUdhaUFFUVFKMElBZHFLZ0lBSUFSQkFuUWdDR29xQWdDVE9BSUFJQVJCQVdvaEJBd0JDd3NnQTBFQmFpRUREQUVMQ3lBRkpBWUw1Z01CQkg4akJpRUVJd1pCRUdva0JpQUFLQUlFSUFBb0FnQkdCRUFnQkVIQXlBTkJpTDRCRURkQndMd0JFRGRCNzZJQ0VEZEJ5QUFRUGtIMm9nSVFOMEd5dmdFUU55SUNJQUlvQWdCQmRHb29BZ0JxRURzZ0JFR0F6Z01RT2lJREtBSUFLQUljSVFVZ0EwRUtJQVZCUDNGQmlnRnFFUUlBSVFNZ0JCQThJQUlnQXhCQUlBSVFQeEFBQ3lBQktBSVFRUUJNQkVBZ0JFSEF5QU5CMjc0QkVEZEJ3THdCRURkQjc2SUNFRGRCeVFBUVBrSDJvZ0lRTjBHTXZ3RVFOeUlDSUFJb0FnQkJkR29vQWdCcUVEc2dCRUdBemdNUU9pSURLQUlBS0FJY0lRVWdBMEVLSUFWQlAzRkJpZ0ZxRVFJQUlRTWdCQkE4SUFJZ0F4QkFJQUlRUHhBQUN5QUJCRUFnQVVIdzhRQkIrUEVBRU9RRUJFQkJBQ0VDQTBBZ0FpQUFLQUlNU1FSQVFRQWhBd05BSUFNZ0FDZ0NFRWtFUUNBQUtBSUFJQU1nQWlBQUtBSVFiR3BCQlhScUlBRWdBaUFERUt3QklBRWdBaUFEUVFGcUlnTVFyQUVRaEFrTUFRc0xJQUpCQVdvaEFnd0JDd3NnQkNRR0R3c0xJQVJCd01nRFFiQy9BUkEzUWNDOEFSQTNRZStpQWhBM1Fjb0FFRDVCOXFJQ0VEZEIrTDhCRURjaUFDQUFLQUlBUVhScUtBSUFhaEE3SUFSQmdNNERFRG9pQVNnQ0FDZ0NIQ0VDSUFGQkNpQUNRVDl4UVlvQmFoRUNBQ0VCSUFRUVBDQUFJQUVRUUNBQUVEOFFBQXRDQVFKL0lBQW9BZ1FoQVFOQUlBQW9BZ2dpQWlBQlJ3UkFJQUFnQWtGZ2FpSUNOZ0lJSUFJUTNRRU1BUXNMSUFBb0FnQWlBUVJBSUFBb0Fnd2FJQUVRT0FzTFNnRUNmeUFBQkg4Z0FFR0loNjhEYWlJQktBSUFJZ0lFUUNBQ0VFa2dBVUVBTmdJQUN5QUFRZUNHcHdKcUtBSUFFRGdnQUVIa2hxY0NhaWdDQUJBNElBQVFPRUVBQlVGL0N4b0xrQUVCQW44Z0FDZ0NBQ0VESUFBb0FnUWhBZ05BSUFJZ0EwY0VRQ0FCS0FJRVFXQnFJQUpCWUdvaUFoQ3FCeUFCSUFFb0FnUkJZR28yQWdRTUFRc0xJQUFvQWdBaEFpQUFJQUVvQWdRMkFnQWdBU0FDTmdJRUlBQW9BZ1FoQWlBQUlBRW9BZ2cyQWdRZ0FTQUNOZ0lJSUFBb0FnZ2hBaUFBSUFFb0FndzJBZ2dnQVNBQ05nSU1JQUVnQVNnQ0JEWUNBQXNyQVFGL0lBQW9BZ2doQWdOQUlBSVF1Z01nQUNBQUtBSUlRU0JxSWdJMkFnZ2dBVUYvYWlJQkRRQUxDM0lCQVg4Z0FFRUFOZ0lNSUFBZ0F6WUNFQ0FCQkVBZ0FVSC8vLzgvU3dSQVFRZ1FCU0lERUlnQklBTkJ0SXNCTmdJQUlBTkIrUGNBUVJZUUJBVWdBVUVGZEJCUklRUUxDeUFBSUFRMkFnQWdBQ0FDUVFWMElBUnFJZ0kyQWdnZ0FDQUNOZ0lFSUFBZ0FVRUZkQ0FFYWpZQ0RBc3JBUUYvSUFBb0FnUWhBZ05BSUFJUXVnTWdBQ0FBS0FJRVFTQnFJZ0kyQWdRZ0FVRi9haUlCRFFBTEM2SUJBUVYvSXdZaEFpTUdRU0JxSkFZZ0FDZ0NDQ0FBS0FJRUlnTnJRUVYxSUFGSkJFQkIvLy8vUHlBQklBTWdBQ2dDQUd0QkJYVnFJZ05KQkVBUUFBVWdBaUFESUFBb0FnZ2dBQ2dDQUNJRWF5SUZRUVIxSWdZZ0JpQURTUnRCLy8vL1B5QUZRUVYxUWYvLy94OUpHeUFBS0FJRUlBUnJRUVYxSUFCQkNHb1FpZ2tnQWlBQkVJa0pJQUFnQWhDSUNTQUNFSVlKQ3dVZ0FDQUJFSXNKQ3lBQ0pBWUx3d0lCQ0g4akJpRUVJd1pCRUdva0JpQUJLQUlJSUFFb0FnUnJRUVYxUlFSQUlBUkJ3TWdEUVpXOEFSQTNRY0M4QVJBM1FlK2lBaEEzUVRVUVBrSDJvZ0lRTjBISXZRRVFOeUlDSUFJb0FnQkJkR29vQWdCcUVEc2dCRUdBemdNUU9pSURLQUlBS0FJY0lRVWdBMEVLSUFWQlAzRkJpZ0ZxRVFJQUlRTWdCQkE4SUFJZ0F4QkFJQUlRUHhBQUN5QUJRUUJCQUJDc0FTZ0NBQ0VESUFGQkFFRUFFS3dCS0FJRUlRVWdBVUVBUVFBUXJBRW9BZ2doQmlBQUlBRW9BaEEyQWd3Z0FDQUJLQUlVUVg5cUlnRTJBaEFnQUNBQklBQW9BZ3hzRU5RQ1FRQWhBUU5BSUFFZ0FDZ0NERWtFUUNBRklBRjJJUWNnQmlBQmRpRUlRUUFoQWdOQUlBSWdBQ2dDRUNJSlNRUkFJQUFvQWdBZ0FpQUJJQWxzYWtFRmRHb2dBeUFISUFoQkFSQzNBaUFDUVFGcUlRSU1BUXNMSUFGQkFXb2hBUXdCQ3dzZ0JDUUdDM01CQkg4akJpRURJd1pCRUdva0JpQURRUWhxSVFRZ0FBUkFJQUFRWUNFQ1FZRFJBaEJnSUFKQkFtcHFFRVFpQWdSQUlBUWdBRFlDQUNBRVFZRFJBallDQkNBQ1FZKzhBU0FFRUx3QklBSWdBUkN3QVNFRklBSVFPQVZCQUVFRFFibllBaUFERUQxQkFSQUJDd3NnQXlRR0lBVUx2UUlCQ0g4akJpRUtJd1pCRUdva0JpQURJQUZCQkJBNUlnczJBZ0FnQkNBQ1FRUVFPU0lNTmdJQUlBc2dER3dRUkNJRFJRUkFRUUJCQTBHNTJBSWdDaEE5UVFFUUFRc2dBeUVDQTBBZ0NDQU1TQVJBUVFBaENTQUFJQUVnQ0VFQ2RDSUZiR29oQkNBQUlBRWdCVUVEY214cUlRWWdBQ0FCSUFWQkFuSnNhaUVISUFBZ0FTQUZRUUZ5YkdvaEJRTkFJQWtnQzBnRVFDQUNJQVl0QUFNZ0JpMEFBaUFHTFFBQklBWXRBQUFnQnkwQUF5QUhMUUFDSUFjdEFBRWdCeTBBQUNBRkxRQURJQVV0QUFJZ0JTMEFBU0FGTFFBQUlBUXRBQU1nQkMwQUFpQUVMUUFBSUFRdEFBRnFhbXBxYW1wcWFtcHFhbXBxYW1wQkVCQTVPZ0FBSUFsQkFXb2hDU0FFUVFScUlRUWdCa0VFYWlFR0lBZEJCR29oQnlBRlFRUnFJUVVnQWtFQmFpRUNEQUVMQ3lBSVFRRnFJUWdNQVFzTElBb2tCaUFEQ3ljQUlBQUVmeUFBUWZpR3J3TnFRUWMyQWdBZ0FFSDhocThEYWtFQU5nSUFRUUFGUVg4TEdndi9BUUVIZnlNR0lRa2pCa0VRYWlRR0lBTWdBVUVERURraUNqWUNBQ0FFSUFKQkF4QTVJZ3MyQWdBZ0NpQUxiQkJFSWdORkJFQkJBRUVEUWJuWUFpQUpFRDFCQVJBQkN5QURJUUlEUUNBSElBdElCRUJCQUNFSUlBQWdBU0FIUVFOc0lnVnNhaUVFSUFBZ0FTQUZRUUpxYkdvaEJpQUFJQUVnQlVFQmFteHFJUVVEUUNBSUlBcElCRUFnQWlBR0xRQUNJQVl0QUFFZ0JpMEFBQ0FGTFFBQ0lBVXRBQUVnQlMwQUFDQUVMUUFDSUFRdEFBQWdCQzBBQVdwcWFtcHFhbXBxUVFrUU9Ub0FBQ0FJUVFGcUlRZ2dCRUVEYWlFRUlBWkJBMm9oQmlBRlFRTnFJUVVnQWtFQmFpRUNEQUVMQ3lBSFFRRnFJUWNNQVFzTElBa2tCaUFEQzlBQkFRWi9Jd1loQ0NNR1FSQnFKQVlnQXlBQlFRSVFPU0lKTmdJQUlBUWdBa0VDRURraUNqWUNBQ0FKSUFwc0VFUWlBMFVFUUVFQVFRTkJ1ZGdDSUFnUVBVRUJFQUVMUVFBaEJDQURJUUlEUUNBRUlBcElCRUJCQUNFSElBQWdBU0FFUVFGMElnVnNhaUVHSUFBZ0FTQUZRUUZ5YkdvaEJRTkFJQWNnQ1VnRVFDQUNJQVV0QUFFZ0JTMEFBQ0FHTFFBQUlBWXRBQUZxYW1wQkFuWTZBQUFnQjBFQmFpRUhJQVpCQW1vaEJpQUZRUUpxSVFVZ0FrRUJhaUVDREFFTEN5QUVRUUZxSVFRTUFRc0xJQWdrQmlBREM2WURBUWwvSXdZaEN5TUdRUkJxSkFZZ0F5QUJRUU1RT1NJTVFRRjBJZ2syQWdBZ0JDQUNRUU1RT1NJTlFRRjBJZ0kyQWdBZ0FpQUpiQkJFSWdSRkJFQkJBRUVEUWJuWUFpQUxFRDFCQVJBQkN5QUVJZ0loQXdOQUlBZ2dEVWdFUUVFQUlRb2dBQ0FCSUFoQkEyd2lCa0VDYW14cUlRY2dBQ0FCSUFaQkFXcHNhaUVGSUFBZ0FTQUdiR29oQmlBRElBbHFJUU1EUUNBS0lBeElCRUFnQWlBR0xRQUFJQVl0QUFGQkFYWnFJQVV0QUFCQkFYWnFJQVV0QUFGQkFuWnFRUUowUVFrUVNEb0FBQ0FESUFjdEFBQWdCUzBBQUVFQmRpQUZMUUFCUVFKMmFrRVlkRUVZZFVIL0FYRnFJQWN0QUFGQkFYWnFRUUowUVFrUVNEb0FBQ0FDSUFZdEFBSWdCaTBBQVVFQmRtb2dCUzBBQVVFQ2Rtb2dCUzBBQWtFQmRtcEJBblJCQ1JCSU9nQUJJQU1nQnkwQUFpQUZMUUFCUVFKMklBVXRBQUpCQVhacVFSaDBRUmgxUWY4QmNTQUhMUUFCUVFGMmFtcEJBblJCQ1JCSU9nQUJJQXBCQVdvaENpQUhRUU5xSVFjZ0JVRURhaUVGSUFaQkEyb2hCaUFDUVFKcUlRSWdBMEVDYWlFRERBRUxDeUFJUVFGcUlRZ2dBaUFKYWlFQ0RBRUxDeUFMSkFZZ0JBdE9BUUYvSXdZaEJTTUdRUkJxSkFZZ0F5QUJOZ0lBSUFRZ0FqWUNBQ0FCSUFKc0lnRVFSQ0lDQkVBZ0FpQUFJQUVRVEJvZ0JTUUdJQUlQQlVFQVFRTkJ1ZGdDSUFVUVBVRUJFQUVMUVFBTGFnQUNmd0pBQWtBQ1FBSkFBa0FnQTBFQmF3NEZBQUlFQXdFRUN5QUFJQUVnQWlBRUlBVVFsQWtNQkFzZ0FDQUJJQUlnQkNBRkVKTUpEQU1MSUFBZ0FTQUNJQVFnQlJDU0NRd0NDeUFBSUFFZ0FpQUVJQVVRa1FrTUFRc2dBQ0FCSUFJZ0JDQUZFSThKQ3d2RkJBSUxmd0Y5SXdZaENDTUdRZkFCYWlRR0lBaEIwQUZxSVFrZ0NFSElBV29oQmlBSVFlQUJhaUVNSUFoQjFBRnFJUW9nQ0VIZ0FHb2hEaUFJUWNBQmFpRVBJQUVvQWdRZ0FTZ0NBQ0lCYXlJSFFRTjFJZ3RCQkVrRWYwRi9CUUovSUFkQkFYUVFSQ0lIUlFSQVFRQkJBMEc1MkFJZ0JoQTlRUUVRQVFzZ0MwRVliQkJFSWdaRkJFQkJBRUVEUWJuWUFpQUpFRDFCQVJBQkN5QURLQUlBSVFNZ0FpZ0NBQ0VKUVFBaEFnTkFJQUlnQzBjRVFDQUNRUVIwSUFkcUlBSkJBM1FnQVdvb0FnQWlEVUVVYkNBRGFpb0NBTHM1QXdBZ0FrRUVkQ0FIYWlBTlFSUnNJQU5xS2dJRXV6a0RDQ0FDUVJoc0lBWnFJQUpCQTNRZ0FXb29BZ1FpRFVFTWJDQUphaW9DQUxzNUF3QWdBa0VZYkNBR2FpQU5RUXhzSUFscUtnSUV1emtEQ0NBQ1FSaHNJQVpxUkFBQUFBQUFBQUFBT1FNUUlBSkJBV29oQWd3QkN3c2dDaUFMTmdJSUlBb2dCellDQUNBS0lBWTJBZ1FnQUVFSWFpSUFJQWNnQmlBTElBNFFtQVJCQUVnRVFDQUhFRGdnQmhBNFFYOE1BUXNnRENBQUVPTUNJZ0EyQWdBZ0FFVUVRQ0FIRURnZ0JoQTRRWDhNQVFzZ0FDQUtJQTRnQ0NBUEVPb0JRUUJJQkg4Z0J4QTRJQVlRT0NBTUVPSUNRWDhGUVFBaEFBTkFJQUJCQTBjRVFFRUFJUUVEUUNBQlFRUkhCRUFnQUVFRWRDQUVhaUFCUVFKMGFpQUFRUVYwSUFocUlBRkJBM1JxS3dNQXRqZ0NBQ0FCUVFGcUlRRU1BUXNMSUFCQkFXb2hBQXdCQ3dzZ0RCRGlBaUFIRURnZ0JoQTRJQVVnRHlzREFMWWlFVGdDQUNBUlF3QUFJRUZlUVI5MFFSOTFDd3NMSVJBZ0NDUUdJQkFMclF3REMzOENmUUY4SXdZaEJpTUdRVEJxSkFZZ0JrRVFhaUVISUFaQkNHb2hCU0FHUVN4cUlRZ2dCa0VvYWlFSklBQkJBRWNnQVVFQVIzRUVmd0ovSUFBb0Fnd2hCQ0FBS0FJUUlRSUNmeUFBS0FJVUlnTkJBVVlpQ2dSL0lBRWhDRUVBQlNBQklBUWdBaUFESUFnZ0NSQ1ZDU0lJQkg5QkFRVkJmd3dEQ3dzaERDQUFLQUlBSUFnZ0JDQUNFSVFJSUFBZ0FDZ0NBQkM1QWlJQktBSUVJQUVvQWdCcklnRkJGQkE1SWdRMkFqQWdBUVJBQWtBZ0FDQUFLQUlzSWdFRWZ5QUJFRGdnQUNnQ01BVWdCQXRCQTNRUVJDSUJOZ0lzSUFGRkJFQkJBRUVEUWJuWUFpQUZFRDFCQVJBQkN5QUFLQUlBRUxrQ0lRUUNRQ0FLQkVBZ0FFRUVhaUVCUVFBaEFnTkFJQUlnQUNnQ01FNE5BaUFFS0FJQUlnTWdBa0VVYkdvcUFnQWhEU0FDUVJSc0lBTnFLZ0lFSVE0Z0FDZ0NCQ0lEQkVBZ0EwRzRBV29nRFNBT0lBQW9BaXdpQXlBQ1FRTjBhaUFDUVFOMElBTnFRUVJxRUtZQkdnVWdBQ2dDTENJRElBSkJBM1JxSUEwNEFnQWdBa0VEZENBRGFpQU9PQUlFQ3lBQ1FRRnFJUUlNQUFBTEFBVUNRQUpBQWtBQ1FDQURRUUpyRGdRQkF3SUFBd3NnQUVFRWFpRUJRUUFoQWdOQUlBSWdBQ2dDTUU0TkJTQUVLQUlBSWdNZ0FrRVViR29xQWdBaERTQUNRUlJzSUFOcUtnSUVJUTRnQUNnQ0JDSURCRUFnQTBHNEFXb2dEVU1BQU1BL2xDQU9Rd0FBd0QrVUlBQW9BaXdpQXlBQ1FRTjBhaUFDUVFOMElBTnFRUVJxRUtZQkdnVWdBQ2dDTENJRElBSkJBM1JxSUExREFBREFQNVE0QWdBZ0FrRURkQ0FEYWlBT1F3QUF3RCtVT0FJRUN5QUNRUUZxSVFJTUFBQUxBQXNnQUVFRWFpRUJRUUFoQWdOQUlBSWdBQ2dDTUU0TkJDQUVLQUlBSWdNZ0FrRVViR29xQWdBaERTQUNRUlJzSUFOcUtnSUVJUTRnQUNnQ0JDSURCRUFnQTBHNEFXb2dEVU1BQUFCQWxDQU9Rd0FBQUVDVUlBQW9BaXdpQXlBQ1FRTjBhaUFDUVFOMElBTnFRUVJxRUtZQkdnVWdBQ2dDTENJRElBSkJBM1JxSUExREFBQUFRSlE0QWdBZ0FrRURkQ0FEYWlBT1F3QUFBRUNVT0FJRUN5QUNRUUZxSVFJTUFBQUxBQXNnQUVFRWFpRUJRUUFoQWdOQUlBSWdBQ2dDTUU0TkF5QUVLQUlBSWdNZ0FrRVViR29xQWdBaERTQUNRUlJzSUFOcUtnSUVJUTRnQUNnQ0JDSURCRUFnQTBHNEFXb2dEVU1BQUVCQWxDQU9Rd0FBUUVDVUlBQW9BaXdpQXlBQ1FRTjBhaUFDUVFOMElBTnFRUVJxRUtZQkdnVWdBQ2dDTENJRElBSkJBM1JxSUExREFBQkFRSlE0QWdBZ0FrRURkQ0FEYWlBT1F3QUFRRUNVT0FJRUN5QUNRUUZxSVFJTUFBQUxBQXNnQUVFRWFpRUJRUUFoQWdOQUlBSWdBQ2dDTUU0TkFpQUVLQUlBSWdNZ0FrRVViR29xQWdBaERTQUNRUlJzSUFOcUtnSUVJUTRnQUNnQ0JDSURCRUFnQTBHNEFXb2dEVU1BQUlCQWxDQU9Rd0FBZ0VDVUlBQW9BaXdpQXlBQ1FRTjBhaUFDUVFOMElBTnFRUVJxRUtZQkdnVWdBQ2dDTENJRElBSkJBM1JxSUExREFBQ0FRSlE0QWdBZ0FrRURkQ0FEYWlBT1F3QUFnRUNVT0FJRUN5QUNRUUZxSVFJTUFBQUxBQXNBQ3lBQVFUUnFJUVJCQUNFREEwQWdBeUFBS0FJNElnSk9CRUFnQkNFQUlBSWhBUXdDQ3lBRUtBSUFJZ0lnQTBIRUFHeHFJQUFvQWlRZ0EwRU1iR29vQWdnMkFqQWdBMEhFQUd3Z0FtcEJmellDUENBRFFjUUFiQ0FDYWtGQWF5Z0NBRVVFUUNBQUtBSUFLQUlBS0FJQVFReHFJUUlnQUNnQ0FDZ0NBQ2dDQUNnQ0dDSUpRUUJPQkVBZ0FTZ0NBQ0FDSUFBb0FnQWdDUkRJQnlBQUtBSUFFTGtDSUFRb0FnQWlCU0FEUWNRQWJHb2dBMEhFQUd3Z0JXcEJOR29RbGdsRkJFQWdCQ2dDQUNJRklBTkJ4QUJzYWtFQU5nSThJQU5CeEFCc0lBVnFJQUlvQWdRZ0FpZ0NBR3RCQTNVaUFqWUNPQ0FEUWNRQWJDQUZhaUFBUVR4cUlBbEJBblJxS0FJQU5nSXdJQU5CeEFCc0lBVnFLZ0kwdXlFUElBY2dBellDQUNBSElBSTJBZ1FnQnlBQ05nSUlJQWNnRHprREVFRUFRUUZCNTdzQklBY1FQUXNMQ3lBRFFRRnFJUU1NQUFBTEFBc0ZJQUFvQWpnaEFTQUFJZ1JCTkdvaEFFRUFJUUlEUUNBQ0lBRklCRUFnQkNnQ05DQUNRY1FBYkdwQmZ6WUNQQ0FDUVFGcUlRSU1BUXNMQzBFQUlRSURRQ0FDSUFGSUJFQWdBQ2dDQUNBQ1FjUUFiR3BCUUd0QkFEWUNBQ0FDUVFGcUlRSU1BUXNMSUF3TEJFQWdDQkE0QzBFQUN3VkJBRUVEUWJ1N0FTQUdFRDFCQUFzYUlBWWtCZ3NHQUNBQUpBWUxQd0VDZnlBQUtBSUVJUUlnQUNnQ0NDRUJBMEFnQVNBQ1J3UkFJQUFnQVVGMGFpSUJOZ0lJREFFTEN5QUFLQUlBSWdFRVFDQUFLQUlNR2lBQkVEZ0xDNWNCQVFSL0lBRkJCR29pQXlnQ0FDRUNJQU1nQUNnQ0JDQUFLQUlBSWdScklnVkJkQkE1UVF4c0lBSnFJZ0kyQWdBZ0JVRUFTZ1JBSUFJZ0JDQUZFRXdhSUFNb0FnQWhBZ3NnQUNnQ0FDRUVJQUFnQWpZQ0FDQURJQVEyQWdBZ0FDZ0NCQ0VDSUFBZ0FTZ0NDRFlDQkNBQklBSTJBZ2dnQUNnQ0NDRUNJQUFnQVNnQ0REWUNDQ0FCSUFJMkFnd2dBU0FES0FJQU5nSUFDNVFCQVFWL0l3WWhBaU1HUVNCcUpBWkIvLy8vL3djZ0FDZ0NCQ0FBS0FJQWEwRUJhaUlEU1FSQUVBQUZJQUlnQXlBQUtBSUlJQUFvQWdBaUJHc2lCVUVCZENJR0lBWWdBMGtiUWYvLy8vOEhJQVZCLy8vLy93TkpHeUFBS0FJRUlBUnJJQUJCQ0dvUTJBSWdBaWdDQ0NBQkxBQUFPZ0FBSUFJZ0FpZ0NDRUVCYWpZQ0NDQUFJQUlRMXdJZ0FoRFdBaUFDSkFZTEM2d0JBUVYvSXdZaEFpTUdRU0JxSkFaQjFhclZxZ0VnQUNnQ0JDQUFLQUlBYTBFTUVEbEJBV29pQTBrRVFCQUFCU0FDSUFNZ0FDZ0NDQ0FBS0FJQUlnUnJRUXdRT1NJRlFRRjBJZ1lnQmlBRFNSdEIxYXJWcWdFZ0JVR3ExYXJWQUVrYklBQW9BZ1FnQkd0QkRCQTVJQUJCQ0dvUTFRSWdBaWdDQ0NJRElBRXBBZ0EzQWdBZ0F5QUJLQUlJTmdJSUlBSWdBaWdDQ0VFTWFqWUNDQ0FBSUFJUW1na2dBaENaQ1NBQ0pBWUxDN1VCQVFWL0l3WWhBaU1HUVNCcUpBWkJ6Sm16NWdBZ0FDZ0NCQ0FBS0FJQWEwRVVFRGxCQVdvaUEwa0VRQkFBQlNBQ0lBTWdBQ2dDQ0NBQUtBSUFJZ1JyUVJRUU9TSUZRUUYwSWdZZ0JpQURTUnRCekptejVnQWdCVUhtekprelNSc2dBQ2dDQkNBRWEwRVVFRGtnQUVFSWFoRDZBeUFDS0FJSUlnTWdBU2tDQURjQ0FDQURJQUVwQWdnM0FnZ2dBeUFCS0FJUU5nSVFJQUlnQWlnQ0NFRVVhallDQ0NBQUlBSVErUU1nQWhENEF5QUNKQVlMQzRjTUFnOS9BbjBqQmlFSEl3WkI4QUJxSkFZZ0IwRXdhaUVQSUFkQktHb2hEU0FIUVNCcUlRNGdCMEVZYWlFTUlBZEJFR29oQkNBSFFRaHFJUU1nQjBIZ0FHb2hDQ0FIUWRRQWFpRUtJQWRCeUFCcUlRc2dCMEUwYWlFSklBQkJBRWNnQVVFQVIzRUVmd0ovSUFFb0FnUWlBa1VFUUVFQVFRTkJqN3NCSUFNUVBVRi9EQUVMQWtBQ1FDQUFLQUljSWdORkRRQWdBeEE0SUFFb0FnUWlBZzBBSUFCQkFEWUNIRUVBSVFJTUFRc2dBQ0FDUVlRQmJCQkVJZ00yQWh3Z0EwVUVRRUVBUVFOQnVkZ0NJQVFRUFVFQkVBRUxRUUFoQkFOQUlBUWdBa2dFUUNBQUtBSWNJQVJCaEFGc2FpQUJLQUlBSUFSQmhBRnNha0dFQVJCTUdpQUVRUUZxSVFRZ0FTZ0NCQ0VDREFFTEN3c2dBQ0FDTmdJZ0lBQW9BaVFpQWdSQVFRQWhBd05BSUFNZ0FDZ0NLRWdFUUNBRFFReHNJQUpxS0FJQUlnUUVRQ0FFRURnZ0FDZ0NKQ0VDQ3lBRFFRRnFJUU1NQVFzTElBSVFPQXNnQVNnQ0RDSUNCRUFDUUNBQUlBSkJER3dRUkNJRU5nSWtJQVJGQkVCQkFFRURRYm5ZQWlBTUVEMUJBUkFCQ3dOQUFrQWdCU0FDVGdSQUlBSWhCZ3dEQ3lBQUtBSWtJZ01nQlVFTWJHb2dBU2dDQ0NJRUlBVkJER3hxS0FJSU5nSUlJQVZCREd3Z0Eyb2dCVUVNYkNBRWFpSU1LQUlFTmdJRUlBd29BZ1FpREFSQUlBVkJER3dnQTJvZ0RFRU1iQkJFSWdJMkFnQWdBa1VOQVVFQUlRTWdCQ0VDQTBBZ0F5QUZRUXhzSUFKcUtBSUVTQVJBSUFBb0FpUWdCVUVNYkdvb0FnQWdBMEVNYkdvaUJDQUZRUXhzSUFKcUtBSUFJQU5CREd4cUlnSXBBZ0EzQWdBZ0JDQUNLQUlJTmdJSUlBTkJBV29oQXlBQktBSUlJUUlNQVFzTElBRW9BZ3doQWdVZ0JVRU1iQ0FFYWtFQU5nSUFDeUFGUVFGcUlRVU1BUXNMUVFCQkEwRzUyQUlnRGhBOVFRRVFBUXNGSUFCQkFEWUNKQXNnQUNBR05nSW9JQUFvQWpRaUFnUkFJQUlRT0NBQVFRQTJBalFnQUVFQU5nSTRDeUFCS0FJTUlnRkJBRW9FUUFKQUlBQWdBVFlDT0NBQUlBRkJ4QUJzRUVRaUFqWUNOQ0FDUlFSQVFRQkJBMEc1MkFJZ0RSQTlRUUVRQVF0QkFDRUdBMEFnQVNBR1JnMEJJQVpCeEFCc0lBSnFRVUJyUVFBMkFnQWdCa0VCYWlFR0RBQUFDd0FMQ3lBQUtBSWdJZzBFZjBFQUlRWkJBQ0VCQTBCQkFDQUdJQUFvQWloT0RRSWFRUUFoQkFOQUlBUWdBQ2dDSkNBR1FReHNhaWdDQkVnRVFDQUlRUUEyQWdBZ0NFRUFOZ0lFSUFoQkFEWUNDQ0FLUVFBMkFnQWdDa0VBTmdJRUlBcEJBRFlDQ0NBTFFRQTJBZ0FnQzBFQU5nSUVJQXRCQURZQ0NFRUFJUUlEUUNBQ0lBMUlCRUFnQUNnQ0hDSURJQUpCaEFGc2FpZ0NnQUVnQUNnQ0pDSUZJQVpCREd4cUtBSUFJQVJCREd4cUtBSUlSZ1JBSUFKQmhBRnNJQU5xS0FKOElBWkJER3dnQldvb0FnaEdCRUFDUUNBSklBSkJoQUZzSUFOcUtnSUFJQUpCaEFGc0lBTnFLZ0lFSUFKQmhBRnNJQU5xS2dKd0lBSkJoQUZzSUFOcUtnSjBJQUpCaEFGc0lBTnFLQUo0UVFCSEVQd0RJQWdvQWdRaUF5QUlLQUlJU1FSQUlBTWdDU2tDQURjQ0FDQURJQWtwQWdnM0FnZ2dBeUFKS0FJUU5nSVFJQWdnQTBFVWFqWUNCQVVnQ0NBSkVKMEpDeUFBS0FJY0lnTWdBa0dFQVd4cUtnSUlJUkVnQWtHRUFXd2dBMm9xQWd3aEVpQUpJQkU0QWdBZ0NTQVNPQUlFSUFsREFBQUFBRGdDQ0NBS0tBSUVJZ01nQ2lnQ0NFa0VRQ0FESUFrcEFnQTNBZ0FnQXlBSktBSUlOZ0lJSUFvZ0NpZ0NCRUVNYWpZQ0JBVWdDaUFKRUp3SkMwRUFJUU1EUUNBRFFlQUFUdzBCSUFNZ0FDZ0NIQ0FDUVlRQmJHcEJFR3BxSVFVZ0N5Z0NCQ0lPSUFzb0FnaEdCRUFnQ3lBRkVKc0pCU0FPSUFVc0FBQTZBQUFnQ3lBTEtBSUVRUUZxTmdJRUN5QURRUUZxSVFNTUFBQUxBQXNMQ3lBQ1FRRnFJUUlNQVFzTElBOGdDQ2dDQkNBSUtBSUFhMEVVRURrMkFnQkJBRUVCUWJDN0FTQVBFRDBnQUVFOGFpQUJRUUowYWlBQUtBSWtJZ0lnQmtFTWJHb29BZ2cyQWdBZ0FDZ0NBQ0FJSUFzZ0NpQUdRUXhzSUFKcUtBSUFJZ0lnQkVFTWJHb29BZ0FnQkVFTWJDQUNhaWdDQkNBQkVKSUlJQXNRVlNBS0VGVWdDQkRaQWlBRVFRRnFJUVFnQVVFQmFpRUJEQUVMQ3lBR1FRRnFJUVlNQUFBTEFBVkJBQXNMQlVFQVFRTkIzN29CSUFjUVBVRi9DeUVRSUFja0JpQVFDL1VCQVFaL0l3WWhBeU1HUVJCcUpBWWdBMEVNYWlFR0lBTWdBQkNZQWlBRExBQUFCRUFnQXlBQUlBQW9BZ0JCZEdvaUJDZ0NBR29vQWhnMkFnZ2dBQ0FFS0FJQWFpSUVLQUlFSVFkQmZ5QUVLQUpNRUVFRVFDQUdJQVFRT3lBR1FZRE9BeEE2SWdVb0FnQW9BaHdoQ0NBRlFTQWdDRUUvY1VHS0FXb1JBZ0FoQlNBR0VEd2dCQ0FGUVJoMFFSaDFJZ1UyQWt3RklBUW9Ba3doQlFzZ0JpQURLQUlJTmdJQUlBWWdBU0FCSUFKcUlnSWdBU0FIUWJBQmNVRWdSaHNnQWlBRUlBVkIvd0Z4RUpjQlJRUkFJQUFnQUNnQ0FFRjBhaWdDQUdvaUFTQUJLQUlRUVFWeUVPNEJDd3NnQXhDWEFpQURKQVlnQUF1N0FRRUZmeU1HSVFZakJrRVFhaVFHSUFBRVFBSkFJQUFvQWdRaEF3TkFJQUlnQTBnRVFDQUFLQUlBSUFKQmhBRnNhaUlFS0FKOElnVkJmMFlnQlVGL1NuSUVRQ0FFSUFFMkFud0xJQUpCQVdvaEFnd0JDd3NnQUNnQ0RDRURRUUFoQWdOQUlBSWdBMDRFUUVFQUlRQU1BZ3NnQUNnQ0NDQUNRUXhzYWlJRUtBSUlJZ1ZCZjBZZ0JVRi9TbklFUUNBRUlBRTJBZ2dMSUFKQkFXb2hBZ3dBQUFzQUN3VkJBRUVEUWE2NkFTQUdFRDFCZnlFQUN5QUdKQVlnQUF2N0JRRUtmeU1HSVFVakJrRkFheVFHSUFWQk9Hb2hDQ0FGUVRCcUlRa2dCVUVvYWlFR0lBVkJJR29oQnlBRlFSaHFJUW9nQlVFSWFpRUNJQVZCUEdvaUEwR0l1UUV1QUFBN0FBQWdBMEdLdVFFc0FBQTZBQUlnQUVFQVJ5QUJRUUJIY1FSL0FuOGdBQ0FERUk0SklnUkZCRUFnQWlBQU5nSUFJQUpCeFA0Q05nSUVJQUpCZ05FQ05nSUlRUUJCQTBHK3VRRWdBaEE5UVg4TUFRdEJBVUVRRUkwQ0lnSkZCRUJCQUVFRFFibllBaUFLRUQxQkFSQUJDeUFDUVFScVFRUkJBU0FFRUdGQkFVWUVRQ0FDS0FJRUlnQkJBVTRFUUFKQUlBSWdBRUdFQVd3UVJDSUROZ0lBSUFORkJFQkJBRUVEUWJuWUFpQUhFRDFCQVJBQkMwRUFJUU1EUUNBRElBQklCRUFnQWlnQ0FDQURRWVFCYkdwQkNFRUJJQVFRWVVFQlJ3MENJQUlvQWdBZ0EwR0VBV3hxUVFocVFRaEJBU0FFRUdGQkFVY05BaUFDS0FJQUlBTkJoQUZzYWtFUWFrSHNBRUVCSUFRUVlVRUJSdzBDSUFJb0FnQWdBMEdFQVd4cVFmd0Fha0VFUVFFZ0JCQmhRUUZIRFFJZ0FpZ0NBQ0FEUVlRQmJHcEJnQUZxUVFSQkFTQUVFR0ZCQVVjTkFpQURRUUZxSVFNZ0FpZ0NCQ0VBREFFTEN5QUNRUXhxUVFSQkFTQUVFR0ZCQVVZRVFDQUNLQUlNSWdCQkFVZ0VRQ0FDUVFBMkFnZ01BZ3NnQWlBQVFReHNFRVFpQXpZQ0NDQURSUVJBUVFCQkEwRzUyQUlnQmhBOVFRRVFBUXRCQUNFREFrQUNRQU5BQWtBZ0F5QUFUZzBDSUFJb0FnZ2dBMEVNYkdwQkNHcEJCRUVCSUFRUVlVRUJSdzBGSUFJb0FnZ2dBMEVNYkdwQkJHcEJCRUVCSUFRUVlVRUJSdzBGSUFJb0FnZ2lCeUFEUVF4c2FpZ0NCQ0lHUVF4c0VFUWhBQ0FEUVF4c0lBZHFJQUEyQWdBZ0FFVU5BQ0FBUVF3Z0JpQUVFR0VnQmtjTkJTQURRUUZxSVFNZ0FpZ0NEQ0VBREFFTEMwRUFRUU5CdWRnQ0lBa1FQVUVCRUFFTUFRc2dBU0FDTmdJQUlBUVFha0VBREFVTEN3c0xDMEVBUVFOQmdib0JJQWdRUFNBQ0tBSUlJZ0FFUUNBQUVEZ0xJQUlvQWdBaUFBUkFJQUFRT0FzZ0FoQTRJQVFRYWtGL0N3VkJBRUVEUVl1NUFTQUZFRDFCZndzaEN5QUZKQVlnQ3d2WEFnRUVmeU1HSVFJakJrRVFhaVFHUWFDSHJ3TVFSQ0lCUlFSQVFRQkJBMEc1MkFJZ0FoQTlRUUVRQVFzZ0FrRUlhaUVESUFGQkFEWUNBQ0FCUWVTR3B3SnFRUUEyQWdBZ0FVR0loNjhEYWtFQU5nSUFJQUZCZnpZQ0JDQUJRUUEyQWdnZ0FVRUJOZ0lNSUFGQjVBQTJBaEFnQVVFQU5nSVVJQUZCQURZQ0dDQUJRUUkyQWh3Z0FVR1FoNjhEYWtRQUFBQUFBQURnUHprREFDQUJRWmlIcndOcVFRTTJBZ0FnQVNBQU5nSWdJQUVnQUNnQ0FDSUVOZ0lrSUFFZ0FDZ0NCQ0lBTmdJb0lBRkJBRFlDTENBQlFiRDRBR3BCQURZQ0FDQUJRZWlHcHdKcVFRQTJBZ0FnQVVINGlxWUNha0VBTmdJQUlBRkI0SWFuQW1vZ0FDQUVRUUYwYkJCRUlnQTJBZ0FnQUFSQUlBRkI4SWF2QTJwQkFEWUNBQ0FCUVFBUS9RTWdBVUgwaHE4RGFrRi9OZ0lBSUFGQkFCRDdBeG9nQVJDUUNTQUNKQVlnQVE4RlFRQkJBMEc1MkFJZ0F4QTlRUUVRQVF0QkFBdnNDZ0VRZnlNR0lRMGpCa0V3YWlRR0lBMUJLR29oRUNBTlFTQnFJUThnRFVFWWFpRUpJQTFCRUdvaEJpQU5RUWhxSVFjZ0FFRUFSeUFCUVFCSGNRUi9JQUFvQWdBaUFnUkFJQUlpQkNFREJTQUFRUkFRUkNJQ05nSUFJQUlFUUNBQ1FRQTJBZ1FnQWtFQU5nSUFJQUpCQURZQ0RDQUNRUUEyQWdnZ0FpSUVJUU1GUVFCQkEwRzUyQUlnQnhBOVFRRVFBUXNMSUFFb0FnQWlEQVJBSUFRb0FnUWlCU0FNS0FJRUlnZHFJZ0pCaEFGc0VFUWlDMFVFUUVFQVFRTkJ1ZGdDSUFZUVBVRUJFQUVMUVFBaEJnTkFJQVlnQlVnRVFDQUdRWVFCYkNBTGFpQUVLQUlBSUFaQmhBRnNha0dFQVJCTUdpQUdRUUZxSVFZTUFRc0xRUUFoQmdOQUlBWWdCMGdFUUNBRklBWnFRWVFCYkNBTGFpQU1LQUlBSUFaQmhBRnNha0dFQVJCTUdpQUdRUUZxSVFZTUFRc0xJQVFvQWdBaUJBUkFJQVFRT0NBQUtBSUFJUU1MSUFNZ0N6WUNBQ0FBS0FJQUlnY2dBallDQkNBSEtBSU1JUXNnQVNnQ0FDSURLQUlNSVF4QkFDRUVRUUFoQmdOQUlBWWdERWdFUUVFQUlRSUNRQUpBQTBBZ0FpQUxTQVJBSUFNb0FnZ2dCa0VNYkdvb0FnZ2dCeWdDQ0NBQ1FReHNhaWdDQ0VZTkFpQUNRUUZxSVFJTUFRc0xEQUVMSUFSQkFXb2hCQXNnQmtFQmFpRUdEQUVMQ3lBTElBeHFJQVJySWdaQkRHd1FSQ0lPUlFSQVFRQkJBMEc1MkFJZ0NSQTlRUUVRQVFzQ1FBSkFBMEFnQ2lBTFNBUkFJQXBCREd3Z0Rtb2dBQ2dDQUNJSEtBSUlJZ1FnQ2tFTWJHb2lBaWdDQ0RZQ0NDQUtRUXhzSUFScUtBSUVJUVJCQUNFSkEwQWdDU0FNU0FSQUlBRW9BZ0FvQWdnaUF5QUpRUXhzYWlnQ0NDQUNLQUlJUmdSQUlBUWdDVUVNYkNBRGFpZ0NCR29oQkFzZ0NVRUJhaUVKREFFTEN5QUtRUXhzSUE1cUlna2dCRUVNYkJCRUlnTTJBZ0FnQTBVTkFpQUhLQUlJSUFwQkRHeHFLQUlFSVFkQkFDRUZBMEFnQlNBSFNBUkFJQWtvQWdBZ0JVRU1iR29pQWlBQUtBSUFLQUlJSUFwQkRHeHFLQUlBSUFWQkRHeHFJZ01wQWdBM0FnQWdBaUFES0FJSU5nSUlJQVZCQVdvaEJRd0JDd3RCQUNFSUFrQUNRQU5BSUFnZ0RFZ0VRQ0FCS0FJQUtBSUlJZ01nQ0VFTWJHb29BZ2dnQUNnQ0FDZ0NDQ0FLUVF4c2FpZ0NDRVlOQWlBSVFRRnFJUWdNQVFzTERBRUxRUUFoQlFOQUlBVWdDRUVNYkNBRGFpZ0NCRTROQVNBSktBSUFJQVVnQjJwQkRHeHFJZ0lnQ0VFTWJDQURhaWdDQUNBRlFReHNhaUlES1FJQU53SUFJQUlnQXlnQ0NEWUNDQ0FGUVFGcUlRVWdBU2dDQUNnQ0NDRUREQUFBQ3dBTElBcEJER3dnRG1vZ0JEWUNCQ0FLUVFGcUlRb01BUXNMREFFTFFRQkJBMEc1MkFJZ0R4QTlRUUVRQVF0QkFDRUVRUUFoQ0FKQUFrQURRQ0FJSUF4SUJFQWdBU2dDQUNnQ0NDSUhJQWhCREd4cUtBSUlJUVZCQUNFQ0FrQUNRQU5BSUFJZ0MwNE5BU0FDUVFGcUlRTWdBQ2dDQUNnQ0NDQUNRUXhzYWlnQ0NDQUZSd1JBSUFNaEFnd0JDd3NnQkVFQmFpRUVEQUVMSUFnZ0Myb2dCR3NpRDBFTWJDQU9haUVKSUE5QkRHd2dEbW9nQlRZQ0NDQUpJQWhCREd3Z0Iyb29BZ1FpQjBFTWJCQkVJZ00yQWdBZ0EwVU5BMEVBSVFVRFFDQUZJQWRJQkVBZ0NTZ0NBQ0FGUVF4c2FpSUNJQUVvQWdBb0FnZ2dDRUVNYkdvb0FnQWdCVUVNYkdvaUF5a0NBRGNDQUNBQ0lBTW9BZ2cyQWdnZ0JVRUJhaUVGREFFTEN5QVBRUXhzSUE1cUlBYzJBZ1FMSUFoQkFXb2hDQXdCQ3dzTUFRdEJBRUVEUWJuWUFpQVFFRDFCQVJBQkN5QUFLQUlBSWdKQkNHb2lBeWdDQUNJRUJFQkJBQ0VEQTBBZ0F5QUNLQUlNU0FSQUlBTkJER3dnQkdvb0FnQVFPQ0FEUVFGcUlRTWdBQ2dDQUNJRUlRSWdCQ2dDQ0NFRURBRUxDeUFFRURnZ0FDZ0NBRUVJYWlFREN5QURJQTQyQWdBZ0FDZ0NBQ0FHTmdJTUlBRVEvd01MUVFBRlFRQkJBMEdndUFFZ0RSQTlRWDhMSVJFZ0RTUUdJQkVMb3dFQkFuOGdBQ2dDQUNJQkJIOGdBU2dDQUNJQ0JFQWdBaWdDQUNFQklBSkJBRFlDQUNBQkJFQWdBUkRyQXlBQkVEZ0xJQUlRT0NBQUtBSUFJUUVMSUFFb0Fod2lBZ1JBSUFJUU9DQUFLQUlBSVFFTElBRW9BaVFpQWdSQUlBSVFPQ0FBS0FJQUlRRUxJQUVvQWpRaUFnUkFJQUlRT0NBQUtBSUFJUUVMSUFFb0Fpd2lBZ1IvSUFJUU9DQUFLQUlBQlNBQkN4QTRJQUJCQURZQ0FFRUFCVUYvQ3hvTGpBRUJBMzhqQmlFRUl3WkJFR29rQmtFQlFid2dFSTBDSWdNRVFFRUVFRkVpQlJDN0NDQURJQVUyQWdBZ0F5QUFOZ0lFSUFOQkFUWUNDQ0FESUFFMkFnd2dBeUFDTmdJUUlBTkJBVFlDRkNBRFFYODJBaGdnQTBJQU53SWNJQU5DQURjQ0pDQURRZ0EzQWl3Z0EwSUFOd0kwSUFRa0JpQUREd1ZCQUVFRFFibllBaUFFRUQxQkFSQUJDMEVBQzhjQkFnSi9CMzBDZnlNR0lRWWpCa0ZBYXlRR0lBQXFBZ3dnQUNvQ0xDSU1JQUdVa3lFSklBQXFBaVFpQnlBQ2xDQUFLZ0lVa3lFS0lBQXFBaUFpQ0NBQ2xDQUFLZ0lRa3lFTElBY2dBWlFnQUNvQ0JKTWhCeUFJSUFHVUlBQXFBZ0NUSVFnZ0FDb0NIQ0VOSUF3Z0FwUWhBUUpBREFBTElBMGdBWk1oQVNBSUlBcVVJQWNnQzVTVElnSkRBQUFBQUZzRWYwRi9CU0FESUFvZ0NaUWdCeUFCbEpNZ0FwVTRBZ0FnQkNBSUlBR1VJQXNnQ1pTVElBS1ZPQUlBUVFBTElRQWdCZ3NrQmlBQUN5Y0JBWDhnQUNnQ0FDSUJCSDhnQVJEaUFpQUFLQUlBRURnZ0FFRUFOZ0lBUVFBRlFYOExHZ3ZWQmdJUGZ3RjlJd1loQ1NNR1FkQUFhaVFHSUFsQlBHb2hDQ0FKUVRocUlRWWdDVUUwYWlFT0lBbEJNR29oRHlBSlFVQnJJUkFDZndKQUlBQUVmeUFBUVFocUlBRWdDUkQ2QVNBSUlBTW9BZ0FpQnlBRVFSUnNhaWdDQ0NJQk5nSUFJQVlnQkVFVWJDQUhhaW9DRENJVk9BSUFRUUFnQ1NBQnZpQVZJQWdnQmhEbEFVRUFTQVIvUVg4RklBQkJ1QUZxSWhFZ0NDb0NBQ0FHS2dJQUlBNGdEeEJ0UVFCSUJIOUJmd1VnRGlvQ0FFTUFBQUEva2hCRElRZ2dEeW9DQUVNQUFBQS9raEJESVJKQkFDRUVRUUFnQlNnQ0VDSUFheUVLSUJJZ0FFRUJkR3NoQzBFQUlRRkJBQ0VBSUFVb0FoZ2hCd05BSUFvZ0JTZ0NGRW9FUUNBRUlRY01CUVVnQzdJaEZVRUFJQVVvQWdnaUJtc2hEQ0FJSUFaQkFYUnJJUTBEUUNBTUlBVW9BZ3hNQkVBZ0VTQU5zaUFWSUE0Z0R4Q21BVUVBU0FSQUlBZEJnQ0E3QVFBRklBa2dBaWdDQUNBREtBSUlRUUowYWlnQ0FDQU9LZ0lBSUE4cUFnQWdFQkNCQkVFQVNBUkFJQWRCZ0NBN0FRQUZJQWNnRUMwQUFDSUdPd0VBSUFSQkFXb2hCQ0FCSUFaQi93RnhJZ1lnQm14cUlRRWdBQ0FHYWlFQUN3c2dERUVCYWlFTUlBMUJBbW9oRFNBSFFRSnFJUWNNQVFzTElBcEJBV29oQ2lBTFFRSnFJUXNNQVFzQUFBc0FDd3NGSUFnZ0F5Z0NBQ0lISUFSQkZHeHFLQUlJSWdBMkFnQWdCaUFFUVJSc0lBZHFLZ0lNSWhVNEFnQkJBQ0FCSUFDK0lCVWdEaUFQRU9VQlFRQklCSDlCZndVZ0Rpb0NBRU1BQUFBL2toQkRJUkVnRHlvQ0FFTUFBQUEva2hCRElSTkJBQ0FGS0FJUUlnQnJJUW9nRXlBQVFRRjBheUVMUVFBaEIwRUFJUVJCQUNFQUlBVW9BaGdoQmdOQUlBb2dCU2dDRkVvRVFDQUVJUUVNQkFVZ0M3SWhGVUVBSUFVb0FnZ2lDR3NoRENBUklBaEJBWFJySVEwRFFDQU1JQVVvQWd4TUJFQWdBU0FDS0FJQUlBTW9BZ2hCQW5ScUtBSUFJQTJ5SUJVZ0VCQ0JCRUVBU0FSQUlBWkJnQ0E3QVFBRklBWWdFQzBBQUNJSU93RUFJQWRCQVdvaEJ5QUVJQWhCL3dGeElnZ2dDR3hxSVFRZ0FDQUlhaUVBQ3lBTVFRRnFJUXdnRFVFQ2FpRU5JQVpCQW1vaEJnd0JDd3NnQ2tFQmFpRUtJQXRCQW1vaEN3d0JDd0FBQ3dBTEN3d0JDeUFIQkg4Z0JTQUJJQUFnQUd3Z0J4QTVhN0tSRUVNMkFod2dCU0FBTmdJZ0lBVWdCellDSkVFQUJVRi9Dd3NoRkNBSkpBWWdGQXVTQVFFRGZ5TUdJUU1qQmtFUWFpUUdRU2dRUkNJQ1JRUkFRUUJCQTBHNTJBSWdBeEE5UVFFUUFRc2dBMEVJYWlFRUlBSWdBRFlDRUNBQ0lBQTJBZ2dnQWlBQk5nSVVJQUlnQVRZQ0RDQUNJQUVnQUVFQmFtb2lBRFlDQUNBQ0lBQTJBZ1FnQWlBQVFRRjBJQUJzRUVRaUFEWUNHQ0FBQkVBZ0F5UUdJQUlQQlVFQVFRTkJ1ZGdDSUFRUVBVRUJFQUVMUVFBTDV3SUJCWDhnQkNnQ0JDRU5JQUZCQVhRaEN5QUVLQUlBSVE0Z0JDZ0NHQ0VLSUFBZ0FpQUJJQU5zYW1vaEFrRUFJUUFEUUNBTUlBMUlCRUJCQUNFRElBSWhBUU5BSUFNZ0RrZ0VRQ0FBSUFFdEFBQWdDaThCQUd4cUlRQWdBMEVCYWlFRElBcEJBbW9oQ2lBQlFRSnFJUUVNQVFzTElBeEJBV29oRENBQ0lBdHFJUUlNQVFzTElBNUJBWFFpQTBFSWFpSUNJQWhCZm1vaUFTQU5RUUYwYW13aEN5QURJQWRCZm1vaUNtb2lDQ0FMYWlJSFFRSjBJQVZxS0FJQUlBb2dBU0FDYkNJQmFpSURRUUowSUFWcUtBSUFhaUFLSUF0cUlnSkJBblFnQldvb0FnQnJJQUVnQ0dvaUFVRUNkQ0FGYWlnQ0FHc2hCU0FKSUFkQkFuUWdCbW9vQWdBZ0EwRUNkQ0FHYWlnQ0FHb2dBa0VDZENBR2FpZ0NBR3NnQVVFQ2RDQUdhaWdDQUdzZ0JTQUZiQ0FFS0FJa0lnSVFPV3NpQVFSL0lBQWdCU0FFS0FJZ2JDQUNFRGxyUWVRQWJDQUVLQUljRURsQjVBQnNJQUd5a1JCREVEa0ZRUUFMTmdJQUM3RUNBUUovSUFNb0FnQWlCd1JBQWtBRFFBSkFJQWdnQjA0TkFDQUlRUUowSUFacUtBSUFJQUpJRFFBZ0NFRUJhaUVJREFFTEN5QUhJQWhHQkVBZ0IwRURUdzBCSUFkQkFuUWdCR29nQURZQ0FDQUhRUUowSUFWcUlBRTJBZ0FnQjBFQ2RDQUdhaUFDTmdJQUlBTWdBeWdDQUVFQmFqWUNBQXdCQ3lBSFFRTkdCSDlCQWdVZ0F5QUhRUUZxTmdJQUlBY0xJUU1EUUNBRElBaEtCRUFnQTBFQ2RDQUVhaUFEUVg5cUlnZEJBblFnQkdvb0FnQTJBZ0FnQTBFQ2RDQUZhaUFIUVFKMElBVnFLQUlBTmdJQUlBTkJBblFnQm1vZ0IwRUNkQ0FHYWlnQ0FEWUNBQ0FISVFNTUFRc0xJQU5CQW5RZ0JHb2dBRFlDQUNBRFFRSjBJQVZxSUFFMkFnQWdBMEVDZENBR2FpQUNOZ0lBQ3dVZ0JDQUFOZ0lBSUFVZ0FUWUNBQ0FHSUFJMkFnQWdBMEVCTmdJQUN3dW9EUUVjZnlNR0lRd2pCa0hRQUdva0JpQU1RUWhxSVJNZ0RDSWVRY2dBYWlFYklBeEJQR29oSENBTVFUQnFJUjBnREVFa2FpRVVJQXhCSUdvaEZ5QU1RUmhxSVI4Z0RFRVFhaUVnSUFVb0FoQWhKaUFGS0FJVUlTVWdBa0YvYWlFV0lBTkJmMm9oR0FOQUFrQWdFVUVEVHcwQUlCRkJBM1FnQ0dvb0FnQWlERUVBU0EwQUlBeEJmSEZCQW5JaURDQUdheUlOUVFBZ0RVRUFTaHNoRFNBR0lBeHFJZ3dnRmlBTUlBSklHeUVaSUJGQkEzUWdDR29vQWdSQkJCQTVRUUowUVFKeUlnNGdCMnNoRENBSElBNXFJZzRnR0NBT0lBTklHeUVWSUF4QkFDQU1RUUJLR3lFT0EwQWdEaUFWVEFSQUlBRWdEU0lNSUFJZ0RteHFhaUVQQTBBZ0RDQVpUQVJBSUE5QkFEb0FBQ0FNUVFGcUlRd2dEMEVCYWlFUERBRUxDeUFPUVFGcUlRNE1BUXNMSUJGQkFXb2hFUXdCQ3dzZ0cwRUFOZ0lBSUNWQkFYUWhFQ0FtUVFGMElSSkJBU0VNUVFBaER3SkFBa0FEUUFKQUlBOUJBMDhOQWlBUFFRTjBJQWhxS0FJQUlnMUJBRWdOQUNBSElBOUJBM1FnQ0dvb0FnUkJCQkE1UVFKMFFRSnlJZzVxSVJZZ0RVRjhjVUVDY2lJTklBWnJJUkVnQmlBTmFpRVlJQTRnQjJzaERnTkFBa0FnRGlBV1NnMEFJQTRnRWs0RVFBSkFJQTRnRUdvZ0EwNE5BaUFDSUE1c0lSa2dFU0VOQTBBZ0RTQVlTZzBCSUEwZ0JTZ0NDRUVCZEU0RVFDQU5JQVVvQWd4QkFYUnFJQUpPRFFJZ0FTQU5JQmxxYWlJVkxBQUFSUVJBSUJWQkFUb0FBQ0FBSUFJZ0JDQUZJQTBnRGlBWEVJTUVJQTBnRGlBWEtBSUFJQnNnSENBZElCUVFxd2xCQUNFTUN3c2dEVUVFYWlFTkRBQUFDd0FMQ3lBT1FRUnFJUTRNQVFzTElBOUJBV29oRHd3QkN3c2dERVVOQUVGL0lRWU1BUXNnQlNnQ0FFRURkRUVnYWlBRktBSUVRUUYwUVFocWJDSUJFRVFpRVVVRVFFRUFRUU5CdWRnQ0lCNFFQVUVCRUFFTElBRVFSQ0lPUlFSQVFRQkJBMEc1MkFJZ0V4QTlRUUVRQVF0QkFDRUJRUUFoRWtGL0lRWURRQ0FTSUJzb0FnQklCRUFDUUFKQUlBVW9BaVFnQlNnQ0FDSU5JQVVvQWdRaUIyeEhEUUFDUUNBRVFRVnJEZ29BQVFFQkFRRUJBQUFBQVFzZ0VrRUNkQ0FkYWlJaEtBSUFJZ2hCZldvZ0JTZ0NFRUVCZEdzaUdFRUFTQTBBSUFoQkEyb2dCU2dDRkVFQmRHb2dBMDROQUNBU1FRSjBJQnhxSWlJb0FnQWlDRUY5YWlBRktBSUlRUUYwYXlJWlFRQklEUUFnQ0VFRGFpQUZLQUlNUVFGMGFpQUNUZzBBSUFkQkFYUkJCbW9oSXlBTlFRSjBRUkJxSVE4Z0RpRUhJQkVoQ0VFQUlRd0RRQ0FNSUE5SUJFQWdDRUVBTmdJQUlBZEJBRFlDQUNBSFFRUnFJUWNnQ0VFRWFpRUlJQXhCQVdvaERBd0JDd3NnRFVFQmRFRUdhaUVrSUFBZ0dTQUNJQmhzYW1vaEV5QU9JUXdnRVNFTlFRQWhGZ05BSUJZZ0kwZ0VRQ0FJUVFocUlTY2dCeUVQUVFBaEVBTkFJQkJCQWtjRVFDQUlRUUEyQWdBZ0QwRUFOZ0lBSUJCQkFuUWdIMnBCQURZQ0FDQVFRUUowSUNCcVFRQTJBZ0FnRDBFRWFpRVBJQWhCQkdvaENDQVFRUUZxSVJBTUFRc0xJQk1oRHlBTVFRaHFJUXdnRFVFSWFpRU5JQWRCQ0dvaEJ5QW5JUWhCQUNFVUEwQWdGQ0FrU0FSQUlBOHRBQUFnRkVFQmNTSVZRUUowSUI5cUlob29BZ0JxSVJBZ0dpQVFOZ0lBSUE4dEFBQWlHaUFhYkNBVlFRSjBJQ0JxSWhvb0FnQnFJUlVnR2lBVk5nSUFJQWdnRUNBTktBSUFhallDQUNBSElCVWdEQ2dDQUdvMkFnQWdEMEVCYWlFUElBeEJCR29oRENBTlFRUnFJUTBnQjBFRWFpRUhJQWhCQkdvaENDQVVRUUZxSVJRTUFRc0xJQUlnRTJvaEV5QVdRUUZxSVJZTUFRc0xRUUFoQ0FOQUlBaEJCMGNFUUNBSUlCaHFJUTBnQ0VFQ2FpRVBJQWhCZldvaEUwRUFJUXdEUUNBTVFRZEhCRUFnQUNBQ0lBd2dHV29nRFNBRklCRWdEaUFNUVFKcUlBOGdGeENxQ1NBWEtBSUFJZ2NnQVVvRVFDQUpJQ0lvQWdBZ0RFRjlhbW8yQWdBZ0NpQVRJQ0VvQWdCcU5nSUFJQXNnQjdKREFFQWNScFU0QWdCQkFDRUdJQWNoQVFzZ0RFRUJhaUVNREFFTEN5QUlRUUZxSVFnTUFRc0xEQUVMSUJKQkFuUWdIV29vQWdBaUIwRURhaUVOSUJKQkFuUWdIR29oRHlBSFFYMXFJUWdEUUNBSUlBMUtEUUVnQ0NBRktBSVFRUUYwVGdSQUFrQWdDQ0FGS0FJVVFRRjBhaUFEVGcwRElBOG9BZ0FpQjBFRGFpRVRJQWRCZldvaERBTkFJQXdnRTBvTkFTQU1JQVVvQWdoQkFYUk9CRUFnRENBRktBSU1RUUYwYWlBQ1RnMENJQUFnQWlBRUlBVWdEQ0FJSUJjUWd3UWdGeWdDQUNJSElBRktCRUFnQ1NBTU5nSUFJQW9nQ0RZQ0FDQUxJQWV5UXdCQUhFYVZPQUlBSUFjaEFVRUFJUVlMQ3lBTVFRRnFJUXdNQUFBTEFBc0xJQWhCQVdvaENBd0FBQXNBQ3lBU1FRRnFJUklNQVFzTElCRVFPQ0FPRURnTElCNGtCaUFHQzNBQkFuOGdBQVIvSUFCQkFUWUNtQUVEUUNBRFFRTkhCRUJCQUNFQ0EwQWdBa0VFUndSQUlBQkJDR29nQTBFRWRHb2dBa0VDZEdvZ0EwRUVkQ0FCYWlBQ1FRSjBhaWdDQURZQ0FDQUNRUUZxSVFJTUFRc0xJQU5CQVdvaEF3d0JDd3NnQUVGL05nS29BVUVBQlVGL0N4b0x5Z3NCRzM4akJpRUJJd1pCNEFscUpBWWdBVUhRQ1dvaEZDQUJRY2dKYWlFVklBRkJ1QWxxSVFzZ0FVR3dDV29oRmlBQlFhQUphaUVNSUFGQm1BbHFJUmNnQVVHSUNXb2hEU0FCUWVnSWFpRVlJQUZCNEFocUlROGdBVUhZQ0dvaEdTQUJRZEFJYWlFYUlBRkJ5QWhxSVJBZ0FVSEFDR29oR3lBQlFiZ0lhaUVSSUFGQnNBaHFJUklnQVVHb0NHb2hDU0FCUWFBSWFpRUtJQUZCbUFocUlRNGdBVUdRQ0dvaEFpQUJRWWdJYWlFRklBRkJnQWhxSVFnZ0FVR0FCbW9oQmlBQlFZQUVhaUVISUFGQjFBbHFJUVFDUUFKL0FrQkJudElDTEFBQVJRMEFRWjdTQWtHZTBnSVFzd0ZGRFFBZ0NDQUFOZ0lBSUFoQm50SUNOZ0lFSUFGQmo3d0JJQWdRdkFFZ0FVR0p0Z0VRc0FFaUF3Ui9RUUVNQWdVZ0JTQUFOZ0lBUVFCQkEwR0x0Z0VnQlJBOVFhVEZBeWdDQUJDOUFTRUFJQUpCcDlVRE5nSUFJQUlnQURZQ0JFRUFRUU5CcGJZQklBSVFQVUVBQ3lFVERBSUxJQWNnQUVIL0FSRFZBU0FIUVFBNkFQOEJRUUFMSVFCQjlBZ1FSQ0lGUlFSQVFRQkJBMEc1MkFJZ0RoQTlRUUVRQVFzZ0JTQUFRUUJISWc0RWZ5QUdJQU1RNWdGRkJFQWdBeEJxSUFVUU9Bd0NDeUFLSUFRMkFnQWdCa0dydGdFZ0NoQ0RBVUVCUndSQUlBTVFhaUFGRURnTUFnc2dCQ2dDQUNJQVFRRklCSDhnQXhCcUlBVVFPQXdDQlNBQUN3VkJBUXNpQ2pZQ0JDQUZRUUEyQXBnQklBVWdDa0h3QUd3UVJDSUNOZ0lBSUFKRkJFQkJBRUVEUWJuWUFpQUpFRDFCQVJBQkMwRUFJUUFDUUFKQUFrQUNRQUpBQWtBQ1FBTkFBa0FnQkNBQU5nSUFJQUFnQ2s0TkJ5QVNJQUJCQVdvMkFnQkJBRUVCUWE2MkFTQVNFRDBnRGdSQUlBWWdBeERtQVVVTkNDQVJJQWMyQWdBZ0JrSEd0Z0VnRVJDREFVRUJSdzBJSUFjUS9BVUxRUUJCQVVISnRnRWdHeEE5SUFjUXZ3a2hBQ0FFS0FJQVFmQUFiQ0FDYWlBQU5nSUFJQUJGRFFCQkFFRUJRZnEyQVNBYUVEMUJBRUVCUVlTM0FTQVpFRDBnQnhDeENTRUFJQVFvQWdCQjhBQnNJQUpxSUFBMkFnUWdBRVVOQWtFQVFRRkIrcllCSUJnUVBTQUVLQUlBUWZBQWJDQUNha0VBTmdJSUlBNEVRQ0FHSUFNUTVnRkZEUWdnRFNBRUtBSUFJZ0JCOEFCc0lBSnFRUXhxTmdJQUlBMGdBRUh3QUd3Z0FtcEJFR28yQWdRZ0RTQUFRZkFBYkNBQ2FrRVVhallDQ0NBTklBQkI4QUJzSUFKcVFSaHFOZ0lNSUFaQjdMY0JJQTBRZ3dGQkJFY05CQ0FHSUFNUTVnRkZEUWdnRENBRUtBSUFJZ0JCOEFCc0lBSnFRUnhxTmdJQUlBd2dBRUh3QUd3Z0FtcEJJR28yQWdRZ0RDQUFRZkFBYkNBQ2FrRWthallDQ0NBTUlBQkI4QUJzSUFKcVFTaHFOZ0lNSUFaQjdMY0JJQXdRZ3dGQkJFY05CU0FHSUFNUTVnRkZEUWdnQ3lBRUtBSUFJZ0JCOEFCc0lBSnFRU3hxTmdJQUlBc2dBRUh3QUd3Z0FtcEJNR28yQWdRZ0N5QUFRZkFBYkNBQ2FrRTBhallDQ0NBTElBQkI4QUJzSUFKcVFUaHFOZ0lNSUFaQjdMY0JJQXNRZ3dGQkJFY05CaUFFS0FJQUlRQUZJQVFvQWdBaEFFRUFJUWdEUUNBSVFRTkhCRUJCQUNFSkEwQWdDVUVFUndSQUlBQkI4QUJzSUFKcVFReHFJQWhCQkhScUlBbEJBblJxUXdBQWdEOURBQUFBQUNBSUlBbEdHemdDQUNBSlFRRnFJUWtNQVFzTElBaEJBV29oQ0F3QkN3c0xJQUJCOEFCc0lBSnFRUXhxSUFCQjhBQnNJQUpxUVR4cUVKNEdJQWNRaFFaQmdBSVFSQ0VBSUFRb0FnQkI4QUJzSUFKcUlBQTJBbXdnQUVVTkJpQUFJQWRCZ0FJUTFRRWdCQ2dDQUVFQmFpRUFEQUVMQ3lBUUlBYzJBZ0JCQUVFRFFkdTJBU0FRRUQwZ0FoQTRJQVVRT0NBRFJRMEhJQU1RYWd3SEN5QVBJQWMyQWdCQkFFRURRWmkzQVNBUEVEMGdCQ2dDQUVId0FHd2dBbW9RdUFrZ0FoQTRJQVVRT0NBRFJRMEdJQU1RYWd3R0MwRUFRUU5CK0xjQklCY1FQU0FERUdwQkFCQUJEQVFMUVFCQkEwSDR0d0VnRmhBOUlBTVFha0VBRUFFTUF3dEJBRUVEUWZpM0FTQVZFRDBnQXhCcVFRQVFBUXdDQzBFQVFRTkJ1ZGdDSUJRUVBVRUJFQUVNQVFzZ0F3UkFJQU1RYWdzZ0JDZ0NBQ0FLVGdSQUlBVWhFd3dDQzBFQUVBRUxDeUFCSkFZZ0V3dE5BUU4vSXdZaEF5TUdRUkJxSkFZZ0F5RUNRUVFRUkNJQlJRUkFRUUJCQTBHNTJBSWdBaEE5UVFFUUFRc2dBU0FBRU9NQ0lnQTJBZ0FnQUVVRVFDQUJFRGhCQUNFQkN5QUNKQVlnQVFzcEFDQUFJQUZCQTNRZ0FHb2dBa0VEZENBQWFpSUJFSVFFSUFBZ0FTQURRUU4wSUFCcUVJUUVrZ3ZKQndFVGZ5TUdJUUlqQmtHQUJXb2tCaUFDUWZBRWFpRUpJQUpCNkFScUlRb2dBa0hnQkdvaEN5QUNRZGdFYWlFTUlBSkIwQVJxSVEwZ0FrSElCR29oRGlBQ1FjQUVhaUVQSUFKQnVBUnFJUkFnQWtHd0JHb2hFU0FDUWFnRWFpRVNJQUpCb0FScUlRVWdBa0dZQkdvaEJpQUNRWkFFYWlFRUlBSkJpQVJxSVFFZ0FrR0FCR29pQXlBQU5nSUFJQU5CbnRJQ05nSUVJQUpCajd3QklBTVF2QUVnQWtHSXVRRVFzQUVpQXdSQVFRZ1FSQ0lBUlFSQVFRQkJBMEc1MkFJZ0JCQTlRUUVRQVFzQ1FBSkFJQUJCQkdwQkJFRUJJQU1RWVVFQlJnUkFBa0FnQUNBQUtBSUVJaE5CRkd3UVJDSUdOZ0lBSUFaRkJFQkJBRUVEUWJuWUFpQUZFRDFCQVJBQkMwRUFJUVVEUUFKQUlBVWdFMDROQWlBRlFSUnNJQVpxUVFocVFRUkJBU0FERUdGQkFVY0VRRUVNSVFFTUFRc2dCVUVVYkNBR2FrRU1ha0VFUVFFZ0F4QmhRUUZIQkVCQkR5RUJEQUVMSUFWQkZHd2dCbXBCRUdwQkJFRUJJQU1RWVVFQlJ3UkFRUkVoQVF3QkN5QUZRUlJzSUFacUlnaEJCR3BCQkVFQklBTVFZVUVCUndSQVFSTWhBUXdCQ3lBRlFSUnNJQVpxSWdjZ0NDZ0NCQ0lCUVJSc0VFUWlCRFlDQUNBRVJRUkFRUlloQVF3QkMwRUFJUVFEUUNBRUlBRklCRUFnQnlnQ0FDQUVRUlJzYWtFRVFRRWdBeEJoUVFGSEJFQkJHU0VCREFNTElBY29BZ0FnQkVFVWJHcEJCR3BCQkVFQklBTVFZVUVCUndSQVFSc2hBUXdEQ3lBSEtBSUFJQVJCRkd4cVFRaHFRUVJCQVNBREVHRkJBVWNFUUVFZElRRU1Bd3NnQnlnQ0FDQUVRUlJzYWtFTWFrRUVRUUVnQXhCaFFRRkhCRUJCSHlFQkRBTUxJQWNvQWdBZ0JFRVViR3BCRUdwQkJFRUJJQU1RWVVFQlJnUkFJQVJCQVdvaEJDQUlLQUlFSVFFTUFnVkJJaUVCREFNTEFBc0xJQVZCQVdvaEJRd0JDd3NDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUlBRkJER3NPRndBS0NnRUtBZ29EQ2dvRUNnb0ZDZ1lLQndvSUNnb0pDZ3RCQUVFRFFmdTFBU0FTRUQwTUNRdEJBRUVEUWZ1MUFTQVJFRDBNQ0F0QkFFRURRZnUxQVNBUUVEME1Cd3RCQUVFRFFmdTFBU0FQRUQwTUJndEJBRUVEUWJuWUFpQU9FRDFCQVJBQkRBVUxRUUJCQTBIN3RRRWdEUkE5REFRTFFRQkJBMEg3dFFFZ0RCQTlEQU1MUVFCQkEwSDd0UUVnQ3hBOURBSUxRUUJCQTBIN3RRRWdDaEE5REFFTFFRQkJBMEg3dFFFZ0NSQTlDMEVBSVFFRFFDQUJJQVZIQkVBZ0FVRVViQ0FHYWlnQ0FCQTRJQUZCQVdvaEFRd0JDd3NnQmhBNERBSUxCVUVBUVFOQis3VUJJQVlRUFF3QkN3d0JDeUFBRURoQkFDRUFDeUFERUdvRklBRWdBRFlDQUVFQVFRTkI1clVCSUFFUVBVRUFJUUFMSUFJa0JpQUFDdzhBSUFBb0FnQkJoQUZxUVFFUUJndjVEUUVRZnlNR0lRc2pCa0hBQm1va0JrRUVJUWxCS0JCRUlnaEJBRFlDQUNBTFFSaHFJZ2RCQUVIb0F4QkZHa0VBSkFOQlB5QUxRWmdFYWlJTUVCQWhCaU1ESVFWQkFDUURJQVZCQUVjakJFRUFSM0VFUUNBRktBSUFJQWhCQkJCOUlncEZCRUFnQlNNRUVBWUxJd1FRQXdWQmZ5RUtDeUFMUVpBRWFpRVBJQXRCaUFScUlSQWdDMEdBQkdvaEVRSi9FQWNnQ2tFQmEwVU5BQm9nQnlBR05nSUFJQXhCOEFBMkFnQWdERUdFQVdwQkFTQUlRUVFRandRaENCQUhJUWxCQUNRRFFRQWtBMEVBSWdWQkFFY2pCRUVBUjNFRVFDQUZLQUlBSUFnZ0NSQjlJZ1pGQkVBZ0JTTUVFQVlMSXdRUUF3VkJmeUVHQ3hBSElBWkJBV3RGRFFBYVFRQUxJUVVDUUFKQUFrQUNRQU5BQWtBZ0JRUkFRUUFrQTBIeEFDQUhFQThqQXlFRlFRQWtBeUFGUVFCSEl3UkJBRWR4QkVBZ0JTZ0NBQ0FJSUFrUWZTSUdSUVJBSUFVakJCQUdDeU1FRUFNRlFYOGhCZ3NRQnlFRklBWkJBV3RGRFFKQkFDUURRUWhCQUVFRFFhaTFBU0FSRUJFakF5RUZRUUFrQXlBRlFRQkhJd1JCQUVkeEJFQWdCU2dDQUNBSUlBa1FmU0lHUlFSQUlBVWpCQkFHQ3lNRUVBTUZRWDhoQmdzUUJ5RUZJQVpCQVdzTkFRd0NDMEVBSkFOQkFTQUhRZG9BUWVnREVCc2pBeUVGUVFBa0F5QUZRUUJISXdSQkFFZHhCRUFnQlNnQ0FDQUlJQWtRZlNJR1JRUkFJQVVqQkJBR0N5TUVFQU1GUVg4aEJnc1FCeUVGSUFaQkFXdEZEUUZCQUNRRFFTY2dCeUFBRUJ3akF5RUZRUUFrQXlBRlFRQkhJd1JCQUVkeEJFQWdCU2dDQUNBSUlBa1FmU0lHUlFSQUlBVWpCQkFHQ3lNRUVBTUZRWDhoQmdzUUJ5RUZJQVpCQVd0RkRRRkJBQ1FEQW45QkV5QUhRUUVRSmlFU0l3TWhCVUVBSkFNZ0JVRUFSeU1FUVFCSGNRUkFJQVVvQWdBZ0NDQUpFSDBpQ2tVRVFDQUZJd1FRQmdzakJCQURCVUYvSVFvTEVBY2hCU0FLUVFGclJRMENJQkpCQVVjTEJFQkJBQ1FEUVFoQkFFRURRY0sxQVNBUUVCRWpBeUVGUVFBa0F5QUZRUUJISXdSQkFFZHhCRUFnQlNnQ0FDQUlJQWtRZlNJR1JRUkFJQVVqQkJBR0N5TUVFQU1GUVg4aEJnc1FCeUVGSUFaQkFXdEZEUUpCQUNRRFFmRUFJQWNRRHlNRElRVkJBQ1FESUFWQkFFY2pCRUVBUjNFRVFDQUZLQUlBSUFnZ0NSQjlJZ1pGQkVBZ0JTTUVFQVlMSXdRUUF3VkJmeUVHQ3hBSElRVWdCa0VCYXcwRERBSUxRUUFrQTBIQUFDQUhFQkFhSXdNaEJVRUFKQU1nQlVFQVJ5TUVRUUJIY1FSQUlBVW9BZ0FnQ0NBSkVIMGlCa1VFUUNBRkl3UVFCZ3NqQkJBREJVRi9JUVlMRUFjaEJTQUdRUUZyUlEwQklBY29BaVFnQnlnQ0hHd2lEQ0FIS0FJZ2JDRUZRUUFrQTBIQkFDQUZFQkFoQlNNRElRWkJBQ1FESUFaQkFFY2pCRUVBUjNFRVFDQUdLQUlBSUFnZ0NSQjlJZ3BGQkVBZ0JpTUVFQVlMSXdRUUF3VkJmeUVLQ3hBSElRWWdDa0VCYTBVRVFDQUdJUVVNQWdzZ0JVVUVRRUVBSkFOQkNFRUFRUU5CdWRnQ0lBOFFFU01ESVFWQkFDUURJQVZCQUVjakJFRUFSM0VFUUNBRktBSUFJQWdnQ1JCOUlnWkZCRUFnQlNNRUVBWUxJd1FRQXdWQmZ5RUdDeEFISVFVZ0JrRUJhMFVOQWtFQUpBTkI4UUFnQnhBUEl3TWhCVUVBSkFNZ0JVRUFSeU1FUVFCSGNRUkFJQVVvQWdBZ0NDQUpFSDBpQmtVRVFDQUZJd1FRQmdzakJCQURCVUYvSVFZTEVBY2hCU0FHUVFGckRRUU1BZ3RCQUNFTkEwQWdCeWdDakFFZ0J5Z0NkRWtFUUVFQUlRWURRQ0FHUVFWSEJFQWdCa0VDZENBTGFpQUZJQXdnQmlBTmFteHFOZ0lBSUFaQkFXb2hCZ3dCQ3d0QkFDUURRUmtnQnlBTFFRVVFJU0VUSXdNaEJrRUFKQU1nQmtFQVJ5TUVRUUJIY1FSQUlBWW9BZ0FnQ0NBSkVIMGlEa1VFUUNBR0l3UVFCZ3NqQkJBREJVRi9JUTRMRUFjaEJpQU9RUUZyUlFSQUlBWWhCUXdFQ3lBVElBMXFJUTBNQVFzTFFRQWtBMEhDQUNBSEVCQWFJd01oQmtFQUpBTWdCa0VBUnlNRVFRQkhjUVJBSUFZb0FnQWdDQ0FKRUgwaUNrVUVRQ0FHSXdRUUJnc2pCQkFEQlVGL0lRb0xFQWNoQmlBS1FRRnJSUVJBSUFZaEJRd0NDMEVBSkFOQjhRQWdCeEFQSXdNaEJrRUFKQU1nQmtFQVJ5TUVRUUJIY1FSQUlBWW9BZ0FnQ0NBSkVIMGlDa1VFUUNBR0l3UVFCZ3NqQkJBREJVRi9JUW9MRUFjaEZDQUtRUUZyRFFRZ0ZDRUZEQUVMQzBFQUlRVU1Bd3RCQUNFRkRBSUxRUUFoQlF3QkN5QUJCRUFnQVNBSEtBSWNOZ0lBQ3lBQ0JFQWdBaUFIS0FJZ05nSUFDeUFEQkVBZ0F5QUhLQUlrTmdJQUN5QUVCRUFDUUFKQUFrQUNRQ0FITEFDaUFpSUFRUUZyRGdJQUFRSUxJQWN1QWFRQ0lnQWdCeTRCcGdKR0JFQWdCQ0FBUWYvL0EzR3lPQUlBREFVTERBSUxJQWN1QWFRQ0lnQWdCeTRCcGdKR0JFQWdCQ0FBUWYvL0EzR3lRMXlQSWtDVU9BSUFEQVFMREFFTElBQkIvd0Z4UVFKS0JFQWdCeTRCcEFKRkJFQWdCeTRCcGdKRkJFQWdCQ0FBUWY4QmNiSTRBZ0FNQlFzTEN3c2dCRU1BQUFBQU9BSUFDd3NnQ0JBNElBc2tCaUFGQy80VEFoQi9BWHdqQmlFVEl3WkJFR29rQmlBVElROGdCQ2dDQUNJR0lRY2dBU0FDUVg5cUloQnNRUUYwSUFacUlRVURRQ0FKSUFGSUJFQWdCVUVBT3dFQUlBZEJBRHNCQUNBSFFRSnFJUWNnQ1VFQmFpRUpJQVZCQW1vaEJRd0JDd3NnQmlFSFFRQWhDU0FCUVg5cUloRkJBWFFnQm1vaEJRTkFJQWtnQWtnRVFDQUZRUUE3QVFBZ0IwRUFPd0VBSUFGQkFYUWdCMm9oQnlBSlFRRnFJUWtnQVVFQmRDQUZhaUVGREFFTEN5QUVRWkNBeUFCcUlRZEJBQ0FCYXlFU0lBQWdBVUVCYWlJQWFpRU5JQUFnQTJvaERrRUJJUXhCQUNFRElBQWdCQ2dDQkdvaENTQUFRUUYwSUFacUlRWUNmd0pBQTBBQ1FDQU1JQkJPRFFJZ0F5RUFRUUVoQ2dOQUlBb2dFVWdFUUNBTkxRQUFJQTR0QUFCS0JFQUNRQ0FKUVg4NkFBQWdFa0VCZENBR2FpSURMZ0VBSWdWQkFFb0VRQ0FHSUFVN0FRQWdCVUVIYkNJRFFRSjBJQVJxUWZUL3p3QnFJZ1VnQlNnQ0FFRUJhallDQUNBRFFRSjBJQVJxUWZqL3p3QnFJZ1VnQ2lBRktBSUFhallDQUNBRFFRSjBJQVJxUWZ6L3p3QnFJZ1VnRENBRktBSUFhallDQUNBRFFRSjBJQVJxUVl5QTBBQnFJQXcyQWdBTUFRc2dBMEYrYWk0QkFDSUZJUWdnQlVFQVNpRUxJQU11QVFJaUEwRUFUQVJBSUFzRVFDQUdJQVU3QVFBZ0NFRUhiQ0lEUVFKMElBUnFRZlQvendCcUlnVWdCU2dDQUVFQmFqWUNBQ0FEUVFKMElBUnFRZmovendCcUlnVWdDaUFGS0FJQWFqWUNBQ0FEUVFKMElBUnFRZnovendCcUlnVWdEQ0FGS0FJQWFqWUNBQ0FEUVFKMElBUnFRWVNBMEFCcUlnVW9BZ0FnQ2tnRVFDQUZJQW8yQWdBTElBTkJBblFnQkdwQmpJRFFBR29nRERZQ0FBd0NDeUFHUVg1cUxnRUFJZ05CQUVvRVFDQUdJQU03QVFBZ0EwRUhiQ0lEUVFKMElBUnFRZlQvendCcUlnVWdCU2dDQUVFQmFqWUNBQ0FEUVFKMElBUnFRZmovendCcUlnVWdDaUFGS0FJQWFqWUNBQ0FEUVFKMElBUnFRZnovendCcUlnVWdEQ0FGS0FJQWFqWUNBQ0FEUVFKMElBUnFRWVNBMEFCcUlnTW9BZ0FnQ2s0TkFpQURJQW8yQWdBRklBQkIvLzhCU2cwR0lBWWdBRUVCYWlJRE93RUFJQVJCa0lESUFHb2dBRUVDZEdvZ0EwRVFkRUVRZFRZQ0FDQUVRWkNBMEFCcUlBQkJCMndpQUVFQ2RHcEJBVFlDQUNBQVFRSjBJQVJxUVpTQTBBQnFJQW8yQWdBZ0FFRUNkQ0FFYWtHWWdOQUFhaUFNTmdJQUlBQkJBblFnQkdwQm5JRFFBR29nQ2pZQ0FDQUFRUUowSUFScVFhQ0EwQUJxSUFvMkFnQWdBRUVDZENBRWFrR2tnTkFBYWlBTU5nSUFJQUJCQW5RZ0JHcEJxSURRQUdvZ0REWUNBQ0FESVFBTERBRUxJQXNFUUFKQUlBTkJBblFnQkdwQmpJRElBR29vQWdBaUF5QUlRUUowSUFScVFZeUF5QUJxS0FJQUlnVktCRUFnQmlBRk93RUFJQWNoQ0VFQUlRc0RRQ0FMSUFCT0JFQWdCU0VEREFNTElBTWdDQ2dDQUVZRVFDQUlJQVUyQWdBTElBaEJCR29oQ0NBTFFRRnFJUXNNQUFBTEFBVWdCaUFET3dFQUlBTWdCVWdFUUNBSElRaEJBQ0VMQTBBZ0N5QUFUZzBESUFVZ0NDZ0NBRVlFUUNBSUlBTTJBZ0FMSUFoQkJHb2hDQ0FMUVFGcUlRc01BQUFMQUFzTEN5QURRUkIwUVJCMVFRZHNJZ05CQW5RZ0JHcEI5UC9QQUdvaUJTQUZLQUlBUVFGcU5nSUFJQU5CQW5RZ0JHcEIrUC9QQUdvaUJTQUtJQVVvQWdCcU5nSUFJQU5CQW5RZ0JHcEIvUC9QQUdvaUJTQU1JQVVvQWdCcU5nSUFJQU5CQW5RZ0JHcEJqSURRQUdvZ0REWUNBQXdCQ3lBR1FYNXFMZ0VBSWdWQkFFd0VRQ0FHSUFNN0FRQWdBMEVIYkNJRFFRSjBJQVJxUWZUL3p3QnFJZ1VnQlNnQ0FFRUJhallDQUNBRFFRSjBJQVJxUWZqL3p3QnFJZ1VnQ2lBRktBSUFhallDQUNBRFFRSjBJQVJxUWZ6L3p3QnFJZ1VnRENBRktBSUFhallDQUNBRFFRSjBJQVJxUVlDQTBBQnFJZ1VvQWdBZ0Nrb0VRQ0FGSUFvMkFnQUxJQU5CQW5RZ0JHcEJqSURRQUdvZ0REWUNBQXdCQ3dKQUlBTkJBblFnQkdwQmpJRElBR29vQWdBaUF5QUZRUUowSUFScVFZeUF5QUJxS0FJQUlnVktCRUFnQmlBRk93RUFJQWNoQ0VFQUlRc0RRQ0FMSUFCT0JFQWdCU0VEREFNTElBTWdDQ2dDQUVZRVFDQUlJQVUyQWdBTElBaEJCR29oQ0NBTFFRRnFJUXNNQUFBTEFBVWdCaUFET3dFQUlBTWdCVWdFUUNBSElRaEJBQ0VMQTBBZ0N5QUFUZzBESUFVZ0NDZ0NBRVlFUUNBSUlBTTJBZ0FMSUFoQkJHb2hDQ0FMUVFGcUlRc01BQUFMQUFzTEN5QURRUkIwUVJCMVFRZHNJZ05CQW5RZ0JHcEI5UC9QQUdvaUJTQUZLQUlBUVFGcU5nSUFJQU5CQW5RZ0JHcEIrUC9QQUdvaUJTQUtJQVVvQWdCcU5nSUFJQU5CQW5RZ0JHcEIvUC9QQUdvaUF5QU1JQU1vQWdCcU5nSUFDd1VnQmtFQU93RUFJQWxCQURvQUFBc2dEVUVCYWlFTklBNUJBV29oRGlBSlFRRnFJUWtnQ2tFQmFpRUtJQVpCQW1vaEJnd0JDd3NnRFVFQ2FpRU5JQTVCQW1vaERpQU1RUUZxSVF3Z0FDRURJQWxCQW1vaENTQUdRUVJxSVFZTUFRc0xRUUJCQTBHb3BRRWdEeEE5UVg4TUFRc2dCRUVNYWlFRlFRRWhBRUVCSVFrZ0J5RUdBMEFnQ1NBRFRBUkFJQWtnQmlnQ0FDSU5SZ1JBSUFCQkFXb2hCd1VnQUNFSElBMUJBblFnQkdwQmpJRElBR29vQWdBaEFBc2dCaUFBTmdJQUlBY2hBQ0FKUVFGcUlRa2dCa0VFYWlFR0RBRUxDeUFFSUFCQmYyb2lBRFlDQ0NBQUJIOGdCVUVBSUFCQkFuUVFSUm9nQkVHUWdDaHFRUUFnQUVFRWRCQkZHa0VBSVFjRFFDQUhJQUJJQkVBZ0JFR01nQWhxSUFkQkFuUWlCa0VDZEdvZ0FUWUNBQ0FFUVl5QUNHb2dCa0VCY2tFQ2RHcEJBRFlDQUNBRVFZeUFDR29nQmtFQ2NrRUNkR29nQWpZQ0FDQUVRWXlBQ0dvZ0JrRURja0VDZEdwQkFEWUNBQ0FIUVFGcUlRY01BUXNMUVFBaEFRTkFJQUVnQTBnRVFDQUVRUXhxSUFSQmtJRElBR29nQVVFQ2RHb29BZ0JCZjJvaUFrRUNkR29pQnlBRVFaQ0EwQUJxSUFGQkIyd2lBRUVDZEdvb0FnQWdCeWdDQUdvMkFnQWdCRUdRZ0NocUlBSkJBWFFpQjBFRGRHb2lCaUFHS3dNQUlBQkJBblFnQkdwQmxJRFFBR29vQWdDM29Ea0RBQ0FFUVpDQUtHb2dCMEVCY2tFRGRHb2lCeUFIS3dNQUlBQkJBblFnQkdwQm1JRFFBR29vQWdDM29Ea0RBQ0FFUVl5QUNHb2dBa0VDZENJQ1FRSjBhaUlIS0FJQUlBQkJBblFnQkdwQm5JRFFBR29vQWdBaUJrb0VRQ0FISUFZMkFnQUxJQVJCaklBSWFpQUNRUUZ5UVFKMGFpSUhLQUlBSUFCQkFuUWdCR3BCb0lEUUFHb29BZ0FpQmtnRVFDQUhJQVkyQWdBTElBUkJqSUFJYWlBQ1FRSnlRUUowYWlJSEtBSUFJQUJCQW5RZ0JHcEJwSURRQUdvb0FnQWlCa29FUUNBSElBWTJBZ0FMSUFSQmpJQUlhaUFDUVFOeVFRSjBhaUlDS0FJQUlBQkJBblFnQkdwQnFJRFFBR29vQWdBaUFFZ0VRQ0FDSUFBMkFnQUxJQUZCQVdvaEFRd0JDd3NnQkNnQ0NDRUJRUUFoQUFOL0lBQWdBVWdFZnlBRVFaQ0FLR29nQUVFQmRDSUNRUU4wYWlJRElBTXJBd0FnQkVFTWFpQUFRUUowYWlnQ0FMY2lGYU01QXdBZ0JFR1FnQ2hxSUFKQkFYSkJBM1JxSWdJZ0Fpc0RBQ0FWb3prREFDQUFRUUZxSVFBTUFRVkJBQXNMQlVFQUN3c2hGQ0FQSkFZZ0ZBdGhBUU4vSXdZaEF5TUdRUkJxSkFZZ0F5RUNRUlFRUkNJQlJRUkFRUUJCQTBHNTJBSWdBaEE5UVFFUUFRc2dBU0FBSUFGQkNHb2dBVUVNYWlBQlFRUnFJQUZCRUdvUXN3a2lBRFlDQUNBQVJRUkFJQUVRT0VFQUlRRUxJQUlrQmlBQkN5QUFJQUVnQWlBRHJTQUVyVUlnaG9RZ0JTQUdJQUJCQTNGQjZnWnFFU1VBQ3lrQkFYNGdBU0FDclNBRHJVSWdob1FnQkNBQVFRTnhRYVlEYWhFVUFDSUZRaUNJcHhBRElBV25DM1lCQTM4Z0FBUi9JQUFvQWdBaUFnUi9BMEFnQWlnQ0FDRURJQUVnQWlnQ0JFZ0VRQ0FCUVFKMElBTnFLQUlBS0FJQUVEZ2dBQ2dDQUNnQ0FDQUJRUUowYWlnQ0FCQTRJQUZCQVdvaEFTQUFLQUlBSVFJTUFRc0xJQU1RT0NBQUtBSUFFRGdnQUVFQU5nSUFRUUFGUVg4TEJVRi9DeG9MSUFBZ0FTQUNJQU1nQkNBRnJTQUdyVUlnaG9RZ0FFRUhjVUdlQTJvUkZRQUxCZ0JCRmhBQ0N3WUFRUlVRQWd1WkJnRUpmeU1HSVFrakJrRXdhaVFHSUFraEJrRUlFRVFpQjBVRVFFRUFRUU5CdWRnQ0lBWVFQVUVCRUFFTElBWkJJR29oQ0NBR1FSaHFJUUlnQmtFUWFpRUJJQVpCQ0dvaEF3SkFBa0FDUUNBSFFRUnFJZ1JCQkVFQklBQVFZVUVCUncwQUlBUW9BZ0FpQkVFQlNBMEFJQWNnQkVFQ2RCQkVJZ00yQWdBZ0EwVUVRRUVBUVFOQnVkZ0NJQUVRUFVFQkVBRUxRUUFoQVFKQUFrQURRQ0FCSUFSSUJFQWdBVUVDZENBRGFrRVFFRVFpQlRZQ0FDQUZSUTBDSUFGQkFXb2hBUXdCQ3dzTUFRdEJBRUVEUWJuWUFpQUNFRDFCQVJBQkMwRUFJUUVDUUFKQUFrQUNRQUpBQWtBQ1FBTkFBa0FnQVNBRVRnMEdJQUZCQW5RZ0Eyb2lBaWdDQUVFRWFrRUVRUUVnQUJCaFFRRkhEUUFnQWlnQ0FFRUlha0VFUVFFZ0FCQmhRUUZIRFFJZ0FpZ0NBRUVNYWtFRVFRRWdBQkJoUVFGSERRTWdBaWdDQUNJRktBSUVJQVVvQWdoc0VFUWhCU0FDS0FJQUlBVTJBZ0FnQlVVTkJDQUJRUUZxSVFFZ0FpZ0NBQ0lGS0FJQVFRRWdCU2dDQkNBRktBSUliQ0FBRUdFZ0FpZ0NBQ0lDS0FJRUlBSW9BZ2hzUmcwQkRBVUxDMEVBSVFJRFFDQUJJQUpIQkVBZ0FrRUNkQ0FEYWlnQ0FDZ0NBQkE0SUFKQkFXb2hBZ3dCQ3d0QkFDRUJBMEFnQVNBRVJnMEdJQUZCQW5RZ0Eyb29BZ0FRT0NBQlFRRnFJUUVNQUFBTEFBdEJBQ0VDQTBBZ0FTQUNSd1JBSUFKQkFuUWdBMm9vQWdBb0FnQVFPQ0FDUVFGcUlRSU1BUXNMUVFBaEFRTkFJQUVnQkVZTkJTQUJRUUowSUFOcUtBSUFFRGdnQVVFQmFpRUJEQUFBQ3dBTFFRQWhBZ05BSUFFZ0FrY0VRQ0FDUVFKMElBTnFLQUlBS0FJQUVEZ2dBa0VCYWlFQ0RBRUxDMEVBSVFFRFFDQUJJQVJHRFFRZ0FVRUNkQ0FEYWlnQ0FCQTRJQUZCQVdvaEFRd0FBQXNBQzBFQVFRTkJ1ZGdDSUFnUVBVRUJFQUVNQWd0QkFDRUNBMEFnQVNBQ1J3UkFJQUpCQW5RZ0Eyb29BZ0FvQWdBUU9DQUNRUUZxSVFJTUFRc0xRUUFoQVFOQUlBRWdCRVlOQWlBQlFRSjBJQU5xS0FJQUVEZ2dBVUVCYWlFQkRBQUFDd0FMSUFBUWFnd0JDeUFERURnTUFnc01BZ3RCQUVFRFFiZTBBU0FERUQwTElBY1FPQ0FBRUdwQkFDRUhDeUFHSkFZZ0J3c0dBRUVURUFJTEJnQkJFQkFDQzRJR0FRNS9Jd1loQXlNR1FlQUFhaVFHSUFBUVlFRUdhaEJFSWdoRkJFQkJBRUVEUWJuWUFpQURFRDFCQVJBQkN5QURRY2dBYWlFSklBTkJRR3NoQ2lBRFFUaHFJUXdnQTBFd2FpRU5JQU5CS0dvaEFpQURRU0JxSVFRZ0EwRVlhaUVCSUFOQkVHb2hCeUFEUWRBQWFpRUxJQU5CQ0dvaUJpQUFOZ0lBSUFaQmdiUUJOZ0lFSUFoQi9MTUJJQVlRdkFFZ0NFR0l1UUVRc0FFaEJTQUlFRGdnQlFSL0FuOUJDQkJFSWdaRkJFQkJBRUVEUWJuWUFpQUJFRDFCQVJBQkN3SkFBa0FnQmtFRWFpSUJRUVJCQVNBRkVHRkJBVWNOQUNBQktBSUFJZ2RCQVVnTkFDQUNJQWMyQWdCQkFFRUJRZEMwQVNBQ0VEMGdCaUFIUVFKMElnUVFSQ0lDTmdJQUlBSkZCRUJCQUVFRFFibllBaUFORUQxQkFSQUJDeUFDUVJBUVJDSUJOZ0lBSUFGRkJFQkJBRUVEUWJuWUFpQU1FRDFCQVJBQkN5QUZFTFVKSWdGRkJFQWdDaUFBTmdJQUlBcEJnYlFCTmdJRVFRQkJBa0h1dEFFZ0NoQTlJQUlvQWdBUU9DQUNFRGdnQmhBNElBVVErUUlnQlJDOENRd0RDeUFCS0FJRVFRRkhCRUFnQ1NBQU5nSUFJQWxCZ2JRQk5nSUVRUUJCQWtIdXRBRWdDUkE5SUFJb0FnQVFPQ0FDRURnZ0JoQTRJQUVRT0NBRkVHcEJBQXdEQ3lBQ0tBSUFJZ0FnQVNnQ0NEWUNCQ0FBSUFFb0FndzJBZ2dnQUNBQktBSVFOZ0lNSUFBZ0FTZ0NBRFlDQUNBQkVEZ2dCVUVFSUFSclFRSVE5QUZCQVNFRUFrQUNRQUpBQTBBQ1FDQUVJQWRPRFFNZ0MwRUVRUUVnQlJCaFFRRkhEUUFnQkVFQ2RDQUNhaUFDS0FJQUlBc3FBZ0FReEFraUFEWUNBQ0FBUlEwQ0lBUkJBV29oQkF3QkN3dEJBQ0VCQTBBZ0FTQUVSZzBESUFGQkFuUWdBbW9pQUNnQ0FDZ0NBQkE0SUFBb0FnQVFPQ0FCUVFGcUlRRU1BQUFMQUF0QkFDRUJBMEFnQVNBRVJnMENJQUZCQW5RZ0Ftb2lBQ2dDQUNnQ0FCQTRJQUFvQWdBUU9DQUJRUUZxSVFFTUFBQUxBQXNnQlJCcUlBWU1Bd3NnQWhBNERBRUxRUUJCQTBHM3RBRWdCQkE5Q3lBR0VEZ2dCUkJxUVFBTEJTQUhJQUEyQWdBZ0IwR0J0QUUyQWdSQkFFRURRWWUwQVNBSEVEMUJBQXNoRGlBREpBWWdEZ3NJQUVFRUVBSkJBQXNJQUVFQ0VBSkJBQXNQQUVFQkVBSkVBQUFBQUFBQUFBQUxEd0JCQUJBQ1JBQUFBQUFBQUFBQUM1d0RBaEYvQVgwakJpRUpJd1pCRUdva0JpQUFLQUlFc2lBQmxDQUFLZ0lNSWhPVkVMc0JJUW9nQUNnQ0NMSWdBWlFnRTVVUXV3RWhDMEVRRUVRaUJVVUVRRUVBUVFOQnVkZ0NJQWtRUFVFQkVBRUxJQWxCQ0dvaEF5QUZJQW8yQWdRZ0JTQUxOZ0lJSUFVZ0FUZ0NEQ0FGSUFvZ0Myd1FSQ0lDTmdJQUlBSkZCRUJCQUVFRFFibllBaUFERUQxQkFSQUJDd05BSUFZZ0MwZ0VRQ0FBS2dJTUloTWdCcktVSUFHVkVMc0JJUThnRXlBR1FRRnFJZ2F5bENBQmxSQzdBU0VFSUFBb0FnZ2lBeUFFSUFRZ0Ewb2JJUkJCQUNFSElBSWhCQU5BSUFjZ0NrZ0VRQ0FBS2dJTUloTWdCN0tVSUFHVkVMc0JJUkVnRXlBSFFRRnFJZ2V5bENBQmxSQzdBU0VDSUFBb0FnUWlEaUFDSUFJZ0Rrb2JJUkpCQUNFQ1FRQWhBeUFQSVFnRFFDQUlJQkJJQkVBZ0FDZ0NBQ0FSSWd3Z0NDQU9iR3BxSVEwRFFDQU1JQkpJQkVBZ0FpQU5MUUFBYWlFQ0lBeEJBV29oRENBTlFRRnFJUTBnQTBFQmFpRUREQUVMQ3lBSVFRRnFJUWdNQVFzTElBUWdBaUFERURrNkFBQWdCRUVCYWlFRURBRUxDeUFFSVFJTUFRc0xJQWtrQmlBRkN4d0FJQUVnQWlBRElBUWdCU0FHSUFjZ0FFRUhjVUhpQm1vUkRRQUxHZ0FnQVNBQ0lBTWdCQ0FGSUFZZ0FFRUhjVUhhQm1vUkRBQUxHQUFnQVNBQ0lBTWdCQ0FGSUFCQlAzRkJtZ1pxRVFVQUN4WUFJQUVnQWlBRElBUWdBRUVmY1VINkJXb1JCd0FMRkFBZ0FTQUNJQU1nQUVFRGNVSDJCV29SQmdBTEZBQWdBU0FDSUFNZ0FFRUJjVUgwQldvUkdBQUxGQUFnQVNBQ0lBTWdBRUVCY1VIeUJXb1JHUUFMRGdBZ0FFRUJjVUdxQTJvUkN3QUxIZ0FnQVNBQ0lBTWdCQ0FGSUFZZ0J5QUlJQUJCRDNGQmpnTnFFUTRBQ3h3QUlBRWdBaUFESUFRZ0JTQUdJQWNnQUVFSGNVR0dBMm9SRHdBTGtnRUJBbjhnQUFSQUlBQkJpTGtCRUxBQklnRUVRQUpBSUFGQkFFRUNFUFFCSUFFUStBSWhBaUFCUVFCQkFCRDBBU0FDUVFGcUVFUWlBRVVFUUNBQkVHcEJwTVVEUVRBMkFnQkJBQ0VBREFFTElBQWdBa0VCSUFFUVlVVUVRQ0FBRURnZ0FSQnFRUUFoQUF3QkN5QUFJQUpxUVFBNkFBQWdBUkJxQ3dWQkFDRUFDd1ZCcE1VRFFSdzJBZ0JCQUNFQUN5QUFDeG9BSUFFZ0FpQURJQVFnQlNBR0lBQkJQM0ZCeGdKcUVRb0FDeG9BSUFFZ0FpQURJQVFnQlNBR0lBQkJBM0ZCd2dKcUVSc0FDeGdBSUFFZ0FpQURJQVFnQlNBQVFSOXhRYUlDYWhFSUFBc1lBQ0FCSUFJZ0F5QUVJQVVnQUVFSGNVR2FBbW9SRXdBTEZnQWdBU0FDSUFNZ0JDQUFRUTl4UVlvQ2FoRUpBQXNVQUNBQklBSWdBeUFBUVQ5eFFjb0JhaEVFQUFzU0FDQUJJQUlnQUVFL2NVR0tBV29SQWdBTEdnQWdBU0FDSUFNZ0JDQUZJQVlnQUVFQmNVR0lBV29SSWdBTEVBQWdBU0FBUWY4QWNVRUlhaEVBQUFzTkFDQUFRUUZ4UVFacUVSQUFDODhCQVFWL0l3WWhCQ01HUVNCcUpBWWdCRUVRYWlFR0lBRkZRZENGQVNnQ0FDQUFTbkpGQkVBZ0FTd0FBQVJBSUFRZ0FpZ0NBRFlDQUVFQVFRQWdBU0FFRUtrQklnY0VRQ0FBUVFSSkJIOGdBRUVDZEVIQUZXb29BZ0FRWUVFRGFnVkJBQXNpQlNBSGFrRUJhaEJFSVFNZ0JRUkFJQVlnQUVFQ2RFSEFGV29vQWdBMkFnQWdBeUFGUVFGcVFkMnpBU0FHRUtNQ0dnc2dBeUFGYWlBSFFRRnFJQUVnQWhDcEFScEJwSWdCS0FJQUlRQWdBeEJnSWdFZ0EwRUJJQUVnQUJDVEFVY2FJQU1RT0FzTEN5QUVKQVlMRVFBZ0FTQUNJQUJCQVhGQkJHb1JIZ0FMREFBZ0FTQUFRUU54RVJJQUN5a0FJQUJFQUFBQUFBQUE0RCtnbkNBQVJBQUFBQUFBQU9BL29ac2dBRVFBQUFBQUFBQUFBR1liQ3hBQUl3TkZCRUFnQUNRRElBRWtCQXNMS3dBZ0FFSC9BWEZCR0hRZ0FFRUlkVUgvQVhGQkVIUnlJQUJCRUhWQi93RnhRUWgwY2lBQVFSaDJjZ3VSQndFSWZ5QUFLQUlFSWdaQmVIRWhBZ0pBSUFaQkEzRkZCRUFnQVVHQUFra05BU0FDSUFGQkJHcFBCRUFnQWlBQmEwR00xUU1vQWdCQkFYUk5CRUFnQUE4TEN3d0JDeUFBSUFKcUlRUWdBaUFCVHdSQUlBSWdBV3NpQWtFUFRRUkFJQUFQQ3lBQUlBRWdCa0VCY1hKQkFuSTJBZ1FnQUNBQmFpSUJJQUpCQTNJMkFnUWdCQ0FFS0FJRVFRRnlOZ0lFSUFFZ0FoQ1FCQ0FBRHd0QnhORURLQUlBSUFSR0JFQkJ1TkVES0FJQUlBSnFJZ0lnQVUwTkFTQUFJQUVnQmtFQmNYSkJBbkkyQWdRZ0FDQUJhaUlESUFJZ0FXc2lBVUVCY2pZQ0JFSEUwUU1nQXpZQ0FFRzQwUU1nQVRZQ0FDQUFEd3RCd05FREtBSUFJQVJHQkVBZ0FrRzAwUU1vQWdCcUlnTWdBVWtOQVNBRElBRnJJZ0pCRDBzRVFDQUFJQUVnQmtFQmNYSkJBbkkyQWdRZ0FDQUJhaUlCSUFKQkFYSTJBZ1FnQUNBRGFpSURJQUkyQWdBZ0F5QURLQUlFUVg1eE5nSUVCU0FBSUFNZ0JrRUJjWEpCQW5JMkFnUWdBQ0FEYWlJQklBRW9BZ1JCQVhJMkFnUkJBQ0VCUVFBaEFndEJ0TkVESUFJMkFnQkJ3TkVESUFFMkFnQWdBQThMSUFRb0FnUWlBMEVDY1EwQUlBSWdBMEY0Y1dvaUJ5QUJTUTBBSUFOQkEzWWhCU0FEUVlBQ1NRUkFJQVFvQWdnaUFpQUVLQUlNSWdOR0JFQkJyTkVEUWF6UkF5Z0NBRUVCSUFWMFFYOXpjVFlDQUFVZ0FpQUROZ0lNSUFNZ0FqWUNDQXNGQWtBZ0JDZ0NHQ0VJSUFRZ0JDZ0NEQ0lDUmdSQUFrQWdCRUVRYWlJRFFRUnFJZ1VvQWdBaUFnUkFJQVVoQXdVZ0F5Z0NBQ0lDUlFSQVFRQWhBZ3dDQ3dzRFFBSkFJQUpCRkdvaUJTZ0NBQ0lKUlFSQUlBSkJFR29pQlNnQ0FDSUpSUTBCQ3lBRklRTWdDU0VDREFFTEN5QURRUUEyQWdBTEJTQUVLQUlJSWdNZ0FqWUNEQ0FDSUFNMkFnZ0xJQWdFUUNBRUtBSWNJZ05CQW5SQjNOTURhaUlGS0FJQUlBUkdCRUFnQlNBQ05nSUFJQUpGQkVCQnNORURRYkRSQXlnQ0FFRUJJQU4wUVg5emNUWUNBQXdEQ3dVZ0NFRVFhaUlESUFoQkZHb2dBeWdDQUNBRVJoc2dBallDQUNBQ1JRMENDeUFDSUFnMkFoZ2dCQ2dDRUNJREJFQWdBaUFETmdJUUlBTWdBallDR0FzZ0JDZ0NGQ0lEQkVBZ0FpQUROZ0lVSUFNZ0FqWUNHQXNMQ3dzZ0J5QUJheUlDUVJCSkJFQWdBQ0FHUVFGeElBZHlRUUp5TmdJRUlBQWdCMm9pQVNBQktBSUVRUUZ5TmdJRUJTQUFJQUVnQmtFQmNYSkJBbkkyQWdRZ0FDQUJhaUlCSUFKQkEzSTJBZ1FnQUNBSGFpSURJQU1vQWdSQkFYSTJBZ1FnQVNBQ0VKQUVDeUFBRHd0QkFBdS9BUUVFZnlNR0lRVWpCa0VRYWlRR0lBQXNBQXNpQTBFQVNDSUdCSDhnQUNnQ0NFSC8vLy8vQjNGQmYyb2hCQ0FBS0FJRUJVRUJJUVFnQTBIL0FYRUxJUU1nQkNBRGF5QUNTUVJBSUFBZ0JDQUNJQU5xSUFScklBTWdBMEVBSUFJZ0FSQ1NCQVVnQWdSQUlBWUVmeUFBS0FJQUJTQUFDeUlFSUFOQkFuUnFJQUVnQWhDbkFTQUNJQU5xSVFFZ0FDd0FDMEVBU0FSQUlBQWdBVFlDQkFVZ0FDQUJPZ0FMQ3lBRlFRQTJBZ0FnQVVFQ2RDQUVhaUFGRUc0TEN5QUZKQVlMc0FFQkJIOGpCaUVGSXdaQkVHb2tCaUFBTEFBTElnWkJBRWdpQXdSL0lBQW9BZ2hCLy8vLy93ZHhRWDlxQlVFQkN5SUVJQUpKQkVBZ0FDQUVJQUlnQkdzZ0F3Ui9JQUFvQWdRRklBWkIvd0Z4Q3lJQVFRQWdBQ0FDSUFFUWtnUUZJQU1FZnlBQUtBSUFCU0FBQ3lJRElRUWdBZ1JBSUFRZ0FTQUNFT2tFQ3lBRlFRQTJBZ0FnQWtFQ2RDQURhaUFGRUc0Z0FDd0FDMEVBU0FSQUlBQWdBallDQkFVZ0FDQUNPZ0FMQ3dzZ0JTUUdDN2tCQVFSL0l3WWhCU01HUVJCcUpBWWdBQ3dBQ3lJRFFRQklJZ1lFZnlBQUtBSUlRZi8vLy84SGNVRi9haUVFSUFBb0FnUUZRUW9oQkNBRFFmOEJjUXNoQXlBRUlBTnJJQUpKQkVBZ0FDQUVJQUlnQTJvZ0JHc2dBeUFEUVFBZ0FpQUJFSlFFQlNBQ0JFQWdBeUFHQkg4Z0FDZ0NBQVVnQUFzaUJHb2dBU0FDRUtnQklBSWdBMm9oQVNBQUxBQUxRUUJJQkVBZ0FDQUJOZ0lFQlNBQUlBRTZBQXNMSUFWQkFEb0FBQ0FCSUFScUlBVVFYd3NMSUFVa0JndTNBUUVFZnlNR0lRUWpCa0VRYWlRR0lBRUVRQ0FBTEFBTElnTkJBRWdFZnlBQUtBSUVJUUlnQUNnQ0NFSC8vLy8vQjNGQmYyb0ZJQU5CL3dGeElRSkJDZ3NpQlNBQ2F5QUJTUVIvSUFBZ0JTQUJJQUpxSUFWcklBSWdBaERkQWlBQUxBQUxCU0FEQzBFQVNBUi9JQUFvQWdBRklBQUxJZ01nQW1vZ0FVRUFFSlVFSUFFZ0Ftb2hBU0FBTEFBTFFRQklCRUFnQUNBQk5nSUVCU0FBSUFFNkFBc0xJQVJCQURvQUFDQUJJQU5xSUFRUVh3c2dCQ1FHQzYwTUF5Si9BWDRDZkNNR0lRSWpCa0hnRTJva0JpQUNRZEFUYWlFYUlBSkJ5Qk5xSVE0Z0FrRzRFMm9oQ3lBQ1FiQVRhaUVQSUFKQnFCTnFJUkFnQWtHWUUyb2hEQ0FDUVpBVGFpRVJJQUpCaUJOcUlSY2dBa0dBRTJvaEVpQUNRZmdTYWlFWUlBSkI4QkpxSVJNZ0FrSG9FbW9oRkNBQ1FlQVNhaUVJSUFKQjJCSnFJUVVnQWtIUUVtb2hGU0FDUWNnU2FpRURJQUpCd0JKcUlRb2dBa0dBRW1vaEJ5QUNRWUFRYWlFR0lBSkIzQk5xSVJzZ0FrSFlFMm9oRFNBQ1FkUVRhaUVjSUFCQmliWUJFTEFCSWdrRVFBSkFJQVlnQ1JEcEFTQVZJQTAyQWdBZ0JrR3J0Z0VnRlJDREFVRUJSd1JBSUFVZ0FEWUNBRUVBUVFOQjRLNEJJQVVRUFNBSkVHcEJBQ0VBREFFTElBMG9BZ0FpQlVIQUFtd1FSQ0lEUlFSQVFRQkJBMEc1MkFJZ0NCQTlRUUVRQVFzZ0FVVWhIVUVBSVFvQ1FBSkFBa0FDUUFKQUFrQUNRQU5BQWtBZ0JDQUZUZzBISUFZZ0NSRHBBU0FFUWNBQ2JDQURhaUVGSUJRZ0JFSEFBbXdnQTJvaUNFRzRBbW8yQWdBZ0ZDQWJOZ0lFSUFSQndBSnNJQU5xSUFaQnhhOEJJQlFRZ3dGQkFVWUVmeUFGSUFncEE3Z0NJaVNuUWYvL0FYRkJBQ0FrUW9DQS92OFBnMUFiTmdJQVFRSWhDRUVCQlNBZERRRWdBaUFBRUk0R1JRMERJQUlnQmtIL0R5QUNFR0JyRU93RUlBVWdBU0FDRUtvRElnVTJBZ0FnQlVFQVNBMEVRUUVoQ0VFQUN6WUNCQ0FHSUFrUTZRRWdGeUFFUWNBQ2JDQURhaUlXUVFocU5nSUFJQVpCN2JFQklCY1Fnd0ZCQVVjTkJDQUdJQWtRNlFFZ0RDQUVRY0FDYkNBRGFrRVFhaUlaTmdJQUlBd2dCRUhBQW13Z0Eyb2lIa0VZYWpZQ0JDQU1JQVJCd0FKc0lBTnFRU0JxTmdJSUlBd2dCRUhBQW13Z0Eyb2lIMEVvYWpZQ0RDQUdRZHF5QVNBTUVJTUJRUVJHQkg5QkFRVWdFQ0FWTmdJQUlCQWdIRFlDQkNBR1FlcXlBU0FRRUlNQlFRSkhEUVpCQUFzaEJTQUlJQXB5SVFvRFFDQUdJQWtRNlFFZ0N5QUVRY0FDYkNBRGFrRVFhaUFGUVFWMGFqWUNBQ0FMSUFSQndBSnNJQU5xSUFWQkJYUnFRUmhxTmdJRUlBc2dCRUhBQW13Z0Eyb2dCVUVGZEdwQklHbzJBZ2dnQ3lBRVFjQUNiQ0FEYWlBRlFRVjBha0VvYWpZQ0RDQUdRZHF5QVNBTEVJTUJRUVJIRFFjZ0JVRUJhaUlGUVFOSkRRQUxJQmtnQkVIQUFtd2dBMnBCOEFCcUVLa0dJQWNnRmlzRENDSWxSQUFBQUFBQUFPQy9vaUltT1FNQUlBY2dKVVFBQUFBQUFBRGdQNklpSlRrRENDQUhJQ1U1QXhBZ0J5QWxPUU1ZSUFjZ0pUa0RJQ0FISUNZNUF5Z2dCeUFtT1FNd0lBY2dKamtET0NBRVFjQUNiQ0FEYWlFSUlBUkJ3QUpzSUFOcUlSWWdCRUhBQW13Z0Eyb2hJQ0FFUWNBQ2JDQURhaUVoSUFSQndBSnNJQU5xSVNJZ0JFSEFBbXdnQTJvaEkwRUFJUVVEUUNBRlFRUkhCRUFnQkVIQUFtd2dBMnBCMEFGcUlBVkJHR3hxSUI4ckF5Z2dHU3NEQUNBRlFRUjBJQWRxS3dNQUlpYWlJQjRyQXhnZ0JVRUVkQ0FIYWlzRENDSWxvcUNnT1FNQUlBUkJ3QUpzSUFOcUlBVkJHR3hxSUNBckEwZ2dKaUFJS3dNd29pQWxJQllyQXppaW9LQTVBOWdCSUFSQndBSnNJQU5xSUFWQkdHeHFJQ01yQTJnZ0ppQWhLd05Rb2lBbElDSXJBMWlpb0tBNUErQUJJQVZCQVdvaEJRd0JDd3NnQkVFQmFpRUVJQTBvQWdBaEJRd0JDd3NnRXlBQU5nSUFJQk1nQmpZQ0JFRUFRUU5Ceks4QklCTVFQUXdHQ3lBWUlBQTJBZ0JCQUVFRFFjeXdBU0FZRUQwTUJRc2dFaUFBTmdJQUlCSWdBallDQkVFQVFRTkJvTEVCSUJJUVBRd0VDeUFSSUFBMkFnQWdFU0FFUVFGcU5nSUVRUUJCQTBIeHNRRWdFUkE5REFNTElBOGdBRFlDQUNBUElBUkJBV28yQWdSQkFFRURRZkN5QVNBUEVEME1BZ3NnRGlBQU5nSUFJQTRnQkVFQmFqWUNCRUVBUVFOQjhMSUJJQTRRUFF3QkN5QUpFR3BCaUFFUVJDSUFSUVJBUVFCQkEwRzUyQUlnR2hBOVFRRVFBUXNnQUNBRE5nSUFJQUFnRFNnQ0FEWUNCQ0FBUVFBMkFvQUJJQUJCQURZQ2FDQUtRUU54UVFOR0JFQWdBRUVDTmdKc0JTQUtRUUZ4QkVBZ0FFRUFOZ0pzQlNBQVFRRTJBbXdMQ3lBQVJBQUFBQUFBQU9BL09RTndJQUJFQUFBQUFBQUE0RDg1QTNnTUFRc2dDUkJxSUFNUU9FRUFJUUFMQlNBS0lBQTJBZ0JCQUVFRFFhdXVBU0FLRUQxQnBNVURLQUlBRUwwQklRQWdBMEduMVFNMkFnQWdBeUFBTmdJRVFRQkJBMEdsdGdFZ0F4QTlRUUFoQUFzZ0FpUUdJQUFMNGhNQ0VIOEJmQ01HSVJNakJrRVFhaVFHSUJNaER5QUVLQUlBSWdnaEJ5QUJJQUpCZjJvaUVHeEJBWFFnQ0dvaEJRTkFJQXdnQVVnRVFDQUZRUUE3QVFBZ0IwRUFPd0VBSUFkQkFtb2hCeUFGUVFKcUlRVWdERUVCYWlFTURBRUxDeUFJSVFjZ0FVRi9haUlSUVFGMElBaHFJUVZCQUNFTUEwQWdEQ0FDU0FSQUlBVkJBRHNCQUNBSFFRQTdBUUFnQVVFQmRDQUhhaUVISUFGQkFYUWdCV29oQlNBTVFRRnFJUXdNQVFzTElBUkJrSURJQUdvaEIwRUFJQUZySVJJZ0FDQUJRUUZxSWdCcUlRNUJBU0VOUVFBaEJTQUFJQVFvQWdScUlRd2dBRUVCZENBSWFpRUlBbjhDUUFOQUFrQWdEU0FRVGcwQ0lBVWhBRUVCSVFvRFFDQUtJQkZJQkVBZ0RpMEFBQ0FEU2dSQUFrQWdERUYvT2dBQUlCSkJBWFFnQ0dvaUJTNEJBQ0lHUVFCS0JFQWdDQ0FHT3dFQUlBWkJCMndpQlVFQ2RDQUVha0gwLzg4QWFpSUdJQVlvQWdCQkFXbzJBZ0FnQlVFQ2RDQUVha0g0Lzg4QWFpSUdJQW9nQmlnQ0FHbzJBZ0FnQlVFQ2RDQUVha0g4Lzg4QWFpSUdJQTBnQmlnQ0FHbzJBZ0FnQlVFQ2RDQUVha0dNZ05BQWFpQU5OZ0lBREFFTElBVkJmbW91QVFBaUJpRUpJQVpCQUVvaEN5QUZMZ0VDSWdWQkFFd0VRQ0FMQkVBZ0NDQUdPd0VBSUFsQkIyd2lCVUVDZENBRWFrSDAvODhBYWlJR0lBWW9BZ0JCQVdvMkFnQWdCVUVDZENBRWFrSDQvODhBYWlJR0lBb2dCaWdDQUdvMkFnQWdCVUVDZENBRWFrSDgvODhBYWlJR0lBMGdCaWdDQUdvMkFnQWdCVUVDZENBRWFrR0VnTkFBYWlJR0tBSUFJQXBJQkVBZ0JpQUtOZ0lBQ3lBRlFRSjBJQVJxUVl5QTBBQnFJQTAyQWdBTUFnc2dDRUYrYWk0QkFDSUZRUUJLQkVBZ0NDQUZPd0VBSUFWQkIyd2lCVUVDZENBRWFrSDAvODhBYWlJR0lBWW9BZ0JCQVdvMkFnQWdCVUVDZENBRWFrSDQvODhBYWlJR0lBb2dCaWdDQUdvMkFnQWdCVUVDZENBRWFrSDgvODhBYWlJR0lBMGdCaWdDQUdvMkFnQWdCVUVDZENBRWFrR0VnTkFBYWlJRktBSUFJQXBPRFFJZ0JTQUtOZ0lBQlNBQVFmLy9BVW9OQmlBSUlBQkJBV29pQlRzQkFDQUVRWkNBeUFCcUlBQkJBblJxSUFWQkVIUkJFSFUyQWdBZ0JFR1FnTkFBYWlBQVFRZHNJZ0JCQW5ScVFRRTJBZ0FnQUVFQ2RDQUVha0dVZ05BQWFpQUtOZ0lBSUFCQkFuUWdCR3BCbUlEUUFHb2dEVFlDQUNBQVFRSjBJQVJxUVp5QTBBQnFJQW8yQWdBZ0FFRUNkQ0FFYWtHZ2dOQUFhaUFLTmdJQUlBQkJBblFnQkdwQnBJRFFBR29nRFRZQ0FDQUFRUUowSUFScVFhaUEwQUJxSUEwMkFnQWdCU0VBQ3d3QkN5QUxCRUFDUUNBRlFRSjBJQVJxUVl5QXlBQnFLQUlBSWdVZ0NVRUNkQ0FFYWtHTWdNZ0FhaWdDQUNJR1NnUkFJQWdnQmpzQkFDQUhJUWxCQUNFTEEwQWdDeUFBVGdSQUlBWWhCUXdEQ3lBRklBa29BZ0JHQkVBZ0NTQUdOZ0lBQ3lBSlFRUnFJUWtnQzBFQmFpRUxEQUFBQ3dBRklBZ2dCVHNCQUNBRklBWklCRUFnQnlFSlFRQWhDd05BSUFzZ0FFNE5BeUFHSUFrb0FnQkdCRUFnQ1NBRk5nSUFDeUFKUVFScUlRa2dDMEVCYWlFTERBQUFDd0FMQ3dzZ0JVRVFkRUVRZFVFSGJDSUZRUUowSUFScVFmVC96d0JxSWdZZ0JpZ0NBRUVCYWpZQ0FDQUZRUUowSUFScVFmai96d0JxSWdZZ0NpQUdLQUlBYWpZQ0FDQUZRUUowSUFScVFmei96d0JxSWdZZ0RTQUdLQUlBYWpZQ0FDQUZRUUowSUFScVFZeUEwQUJxSUEwMkFnQU1BUXNnQ0VGK2FpNEJBQ0lHUVFCTUJFQWdDQ0FGT3dFQUlBVkJCMndpQlVFQ2RDQUVha0gwLzg4QWFpSUdJQVlvQWdCQkFXbzJBZ0FnQlVFQ2RDQUVha0g0Lzg4QWFpSUdJQW9nQmlnQ0FHbzJBZ0FnQlVFQ2RDQUVha0g4Lzg4QWFpSUdJQTBnQmlnQ0FHbzJBZ0FnQlVFQ2RDQUVha0dBZ05BQWFpSUdLQUlBSUFwS0JFQWdCaUFLTmdJQUN5QUZRUUowSUFScVFZeUEwQUJxSUEwMkFnQU1BUXNDUUNBRlFRSjBJQVJxUVl5QXlBQnFLQUlBSWdVZ0JrRUNkQ0FFYWtHTWdNZ0FhaWdDQUNJR1NnUkFJQWdnQmpzQkFDQUhJUWxCQUNFTEEwQWdDeUFBVGdSQUlBWWhCUXdEQ3lBRklBa29BZ0JHQkVBZ0NTQUdOZ0lBQ3lBSlFRUnFJUWtnQzBFQmFpRUxEQUFBQ3dBRklBZ2dCVHNCQUNBRklBWklCRUFnQnlFSlFRQWhDd05BSUFzZ0FFNE5BeUFHSUFrb0FnQkdCRUFnQ1NBRk5nSUFDeUFKUVFScUlRa2dDMEVCYWlFTERBQUFDd0FMQ3dzZ0JVRVFkRUVRZFVFSGJDSUZRUUowSUFScVFmVC96d0JxSWdZZ0JpZ0NBRUVCYWpZQ0FDQUZRUUowSUFScVFmai96d0JxSWdZZ0NpQUdLQUlBYWpZQ0FDQUZRUUowSUFScVFmei96d0JxSWdVZ0RTQUZLQUlBYWpZQ0FBc0ZJQWhCQURzQkFDQU1RUUE2QUFBTElBNUJBV29oRGlBTVFRRnFJUXdnQ2tFQmFpRUtJQWhCQW1vaENBd0JDd3NnRGtFQ2FpRU9JQTFCQVdvaERTQUFJUVVnREVFQ2FpRU1JQWhCQkdvaENBd0JDd3RCQUVFRFFhaWxBU0FQRUQxQmZ3d0JDeUFFUVF4cUlReEJBU0VBUVFFaENBTkFJQWdnQlV3RVFDQUlJQWNvQWdBaUJrWUVRQ0FBUVFGcUlRTUZJQUFoQXlBR1FRSjBJQVJxUVl5QXlBQnFLQUlBSVFBTElBY2dBRFlDQUNBRElRQWdDRUVCYWlFSUlBZEJCR29oQnd3QkN3c2dCQ0FBUVg5cUlnQTJBZ2dnQUFSL0lBeEJBQ0FBUVFKMEVFVWFJQVJCa0lBb2FrRUFJQUJCQkhRUVJScEJBQ0VEQTBBZ0F5QUFTQVJBSUFSQmpJQUlhaUFEUVFKMElnZEJBblJxSUFFMkFnQWdCRUdNZ0FocUlBZEJBWEpCQW5ScVFRQTJBZ0FnQkVHTWdBaHFJQWRCQW5KQkFuUnFJQUkyQWdBZ0JFR01nQWhxSUFkQkEzSkJBblJxUVFBMkFnQWdBMEVCYWlFRERBRUxDMEVBSVFFRFFDQUJJQVZJQkVBZ0JFRU1haUFFUVpDQXlBQnFJQUZCQW5ScUtBSUFRWDlxSWdKQkFuUnFJZ01nQkVHUWdOQUFhaUFCUVFkc0lnQkJBblJxS0FJQUlBTW9BZ0JxTmdJQUlBUkJrSUFvYWlBQ1FRRjBJZ05CQTNScUlnY2dCeXNEQUNBQVFRSjBJQVJxUVpTQTBBQnFLQUlBdDZBNUF3QWdCRUdRZ0NocUlBTkJBWEpCQTNScUlnTWdBeXNEQUNBQVFRSjBJQVJxUVppQTBBQnFLQUlBdDZBNUF3QWdCRUdNZ0FocUlBSkJBblFpQWtFQ2RHb2lBeWdDQUNBQVFRSjBJQVJxUVp5QTBBQnFLQUlBSWdkS0JFQWdBeUFITmdJQUN5QUVRWXlBQ0dvZ0FrRUJja0VDZEdvaUF5Z0NBQ0FBUVFKMElBUnFRYUNBMEFCcUtBSUFJZ2RJQkVBZ0F5QUhOZ0lBQ3lBRVFZeUFDR29nQWtFQ2NrRUNkR29pQXlnQ0FDQUFRUUowSUFScVFhU0EwQUJxS0FJQUlnZEtCRUFnQXlBSE5nSUFDeUFFUVl5QUNHb2dBa0VEY2tFQ2RHb2lBaWdDQUNBQVFRSjBJQVJxUWFpQTBBQnFLQUlBSWdCSUJFQWdBaUFBTmdJQUN5QUJRUUZxSVFFTUFRc0xJQVFvQWdnaEFVRUFJUUFEZnlBQUlBRklCSDhnQkVHUWdDaHFJQUJCQVhRaUFrRURkR29pQXlBREt3TUFJQVJCREdvZ0FFRUNkR29vQWdDM0loV2pPUU1BSUFSQmtJQW9haUFDUVFGeVFRTjBhaUlDSUFJckF3QWdGYU01QXdBZ0FFRUJhaUVBREFFRlFRQUxDd1ZCQUFzTElSUWdEeVFHSUJRTHJnRUJCSDhqQmlFRkl3WkJFR29rQmlBQUxBQUxJZ1pCQUVnaUF3Ui9JQUFvQWdoQi8vLy8vd2R4UVg5cUJVRUtDeUlFSUFKSkJFQWdBQ0FFSUFJZ0JHc2dBd1IvSUFBb0FnUUZJQVpCL3dGeEN5SUFRUUFnQUNBQ0lBRVFsQVFGSUFNRWZ5QUFLQUlBQlNBQUN5SURJUVFnQWdSQUlBUWdBU0FDRU9jQkdnc2dCVUVBT2dBQUlBSWdBMm9nQlJCZklBQXNBQXRCQUVnRVFDQUFJQUkyQWdRRklBQWdBam9BQ3dzTElBVWtCZ3RBQVFKL1FkaTFBaEJnSWdKQkRXb1FVU0lCSUFJMkFnQWdBU0FDTmdJRUlBRkJBRFlDQ0NBQlFReHFJZ0ZCMkxVQ0lBSkJBV29RVEJvZ0FDQUJOZ0lBQ3k0QUEwQWdBQ2dDQUVFQlJnMEFDeUFBS0FJQVJRUkFJQUJCQVRZQ0FDQUJRYndFRVFFQUlBQkJmellDQUFzTFZBRUJmeUFBS0FJSUJFQWdBQ0FBS0FJSUlnRkJmMm8yQWdnZ0FVVUVRQ0FBS0FJQUtBSVFJUUVnQUNBQlFmOEJjVUdzQTJvUkFRQUxCU0FBS0FJQUtBSVFJUUVnQUNBQlFmOEJjVUdzQTJvUkFRQUxDeHNBSUFBZ0FTZ0NBQ0lBTmdJQUlBQWdBQ2dDQkVFQmFqWUNCQXRPQVFOL0lBSWdBV3RCQW5ZaEJ5QUJJUUFEUUNBQUlBSkhCRUFnQkNBQUtBSUFJZ1pCL3dGeElBTWdCa0dBQVVrYk9nQUFJQVJCQVdvaEJDQUFRUVJxSVFBTUFRc0xJQWRCQW5RZ0FXb0xFUUFnQVVIL0FYRWdBaUFCUVlBQlNSc0xLUUFEUUNBQklBSkhCRUFnQXlBQkxBQUFOZ0lBSUFOQkJHb2hBeUFCUVFGcUlRRU1BUXNMSUFJTENnQWdBVUVZZEVFWWRRdEJBQU5BSUFFZ0FrY0VRQ0FCSUFFb0FnQWlBRUdBQVVrRWYwRzBpQUVvQWdBZ0FTZ0NBRUVDZEdvb0FnQUZJQUFMTmdJQUlBRkJCR29oQVF3QkN3c2dBZ3NlQUNBQlFZQUJTUVIvUWJTSUFTZ0NBQ0FCUVFKMGFpZ0NBQVVnQVFzTG5Rd0NBbjhVZkNBQUt3TUlJZ29nQUNzREtDSUxvaUFBS3dNUUlna2dBQ3NESUNJUW9xRWhCQ0FKSUFBckF4Z2lEYUlnQUNzREFDSUlJQXVpb1NFSElBZ2dFS0lnQ2lBTm9xRWlBeUFEb2lBRUlBU2lJQWNnQjZLZ29KOGlCVVFBQUFBQUFBQUFBR0lFUUNBRElBV2pJUVlnQ0NBSElBV2pJaEdpSWdNZ0NpQUVJQVdqSWcraUloT2hJaEpFQUFBQUFBQUFBQUJpQkh3Z0R5RUVJQWdoQlNBS0lRNGdFU0VISUFrRklBa2dDaUFJSUFhaUlBa2dENktoUkFBQUFBQUFBQUFBWWlJQkd5RU9RUUZCQWlBQkd5RUNJQTRnRHlBR0lBRWJJZ1NpSWhJaEV5QUlJQWtnQVJzaUJTQUdJQkVnQVJzaUI2SWlBeUFTb1NFU0lCRWdEeUFCR3lFR0lBb2dDQ0FCR3dzaERDQUlJQTJpSUFvZ0VLS2dJQWtnQzZLZ0lnaWFJQWdnQ0VRQUFBQUFBQUFBQUdNYklnaEVBQUFBQUFBQThEK2duMFFBQUFBQUFBRHdQeUFJb1orZ1JBQUFBQUFBQU9BL29pRVVJQkpFQUFBQUFBQUFBQUJpQkVBZ0RpQUdvaUFNSUFlaW9TQVNveUlPSUE2aUlBVWdCcUlnRENBRW9xRWdFeUFEb1NJRG95SUlJQWlpb0VRQUFBQUFBQUR3UDZBaENpQU9JQlFnQjZJZ0VxTWlCYUlnQ0NBVUlBU2lJQU9qSWdtaW9DSVBJQStpSUFvZ0JTQUZvaUFKSUFtaW9FUUFBQUFBQUFEd3Y2Q2lvU0lEUkFBQUFBQUFBQUFBWTBVRVFDQUZJQTRnQTU4aURDQVBvU0FLb3lJUm9xQWhBeUFKSUFnZ0VhS2dJUklnQlNBT0lBK2FJQXloSUFxaklncWlvQ0VGSUFrZ0NDQUtvcUFoQ0NBTkFud0NRQUpBQWtBZ0FrRURjVUVCYXc0Q0FBRUNDeUFJSVE0Z0NpRUlJQVVoQ2lBU0lROGdFU0VTSUFNaEVTQUVJUU1nQnlFRUlBWU1BZ3NnQlNFT0lBTWhEeUFHSVFNZ0J3d0JDeUFLSVE0Z0JTRUtJQkVoRHlBRElSRWdCQ0VESUFZaEJDQUhDeUlGb2lJVklCQWdBNklpRnFFaUUwUUFBQUFBQUFBQUFHSUVmeUFESVFjZ0RTRUpJQkFoRENBRklRWkJBQVVnQ3lBUUlBMGdCS0lnQ3lBRG9xRkVBQUFBQUFBQUFBQmlJZ0ViSVF3Z0RTQUxJQUViSWdrZ0JDQUZJQUViSWdhaUlnc2hGU0FNSUFNZ0JDQUJHeUlIb2lJRUlSWWdDeUFFb1NFVElCQWdEU0FCR3lFTElBVWdBeUFCR3lFRVFRRkJBaUFCR3dzaEFpQVRSQUFBQUFBQUFBQUFZZ1JBSUF3Z0JLSWdDeUFHb3FFZ0U2TWlBeUFEb2lBSklBU2lJQXNnQjZLaElCWWdGYUVpQmFNaUJDQUVvcUJFQUFBQUFBQUE4RCtnSVEwZ0F5QVVJQWFpSUJPaklnYWlJQVFnRkNBSG9pQUZveUlIb3FBaUN5QUxvaUFOSUFZZ0JxSWdCeUFIb3FCRUFBQUFBQUFBOEwrZ29xRWlCVVFBQUFBQUFBQUFBR05GQkVBZ0JpQURJQVdmSWhBZ0M2RWdEYU1pQ2FLZ0lRd2dCeUFFSUFtaW9DRUZJQVlnQXlBTG1pQVFvU0FOb3lJRG9xQWhCaUFISUFRZ0E2S2dJUWNDUUFKQUFrQUNRQ0FDUVFOeFFRRnJEZ0lBQVFJTElBY2hCQ0FESVFjZ0JpRURJQVVoQmlBSklRVWdEQ0VKREFJTElBWWhCQ0FNSVFZTUFRc2dBeUVFSUFZaEF5QUpJUVlnRENFSkN5QUtJQW1pSUFnZ0JhS2dJQTRnQnFLZ0lneWFJQXdnREVRQUFBQUFBQUFBQUdNYklRd2dDaUFEb2lBSUlBZWlvQ0FPSUFTaW9DSU5taUFOSUExRUFBQUFBQUFBQUFCakd5RU5JQkVnQ2FJZ0VpQUZvcUFnRHlBR29xQWlDNW9nQ3lBTFJBQUFBQUFBQUFBQVl4c2lDeUFSSUFPaUlCSWdCNktnSUE4Z0JLS2dJaENhSUJBZ0VFUUFBQUFBQUFBQUFHTWJJaEJqQkVBZ0N5QU1Zd1JBSUFzZ0RXTUVRQ0FBSUJFNUF3QWdBQ0FTT1FNSUlBQWdEemtERUNBQUlBazVBeGdnQUNBRk9RTWdJQUFnQmprREtBVWdBQ0FLT1FNQUlBQWdDRGtEQ0NBQUlBNDVBeEFnQUNBRE9RTVlJQUFnQnprRElDQUFJQVE1QXlnTEJTQUFJQW81QXdBZ0FDQUlPUU1JSUFBZ0Rqa0RFQ0FNSUExakJFQWdBQ0FKT1FNWUlBQWdCVGtESUNBQUlBWTVBeWdGSUFBZ0F6a0RHQ0FBSUFjNUF5QWdBQ0FFT1FNb0N3c0ZJQkFnREdNRVFDQVFJQTFqQkVBZ0FDQVJPUU1BSUFBZ0Vqa0RDQ0FBSUE4NUF4QUZJQUFnQ2prREFDQUFJQWc1QXdnZ0FDQU9PUU1RQ3lBQUlBTTVBeGdnQUNBSE9RTWdJQUFnQkRrREtBVWdBQ0FLT1FNQUlBQWdDRGtEQ0NBQUlBNDVBeEFnRENBTll3UkFJQUFnQ1RrREdDQUFJQVU1QXlBZ0FDQUdPUU1vQlNBQUlBTTVBeGdnQUNBSE9RTWdJQUFnQkRrREtBc0xDd3NMQ3dzTEMwRUFBMEFnQVNBQ1J3UkFJQUVnQVNnQ0FDSUFRWUFCU1FSL1FhU0tBU2dDQUNBQktBSUFRUUowYWlnQ0FBVWdBQXMyQWdBZ0FVRUVhaUVCREFFTEN5QUNDeDRBSUFGQmdBRkpCSDlCcElvQktBSUFJQUZCQW5ScUtBSUFCU0FCQ3d0S0FBTkFBa0FnQWlBRFJnUkFJQU1oQWd3QkN5QUNLQUlBUVlBQlR3MEFJQUZCb0lvQktBSUFJQUlvQWdCQkFYUnFMZ0VBY1VILy93TnhCRUFnQWtFRWFpRUNEQUlMQ3dzZ0FndEtBQU5BQWtBZ0FpQURSZ1JBSUFNaEFnd0JDeUFDS0FJQVFZQUJTUVJBSUFGQm9Jb0JLQUlBSUFJb0FnQkJBWFJxTGdFQWNVSC8vd054RFFFTElBSkJCR29oQWd3QkN3c2dBZ3RHQUFOQUlBRWdBa2NFUUNBRElBRW9BZ0JCZ0FGSkJIOUJvSW9CS0FJQUlBRW9BZ0JCQVhScUx3RUFCVUVBQ3pzQkFDQURRUUpxSVFNZ0FVRUVhaUVCREFFTEN5QUNDeWtBSUFKQmdBRkpCSDhnQVVHZ2lnRW9BZ0FnQWtFQmRHb3VBUUJ4UWYvL0EzRkJBRWNGUVFBTEN5QUFJQUJDQURjQ0FDQUFRUUEyQWdnZ0FFSE1vZ0ZCektJQkVMUUJFTXNCQ3lBQUlBQkNBRGNDQUNBQVFRQTJBZ2dnQUVIa29nRkI1S0lCRUxRQkVNc0JDd3dBSUFBZ0FVRVFhaERlQWdzSEFDQUFLQUlNQ3djQUlBQW9BZ2dMQ3dBZ0FCQ1pCQ0FBRURnTEhnQWdBRUlBTndJQUlBQkJBRFlDQ0NBQVFZMmpBMEdOb3dNUVlCQitDeDRBSUFCQ0FEY0NBQ0FBUVFBMkFnZ2dBRUdUb3dOQms2TURFR0FRZmdzTUFDQUFJQUZCREdvUTNnSUxCd0FnQUN3QUNRc0hBQ0FBTEFBSUN3c0FJQUFRbWdRZ0FCQTRDeW9CQVh4QmZ5QUFLd01BSUFFckF3Q2hJZ0pFQUFBQUFBQUFBQUJrSUFKRUFBQUFBQUFBQUFCakd3c3pBQU5BSUFFZ0FrY0VRQ0FFSUFFc0FBQWlBQ0FESUFCQmYwb2JPZ0FBSUFSQkFXb2hCQ0FCUVFGcUlRRU1BUXNMSUFJTEVnQWdBU0FDSUFGQkdIUkJHSFZCZjBvYkN5a0FBMEFnQVNBQ1J3UkFJQU1nQVN3QUFEb0FBQ0FEUVFGcUlRTWdBVUVCYWlFQkRBRUxDeUFDQ3dRQUlBRUxSQUFEUUNBQklBSkhCRUFnQVNBQkxBQUFJZ0JCZjBvRWYwRzBpQUVvQWdBZ0FTd0FBRUVDZEdvb0FnQkIvd0Z4QlNBQUN6b0FBQ0FCUVFGcUlRRU1BUXNMSUFJTExRQWdBVUVZZEVFWWRVRi9TZ1IvUWJTSUFTZ0NBQ0FCUVJoMFFSaDFRUUowYWlnQ0FFSC9BWEVGSUFFTEMwUUFBMEFnQVNBQ1J3UkFJQUVnQVN3QUFDSUFRWDlLQkg5QnBJb0JLQUlBSUFFc0FBQkJBblJxS0FJQVFmOEJjUVVnQUFzNkFBQWdBVUVCYWlFQkRBRUxDeUFDQ3lzQUlBRkJHSFJCR0hWQmYwb0VmMEdraWdFb0FnQWdBVUgvQVhGQkFuUnFLQUlBUWY4QmNRVWdBUXNMQ3dBZ0FCQ2JCQ0FBRURnTE53RUNmeUFBS0FJQUlnRWhBaUFCQkVBZ0FDQUNOZ0lFSUFFZ0FFRVFha1lFUUNBQVFRQTZBSUFCQlNBQUtBSUlHaUFCRURnTEN3c0xBQ0FBRUp3RUlBQVFPQXVRQmdFQ2Z5QUNJQUEyQWdBZ0JTQUROZ0lBSUFJb0FnQWhBQU5BQWtBZ0FDQUJUd1JBUVFBaEFBd0JDeUFBTGdFQUlnWkIvLzhEY1NJRFFmLy93d0JMQkVCQkFpRUFEQUVMSUFaQi8vOERjVUdBQVVnRVFDQUVJQVVvQWdBaUFHdEJBVWdFUUVFQklRQU1BZ3NnQlNBQVFRRnFOZ0lBSUFBZ0Jqb0FBQVVDUUNBR1FmLy9BM0ZCZ0JCSUJFQWdCQ0FGS0FJQUlnQnJRUUpJQkVCQkFTRUFEQVFMSUFVZ0FFRUJhallDQUNBQUlBTkJCblpCd0FGeU9nQUFJQVVnQlNnQ0FDSUFRUUZxTmdJQUlBQWdBMEUvY1VHQUFYSTZBQUFNQVFzZ0JrSC8vd054UVlDd0EwZ0VRQ0FFSUFVb0FnQWlBR3RCQTBnRVFFRUJJUUFNQkFzZ0JTQUFRUUZxTmdJQUlBQWdBMEVNZGtIZ0FYSTZBQUFnQlNBRktBSUFJZ0JCQVdvMkFnQWdBQ0FEUVFaMlFUOXhRWUFCY2pvQUFDQUZJQVVvQWdBaUFFRUJhallDQUNBQUlBTkJQM0ZCZ0FGeU9nQUFEQUVMSUFaQi8vOERjVUdBdUFOT0JFQWdCa0gvL3dOeFFZREFBMGdFUUVFQ0lRQU1CQXNnQkNBRktBSUFJZ0JyUVFOSUJFQkJBU0VBREFRTElBVWdBRUVCYWpZQ0FDQUFJQU5CREhaQjRBRnlPZ0FBSUFVZ0JTZ0NBQ0lBUVFGcU5nSUFJQUFnQTBFR2RrRS9jVUdBQVhJNkFBQWdCU0FGS0FJQUlnQkJBV28yQWdBZ0FDQURRVDl4UVlBQmNqb0FBQXdCQ3lBQklBQnJRUVJJQkVCQkFTRUFEQU1MSUFCQkFtb2hCaUFBTHdFQ0lnQkJnUGdEY1VHQXVBTkhCRUJCQWlFQURBTUxJQVFnQlNnQ0FHdEJCRWdFUUVFQklRQU1Bd3NnQUVIL0IzRWdBMEhBQjNFaUIwRUtkRUdBZ0FScUlBTkJDblJCZ1BnRGNYSnlRZi8vd3dCTEJFQkJBaUVBREFNTElBSWdCallDQUNBRklBVW9BZ0FpQmtFQmFqWUNBQ0FHSUFkQkJuWkJBV29pQmtFQ2RrSHdBWEk2QUFBZ0JTQUZLQUlBSWdkQkFXbzJBZ0FnQnlBR1FRUjBRVEJ4SUFOQkFuWkJEM0Z5UVlBQmNqb0FBQ0FGSUFVb0FnQWlCa0VCYWpZQ0FDQUdJQU5CQkhSQk1IRWdBRUVHZGtFUGNYSkJnQUZ5T2dBQUlBVWdCU2dDQUNJRFFRRnFOZ0lBSUFNZ0FFRS9jVUdBQVhJNkFBQUxDeUFDSUFJb0FnQkJBbW9pQURZQ0FBd0JDd3NnQUF1OEJnRUZmeUFDSUFBMkFnQWdCU0FETmdJQUEwQUNRQ0FDS0FJQUlnTWdBVThFUUVFQUlRQU1BUXNnQlNnQ0FDSUlJQVJQQkVCQkFTRUFEQUVMSUFNc0FBQWlCa0gvQVhFaUNVSC8vOE1BU3dSQVFRSWhBQXdCQ3lBQ0lBWkJmMG9FZnlBSUlBWkIvd0Z4T3dFQUlBTkJBV29GQW44Z0JrSC9BWEZCd2dGSUJFQkJBaUVBREFNTElBWkIvd0Z4UWVBQlNBUkFJQUVnQTJ0QkFrZ0VRRUVCSVFBTUJBc2dBeTBBQVNJQVFjQUJjVUdBQVVjRVFFRUNJUUFNQkFzZ0NVRUdkRUhBRDNFZ0FFRS9jWElpQUVILy84TUFTd1JBUVFJaEFBd0VDeUFJSUFBN0FRQWdBMEVDYWd3QkN5QUdRZjhCY1VId0FVZ0VRQ0FCSUFOclFRTklCRUJCQVNFQURBUUxJQU1zQUFFaEJ5QURMUUFDSVFBQ1FBSkFBa0FnQmtGZ2F5SUdCRUFnQmtFTlJnUkFEQUlGREFNTEFBc2dCMEhnQVhGQm9BRkhCRUJCQWlFQURBY0xEQUlMSUFkQjRBRnhRWUFCUndSQVFRSWhBQXdHQ3d3QkN5QUhRY0FCY1VHQUFVY0VRRUVDSVFBTUJRc0xJQUJCd0FGeFFZQUJSd1JBUVFJaEFBd0VDeUFBUVQ5eElBbEJESFFnQjBFL2NVRUdkSEp5SWdCQi8vOERjVUgvLzhNQVN3UkFRUUloQUF3RUN5QUlJQUE3QVFBZ0EwRURhZ3dCQ3lBR1FmOEJjVUgxQVU0RVFFRUNJUUFNQXdzZ0FTQURhMEVFU0FSQVFRRWhBQXdEQ3lBRExBQUJJUWNnQXkwQUFpRUFJQU10QUFNaEF3SkFBa0FDUUFKQUlBWkJjR3NPQlFBQ0FnSUJBZ3NnQjBId0FHcEJHSFJCR0hWQi93RnhRVEJPQkVCQkFpRUFEQVlMREFJTElBZEI4QUZ4UVlBQlJ3UkFRUUloQUF3RkN3d0JDeUFIUWNBQmNVR0FBVWNFUUVFQ0lRQU1CQXNMSUFCQndBRnhRWUFCUndSQVFRSWhBQXdEQ3lBRFFjQUJjVUdBQVVjRVFFRUNJUUFNQXdzZ0JDQUlhMEVFU0FSQVFRRWhBQXdEQ3lBRFFUOXhJZ1lnQUVFR2RDSUtRY0FmY1NBSFFmOEJjU0lEUVF4MFFZRGdEM0VnQ1VFSGNTSUhRUkowY25KeVFmLy93d0JMQkVCQkFpRUFEQU1MSUFnZ0EwRUVka0VEY1NBSFFRSjBja0VHZEVIQS93QnFJQU5CQW5SQlBIRWdBRUVFZGtFRGNYSnlRWUN3QTNJN0FRQWdCU0FJUVFKcU5nSUFJQWdnQmlBS1FjQUhjWEpCZ0xnRGNqc0JBaUFDS0FJQVFRUnFDd3MyQWdBZ0JTQUZLQUlBUVFKcU5nSUFEQUVMQ3lBQUM1TUVBUWQvSUFFaEJ5QUFJUUVEUUFKQUlBRWdCMGtnQmlBQ1NYRkZEUUFnQVN3QUFDSURRZjhCY1NJSVFmLy93d0JMRFFBZ0EwRi9TZ1IvSUFGQkFXb0ZBbjhnQTBIL0FYRkJ3Z0ZJRFFJZ0EwSC9BWEZCNEFGSUJFQWdCeUFCYTBFQ1NBMERJQUV0QUFFaUJFSEFBWEZCZ0FGSElBaEJCblJCd0E5eElBUkJQM0Z5UWYvL3d3QkxjZzBESUFGQkFtb01BUXNnQTBIL0FYRkI4QUZJQkVBZ0J5QUJhMEVEU0EwRElBRXNBQUVoQkNBQkxRQUNJUVVDUUFKQUFrQWdBMEZnYXlJREJFQWdBMEVOUmdSQURBSUZEQU1MQUFzZ0JFSGdBWEZCb0FGSERRWU1BZ3NnQkVIZ0FYRkJnQUZIRFFVTUFRc2dCRUhBQVhGQmdBRkhEUVFMSUFWQndBRnhRWUFCUnlBRlFUOXhJQWhCREhSQmdPQURjU0FFUVQ5eFFRWjBjbkpCLy8vREFFdHlEUU1nQVVFRGFnd0JDeUFISUFGclFRUklJQUlnQm10QkFrbHlJQU5CL3dGeFFmVUJUbklOQWlBQkxBQUJJUVVnQVMwQUFpRUVJQUV0QUFNaENRSkFBa0FDUUFKQUlBTkJjR3NPQlFBQ0FnSUJBZ3NnQlVId0FHcEJHSFJCR0hWQi93RnhRVEJPRFFVTUFnc2dCVUh3QVhGQmdBRkhEUVFNQVFzZ0JVSEFBWEZCZ0FGSERRTUxJQWxCd0FGeFFZQUJSeUFKUVQ5eElBUkJCblJCd0I5eElBaEJFblJCZ0lEd0FIRWdCVUUvY1VFTWRISnlja0gvLzhNQVMzSWdCRUhBQVhGQmdBRkhjZzBDSUFaQkFXb2hCaUFCUVFScUN3c2hBU0FHUVFGcUlRWU1BUXNMSUFFZ0FHc0xDd0FnQWlBRElBUVFrd29MVFFFQmZ5TUdJUUFqQmtFUWFpUUdJQUJCQkdvaUFTQUNOZ0lBSUFBZ0JUWUNBQ0FDSUFNZ0FTQUZJQVlnQUJDU0NpRUlJQVFnQVNnQ0FEWUNBQ0FISUFBb0FnQTJBZ0FnQUNRR0lBZ0xUUUVCZnlNR0lRQWpCa0VRYWlRR0lBQkJCR29pQVNBQ05nSUFJQUFnQlRZQ0FDQUNJQU1nQVNBRklBWWdBQkNSQ2lFSUlBUWdBU2dDQURZQ0FDQUhJQUFvQWdBMkFnQWdBQ1FHSUFnTEN3QWdBQkNlQkNBQUVEZ0xLZ0VCZnlBQUtBSUlJZ0FFUUNBQUVHSWhBUkNiQXlFQUlBRUVRQ0FCRUdJYUN3VkJBU0VBQ3lBQUMzTUJCSDhnQXlFRkEwQUNRQ0FDSUFWR0lBWWdCRTl5RFFBZ0FDZ0NDQkJpSVFkQkFDQUNJQVVnQW1zZ0FVSEl4UU1nQVJzUTF3RWhBeUFIQkVBZ0J4QmlHZ3NDUUFKQUlBTkJmbXNPQXdJQ0FBRUxRUUVoQXdzZ0JrRUJhaUVHSUFNZ0NHb2hDQ0FDSUFOcUlRSU1BUXNMSUFnTFVBRUVmeUFBS0FJSUVHSWhBUUovSXdZaEF5TUdRUkJxSkFZZ0F3c2tCaUFCQkVBZ0FSQmlHZ3NnQUNnQ0NDSUFCSDhnQUJCaUlRQVFtd01oQkNBQUJFQWdBQkJpR2dzZ0JFRUJSZ1ZCQVFzTG1BRUJBbjhqQmlFRkl3WkJFR29rQmlBRUlBSTJBZ0FnQUNnQ0NCQmlJUUlnQlNJQVFRQVFuZ0VoQVNBQ0JFQWdBaEJpR2dzZ0FVRUJha0VDU1FSL1FRSUZJQUZCZjJvaUFTQURJQVFvQWdCclN3Ui9RUUVGQTM4Z0FRUi9JQUFzQUFBaEFpQUVJQVFvQWdBaUEwRUJhallDQUNBRElBSTZBQUFnQUVFQmFpRUFJQUZCZjJvaEFRd0JCVUVBQ3dzTEN5RUdJQVVrQmlBR0Mva0RBUVovSXdZaERDTUdRUkJxSkFZZ0RDRUpJQUloQ0FOQUFrQWdBeUFJUmdSQUlBTWhDQXdCQ3lBSUxBQUFCRUFnQ0VFQmFpRUlEQUlMQ3dzZ0J5QUZOZ0lBSUFRZ0FqWUNBQ0FHSVFvZ0NDRUdBa0FDUUFKQUEwQUNRQ0FDSUFOR0lBVWdDa1p5RFFNZ0NTQUJLUUlBTndNQUlBQW9BZ2dRWWlFSUlBVWdCQ0FHSUFKcklBb2dCV3RCQW5VZ0FSRHdCQ0VMSUFnRVFDQUlFR0lhQ3lBTFFYOUdEUUFnQnlBSEtBSUFJQXRCQW5ScUlnVTJBZ0FnQlNBS1JnMENJQVFvQWdBaEFpQURJQVpHQkVBZ0F5RUdCU0FBS0FJSUVHSWhCZ0ovSUFVZ0FrRUJJQUVRMXdFaERTQUdCRUFnQmhCaUdnc2dEUXNFUUVFQ0lRQU1CZ3NnQnlBSEtBSUFRUVJxTmdJQUlBUWdCQ2dDQUVFQmFpSUNOZ0lBSUFJaEJnTkFBa0FnQXlBR1JnUkFJQU1oQmd3QkN5QUdMQUFBQkVBZ0JrRUJhaUVHREFJTEN3c2dCeWdDQUNFRkN3d0JDd3NDUUFKQUEwQUNRQ0FISUFVMkFnQWdBaUFFS0FJQVJnMERJQUFvQWdnUVlpRUlJQVVnQWlBR0lBSnJJQWtRMXdFaEFTQUlCRUFnQ0JCaUdnc0NRQUpBSUFGQmZtc09Bd1FDQUFFTFFRRWhBUXNnQVNBQ2FpRUNJQWNvQWdCQkJHb2hCUXdCQ3dzZ0JDQUNOZ0lBUVFJaEFBd0VDeUFFSUFJMkFnQkJBU0VBREFNTElBUWdBallDQUNBQ0lBTkhJUUFNQWdzZ0JDZ0NBQ0VDQ3lBQ0lBTkhJUUFMSUFra0JpQUFDNWdFQVFaL0l3WWhEU01HUVJCcUpBWWdEU0lLUVFocUlRc2dBaUVJQTBBQ1FDQURJQWhHQkVBZ0F5RUlEQUVMSUFnb0FnQUVRQ0FJUVFScUlRZ01BZ3NMQ3lBSElBVTJBZ0FnQkNBQ05nSUFJQVloQ1NBSUlRWUNRQUpBQWtBRFFBSkFJQUlnQTBZZ0JTQUpSbklOQXlBS0lBRXBBZ0EzQXdBZ0FDZ0NDQkJpSVFnZ0JTQUVJQVlnQW10QkFuVWdDU0FGYXhEb0JDRU1JQWdFUUNBSUVHSWFDd0pBQWtBZ0RFRi9hdzRDQWdBQkMwRUJJUUFNQlFzZ0J5QU1JQWNvQWdCcUlnVTJBZ0FnQlNBSlJnMENJQU1nQmtZRVFDQURJUVlnQkNnQ0FDRUNCU0FBS0FJSUVHSWhCU0FMUVFBUW5nRWhBaUFGQkVBZ0JSQmlHZ3NnQWtGL1JnUkFRUUloQUF3R0N5QUNJQWtnQnlnQ0FHdExCRUJCQVNFQURBWUxJQXNoQlFOQUlBSUVRQ0FGTEFBQUlRWWdCeUFIS0FJQUlnaEJBV28yQWdBZ0NDQUdPZ0FBSUFWQkFXb2hCU0FDUVg5cUlRSU1BUXNMSUFRZ0JDZ0NBRUVFYWlJQ05nSUFJQUloQmdOQUFrQWdBeUFHUmdSQUlBTWhCZ3dCQ3lBR0tBSUFCRUFnQmtFRWFpRUdEQUlMQ3dzZ0J5Z0NBQ0VGQ3d3QkN3c2dCeUFGTmdJQUEwQUNRQ0FDSUFRb0FnQkdEUUFnQWlnQ0FDRURJQUFvQWdnUVlpRUJJQVVnQXhDZUFTRURJQUVFUUNBQkVHSWFDeUFEUVg5R0RRQWdCeUFESUFjb0FnQnFJZ1UyQWdBZ0FrRUVhaUVDREFFTEN5QUVJQUkyQWdCQkFpRUFEQUlMSUFRb0FnQWhBZ3NnQWlBRFJ5RUFDeUFLSkFZZ0FBc1JBQ0FESUFKcklnQWdCQ0FBSUFSSkd3dVBBd0VCZnlBQ0lBQTJBZ0FnQlNBRE5nSUFJQUlvQWdBaEFBTkFBa0FnQUNBQlR3UkFRUUFoQUF3QkN5QUFLQUlBSWdCQmdIQnhRWUN3QTBZZ0FFSC8vOE1BUzNJRVFFRUNJUUFNQVFzZ0FFR0FBVWtFUUNBRUlBVW9BZ0FpQTJ0QkFVZ0VRRUVCSVFBTUFnc2dCU0FEUVFGcU5nSUFJQU1nQURvQUFBVUNRQ0FBUVlBUVNRUkFJQVFnQlNnQ0FDSURhMEVDU0FSQVFRRWhBQXdFQ3lBRklBTkJBV28yQWdBZ0F5QUFRUVoyUWNBQmNqb0FBQXdCQ3lBRUlBVW9BZ0FpQTJzaEJpQUFRWUNBQkVrRVFDQUdRUU5JQkVCQkFTRUFEQVFMSUFVZ0EwRUJhallDQUNBRElBQkJESFpCNEFGeU9nQUFCU0FHUVFSSUJFQkJBU0VBREFRTElBVWdBMEVCYWpZQ0FDQURJQUJCRW5aQjhBRnlPZ0FBSUFVZ0JTZ0NBQ0lEUVFGcU5nSUFJQU1nQUVFTWRrRS9jVUdBQVhJNkFBQUxJQVVnQlNnQ0FDSURRUUZxTmdJQUlBTWdBRUVHZGtFL2NVR0FBWEk2QUFBTElBVWdCU2dDQUNJRFFRRnFOZ0lBSUFNZ0FFRS9jVUdBQVhJNkFBQUxJQUlnQWlnQ0FFRUVhaUlBTmdJQURBRUxDeUFBQzdrRkFRVi9JQUlnQURZQ0FDQUZJQU0yQWdBRFFBSkFJQUlvQWdBaUJpQUJUd1JBUVFBaEFBd0JDeUFGS0FJQUlnb2dCRThFUUVFQklRQU1BUXNnQml3QUFDSUhRZjhCY1NFRElBZEJmMG9FZnlBRFFmLy93d0JMQkg5QkFpRUFEQUlGUVFFTEJRSi9JQWRCL3dGeFFjSUJTQVJBUVFJaEFBd0RDeUFIUWY4QmNVSGdBVWdFUUNBQklBWnJRUUpJQkVCQkFTRUFEQVFMSUFZdEFBRWlBRUhBQVhGQmdBRkhCRUJCQWlFQURBUUxRUUlnQTBFR2RFSEFEM0VnQUVFL2NYSWlBMEgvLzhNQVRRMEJHa0VDSVFBTUF3c2dCMEgvQVhGQjhBRklCRUFnQVNBR2EwRURTQVJBUVFFaEFBd0VDeUFHTEFBQklRZ2dCaTBBQWlFQUFrQUNRQUpBSUFkQllHc2lCd1JBSUFkQkRVWUVRQXdDQlF3REN3QUxJQWhCNEFGeFFhQUJSd1JBUVFJaEFBd0hDd3dDQ3lBSVFlQUJjVUdBQVVjRVFFRUNJUUFNQmdzTUFRc2dDRUhBQVhGQmdBRkhCRUJCQWlFQURBVUxDeUFBUWNBQmNVR0FBVWNFUUVFQ0lRQU1CQXRCQXlBQVFUOXhJQU5CREhSQmdPQURjU0FJUVQ5eFFRWjBjbklpQTBILy84TUFUUTBCR2tFQ0lRQU1Bd3NnQjBIL0FYRkI5UUZPQkVCQkFpRUFEQU1MSUFFZ0JtdEJCRWdFUUVFQklRQU1Bd3NnQml3QUFTRUpJQVl0QUFJaEFDQUdMUUFESVFnQ1FBSkFBa0FDUUNBSFFYQnJEZ1VBQWdJQ0FRSUxJQWxCOEFCcVFSaDBRUmgxUWY4QmNVRXdUZ1JBUVFJaEFBd0dDd3dDQ3lBSlFmQUJjVUdBQVVjRVFFRUNJUUFNQlFzTUFRc2dDVUhBQVhGQmdBRkhCRUJCQWlFQURBUUxDeUFBUWNBQmNVR0FBVWNFUUVFQ0lRQU1Bd3NnQ0VIQUFYRkJnQUZIQkVCQkFpRUFEQU1MSUFoQlAzRWdBRUVHZEVIQUgzRWdBMEVTZEVHQWdQQUFjU0FKUVQ5eFFReDBjbkp5SWdOQi8vL0RBRXNFZjBFQ0lRQU1Bd1ZCQkFzTEN5RUFJQW9nQXpZQ0FDQUNJQUFnQm1vMkFnQWdCU0FGS0FJQVFRUnFOZ0lBREFFTEN5QUFDNFVFQVFkL0lBRWhCaUFBSVFFRFFBSkFJQUVnQmtrZ0NDQUNTWEZGRFFBZ0FTd0FBQ0lEUWY4QmNTRUhJQU5CZjBvRWZ5QUhRZi8vd3dCTERRRWdBVUVCYWdVQ2Z5QURRZjhCY1VIQ0FVZ05BaUFEUWY4QmNVSGdBVWdFUUNBR0lBRnJRUUpJRFFNZ0FTMEFBU0lFUWNBQmNVR0FBVWNnQjBFR2RFSEFEM0VnQkVFL2NYSkIvLy9EQUV0eURRTWdBVUVDYWd3QkN5QURRZjhCY1VId0FVZ0VRQ0FHSUFGclFRTklEUU1nQVN3QUFTRUVJQUV0QUFJaEJRSkFBa0FDUUNBRFFXQnJJZ01FUUNBRFFRMUdCRUFNQWdVTUF3c0FDeUFFUWVBQmNVR2dBVWNOQmd3Q0N5QUVRZUFCY1VHQUFVY05CUXdCQ3lBRVFjQUJjVUdBQVVjTkJBc2dCVUhBQVhGQmdBRkhJQVZCUDNFZ0IwRU1kRUdBNEFOeElBUkJQM0ZCQm5SeWNrSC8vOE1BUzNJTkF5QUJRUU5xREFFTElBWWdBV3RCQkVnZ0EwSC9BWEZCOVFGT2NnMENJQUVzQUFFaEJTQUJMUUFDSVFRZ0FTMEFBeUVKQWtBQ1FBSkFBa0FnQTBGd2F3NEZBQUlDQWdFQ0N5QUZRZkFBYWtFWWRFRVlkVUgvQVhGQk1FNE5CUXdDQ3lBRlFmQUJjVUdBQVVjTkJBd0JDeUFGUWNBQmNVR0FBVWNOQXdzZ0NVSEFBWEZCZ0FGSElBbEJQM0VnQkVFR2RFSEFIM0VnQjBFU2RFR0FnUEFBY1NBRlFUOXhRUXgwY25KeVFmLy93d0JMY2lBRVFjQUJjVUdBQVVkeURRSWdBVUVFYWdzTElRRWdDRUVCYWlFSURBRUxDeUFCSUFCckN3c0FJQUlnQXlBRUVLRUtDMDBCQVg4akJpRUFJd1pCRUdva0JpQUFRUVJxSWdFZ0FqWUNBQ0FBSUFVMkFnQWdBaUFESUFFZ0JTQUdJQUFRb0FvaENDQUVJQUVvQWdBMkFnQWdCeUFBS0FJQU5nSUFJQUFrQmlBSUMwMEJBWDhqQmlFQUl3WkJFR29rQmlBQVFRUnFJZ0VnQWpZQ0FDQUFJQVUyQWdBZ0FpQURJQUVnQlNBR0lBQVFud29oQ0NBRUlBRW9BZ0EyQWdBZ0J5QUFLQUlBTmdJQUlBQWtCaUFJQzhNRUFRaC9Jd1loQkNNR1FiQUJhaVFHSUFSQnFBRnFJUXdnQkNFQklBUkJwQUZxSVFvZ0JFR2dBV29oQnlBRVFaZ0JhaUVDSUFSQmtBRnFJUXNnQkVHQUFXb2lDRUlBTndJQUlBaEJBRFlDQ0FOQUlBWkJBMGNFUUNBR1FRSjBJQWhxUVFBMkFnQWdCa0VCYWlFR0RBRUxDeUFDUVFBMkFnUWdBa0dzb0FFMkFnQWdCU2dDQUNBRklBVXNBQXNpQTBFQVNDSUpHeUlHSUFVb0FnUWdBMEgvQVhFZ0NSdEJBblJxSVFNZ0FVRWdhaUVKUVFBaEJRSkFBa0FEUUNBRlFRSkhJQVlnQTBseEJFQWdCeUFHTmdJQUlBSWdEQ0FHSUFNZ0J5QUJJQWtnQ2lBQ0tBSUFLQUlNUVE5eFFZNERhaEVPQUNJRlFRSkdJQVlnQnlnQ0FFWnlEUUlnQVNFR0EwQWdCaUFLS0FJQVNRUkFJQWdnQml3QUFCRE1BU0FHUVFGcUlRWU1BUXNMSUFjb0FnQWhCZ3dCQ3dzTUFRc1FBQXNDZnlBSUtBSUFJQWdnQ0N3QUMwRUFTQnNpQXlFTklBQkNBRGNDQUNBQVFRQTJBZ2hCQUNFQ0EwQWdBa0VEUndSQUlBSkJBblFnQUdwQkFEWUNBQ0FDUVFGcUlRSU1BUXNMSUF0QkFEWUNCQ0FMUWR5Z0FUWUNBQ0FOQ3hCZ0lBTnFJZ1VoQmlBQlFZQUJhaUVKUVFBaEFnSkFBa0FEUUNBQ1FRSkhJQU1nQlVseFJRMEJJQWNnQXpZQ0FDQUxJQXdnQXlBRFFTQnFJQVVnQmlBRGEwRWdTaHNnQnlBQklBa2dDaUFMS0FJQUtBSVFRUTl4UVk0RGFoRU9BQ0lDUVFKR0lBTWdCeWdDQUVaeVJRUkFJQUVoQXdOQUlBTWdDaWdDQUVrRVFDQUFJQU1vQWdBUWpnSWdBMEVFYWlFRERBRUxDeUFIS0FJQUlRTU1BUXNMRUFBTUFRc2dDQkJISUFRa0Jnc0xnQUlCQW44akJpRUJJd1pCRUdva0JpQUJRZ0EzQWdBZ0FVRUFOZ0lJQTBBZ0JrRURSd1JBSUFaQkFuUWdBV3BCQURZQ0FDQUdRUUZxSVFZTUFRc0xJQVVvQWdBZ0JTQUZMQUFMSWdOQkFFZ2lCQnNpQWlBRktBSUVJQU5CL3dGeElBUWJhaUVESUFJaEJRTkFJQVVnQTBrRVFDQUJJQVVzQUFBUXpBRWdCVUVCYWlFRkRBRUxDd0ovSUFFb0FnQWdBU0FCTEFBTFFRQklHeUlDSVFjZ0FFSUFOd0lBSUFCQkFEWUNDRUVBSVFNRFFDQURRUU5IQkVBZ0EwRUNkQ0FBYWtFQU5nSUFJQU5CQVdvaEF3d0JDd3NnQndzUVlDQUNhaUVEQTBBZ0FpQURTUVJBSUFBZ0Fpd0FBQkRNQVNBQ1FRRnFJUUlNQVFzTElBRVFSeUFCSkFZTHdnVUJFbjhqQmlFR0l3WkI0QU5xSkFZZ0JrSE1BMm9pQ3lBREVEc2dDMEdnemdNUU9pRU1JQVVzQUFzaUIwRUFTQ0VBSUFVb0FnUWdCMEgvQVhFZ0FCc0VmeUFGS0FJQUlBVWdBQnNvQWdBZ0RFRXRJQXdvQWdBb0FpeEJQM0ZCaWdGcUVRSUFSZ1ZCQUFzaERpQUdRZFFEYWlFUElBWkJ5QU5xSVJBZ0JrSEVBMm9oRVNBR1Fhd0RhaUVISUFaQm9BTnFJUWdnQmtHY0Eyb2hDU0FHUWJnRGFpSUtRZ0EzQWdBZ0NrRUFOZ0lJUVFBaEFBTkFJQUJCQTBjRVFDQUFRUUowSUFwcVFRQTJBZ0FnQUVFQmFpRUFEQUVMQ3lBSFFnQTNBZ0FnQjBFQU5nSUlRUUFoQUFOQUlBQkJBMGNFUUNBQVFRSjBJQWRxUVFBMkFnQWdBRUVCYWlFQURBRUxDeUFJUWdBM0FnQWdDRUVBTmdJSVFRQWhBQU5BSUFCQkEwY0VRQ0FBUVFKMElBaHFRUUEyQWdBZ0FFRUJhaUVBREFFTEN5QUNJQTRnQ3lBUElCQWdFU0FLSUFjZ0NDQUpFS01FSUFVc0FBc2lBRUVBU0NFU0lBVW9BZ1FnQUVIL0FYRWdFaHNpRXlBSktBSUFJZ2xLQkg4Z0J5Z0NCQ0FITEFBTElnQkIvd0Z4SUFCQkFFZ2JJUUlnQ0NnQ0JDQUlMQUFMSWdCQi93RnhJQUJCQUVnYklSUWdDVUVCYWlBVElBbHJRUUYwYWdVZ0J5Z0NCQ0FITEFBTElnQkIvd0Z4SUFCQkFFZ2JJUUlnQ0NnQ0JDQUlMQUFMSWdCQi93RnhJQUJCQUVnYklSUWdDVUVDYWdzaEZpQUdJUUFnQWlBVUlCWnFhaUlDUWVRQVN3UkFJQUpCQW5RUVJDSUFJUUlnQUFSQUlBQWhEU0FDSVJVRkVBQUxCU0FBSVEwTElBMGdCa0dZQTJvZ0JrR1VBMm9nQXlnQ0JDQUZLQUlBSUFVZ0Voc2lBQ0FUUVFKMElBQnFJQXdnRGlBUElCQW9BZ0FnRVNnQ0FDQUtJQWNnQ0NBSkVLSUVJQVlnQVNnQ0FEWUNrQU1nQmlnQ21BTWhBQ0FHS0FLVUF5RUJJQVpCMEFOcUlnSWdCaWdDa0FNMkFnQWdBaUFOSUFBZ0FTQURJQVFRcFFFaEZ5QVZCRUFnRlJBNEN5QUlFRWNnQnhCSElBb1FSeUFMRUR3Z0JpUUdJQmNMdUFZQkZYOGpCaUVHSXdaQjRBZHFKQVlnQmtHSUIyb2hDQ0FHUVpBRGFpRUFJQVpCMkFkcUlna2dCa0dnQm1vaUJ6WUNBQ0FHUVpBSGFpSU5JQVU1QXdBZ0IwSGtBRUhTbmdNZ0RSQ2pBaUlIUWVNQVN3UkFFRndoQUNBSUlBVTVBd0FnQ1NBQVFkS2VBeUFJRUpzQklRQWdDU2dDQUNJSVJRUkFFQUFMSUFCQkFuUVFSQ0lISVFvZ0J3UkFJQWNoRENBQUlRc2dDaUVRSUFnaEVRVVFBQXNGSUFBaERDQUhJUXNMSUFaQjFBZHFJZzRnQXhBN0lBNUJvTTRERURvaUVpZ0NBQ2dDTUNFQUlCSWdDU2dDQUNJSElBY2dDMm9nRENBQVFROXhRWW9DYWhFSkFCb2dDd1IvSUFrb0FnQXNBQUJCTFVZRlFRQUxJUk1nQmtIY0Iyb2hGQ0FHUWRBSGFpRVZJQVpCekFkcUlSWWdCa0cwQjJvaEJ5QUdRYWdIYWlFSUlBWkJwQWRxSVFrZ0JrSEFCMm9pQ2tJQU53SUFJQXBCQURZQ0NFRUFJUUFEUUNBQVFRTkhCRUFnQUVFQ2RDQUtha0VBTmdJQUlBQkJBV29oQUF3QkN3c2dCMElBTndJQUlBZEJBRFlDQ0VFQUlRQURRQ0FBUVFOSEJFQWdBRUVDZENBSGFrRUFOZ0lBSUFCQkFXb2hBQXdCQ3dzZ0NFSUFOd0lBSUFoQkFEWUNDRUVBSVFBRFFDQUFRUU5IQkVBZ0FFRUNkQ0FJYWtFQU5nSUFJQUJCQVdvaEFBd0JDd3NnQWlBVElBNGdGQ0FWSUJZZ0NpQUhJQWdnQ1JDakJDQUxJQWtvQWdBaUNVb0VmeUFIS0FJRUlBY3NBQXNpQUVIL0FYRWdBRUVBU0JzaEFpQUlLQUlFSUFnc0FBc2lBRUgvQVhFZ0FFRUFTQnNoRnlBSlFRRnFJQXNnQ1d0QkFYUnFCU0FIS0FJRUlBY3NBQXNpQUVIL0FYRWdBRUVBU0JzaEFpQUlLQUlFSUFnc0FBc2lBRUgvQVhFZ0FFRUFTQnNoRnlBSlFRSnFDeUVaSUFZaEFDQUNJQmNnR1dwcUlnSkI1QUJMQkVBZ0FrRUNkQkJFSWdBaEFpQUFCRUFnQUNFUElBSWhHQVVRQUFzRklBQWhEd3NnRHlBR1FhQUhhaUFHUVp3SGFpQURLQUlFSUF3Z0MwRUNkQ0FNYWlBU0lCTWdGQ0FWS0FJQUlCWW9BZ0FnQ2lBSElBZ2dDUkNpQkNBR0lBRW9BZ0EyQXBnSElBWW9BcUFISVFBZ0JpZ0NuQWNoQVNBTklBWW9BcGdITmdJQUlBMGdEeUFBSUFFZ0F5QUVFS1VCSVJvZ0dBUkFJQmdRT0FzZ0NCQkhJQWNRUnlBS0VFY2dEaEE4SUJBRVFDQVFFRGdMSUJFRVFDQVJFRGdMSUFZa0JpQWFDN3dGQVJKL0l3WWhCaU1HUWJBQmFpUUdJQVpCbUFGcUlnc2dBeEE3SUF0QmdNNERFRG9oRENBRkxBQUxJZ2RCQUVnaEFDQUZLQUlFSUFkQi93RnhJQUFiQkg4Z0JTZ0NBQ0FGSUFBYkxRQUFJQXhCTFNBTUtBSUFLQUljUVQ5eFFZb0JhaEVDQUVIL0FYRkdCVUVBQ3lFT0lBWkJwQUZxSVE4Z0JrR2hBV29oRUNBR1FhQUJhaUVSSUFaQmdBRnFJUWNnQmtIMEFHb2hDQ0FHUWZBQWFpRUpJQVpCakFGcUlncENBRGNDQUNBS1FRQTJBZ2hCQUNFQUEwQWdBRUVEUndSQUlBQkJBblFnQ21wQkFEWUNBQ0FBUVFGcUlRQU1BUXNMSUFkQ0FEY0NBQ0FIUVFBMkFnaEJBQ0VBQTBBZ0FFRURSd1JBSUFCQkFuUWdCMnBCQURZQ0FDQUFRUUZxSVFBTUFRc0xJQWhDQURjQ0FDQUlRUUEyQWdoQkFDRUFBMEFnQUVFRFJ3UkFJQUJCQW5RZ0NHcEJBRFlDQUNBQVFRRnFJUUFNQVFzTElBSWdEaUFMSUE4Z0VDQVJJQW9nQnlBSUlBa1FwUVFnQlN3QUN5SUFRUUJJSVJJZ0JTZ0NCQ0FBUWY4QmNTQVNHeUlUSUFrb0FnQWlDVW9FZnlBSEtBSUVJQWNzQUFzaUFFSC9BWEVnQUVFQVNCc2hBaUFJS0FJRUlBZ3NBQXNpQUVIL0FYRWdBRUVBU0JzaEZDQUpRUUZxSUJNZ0NXdEJBWFJxQlNBSEtBSUVJQWNzQUFzaUFFSC9BWEVnQUVFQVNCc2hBaUFJS0FJRUlBZ3NBQXNpQUVIL0FYRWdBRUVBU0JzaEZDQUpRUUpxQ3lFV0lBWWhBQ0FDSUJRZ0ZtcHFJZ0pCNUFCTEJFQWdBaEJFSWdBaEFpQUFCRUFnQUNFTklBSWhGUVVRQUFzRklBQWhEUXNnRFNBR1Fld0FhaUFHUWVnQWFpQURLQUlFSUFVb0FnQWdCU0FTR3lJQUlBQWdFMm9nRENBT0lBOGdFQ3dBQUNBUkxBQUFJQW9nQnlBSUlBa1FwQVFnQmlBQktBSUFOZ0prSUFZb0Ftd2hBQ0FHS0FKb0lRRWdCa0djQVdvaUFpQUdLQUprTmdJQUlBSWdEU0FBSUFFZ0F5QUVFSmNCSVJjZ0ZRUkFJQlVRT0FzZ0NCQkhJQWNRUnlBS0VFY2dDeEE4SUFZa0JpQVhDNjhHQVJWL0l3WWhCaU1HUWFBRGFpUUdJQVpCeUFKcUlRZ2dCa0h3QUdvaEFDQUdRWkFEYWlJSklBWkI0QUZxSWdjMkFnQWdCa0hRQW1vaURTQUZPUU1BSUFkQjVBQkIwcDRESUEwUW93SWlCMEhqQUVzRVFCQmNJUUFnQ0NBRk9RTUFJQWtnQUVIU25nTWdDQkNiQVNFQUlBa29BZ0FpQ0VVRVFCQUFDeUFBRUVRaUJ5RUtJQWNFUUNBSElRd2dBQ0VMSUFvaEVDQUlJUkVGRUFBTEJTQUFJUXdnQnlFTEN5QUdRWXdEYWlJT0lBTVFPeUFPUVlET0F4QTZJaElvQWdBb0FpQWhBQ0FTSUFrb0FnQWlCeUFISUF0cUlBd2dBRUVQY1VHS0Ftb1JDUUFhSUFzRWZ5QUpLQUlBTEFBQVFTMUdCVUVBQ3lFVElBWkJtQU5xSVJRZ0JrR1ZBMm9oRlNBR1FaUURhaUVXSUFaQjlBSnFJUWNnQmtIb0Ftb2hDQ0FHUWVRQ2FpRUpJQVpCZ0FOcUlncENBRGNDQUNBS1FRQTJBZ2hCQUNFQUEwQWdBRUVEUndSQUlBQkJBblFnQ21wQkFEWUNBQ0FBUVFGcUlRQU1BUXNMSUFkQ0FEY0NBQ0FIUVFBMkFnaEJBQ0VBQTBBZ0FFRURSd1JBSUFCQkFuUWdCMnBCQURZQ0FDQUFRUUZxSVFBTUFRc0xJQWhDQURjQ0FDQUlRUUEyQWdoQkFDRUFBMEFnQUVFRFJ3UkFJQUJCQW5RZ0NHcEJBRFlDQUNBQVFRRnFJUUFNQVFzTElBSWdFeUFPSUJRZ0ZTQVdJQW9nQnlBSUlBa1FwUVFnQ3lBSktBSUFJZ2xLQkg4Z0J5Z0NCQ0FITEFBTElnQkIvd0Z4SUFCQkFFZ2JJUUlnQ0NnQ0JDQUlMQUFMSWdCQi93RnhJQUJCQUVnYklSY2dDVUVCYWlBTElBbHJRUUYwYWdVZ0J5Z0NCQ0FITEFBTElnQkIvd0Z4SUFCQkFFZ2JJUUlnQ0NnQ0JDQUlMQUFMSWdCQi93RnhJQUJCQUVnYklSY2dDVUVDYWdzaEdTQUdJUUFnQWlBWElCbHFhaUlDUWVRQVN3UkFJQUlRUkNJQUlRSWdBQVJBSUFBaER5QUNJUmdGRUFBTEJTQUFJUThMSUE4Z0JrSGdBbW9nQmtIY0Ftb2dBeWdDQkNBTUlBc2dER29nRWlBVElCUWdGU3dBQUNBV0xBQUFJQW9nQnlBSUlBa1FwQVFnQmlBQktBSUFOZ0xZQWlBR0tBTGdBaUVBSUFZb0F0d0NJUUVnRFNBR0tBTFlBallDQUNBTklBOGdBQ0FCSUFNZ0JCQ1hBU0VhSUJnRVFDQVlFRGdMSUFnUVJ5QUhFRWNnQ2hCSElBNFFQQ0FRQkVBZ0VCQTRDeUFSQkVBZ0VSQTRDeUFHSkFZZ0dndmxCZ0VHZnlNR0lRb2pCa0VRYWlRR0lBQUVmeUFCUWZqUEF4QTZJZ0VvQWdBb0Fpd0ZJQUZCOE04REVEb2lBU2dDQUNnQ0xBc2hBQ0FLUVF4cUlnc2dBU0FBUVQ5eFFiSUZhaEVEQUNBQ0lBc29BZ0EyQUFBZ0NpQUJJQUVvQWdBb0FpQkJQM0ZCc2dWcUVRTUFJQWdzQUF0QkFFZ0VRQUovSUFnb0FnQWhEQ0FMUVFBMkFnQWdEQXNnQ3hCdUlBaEJBRFlDQkNBSUxBQUxRUUJJQkVBZ0NDZ0NDQm9nQ0NnQ0FCQTRJQWhCQURZQ0NBc0ZJQXRCQURZQ0FDQUlJQXNRYmlBSVFRQTZBQXNMSUFnZ0Npa0NBRGNDQUNBSUlBb29BZ2cyQWdoQkFDRUFBMEFnQUVFRFJ3UkFJQUJCQW5RZ0NtcEJBRFlDQUNBQVFRRnFJUUFNQVFzTElBb1FSeUFLSUFFZ0FTZ0NBQ2dDSEVFL2NVR3lCV29SQXdBZ0J5d0FDMEVBU0FSQUFuOGdCeWdDQUNFTklBdEJBRFlDQUNBTkN5QUxFRzRnQjBFQU5nSUVJQWNzQUF0QkFFZ0VRQ0FIS0FJSUdpQUhLQUlBRURnZ0IwRUFOZ0lJQ3dVZ0MwRUFOZ0lBSUFjZ0N4QnVJQWRCQURvQUN3c2dCeUFLS1FJQU53SUFJQWNnQ2lnQ0NEWUNDRUVBSVFBRFFDQUFRUU5IQkVBZ0FFRUNkQ0FLYWtFQU5nSUFJQUJCQVdvaEFBd0JDd3NnQ2hCSElBTWdBU0FCS0FJQUtBSU1RZjhBY1VFSWFoRUFBRFlDQUNBRUlBRWdBU2dDQUNnQ0VFSC9BSEZCQ0dvUkFBQTJBZ0FnQ2lBQklBRW9BZ0FvQWhSQlAzRkJzZ1ZxRVFNQUlBVXNBQXRCQUVnRVFBSi9JQVVvQWdBaERpQUxRUUE2QUFBZ0Rnc2dDeEJmSUFWQkFEWUNCQ0FGTEFBTFFRQklCRUFnQlNnQ0NCb2dCU2dDQUJBNElBVkJBRFlDQ0FzRklBdEJBRG9BQUNBRklBc1FYeUFGUVFBNkFBc0xJQVVnQ2lrQ0FEY0NBQ0FGSUFvb0FnZzJBZ2hCQUNFQUEwQWdBRUVEUndSQUlBQkJBblFnQ21wQkFEWUNBQ0FBUVFGcUlRQU1BUXNMSUFvUVJ5QUtJQUVnQVNnQ0FDZ0NHRUUvY1VHeUJXb1JBd0FnQml3QUMwRUFTQVJBQW44Z0JpZ0NBQ0VQSUF0QkFEWUNBQ0FQQ3lBTEVHNGdCa0VBTmdJRUlBWXNBQXRCQUVnRVFDQUdLQUlJR2lBR0tBSUFFRGdnQmtFQU5nSUlDd1VnQzBFQU5nSUFJQVlnQ3hCdUlBWkJBRG9BQ3dzZ0JpQUtLUUlBTndJQUlBWWdDaWdDQ0RZQ0NFRUFJUUFEUUNBQVFRTkhCRUFnQUVFQ2RDQUtha0VBTmdJQUlBQkJBV29oQUF3QkN3c2dDaEJISUFrZ0FTQUJLQUlBS0FJa1FmOEFjVUVJYWhFQUFEWUNBQ0FLSkFZTDJRSUJCMzhqQmlFREl3WkJFR29rQmlBQUxBQUxJZ1pCQUVnaUJ3Ui9JQUFvQWdoQi8vLy8vd2R4UVg5cUlRUWdBQ2dDQkFWQkFTRUVJQVpCL3dGeEN5RUZJQUlnQVdzaUNFRUNkU0VKSUFnRVFBSkFJQWNFZnlBQUtBSUVJUVlnQUNnQ0FBVWdCa0gvQVhFaEJpQUFDeUlISVFnZ0FTQUdRUUowSUFkcVNTQUlJQUZOY1FSQUlBTkNBRGNDQUNBRFFRQTJBZ2dnQXlBQklBSVF4d1FnQUNBREtBSUFJQU1nQXl3QUN5SUFRUUJJSWdFYklBTW9BZ1FnQUVIL0FYRWdBUnNRNFFrZ0F4QkhEQUVMSUFRZ0JXc2dDVWtFUUNBQUlBUWdCU0FKYWlBRWF5QUZJQVVRa1FRTElBQXNBQXRCQUVnRWZ5QUFLQUlBQlNBQUN5QUZRUUowYWlFRUEwQWdBU0FDUndSQUlBUWdBUkJ1SUFSQkJHb2hCQ0FCUVFScUlRRU1BUXNMSUFOQkFEWUNBQ0FFSUFNUWJpQUZJQWxxSVFFZ0FDd0FDMEVBU0FSQUlBQWdBVFlDQkFVZ0FDQUJPZ0FMQ3dzTElBTWtCZ3V3QkFFSWZ5TUdJUUFqQmtHd0Eyb2tCaUFBUWFBRGFpSUlJQUEyQWdBZ0NFR1JBVFlDQkNBQVFaQURhaUlMSUFRUU95QUxRYURPQXhBNklRY2dBRUdzQTJvaUNrRUFPZ0FBSUFBZ0FpZ0NBQ0lKTmdLVUF5QUVLQUlFSVF3Z0FFR29BMm9pQkNBQUtBS1VBellDQUNBQklBUWdBeUFMSUF3Z0JTQUtJQWNnQ0NBQVFaZ0RhaUFBUVpBRGFoQ21CQVJBSUFZc0FBdEJBRWdFUUFKL0lBWW9BZ0FoRFNBRVFRQTJBZ0FnRFFzZ0JCQnVJQVpCQURZQ0JBVWdCRUVBTmdJQUlBWWdCQkJ1SUFaQkFEb0FDd3NnQ2l3QUFBUkFJQVlnQjBFdElBY29BZ0FvQWl4QlAzRkJpZ0ZxRVFJQUVJNENDeUFIUVRBZ0J5Z0NBQ2dDTEVFL2NVR0tBV29SQWdBaEJDQUFLQUtZQXlJSFFYeHFJUW9nQ0NnQ0FDRURBMEFDUUNBRElBcFBEUUFnQXlnQ0FDQUVSdzBBSUFOQkJHb2hBd3dCQ3dzZ0JpQURJQWNRckFvTElBRW9BZ0FpQXdSL0lBTW9BZ3dpQkNBREtBSVFSZ1IvSUFNZ0F5Z0NBQ2dDSkVIL0FIRkJDR29SQUFBRklBUW9BZ0FMUVg4UVFRUi9JQUZCQURZQ0FFRUJCU0FCS0FJQVJRc0ZRUUVMSVFNQ1FBSkFBa0FnQ1VVTkFDQUpLQUlNSWdRZ0NTZ0NFRVlFZnlBSklBa29BZ0FvQWlSQi93QnhRUWhxRVFBQUJTQUVLQUlBQzBGL0VFRUVRQ0FDUVFBMkFnQU1BUVVnQTBVTkFnc01BZ3NnQXcwQURBRUxJQVVnQlNnQ0FFRUNjallDQUFzZ0FTZ0NBQ0VPSUFzUVBDQUlLQUlBSVFFZ0NFRUFOZ0lBSUFFRVFDQUJJQWdvQWdSQi93RnhRYXdEYWhFQkFBc2dBQ1FHSUE0TG9BVUJDMzhqQmlFSEl3WkIwQVJxSkFZZ0IwR29CR29oRGlBSElROGdCMEc0QkdvaUNTQUhRZkFBYWlJS05nSUFJQWxCa1FFMkFnUWdCMEd3QkdvaURTQUVFRHNnRFVHZ3pnTVFPaUVBSUFkQndBUnFJZ3hCQURvQUFDQUhJQUlvQWdBMkFxd0VJQVFvQWdRaEN5QUhRWUFFYWlJRUlBY29BcXdFTmdJQUlBRWdCQ0FESUEwZ0N5QUZJQXdnQUNBSklBZEJ0QVJxSUFwQmtBTnFFS1lFQkVBZ0FFSG9uUU5COHAwRElBUWdBQ2dDQUNnQ01FRVBjVUdLQW1vUkNRQWFJQWNvQXJRRUlnc2dDU2dDQUNJS2F5SUFRWWdEU2dSQUlBQkJBblpCQW1vUVJDSUFJUU1nQUFSQUlBQWhDQ0FESVJBRkVBQUxCU0FQSVFnTElBd3NBQUFFUUNBSVFTMDZBQUFnQ0VFQmFpRUlDeUFFUVNocUlRTWdCQ0VNQTBBZ0NpQUxTUVJBSUFvb0FnQWhDeUFFSVFBRFFBSkFJQUFnQTBZRVFDQURJUUFNQVFzZ0FDZ0NBQ0FMUndSQUlBQkJCR29oQUF3Q0N3c0xJQWdnQUNBTWEwRUNkVUhvblFOcUxBQUFPZ0FBSUFwQkJHb2hDaUFJUVFGcUlRZ2dCeWdDdEFRaEN3d0JDd3NnQ0VFQU9nQUFJQTRnQmpZQ0FDQVBRWVdkQXlBT0VJTUJRUUZIQkVBUUFBc2dFQVJBSUJBUU9Bc0xJQUVvQWdBaUFBUi9JQUFvQWd3aUF5QUFLQUlRUmdSL0lBQWdBQ2dDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQU1vQWdBTFFYOFFRUVIvSUFGQkFEWUNBRUVCQlNBQktBSUFSUXNGUVFFTElRTUNRQUpBQWtBZ0FpZ0NBQ0lBUlEwQUlBQW9BZ3dpQkNBQUtBSVFSZ1IvSUFBZ0FDZ0NBQ2dDSkVIL0FIRkJDR29SQUFBRklBUW9BZ0FMUVg4UVFRUkFJQUpCQURZQ0FBd0JCU0FEUlEwQ0N3d0NDeUFERFFBTUFRc2dCU0FGS0FJQVFRSnlOZ0lBQ3lBQktBSUFJUkVnRFJBOElBa29BZ0FoQUNBSlFRQTJBZ0FnQUFSQUlBQWdDU2dDQkVIL0FYRkJyQU5xRVFFQUN5QUhKQVlnRVF2bEJnRUdmeU1HSVFvakJrRVFhaVFHSUFBRWZ5QUJRZWpQQXhBNklnRW9BZ0FvQWl3RklBRkI0TThERURvaUFTZ0NBQ2dDTEFzaEFDQUtRUXhxSWdzZ0FTQUFRVDl4UWJJRmFoRURBQ0FDSUFzb0FnQTJBQUFnQ2lBQklBRW9BZ0FvQWlCQlAzRkJzZ1ZxRVFNQUlBZ3NBQXRCQUVnRVFBSi9JQWdvQWdBaERDQUxRUUE2QUFBZ0RBc2dDeEJmSUFoQkFEWUNCQ0FJTEFBTFFRQklCRUFnQ0NnQ0NCb2dDQ2dDQUJBNElBaEJBRFlDQ0FzRklBdEJBRG9BQUNBSUlBc1FYeUFJUVFBNkFBc0xJQWdnQ2lrQ0FEY0NBQ0FJSUFvb0FnZzJBZ2hCQUNFQUEwQWdBRUVEUndSQUlBQkJBblFnQ21wQkFEWUNBQ0FBUVFGcUlRQU1BUXNMSUFvUVJ5QUtJQUVnQVNnQ0FDZ0NIRUUvY1VHeUJXb1JBd0FnQnl3QUMwRUFTQVJBQW44Z0J5Z0NBQ0VOSUF0QkFEb0FBQ0FOQ3lBTEVGOGdCMEVBTmdJRUlBY3NBQXRCQUVnRVFDQUhLQUlJR2lBSEtBSUFFRGdnQjBFQU5nSUlDd1VnQzBFQU9nQUFJQWNnQ3hCZklBZEJBRG9BQ3dzZ0J5QUtLUUlBTndJQUlBY2dDaWdDQ0RZQ0NFRUFJUUFEUUNBQVFRTkhCRUFnQUVFQ2RDQUtha0VBTmdJQUlBQkJBV29oQUF3QkN3c2dDaEJISUFNZ0FTQUJLQUlBS0FJTVFmOEFjVUVJYWhFQUFEb0FBQ0FFSUFFZ0FTZ0NBQ2dDRUVIL0FIRkJDR29SQUFBNkFBQWdDaUFCSUFFb0FnQW9BaFJCUDNGQnNnVnFFUU1BSUFVc0FBdEJBRWdFUUFKL0lBVW9BZ0FoRGlBTFFRQTZBQUFnRGdzZ0N4QmZJQVZCQURZQ0JDQUZMQUFMUVFCSUJFQWdCU2dDQ0JvZ0JTZ0NBQkE0SUFWQkFEWUNDQXNGSUF0QkFEb0FBQ0FGSUFzUVh5QUZRUUE2QUFzTElBVWdDaWtDQURjQ0FDQUZJQW9vQWdnMkFnaEJBQ0VBQTBBZ0FFRURSd1JBSUFCQkFuUWdDbXBCQURZQ0FDQUFRUUZxSVFBTUFRc0xJQW9RUnlBS0lBRWdBU2dDQUNnQ0dFRS9jVUd5QldvUkF3QWdCaXdBQzBFQVNBUkFBbjhnQmlnQ0FDRVBJQXRCQURvQUFDQVBDeUFMRUY4Z0JrRUFOZ0lFSUFZc0FBdEJBRWdFUUNBR0tBSUlHaUFHS0FJQUVEZ2dCa0VBTmdJSUN3VWdDMEVBT2dBQUlBWWdDeEJmSUFaQkFEb0FDd3NnQmlBS0tRSUFOd0lBSUFZZ0NpZ0NDRFlDQ0VFQUlRQURRQ0FBUVFOSEJFQWdBRUVDZENBS2FrRUFOZ0lBSUFCQkFXb2hBQXdCQ3dzZ0NoQkhJQWtnQVNBQktBSUFLQUlrUWY4QWNVRUlhaEVBQURZQ0FDQUtKQVlMMndJQkIzOGpCaUVESXdaQkVHb2tCaUFBTEFBTElnVkJBRWdpQndSL0lBQW9BZ2hCLy8vLy93ZHhRWDlxSVFRZ0FDZ0NCQVZCQ2lFRUlBVkIvd0Z4Q3lFR0lBSWdBV3NpQ0FSQUFrQWdCd1IvSUFBb0FnUWhCU0FBS0FJQUJTQUZRZjhCY1NFRklBQUxJZ2NoQ1NBQklBVWdCMnBKSUFrZ0FVMXhCRUFnQTBJQU53SUFJQU5CQURZQ0NDQURJQUVnQWhEK0F5QUFJQU1vQWdBZ0F5QURMQUFMSWdCQkFFZ2lBUnNnQXlnQ0JDQUFRZjhCY1NBQkd4RGpDU0FERUVjTUFRc2dCQ0FHYXlBSVNRUkFJQUFnQkNBR0lBaHFJQVJySUFZZ0JoRGRBZ3NnQWlBR0lBRnJhaUVISUFZZ0FDd0FDMEVBU0FSL0lBQW9BZ0FGSUFBTElnVnFJUVFEUUNBQklBSkhCRUFnQkNBQkVGOGdCRUVCYWlFRUlBRkJBV29oQVF3QkN3c2dBMEVBT2dBQUlBVWdCMm9nQXhCZklBWWdDR29oQVNBQUxBQUxRUUJJQkVBZ0FDQUJOZ0lFQlNBQUlBRTZBQXNMQ3dzZ0F5UUdDN1VFQVFoL0l3WWhBQ01HUVlBQmFpUUdJQUJCOEFCcUlnZ2dBRFlDQUNBSVFaRUJOZ0lFSUFCQjVBQnFJZ3NnQkJBN0lBdEJnTTRERURvaEJ5QUFRZndBYWlJS1FRQTZBQUFnQUNBQ0tBSUFJZ2syQW1nZ0JDZ0NCQ0VNSUFCQitBQnFJZ1FnQUNnQ2FEWUNBQ0FCSUFRZ0F5QUxJQXdnQlNBS0lBY2dDQ0FBUWV3QWFpQUFRZVFBYWhDb0JBUkFJQVlzQUF0QkFFZ0VRQUovSUFZb0FnQWhEU0FFUVFBNkFBQWdEUXNnQkJCZklBWkJBRFlDQkFVZ0JFRUFPZ0FBSUFZZ0JCQmZJQVpCQURvQUN3c2dDaXdBQUFSQUlBWWdCMEV0SUFjb0FnQW9BaHhCUDNGQmlnRnFFUUlBRU13QkN5QUhRVEFnQnlnQ0FDZ0NIRUUvY1VHS0FXb1JBZ0FoQkNBQUtBSnNJZ2RCZjJvaENpQUlLQUlBSVFNRFFBSkFJQU1nQ2s4TkFDQURMUUFBSUFSQi93RnhSdzBBSUFOQkFXb2hBd3dCQ3dzZ0JpQURJQWNRc0FvTElBRW9BZ0FpQXdSL0lBTW9BZ3dpQkNBREtBSVFSZ1IvSUFNZ0F5Z0NBQ2dDSkVIL0FIRkJDR29SQUFBRklBUXNBQUFRUWd0QmZ4QkJCSDhnQVVFQU5nSUFRUUVGSUFFb0FnQkZDd1ZCQVFzaEF3SkFBa0FDUUNBSlJRMEFJQWtvQWd3aUJDQUpLQUlRUmdSL0lBa2dDU2dDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQVFzQUFBUVFndEJmeEJCQkVBZ0FrRUFOZ0lBREFFRklBTkZEUUlMREFJTElBTU5BQXdCQ3lBRklBVW9BZ0JCQW5JMkFnQUxJQUVvQWdBaERpQUxFRHdnQ0NnQ0FDRUJJQWhCQURZQ0FDQUJCRUFnQVNBSUtBSUVRZjhCY1VHc0Eyb1JBUUFMSUFBa0JpQU9DL3NUQWhGL0FYd2pCaUVVSXdaQkVHb2tCaUFVSVJBZ0FVRUNFRGtoRFNBQ1FRSVFPU0VQSUFRb0FnQWlCeUVDSUEwZ0QwRi9haUlSYkVFQmRDQUhhaUVGQTBBZ0N5QU5TQVJBSUFWQkFEc0JBQ0FDUVFBN0FRQWdBa0VDYWlFQ0lBVkJBbW9oQlNBTFFRRnFJUXNNQVFzTElBY2hBaUFOUVg5cUloSkJBWFFnQjJvaEJVRUFJUXNEUUNBTElBOUlCRUFnQlVFQU93RUFJQUpCQURzQkFDQU5RUUYwSUFKcUlRSWdEVUVCZENBRmFpRUZJQXRCQVdvaEN3d0JDd3NnQkVHUWdNZ0FhaUVDUVFBZ0RXc2hFeUFBSUFGQkFYUkJBbXBxSVE1QkFTRU1RUUFoQlNBTlFRRnFJZ0FnQkNnQ0JHb2hDeUFBUVFGMElBZHFJUWNDZndKQUEwQUNRQ0FNSUJGT0RRSWdCU0VBUVFFaENRTkFJQWtnRWtnRVFDQU9MUUFBSUFOS0JFQUNRQ0FMUVg4NkFBQWdFMEVCZENBSGFpSUZMZ0VBSWdaQkFFb0VRQ0FISUFZN0FRQWdCa0VIYkNJRlFRSjBJQVJxUWZUL3p3QnFJZ1lnQmlnQ0FFRUJhallDQUNBRlFRSjBJQVJxUWZqL3p3QnFJZ1lnQ1NBR0tBSUFhallDQUNBRlFRSjBJQVJxUWZ6L3p3QnFJZ1lnRENBR0tBSUFhallDQUNBRlFRSjBJQVJxUVl5QTBBQnFJQXcyQWdBTUFRc2dCVUYrYWk0QkFDSUdJUWdnQmtFQVNpRUtJQVV1QVFJaUJVRUFUQVJBSUFvRVFDQUhJQVk3QVFBZ0NFRUhiQ0lGUVFKMElBUnFRZlQvendCcUlnWWdCaWdDQUVFQmFqWUNBQ0FGUVFKMElBUnFRZmovendCcUlnWWdDU0FHS0FJQWFqWUNBQ0FGUVFKMElBUnFRZnovendCcUlnWWdEQ0FHS0FJQWFqWUNBQ0FGUVFKMElBUnFRWVNBMEFCcUlnWW9BZ0FnQ1VnRVFDQUdJQWsyQWdBTElBVkJBblFnQkdwQmpJRFFBR29nRERZQ0FBd0NDeUFIUVg1cUxnRUFJZ1ZCQUVvRVFDQUhJQVU3QVFBZ0JVRUhiQ0lGUVFKMElBUnFRZlQvendCcUlnWWdCaWdDQUVFQmFqWUNBQ0FGUVFKMElBUnFRZmovendCcUlnWWdDU0FHS0FJQWFqWUNBQ0FGUVFKMElBUnFRZnovendCcUlnWWdEQ0FHS0FJQWFqWUNBQ0FGUVFKMElBUnFRWVNBMEFCcUlnVW9BZ0FnQ1U0TkFpQUZJQWsyQWdBRklBQkIvLzhCU2cwR0lBY2dBRUVCYWlJRk93RUFJQVJCa0lESUFHb2dBRUVDZEdvZ0JVRVFkRUVRZFRZQ0FDQUVRWkNBMEFCcUlBQkJCMndpQUVFQ2RHcEJBVFlDQUNBQVFRSjBJQVJxUVpTQTBBQnFJQWsyQWdBZ0FFRUNkQ0FFYWtHWWdOQUFhaUFNTmdJQUlBQkJBblFnQkdwQm5JRFFBR29nQ1RZQ0FDQUFRUUowSUFScVFhQ0EwQUJxSUFrMkFnQWdBRUVDZENBRWFrR2tnTkFBYWlBTU5nSUFJQUJCQW5RZ0JHcEJxSURRQUdvZ0REWUNBQ0FGSVFBTERBRUxJQW9FUUFKQUlBVkJBblFnQkdwQmpJRElBR29vQWdBaUJTQUlRUUowSUFScVFZeUF5QUJxS0FJQUlnWktCRUFnQnlBR093RUFJQUloQ0VFQUlRb0RRQ0FLSUFCT0JFQWdCaUVGREFNTElBVWdDQ2dDQUVZRVFDQUlJQVkyQWdBTElBaEJCR29oQ0NBS1FRRnFJUW9NQUFBTEFBVWdCeUFGT3dFQUlBVWdCa2dFUUNBQ0lRaEJBQ0VLQTBBZ0NpQUFUZzBESUFZZ0NDZ0NBRVlFUUNBSUlBVTJBZ0FMSUFoQkJHb2hDQ0FLUVFGcUlRb01BQUFMQUFzTEN5QUZRUkIwUVJCMVFRZHNJZ1ZCQW5RZ0JHcEI5UC9QQUdvaUJpQUdLQUlBUVFGcU5nSUFJQVZCQW5RZ0JHcEIrUC9QQUdvaUJpQUpJQVlvQWdCcU5nSUFJQVZCQW5RZ0JHcEIvUC9QQUdvaUJpQU1JQVlvQWdCcU5nSUFJQVZCQW5RZ0JHcEJqSURRQUdvZ0REWUNBQXdCQ3lBSFFYNXFMZ0VBSWdaQkFFd0VRQ0FISUFVN0FRQWdCVUVIYkNJRlFRSjBJQVJxUWZUL3p3QnFJZ1lnQmlnQ0FFRUJhallDQUNBRlFRSjBJQVJxUWZqL3p3QnFJZ1lnQ1NBR0tBSUFhallDQUNBRlFRSjBJQVJxUWZ6L3p3QnFJZ1lnRENBR0tBSUFhallDQUNBRlFRSjBJQVJxUVlDQTBBQnFJZ1lvQWdBZ0NVb0VRQ0FHSUFrMkFnQUxJQVZCQW5RZ0JHcEJqSURRQUdvZ0REWUNBQXdCQ3dKQUlBVkJBblFnQkdwQmpJRElBR29vQWdBaUJTQUdRUUowSUFScVFZeUF5QUJxS0FJQUlnWktCRUFnQnlBR093RUFJQUloQ0VFQUlRb0RRQ0FLSUFCT0JFQWdCaUVGREFNTElBVWdDQ2dDQUVZRVFDQUlJQVkyQWdBTElBaEJCR29oQ0NBS1FRRnFJUW9NQUFBTEFBVWdCeUFGT3dFQUlBVWdCa2dFUUNBQ0lRaEJBQ0VLQTBBZ0NpQUFUZzBESUFZZ0NDZ0NBRVlFUUNBSUlBVTJBZ0FMSUFoQkJHb2hDQ0FLUVFGcUlRb01BQUFMQUFzTEN5QUZRUkIwUVJCMVFRZHNJZ1ZCQW5RZ0JHcEI5UC9QQUdvaUJpQUdLQUlBUVFGcU5nSUFJQVZCQW5RZ0JHcEIrUC9QQUdvaUJpQUpJQVlvQWdCcU5nSUFJQVZCQW5RZ0JHcEIvUC9QQUdvaUJTQU1JQVVvQWdCcU5nSUFDd1VnQjBFQU93RUFJQXRCQURvQUFBc2dEa0VDYWlFT0lBdEJBV29oQ3lBSlFRRnFJUWtnQjBFQ2FpRUhEQUVMQ3lBQklBNXFRUVJxSVE0Z0RFRUJhaUVNSUFBaEJTQUxRUUpxSVFzZ0IwRUVhaUVIREFFTEMwRUFRUU5CcUtVQklCQVFQVUYvREFFTElBUkJER29oQjBFQklRQkJBU0VEQTBBZ0F5QUZUQVJBSUFNZ0FpZ0NBQ0lMUmdSQUlBQkJBV29oQVFVZ0FDRUJJQXRCQW5RZ0JHcEJqSURJQUdvb0FnQWhBQXNnQWlBQU5nSUFJQUVoQUNBRFFRRnFJUU1nQWtFRWFpRUNEQUVMQ3lBRUlBQkJmMm9pQURZQ0NDQUFCSDhnQjBFQUlBQkJBblFRUlJvZ0JFR1FnQ2hxUVFBZ0FFRUVkQkJGR2tFQUlRRURRQ0FCSUFCSUJFQWdCRUdNZ0FocUlBRkJBblFpQWtFQ2RHb2dEVFlDQUNBRVFZeUFDR29nQWtFQmNrRUNkR3BCQURZQ0FDQUVRWXlBQ0dvZ0FrRUNja0VDZEdvZ0R6WUNBQ0FFUVl5QUNHb2dBa0VEY2tFQ2RHcEJBRFlDQUNBQlFRRnFJUUVNQVFzTFFRQWhBUU5BSUFFZ0JVZ0VRQ0FFUVF4cUlBUkJrSURJQUdvZ0FVRUNkR29vQWdCQmYyb2lBa0VDZEdvaUF5QUVRWkNBMEFCcUlBRkJCMndpQUVFQ2RHb29BZ0FnQXlnQ0FHbzJBZ0FnQkVHUWdDaHFJQUpCQVhRaUEwRURkR29pQnlBSEt3TUFJQUJCQW5RZ0JHcEJsSURRQUdvb0FnQzNvRGtEQUNBRVFaQ0FLR29nQTBFQmNrRURkR29pQXlBREt3TUFJQUJCQW5RZ0JHcEJtSURRQUdvb0FnQzNvRGtEQUNBRVFZeUFDR29nQWtFQ2RDSUNRUUowYWlJREtBSUFJQUJCQW5RZ0JHcEJuSURRQUdvb0FnQWlCMG9FUUNBRElBYzJBZ0FMSUFSQmpJQUlhaUFDUVFGeVFRSjBhaUlES0FJQUlBQkJBblFnQkdwQm9JRFFBR29vQWdBaUIwZ0VRQ0FESUFjMkFnQUxJQVJCaklBSWFpQUNRUUp5UVFKMGFpSURLQUlBSUFCQkFuUWdCR3BCcElEUUFHb29BZ0FpQjBvRVFDQURJQWMyQWdBTElBUkJqSUFJYWlBQ1FRTnlRUUowYWlJQ0tBSUFJQUJCQW5RZ0JHcEJxSURRQUdvb0FnQWlBRWdFUUNBQ0lBQTJBZ0FMSUFGQkFXb2hBUXdCQ3dzZ0JDZ0NDQ0VCUVFBaEFBTi9JQUFnQVVnRWZ5QUVRWkNBS0dvZ0FFRUJkQ0lDUVFOMGFpSURJQU1yQXdBZ0JFRU1haUFBUVFKMGFpZ0NBTGNpRnFNNUF3QWdCRUdRZ0NocUlBSkJBWEpCQTNScUlnSWdBaXNEQUNBV296a0RBQ0FBUVFGcUlRQU1BUVZCQUFzTEJVRUFDd3NoRlNBUUpBWWdGUXVlQlFFTGZ5TUdJUWNqQmtHQUFtb2tCaUFIUWRnQmFpRU9JQWNoRHlBSFFlZ0JhaUlKSUFkQjhBQnFJZ28yQWdBZ0NVR1JBVFlDQkNBSFFlQUJhaUlOSUFRUU95QU5RWURPQXhBNklRQWdCMEg2QVdvaURFRUFPZ0FBSUFjZ0FpZ0NBRFlDM0FFZ0JDZ0NCQ0VMSUFkQjhBRnFJZ1FnQnlnQzNBRTJBZ0FnQVNBRUlBTWdEU0FMSUFVZ0RDQUFJQWtnQjBIa0FXb2dDa0hrQUdvUXFBUUVRQ0FBUWZxY0EwR0VuUU1nQkNBQUtBSUFLQUlnUVE5eFFZb0NhaEVKQUJvZ0J5Z0M1QUVpQ3lBSktBSUFJZ3BySWdCQjRnQktCRUFnQUVFQ2FoQkVJZ0FoQXlBQUJFQWdBQ0VJSUFNaEVBVVFBQXNGSUE4aENBc2dEQ3dBQUFSQUlBaEJMVG9BQUNBSVFRRnFJUWdMSUFSQkNtb2hBeUFFSVF3RFFDQUtJQXRKQkVBZ0Npd0FBQ0VMSUFRaEFBTkFBa0FnQUNBRFJnUkFJQU1oQUF3QkN5QUFMQUFBSUF0SEJFQWdBRUVCYWlFQURBSUxDd3NnQ0NBQUlBeHJRZnFjQTJvc0FBQTZBQUFnQ2tFQmFpRUtJQWhCQVdvaENDQUhLQUxrQVNFTERBRUxDeUFJUVFBNkFBQWdEaUFHTmdJQUlBOUJoWjBESUE0UWd3RkJBVWNFUUJBQUN5QVFCRUFnRUJBNEN3c2dBU2dDQUNJQUJIOGdBQ2dDRENJRElBQW9BaEJHQkg4Z0FDQUFLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdBeXdBQUJCQ0MwRi9FRUVFZnlBQlFRQTJBZ0JCQVFVZ0FTZ0NBRVVMQlVFQkN5RURBa0FDUUFKQUlBSW9BZ0FpQUVVTkFDQUFLQUlNSWdRZ0FDZ0NFRVlFZnlBQUlBQW9BZ0FvQWlSQi93QnhRUWhxRVFBQUJTQUVMQUFBRUVJTFFYOFFRUVJBSUFKQkFEWUNBQXdCQlNBRFJRMENDd3dDQ3lBRERRQU1BUXNnQlNBRktBSUFRUUp5TmdJQUN5QUJLQUlBSVJFZ0RSQThJQWtvQWdBaEFDQUpRUUEyQWdBZ0FBUkFJQUFnQ1NnQ0JFSC9BWEZCckFOcUVRRUFDeUFISkFZZ0VRdVRBUUVDZnlNR0lRWWpCa0dBQVdva0JpQUdRZlFBYWlJSElBWkI1QUJxTmdJQUlBQWdCaUFISUFNZ0JDQUZFS3dFSUFaQjZBQnFJZ05DQURjREFDQUdRZkFBYWlJRUlBWTJBZ0FnQWlnQ0FDQUJhMEVDZFNFRklBQW9BZ0FRWWlFQUlBRWdCQ0FGSUFNUS9nSWhBeUFBQkVBZ0FCQmlHZ3NnQTBGL1JnUkFFQUFGSUFJZ0EwRUNkQ0FCYWpZQ0FDQUdKQVlMQzdFQkFDTUdJUUlqQmtHZ0Eyb2tCaUFDUVpBRGFpSURJQUpCa0FOcU5nSUFJQUJCQ0dvZ0FpQURJQVFnQlNBR0VMUUtJQU1vQWdBaEJTQUNJUU1nQVNnQ0FDRUFBMEFnQXlBRlJ3UkFJQU1vQWdBaEFTQUFCSDlCQUNBQUlBQW9BaGdpQkNBQUtBSWNSZ1IvSUFBZ0FTQUFLQUlBS0FJMFFUOXhRWW9CYWhFQ0FBVWdBQ0FFUVFScU5nSVlJQVFnQVRZQ0FDQUJDMEYvRUVFYkJVRUFDeUVBSUFOQkJHb2hBd3dCQ3dzZ0FpUUdJQUFMdVFFQUl3WWhBaU1HUWZBQWFpUUdJQUpCNUFCcUlnTWdBa0hrQUdvMkFnQWdBRUVJYWlBQ0lBTWdCQ0FGSUFZUXJBUWdBeWdDQUNFRklBSWhBeUFCS0FJQUlRQURRQ0FESUFWSEJFQWdBeXdBQUNFQklBQUVmMEVBSUFBZ0FDZ0NHQ0lFSUFBb0FoeEdCSDhnQUNnQ0FDZ0NOQ0VFSUFBZ0FSQkNJQVJCUDNGQmlnRnFFUUlBQlNBQUlBUkJBV28yQWhnZ0JDQUJPZ0FBSUFFUVFndEJmeEJCR3dWQkFBc2hBQ0FEUVFGcUlRTU1BUXNMSUFJa0JpQUFDNDBFQVFOL0lBQW9BZ0FpQkFSL0lBUW9BZ3dpQlNBRUtBSVFSZ1IvSUFRZ0JDZ0NBQ2dDSkVIL0FIRkJDR29SQUFBRklBVW9BZ0FMUVg4UVFRUi9JQUJCQURZQ0FFRUJCU0FBS0FJQVJRc0ZRUUVMSVFVQ1FBSkFBa0FnQVNnQ0FDSUVCRUFnQkNnQ0RDSUdJQVFvQWhCR0JIOGdCQ0FFS0FJQUtBSWtRZjhBY1VFSWFoRUFBQVVnQmlnQ0FBdEJmeEJCQkVBZ0FVRUFOZ0lBQlNBRkJFQU1CQVVNQXdzQUN3c2dCVVVFUUVFQUlRUU1BZ3NMSUFJZ0FpZ0NBRUVHY2pZQ0FBd0JDeUFESUFBb0FnQWlCU2dDRENJR0lBVW9BaEJHQkg4Z0JTQUZLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdCaWdDQUF0QkFDQURLQUlBS0FJMFFUOXhRY29CYWhFRUFFSC9BWEZCSlVjRVFDQUNJQUlvQWdCQkJISTJBZ0FNQVFzZ0FDZ0NBQ0lES0FJTUlnVWdBeWdDRUVZRVFDQURJQU1vQWdBb0FpaEIvd0J4UVFocUVRQUFHZ1VnQXlBRlFRUnFOZ0lNSUFVb0FnQWFDeUFBS0FJQUlnTUVmeUFES0FJTUlnVWdBeWdDRUVZRWZ5QURJQU1vQWdBb0FpUkIvd0J4UVFocUVRQUFCU0FGS0FJQUMwRi9FRUVFZnlBQVFRQTJBZ0JCQVFVZ0FDZ0NBRVVMQlVFQkN5RUFBa0FDUUNBRVJRMEFJQVFvQWd3aUF5QUVLQUlRUmdSL0lBUWdCQ2dDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQU1vQWdBTFFYOFFRUVJBSUFGQkFEWUNBQXdCQlNBQURRTUxEQUVMSUFCRkRRRUxJQUlnQWlnQ0FFRUNjallDQUFzTFVnRUJmeU1HSVFVakJrRVFhaVFHSUFVZ0FpZ0NBRFlDQUNBRlFRUnFJZ0lnQlNnQ0FEWUNBQ0FCSUFJZ0F5QUVRUVFRbVFFaEFTQURLQUlBUVFSeFJRUkFJQUFnQVVHVWNXbzJBZ0FMSUFVa0JndGhBUUYvSXdZaEJTTUdRUkJxSkFZZ0JTQUNLQUlBTmdJQUlBVkJCR29pQWlBRktBSUFOZ0lBSUFFZ0FpQURJQVJCQVJDWkFTRUJJQU1vQWdBaUFrRUVjVVVnQVVFSFNIRUVRQ0FBSUFFMkFnQUZJQU1nQWtFRWNqWUNBQXNnQlNRR0MyRUJBWDhqQmlFRkl3WkJFR29rQmlBRklBSW9BZ0EyQWdBZ0JVRUVhaUlDSUFVb0FnQTJBZ0FnQVNBQ0lBTWdCRUVDRUprQklRRWdBeWdDQUNJQ1FRUnhSU0FCUVQxSWNRUkFJQUFnQVRZQ0FBVWdBeUFDUVFSeU5nSUFDeUFGSkFZTHF3SUJCSHhFQUFBQUFBQUE4RDhnQVNzREdDSURFT2NFSWdTaElRSWdBeERtQkNFRElBQWdCQ0FCS3dNQUlnVWdCYUlnQXFLZ09RTUFJQUFnQWlBQkt3TUFJQUVyQXdpaW9pQURJQUVyQXhDaW9Ua0RDQ0FBSUFJZ0FTc0RBQ0FCS3dNUW9xSWdBeUFCS3dNSW9xQTVBeEFnQUNBQkt3TWdPUU1ZSUFBZ0FpQUJLd01JSUFFckF3Q2lvaUFESUFFckF4Q2lvRGtESUNBQUlBUWdBaUFCS3dNSUlnVWdCYUtpb0RrREtDQUFJQUlnQVNzRENDQUJLd01Rb3FJZ0F5QUJLd01Bb3FFNUF6QWdBQ0FCS3dNb09RTTRJQUJCUUdzZ0FpQUJLd01RSUFFckF3Q2lvaUFESUFFckF3aWlvVGtEQUNBQUlBSWdBU3NERUNBQkt3TUlvcUlnQXlBQkt3TUFvcUE1QTBnZ0FDQUVJQUlnQVNzREVDSUNJQUtpb3FBNUExQWdBQ0FCS3dNd09RTllDK0lCQVFSL0l3WWhCeU1HUVJCcUpBWWdBRUVJYWlJQUtBSUFLQUlJSVFZZ0FDQUdRZjhBY1VFSWFoRUFBQ0lBTEFBTElnWkJBRWdFZnlBQUtBSUVCU0FHUWY4QmNRc2hCaUFIUVFScUlRaEJBQ0FBTEFBWElnbEJBRWdFZnlBQUtBSVFCU0FKUWY4QmNRdHJJQVpHQkVBZ0JDQUVLQUlBUVFSeU5nSUFCUUpBSUFjZ0F5Z0NBRFlDQUNBSUlBY29BZ0EyQWdBZ0FpQUlJQUFnQUVFWWFpQUZJQVJCQUJDVkFpQUFheUlDUlNBQktBSUFJZ0JCREVaeEJFQWdBVUVBTmdJQURBRUxJQUpCREVZZ0FFRU1TSEVFUUNBQklBQkJER28yQWdBTEN3c2dCeVFHQy9ZREFRTi9BMEFDUUNBQUtBSUFJZ1FFZnlBRUtBSU1JZ1VnQkNnQ0VFWUVmeUFFSUFRb0FnQW9BaVJCL3dCeFFRaHFFUUFBQlNBRktBSUFDMEYvRUVFRWZ5QUFRUUEyQWdCQkFRVWdBQ2dDQUVVTEJVRUJDeUVGQWtBQ1FDQUJLQUlBSWdSRkRRQWdCQ2dDRENJR0lBUW9BaEJHQkg4Z0JDQUVLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdCaWdDQUF0QmZ4QkJCRUFnQVVFQU5nSUFEQUVGSUFWRkRRTUxEQUVMSUFVRWYwRUFJUVFNQWdWQkFBc2hCQXNnQTBHQXdBQWdBQ2dDQUNJRktBSU1JZ1lnQlNnQ0VFWUVmeUFGSUFVb0FnQW9BaVJCL3dCeFFRaHFFUUFBQlNBR0tBSUFDeUFES0FJQUtBSU1RVDl4UWNvQmFoRUVBRVVOQUNBQUtBSUFJZ1FvQWd3aUJTQUVLQUlRUmdSQUlBUWdCQ2dDQUNnQ0tFSC9BSEZCQ0dvUkFBQWFCU0FFSUFWQkJHbzJBZ3dnQlNnQ0FCb0xEQUVMQ3lBQUtBSUFJZ01FZnlBREtBSU1JZ1VnQXlnQ0VFWUVmeUFESUFNb0FnQW9BaVJCL3dCeFFRaHFFUUFBQlNBRktBSUFDMEYvRUVFRWZ5QUFRUUEyQWdCQkFRVWdBQ2dDQUVVTEJVRUJDeUVBQWtBQ1FBSkFJQVJGRFFBZ0JDZ0NEQ0lESUFRb0FoQkdCSDhnQkNBRUtBSUFLQUlrUWY4QWNVRUlhaEVBQUFVZ0F5Z0NBQXRCZnhCQkJFQWdBVUVBTmdJQURBRUZJQUJGRFFJTERBSUxJQUFOQUF3QkN5QUNJQUlvQWdCQkFuSTJBZ0FMQzJFQkFYOGpCaUVGSXdaQkVHb2tCaUFGSUFJb0FnQTJBZ0FnQlVFRWFpSUNJQVVvQWdBMkFnQWdBU0FDSUFNZ0JFRUNFSmtCSVFFZ0F5Z0NBQ0lDUVFSeFJTQUJRVHhJY1FSQUlBQWdBVFlDQUFVZ0F5QUNRUVJ5TmdJQUN5QUZKQVlMWkFFQmZ5TUdJUVVqQmtFUWFpUUdJQVVnQWlnQ0FEWUNBQ0FGUVFScUlnSWdCU2dDQURZQ0FDQUJJQUlnQXlBRVFRSVFtUUVoQVNBREtBSUFJZ0pCQkhGRklBRkJEVWh4QkVBZ0FDQUJRWDlxTmdJQUJTQURJQUpCQkhJMkFnQUxJQVVrQmd0aUFRRi9Jd1loQlNNR1FSQnFKQVlnQlNBQ0tBSUFOZ0lBSUFWQkJHb2lBaUFGS0FJQU5nSUFJQUVnQWlBRElBUkJBeENaQVNFQklBTW9BZ0FpQWtFRWNVVWdBVUh1QWtoeEJFQWdBQ0FCTmdJQUJTQURJQUpCQkhJMkFnQUxJQVVrQmd0a0FRRi9Jd1loQlNNR1FSQnFKQVlnQlNBQ0tBSUFOZ0lBSUFWQkJHb2lBaUFGS0FJQU5nSUFJQUVnQWlBRElBUkJBaENaQVNFQklBTW9BZ0FpQWtFRWNVVWdBVUYvYWtFTVNYRUVRQ0FBSUFFMkFnQUZJQU1nQWtFRWNqWUNBQXNnQlNRR0MyRUJBWDhqQmlFRkl3WkJFR29rQmlBRklBSW9BZ0EyQWdBZ0JVRUVhaUlDSUFVb0FnQTJBZ0FnQVNBQ0lBTWdCRUVDRUprQklRRWdBeWdDQUNJQ1FRUnhSU0FCUVJoSWNRUkFJQUFnQVRZQ0FBVWdBeUFDUVFSeU5nSUFDeUFGSkFZTFpBRUJmeU1HSVFVakJrRVFhaVFHSUFVZ0FpZ0NBRFlDQUNBRlFRUnFJZ0lnQlNnQ0FEWUNBQ0FCSUFJZ0F5QUVRUUlRbVFFaEFTQURLQUlBSWdKQkJIRkZJQUZCZjJwQkgwbHhCRUFnQUNBQk5nSUFCU0FESUFKQkJISTJBZ0FMSUFVa0JndXdBUUVDZkNBQUlBRXJBd0FpQXlBRG9pQUJLd01JSWdJZ0FxS2dJQUVyQXhBaUFpQUNvcUFpQWtRQUFBQUFBQUFBQUdFRWZDQUFSQUFBQUFBQUFQQS9PUU1BSUFCRUFBQUFBQUFBQUFBNUF3aEVBQUFBQUFBQUFBQWhBa1FBQUFBQUFBQUFBQVVnQUNBRElBS2ZJZ0tqT1FNQUlBQWdBU3NEQ0NBQ296a0RDQ0FCS3dNUUlBS2pDemtERUNBQUlBSTVBeGdnQUNBQkt3TVlPUU1nSUFBZ0FTc0RJRGtES0NBQUlBRXJBeWc1QXpBTDlBRUJBbjlCa01BRExBQUFSUVJBUVpEQUF4QndCRUJCc0xzRElRQURRQ0FBUWdBM0FnQWdBRUVBTmdJSVFRQWhBUU5BSUFGQkEwY0VRQ0FCUVFKMElBQnFRUUEyQWdBZ0FVRUJhaUVCREFFTEN5QUFRUXhxSWdCQjJMd0RSdzBBQzBHUXdBTVFid3NMUWJDN0EwR1FtZ0VRVmtHOHV3TkJySm9CRUZaQnlMc0RRY2lhQVJCV1FkUzdBMEhvbWdFUVZrSGd1d05Ca0pzQkVGWkI3THNEUWJTYkFSQldRZmk3QTBIUW13RVFWa0dFdkFOQjlKc0JFRlpCa0x3RFFZU2NBUkJXUVp5OEEwR1VuQUVRVmtHb3ZBTkJwSndCRUZaQnRMd0RRYlNjQVJCV1FjQzhBMEhFbkFFUVZrSE12QU5CMUp3QkVGWUwyQUlCQW45QmdNQURMQUFBUlFSQVFZREFBeEJ3QkVCQmtMa0RJUUFEUUNBQVFnQTNBZ0FnQUVFQU5nSUlRUUFoQVFOQUlBRkJBMGNFUUNBQlFRSjBJQUJxUVFBMkFnQWdBVUVCYWlFQkRBRUxDeUFBUVF4cUlnQkJzTHNEUncwQUMwR0F3QU1RYndzTFFaQzVBMEdJbGdFUVZrR2N1UU5CcUpZQkVGWkJxTGtEUWN5V0FSQldRYlM1QTBIa2xnRVFWa0hBdVFOQi9KWUJFRlpCekxrRFFZeVhBUkJXUWRpNUEwR2dsd0VRVmtIa3VRTkJ0SmNCRUZaQjhMa0RRZENYQVJCV1FmeTVBMEg0bHdFUVZrR0l1Z05CbUpnQkVGWkJsTG9EUWJ5WUFSQldRYUM2QTBIZ21BRVFWa0dzdWdOQjhKZ0JFRlpCdUxvRFFZQ1pBUkJXUWNTNkEwR1FtUUVRVmtIUXVnTkIvSllCRUZaQjNMb0RRYUNaQVJCV1FlaTZBMEd3bVFFUVZrSDB1Z05Cd0prQkVGWkJnTHNEUWRDWkFSQldRWXk3QTBIZ21RRVFWa0dZdXdOQjhKa0JFRlpCcExzRFFZQ2FBUkJXQzN3QkFuOUI4TDhETEFBQVJRUkFRZkMvQXhCd0JFQkI4TGdESVFBRFFDQUFRZ0EzQWdBZ0FFRUFOZ0lJUVFBaEFRTkFJQUZCQTBjRVFDQUJRUUowSUFCcVFRQTJBZ0FnQVVFQmFpRUJEQUVMQ3lBQVFReHFJZ0JCaUxrRFJ3MEFDMEh3dndNUWJ3c0xRZkM0QTBId2xRRVFWa0g4dUFOQi9KVUJFRllMUkFCQnlMOERMQUFBUlFSQVFjaS9BeEJ3QkVCQmpNOERRZ0EzQWdCQmxNOERRUUEyQWdCQmpNOERRYVNVQVVHa2xBRVF0QUVReXdGQnlMOERFRzhMQzBHTXp3TUxSQUJCMEw4RExBQUFSUVJBUWRDL0F4QndCRUJCbU04RFFnQTNBZ0JCb004RFFRQTJBZ0JCbU04RFFjaVVBVUhJbEFFUXRBRVF5d0ZCMEw4REVHOExDMEdZendNTFJBQkIyTDhETEFBQVJRUkFRZGkvQXhCd0JFQkJwTThEUWdBM0FnQkJyTThEUVFBMkFnQkJwTThEUWV5VUFVSHNsQUVRdEFFUXl3RkIyTDhERUc4TEMwR2t6d01MUkFCQjRMOERMQUFBUlFSQVFlQy9BeEJ3QkVCQnNNOERRZ0EzQWdCQnVNOERRUUEyQWdCQnNNOERRWnlWQVVHY2xRRVF0QUVReXdGQjRMOERFRzhMQzBHd3p3TUxNUUJCNkw4RExBQUFSUVJBUWVpL0F4QndCRUFReHdwQnZNOERRZkM0QXpZQ0FFSG92d01RYndzTFFielBBeWdDQUFzeEFFSDR2d01zQUFCRkJFQkIrTDhERUhBRVFCREdDa0hBendOQmtMa0ROZ0lBUWZpL0F4QnZDd3RCd004REtBSUFDekVBUVlqQUF5d0FBRVVFUUVHSXdBTVFjQVJBRU1VS1FjVFBBMEd3dXdNMkFnQkJpTUFERUc4TEMwSEV6d01vQWdBTGdnd0JCWDhqQmlFSEl3WkJrQUZxSkFZZ0IwSHdBR29oQ2lBSFFVQnJJUXNnQkVFQU5nSUFJQWRCZ0FGcUlnZ2dBeEE3SUFoQm9NNERFRG9oQ1NBSUVEd0Nmd0pBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUlBWkJHSFJCR0hWQkpXc09WUllYRnhjWEZ4Y1hGeGNYRnhjWEZ4Y1hGeGNYRnhjWEZ4Y1hGeGNBQVJjRUZ3VVhCZ2NYRnhjS0Z4Y1hGdzRQRUJjWEZ4TVZGeGNYRnhjWEZ3QUJBZ01ERnhjQkZ3Z1hGd2tMRnd3WERSY0xGeGNSRWhRWEN5QUhJQUlvQWdBMkFud2dDQ0FIS0FKOE5nSUFJQUFnQlVFWWFpQUJJQWdnQkNBSkVMRUVEQmNMSUFjZ0FpZ0NBRFlDZUNBSUlBY29BbmcyQWdBZ0FDQUZRUkJxSUFFZ0NDQUVJQWtRc0FRTUZnc2dBRUVJYWlJR0tBSUFLQUlNSVFrZ0JpQUpRZjhBY1VFSWFoRUFBQ0VHSUFjZ0FTZ0NBRFlDZENBSElBSW9BZ0EyQW13Z0JpZ0NBQ0FHSUFZc0FBc2lDVUVBU0NJTEd5RUNJQVlvQWdRZ0NVSC9BWEVnQ3h0QkFuUWdBbW9oQmlBS0lBY29BblEyQWdBZ0NDQUhLQUpzTmdJQUlBRWdBQ0FLSUFnZ0F5QUVJQVVnQWlBR0VLTUJOZ0lBREJVTElBY2dBaWdDQURZQ2FDQUlJQWNvQW1nMkFnQWdCVUVNYWlBQklBZ2dCQ0FKRU1NS0RCUUxJQWNnQVNnQ0FEWUNaQ0FISUFJb0FnQTJBbUFnQ2lBSEtBSmtOZ0lBSUFnZ0J5Z0NZRFlDQUNBQklBQWdDaUFJSUFNZ0JDQUZRYUR3QUVIQThBQVFvd0UyQWdBTUV3c2dCeUFCS0FJQU5nSmNJQWNnQWlnQ0FEWUNXQ0FLSUFjb0FsdzJBZ0FnQ0NBSEtBSllOZ0lBSUFFZ0FDQUtJQWdnQXlBRUlBVkJ3UEFBUWVEd0FCQ2pBVFlDQUF3U0N5QUhJQUlvQWdBMkFsUWdDQ0FIS0FKVU5nSUFJQVZCQ0dvZ0FTQUlJQVFnQ1JEQ0Nnd1JDeUFISUFJb0FnQTJBbEFnQ0NBSEtBSlFOZ0lBSUFWQkNHb2dBU0FJSUFRZ0NSREJDZ3dRQ3lBSElBSW9BZ0EyQWt3Z0NDQUhLQUpNTmdJQUlBVkJIR29nQVNBSUlBUWdDUkRBQ2d3UEN5QUhJQUlvQWdBMkFrZ2dDQ0FIS0FKSU5nSUFJQVZCRUdvZ0FTQUlJQVFnQ1JDL0Nnd09DeUFISUFJb0FnQTJBa1FnQ0NBSEtBSkVOZ0lBSUFWQkJHb2dBU0FJSUFRZ0NSQytDZ3dOQ3lBTElBSW9BZ0EyQWdBZ0NDQUxLQUlBTmdJQUlBRWdDQ0FFSUFrUXZRb01EQXNnQnlBQ0tBSUFOZ0k4SUFnZ0J5Z0NQRFlDQUNBQUlBVkJDR29nQVNBSUlBUWdDUkM4Q2d3TEN5QUhJQUVvQWdBMkFqZ2dCeUFDS0FJQU5nSTBJQW9nQnlnQ09EWUNBQ0FJSUFjb0FqUTJBZ0FnQVNBQUlBb2dDQ0FESUFRZ0JVSGc4QUJCalBFQUVLTUJOZ0lBREFvTElBY2dBU2dDQURZQ01DQUhJQUlvQWdBMkFpd2dDaUFIS0FJd05nSUFJQWdnQnlnQ0xEWUNBQ0FCSUFBZ0NpQUlJQU1nQkNBRlFaRHhBRUdrOFFBUW93RTJBZ0FNQ1FzZ0J5QUNLQUlBTmdJb0lBZ2dCeWdDS0RZQ0FDQUZJQUVnQ0NBRUlBa1F1Z29NQ0FzZ0J5QUJLQUlBTmdJa0lBY2dBaWdDQURZQ0lDQUtJQWNvQWlRMkFnQWdDQ0FIS0FJZ05nSUFJQUVnQUNBS0lBZ2dBeUFFSUFWQnNQRUFRZER4QUJDakFUWUNBQXdIQ3lBSElBSW9BZ0EyQWh3Z0NDQUhLQUljTmdJQUlBVkJHR29nQVNBSUlBUWdDUkM1Q2d3R0N5QUFLQUlBS0FJVUlRWWdCeUFCS0FJQU5nSVlJQWNnQWlnQ0FEWUNGQ0FLSUFjb0FoZzJBZ0FnQ0NBSEtBSVVOZ0lBSUFBZ0NpQUlJQU1nQkNBRklBWkJQM0ZCeGdKcUVRb0FEQVlMSUFCQkNHb2lCaWdDQUNnQ0dDRUpJQVlnQ1VIL0FIRkJDR29SQUFBaEJpQUhJQUVvQWdBMkFoQWdCeUFDS0FJQU5nSU1JQVlvQWdBZ0JpQUdMQUFMSWdsQkFFZ2lDeHNoQWlBR0tBSUVJQWxCL3dGeElBc2JRUUowSUFKcUlRWWdDaUFIS0FJUU5nSUFJQWdnQnlnQ0REWUNBQ0FCSUFBZ0NpQUlJQU1nQkNBRklBSWdCaENqQVRZQ0FBd0VDeUFISUFJb0FnQTJBZ2dnQ0NBSEtBSUlOZ0lBSUFWQkZHb2dBU0FJSUFRZ0NSQ3ZCQXdEQ3lBSElBSW9BZ0EyQWdRZ0NDQUhLQUlFTmdJQUlBVkJGR29nQVNBSUlBUWdDUkM0Q2d3Q0N5QUhJQUlvQWdBMkFnQWdDQ0FIS0FJQU5nSUFJQUVnQ0NBRUlBa1F0d29NQVFzZ0JDQUVLQUlBUVFSeU5nSUFDeUFCS0FJQUN5RU1JQWNrQmlBTUMxa0JBMzhqQmlFR0l3WkJFR29rQmlBR1FRUnFJZ2NnQXhBN0lBZEJvTTRERURvaEF5QUhFRHdnQmlBQ0tBSUFOZ0lBSUFjZ0JpZ0NBRFlDQUNBRlFSUnFJQUVnQnlBRUlBTVFyd1FnQVNnQ0FDRUlJQVlrQmlBSUMxc0JBMzhqQmlFR0l3WkJFR29rQmlBR1FRUnFJZ2NnQXhBN0lBZEJvTTRERURvaEF5QUhFRHdnQmlBQ0tBSUFOZ0lBSUFjZ0JpZ0NBRFlDQUNBQUlBVkJFR29nQVNBSElBUWdBeEN3QkNBQktBSUFJUWdnQmlRR0lBZ0xXd0VEZnlNR0lRWWpCa0VRYWlRR0lBWkJCR29pQnlBREVEc2dCMEdnemdNUU9pRURJQWNRUENBR0lBSW9BZ0EyQWdBZ0J5QUdLQUlBTmdJQUlBQWdCVUVZYWlBQklBY2dCQ0FERUxFRUlBRW9BZ0FoQ0NBR0pBWWdDQXVuQVFFRWZ5TUdJUWNqQmtFUWFpUUdJQUJCQ0dvaUJpZ0NBQ2dDRkNFSUlBWWdDRUgvQUhGQkNHb1JBQUFoQmlBSElBRW9BZ0EyQWdRZ0J5QUNLQUlBTmdJQUlBWW9BZ0FnQmlBR0xBQUxJZ0pCQUVnaUNCc2hBU0FHS0FJRUlBSkIvd0Z4SUFnYlFRSjBJQUZxSVFJZ0IwRUlhaUlHSUFjb0FnUTJBZ0FnQjBFTWFpSUlJQWNvQWdBMkFnQWdBQ0FHSUFnZ0F5QUVJQVVnQVNBQ0VLTUJJUWtnQnlRR0lBa0xZQUVDZnlNR0lRWWpCa0VRYWlRR0lBWWdBU2dDQURZQ0JDQUdJQUlvQWdBMkFnQWdCa0VJYWlJQklBWW9BZ1EyQWdBZ0JrRU1haUlDSUFZb0FnQTJBZ0FnQUNBQklBSWdBeUFFSUFWQjBQRUFRZkR4QUJDakFTRUhJQVlrQmlBSEM1MEVBUU4vSUFBb0FnQWlCQVIvSUFRb0Fnd2lCU0FFS0FJUVJnUi9JQVFnQkNnQ0FDZ0NKRUgvQUhGQkNHb1JBQUFGSUFVc0FBQVFRZ3RCZnhCQkJIOGdBRUVBTmdJQVFRRUZJQUFvQWdCRkN3VkJBUXNoQlFKQUFrQUNRQ0FCS0FJQUlnUUVRQ0FFS0FJTUlnWWdCQ2dDRUVZRWZ5QUVJQVFvQWdBb0FpUkIvd0J4UVFocUVRQUFCU0FHTEFBQUVFSUxRWDhRUVFSQUlBRkJBRFlDQUFVZ0JRUkFEQVFGREFNTEFBc0xJQVZGQkVCQkFDRUVEQUlMQ3lBQ0lBSW9BZ0JCQm5JMkFnQU1BUXNnQXlBQUtBSUFJZ1VvQWd3aUJpQUZLQUlRUmdSL0lBVWdCU2dDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQVlzQUFBUVFndEIvd0Z4UVFBZ0F5Z0NBQ2dDSkVFL2NVSEtBV29SQkFCQi93RnhRU1ZIQkVBZ0FpQUNLQUlBUVFSeU5nSUFEQUVMSUFBb0FnQWlBeWdDRENJRklBTW9BaEJHQkVBZ0F5QURLQUlBS0FJb1FmOEFjVUVJYWhFQUFCb0ZJQU1nQlVFQmFqWUNEQ0FGTEFBQUVFSWFDeUFBS0FJQUlnTUVmeUFES0FJTUlnVWdBeWdDRUVZRWZ5QURJQU1vQWdBb0FpUkIvd0J4UVFocUVRQUFCU0FGTEFBQUVFSUxRWDhRUVFSL0lBQkJBRFlDQUVFQkJTQUFLQUlBUlFzRlFRRUxJUUFDUUFKQUlBUkZEUUFnQkNnQ0RDSURJQVFvQWhCR0JIOGdCQ0FFS0FJQUtBSWtRZjhBY1VFSWFoRUFBQVVnQXl3QUFCQkNDMEYvRUVFRVFDQUJRUUEyQWdBTUFRVWdBQTBEQ3d3QkN5QUFSUTBCQ3lBQ0lBSW9BZ0JCQW5JMkFnQUxDMUlCQVg4akJpRUZJd1pCRUdva0JpQUZJQUlvQWdBMkFnQWdCVUVFYWlJQ0lBVW9BZ0EyQWdBZ0FTQUNJQU1nQkVFRUVKb0JJUUVnQXlnQ0FFRUVjVVVFUUNBQUlBRkJsSEZxTmdJQUN5QUZKQVlMWVFFQmZ5TUdJUVVqQmtFUWFpUUdJQVVnQWlnQ0FEWUNBQ0FGUVFScUlnSWdCU2dDQURZQ0FDQUJJQUlnQXlBRVFRRVFtZ0VoQVNBREtBSUFJZ0pCQkhGRklBRkJCMGh4QkVBZ0FDQUJOZ0lBQlNBRElBSkJCSEkyQWdBTElBVWtCZ3RoQVFGL0l3WWhCU01HUVJCcUpBWWdCU0FDS0FJQU5nSUFJQVZCQkdvaUFpQUZLQUlBTmdJQUlBRWdBaUFESUFSQkFoQ2FBU0VCSUFNb0FnQWlBa0VFY1VVZ0FVRTlTSEVFUUNBQUlBRTJBZ0FGSUFNZ0FrRUVjallDQUFzZ0JTUUdDK0lCQVFSL0l3WWhCeU1HUVJCcUpBWWdBRUVJYWlJQUtBSUFLQUlJSVFZZ0FDQUdRZjhBY1VFSWFoRUFBQ0lBTEFBTElnWkJBRWdFZnlBQUtBSUVCU0FHUWY4QmNRc2hCaUFIUVFScUlRaEJBQ0FBTEFBWElnbEJBRWdFZnlBQUtBSVFCU0FKUWY4QmNRdHJJQVpHQkVBZ0JDQUVLQUlBUVFSeU5nSUFCUUpBSUFjZ0F5Z0NBRFlDQUNBSUlBY29BZ0EyQWdBZ0FpQUlJQUFnQUVFWWFpQUZJQVJCQUJDV0FpQUFheUlDUlNBQktBSUFJZ0JCREVaeEJFQWdBVUVBTmdJQURBRUxJQUpCREVZZ0FFRU1TSEVFUUNBQklBQkJER28yQWdBTEN3c2dCeVFHQzVRRUFRTi9BMEFDUUNBQUtBSUFJZ1FFZnlBRUtBSU1JZ1VnQkNnQ0VFWUVmeUFFSUFRb0FnQW9BaVJCL3dCeFFRaHFFUUFBQlNBRkxBQUFFRUlMUVg4UVFRUi9JQUJCQURZQ0FFRUJCU0FBS0FJQVJRc0ZRUUVMSVFVQ1FBSkFJQUVvQWdBaUJFVU5BQ0FFS0FJTUlnWWdCQ2dDRUVZRWZ5QUVJQVFvQWdBb0FpUkIvd0J4UVFocUVRQUFCU0FHTEFBQUVFSUxRWDhRUVFSQUlBRkJBRFlDQUF3QkJTQUZSUTBEQ3d3QkN5QUZCSDlCQUNFRURBSUZRUUFMSVFRTElBQW9BZ0FpQlNnQ0RDSUdJQVVvQWhCR0JIOGdCU0FGS0FJQUtBSWtRZjhBY1VFSWFoRUFBQVVnQml3QUFCQkNDeUlGUWY4QmNVRVlkRUVZZFVGL1RBMEFJQU1vQWdnZ0JVRVlkRUVZZFVFQmRHb3VBUUJCZ01BQWNVVU5BQ0FBS0FJQUlnUW9BZ3dpQlNBRUtBSVFSZ1JBSUFRZ0JDZ0NBQ2dDS0VIL0FIRkJDR29SQUFBYUJTQUVJQVZCQVdvMkFnd2dCU3dBQUJCQ0dnc01BUXNMSUFBb0FnQWlBd1IvSUFNb0Fnd2lCU0FES0FJUVJnUi9JQU1nQXlnQ0FDZ0NKRUgvQUhGQkNHb1JBQUFGSUFVc0FBQVFRZ3RCZnhCQkJIOGdBRUVBTmdJQVFRRUZJQUFvQWdCRkN3VkJBUXNoQUFKQUFrQUNRQ0FFUlEwQUlBUW9BZ3dpQXlBRUtBSVFSZ1IvSUFRZ0JDZ0NBQ2dDSkVIL0FIRkJDR29SQUFBRklBTXNBQUFRUWd0QmZ4QkJCRUFnQVVFQU5nSUFEQUVGSUFCRkRRSUxEQUlMSUFBTkFBd0JDeUFDSUFJb0FnQkJBbkkyQWdBTEMyRUJBWDhqQmlFRkl3WkJFR29rQmlBRklBSW9BZ0EyQWdBZ0JVRUVhaUlDSUFVb0FnQTJBZ0FnQVNBQ0lBTWdCRUVDRUpvQklRRWdBeWdDQUNJQ1FRUnhSU0FCUVR4SWNRUkFJQUFnQVRZQ0FBVWdBeUFDUVFSeU5nSUFDeUFGSkFZTFpBRUJmeU1HSVFVakJrRVFhaVFHSUFVZ0FpZ0NBRFlDQUNBRlFRUnFJZ0lnQlNnQ0FEWUNBQ0FCSUFJZ0F5QUVRUUlRbWdFaEFTQURLQUlBSWdKQkJIRkZJQUZCRFVoeEJFQWdBQ0FCUVg5cU5nSUFCU0FESUFKQkJISTJBZ0FMSUFVa0JndGlBUUYvSXdZaEJTTUdRUkJxSkFZZ0JTQUNLQUlBTmdJQUlBVkJCR29pQWlBRktBSUFOZ0lBSUFFZ0FpQURJQVJCQXhDYUFTRUJJQU1vQWdBaUFrRUVjVVVnQVVIdUFraHhCRUFnQUNBQk5nSUFCU0FESUFKQkJISTJBZ0FMSUFVa0JndGtBUUYvSXdZaEJTTUdRUkJxSkFZZ0JTQUNLQUlBTmdJQUlBVkJCR29pQWlBRktBSUFOZ0lBSUFFZ0FpQURJQVJCQWhDYUFTRUJJQU1vQWdBaUFrRUVjVVVnQVVGL2FrRU1TWEVFUUNBQUlBRTJBZ0FGSUFNZ0FrRUVjallDQUFzZ0JTUUdDMkVCQVg4akJpRUZJd1pCRUdva0JpQUZJQUlvQWdBMkFnQWdCVUVFYWlJQ0lBVW9BZ0EyQWdBZ0FTQUNJQU1nQkVFQ0VKb0JJUUVnQXlnQ0FDSUNRUVJ4UlNBQlFSaEljUVJBSUFBZ0FUWUNBQVVnQXlBQ1FRUnlOZ0lBQ3lBRkpBWUw4UVFCQVg4Z0FFSUFOd01BSUFCQ0FEY0RDQ0FBUWdBM0F4QWdBRUlBTndNWUlBQkNBRGNESUNBQVFnQTNBeWdnQUVJQU53TXdJQUJDQURjRE9DQUFRVUJyUkFBQUFBQUFBUEMvT1FNQUlBQkNBRGNEU0NBQVFnQTNBMUFnQUVJQU53TllJQUJDQURjRFlDQUFSQUFBQUFBQUFQQS9PUU5vSUFCQ0FEY0RjQ0FBUWdBM0EzZ2dBRUlBTndPQUFTQUFRZ0EzQTRnQklBQkNBRGNEa0FFZ0FFSUFOd09ZQVNBQVJBQUFBQUFBQVBBL09RT2dBU0FBUWFnQmFpSUJRZ0EzQXdBZ0FVSUFOd01JSUFGQ0FEY0RFQ0FCUWdBM0F4Z2dBVUlBTndNZ0lBRkNBRGNES0NBQlFnQTNBekFnQVVJQU53TTRJQUZCUUd0Q0FEY0RBQ0FBUkFBQUFBQUFBUEMvT1FQd0FTQUFRZ0EzQS9nQklBQkNBRGNEZ0FJZ0FFSUFOd09JQWlBQVFnQTNBNUFDSUFCQ0FEY0RtQUlnQUVJQU53T2dBaUFBUkFBQUFBQUFBUEMvT1FPb0FpQUFRZ0EzQTdBQ0lBQkNBRGNEdUFJZ0FFSUFOd1BBQWlBQVFnQTNBOGdDSUFCRUFBQUFBQUFBOEQ4NUE5QUNJQUJCMkFKcUlnRkNBRGNEQUNBQlFnQTNBd2dnQVVJQU53TVFJQUZDQURjREdDQUJRZ0EzQXlBZ0FVSUFOd01vSUFGQ0FEY0RNQ0FCUWdBM0F6Z2dBVUZBYTBJQU53TUFJQUZDQURjRFNDQUJRZ0EzQTFBZ0FVSUFOd05ZSUFGQ0FEY0RZQ0FCUWdBM0EyZ2dBRVFBQUFBQUFBRHdQemtEeUFNZ0FFSUFOd1BRQXlBQVFnQTNBOWdESUFCQ0FEY0Q0QU1nQUVJQU53UG9BeUFBUWdBM0EvQURJQUJDQURjRCtBTWdBRVFBQUFBQUFBRHdQemtEZ0FRZ0FFSUFOd09JQkNBQVFnQTNBNUFFSUFCQ0FEY0RtQVFnQUVJQU53T2dCQ0FBUWdBM0E2Z0VJQUJDQURjRHNBUWdBRVFBQUFBQUFBRHdQemtEdUFRTFpBRUJmeU1HSVFVakJrRVFhaVFHSUFVZ0FpZ0NBRFlDQUNBRlFRUnFJZ0lnQlNnQ0FEWUNBQ0FCSUFJZ0F5QUVRUUlRbWdFaEFTQURLQUlBSWdKQkJIRkZJQUZCZjJwQkgwbHhCRUFnQUNBQk5nSUFCU0FESUFKQkJISTJBZ0FMSUFVa0JndjBBUUVDZjBIQXZ3TXNBQUJGQkVCQndMOERFSEFFUUVIQXR3TWhBQU5BSUFCQ0FEY0NBQ0FBUVFBMkFnaEJBQ0VCQTBBZ0FVRURSd1JBSUFGQkFuUWdBR3BCQURZQ0FDQUJRUUZxSVFFTUFRc0xJQUJCREdvaUFFSG91QU5IRFFBTFFjQy9BeEJ2Q3d0QndMY0RRZkNYQXhCWFFjeTNBMEgzbHdNUVYwSFl0d05CL3BjREVGZEI1TGNEUVlhWUF4QlhRZkMzQTBHUW1BTVFWMEg4dHdOQm1aZ0RFRmRCaUxnRFFhQ1lBeEJYUVpTNEEwR3BtQU1RVjBHZ3VBTkJyWmdERUZkQnJMZ0RRYkdZQXhCWFFiaTRBMEcxbUFNUVYwSEV1QU5CdVpnREVGZEIwTGdEUWIyWUF4QlhRZHk0QTBIQm1BTVFWd3ZZQWdFQ2YwR3d2d01zQUFCRkJFQkJzTDhERUhBRVFFR2d0UU1oQUFOQUlBQkNBRGNDQUNBQVFRQTJBZ2hCQUNFQkEwQWdBVUVEUndSQUlBRkJBblFnQUdwQkFEWUNBQ0FCUVFGcUlRRU1BUXNMSUFCQkRHb2lBRUhBdHdOSERRQUxRYkMvQXhCdkN3dEJvTFVEUWU2V0F4QlhRYXkxQTBIMmxnTVFWMEc0dFFOQi81WURFRmRCeExVRFFZV1hBeEJYUWRDMUEwR0xsd01RVjBIY3RRTkJqNWNERUZkQjZMVURRWlNYQXhCWFFmUzFBMEdabHdNUVYwR0F0Z05Cb0pjREVGZEJqTFlEUWFxWEF4QlhRWmkyQTBHeWx3TVFWMEdrdGdOQnU1Y0RFRmRCc0xZRFFjU1hBeEJYUWJ5MkEwSElsd01RVjBISXRnTkJ6SmNERUZkQjFMWURRZENYQXhCWFFlQzJBMEdMbHdNUVYwSHN0Z05CMUpjREVGZEIrTFlEUWRpWEF4QlhRWVMzQTBIY2x3TVFWMEdRdHdOQjRKY0RFRmRCbkxjRFFlU1hBeEJYUWFpM0EwSG9sd01RVjBHMHR3TkI3SmNERUZjTGZBRUNmMEdndndNc0FBQkZCRUJCb0w4REVIQUVRRUdBdFFNaEFBTkFJQUJDQURjQ0FDQUFRUUEyQWdoQkFDRUJBMEFnQVVFRFJ3UkFJQUZCQW5RZ0FHcEJBRFlDQUNBQlFRRnFJUUVNQVFzTElBQkJER29pQUVHWXRRTkhEUUFMUWFDL0F4QnZDd3RCZ0xVRFFlaVdBeEJYUVl5MUEwSHJsZ01RVnd0Q0FFSDR2Z01zQUFCRkJFQkIrTDRERUhBRVFFSEl6Z05DQURjQ0FFSFF6Z05CQURZQ0FFSEl6Z05CdFpZRFFiV1dBeEJnRUg1QitMNERFRzhMQzBISXpnTUxRZ0JCZ0w4RExBQUFSUVJBUVlDL0F4QndCRUJCMU00RFFnQTNBZ0JCM000RFFRQTJBZ0JCMU00RFFiNldBMEcrbGdNUVlCQitRWUMvQXhCdkN3dEIxTTREQzBJQVFZaS9BeXdBQUVVRVFFR0l2d01RY0FSQVFlRE9BMElBTndJQVFlak9BMEVBTmdJQVFlRE9BMEhIbGdOQng1WURFR0FRZmtHSXZ3TVFid3NMUWVET0F3dXBBZ0VHZkNBQkt3TVlJQUVyQXdBaUNDQUNLd01BSWdTaUlBRXJBd2dnQWlzRENDSUhvcUFnQVNzREVDQUNLd01RSWdPaW9LQWhCU0FCS3dNNElBUWdBU3NESUtJZ0J5QUJLd01vb3FBZ0F5QUJLd013b3FDZ0lRWWdBU3NEV0NBRUlBRkJRR3NpQWlzREFDSUVvaUFISUFFckEwaWlvQ0FESUFFckExQ2lvS0FpQTBRQUFBQUFBQUFBQUdFRWYwRi9CU0FBSUFnZ0E2SWdCU0FFb3FFZ0F5QURvaUlFb3prREFDQUFJQU1nQVNzRENLSWdCU0FCS3dOSW9xRWdCS001QXdnZ0FDQURJQUVyQXhDaUlBVWdBU3NEVUtLaElBU2pPUU1RSUFBZ0F5QUJLd01nb2lBR0lBSXJBd0Npb1NBRW96a0RHQ0FBSUFNZ0FTc0RLS0lnQmlBQkt3TklvcUVnQktNNUF5QWdBQ0FESUFFckF6Q2lJQVlnQVNzRFVLS2hJQVNqT1FNb1FRQUxDMElBUVpDL0F5d0FBRVVFUUVHUXZ3TVFjQVJBUWV6T0EwSUFOd0lBUWZUT0EwRUFOZ0lBUWV6T0EwSFRsZ05CMDVZREVHQVFma0dRdndNUWJ3c0xRZXpPQXdzeEFFR1l2d01zQUFCRkJFQkJtTDhERUhBRVFCRGtDa0g0emdOQmdMVUROZ0lBUVppL0F4QnZDd3RCK000REtBSUFDekVBUWFpL0F5d0FBRVVFUUVHb3Z3TVFjQVJBRU9NS1Fmek9BMEdndFFNMkFnQkJxTDhERUc4TEMwSDh6Z01vQWdBTE1RQkJ1TDhETEFBQVJRUkFRYmkvQXhCd0JFQVE0Z3BCZ004RFFjQzNBellDQUVHNHZ3TVFid3NMUVlEUEF5Z0NBQXY0Q3dFRmZ5TUdJUWNqQmtHUUFXb2tCaUFIUWZBQWFpRUtJQWRCUUdzaEN5QUVRUUEyQWdBZ0IwR0FBV29pQ0NBREVEc2dDRUdBemdNUU9pRUpJQWdRUEFKL0FrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FnQmtFWWRFRVlkVUVsYXc1VkZoY1hGeGNYRnhjWEZ4Y1hGeGNYRnhjWEZ4Y1hGeGNYRnhjWEZ3QUJGd1FYQlJjR0J4Y1hGd29YRnhjWERnOFFGeGNYRXhVWEZ4Y1hGeGNYQUFFQ0F3TVhGd0VYQ0JjWENRc1hEQmNORndzWEZ4RVNGQmNMSUFjZ0FpZ0NBRFlDZkNBSUlBY29BbncyQWdBZ0FDQUZRUmhxSUFFZ0NDQUVJQWtRdGdRTUZ3c2dCeUFDS0FJQU5nSjRJQWdnQnlnQ2VEWUNBQ0FBSUFWQkVHb2dBU0FJSUFRZ0NSQzFCQXdXQ3lBQVFRaHFJZ1lvQWdBb0Fnd2hDU0FHSUFsQi93QnhRUWhxRVFBQUlRWWdCeUFCS0FJQU5nSjBJQWNnQWlnQ0FEWUNiQ0FHS0FJQUlBWWdCaXdBQ3lJQ1FRQklJZ2tiSWdzZ0JpZ0NCQ0FDUWY4QmNTQUpHMm9oQWlBS0lBY29BblEyQWdBZ0NDQUhLQUpzTmdJQUlBRWdBQ0FLSUFnZ0F5QUVJQVVnQ3lBQ0VLUUJOZ0lBREJVTElBY2dBaWdDQURZQ2FDQUlJQWNvQW1nMkFnQWdCVUVNYWlBQklBZ2dCQ0FKRU9FS0RCUUxJQWNnQVNnQ0FEWUNaQ0FISUFJb0FnQTJBbUFnQ2lBSEtBSmtOZ0lBSUFnZ0J5Z0NZRFlDQUNBQklBQWdDaUFJSUFNZ0JDQUZRY1dZQTBITm1BTVFwQUUyQWdBTUV3c2dCeUFCS0FJQU5nSmNJQWNnQWlnQ0FEWUNXQ0FLSUFjb0FsdzJBZ0FnQ0NBSEtBSllOZ0lBSUFFZ0FDQUtJQWdnQXlBRUlBVkJ6WmdEUWRXWUF4Q2tBVFlDQUF3U0N5QUhJQUlvQWdBMkFsUWdDQ0FIS0FKVU5nSUFJQVZCQ0dvZ0FTQUlJQVFnQ1JEZkNnd1JDeUFISUFJb0FnQTJBbEFnQ0NBSEtBSlFOZ0lBSUFWQkNHb2dBU0FJSUFRZ0NSRGVDZ3dRQ3lBSElBSW9BZ0EyQWt3Z0NDQUhLQUpNTmdJQUlBVkJIR29nQVNBSUlBUWdDUkRkQ2d3UEN5QUhJQUlvQWdBMkFrZ2dDQ0FIS0FKSU5nSUFJQVZCRUdvZ0FTQUlJQVFnQ1JEY0Nnd09DeUFISUFJb0FnQTJBa1FnQ0NBSEtBSkVOZ0lBSUFWQkJHb2dBU0FJSUFRZ0NSRGJDZ3dOQ3lBTElBSW9BZ0EyQWdBZ0NDQUxLQUlBTmdJQUlBRWdDQ0FFSUFrUTJnb01EQXNnQnlBQ0tBSUFOZ0k4SUFnZ0J5Z0NQRFlDQUNBQUlBVkJDR29nQVNBSUlBUWdDUkRaQ2d3TEN5QUhJQUVvQWdBMkFqZ2dCeUFDS0FJQU5nSTBJQW9nQnlnQ09EWUNBQ0FJSUFjb0FqUTJBZ0FnQVNBQUlBb2dDQ0FESUFRZ0JVSFZtQU5CNEpnREVLUUJOZ0lBREFvTElBY2dBU2dDQURZQ01DQUhJQUlvQWdBMkFpd2dDaUFIS0FJd05nSUFJQWdnQnlnQ0xEWUNBQ0FCSUFBZ0NpQUlJQU1nQkNBRlFlQ1lBMEhsbUFNUXBBRTJBZ0FNQ1FzZ0J5QUNLQUlBTmdJb0lBZ2dCeWdDS0RZQ0FDQUZJQUVnQ0NBRUlBa1EyQW9NQ0FzZ0J5QUJLQUlBTmdJa0lBY2dBaWdDQURZQ0lDQUtJQWNvQWlRMkFnQWdDQ0FIS0FJZ05nSUFJQUVnQUNBS0lBZ2dBeUFFSUFWQjVaZ0RRZTJZQXhDa0FUWUNBQXdIQ3lBSElBSW9BZ0EyQWh3Z0NDQUhLQUljTmdJQUlBVkJHR29nQVNBSUlBUWdDUkRYQ2d3R0N5QUFLQUlBS0FJVUlRWWdCeUFCS0FJQU5nSVlJQWNnQWlnQ0FEWUNGQ0FLSUFjb0FoZzJBZ0FnQ0NBSEtBSVVOZ0lBSUFBZ0NpQUlJQU1nQkNBRklBWkJQM0ZCeGdKcUVRb0FEQVlMSUFCQkNHb2lCaWdDQUNnQ0dDRUpJQVlnQ1VIL0FIRkJDR29SQUFBaEJpQUhJQUVvQWdBMkFoQWdCeUFDS0FJQU5nSU1JQVlvQWdBZ0JpQUdMQUFMSWdKQkFFZ2lDUnNpQ3lBR0tBSUVJQUpCL3dGeElBa2JhaUVDSUFvZ0J5Z0NFRFlDQUNBSUlBY29BZ3cyQWdBZ0FTQUFJQW9nQ0NBRElBUWdCU0FMSUFJUXBBRTJBZ0FNQkFzZ0J5QUNLQUlBTmdJSUlBZ2dCeWdDQ0RZQ0FDQUZRUlJxSUFFZ0NDQUVJQWtRdEFRTUF3c2dCeUFDS0FJQU5nSUVJQWdnQnlnQ0JEWUNBQ0FGUVJScUlBRWdDQ0FFSUFrUTFnb01BZ3NnQnlBQ0tBSUFOZ0lBSUFnZ0J5Z0NBRFlDQUNBQklBZ2dCQ0FKRU5VS0RBRUxJQVFnQkNnQ0FFRUVjallDQUFzZ0FTZ0NBQXNoRENBSEpBWWdEQXRaQVFOL0l3WWhCaU1HUVJCcUpBWWdCa0VFYWlJSElBTVFPeUFIUVlET0F4QTZJUU1nQnhBOElBWWdBaWdDQURZQ0FDQUhJQVlvQWdBMkFnQWdCVUVVYWlBQklBY2dCQ0FERUxRRUlBRW9BZ0FoQ0NBR0pBWWdDQXRiQVFOL0l3WWhCaU1HUVJCcUpBWWdCa0VFYWlJSElBTVFPeUFIUVlET0F4QTZJUU1nQnhBOElBWWdBaWdDQURZQ0FDQUhJQVlvQWdBMkFnQWdBQ0FGUVJCcUlBRWdCeUFFSUFNUXRRUWdBU2dDQUNFSUlBWWtCaUFJQzFzQkEzOGpCaUVHSXdaQkVHb2tCaUFHUVFScUlnY2dBeEE3SUFkQmdNNERFRG9oQXlBSEVEd2dCaUFDS0FJQU5nSUFJQWNnQmlnQ0FEWUNBQ0FBSUFWQkdHb2dBU0FISUFRZ0F4QzJCQ0FCS0FJQUlRZ2dCaVFHSUFnTG9nRUJCSDhqQmlFSEl3WkJFR29rQmlBQVFRaHFJZ1lvQWdBb0FoUWhDQ0FHSUFoQi93QnhRUWhxRVFBQUlRWWdCeUFCS0FJQU5nSUVJQWNnQWlnQ0FEWUNBQ0FHS0FJQUlBWWdCaXdBQ3lJQlFRQklJZ0liSWdnZ0JpZ0NCQ0FCUWY4QmNTQUNHMm9oQVNBSFFRaHFJZ0lnQnlnQ0JEWUNBQ0FIUVF4cUlnWWdCeWdDQURZQ0FDQUFJQUlnQmlBRElBUWdCU0FJSUFFUXBBRWhDU0FISkFZZ0NRdGdBUUovSXdZaEJpTUdRUkJxSkFZZ0JpQUJLQUlBTmdJRUlBWWdBaWdDQURZQ0FDQUdRUWhxSWdFZ0JpZ0NCRFlDQUNBR1FReHFJZ0lnQmlnQ0FEWUNBQ0FBSUFFZ0FpQURJQVFnQlVIdG1BTkI5WmdERUtRQklRY2dCaVFHSUFjTDN3VUNBMzhHZkNNR0lRVWpCa0hnQm1va0JpQUJJQUlyQXhnZ0Fpc0RBQ0FES3dNQW9pQUNLd01JSUFNckF3Z2lDS0tnSUFJckF4QWdBeXNERUNJSm9xQ2dPUU1BSUFFZ0Fpc0RPQ0FDS3dNZ0lBTXJBd0FpQjZJZ0NDQUNLd01vb3FBZ0NTQUNLd013b3FDZ09RTUlJQUVnQWlzRFdDQUhJQUpCUUdzaUJDc0RBS0lnQWlzRFNDQURLd01JSWdpaW9DQUpJQUlyQTFDaW9LQTVBeEFnQlVIQUJHb2lBU0FISUFJckF3QWlDcUk1QXdBZ0FTQUlJQXFpT1FNSUlBRWdDaUFES3dNUUlnbWlPUU1RSUFFZ0J5QUNLd01JSWd1aU9RTVlJQUVnQ0NBTG9qa0RJQ0FCSUFrZ0M2STVBeWdnQVNBSElBSXJBeEFpREtJNUF6QWdBU0FJSUF5aU9RTTRJQUZCUUdzZ0NTQU1vamtEQUNBQklBbzVBMGdnQVNBTE9RTlFJQUVnRERrRFdDQUJJQWNnQWlzRElDSUtvamtEWUNBQklBZ2dDcUk1QTJnZ0FTQUpJQXFpT1FOd0lBRWdCeUFDS3dNb0lndWlPUU40SUFFZ0NDQUxvamtEZ0FFZ0FTQUpJQXVpT1FPSUFTQUJJQWNnQWlzRE1DSU1vamtEa0FFZ0FTQUlJQXlpT1FPWUFTQUJJQWtnREtJNUE2QUJJQUVnQ2prRHFBRWdBU0FMT1FPd0FTQUJJQXc1QTdnQklBRWdCeUFFS3dNQUlncWlPUVBBQVNBQklBZ2dDcUk1QThnQklBRWdDU0FLb2prRDBBRWdBU0FISUFJckEwZ2lDNkk1QTlnQklBRWdDQ0FMb2prRDRBRWdBU0FKSUF1aU9RUG9BU0FCSUFjZ0Fpc0RVQ0lIb2prRDhBRWdBU0FJSUFlaU9RUDRBU0FCSUFrZ0I2STVBNEFDSUFFZ0Nqa0RpQUlnQVNBTE9RT1FBaUFCSUFjNUE1Z0NJQVVRNEFwQkFDRUNBMEFnQWtFRFJ3UkFRUUFoQXdOQUlBTkJCa2NFUUNBQ1FUQnNJQUJxSUFOQkEzUnFJZ1pFQUFBQUFBQUFBQUE1QXdCQkFDRUVSQUFBQUFBQUFBQUFJUWNEUUNBRVFReEhCRUFnQmlBSElBSkI0QUJzSUFGcUlBUkJBM1JxS3dNQUlBUkJNR3dnQldvZ0EwRURkR29yQXdDaW9DSUhPUU1BSUFSQkFXb2hCQXdCQ3dzZ0EwRUJhaUVEREFFTEN5QUNRUUZxSVFJTUFRc0xJQVVrQmd2Y0FRRUhmeU1HSVFBakJrSFFBV29rQmlBQVFjQUJhaUlGUWRXVUF5Z0FBRFlBQUNBRlFkbVVBeTRBQURzQUJCQmNJUWNnQUVHNEFXb2lCaUFFTmdJQUlBQkJvQUZxSWdSQkZDQUhJQVVnQmhCM0lna2dCR29oQlNBRUlBVWdBaENKQVNFSElBWWdBaEE3SUFaQm9NNERFRG9oQ0NBR0VEd2dDQ2dDQUNnQ01DRUtJQWdnQkNBRklBQWdDa0VQY1VHS0Ftb1JDUUFhSUFBZ0FTZ0NBRFlDdkFFZ0JpQUFLQUs4QVRZQ0FDQUdJQUFnQ1VFQ2RDQUFhaUlCSUFjZ0JHdEJBblFnQUdvZ0JTQUhSaHNnQVNBQ0lBTVFwUUVoQ3lBQUpBWWdDd3UxQXdFUGZ5TUdJUVVqQmtIZ0Ftb2tCaUFGUWFnQ2FpRU5JQVZCbUFKcUlRQWdCVUdRQW1vaUJrSWxOd01BSUFaQkFXcEIyNVFESUFJb0FnUVFsQUloRGlBRlFkUUNhaUlISUFWQjhBRnFJZ28yQWdBUVhDRVBJQVZCd0FKcUlSQWdCVUd3QW1vaEN5QU9CSDhnQUNBQ0tBSUlOZ0lBSUFBZ0JEa0RDQ0FLUVI0Z0R5QUdJQUFRZHdVZ0RTQUVPUU1BSUFwQkhpQVBJQVlnRFJCM0N5SUFRUjFLQkVBUVhDRUFJQTRFZnlBTElBSW9BZ2cyQWdBZ0N5QUVPUU1JSUFjZ0FDQUdJQXNRbXdFRklCQWdCRGtEQUNBSElBQWdCaUFRRUpzQkN5RUFJQWNvQWdBaUJnUkFJQUFoQ0NBR0loRWhDUVVRQUFzRklBQWhDQ0FIS0FJQUlRa0xJQVVoQUNBSklBZ2dDV29pQmlBQ0VJa0JJUWNnQ1NBS1JnUkFJQUFoREVFQklSSUZJQWhCQTNRUVJDSUFCRUFnQUNJTUlSTUZFQUFMQ3lBRlFkZ0NhaUlBSUFJUU95QUpJQWNnQmlBTUlBVkIwQUpxSUFWQnpBSnFJQUFRdUFRZ0FCQThJQVVnQVNnQ0FEWUN5QUlnQlNnQzBBSWhDQ0FGS0FMTUFpRUdJQUFnQlNnQ3lBSTJBZ0FnQVNBQUlBd2dDQ0FHSUFJZ0F4Q2xBU0lBTmdJQUlCSkZCRUFnRXhBNEN5QVJFRGdnQlNRR0lBQUx0UU1CRDM4akJpRUZJd1pCNEFKcUpBWWdCVUdvQW1vaERTQUZRWmdDYWlFQUlBVkJrQUpxSWdaQ0pUY0RBQ0FHUVFGcVFhZlZBeUFDS0FJRUVKUUNJUTRnQlVIVUFtb2lCeUFGUWZBQmFpSUtOZ0lBRUZ3aER5QUZRY0FDYWlFUUlBVkJzQUpxSVFzZ0RnUi9JQUFnQWlnQ0NEWUNBQ0FBSUFRNUF3Z2dDa0VlSUE4Z0JpQUFFSGNGSUEwZ0JEa0RBQ0FLUVI0Z0R5QUdJQTBRZHdzaUFFRWRTZ1JBRUZ3aEFDQU9CSDhnQ3lBQ0tBSUlOZ0lBSUFzZ0JEa0RDQ0FISUFBZ0JpQUxFSnNCQlNBUUlBUTVBd0FnQnlBQUlBWWdFQkNiQVFzaEFDQUhLQUlBSWdZRVFDQUFJUWdnQmlJUklRa0ZFQUFMQlNBQUlRZ2dCeWdDQUNFSkN5QUZJUUFnQ1NBSUlBbHFJZ1lnQWhDSkFTRUhJQWtnQ2tZRVFDQUFJUXhCQVNFU0JTQUlRUU4wRUVRaUFBUkFJQUFpRENFVEJSQUFDd3NnQlVIWUFtb2lBQ0FDRURzZ0NTQUhJQVlnRENBRlFkQUNhaUFGUWN3Q2FpQUFFTGdFSUFBUVBDQUZJQUVvQWdBMkFzZ0NJQVVvQXRBQ0lRZ2dCU2dDekFJaEJpQUFJQVVvQXNnQ05nSUFJQUVnQUNBTUlBZ2dCaUFDSUFNUXBRRWlBRFlDQUNBU1JRUkFJQk1RT0FzZ0VSQTRJQVVrQmlBQUMvWUJBUWgvSXdZaEFDTUdRU0JxSkFZZ0FFSWxOd01BSUFCQkFXcEIzWlFEUVFBZ0FpZ0NCQkN2QVNBQ0tBSUVRUWwyUVFGeFFSWnlJZ2hCQVdvaEJ3Si9FQXNoRENNR0lRVWpCaUFIUVE5cVFYQnhhaVFHRUZ3aENTQUFRUWhxSWdZZ0JEY0RBQ0FGSUFVZ0J5QUpJQUFnQmhCM0lBVnFJZ2tnQWhDSkFTRUxJd1loQnlNR0lBaEJBM1JCQzJwQmNIRnFKQVlnQmlBQ0VEc2dCU0FMSUFrZ0J5QUFRUmhxSWdVZ0FFRVFhaUlJSUFZUWtnSWdCaEE4SUFBZ0FTZ0NBRFlDRkNBRktBSUFJUUVnQ0NnQ0FDRUZJQVlnQUNnQ0ZEWUNBQ0FHSUFjZ0FTQUZJQUlnQXhDbEFTRUJJQXdMRUF3Z0FDUUdJQUVMaWdJQkIzOGpCaUVBSXdaQklHb2tCaUFBUVJCcUlnWkI0SlFES0FBQU5nQUFJQVpCNUpRRExnQUFPd0FFSUFaQkFXcEI1cFFEUVFBZ0FpZ0NCQkN2QVNBQ0tBSUVRUWwyUVFGeElnaEJESEloQndKL0VBc2hDeU1HSVFVakJpQUhRUTlxUVhCeGFpUUdFRndoQ2lBQUlBUTJBZ0FnQlNBRklBY2dDaUFHSUFBUWR5QUZhaUlHSUFJUWlRRWhCeU1HSVFRakJpQUlRUUYwUVJWeVFRSjBRUTlxUVhCeGFpUUdJQUFnQWhBN0lBVWdCeUFHSUFRZ0FFRU1haUlGSUFCQkJHb2lCaUFBRUpJQ0lBQVFQQ0FBSUFFb0FnQTJBZ2dnQlNnQ0FDRUJJQVlvQWdBaEJTQUFJQUFvQWdnMkFnQWdBQ0FFSUFFZ0JTQUNJQU1RcFFFaEFTQUxDeEFNSUFBa0JpQUJDL2tCQVFoL0l3WWhBQ01HUVNCcUpBWWdBRUlsTndNQUlBQkJBV3BCM1pRRFFRRWdBaWdDQkJDdkFTQUNLQUlFUVFsMlFRRnhJZ2hCRjJvaEJ3Si9FQXNoRENNR0lRVWpCaUFIUVE5cVFYQnhhaVFHRUZ3aENTQUFRUWhxSWdZZ0JEY0RBQ0FGSUFVZ0J5QUpJQUFnQmhCM0lBVnFJZ2tnQWhDSkFTRUxJd1loQnlNR0lBaEJBWFJCTEhKQkFuUkJDMnBCY0hGcUpBWWdCaUFDRURzZ0JTQUxJQWtnQnlBQVFSaHFJZ1VnQUVFUWFpSUlJQVlRa2dJZ0JoQThJQUFnQVNnQ0FEWUNGQ0FGS0FJQUlRRWdDQ2dDQUNFRklBWWdBQ2dDRkRZQ0FDQUdJQWNnQVNBRklBSWdBeENsQVNFQklBd0xFQXdnQUNRR0lBRUxpZ0lCQjM4akJpRUFJd1pCSUdva0JpQUFRUkJxSWdaQjRKUURLQUFBTmdBQUlBWkI1SlFETGdBQU93QUVJQVpCQVdwQjVwUURRUUVnQWlnQ0JCQ3ZBU0FDS0FJRVFRbDJRUUZ4SWdoQkRXb2hCd0ovRUFzaEN5TUdJUVVqQmlBSFFROXFRWEJ4YWlRR0VGd2hDaUFBSUFRMkFnQWdCU0FGSUFjZ0NpQUdJQUFRZHlBRmFpSUdJQUlRaVFFaEJ5TUdJUVFqQmlBSVFRRjBRUmh5UVFKMFFRdHFRWEJ4YWlRR0lBQWdBaEE3SUFVZ0J5QUdJQVFnQUVFTWFpSUZJQUJCQkdvaUJpQUFFSklDSUFBUVBDQUFJQUVvQWdBMkFnZ2dCU2dDQUNFQklBWW9BZ0FoQlNBQUlBQW9BZ2cyQWdBZ0FDQUVJQUVnQlNBQ0lBTVFwUUVoQVNBTEN4QU1JQUFrQmlBQkM5Z0NBUU4vSXdZaEJpTUdRUkJxSkFZZ0JrRUVhaUVGSUFJb0FnUkJBWEVFUUNBRklBSVFPeUFGUWFqT0F4QTZJUUFnQlJBOElBQW9BZ0FoQWlBRklBQWdCQVIvSUFJb0FoZ0ZJQUlvQWh3TFFUOXhRYklGYWhFREFDQUZLQUlBSWdJZ0JTQUZMQUFMSWdCQkFFZ2JJUU1EUUNBRktBSUVJQUJCL3dGeElBQkJHSFJCR0hWQkFFZ2lBQnRCQW5RZ0FpQUZJQUFiYWlBRFJ3UkFJQU1vQWdBaEFpQUJLQUlBSWdBRVFDQUFLQUlZSWdRZ0FDZ0NIRVlFZnlBQUlBSWdBQ2dDQUNnQ05FRS9jVUdLQVdvUkFnQUZJQUFnQkVFRWFqWUNHQ0FFSUFJMkFnQWdBZ3RCZnhCQkJFQWdBVUVBTmdJQUN3c2dBMEVFYWlFRElBVXNBQXNoQUNBRktBSUFJUUlNQVFzTElBRW9BZ0FoQUNBRkVFY0ZJQUFvQWdBb0FoZ2hCeUFHSUFFb0FnQTJBZ0FnQlNBR0tBSUFOZ0lBSUFBZ0JTQUNJQU1nQkVFQmNTQUhRUjl4UWFJQ2FoRUlBQ0VBQ3lBR0pBWWdBQXZUQVFFSGZ5TUdJUUFqQmtIZ0FHb2tCaUFBUWRBQWFpSUZRZFdVQXlnQUFEWUFBQ0FGUWRtVUF5NEFBRHNBQkJCY0lRY2dBRUhJQUdvaUJpQUVOZ0lBSUFCQk1Hb2lCRUVVSUFjZ0JTQUdFSGNpQ1NBRWFpRUZJQVFnQlNBQ0VJa0JJUWNnQmlBQ0VEc2dCa0dBemdNUU9pRUlJQVlRUENBSUtBSUFLQUlnSVFvZ0NDQUVJQVVnQUNBS1FROXhRWW9DYWhFSkFCb2dBQ0FCS0FJQU5nSk1JQVlnQUNnQ1REWUNBQ0FHSUFBZ0FDQUphaUlCSUFjZ0JHc2dBR29nQlNBSFJoc2dBU0FDSUFNUWx3RWhDeUFBSkFZZ0N3ditFd0lRZndGOEl3WWhFeU1HUVJCcUpBWWdFeUVQSUFRb0FnQWlCaUVISUFFZ0FrRi9haUlRYkVFQmRDQUdhaUVGQTBBZ0NTQUJTQVJBSUFWQkFEc0JBQ0FIUVFBN0FRQWdCMEVDYWlFSElBbEJBV29oQ1NBRlFRSnFJUVVNQVFzTElBWWhCMEVBSVFrZ0FVRi9haUlSUVFGMElBWnFJUVVEUUNBSklBSklCRUFnQlVFQU93RUFJQWRCQURzQkFDQUJRUUYwSUFkcUlRY2dDVUVCYWlFSklBRkJBWFFnQldvaEJRd0JDd3NnQkVHUWdNZ0FhaUVIUVFBZ0FXc2hFaUFBSUFGQkFXb2lBR29oRFNBQUlBTnFJUTVCQVNFTVFRQWhBeUFBSUFRb0FnUnFJUWtnQUVFQmRDQUdhaUVHQW44Q1FBTkFBa0FnRENBUVRnMENJQU1oQUVFQklRb0RRQ0FLSUJGSUJFQWdEUzBBQUNBT0xRQUFTZ1JBSUFaQkFEc0JBQ0FKUVFBNkFBQUZBa0FnQ1VGL09nQUFJQkpCQVhRZ0Jtb2lBeTRCQUNJRlFRQktCRUFnQmlBRk93RUFJQVZCQjJ3aUEwRUNkQ0FFYWtIMC84OEFhaUlGSUFVb0FnQkJBV28yQWdBZ0EwRUNkQ0FFYWtINC84OEFhaUlGSUFvZ0JTZ0NBR28yQWdBZ0EwRUNkQ0FFYWtIOC84OEFhaUlGSUF3Z0JTZ0NBR28yQWdBZ0EwRUNkQ0FFYWtHTWdOQUFhaUFNTmdJQURBRUxJQU5CZm1vdUFRQWlCU0VJSUFWQkFFb2hDeUFETGdFQ0lnTkJBRXdFUUNBTEJFQWdCaUFGT3dFQUlBaEJCMndpQTBFQ2RDQUVha0gwLzg4QWFpSUZJQVVvQWdCQkFXbzJBZ0FnQTBFQ2RDQUVha0g0Lzg4QWFpSUZJQW9nQlNnQ0FHbzJBZ0FnQTBFQ2RDQUVha0g4Lzg4QWFpSUZJQXdnQlNnQ0FHbzJBZ0FnQTBFQ2RDQUVha0dFZ05BQWFpSUZLQUlBSUFwSUJFQWdCU0FLTmdJQUN5QURRUUowSUFScVFZeUEwQUJxSUF3MkFnQU1BZ3NnQmtGK2FpNEJBQ0lEUVFCS0JFQWdCaUFET3dFQUlBTkJCMndpQTBFQ2RDQUVha0gwLzg4QWFpSUZJQVVvQWdCQkFXbzJBZ0FnQTBFQ2RDQUVha0g0Lzg4QWFpSUZJQW9nQlNnQ0FHbzJBZ0FnQTBFQ2RDQUVha0g4Lzg4QWFpSUZJQXdnQlNnQ0FHbzJBZ0FnQTBFQ2RDQUVha0dFZ05BQWFpSURLQUlBSUFwT0RRSWdBeUFLTmdJQUJTQUFRZi8vQVVvTkJpQUdJQUJCQVdvaUF6c0JBQ0FFUVpDQXlBQnFJQUJCQW5ScUlBTkJFSFJCRUhVMkFnQWdCRUdRZ05BQWFpQUFRUWRzSWdCQkFuUnFRUUUyQWdBZ0FFRUNkQ0FFYWtHVWdOQUFhaUFLTmdJQUlBQkJBblFnQkdwQm1JRFFBR29nRERZQ0FDQUFRUUowSUFScVFaeUEwQUJxSUFvMkFnQWdBRUVDZENBRWFrR2dnTkFBYWlBS05nSUFJQUJCQW5RZ0JHcEJwSURRQUdvZ0REWUNBQ0FBUVFKMElBUnFRYWlBMEFCcUlBdzJBZ0FnQXlFQUN3d0JDeUFMQkVBQ1FDQURRUUowSUFScVFZeUF5QUJxS0FJQUlnTWdDRUVDZENBRWFrR01nTWdBYWlnQ0FDSUZTZ1JBSUFZZ0JUc0JBQ0FISVFoQkFDRUxBMEFnQ3lBQVRnUkFJQVVoQXd3REN5QURJQWdvQWdCR0JFQWdDQ0FGTmdJQUN5QUlRUVJxSVFnZ0MwRUJhaUVMREFBQUN3QUZJQVlnQXpzQkFDQURJQVZJQkVBZ0J5RUlRUUFoQ3dOQUlBc2dBRTROQXlBRklBZ29BZ0JHQkVBZ0NDQUROZ0lBQ3lBSVFRUnFJUWdnQzBFQmFpRUxEQUFBQ3dBTEN3c2dBMEVRZEVFUWRVRUhiQ0lEUVFKMElBUnFRZlQvendCcUlnVWdCU2dDQUVFQmFqWUNBQ0FEUVFKMElBUnFRZmovendCcUlnVWdDaUFGS0FJQWFqWUNBQ0FEUVFKMElBUnFRZnovendCcUlnVWdEQ0FGS0FJQWFqWUNBQ0FEUVFKMElBUnFRWXlBMEFCcUlBdzJBZ0FNQVFzZ0JrRithaTRCQUNJRlFRQk1CRUFnQmlBRE93RUFJQU5CQjJ3aUEwRUNkQ0FFYWtIMC84OEFhaUlGSUFVb0FnQkJBV28yQWdBZ0EwRUNkQ0FFYWtINC84OEFhaUlGSUFvZ0JTZ0NBR28yQWdBZ0EwRUNkQ0FFYWtIOC84OEFhaUlGSUF3Z0JTZ0NBR28yQWdBZ0EwRUNkQ0FFYWtHQWdOQUFhaUlGS0FJQUlBcEtCRUFnQlNBS05nSUFDeUFEUVFKMElBUnFRWXlBMEFCcUlBdzJBZ0FNQVFzQ1FDQURRUUowSUFScVFZeUF5QUJxS0FJQUlnTWdCVUVDZENBRWFrR01nTWdBYWlnQ0FDSUZTZ1JBSUFZZ0JUc0JBQ0FISVFoQkFDRUxBMEFnQ3lBQVRnUkFJQVVoQXd3REN5QURJQWdvQWdCR0JFQWdDQ0FGTmdJQUN5QUlRUVJxSVFnZ0MwRUJhaUVMREFBQUN3QUZJQVlnQXpzQkFDQURJQVZJQkVBZ0J5RUlRUUFoQ3dOQUlBc2dBRTROQXlBRklBZ29BZ0JHQkVBZ0NDQUROZ0lBQ3lBSVFRUnFJUWdnQzBFQmFpRUxEQUFBQ3dBTEN3c2dBMEVRZEVFUWRVRUhiQ0lEUVFKMElBUnFRZlQvendCcUlnVWdCU2dDQUVFQmFqWUNBQ0FEUVFKMElBUnFRZmovendCcUlnVWdDaUFGS0FJQWFqWUNBQ0FEUVFKMElBUnFRZnovendCcUlnTWdEQ0FES0FJQWFqWUNBQXNMSUExQkFXb2hEU0FPUVFGcUlRNGdDVUVCYWlFSklBcEJBV29oQ2lBR1FRSnFJUVlNQVFzTElBMUJBbW9oRFNBT1FRSnFJUTRnREVFQmFpRU1JQUFoQXlBSlFRSnFJUWtnQmtFRWFpRUdEQUVMQzBFQVFRTkJxS1VCSUE4UVBVRi9EQUVMSUFSQkRHb2hCVUVCSVFCQkFTRUpJQWNoQmdOQUlBa2dBMHdFUUNBSklBWW9BZ0FpRFVZRVFDQUFRUUZxSVFjRklBQWhCeUFOUVFKMElBUnFRWXlBeUFCcUtBSUFJUUFMSUFZZ0FEWUNBQ0FISVFBZ0NVRUJhaUVKSUFaQkJHb2hCZ3dCQ3dzZ0JDQUFRWDlxSWdBMkFnZ2dBQVIvSUFWQkFDQUFRUUowRUVVYUlBUkJrSUFvYWtFQUlBQkJCSFFRUlJwQkFDRUhBMEFnQnlBQVNBUkFJQVJCaklBSWFpQUhRUUowSWdaQkFuUnFJQUUyQWdBZ0JFR01nQWhxSUFaQkFYSkJBblJxUVFBMkFnQWdCRUdNZ0FocUlBWkJBbkpCQW5ScUlBSTJBZ0FnQkVHTWdBaHFJQVpCQTNKQkFuUnFRUUEyQWdBZ0IwRUJhaUVIREFFTEMwRUFJUUVEUUNBQklBTklCRUFnQkVFTWFpQUVRWkNBeUFCcUlBRkJBblJxS0FJQVFYOXFJZ0pCQW5ScUlnY2dCRUdRZ05BQWFpQUJRUWRzSWdCQkFuUnFLQUlBSUFjb0FnQnFOZ0lBSUFSQmtJQW9haUFDUVFGMElnZEJBM1JxSWdZZ0Jpc0RBQ0FBUVFKMElBUnFRWlNBMEFCcUtBSUF0NkE1QXdBZ0JFR1FnQ2hxSUFkQkFYSkJBM1JxSWdjZ0J5c0RBQ0FBUVFKMElBUnFRWmlBMEFCcUtBSUF0NkE1QXdBZ0JFR01nQWhxSUFKQkFuUWlBa0VDZEdvaUJ5Z0NBQ0FBUVFKMElBUnFRWnlBMEFCcUtBSUFJZ1pLQkVBZ0J5QUdOZ0lBQ3lBRVFZeUFDR29nQWtFQmNrRUNkR29pQnlnQ0FDQUFRUUowSUFScVFhQ0EwQUJxS0FJQUlnWklCRUFnQnlBR05nSUFDeUFFUVl5QUNHb2dBa0VDY2tFQ2RHb2lCeWdDQUNBQVFRSjBJQVJxUWFTQTBBQnFLQUlBSWdaS0JFQWdCeUFHTmdJQUN5QUVRWXlBQ0dvZ0FrRURja0VDZEdvaUFpZ0NBQ0FBUVFKMElBUnFRYWlBMEFCcUtBSUFJZ0JJQkVBZ0FpQUFOZ0lBQ3lBQlFRRnFJUUVNQVFzTElBUW9BZ2doQVVFQUlRQURmeUFBSUFGSUJIOGdCRUdRZ0NocUlBQkJBWFFpQWtFRGRHb2lBeUFES3dNQUlBUkJER29nQUVFQ2RHb29BZ0MzSWhXak9RTUFJQVJCa0lBb2FpQUNRUUZ5UVFOMGFpSUNJQUlyQXdBZ0ZhTTVBd0FnQUVFQmFpRUFEQUVGUVFBTEN3VkJBQXNMSVJRZ0R5UUdJQlFMcFFNQkQzOGpCaUVGSXdaQnNBRnFKQVlnQlVINEFHb2hEU0FGUWVnQWFpRUFJQVZCNEFCcUlnWkNKVGNEQUNBR1FRRnFRZHVVQXlBQ0tBSUVFSlFDSVE0Z0JVR2tBV29pQnlBRlFVQnJJZ28yQWdBUVhDRVBJQVZCa0FGcUlSQWdCVUdBQVdvaEN5QU9CSDhnQUNBQ0tBSUlOZ0lBSUFBZ0JEa0RDQ0FLUVI0Z0R5QUdJQUFRZHdVZ0RTQUVPUU1BSUFwQkhpQVBJQVlnRFJCM0N5SUFRUjFLQkVBUVhDRUFJQTRFZnlBTElBSW9BZ2cyQWdBZ0N5QUVPUU1JSUFjZ0FDQUdJQXNRbXdFRklCQWdCRGtEQUNBSElBQWdCaUFRRUpzQkN5RUFJQWNvQWdBaUJnUkFJQUFoQ0NBR0loRWhDUVVRQUFzRklBQWhDQ0FIS0FJQUlRa0xJQVVoQUNBSklBZ2dDV29pQmlBQ0VJa0JJUWNnQ1NBS1JnUkFJQUFoREFVZ0NFRUJkQkJFSWdBRVFDQUFJZ3doRWdVUUFBc0xJQVZCcUFGcUlnQWdBaEE3SUFrZ0J5QUdJQXdnQlVHZ0FXb2dCVUdjQVdvZ0FCQzZCQ0FBRUR3Z0JTQUJLQUlBTmdLWUFTQUZLQUtnQVNFQklBVW9BcHdCSVFnZ0FDQUZLQUtZQVRZQ0FDQUFJQXdnQVNBSUlBSWdBeENYQVNFVElCSVFPQ0FSRURnZ0JTUUdJQk1McFFNQkQzOGpCaUVGSXdaQnNBRnFKQVlnQlVINEFHb2hEU0FGUWVnQWFpRUFJQVZCNEFCcUlnWkNKVGNEQUNBR1FRRnFRYWZWQXlBQ0tBSUVFSlFDSVE0Z0JVR2tBV29pQnlBRlFVQnJJZ28yQWdBUVhDRVBJQVZCa0FGcUlSQWdCVUdBQVdvaEN5QU9CSDhnQUNBQ0tBSUlOZ0lBSUFBZ0JEa0RDQ0FLUVI0Z0R5QUdJQUFRZHdVZ0RTQUVPUU1BSUFwQkhpQVBJQVlnRFJCM0N5SUFRUjFLQkVBUVhDRUFJQTRFZnlBTElBSW9BZ2cyQWdBZ0N5QUVPUU1JSUFjZ0FDQUdJQXNRbXdFRklCQWdCRGtEQUNBSElBQWdCaUFRRUpzQkN5RUFJQWNvQWdBaUJnUkFJQUFoQ0NBR0loRWhDUVVRQUFzRklBQWhDQ0FIS0FJQUlRa0xJQVVoQUNBSklBZ2dDV29pQmlBQ0VJa0JJUWNnQ1NBS1JnUkFJQUFoREFVZ0NFRUJkQkJFSWdBRVFDQUFJZ3doRWdVUUFBc0xJQVZCcUFGcUlnQWdBaEE3SUFrZ0J5QUdJQXdnQlVHZ0FXb2dCVUdjQVdvZ0FCQzZCQ0FBRUR3Z0JTQUJLQUlBTmdLWUFTQUZLQUtnQVNFQklBVW9BcHdCSVFnZ0FDQUZLQUtZQVRZQ0FDQUFJQXdnQVNBSUlBSWdBeENYQVNFVElCSVFPQ0FSRURnZ0JTUUdJQk1MOWdFQkNIOGpCaUVBSXdaQklHb2tCaUFBUWlVM0F3QWdBRUVCYWtIZGxBTkJBQ0FDS0FJRUVLOEJJQUlvQWdSQkNYWkJBWEZCRm5JaUNFRUJhaUVIQW44UUN5RU1Jd1loQlNNR0lBZEJEMnBCY0hGcUpBWVFYQ0VKSUFCQkNHb2lCaUFFTndNQUlBVWdCU0FISUFrZ0FDQUdFSGNnQldvaUNTQUNFSWtCSVFzakJpRUhJd1lnQ0VFQmRFRU9ha0Z3Y1dva0JpQUdJQUlRT3lBRklBc2dDU0FISUFCQkdHb2lCU0FBUVJCcUlnZ2dCaENUQWlBR0VEd2dBQ0FCS0FJQU5nSVVJQVVvQWdBaEFTQUlLQUlBSVFVZ0JpQUFLQUlVTmdJQUlBWWdCeUFCSUFVZ0FpQURFSmNCSVFFZ0RBc1FEQ0FBSkFZZ0FRdUhBZ0VIZnlNR0lRQWpCa0VnYWlRR0lBQkJFR29pQmtIZ2xBTW9BQUEyQUFBZ0JrSGtsQU11QUFBN0FBUWdCa0VCYWtIbWxBTkJBQ0FDS0FJRUVLOEJJQUlvQWdSQkNYWkJBWEVpQ0VFTWNpRUhBbjhRQ3lFTEl3WWhCU01HSUFkQkQycEJjSEZxSkFZUVhDRUtJQUFnQkRZQ0FDQUZJQVVnQnlBS0lBWWdBQkIzSUFWcUlnWWdBaENKQVNFSEl3WWhCQ01HSUFoQkFYUkJGWEpCRDJwQmNIRnFKQVlnQUNBQ0VEc2dCU0FISUFZZ0JDQUFRUXhxSWdVZ0FFRUVhaUlHSUFBUWt3SWdBQkE4SUFBZ0FTZ0NBRFlDQ0NBRktBSUFJUUVnQmlnQ0FDRUZJQUFnQUNnQ0NEWUNBQ0FBSUFRZ0FTQUZJQUlnQXhDWEFTRUJJQXNMRUF3Z0FDUUdJQUVMOWdFQkNIOGpCaUVBSXdaQklHb2tCaUFBUWlVM0F3QWdBRUVCYWtIZGxBTkJBU0FDS0FJRUVLOEJJQUlvQWdSQkNYWkJBWEVpQ0VFWGFpRUhBbjhRQ3lFTUl3WWhCU01HSUFkQkQycEJjSEZxSkFZUVhDRUpJQUJCQ0dvaUJpQUVOd01BSUFVZ0JTQUhJQWtnQUNBR0VIY2dCV29pQ1NBQ0VJa0JJUXNqQmlFSEl3WWdDRUVCZEVFc2NrRU9ha0Z3Y1dva0JpQUdJQUlRT3lBRklBc2dDU0FISUFCQkdHb2lCU0FBUVJCcUlnZ2dCaENUQWlBR0VEd2dBQ0FCS0FJQU5nSVVJQVVvQWdBaEFTQUlLQUlBSVFVZ0JpQUFLQUlVTmdJQUlBWWdCeUFCSUFVZ0FpQURFSmNCSVFFZ0RBc1FEQ0FBSkFZZ0FRdUhBZ0VIZnlNR0lRQWpCa0VnYWlRR0lBQkJFR29pQmtIZ2xBTW9BQUEyQUFBZ0JrSGtsQU11QUFBN0FBUWdCa0VCYWtIbWxBTkJBU0FDS0FJRUVLOEJJQUlvQWdSQkNYWkJBWEVpQ0VFTmFpRUhBbjhRQ3lFTEl3WWhCU01HSUFkQkQycEJjSEZxSkFZUVhDRUtJQUFnQkRZQ0FDQUZJQVVnQnlBS0lBWWdBQkIzSUFWcUlnWWdBaENKQVNFSEl3WWhCQ01HSUFoQkFYUkJHSEpCRG1wQmNIRnFKQVlnQUNBQ0VEc2dCU0FISUFZZ0JDQUFRUXhxSWdVZ0FFRUVhaUlHSUFBUWt3SWdBQkE4SUFBZ0FTZ0NBRFlDQ0NBRktBSUFJUUVnQmlnQ0FDRUZJQUFnQUNnQ0NEWUNBQ0FBSUFRZ0FTQUZJQUlnQXhDWEFTRUJJQXNMRUF3Z0FDUUdJQUVMM1FJQkEzOGpCaUVHSXdaQkVHb2tCaUFHUVFScUlRVWdBaWdDQkVFQmNRUkFJQVVnQWhBN0lBVkJrTTRERURvaEFDQUZFRHdnQUNnQ0FDRUNJQVVnQUNBRUJIOGdBaWdDR0FVZ0FpZ0NIQXRCUDNGQnNnVnFFUU1BSUFVb0FnQWlBaUFGSUFVc0FBc2lBRUVBU0JzaEF3TkFJQUlnQlNBQVFSaDBRUmgxUVFCSUlnSWJJQVVvQWdRZ0FFSC9BWEVnQWh0cUlBTkhCRUFnQXl3QUFDRUNJQUVvQWdBaUFBUkFJQUFvQWhnaUJDQUFLQUljUmdSL0lBQW9BZ0FvQWpRaEJDQUFJQUlRUWlBRVFUOXhRWW9CYWhFQ0FBVWdBQ0FFUVFGcU5nSVlJQVFnQWpvQUFDQUNFRUlMUVg4UVFRUkFJQUZCQURZQ0FBc0xJQU5CQVdvaEF5QUZMQUFMSVFBZ0JTZ0NBQ0VDREFFTEN5QUJLQUlBSVFBZ0JSQkhCU0FBS0FJQUtBSVlJUWNnQmlBQktBSUFOZ0lBSUFVZ0JpZ0NBRFlDQUNBQUlBVWdBaUFESUFSQkFYRWdCMEVmY1VHaUFtb1JDQUFoQUFzZ0JpUUdJQUFMa2djQkRuOGpCaUVJSXdaQnNBSnFKQVlnQWhDY0FTRVBJQUlnQ0VHZ0FXb1E3QUVoRUNBSVFhQUNhaUlLSUFJZ0NFR3NBbW9RNndFZ0NFR1VBbW9pQlVJQU53SUFJQVZCQURZQ0NBTkFJQWxCQTBjRVFDQUpRUUowSUFWcVFRQTJBZ0FnQ1VFQmFpRUpEQUVMQ3lBRklBVXNBQXRCQUVnRWZ5QUZLQUlJUWYvLy8vOEhjVUYvYWdWQkNnc1FTaUFJUVpBQ2FpSUxJQVVvQWdBZ0JTQUZMQUFMUVFCSUd5SUpOZ0lBSUFoQmpBSnFJZ3dnQ0RZQ0FDQUlRWWdDYWlJTlFRQTJBZ0FnQUNnQ0FDSUNJUTREUUFKQUlBSUVmeUFDS0FJTUlnWWdBaWdDRUVZRWZ5QUNJQUlvQWdBb0FpUkIvd0J4UVFocUVRQUFCU0FHS0FJQUMwRi9FRUVFZnlBQVFRQTJBZ0JCQUNFT1FRQWhBa0VCQlVFQUN3VkJBQ0VPUVFBaEFrRUJDeUVIQWtBQ1FDQUJLQUlBSWdaRkRRQWdCaWdDRENJUklBWW9BaEJHQkg4Z0JpQUdLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdFU2dDQUF0QmZ4QkJCRUFnQVVFQU5nSUFEQUVGSUFkRkRRTUxEQUVMSUFjRWYwRUFJUVlNQWdWQkFBc2hCZ3NnQ3lnQ0FDQUpJQVVvQWdRZ0JTd0FDeUlIUWY4QmNTQUhRUUJJR3lJSGFrWUVRQ0FGSUFkQkFYUVFTaUFGSUFVc0FBdEJBRWdFZnlBRktBSUlRZi8vLy84SGNVRi9hZ1ZCQ2dzUVNpQUxJQWNnQlNnQ0FDQUZJQVVzQUF0QkFFZ2JJZ2xxTmdJQUN5QUNLQUlNSWdjZ0FpZ0NFRVlFZnlBQ0lBSW9BZ0FvQWlSQi93QnhRUWhxRVFBQUJTQUhLQUlBQ3lBUElBa2dDeUFOSUFnb0Fxd0NJQW9nQ0NBTUlCQVF6Z0VOQUNBQ0tBSU1JZ1lnQWlnQ0VFWUVRQ0FDSUFJb0FnQW9BaWhCL3dCeFFRaHFFUUFBR2dVZ0FpQUdRUVJxTmdJTUlBWW9BZ0FhQ3d3QkN3c2dDaWdDQkNBS0xBQUxJZ2RCL3dGeElBZEJBRWdiQkVBZ0RDZ0NBQ0lISUFoclFhQUJTQVJBSUEwb0FnQWhEU0FNSUFkQkJHbzJBZ0FnQnlBTk5nSUFDd3NnQkNBSklBc29BZ0FnQXlBUEVMMEVOZ0lBSUFvZ0NDQU1LQUlBSUFNUWVDQUNCSDhnQWlnQ0RDSUVJQUlvQWhCR0JIOGdBaUFPS0FJQUtBSWtRZjhBY1VFSWFoRUFBQVVnQkNnQ0FBdEJmeEJCQkg4Z0FFRUFOZ0lBUVFFRlFRQUxCVUVCQ3lFQ0FrQUNRQUpBSUFaRkRRQWdCaWdDRENJRUlBWW9BaEJHQkg4Z0JpQUdLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdCQ2dDQUF0QmZ4QkJCRUFnQVVFQU5nSUFEQUVGSUFKRkRRSUxEQUlMSUFJTkFBd0JDeUFESUFNb0FnQkJBbkkyQWdBTElBQW9BZ0FoRWlBRkVFY2dDaEJISUFna0JpQVNDNUlIQVE1L0l3WWhDQ01HUWJBQ2FpUUdJQUlRbkFFaER5QUNJQWhCb0FGcUVPd0JJUkFnQ0VHZ0Ftb2lDaUFDSUFoQnJBSnFFT3NCSUFoQmxBSnFJZ1ZDQURjQ0FDQUZRUUEyQWdnRFFDQUpRUU5IQkVBZ0NVRUNkQ0FGYWtFQU5nSUFJQWxCQVdvaENRd0JDd3NnQlNBRkxBQUxRUUJJQkg4Z0JTZ0NDRUgvLy8vL0IzRkJmMm9GUVFvTEVFb2dDRUdRQW1vaUN5QUZLQUlBSUFVZ0JTd0FDMEVBU0JzaUNUWUNBQ0FJUVl3Q2FpSU1JQWcyQWdBZ0NFR0lBbW9pRFVFQU5nSUFJQUFvQWdBaUFpRU9BMEFDUUNBQ0JIOGdBaWdDRENJR0lBSW9BaEJHQkg4Z0FpQUNLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdCaWdDQUF0QmZ4QkJCSDhnQUVFQU5nSUFRUUFoRGtFQUlRSkJBUVZCQUFzRlFRQWhEa0VBSVFKQkFRc2hCd0pBQWtBZ0FTZ0NBQ0lHUlEwQUlBWW9BZ3dpRVNBR0tBSVFSZ1IvSUFZZ0JpZ0NBQ2dDSkVIL0FIRkJDR29SQUFBRklCRW9BZ0FMUVg4UVFRUkFJQUZCQURZQ0FBd0JCU0FIUlEwREN3d0JDeUFIQkg5QkFDRUdEQUlGUVFBTElRWUxJQXNvQWdBZ0NTQUZLQUlFSUFVc0FBc2lCMEgvQVhFZ0IwRUFTQnNpQjJwR0JFQWdCU0FIUVFGMEVFb2dCU0FGTEFBTFFRQklCSDhnQlNnQ0NFSC8vLy8vQjNGQmYyb0ZRUW9MRUVvZ0N5QUhJQVVvQWdBZ0JTQUZMQUFMUVFCSUd5SUphallDQUFzZ0FpZ0NEQ0lISUFJb0FoQkdCSDhnQWlBQ0tBSUFLQUlrUWY4QWNVRUlhaEVBQUFVZ0J5Z0NBQXNnRHlBSklBc2dEU0FJS0FLc0FpQUtJQWdnRENBUUVNNEJEUUFnQWlnQ0RDSUdJQUlvQWhCR0JFQWdBaUFDS0FJQUtBSW9RZjhBY1VFSWFoRUFBQm9GSUFJZ0JrRUVhallDRENBR0tBSUFHZ3NNQVFzTElBb29BZ1FnQ2l3QUN5SUhRZjhCY1NBSFFRQklHd1JBSUF3b0FnQWlCeUFJYTBHZ0FVZ0VRQ0FOS0FJQUlRMGdEQ0FIUVFScU5nSUFJQWNnRFRZQ0FBc0xJQVFnQ1NBTEtBSUFJQU1nRHhDK0JEY0RBQ0FLSUFnZ0RDZ0NBQ0FERUhnZ0FnUi9JQUlvQWd3aUJDQUNLQUlRUmdSL0lBSWdEaWdDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQVFvQWdBTFFYOFFRUVIvSUFCQkFEWUNBRUVCQlVFQUN3VkJBUXNoQWdKQUFrQUNRQ0FHUlEwQUlBWW9BZ3dpQkNBR0tBSVFSZ1IvSUFZZ0JpZ0NBQ2dDSkVIL0FIRkJDR29SQUFBRklBUW9BZ0FMUVg4UVFRUkFJQUZCQURZQ0FBd0JCU0FDUlEwQ0N3d0NDeUFDRFFBTUFRc2dBeUFES0FJQVFRSnlOZ0lBQ3lBQUtBSUFJUklnQlJCSElBb1FSeUFJSkFZZ0VndStDQUlRZndSOEl3WWhDU01HUVJCcUpBWWdDVUVJYWlFSUlBQW9BZ2dpQXlBQUtBSUVSZ1JBSUFFb0FnUWdBMFlFUUNBQ0tBSUVRUUZxSUFOR0JFQUNRQ0FEUVg1cUlRd0RRQ0FISUF4SUJFQWdBU2dDQUNBSFFRTjBhaUFBS0FJQUlBTWdCMnhCQTNScUlnc2dCMEVEZEdvckF3QTVBd0FnQ0NBRElBZHJRWDlxSWc0MkFnUWdDQ0FIUVFGcUlnWkJBM1FnQzJvaUR6WUNBQ0FJRUpZTElSTWdBaWdDQUNBSFFRTjBhaUFUT1FNQUlCTkVBQUFBQUFBQUFBQmlCRUFDUUNBR0lRVURRQ0FGSUFOSUJFQWdCaUVFUkFBQUFBQUFBQUFBSVJNRFFDQUVJQVZKQkVBZ0V5QUFLQUlBSUFVZ0F5QUViR3BCQTNScUt3TUFJQVJCQTNRZ0Myb3JBd0Npb0NFVElBUkJBV29oQkF3QkN3c2dBeUFGYkNFUUlBVWhCQU5BSUFRZ0EwZ0VRQ0FUSUFBb0FnQWdCQ0FRYWtFRGRHb3JBd0FnQkVFRGRDQUxhaXNEQUtLZ0lSTWdCRUVCYWlFRURBRUxDeUFCS0FJQUlBVkJBM1JxSUJNNUF3QWdCVUVCYWlFRkRBRUxDeUFKSUE0MkFnUWdDQ0FPTmdJRUlBZ2dEellDQUNBSklBRW9BZ0FnQmtFRGRHbzJBZ0FnQ0NBSkVPWUNSQUFBQUFBQUFPQS9vaUVWSUFNaEJRTkFJQVZCZjJvaUJTQUhUQTBCSUFFb0FnQWlEaUFGUVFOMGFpSUVLd01BSUJVZ0JVRURkQ0FMYWlzREFDSVdvcUVoRXlBRUlCTTVBd0FnQXlBRmJDRVBJQVVoQkFOQUlBUWdBMGdFUUNBQUtBSUFJQVFnRDJwQkEzUnFJaEFnRUNzREFDQVdJQVJCQTNRZ0Rtb3JBd0NpSUJNZ0JFRURkQ0FMYWlzREFLS2dvVGtEQUNBRVFRRnFJUVFNQVFzTERBQUFDd0FMQ3lBR0lRY01BUXNMQWtBQ1FDQURRUUZLQkg4Z0FTZ0NBQ0lOSUF4QkEzUnFJQUFvQWdBaUFTQU1JQU1nREd3aUJtcEJBM1JxS3dNQU9RTUFJQUlvQWdBZ0RFRURkR29nQmlBRFFYOXFJZ0pxUVFOMElBRnFLd01BT1FNQUlBRWhCaUFOSVFFTUFRVWdBMEVCUmdSL1FRQWhBaUFBS0FJQUlRWWdBU2dDQUNFQkRBSUZJQU1MQ3lFS0RBRUxJQU1oRFNBQ0lBSWdBMnhxUVFOMElBWnFLd01BSVJRZ0FrRURkQ0FCYWlFUlFSd2hFZ3NEUUNBU1FSeEdCRUFnRVNBVU9RTUFJQTBoQ2dzZ0NrRUFUQVJBUVFBaEFBd0NDeUFBS0FJQUlBcEJmMm9pRFNBRGJFRURkR29oQmlBS0lBeE1CRUFDUUNBRElBMXJRWDlxSVFVZ0NrRURkQ0FHYWlFSElBb2hBZ05BSUFJZ0EwNE5BU0FKSUFVMkFnUWdDQ0FGTmdJRUlBZ2dCellDQUNBSklBQW9BZ0FnQ2lBQ0lBTnNJZ1JxUVFOMGFqWUNBQ0FJSUFrUTVnSWhFeUFLSVFFRFFDQUJJQU5JQkVBZ0FDZ0NBQ0FCSUFScVFRTjBhaUlMSUFzckF3QWdFeUFCUVFOMElBWnFLd01Bb3FFNUF3QWdBVUVCYWlFQkRBRUxDeUFDUVFGcUlRSU1BQUFMQUFzTFFRQWhBUU5BSUFFZ0EwZ0VRQ0FCUVFOMElBWnFSQUFBQUFBQUFBQUFPUU1BSUFGQkFXb2hBUXdCQ3d0RUFBQUFBQUFBOEQ4aEZDQU5RUU4wSUFacUlSRkJIQ0VTREFBQUN3QUxCVUYvSVFBTEJVRi9JUUFMQlVGL0lRQUxJQWtrQmlBQUM1SUhBUTUvSXdZaENDTUdRYkFDYWlRR0lBSVFuQUVoRHlBQ0lBaEJvQUZxRU93QklSQWdDRUdnQW1vaUNpQUNJQWhCckFKcUVPc0JJQWhCbEFKcUlnVkNBRGNDQUNBRlFRQTJBZ2dEUUNBSlFRTkhCRUFnQ1VFQ2RDQUZha0VBTmdJQUlBbEJBV29oQ1F3QkN3c2dCU0FGTEFBTFFRQklCSDhnQlNnQ0NFSC8vLy8vQjNGQmYyb0ZRUW9MRUVvZ0NFR1FBbW9pQ3lBRktBSUFJQVVnQlN3QUMwRUFTQnNpQ1RZQ0FDQUlRWXdDYWlJTUlBZzJBZ0FnQ0VHSUFtb2lEVUVBTmdJQUlBQW9BZ0FpQWlFT0EwQUNRQ0FDQkg4Z0FpZ0NEQ0lHSUFJb0FoQkdCSDhnQWlBQ0tBSUFLQUlrUWY4QWNVRUlhaEVBQUFVZ0JpZ0NBQXRCZnhCQkJIOGdBRUVBTmdJQVFRQWhEa0VBSVFKQkFRVkJBQXNGUVFBaERrRUFJUUpCQVFzaEJ3SkFBa0FnQVNnQ0FDSUdSUTBBSUFZb0Fnd2lFU0FHS0FJUVJnUi9JQVlnQmlnQ0FDZ0NKRUgvQUhGQkNHb1JBQUFGSUJFb0FnQUxRWDhRUVFSQUlBRkJBRFlDQUF3QkJTQUhSUTBEQ3d3QkN5QUhCSDlCQUNFR0RBSUZRUUFMSVFZTElBc29BZ0FnQ1NBRktBSUVJQVVzQUFzaUIwSC9BWEVnQjBFQVNCc2lCMnBHQkVBZ0JTQUhRUUYwRUVvZ0JTQUZMQUFMUVFCSUJIOGdCU2dDQ0VILy8vLy9CM0ZCZjJvRlFRb0xFRW9nQ3lBSElBVW9BZ0FnQlNBRkxBQUxRUUJJR3lJSmFqWUNBQXNnQWlnQ0RDSUhJQUlvQWhCR0JIOGdBaUFDS0FJQUtBSWtRZjhBY1VFSWFoRUFBQVVnQnlnQ0FBc2dEeUFKSUFzZ0RTQUlLQUtzQWlBS0lBZ2dEQ0FRRU00QkRRQWdBaWdDRENJR0lBSW9BaEJHQkVBZ0FpQUNLQUlBS0FJb1FmOEFjVUVJYWhFQUFCb0ZJQUlnQmtFRWFqWUNEQ0FHS0FJQUdnc01BUXNMSUFvb0FnUWdDaXdBQ3lJSFFmOEJjU0FIUVFCSUd3UkFJQXdvQWdBaUJ5QUlhMEdnQVVnRVFDQU5LQUlBSVEwZ0RDQUhRUVJxTmdJQUlBY2dEVFlDQUFzTElBUWdDU0FMS0FJQUlBTWdEeEMvQkRzQkFDQUtJQWdnRENnQ0FDQURFSGdnQWdSL0lBSW9BZ3dpQkNBQ0tBSVFSZ1IvSUFJZ0RpZ0NBQ2dDSkVIL0FIRkJDR29SQUFBRklBUW9BZ0FMUVg4UVFRUi9JQUJCQURZQ0FFRUJCVUVBQ3dWQkFRc2hBZ0pBQWtBQ1FDQUdSUTBBSUFZb0Fnd2lCQ0FHS0FJUVJnUi9JQVlnQmlnQ0FDZ0NKRUgvQUhGQkNHb1JBQUFGSUFRb0FnQUxRWDhRUVFSQUlBRkJBRFlDQUF3QkJTQUNSUTBDQ3d3Q0N5QUNEUUFNQVFzZ0F5QURLQUlBUVFKeU5nSUFDeUFBS0FJQUlSSWdCUkJISUFvUVJ5QUlKQVlnRWd1U0J3RU9meU1HSVFnakJrR3dBbW9rQmlBQ0VKd0JJUThnQWlBSVFhQUJhaERzQVNFUUlBaEJvQUpxSWdvZ0FpQUlRYXdDYWhEckFTQUlRWlFDYWlJRlFnQTNBZ0FnQlVFQU5nSUlBMEFnQ1VFRFJ3UkFJQWxCQW5RZ0JXcEJBRFlDQUNBSlFRRnFJUWtNQVFzTElBVWdCU3dBQzBFQVNBUi9JQVVvQWdoQi8vLy8vd2R4UVg5cUJVRUtDeEJLSUFoQmtBSnFJZ3NnQlNnQ0FDQUZJQVVzQUF0QkFFZ2JJZ2syQWdBZ0NFR01BbW9pRENBSU5nSUFJQWhCaUFKcUlnMUJBRFlDQUNBQUtBSUFJZ0loRGdOQUFrQWdBZ1IvSUFJb0Fnd2lCaUFDS0FJUVJnUi9JQUlnQWlnQ0FDZ0NKRUgvQUhGQkNHb1JBQUFGSUFZb0FnQUxRWDhRUVFSL0lBQkJBRFlDQUVFQUlRNUJBQ0VDUVFFRlFRQUxCVUVBSVE1QkFDRUNRUUVMSVFjQ1FBSkFJQUVvQWdBaUJrVU5BQ0FHS0FJTUloRWdCaWdDRUVZRWZ5QUdJQVlvQWdBb0FpUkIvd0J4UVFocUVRQUFCU0FSS0FJQUMwRi9FRUVFUUNBQlFRQTJBZ0FNQVFVZ0IwVU5Bd3NNQVFzZ0J3Ui9RUUFoQmd3Q0JVRUFDeUVHQ3lBTEtBSUFJQWtnQlNnQ0JDQUZMQUFMSWdkQi93RnhJQWRCQUVnYklnZHFSZ1JBSUFVZ0IwRUJkQkJLSUFVZ0JTd0FDMEVBU0FSL0lBVW9BZ2hCLy8vLy93ZHhRWDlxQlVFS0N4QktJQXNnQnlBRktBSUFJQVVnQlN3QUMwRUFTQnNpQ1dvMkFnQUxJQUlvQWd3aUJ5QUNLQUlRUmdSL0lBSWdBaWdDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQWNvQWdBTElBOGdDU0FMSUEwZ0NDZ0NyQUlnQ2lBSUlBd2dFQkRPQVEwQUlBSW9BZ3dpQmlBQ0tBSVFSZ1JBSUFJZ0FpZ0NBQ2dDS0VIL0FIRkJDR29SQUFBYUJTQUNJQVpCQkdvMkFnd2dCaWdDQUJvTERBRUxDeUFLS0FJRUlBb3NBQXNpQjBIL0FYRWdCMEVBU0JzRVFDQU1LQUlBSWdjZ0NHdEJvQUZJQkVBZ0RTZ0NBQ0VOSUF3Z0IwRUVhallDQUNBSElBMDJBZ0FMQ3lBRUlBa2dDeWdDQUNBRElBOFF3QVEyQWdBZ0NpQUlJQXdvQWdBZ0F4QjRJQUlFZnlBQ0tBSU1JZ1FnQWlnQ0VFWUVmeUFDSUE0b0FnQW9BaVJCL3dCeFFRaHFFUUFBQlNBRUtBSUFDMEYvRUVFRWZ5QUFRUUEyQWdCQkFRVkJBQXNGUVFFTElRSUNRQUpBQWtBZ0JrVU5BQ0FHS0FJTUlnUWdCaWdDRUVZRWZ5QUdJQVlvQWdBb0FpUkIvd0J4UVFocUVRQUFCU0FFS0FJQUMwRi9FRUVFUUNBQlFRQTJBZ0FNQVFVZ0FrVU5BZ3NNQWdzZ0FnMEFEQUVMSUFNZ0F5Z0NBRUVDY2pZQ0FBc2dBQ2dDQUNFU0lBVVFSeUFLRUVjZ0NDUUdJQklMU2dFQ2Z5TUdJUUlqQmtFUWFpUUdJQUlnQUJBN0lBSkJvTTRERURvaUFDZ0NBQ2dDTUNFRElBQkI4TzhBUVlyd0FDQUJJQU5CRDNGQmlnSnFFUWtBR2lBQ0VEd2dBaVFHSUFFTGtnY0JEbjhqQmlFSUl3WkJzQUpxSkFZZ0FoQ2NBU0VQSUFJZ0NFR2dBV29RN0FFaEVDQUlRYUFDYWlJS0lBSWdDRUdzQW1vUTZ3RWdDRUdVQW1vaUJVSUFOd0lBSUFWQkFEWUNDQU5BSUFsQkEwY0VRQ0FKUVFKMElBVnFRUUEyQWdBZ0NVRUJhaUVKREFFTEN5QUZJQVVzQUF0QkFFZ0VmeUFGS0FJSVFmLy8vLzhIY1VGL2FnVkJDZ3NRU2lBSVFaQUNhaUlMSUFVb0FnQWdCU0FGTEFBTFFRQklHeUlKTmdJQUlBaEJqQUpxSWd3Z0NEWUNBQ0FJUVlnQ2FpSU5RUUEyQWdBZ0FDZ0NBQ0lDSVE0RFFBSkFJQUlFZnlBQ0tBSU1JZ1lnQWlnQ0VFWUVmeUFDSUFJb0FnQW9BaVJCL3dCeFFRaHFFUUFBQlNBR0tBSUFDMEYvRUVFRWZ5QUFRUUEyQWdCQkFDRU9RUUFoQWtFQkJVRUFDd1ZCQUNFT1FRQWhBa0VCQ3lFSEFrQUNRQ0FCS0FJQUlnWkZEUUFnQmlnQ0RDSVJJQVlvQWhCR0JIOGdCaUFHS0FJQUtBSWtRZjhBY1VFSWFoRUFBQVVnRVNnQ0FBdEJmeEJCQkVBZ0FVRUFOZ0lBREFFRklBZEZEUU1MREFFTElBY0VmMEVBSVFZTUFnVkJBQXNoQmdzZ0N5Z0NBQ0FKSUFVb0FnUWdCU3dBQ3lJSFFmOEJjU0FIUVFCSUd5SUhha1lFUUNBRklBZEJBWFFRU2lBRklBVXNBQXRCQUVnRWZ5QUZLQUlJUWYvLy8vOEhjVUYvYWdWQkNnc1FTaUFMSUFjZ0JTZ0NBQ0FGSUFVc0FBdEJBRWdiSWdscU5nSUFDeUFDS0FJTUlnY2dBaWdDRUVZRWZ5QUNJQUlvQWdBb0FpUkIvd0J4UVFocUVRQUFCU0FIS0FJQUN5QVBJQWtnQ3lBTklBZ29BcXdDSUFvZ0NDQU1JQkFRemdFTkFDQUNLQUlNSWdZZ0FpZ0NFRVlFUUNBQ0lBSW9BZ0FvQWloQi93QnhRUWhxRVFBQUdnVWdBaUFHUVFScU5nSU1JQVlvQWdBYUN3d0JDd3NnQ2lnQ0JDQUtMQUFMSWdkQi93RnhJQWRCQUVnYkJFQWdEQ2dDQUNJSElBaHJRYUFCU0FSQUlBMG9BZ0FoRFNBTUlBZEJCR28yQWdBZ0J5QU5OZ0lBQ3dzZ0JDQUpJQXNvQWdBZ0F5QVBFTUVFTndNQUlBb2dDQ0FNS0FJQUlBTVFlQ0FDQkg4Z0FpZ0NEQ0lFSUFJb0FoQkdCSDhnQWlBT0tBSUFLQUlrUWY4QWNVRUlhaEVBQUFVZ0JDZ0NBQXRCZnhCQkJIOGdBRUVBTmdJQVFRRUZRUUFMQlVFQkN5RUNBa0FDUUFKQUlBWkZEUUFnQmlnQ0RDSUVJQVlvQWhCR0JIOGdCaUFHS0FJQUtBSWtRZjhBY1VFSWFoRUFBQVVnQkNnQ0FBdEJmeEJCQkVBZ0FVRUFOZ0lBREFFRklBSkZEUUlMREFJTElBSU5BQXdCQ3lBRElBTW9BZ0JCQW5JMkFnQUxJQUFvQWdBaEVpQUZFRWNnQ2hCSElBZ2tCaUFTQzdZSEFROS9Jd1loQmlNR1FkQUNhaVFHSUFaQnVBSnFJZ29nQWlBR1FhQUJhaUlRSUFaQnlBSnFJQVpCeEFKcUVPVUNJQVpCckFKcUlnVkNBRGNDQUNBRlFRQTJBZ2dEUUNBSlFRTkhCRUFnQ1VFQ2RDQUZha0VBTmdJQUlBbEJBV29oQ1F3QkN3c2dCU0FGTEFBTFFRQklCSDhnQlNnQ0NFSC8vLy8vQjNGQmYyb0ZRUW9MRUVvZ0JrR29BbW9pRENBRktBSUFJQVVnQlN3QUMwRUFTQnNpQ1RZQ0FDQUdRYVFDYWlJTklBWTJBZ0FnQmtHZ0Ftb2lEa0VBTmdJQUlBWkJ6UUpxSWd0QkFUb0FBQ0FHUWN3Q2FpSVJRY1VBT2dBQUlBQW9BZ0FpQWlFUEEwQUNRQ0FDQkg4Z0FpZ0NEQ0lISUFJb0FoQkdCSDhnQWlBQ0tBSUFLQUlrUWY4QWNVRUlhaEVBQUFVZ0J5Z0NBQXRCZnhCQkJIOGdBRUVBTmdJQVFRQWhEMEVBSVFKQkFRVkJBQXNGUVFBaEQwRUFJUUpCQVFzaENBSkFBa0FnQVNnQ0FDSUhSUTBBSUFjb0Fnd2lFaUFIS0FJUVJnUi9JQWNnQnlnQ0FDZ0NKRUgvQUhGQkNHb1JBQUFGSUJJb0FnQUxRWDhRUVFSQUlBRkJBRFlDQUF3QkJTQUlSUTBEQ3d3QkN5QUlCSDlCQUNFSERBSUZRUUFMSVFjTElBd29BZ0FnQ1NBRktBSUVJQVVzQUFzaUNFSC9BWEVnQ0VFQVNCc2lDR3BHQkVBZ0JTQUlRUUYwRUVvZ0JTQUZMQUFMUVFCSUJIOGdCU2dDQ0VILy8vLy9CM0ZCZjJvRlFRb0xFRW9nRENBSUlBVW9BZ0FnQlNBRkxBQUxRUUJJR3lJSmFqWUNBQXNnQWlnQ0RDSUlJQUlvQWhCR0JIOGdBaUFDS0FJQUtBSWtRZjhBY1VFSWFoRUFBQVVnQ0NnQ0FBc2dDeUFSSUFrZ0RDQUdLQUxJQWlBR0tBTEVBaUFLSUFZZ0RTQU9JQkFRNUFJTkFDQUNLQUlNSWdjZ0FpZ0NFRVlFUUNBQ0lBSW9BZ0FvQWloQi93QnhRUWhxRVFBQUdnVWdBaUFIUVFScU5nSU1JQWNvQWdBYUN3d0JDd3NnQ2lnQ0JDQUtMQUFMSWdoQi93RnhJQWhCQUVnYlJTQUxMQUFBUlhKRkJFQWdEU2dDQUNJTElBWnJRYUFCU0FSQUlBNG9BZ0FoRGlBTklBdEJCR28yQWdBZ0N5QU9OZ0lBQ3dzZ0JDQUpJQXdvQWdBZ0F4RENCRGdDQUNBS0lBWWdEU2dDQUNBREVIZ2dBZ1IvSUFJb0Fnd2lCQ0FDS0FJUVJnUi9JQUlnRHlnQ0FDZ0NKRUgvQUhGQkNHb1JBQUFGSUFRb0FnQUxRWDhRUVFSL0lBQkJBRFlDQUVFQkJVRUFDd1ZCQVFzaEFnSkFBa0FDUUNBSFJRMEFJQWNvQWd3aUJDQUhLQUlRUmdSL0lBY2dCeWdDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQVFvQWdBTFFYOFFRUVJBSUFGQkFEWUNBQXdCQlNBQ1JRMENDd3dDQ3lBQ0RRQU1BUXNnQXlBREtBSUFRUUp5TmdJQUN5QUFLQUlBSVJNZ0JSQkhJQW9RUnlBR0pBWWdFd3UyQndFUGZ5TUdJUVlqQmtIUUFtb2tCaUFHUWJnQ2FpSUtJQUlnQmtHZ0FXb2lFQ0FHUWNnQ2FpQUdRY1FDYWhEbEFpQUdRYXdDYWlJRlFnQTNBZ0FnQlVFQU5nSUlBMEFnQ1VFRFJ3UkFJQWxCQW5RZ0JXcEJBRFlDQUNBSlFRRnFJUWtNQVFzTElBVWdCU3dBQzBFQVNBUi9JQVVvQWdoQi8vLy8vd2R4UVg5cUJVRUtDeEJLSUFaQnFBSnFJZ3dnQlNnQ0FDQUZJQVVzQUF0QkFFZ2JJZ2syQWdBZ0JrR2tBbW9pRFNBR05nSUFJQVpCb0FKcUlnNUJBRFlDQUNBR1FjMENhaUlMUVFFNkFBQWdCa0hNQW1vaUVVSEZBRG9BQUNBQUtBSUFJZ0loRHdOQUFrQWdBZ1IvSUFJb0Fnd2lCeUFDS0FJUVJnUi9JQUlnQWlnQ0FDZ0NKRUgvQUhGQkNHb1JBQUFGSUFjb0FnQUxRWDhRUVFSL0lBQkJBRFlDQUVFQUlROUJBQ0VDUVFFRlFRQUxCVUVBSVE5QkFDRUNRUUVMSVFnQ1FBSkFJQUVvQWdBaUIwVU5BQ0FIS0FJTUloSWdCeWdDRUVZRWZ5QUhJQWNvQWdBb0FpUkIvd0J4UVFocUVRQUFCU0FTS0FJQUMwRi9FRUVFUUNBQlFRQTJBZ0FNQVFVZ0NFVU5Bd3NNQVFzZ0NBUi9RUUFoQnd3Q0JVRUFDeUVIQ3lBTUtBSUFJQWtnQlNnQ0JDQUZMQUFMSWdoQi93RnhJQWhCQUVnYklnaHFSZ1JBSUFVZ0NFRUJkQkJLSUFVZ0JTd0FDMEVBU0FSL0lBVW9BZ2hCLy8vLy93ZHhRWDlxQlVFS0N4QktJQXdnQ0NBRktBSUFJQVVnQlN3QUMwRUFTQnNpQ1dvMkFnQUxJQUlvQWd3aUNDQUNLQUlRUmdSL0lBSWdBaWdDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQWdvQWdBTElBc2dFU0FKSUF3Z0JpZ0N5QUlnQmlnQ3hBSWdDaUFHSUEwZ0RpQVFFT1FDRFFBZ0FpZ0NEQ0lISUFJb0FoQkdCRUFnQWlBQ0tBSUFLQUlvUWY4QWNVRUlhaEVBQUJvRklBSWdCMEVFYWpZQ0RDQUhLQUlBR2dzTUFRc0xJQW9vQWdRZ0Npd0FDeUlJUWY4QmNTQUlRUUJJRzBVZ0N5d0FBRVZ5UlFSQUlBMG9BZ0FpQ3lBR2EwR2dBVWdFUUNBT0tBSUFJUTRnRFNBTFFRUnFOZ0lBSUFzZ0RqWUNBQXNMSUFRZ0NTQU1LQUlBSUFNUXd3UTVBd0FnQ2lBR0lBMG9BZ0FnQXhCNElBSUVmeUFDS0FJTUlnUWdBaWdDRUVZRWZ5QUNJQThvQWdBb0FpUkIvd0J4UVFocUVRQUFCU0FFS0FJQUMwRi9FRUVFZnlBQVFRQTJBZ0JCQVFWQkFBc0ZRUUVMSVFJQ1FBSkFBa0FnQjBVTkFDQUhLQUlNSWdRZ0J5Z0NFRVlFZnlBSElBY29BZ0FvQWlSQi93QnhRUWhxRVFBQUJTQUVLQUlBQzBGL0VFRUVRQ0FCUVFBMkFnQU1BUVVnQWtVTkFnc01BZ3NnQWcwQURBRUxJQU1nQXlnQ0FFRUNjallDQUFzZ0FDZ0NBQ0VUSUFVUVJ5QUtFRWNnQmlRR0lCTUx0Z2NCRDM4akJpRUdJd1pCMEFKcUpBWWdCa0c0QW1vaUNpQUNJQVpCb0FGcUloQWdCa0hJQW1vZ0JrSEVBbW9RNVFJZ0JrR3NBbW9pQlVJQU53SUFJQVZCQURZQ0NBTkFJQWxCQTBjRVFDQUpRUUowSUFWcVFRQTJBZ0FnQ1VFQmFpRUpEQUVMQ3lBRklBVXNBQXRCQUVnRWZ5QUZLQUlJUWYvLy8vOEhjVUYvYWdWQkNnc1FTaUFHUWFnQ2FpSU1JQVVvQWdBZ0JTQUZMQUFMUVFCSUd5SUpOZ0lBSUFaQnBBSnFJZzBnQmpZQ0FDQUdRYUFDYWlJT1FRQTJBZ0FnQmtITkFtb2lDMEVCT2dBQUlBWkJ6QUpxSWhGQnhRQTZBQUFnQUNnQ0FDSUNJUThEUUFKQUlBSUVmeUFDS0FJTUlnY2dBaWdDRUVZRWZ5QUNJQUlvQWdBb0FpUkIvd0J4UVFocUVRQUFCU0FIS0FJQUMwRi9FRUVFZnlBQVFRQTJBZ0JCQUNFUFFRQWhBa0VCQlVFQUN3VkJBQ0VQUVFBaEFrRUJDeUVJQWtBQ1FDQUJLQUlBSWdkRkRRQWdCeWdDRENJU0lBY29BaEJHQkg4Z0J5QUhLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdFaWdDQUF0QmZ4QkJCRUFnQVVFQU5nSUFEQUVGSUFoRkRRTUxEQUVMSUFnRWYwRUFJUWNNQWdWQkFBc2hCd3NnRENnQ0FDQUpJQVVvQWdRZ0JTd0FDeUlJUWY4QmNTQUlRUUJJR3lJSWFrWUVRQ0FGSUFoQkFYUVFTaUFGSUFVc0FBdEJBRWdFZnlBRktBSUlRZi8vLy84SGNVRi9hZ1ZCQ2dzUVNpQU1JQWdnQlNnQ0FDQUZJQVVzQUF0QkFFZ2JJZ2xxTmdJQUN5QUNLQUlNSWdnZ0FpZ0NFRVlFZnlBQ0lBSW9BZ0FvQWlSQi93QnhRUWhxRVFBQUJTQUlLQUlBQ3lBTElCRWdDU0FNSUFZb0FzZ0NJQVlvQXNRQ0lBb2dCaUFOSUE0Z0VCRGtBZzBBSUFJb0Fnd2lCeUFDS0FJUVJnUkFJQUlnQWlnQ0FDZ0NLRUgvQUhGQkNHb1JBQUFhQlNBQ0lBZEJCR28yQWd3Z0J5Z0NBQm9MREFFTEN5QUtLQUlFSUFvc0FBc2lDRUgvQVhFZ0NFRUFTQnRGSUFzc0FBQkZja1VFUUNBTktBSUFJZ3NnQm10Qm9BRklCRUFnRGlnQ0FDRU9JQTBnQzBFRWFqWUNBQ0FMSUE0MkFnQUxDeUFFSUFrZ0RDZ0NBQ0FERU1RRU9RTUFJQW9nQmlBTktBSUFJQU1RZUNBQ0JIOGdBaWdDRENJRUlBSW9BaEJHQkg4Z0FpQVBLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdCQ2dDQUF0QmZ4QkJCSDhnQUVFQU5nSUFRUUVGUVFBTEJVRUJDeUVDQWtBQ1FBSkFJQWRGRFFBZ0J5Z0NEQ0lFSUFjb0FoQkdCSDhnQnlBSEtBSUFLQUlrUWY4QWNVRUlhaEVBQUFVZ0JDZ0NBQXRCZnhCQkJFQWdBVUVBTmdJQURBRUZJQUpGRFFJTERBSUxJQUlOQUF3QkN5QURJQU1vQWdCQkFuSTJBZ0FMSUFBb0FnQWhFeUFGRUVjZ0NoQkhJQVlrQmlBVEM4Y0hBUTUvSXdZaENDTUdRYkFDYWlRR0lBaEJvQUZxSVEwZ0NFR1lBbW9oQmlBSVFhUUNhaUlMUWdBM0FnQWdDMEVBTmdJSVFRQWhBQU5BSUFCQkEwY0VRQ0FBUVFKMElBdHFRUUEyQWdBZ0FFRUJhaUVBREFFTEN5QUdJQU1RT3lBR1FhRE9BeEE2SWdBb0FnQW9BakFoQXlBQVFmRHZBRUdLOEFBZ0RTQURRUTl4UVlvQ2FoRUpBQm9nQmhBOElBWkNBRGNDQUNBR1FRQTJBZ2hCQUNFQUEwQWdBRUVEUndSQUlBQkJBblFnQm1wQkFEWUNBQ0FBUVFGcUlRQU1BUXNMSUFoQmlBSnFJUTRnQmlBR0xBQUxRUUJJQkg4Z0JpZ0NDRUgvLy8vL0IzRkJmMm9GUVFvTEVFb2dDRUdVQW1vaUNpQUdLQUlBSUFZZ0Jpd0FDMEVBU0JzaUFEWUNBQ0FJUVpBQ2FpSVBJQWcyQWdBZ0NFR01BbW9pRUVFQU5nSUFJQUVvQWdBaUF5RU1BMEFDUUNBREJIOGdBeWdDRENJSElBTW9BaEJHQkg4Z0F5QURLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdCeWdDQUF0QmZ4QkJCSDhnQVVFQU5nSUFRUUFoREVFQUlRTkJBUVZCQUFzRlFRQWhERUVBSVFOQkFRc2hDUUpBQWtBZ0FpZ0NBQ0lIUlEwQUlBY29BZ3dpRVNBSEtBSVFSZ1IvSUFjZ0J5Z0NBQ2dDSkVIL0FIRkJDR29SQUFBRklCRW9BZ0FMUVg4UVFRUkFJQUpCQURZQ0FBd0JCU0FKUlEwREN3d0JDeUFKQkg5QkFDRUhEQUlGUVFBTElRY0xJQW9vQWdBZ0FDQUdLQUlFSUFZc0FBc2lDVUgvQVhFZ0NVRUFTQnNpQ1dwR0JFQWdCaUFKUVFGMEVFb2dCaUFHTEFBTFFRQklCSDhnQmlnQ0NFSC8vLy8vQjNGQmYyb0ZRUW9MRUVvZ0NpQUpJQVlvQWdBZ0JpQUdMQUFMUVFCSUd5SUFhallDQUFzZ0F5Z0NEQ0lKSUFNb0FoQkdCSDhnQXlBREtBSUFLQUlrUWY4QWNVRUlhaEVBQUFVZ0NTZ0NBQXRCRUNBQUlBb2dFRUVBSUFzZ0NDQVBJQTBRemdFTkFDQURLQUlNSWdjZ0F5Z0NFRVlFUUNBRElBTW9BZ0FvQWloQi93QnhRUWhxRVFBQUdnVWdBeUFIUVFScU5nSU1JQWNvQWdBYUN3d0JDd3NnQmlBS0tBSUFJQUJyRUVvZ0JpZ0NBQ0FHSUFZc0FBdEJBRWdiQW44UVhDRVNJQTRnQlRZQ0FDQVNDeUFPRU1VRVFRRkhCRUFnQkVFRU5nSUFDeUFEQkg4Z0F5Z0NEQ0lBSUFNb0FoQkdCSDhnQXlBTUtBSUFLQUlrUWY4QWNVRUlhaEVBQUFVZ0FDZ0NBQXRCZnhCQkJIOGdBVUVBTmdJQVFRRUZRUUFMQlVFQkN5RUFBa0FDUUFKQUlBZEZEUUFnQnlnQ0RDSURJQWNvQWhCR0JIOGdCeUFIS0FJQUtBSWtRZjhBY1VFSWFoRUFBQVVnQXlnQ0FBdEJmeEJCQkVBZ0FrRUFOZ0lBREFFRklBQkZEUUlMREFJTElBQU5BQXdCQ3lBRUlBUW9BZ0JCQW5JMkFnQUxJQUVvQWdBaEV5QUdFRWNnQ3hCSElBZ2tCaUFUQzFZQkFuOGpCaUVHSXdaQkVHb2tCaUFHSUFFb0FnQTJBZ1FnQmlBQ0tBSUFOZ0lBSUFaQkNHb2lBU0FHS0FJRU5nSUFJQVpCREdvaUFpQUdLQUlBTmdJQUlBRWdBaUFESUFRZ0JSQ09DeUVISUFZa0JpQUhDMVlCQW44akJpRUdJd1pCRUdva0JpQUdJQUVvQWdBMkFnUWdCaUFDS0FJQU5nSUFJQVpCQ0dvaUFTQUdLQUlFTmdJQUlBWkJER29pQWlBR0tBSUFOZ0lBSUFFZ0FpQURJQVFnQlJDTkN5RUhJQVlrQmlBSEMxWUJBbjhqQmlFR0l3WkJFR29rQmlBR0lBRW9BZ0EyQWdRZ0JpQUNLQUlBTmdJQUlBWkJDR29pQVNBR0tBSUVOZ0lBSUFaQkRHb2lBaUFHS0FJQU5nSUFJQUVnQWlBRElBUWdCUkNNQ3lFSElBWWtCaUFIQzFZQkFuOGpCaUVHSXdaQkVHb2tCaUFHSUFFb0FnQTJBZ1FnQmlBQ0tBSUFOZ0lBSUFaQkNHb2lBU0FHS0FJRU5nSUFJQVpCREdvaUFpQUdLQUlBTmdJQUlBRWdBaUFESUFRZ0JSQ0xDeUVISUFZa0JpQUhDMVlCQW44akJpRUdJd1pCRUdva0JpQUdJQUVvQWdBMkFnUWdCaUFDS0FJQU5nSUFJQVpCQ0dvaUFTQUdLQUlFTmdJQUlBWkJER29pQWlBR0tBSUFOZ0lBSUFFZ0FpQURJQVFnQlJDSUN5RUhJQVlrQmlBSEMxWUJBbjhqQmlFR0l3WkJFR29rQmlBR0lBRW9BZ0EyQWdRZ0JpQUNLQUlBTmdJQUlBWkJDR29pQVNBR0tBSUVOZ0lBSUFaQkRHb2lBaUFHS0FJQU5nSUFJQUVnQWlBRElBUWdCUkNHQ3lFSElBWWtCaUFIQzVBQkFnTi9BbndnQUNBQUVPWUNueUlFUkFBQUFBQUFBQUFBWWdSQUlBU2FJQVFnQUNnQ0FDSUJLd01BSWdWRUFBQUFBQUFBQUFCakd5RUVJQUVnQlNBRW9DSUZPUU1BUkFBQUFBQUFBUEEvSUFRZ0JhS2ZveUVGSUFBb0FnUWhBa0VBSVFBRFFDQUFJQUpJQkVBZ0FFRURkQ0FCYWlJRElBVWdBeXNEQUtJNUF3QWdBRUVCYWlFQURBRUxDd3NnQkpvTFZnRUNmeU1HSVFZakJrRVFhaVFHSUFZZ0FTZ0NBRFlDQkNBR0lBSW9BZ0EyQWdBZ0JrRUlhaUlCSUFZb0FnUTJBZ0FnQmtFTWFpSUNJQVlvQWdBMkFnQWdBU0FDSUFNZ0JDQUZFSVVMSVFjZ0JpUUdJQWNMN1FJQkJIOGpCaUVHSXdaQk1Hb2tCaUFHUVNocUlRY2dCa0VnYWlFSUlBTW9BZ1JCQVhFRVFDQUhJQU1RT3lBSFFhRE9BeEE2SVFrZ0J4QThJQWNnQXhBN0lBZEJxTTRERURvaEF5QUhFRHdnQXlnQ0FDZ0NHQ0VBSUFZZ0F5QUFRVDl4UWJJRmFoRURBQ0FES0FJQUtBSWNJUUFnQmtFTWFpQURJQUJCUDNGQnNnVnFFUU1BSUFZZ0FpZ0NBRFlDR0NBSElBWW9BaGcyQWdBZ0JTQUJJQWNnQmlBR1FSaHFJZ0FnQ1NBRVFRRVFsUUlnQmtZNkFBQWdBU2dDQUNFQkEwQWdBRUYwYWlJQUVFY2dBQ0FHUncwQUN3VWdDRUYvTmdJQUlBQW9BZ0FvQWhBaENTQUdJQUVvQWdBMkFpUWdCaUFDS0FJQU5nSWNJQVlnQmlnQ0pEWUNBQ0FISUFZb0FodzJBZ0FnQVNBQUlBWWdCeUFESUFRZ0NDQUpRVDl4UWNZQ2FoRUtBRFlDQUFKQUFrQUNRQUpBSUFnb0FnQU9BZ0FCQWdzZ0JVRUFPZ0FBREFJTElBVkJBVG9BQUF3QkN5QUZRUUU2QUFBZ0JFRUVOZ0lBQ3lBQktBSUFJUUVMSUFZa0JpQUJDNWNIQVExL0l3WWhDQ01HUWZBQmFpUUdJQUlRbkFFaER5QUlRZFFCYWlJS0lBSWdDRUhnQVdvUTdRRWdDRUhJQVdvaUJVSUFOd0lBSUFWQkFEWUNDQU5BSUFsQkEwY0VRQ0FKUVFKMElBVnFRUUEyQWdBZ0NVRUJhaUVKREFFTEN5QUZJQVVzQUF0QkFFZ0VmeUFGS0FJSVFmLy8vLzhIY1VGL2FnVkJDZ3NRU2lBSVFjUUJhaUlMSUFVb0FnQWdCU0FGTEFBTFFRQklHeUlKTmdJQUlBaEJ3QUZxSWd3Z0NEWUNBQ0FJUWJ3QmFpSU5RUUEyQWdBZ0FDZ0NBQ0lDSVE0RFFBSkFJQUlFZnlBQ0tBSU1JZ1lnQWlnQ0VFWUVmeUFDSUFJb0FnQW9BaVJCL3dCeFFRaHFFUUFBQlNBR0xBQUFFRUlMUVg4UVFRUi9JQUJCQURZQ0FFRUFJUTVCQUNFQ1FRRUZRUUFMQlVFQUlRNUJBQ0VDUVFFTElRY0NRQUpBSUFFb0FnQWlCa1VOQUNBR0tBSU1JaEFnQmlnQ0VFWUVmeUFHSUFZb0FnQW9BaVJCL3dCeFFRaHFFUUFBQlNBUUxBQUFFRUlMUVg4UVFRUkFJQUZCQURZQ0FBd0JCU0FIUlEwREN3d0JDeUFIQkg5QkFDRUdEQUlGUVFBTElRWUxJQXNvQWdBZ0NTQUZLQUlFSUFVc0FBc2lCMEgvQVhFZ0IwRUFTQnNpQjJwR0JFQWdCU0FIUVFGMEVFb2dCU0FGTEFBTFFRQklCSDhnQlNnQ0NFSC8vLy8vQjNGQmYyb0ZRUW9MRUVvZ0N5QUhJQVVvQWdBZ0JTQUZMQUFMUVFCSUd5SUphallDQUFzZ0FpZ0NEQ0lISUFJb0FoQkdCSDhnQWlBQ0tBSUFLQUlrUWY4QWNVRUlhaEVBQUFVZ0J5d0FBQkJDQzBIL0FYRWdEeUFKSUFzZ0RTQUlMQURnQVNBS0lBZ2dERUh3N3dBUTBBRU5BQ0FDS0FJTUlnWWdBaWdDRUVZRVFDQUNJQUlvQWdBb0FpaEIvd0J4UVFocUVRQUFHZ1VnQWlBR1FRRnFOZ0lNSUFZc0FBQVFRaG9MREFFTEN5QUtLQUlFSUFvc0FBc2lCMEgvQVhFZ0IwRUFTQnNFUUNBTUtBSUFJZ2NnQ0d0Qm9BRklCRUFnRFNnQ0FDRU5JQXdnQjBFRWFqWUNBQ0FISUEwMkFnQUxDeUFFSUFrZ0N5Z0NBQ0FESUE4UXZRUTJBZ0FnQ2lBSUlBd29BZ0FnQXhCNElBSUVmeUFDS0FJTUlnUWdBaWdDRUVZRWZ5QUNJQTRvQWdBb0FpUkIvd0J4UVFocUVRQUFCU0FFTEFBQUVFSUxRWDhRUVFSL0lBQkJBRFlDQUVFQkJVRUFDd1ZCQVFzaEFnSkFBa0FDUUNBR1JRMEFJQVlvQWd3aUJDQUdLQUlRUmdSL0lBWWdCaWdDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQVFzQUFBUVFndEJmeEJCQkVBZ0FVRUFOZ0lBREFFRklBSkZEUUlMREFJTElBSU5BQXdCQ3lBRElBTW9BZ0JCQW5JMkFnQUxJQUFvQWdBaEVTQUZFRWNnQ2hCSElBZ2tCaUFSQzVjSEFRMS9Jd1loQ0NNR1FmQUJhaVFHSUFJUW5BRWhEeUFJUWRRQmFpSUtJQUlnQ0VIZ0FXb1E3UUVnQ0VISUFXb2lCVUlBTndJQUlBVkJBRFlDQ0FOQUlBbEJBMGNFUUNBSlFRSjBJQVZxUVFBMkFnQWdDVUVCYWlFSkRBRUxDeUFGSUFVc0FBdEJBRWdFZnlBRktBSUlRZi8vLy84SGNVRi9hZ1ZCQ2dzUVNpQUlRY1FCYWlJTElBVW9BZ0FnQlNBRkxBQUxRUUJJR3lJSk5nSUFJQWhCd0FGcUlnd2dDRFlDQUNBSVFid0JhaUlOUVFBMkFnQWdBQ2dDQUNJQ0lRNERRQUpBSUFJRWZ5QUNLQUlNSWdZZ0FpZ0NFRVlFZnlBQ0lBSW9BZ0FvQWlSQi93QnhRUWhxRVFBQUJTQUdMQUFBRUVJTFFYOFFRUVIvSUFCQkFEWUNBRUVBSVE1QkFDRUNRUUVGUVFBTEJVRUFJUTVCQUNFQ1FRRUxJUWNDUUFKQUlBRW9BZ0FpQmtVTkFDQUdLQUlNSWhBZ0JpZ0NFRVlFZnlBR0lBWW9BZ0FvQWlSQi93QnhRUWhxRVFBQUJTQVFMQUFBRUVJTFFYOFFRUVJBSUFGQkFEWUNBQXdCQlNBSFJRMERDd3dCQ3lBSEJIOUJBQ0VHREFJRlFRQUxJUVlMSUFzb0FnQWdDU0FGS0FJRUlBVXNBQXNpQjBIL0FYRWdCMEVBU0JzaUIycEdCRUFnQlNBSFFRRjBFRW9nQlNBRkxBQUxRUUJJQkg4Z0JTZ0NDRUgvLy8vL0IzRkJmMm9GUVFvTEVFb2dDeUFISUFVb0FnQWdCU0FGTEFBTFFRQklHeUlKYWpZQ0FBc2dBaWdDRENJSElBSW9BaEJHQkg4Z0FpQUNLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdCeXdBQUJCQ0MwSC9BWEVnRHlBSklBc2dEU0FJTEFEZ0FTQUtJQWdnREVIdzd3QVEwQUVOQUNBQ0tBSU1JZ1lnQWlnQ0VFWUVRQ0FDSUFJb0FnQW9BaWhCL3dCeFFRaHFFUUFBR2dVZ0FpQUdRUUZxTmdJTUlBWXNBQUFRUWhvTERBRUxDeUFLS0FJRUlBb3NBQXNpQjBIL0FYRWdCMEVBU0JzRVFDQU1LQUlBSWdjZ0NHdEJvQUZJQkVBZ0RTZ0NBQ0VOSUF3Z0IwRUVhallDQUNBSElBMDJBZ0FMQ3lBRUlBa2dDeWdDQUNBRElBOFF2Z1EzQXdBZ0NpQUlJQXdvQWdBZ0F4QjRJQUlFZnlBQ0tBSU1JZ1FnQWlnQ0VFWUVmeUFDSUE0b0FnQW9BaVJCL3dCeFFRaHFFUUFBQlNBRUxBQUFFRUlMUVg4UVFRUi9JQUJCQURZQ0FFRUJCVUVBQ3dWQkFRc2hBZ0pBQWtBQ1FDQUdSUTBBSUFZb0Fnd2lCQ0FHS0FJUVJnUi9JQVlnQmlnQ0FDZ0NKRUgvQUhGQkNHb1JBQUFGSUFRc0FBQVFRZ3RCZnhCQkJFQWdBVUVBTmdJQURBRUZJQUpGRFFJTERBSUxJQUlOQUF3QkN5QURJQU1vQWdCQkFuSTJBZ0FMSUFBb0FnQWhFU0FGRUVjZ0NoQkhJQWdrQmlBUkM1Y0hBUTEvSXdZaENDTUdRZkFCYWlRR0lBSVFuQUVoRHlBSVFkUUJhaUlLSUFJZ0NFSGdBV29RN1FFZ0NFSElBV29pQlVJQU53SUFJQVZCQURZQ0NBTkFJQWxCQTBjRVFDQUpRUUowSUFWcVFRQTJBZ0FnQ1VFQmFpRUpEQUVMQ3lBRklBVXNBQXRCQUVnRWZ5QUZLQUlJUWYvLy8vOEhjVUYvYWdWQkNnc1FTaUFJUWNRQmFpSUxJQVVvQWdBZ0JTQUZMQUFMUVFCSUd5SUpOZ0lBSUFoQndBRnFJZ3dnQ0RZQ0FDQUlRYndCYWlJTlFRQTJBZ0FnQUNnQ0FDSUNJUTREUUFKQUlBSUVmeUFDS0FJTUlnWWdBaWdDRUVZRWZ5QUNJQUlvQWdBb0FpUkIvd0J4UVFocUVRQUFCU0FHTEFBQUVFSUxRWDhRUVFSL0lBQkJBRFlDQUVFQUlRNUJBQ0VDUVFFRlFRQUxCVUVBSVE1QkFDRUNRUUVMSVFjQ1FBSkFJQUVvQWdBaUJrVU5BQ0FHS0FJTUloQWdCaWdDRUVZRWZ5QUdJQVlvQWdBb0FpUkIvd0J4UVFocUVRQUFCU0FRTEFBQUVFSUxRWDhRUVFSQUlBRkJBRFlDQUF3QkJTQUhSUTBEQ3d3QkN5QUhCSDlCQUNFR0RBSUZRUUFMSVFZTElBc29BZ0FnQ1NBRktBSUVJQVVzQUFzaUIwSC9BWEVnQjBFQVNCc2lCMnBHQkVBZ0JTQUhRUUYwRUVvZ0JTQUZMQUFMUVFCSUJIOGdCU2dDQ0VILy8vLy9CM0ZCZjJvRlFRb0xFRW9nQ3lBSElBVW9BZ0FnQlNBRkxBQUxRUUJJR3lJSmFqWUNBQXNnQWlnQ0RDSUhJQUlvQWhCR0JIOGdBaUFDS0FJQUtBSWtRZjhBY1VFSWFoRUFBQVVnQnl3QUFCQkNDMEgvQVhFZ0R5QUpJQXNnRFNBSUxBRGdBU0FLSUFnZ0RFSHc3d0FRMEFFTkFDQUNLQUlNSWdZZ0FpZ0NFRVlFUUNBQ0lBSW9BZ0FvQWloQi93QnhRUWhxRVFBQUdnVWdBaUFHUVFGcU5nSU1JQVlzQUFBUVFob0xEQUVMQ3lBS0tBSUVJQW9zQUFzaUIwSC9BWEVnQjBFQVNCc0VRQ0FNS0FJQUlnY2dDR3RCb0FGSUJFQWdEU2dDQUNFTklBd2dCMEVFYWpZQ0FDQUhJQTAyQWdBTEN5QUVJQWtnQ3lnQ0FDQURJQThRdndRN0FRQWdDaUFJSUF3b0FnQWdBeEI0SUFJRWZ5QUNLQUlNSWdRZ0FpZ0NFRVlFZnlBQ0lBNG9BZ0FvQWlSQi93QnhRUWhxRVFBQUJTQUVMQUFBRUVJTFFYOFFRUVIvSUFCQkFEWUNBRUVCQlVFQUN3VkJBUXNoQWdKQUFrQUNRQ0FHUlEwQUlBWW9BZ3dpQkNBR0tBSVFSZ1IvSUFZZ0JpZ0NBQ2dDSkVIL0FIRkJDR29SQUFBRklBUXNBQUFRUWd0QmZ4QkJCRUFnQVVFQU5nSUFEQUVGSUFKRkRRSUxEQUlMSUFJTkFBd0JDeUFESUFNb0FnQkJBbkkyQWdBTElBQW9BZ0FoRVNBRkVFY2dDaEJISUFna0JpQVJDNWNIQVExL0l3WWhDQ01HUWZBQmFpUUdJQUlRbkFFaER5QUlRZFFCYWlJS0lBSWdDRUhnQVdvUTdRRWdDRUhJQVdvaUJVSUFOd0lBSUFWQkFEWUNDQU5BSUFsQkEwY0VRQ0FKUVFKMElBVnFRUUEyQWdBZ0NVRUJhaUVKREFFTEN5QUZJQVVzQUF0QkFFZ0VmeUFGS0FJSVFmLy8vLzhIY1VGL2FnVkJDZ3NRU2lBSVFjUUJhaUlMSUFVb0FnQWdCU0FGTEFBTFFRQklHeUlKTmdJQUlBaEJ3QUZxSWd3Z0NEWUNBQ0FJUWJ3QmFpSU5RUUEyQWdBZ0FDZ0NBQ0lDSVE0RFFBSkFJQUlFZnlBQ0tBSU1JZ1lnQWlnQ0VFWUVmeUFDSUFJb0FnQW9BaVJCL3dCeFFRaHFFUUFBQlNBR0xBQUFFRUlMUVg4UVFRUi9JQUJCQURZQ0FFRUFJUTVCQUNFQ1FRRUZRUUFMQlVFQUlRNUJBQ0VDUVFFTElRY0NRQUpBSUFFb0FnQWlCa1VOQUNBR0tBSU1JaEFnQmlnQ0VFWUVmeUFHSUFZb0FnQW9BaVJCL3dCeFFRaHFFUUFBQlNBUUxBQUFFRUlMUVg4UVFRUkFJQUZCQURZQ0FBd0JCU0FIUlEwREN3d0JDeUFIQkg5QkFDRUdEQUlGUVFBTElRWUxJQXNvQWdBZ0NTQUZLQUlFSUFVc0FBc2lCMEgvQVhFZ0IwRUFTQnNpQjJwR0JFQWdCU0FIUVFGMEVFb2dCU0FGTEFBTFFRQklCSDhnQlNnQ0NFSC8vLy8vQjNGQmYyb0ZRUW9MRUVvZ0N5QUhJQVVvQWdBZ0JTQUZMQUFMUVFCSUd5SUphallDQUFzZ0FpZ0NEQ0lISUFJb0FoQkdCSDhnQWlBQ0tBSUFLQUlrUWY4QWNVRUlhaEVBQUFVZ0J5d0FBQkJDQzBIL0FYRWdEeUFKSUFzZ0RTQUlMQURnQVNBS0lBZ2dERUh3N3dBUTBBRU5BQ0FDS0FJTUlnWWdBaWdDRUVZRVFDQUNJQUlvQWdBb0FpaEIvd0J4UVFocUVRQUFHZ1VnQWlBR1FRRnFOZ0lNSUFZc0FBQVFRaG9MREFFTEN5QUtLQUlFSUFvc0FBc2lCMEgvQVhFZ0IwRUFTQnNFUUNBTUtBSUFJZ2NnQ0d0Qm9BRklCRUFnRFNnQ0FDRU5JQXdnQjBFRWFqWUNBQ0FISUEwMkFnQUxDeUFFSUFrZ0N5Z0NBQ0FESUE4UXdBUTJBZ0FnQ2lBSUlBd29BZ0FnQXhCNElBSUVmeUFDS0FJTUlnUWdBaWdDRUVZRWZ5QUNJQTRvQWdBb0FpUkIvd0J4UVFocUVRQUFCU0FFTEFBQUVFSUxRWDhRUVFSL0lBQkJBRFlDQUVFQkJVRUFDd1ZCQVFzaEFnSkFBa0FDUUNBR1JRMEFJQVlvQWd3aUJDQUdLQUlRUmdSL0lBWWdCaWdDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQVFzQUFBUVFndEJmeEJCQkVBZ0FVRUFOZ0lBREFFRklBSkZEUUlMREFJTElBSU5BQXdCQ3lBRElBTW9BZ0JCQW5JMkFnQUxJQUFvQWdBaEVTQUZFRWNnQ2hCSElBZ2tCaUFSQzVjSEFRMS9Jd1loQ0NNR1FmQUJhaVFHSUFJUW5BRWhEeUFJUWRRQmFpSUtJQUlnQ0VIZ0FXb1E3UUVnQ0VISUFXb2lCVUlBTndJQUlBVkJBRFlDQ0FOQUlBbEJBMGNFUUNBSlFRSjBJQVZxUVFBMkFnQWdDVUVCYWlFSkRBRUxDeUFGSUFVc0FBdEJBRWdFZnlBRktBSUlRZi8vLy84SGNVRi9hZ1ZCQ2dzUVNpQUlRY1FCYWlJTElBVW9BZ0FnQlNBRkxBQUxRUUJJR3lJSk5nSUFJQWhCd0FGcUlnd2dDRFlDQUNBSVFid0JhaUlOUVFBMkFnQWdBQ2dDQUNJQ0lRNERRQUpBSUFJRWZ5QUNLQUlNSWdZZ0FpZ0NFRVlFZnlBQ0lBSW9BZ0FvQWlSQi93QnhRUWhxRVFBQUJTQUdMQUFBRUVJTFFYOFFRUVIvSUFCQkFEWUNBRUVBSVE1QkFDRUNRUUVGUVFBTEJVRUFJUTVCQUNFQ1FRRUxJUWNDUUFKQUlBRW9BZ0FpQmtVTkFDQUdLQUlNSWhBZ0JpZ0NFRVlFZnlBR0lBWW9BZ0FvQWlSQi93QnhRUWhxRVFBQUJTQVFMQUFBRUVJTFFYOFFRUVJBSUFGQkFEWUNBQXdCQlNBSFJRMERDd3dCQ3lBSEJIOUJBQ0VHREFJRlFRQUxJUVlMSUFzb0FnQWdDU0FGS0FJRUlBVXNBQXNpQjBIL0FYRWdCMEVBU0JzaUIycEdCRUFnQlNBSFFRRjBFRW9nQlNBRkxBQUxRUUJJQkg4Z0JTZ0NDRUgvLy8vL0IzRkJmMm9GUVFvTEVFb2dDeUFISUFVb0FnQWdCU0FGTEFBTFFRQklHeUlKYWpZQ0FBc2dBaWdDRENJSElBSW9BaEJHQkg4Z0FpQUNLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdCeXdBQUJCQ0MwSC9BWEVnRHlBSklBc2dEU0FJTEFEZ0FTQUtJQWdnREVIdzd3QVEwQUVOQUNBQ0tBSU1JZ1lnQWlnQ0VFWUVRQ0FDSUFJb0FnQW9BaWhCL3dCeFFRaHFFUUFBR2dVZ0FpQUdRUUZxTmdJTUlBWXNBQUFRUWhvTERBRUxDeUFLS0FJRUlBb3NBQXNpQjBIL0FYRWdCMEVBU0JzRVFDQU1LQUlBSWdjZ0NHdEJvQUZJQkVBZ0RTZ0NBQ0VOSUF3Z0IwRUVhallDQUNBSElBMDJBZ0FMQ3lBRUlBa2dDeWdDQUNBRElBOFF3UVEzQXdBZ0NpQUlJQXdvQWdBZ0F4QjRJQUlFZnlBQ0tBSU1JZ1FnQWlnQ0VFWUVmeUFDSUE0b0FnQW9BaVJCL3dCeFFRaHFFUUFBQlNBRUxBQUFFRUlMUVg4UVFRUi9JQUJCQURZQ0FFRUJCVUVBQ3dWQkFRc2hBZ0pBQWtBQ1FDQUdSUTBBSUFZb0Fnd2lCQ0FHS0FJUVJnUi9JQVlnQmlnQ0FDZ0NKRUgvQUhGQkNHb1JBQUFGSUFRc0FBQVFRZ3RCZnhCQkJFQWdBVUVBTmdJQURBRUZJQUpGRFFJTERBSUxJQUlOQUF3QkN5QURJQU1vQWdCQkFuSTJBZ0FMSUFBb0FnQWhFU0FGRUVjZ0NoQkhJQWdrQmlBUkM4WUhBUTkvSXdZaEJpTUdRZkFCYWlRR0lBWkIyQUZxSWdvZ0FpQUdRYUFCYWlJUUlBWkI1d0ZxSUFaQjVnRnFFT2tDSUFaQnpBRnFJZ1ZDQURjQ0FDQUZRUUEyQWdnRFFDQUpRUU5IQkVBZ0NVRUNkQ0FGYWtFQU5nSUFJQWxCQVdvaENRd0JDd3NnQlNBRkxBQUxRUUJJQkg4Z0JTZ0NDRUgvLy8vL0IzRkJmMm9GUVFvTEVFb2dCa0hJQVdvaURDQUZLQUlBSUFVZ0JTd0FDMEVBU0JzaUNUWUNBQ0FHUWNRQmFpSU5JQVkyQWdBZ0JrSEFBV29pRGtFQU5nSUFJQVpCNVFGcUlndEJBVG9BQUNBR1FlUUJhaUlSUWNVQU9nQUFJQUFvQWdBaUFpRVBBMEFDUUNBQ0JIOGdBaWdDRENJSElBSW9BaEJHQkg4Z0FpQUNLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdCeXdBQUJCQ0MwRi9FRUVFZnlBQVFRQTJBZ0JCQUNFUFFRQWhBa0VCQlVFQUN3VkJBQ0VQUVFBaEFrRUJDeUVJQWtBQ1FDQUJLQUlBSWdkRkRRQWdCeWdDRENJU0lBY29BaEJHQkg4Z0J5QUhLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdFaXdBQUJCQ0MwRi9FRUVFUUNBQlFRQTJBZ0FNQVFVZ0NFVU5Bd3NNQVFzZ0NBUi9RUUFoQnd3Q0JVRUFDeUVIQ3lBTUtBSUFJQWtnQlNnQ0JDQUZMQUFMSWdoQi93RnhJQWhCQUVnYklnaHFSZ1JBSUFVZ0NFRUJkQkJLSUFVZ0JTd0FDMEVBU0FSL0lBVW9BZ2hCLy8vLy93ZHhRWDlxQlVFS0N4QktJQXdnQ0NBRktBSUFJQVVnQlN3QUMwRUFTQnNpQ1dvMkFnQUxJQUlvQWd3aUNDQUNLQUlRUmdSL0lBSWdBaWdDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQWdzQUFBUVFndEIvd0Z4SUFzZ0VTQUpJQXdnQml3QTV3RWdCaXdBNWdFZ0NpQUdJQTBnRGlBUUVPZ0NEUUFnQWlnQ0RDSUhJQUlvQWhCR0JFQWdBaUFDS0FJQUtBSW9RZjhBY1VFSWFoRUFBQm9GSUFJZ0IwRUJhallDRENBSExBQUFFRUlhQ3d3QkN3c2dDaWdDQkNBS0xBQUxJZ2hCL3dGeElBaEJBRWdiUlNBTExBQUFSWEpGQkVBZ0RTZ0NBQ0lMSUFaclFhQUJTQVJBSUE0b0FnQWhEaUFOSUF0QkJHbzJBZ0FnQ3lBT05nSUFDd3NnQkNBSklBd29BZ0FnQXhEQ0JEZ0NBQ0FLSUFZZ0RTZ0NBQ0FERUhnZ0FnUi9JQUlvQWd3aUJDQUNLQUlRUmdSL0lBSWdEeWdDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQVFzQUFBUVFndEJmeEJCQkg4Z0FFRUFOZ0lBUVFFRlFRQUxCVUVCQ3lFQ0FrQUNRQUpBSUFkRkRRQWdCeWdDRENJRUlBY29BaEJHQkg4Z0J5QUhLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdCQ3dBQUJCQ0MwRi9FRUVFUUNBQlFRQTJBZ0FNQVFVZ0FrVU5BZ3NNQWdzZ0FnMEFEQUVMSUFNZ0F5Z0NBRUVDY2pZQ0FBc2dBQ2dDQUNFVElBVVFSeUFLRUVjZ0JpUUdJQk1MeGdjQkQzOGpCaUVHSXdaQjhBRnFKQVlnQmtIWUFXb2lDaUFDSUFaQm9BRnFJaEFnQmtIbkFXb2dCa0htQVdvUTZRSWdCa0hNQVdvaUJVSUFOd0lBSUFWQkFEWUNDQU5BSUFsQkEwY0VRQ0FKUVFKMElBVnFRUUEyQWdBZ0NVRUJhaUVKREFFTEN5QUZJQVVzQUF0QkFFZ0VmeUFGS0FJSVFmLy8vLzhIY1VGL2FnVkJDZ3NRU2lBR1FjZ0JhaUlNSUFVb0FnQWdCU0FGTEFBTFFRQklHeUlKTmdJQUlBWkJ4QUZxSWcwZ0JqWUNBQ0FHUWNBQmFpSU9RUUEyQWdBZ0JrSGxBV29pQzBFQk9nQUFJQVpCNUFGcUloRkJ4UUE2QUFBZ0FDZ0NBQ0lDSVE4RFFBSkFJQUlFZnlBQ0tBSU1JZ2NnQWlnQ0VFWUVmeUFDSUFJb0FnQW9BaVJCL3dCeFFRaHFFUUFBQlNBSExBQUFFRUlMUVg4UVFRUi9JQUJCQURZQ0FFRUFJUTlCQUNFQ1FRRUZRUUFMQlVFQUlROUJBQ0VDUVFFTElRZ0NRQUpBSUFFb0FnQWlCMFVOQUNBSEtBSU1JaElnQnlnQ0VFWUVmeUFISUFjb0FnQW9BaVJCL3dCeFFRaHFFUUFBQlNBU0xBQUFFRUlMUVg4UVFRUkFJQUZCQURZQ0FBd0JCU0FJUlEwREN3d0JDeUFJQkg5QkFDRUhEQUlGUVFBTElRY0xJQXdvQWdBZ0NTQUZLQUlFSUFVc0FBc2lDRUgvQVhFZ0NFRUFTQnNpQ0dwR0JFQWdCU0FJUVFGMEVFb2dCU0FGTEFBTFFRQklCSDhnQlNnQ0NFSC8vLy8vQjNGQmYyb0ZRUW9MRUVvZ0RDQUlJQVVvQWdBZ0JTQUZMQUFMUVFCSUd5SUphallDQUFzZ0FpZ0NEQ0lJSUFJb0FoQkdCSDhnQWlBQ0tBSUFLQUlrUWY4QWNVRUlhaEVBQUFVZ0NDd0FBQkJDQzBIL0FYRWdDeUFSSUFrZ0RDQUdMQURuQVNBR0xBRG1BU0FLSUFZZ0RTQU9JQkFRNkFJTkFDQUNLQUlNSWdjZ0FpZ0NFRVlFUUNBQ0lBSW9BZ0FvQWloQi93QnhRUWhxRVFBQUdnVWdBaUFIUVFGcU5nSU1JQWNzQUFBUVFob0xEQUVMQ3lBS0tBSUVJQW9zQUFzaUNFSC9BWEVnQ0VFQVNCdEZJQXNzQUFCRmNrVUVRQ0FOS0FJQUlnc2dCbXRCb0FGSUJFQWdEaWdDQUNFT0lBMGdDMEVFYWpZQ0FDQUxJQTQyQWdBTEN5QUVJQWtnRENnQ0FDQURFTU1FT1FNQUlBb2dCaUFOS0FJQUlBTVFlQ0FDQkg4Z0FpZ0NEQ0lFSUFJb0FoQkdCSDhnQWlBUEtBSUFLQUlrUWY4QWNVRUlhaEVBQUFVZ0JDd0FBQkJDQzBGL0VFRUVmeUFBUVFBMkFnQkJBUVZCQUFzRlFRRUxJUUlDUUFKQUFrQWdCMFVOQUNBSEtBSU1JZ1FnQnlnQ0VFWUVmeUFISUFjb0FnQW9BaVJCL3dCeFFRaHFFUUFBQlNBRUxBQUFFRUlMUVg4UVFRUkFJQUZCQURZQ0FBd0JCU0FDUlEwQ0N3d0NDeUFDRFFBTUFRc2dBeUFES0FJQVFRSnlOZ0lBQ3lBQUtBSUFJUk1nQlJCSElBb1FSeUFHSkFZZ0V3dkdCd0VQZnlNR0lRWWpCa0h3QVdva0JpQUdRZGdCYWlJS0lBSWdCa0dnQVdvaUVDQUdRZWNCYWlBR1FlWUJhaERwQWlBR1Fjd0JhaUlGUWdBM0FnQWdCVUVBTmdJSUEwQWdDVUVEUndSQUlBbEJBblFnQldwQkFEWUNBQ0FKUVFGcUlRa01BUXNMSUFVZ0JTd0FDMEVBU0FSL0lBVW9BZ2hCLy8vLy93ZHhRWDlxQlVFS0N4QktJQVpCeUFGcUlnd2dCU2dDQUNBRklBVXNBQXRCQUVnYklnazJBZ0FnQmtIRUFXb2lEU0FHTmdJQUlBWkJ3QUZxSWc1QkFEWUNBQ0FHUWVVQmFpSUxRUUU2QUFBZ0JrSGtBV29pRVVIRkFEb0FBQ0FBS0FJQUlnSWhEd05BQWtBZ0FnUi9JQUlvQWd3aUJ5QUNLQUlRUmdSL0lBSWdBaWdDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQWNzQUFBUVFndEJmeEJCQkg4Z0FFRUFOZ0lBUVFBaEQwRUFJUUpCQVFWQkFBc0ZRUUFoRDBFQUlRSkJBUXNoQ0FKQUFrQWdBU2dDQUNJSFJRMEFJQWNvQWd3aUVpQUhLQUlRUmdSL0lBY2dCeWdDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQklzQUFBUVFndEJmeEJCQkVBZ0FVRUFOZ0lBREFFRklBaEZEUU1MREFFTElBZ0VmMEVBSVFjTUFnVkJBQXNoQndzZ0RDZ0NBQ0FKSUFVb0FnUWdCU3dBQ3lJSVFmOEJjU0FJUVFCSUd5SUlha1lFUUNBRklBaEJBWFFRU2lBRklBVXNBQXRCQUVnRWZ5QUZLQUlJUWYvLy8vOEhjVUYvYWdWQkNnc1FTaUFNSUFnZ0JTZ0NBQ0FGSUFVc0FBdEJBRWdiSWdscU5nSUFDeUFDS0FJTUlnZ2dBaWdDRUVZRWZ5QUNJQUlvQWdBb0FpUkIvd0J4UVFocUVRQUFCU0FJTEFBQUVFSUxRZjhCY1NBTElCRWdDU0FNSUFZc0FPY0JJQVlzQU9ZQklBb2dCaUFOSUE0Z0VCRG9BZzBBSUFJb0Fnd2lCeUFDS0FJUVJnUkFJQUlnQWlnQ0FDZ0NLRUgvQUhGQkNHb1JBQUFhQlNBQ0lBZEJBV28yQWd3Z0J5d0FBQkJDR2dzTUFRc0xJQW9vQWdRZ0Npd0FDeUlJUWY4QmNTQUlRUUJJRzBVZ0N5d0FBRVZ5UlFSQUlBMG9BZ0FpQ3lBR2EwR2dBVWdFUUNBT0tBSUFJUTRnRFNBTFFRUnFOZ0lBSUFzZ0RqWUNBQXNMSUFRZ0NTQU1LQUlBSUFNUXhBUTVBd0FnQ2lBR0lBMG9BZ0FnQXhCNElBSUVmeUFDS0FJTUlnUWdBaWdDRUVZRWZ5QUNJQThvQWdBb0FpUkIvd0J4UVFocUVRQUFCU0FFTEFBQUVFSUxRWDhRUVFSL0lBQkJBRFlDQUVFQkJVRUFDd1ZCQVFzaEFnSkFBa0FDUUNBSFJRMEFJQWNvQWd3aUJDQUhLQUlRUmdSL0lBY2dCeWdDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQVFzQUFBUVFndEJmeEJCQkVBZ0FVRUFOZ0lBREFFRklBSkZEUUlMREFJTElBSU5BQXdCQ3lBRElBTW9BZ0JCQW5JMkFnQUxJQUFvQWdBaEV5QUZFRWNnQ2hCSElBWWtCaUFUQzBFQkFuOGdBQ2dDQkNFQklBQW9BZ0FnQUNnQ0NDSUNRUUYxYWlFQUlBSkJBWEVFUUNBQklBQW9BZ0JxS0FJQUlRRUxJQUFnQVVIL0FYRkJyQU5xRVFFQUN3MEFJQUFvQWdBb0FnQVFvUXNMSndFQmZ5QUJLQUlBSVFNZ0FTZ0NCQ0VCSUFBZ0FqWUNBQ0FBSUFNMkFnUWdBQ0FCTmdJSUN5RUJBWDlCak00RFFZek9BeWdDQUNJQlFRRnFOZ0lBSUFBZ0FVRUJhallDQkF0dEFRUi9Jd1loQVNNR1FUQnFKQVlnQVVFWWFpRURJQUZCandFMkFoQWdBVUVBTmdJVUlBRkJJR29pQWlBQktRSVFOd0lBSUFFZ0FpQUFFS01MSUFBb0FnQkJmMGNFUUNBQ0lBRTJBZ0FnQXlBQ05nSUFJQUFnQXhEcENRc2dBQ2dDQkVGL2FpRUVJQUVrQmlBRUM5Y0hBUTUvSXdZaENDTUdRZkFCYWlRR0lBaEJvQUZxSVEwZ0NFSFFBV29oQmlBSVFkd0JhaUlMUWdBM0FnQWdDMEVBTmdJSVFRQWhBQU5BSUFCQkEwY0VRQ0FBUVFKMElBdHFRUUEyQWdBZ0FFRUJhaUVBREFFTEN5QUdJQU1RT3lBR1FZRE9BeEE2SWdBb0FnQW9BaUFoQXlBQVFmRHZBRUdLOEFBZ0RTQURRUTl4UVlvQ2FoRUpBQm9nQmhBOElBWkNBRGNDQUNBR1FRQTJBZ2hCQUNFQUEwQWdBRUVEUndSQUlBQkJBblFnQm1wQkFEWUNBQ0FBUVFGcUlRQU1BUXNMSUFoQndBRnFJUTRnQmlBR0xBQUxRUUJJQkg4Z0JpZ0NDRUgvLy8vL0IzRkJmMm9GUVFvTEVFb2dDRUhNQVdvaUNpQUdLQUlBSUFZZ0Jpd0FDMEVBU0JzaUFEWUNBQ0FJUWNnQmFpSVBJQWcyQWdBZ0NFSEVBV29pRUVFQU5nSUFJQUVvQWdBaUF5RU1BMEFDUUNBREJIOGdBeWdDRENJSElBTW9BaEJHQkg4Z0F5QURLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdCeXdBQUJCQ0MwRi9FRUVFZnlBQlFRQTJBZ0JCQUNFTVFRQWhBMEVCQlVFQUN3VkJBQ0VNUVFBaEEwRUJDeUVKQWtBQ1FDQUNLQUlBSWdkRkRRQWdCeWdDRENJUklBY29BaEJHQkg4Z0J5QUhLQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdFU3dBQUJCQ0MwRi9FRUVFUUNBQ1FRQTJBZ0FNQVFVZ0NVVU5Bd3NNQVFzZ0NRUi9RUUFoQnd3Q0JVRUFDeUVIQ3lBS0tBSUFJQUFnQmlnQ0JDQUdMQUFMSWdsQi93RnhJQWxCQUVnYklnbHFSZ1JBSUFZZ0NVRUJkQkJLSUFZZ0Jpd0FDMEVBU0FSL0lBWW9BZ2hCLy8vLy93ZHhRWDlxQlVFS0N4QktJQW9nQ1NBR0tBSUFJQVlnQml3QUMwRUFTQnNpQUdvMkFnQUxJQU1vQWd3aUNTQURLQUlRUmdSL0lBTWdBeWdDQUNnQ0pFSC9BSEZCQ0dvUkFBQUZJQWtzQUFBUVFndEIvd0Z4UVJBZ0FDQUtJQkJCQUNBTElBZ2dEeUFORU5BQkRRQWdBeWdDRENJSElBTW9BaEJHQkVBZ0F5QURLQUlBS0FJb1FmOEFjVUVJYWhFQUFCb0ZJQU1nQjBFQmFqWUNEQ0FITEFBQUVFSWFDd3dCQ3dzZ0JpQUtLQUlBSUFCckVFb2dCaWdDQUNBR0lBWXNBQXRCQUVnYkFuOFFYQ0VTSUE0Z0JUWUNBQ0FTQ3lBT0VNVUVRUUZIQkVBZ0JFRUVOZ0lBQ3lBREJIOGdBeWdDRENJQUlBTW9BaEJHQkg4Z0F5QU1LQUlBS0FJa1FmOEFjVUVJYWhFQUFBVWdBQ3dBQUJCQ0MwRi9FRUVFZnlBQlFRQTJBZ0JCQVFWQkFBc0ZRUUVMSVFBQ1FBSkFBa0FnQjBVTkFDQUhLQUlNSWdNZ0J5Z0NFRVlFZnlBSElBY29BZ0FvQWlSQi93QnhRUWhxRVFBQUJTQURMQUFBRUVJTFFYOFFRUVJBSUFKQkFEWUNBQXdCQlNBQVJRMENDd3dDQ3lBQURRQU1BUXNnQkNBRUtBSUFRUUp5TmdJQUN5QUJLQUlBSVJNZ0JoQkhJQXNRUnlBSUpBWWdFd3RXQVFKL0l3WWhCaU1HUVJCcUpBWWdCaUFCS0FJQU5nSUVJQVlnQWlnQ0FEWUNBQ0FHUVFocUlnRWdCaWdDQkRZQ0FDQUdRUXhxSWdJZ0JpZ0NBRFlDQUNBQklBSWdBeUFFSUFVUW9Bc2hCeUFHSkFZZ0J3dFdBUUovSXdZaEJpTUdRUkJxSkFZZ0JpQUJLQUlBTmdJRUlBWWdBaWdDQURZQ0FDQUdRUWhxSWdFZ0JpZ0NCRFlDQUNBR1FReHFJZ0lnQmlnQ0FEWUNBQ0FCSUFJZ0F5QUVJQVVRbndzaEJ5QUdKQVlnQnd0V0FRSi9Jd1loQmlNR1FSQnFKQVlnQmlBQktBSUFOZ0lFSUFZZ0FpZ0NBRFlDQUNBR1FRaHFJZ0VnQmlnQ0JEWUNBQ0FHUVF4cUlnSWdCaWdDQURZQ0FDQUJJQUlnQXlBRUlBVVFuZ3NoQnlBR0pBWWdCd3RXQVFKL0l3WWhCaU1HUVJCcUpBWWdCaUFCS0FJQU5nSUVJQVlnQWlnQ0FEWUNBQ0FHUVFocUlnRWdCaWdDQkRZQ0FDQUdRUXhxSWdJZ0JpZ0NBRFlDQUNBQklBSWdBeUFFSUFVUW5Rc2hCeUFHSkFZZ0J3dFdBUUovSXdZaEJpTUdRUkJxSkFZZ0JpQUJLQUlBTmdJRUlBWWdBaWdDQURZQ0FDQUdRUWhxSWdFZ0JpZ0NCRFlDQUNBR1FReHFJZ0lnQmlnQ0FEWUNBQ0FCSUFJZ0F5QUVJQVVRbXdzaEJ5QUdKQVlnQnd0V0FRSi9Jd1loQmlNR1FSQnFKQVlnQmlBQktBSUFOZ0lFSUFZZ0FpZ0NBRFlDQUNBR1FRaHFJZ0VnQmlnQ0JEWUNBQ0FHUVF4cUlnSWdCaWdDQURZQ0FDQUJJQUlnQXlBRUlBVVFtZ3NoQnlBR0pBWWdCd3RXQVFKL0l3WWhCaU1HUVJCcUpBWWdCaUFCS0FJQU5nSUVJQVlnQWlnQ0FEWUNBQ0FHUVFocUlnRWdCaWdDQkRZQ0FDQUdRUXhxSWdJZ0JpZ0NBRFlDQUNBQklBSWdBeUFFSUFVUW1Rc2hCeUFHSkFZZ0J3dnRBZ0VFZnlNR0lRWWpCa0V3YWlRR0lBWkJLR29oQnlBR1FTQnFJUWdnQXlnQ0JFRUJjUVJBSUFjZ0F4QTdJQWRCZ000REVEb2hDU0FIRUR3Z0J5QURFRHNnQjBHUXpnTVFPaUVESUFjUVBDQURLQUlBS0FJWUlRQWdCaUFESUFCQlAzRkJzZ1ZxRVFNQUlBTW9BZ0FvQWh3aEFDQUdRUXhxSUFNZ0FFRS9jVUd5QldvUkF3QWdCaUFDS0FJQU5nSVlJQWNnQmlnQ0dEWUNBQ0FGSUFFZ0J5QUdJQVpCR0dvaUFDQUpJQVJCQVJDV0FpQUdSam9BQUNBQktBSUFJUUVEUUNBQVFYUnFJZ0FRUnlBQUlBWkhEUUFMQlNBSVFYODJBZ0FnQUNnQ0FDZ0NFQ0VKSUFZZ0FTZ0NBRFlDSkNBR0lBSW9BZ0EyQWh3Z0JpQUdLQUlrTmdJQUlBY2dCaWdDSERZQ0FDQUJJQUFnQmlBSElBTWdCQ0FJSUFsQlAzRkJ4Z0pxRVFvQU5nSUFBa0FDUUFKQUFrQWdDQ2dDQUE0Q0FBRUNDeUFGUVFBNkFBQU1BZ3NnQlVFQk9nQUFEQUVMSUFWQkFUb0FBQ0FFUVFRMkFnQUxJQUVvQWdBaEFRc2dCaVFHSUFFTFFRRUJmMEVBSVFBRFFDQUJJQUpIQkVBZ0FTZ0NBQ0FBUVFSMGFpSURRWUNBZ0lCL2NTRUFJQU1nQUNBQVFSaDJjbk1oQUNBQlFRUnFJUUVNQVFzTElBQUxHUUFnQUVJQU53SUFJQUJCQURZQ0NDQUFJQUlnQXhESEJBdFhBUUYvQW44Q1FBTi9BbjhnQXlBRVJnMENRWDhnQVNBQ1JnMEFHa0YvSUFFb0FnQWlBQ0FES0FJQUlnVklEUUFhSUFVZ0FFZ0VmMEVCQlNBRFFRUnFJUU1nQVVFRWFpRUJEQUlMQ3dzTUFRc2dBU0FDUndzTFB3RUJmMEVBSVFBRFFDQUJJQUpIQkVBZ0FTd0FBQ0FBUVFSMGFpSUFRWUNBZ0lCL2NTSURJQU5CR0haeUlBQnpJUUFnQVVFQmFpRUJEQUVMQ3lBQUN6MEJBWDhnQUFSL0lBQW9BZ0FpQVFSL0lBRW9BcmdCRURnZ0FDZ0NBQ2dDdkFFUU9DQUFLQUlBRURnZ0FFRUFOZ0lBUVFBRlFYOExCVUYvQ3hvTEdRQWdBRUlBTndJQUlBQkJBRFlDQ0NBQUlBSWdBeEQrQXd0WEFRRi9BbjhDUUFOL0FuOGdBeUFFUmcwQ1FYOGdBU0FDUmcwQUdrRi9JQUVzQUFBaUFDQURMQUFBSWdWSURRQWFJQVVnQUVnRWYwRUJCU0FEUVFGcUlRTWdBVUVCYWlFQkRBSUxDd3NNQVFzZ0FTQUNSd3NMSWdFQmZ5QUFCRUFnQUNnQ0FDZ0NCQ0VCSUFBZ0FVSC9BWEZCckFOcUVRRUFDd3UxQWdFSWZ5TUdJUVVqQmtFZ2FpUUdJQVZCRUdvaEFpQUZRUVJxSVFNZ0JVRUlhaUVFQW44Z0FVRi9FRUVoQ1NBQUxBQTBRUUJISVFZZ0NRc0VRQ0FHUlFSQUlBQWdBQ2dDTUNJQlFYOFFRVUVCYzBFQmNUb0FOQXNGQWtBZ0JnUi9JQVFnQUVFd2FpSUdLQUlBRUVJNkFBQWdBQ2dDSkNJSEtBSUFLQUlNSVFnQ2Z3SkFBa0FDUUNBSElBQW9BaWdnQkNBRVFRRnFJQVVnQWlBQ1FRaHFJQU1nQ0VFUGNVR09BMm9SRGdCQkFXc09Bd0lDQUFFTElBSWdCaWdDQURvQUFDQURJQUpCQVdvMkFnQUxBMEFnQXlnQ0FDSUVJQUpOQkVCQkFTRURRUUFNQXdzZ0F5QUVRWDlxSWdRMkFnQWdCQ3dBQUNBQUtBSWdFTzhCUVg5SERRQUxDMEVBSVFOQmZ3c2hBaUFEQkg4Z0JnVWdBaUVCREFJTEJTQUFRVEJxQ3lBQk5nSUFJQUJCQVRvQU5Bc0xJQVVrQmlBQkN3a0FJQUJCQVJESUJBc0pBQ0FBUVFBUXlBUUxYZ0VCZnlBQUlBRkJzTkFERURvaUFUWUNKQ0FBSUFFZ0FTZ0NBQ2dDR0VIL0FIRkJDR29SQUFBMkFpd2dBQ2dDSkNJQktBSUFLQUljSVFJZ0FDQUJJQUpCL3dCeFFRaHFFUUFBUVFGeE9nQTFJQUFvQWl4QkNFb0VRQkFBQ3d1ekFnRUlmeU1HSVFVakJrRWdhaVFHSUFWQkVHb2hBaUFGUVFocUlRTWdCVUVFYWlFRUFuOGdBVUYvRUVFaENTQUFMQUEwUVFCSElRWWdDUXNFUUNBR1JRUkFJQUFnQUNnQ01DSUJRWDhRUVVFQmMwRUJjVG9BTkFzRkFrQWdCZ1IvSUFRZ0FFRXdhaUlHS0FJQU5nSUFJQUFvQWlRaUJ5Z0NBQ2dDRENFSUFuOENRQUpBQWtBZ0J5QUFLQUlvSUFRZ0JFRUVhaUFGSUFJZ0FrRUlhaUFESUFoQkQzRkJqZ05xRVE0QVFRRnJEZ01DQWdBQkN5QUNJQVlvQWdBNkFBQWdBeUFDUVFGcU5nSUFDd05BSUFNb0FnQWlCQ0FDVFFSQVFRRWhBMEVBREFNTElBTWdCRUYvYWlJRU5nSUFJQVFzQUFBZ0FDZ0NJQkR2QVVGL1J3MEFDd3RCQUNFRFFYOExJUUlnQXdSL0lBWUZJQUloQVF3Q0N3VWdBRUV3YWdzZ0FUWUNBQ0FBUVFFNkFEUUxDeUFGSkFZZ0FRdUtBd0lNZndKOEl3WWhBU01HUVVCckpBWWdBVUVnYWlFQ1FkQUJFRVFpQTBVRVFFRUFRUU5CdWRnQ0lBSVFQVUVCRUFFTElBRkJLR29oQkNBRElBQkJ1QUVRVEJvZ0F5QUFLQUlBUVI1cUlnZzJBc0FCSUFNZ0FDZ0NCRUVlYWlJSk5nTEVBU0FEUVE4MkFzZ0JJQU5CRHpZQ3pBRWdBeUFKSUFoQkEzUnNJZ1VRUkNJQ05nSzRBU0FDUlFSQVFRQkJBMEc1MkFJZ0JCQTlRUUVRQVFzZ0FVRXdhaUVHSUFNZ0JSQkVJZ1EyQXJ3QklBUkZCRUJCQUVFRFFibllBaUFHRUQxQkFSQUJDeUFCUVJocUlRVWdBVUVRYWlFR0lBRkJDR29oQ2lBQVFlZ0FhaUVMSUFBb0FyQUJJUXdnQWlFQUEwQWdCeUFKU0FSQUlBZEJEMnV5dXlFTlFRQWhBZ05BSUFJZ0NFZ0VRQ0FMSUFKQkQydXl1eUlPSUEwZ0NpQUJJQXdRMkFzZ0FDQUtLd01BdGpnQ0FDQUFJQUVyQXdDMk9BSUVJQXNnRGlBTklBVWdCaUFNRU44RUlBUWdCU3NEQUxZNEFnQWdCQ0FHS3dNQXRqZ0NCQ0FDUVFGcUlRSWdCRUVJYWlFRUlBQkJDR29oQUF3QkN3c2dCMEVCYWlFSERBRUxDeUFCSkFZZ0F3c0pBQ0FBUVFFUXlRUUxDUUFnQUVFQUVNa0VDMTRCQVg4Z0FDQUJRYmpRQXhBNklnRTJBaVFnQUNBQklBRW9BZ0FvQWhoQi93QnhRUWhxRVFBQU5nSXNJQUFvQWlRaUFTZ0NBQ2dDSENFQ0lBQWdBU0FDUWY4QWNVRUlhaEVBQUVFQmNUb0FOU0FBS0FJc1FRaEtCRUFRQUFzTG5RSUJDWDhqQmlFREl3WkJJR29rQmlBRFFSQnFJUVFnQTBFSWFpRUNJQU5CQkdvaEJnSi9Ba0FnQVVGL0VFRU5BQUovSUFJZ0FSQkNPZ0FBSUFBc0FDd0VRQ0FDUVFGQkFTQUFLQUlnRUpNQlFRRkdEUUpCZnd3QkN5QUdJQVEyQWdBZ0FrRUJhaUVISUFSQkNHb2hDQUpBQTBBQ1FDQUFLQUlrSWdVb0FnQW9BZ3doQ1NBRklBQW9BaWdnQWlBSElBTWdCQ0FJSUFZZ0NVRVBjVUdPQTJvUkRnQWhCU0FDSUFNb0FnQkdEUUlnQlVFRFJnMEFJQVZCQWs4TkFpQUdLQUlBSUFScklnSWdCRUVCSUFJZ0FDZ0NJQkNUQVVjTkFpQURLQUlBSVFJZ0JVRUJSZzBCREFRTEN5QUNRUUZCQVNBQUtBSWdFSk1CUVFGSERRQU1BZ3RCZndzTUFRc2dBVUYvRUVFRWYwRUFCU0FCQ3dzaENpQURKQVlnQ2d0ZkFRSi9JQUFzQUN3RVFDQUJRUUVnQWlBQUtBSWdFSk1CSVFNRkEwQWdBeUFDU0FSQUlBQW9BZ0FvQWpRaEJDQUFJQUVzQUFBUVFpQUVRVDl4UVlvQmFoRUNBRUYvUndSQUlBTkJBV29oQXlBQlFRRnFJUUVNQWdzTEN3c2dBd3RNQVFGL0lBQW9BZ0FvQWhnaEFpQUFJQUpCL3dCeFFRaHFFUUFBR2lBQUlBRkJzTkFERURvaUFUWUNKQ0FCS0FJQUtBSWNJUUlnQUNBQklBSkIvd0J4UVFocUVRQUFRUUZ4T2dBc0M1c0NBUWwvSXdZaEF5TUdRU0JxSkFZZ0EwRVFhaUVFSUFOQkNHb2hBaUFEUVFScUlRWUNmd0pBSUFGQmZ4QkJEUUFDZnlBQ0lBRTJBZ0FnQUN3QUxBUkFJQUpCQkVFQklBQW9BaUFRa3dGQkFVWU5Ba0YvREFFTElBWWdCRFlDQUNBQ1FRUnFJUWNnQkVFSWFpRUlBa0FEUUFKQUlBQW9BaVFpQlNnQ0FDZ0NEQ0VKSUFVZ0FDZ0NLQ0FDSUFjZ0F5QUVJQWdnQmlBSlFROXhRWTREYWhFT0FDRUZJQUlnQXlnQ0FFWU5BaUFGUVFOR0RRQWdCVUVDVHcwQ0lBWW9BZ0FnQkdzaUFpQUVRUUVnQWlBQUtBSWdFSk1CUncwQ0lBTW9BZ0FoQWlBRlFRRkdEUUVNQkFzTElBSkJBVUVCSUFBb0FpQVFrd0ZCQVVjTkFBd0NDMEYvQ3d3QkN5QUJRWDhRUVFSL1FRQUZJQUVMQ3lFS0lBTWtCaUFLQzFrQkFYOGdBQ3dBTEFSQUlBRkJCQ0FDSUFBb0FpQVFrd0VoQXdVRFFDQURJQUpJQkVBZ0FDQUJLQUlBSUFBb0FnQW9BalJCUDNGQmlnRnFFUUlBUVg5SEJFQWdBMEVCYWlFRElBRkJCR29oQVF3Q0N3c0xDeUFEQzB3QkFYOGdBQ2dDQUNnQ0dDRUNJQUFnQWtIL0FIRkJDR29SQUFBYUlBQWdBVUc0MEFNUU9pSUJOZ0lrSUFFb0FnQW9BaHdoQWlBQUlBRWdBa0gvQUhGQkNHb1JBQUJCQVhFNkFDd0w3QVVDQjM4Q2ZDTUdJUVFqQmtHZ0Eyb2tCaUFFUVpBRGFpRUdJQVJCZ0FGcUlRZ2dBQ2dDQUNFSElBQW9BZ1FoQlNBQVFRaHFJQVJCc0FKcUlnb2dCRUhRQVdvaUNSRHpDMEVBU0FSQVFRQkJBMEdickFFZ0JoQTlCUUpBSUFWQmYycTNJUXhCQUNFRkEwQWdCVUVFUndSQUlBcEJJR29nQlVFRGRHb2lBQ0FLUVVCcklBVkJBM1JxS3dNQUlBeWlJQUFyQXdDaE9RTUFJQVZCQVdvaEJRd0JDd3NnQ2lzRFVDRUxRUUFoQlFOQUlBVkJBMGNFUUVFQUlRQURRQ0FBUVFOSEJFQWdCVUVZYkNBSWFpQUFRUU4wYWlBRlFRVjBJQXBxSUFCQkEzUnFLd01BSUF1ak9RTUFJQUJCQVdvaEFBd0JDd3NnQlVFQmFpRUZEQUVMQ3lBRUlBZ3JBd0JFQUFBQUFBQUFBRUNpSUFkQmYycTNJZ3VqT1FNQUlBUWdDQ3NEQ0VRQUFBQUFBQUFBUUtJZ0M2TTVBd2dnQkNBSUt3TVFSQUFBQUFBQUFBQkFvaUFMbzBRQUFBQUFBQUR3djZDYU9RTVFJQVJDQURjREdDQUVRZ0EzQXlBZ0JDQUlLd01nUkFBQUFBQUFBQUJBb2lBTW81bzVBeWdnQkNBSUt3TW9SQUFBQUFBQUFBQkFvaUFNbzBRQUFBQUFBQUR3djZDYU9RTXdJQVJDQURjRE9DQUVRZ0EzQTBBZ0JFSUFOd05JSUFRZ0FTQUNvQ0FCSUFLaElndWpPUU5RSUFRZ0FrUUFBQUFBQUFBQVFLSWdBYUlnQzZNNUExZ2dCRUlBTndOZ0lBUkNBRGNEYUNBRVJBQUFBQUFBQVBDL09RTndJQVJFQUFBQUFBQUFBQUE1QTNnZ0NTc0RHQ0VMSUFrckF6Z2hBaUFKS3dOWUlRRkJBQ0VHQTBBZ0JrRUVSZzBCSUFaQkJYUWdCR29yQXdBaERDQUdRUVYwSUFScUlRVWdCa0VGZENBRWFpRUFRUUFoQndOQUlBZEJBMGNFUUNBR0lBZEJBblJxUVFOMElBTnFJQXdnQjBFRGRDQUphaXNEQUtJZ0JTc0RDQ0FKUVNCcUlBZEJBM1JxS3dNQW9xQWdBQ3NERUNBSlFVQnJJQWRCQTNScUt3TUFvcUE1QXdBZ0IwRUJhaUVIREFFTEN5QUdRUXhxUVFOMElBTnFJQVpCQlhRZ0JHb3JBeGdnRENBTG9pQUZLd01JSUFLaW9DQUFLd01RSUFHaW9LQTVBd0FnQmtFQmFpRUdEQUFBQ3dBTEN5QUVKQVlMNGhNQ0VIOEJmQ01HSVJNakJrRVFhaVFHSUJNaER5QUVLQUlBSWdnaEJ5QUJJQUpCZjJvaUVHeEJBWFFnQ0dvaEJRTkFJQXdnQVVnRVFDQUZRUUE3QVFBZ0IwRUFPd0VBSUFkQkFtb2hCeUFGUVFKcUlRVWdERUVCYWlFTURBRUxDeUFJSVFjZ0FVRi9haUlSUVFGMElBaHFJUVZCQUNFTUEwQWdEQ0FDU0FSQUlBVkJBRHNCQUNBSFFRQTdBUUFnQVVFQmRDQUhhaUVISUFGQkFYUWdCV29oQlNBTVFRRnFJUXdNQVFzTElBUkJrSURJQUdvaEIwRUFJQUZySVJJZ0FDQUJRUUZxSWdCcUlRNUJBU0VOUVFBaEJTQUFJQVFvQWdScUlRd2dBRUVCZENBSWFpRUlBbjhDUUFOQUFrQWdEU0FRVGcwQ0lBVWhBRUVCSVFvRFFDQUtJQkZJQkVBZ0RpMEFBQ0FEU2dSQUlBaEJBRHNCQUNBTVFRQTZBQUFGQWtBZ0RFRi9PZ0FBSUJKQkFYUWdDR29pQlM0QkFDSUdRUUJLQkVBZ0NDQUdPd0VBSUFaQkIyd2lCVUVDZENBRWFrSDAvODhBYWlJR0lBWW9BZ0JCQVdvMkFnQWdCVUVDZENBRWFrSDQvODhBYWlJR0lBb2dCaWdDQUdvMkFnQWdCVUVDZENBRWFrSDgvODhBYWlJR0lBMGdCaWdDQUdvMkFnQWdCVUVDZENBRWFrR01nTkFBYWlBTk5nSUFEQUVMSUFWQmZtb3VBUUFpQmlFSklBWkJBRW9oQ3lBRkxnRUNJZ1ZCQUV3RVFDQUxCRUFnQ0NBR093RUFJQWxCQjJ3aUJVRUNkQ0FFYWtIMC84OEFhaUlHSUFZb0FnQkJBV28yQWdBZ0JVRUNkQ0FFYWtINC84OEFhaUlHSUFvZ0JpZ0NBR28yQWdBZ0JVRUNkQ0FFYWtIOC84OEFhaUlHSUEwZ0JpZ0NBR28yQWdBZ0JVRUNkQ0FFYWtHRWdOQUFhaUlHS0FJQUlBcElCRUFnQmlBS05nSUFDeUFGUVFKMElBUnFRWXlBMEFCcUlBMDJBZ0FNQWdzZ0NFRithaTRCQUNJRlFRQktCRUFnQ0NBRk93RUFJQVZCQjJ3aUJVRUNkQ0FFYWtIMC84OEFhaUlHSUFZb0FnQkJBV28yQWdBZ0JVRUNkQ0FFYWtINC84OEFhaUlHSUFvZ0JpZ0NBR28yQWdBZ0JVRUNkQ0FFYWtIOC84OEFhaUlHSUEwZ0JpZ0NBR28yQWdBZ0JVRUNkQ0FFYWtHRWdOQUFhaUlGS0FJQUlBcE9EUUlnQlNBS05nSUFCU0FBUWYvL0FVb05CaUFJSUFCQkFXb2lCVHNCQUNBRVFaQ0F5QUJxSUFCQkFuUnFJQVZCRUhSQkVIVTJBZ0FnQkVHUWdOQUFhaUFBUVFkc0lnQkJBblJxUVFFMkFnQWdBRUVDZENBRWFrR1VnTkFBYWlBS05nSUFJQUJCQW5RZ0JHcEJtSURRQUdvZ0RUWUNBQ0FBUVFKMElBUnFRWnlBMEFCcUlBbzJBZ0FnQUVFQ2RDQUVha0dnZ05BQWFpQUtOZ0lBSUFCQkFuUWdCR3BCcElEUUFHb2dEVFlDQUNBQVFRSjBJQVJxUWFpQTBBQnFJQTAyQWdBZ0JTRUFDd3dCQ3lBTEJFQUNRQ0FGUVFKMElBUnFRWXlBeUFCcUtBSUFJZ1VnQ1VFQ2RDQUVha0dNZ01nQWFpZ0NBQ0lHU2dSQUlBZ2dCanNCQUNBSElRbEJBQ0VMQTBBZ0N5QUFUZ1JBSUFZaEJRd0RDeUFGSUFrb0FnQkdCRUFnQ1NBR05nSUFDeUFKUVFScUlRa2dDMEVCYWlFTERBQUFDd0FGSUFnZ0JUc0JBQ0FGSUFaSUJFQWdCeUVKUVFBaEN3TkFJQXNnQUU0TkF5QUdJQWtvQWdCR0JFQWdDU0FGTmdJQUN5QUpRUVJxSVFrZ0MwRUJhaUVMREFBQUN3QUxDd3NnQlVFUWRFRVFkVUVIYkNJRlFRSjBJQVJxUWZUL3p3QnFJZ1lnQmlnQ0FFRUJhallDQUNBRlFRSjBJQVJxUWZqL3p3QnFJZ1lnQ2lBR0tBSUFhallDQUNBRlFRSjBJQVJxUWZ6L3p3QnFJZ1lnRFNBR0tBSUFhallDQUNBRlFRSjBJQVJxUVl5QTBBQnFJQTAyQWdBTUFRc2dDRUYrYWk0QkFDSUdRUUJNQkVBZ0NDQUZPd0VBSUFWQkIyd2lCVUVDZENBRWFrSDAvODhBYWlJR0lBWW9BZ0JCQVdvMkFnQWdCVUVDZENBRWFrSDQvODhBYWlJR0lBb2dCaWdDQUdvMkFnQWdCVUVDZENBRWFrSDgvODhBYWlJR0lBMGdCaWdDQUdvMkFnQWdCVUVDZENBRWFrR0FnTkFBYWlJR0tBSUFJQXBLQkVBZ0JpQUtOZ0lBQ3lBRlFRSjBJQVJxUVl5QTBBQnFJQTAyQWdBTUFRc0NRQ0FGUVFKMElBUnFRWXlBeUFCcUtBSUFJZ1VnQmtFQ2RDQUVha0dNZ01nQWFpZ0NBQ0lHU2dSQUlBZ2dCanNCQUNBSElRbEJBQ0VMQTBBZ0N5QUFUZ1JBSUFZaEJRd0RDeUFGSUFrb0FnQkdCRUFnQ1NBR05nSUFDeUFKUVFScUlRa2dDMEVCYWlFTERBQUFDd0FGSUFnZ0JUc0JBQ0FGSUFaSUJFQWdCeUVKUVFBaEN3TkFJQXNnQUU0TkF5QUdJQWtvQWdCR0JFQWdDU0FGTmdJQUN5QUpRUVJxSVFrZ0MwRUJhaUVMREFBQUN3QUxDd3NnQlVFUWRFRVFkVUVIYkNJRlFRSjBJQVJxUWZUL3p3QnFJZ1lnQmlnQ0FFRUJhallDQUNBRlFRSjBJQVJxUWZqL3p3QnFJZ1lnQ2lBR0tBSUFhallDQUNBRlFRSjBJQVJxUWZ6L3p3QnFJZ1VnRFNBRktBSUFhallDQUFzTElBNUJBV29oRGlBTVFRRnFJUXdnQ2tFQmFpRUtJQWhCQW1vaENBd0JDd3NnRGtFQ2FpRU9JQTFCQVdvaERTQUFJUVVnREVFQ2FpRU1JQWhCQkdvaENBd0JDd3RCQUVFRFFhaWxBU0FQRUQxQmZ3d0JDeUFFUVF4cUlReEJBU0VBUVFFaENBTkFJQWdnQlV3RVFDQUlJQWNvQWdBaUJrWUVRQ0FBUVFGcUlRTUZJQUFoQXlBR1FRSjBJQVJxUVl5QXlBQnFLQUlBSVFBTElBY2dBRFlDQUNBRElRQWdDRUVCYWlFSUlBZEJCR29oQnd3QkN3c2dCQ0FBUVg5cUlnQTJBZ2dnQUFSL0lBeEJBQ0FBUVFKMEVFVWFJQVJCa0lBb2FrRUFJQUJCQkhRUVJScEJBQ0VEQTBBZ0F5QUFTQVJBSUFSQmpJQUlhaUFEUVFKMElnZEJBblJxSUFFMkFnQWdCRUdNZ0FocUlBZEJBWEpCQW5ScVFRQTJBZ0FnQkVHTWdBaHFJQWRCQW5KQkFuUnFJQUkyQWdBZ0JFR01nQWhxSUFkQkEzSkJBblJxUVFBMkFnQWdBMEVCYWlFRERBRUxDMEVBSVFFRFFDQUJJQVZJQkVBZ0JFRU1haUFFUVpDQXlBQnFJQUZCQW5ScUtBSUFRWDlxSWdKQkFuUnFJZ01nQkVHUWdOQUFhaUFCUVFkc0lnQkJBblJxS0FJQUlBTW9BZ0JxTmdJQUlBUkJrSUFvYWlBQ1FRRjBJZ05CQTNScUlnY2dCeXNEQUNBQVFRSjBJQVJxUVpTQTBBQnFLQUlBdDZBNUF3QWdCRUdRZ0NocUlBTkJBWEpCQTNScUlnTWdBeXNEQUNBQVFRSjBJQVJxUVppQTBBQnFLQUlBdDZBNUF3QWdCRUdNZ0FocUlBSkJBblFpQWtFQ2RHb2lBeWdDQUNBQVFRSjBJQVJxUVp5QTBBQnFLQUlBSWdkS0JFQWdBeUFITmdJQUN5QUVRWXlBQ0dvZ0FrRUJja0VDZEdvaUF5Z0NBQ0FBUVFKMElBUnFRYUNBMEFCcUtBSUFJZ2RJQkVBZ0F5QUhOZ0lBQ3lBRVFZeUFDR29nQWtFQ2NrRUNkR29pQXlnQ0FDQUFRUUowSUFScVFhU0EwQUJxS0FJQUlnZEtCRUFnQXlBSE5nSUFDeUFFUVl5QUNHb2dBa0VEY2tFQ2RHb2lBaWdDQUNBQVFRSjBJQVJxUWFpQTBBQnFLQUlBSWdCSUJFQWdBaUFBTmdJQUN5QUJRUUZxSVFFTUFRc0xJQVFvQWdnaEFVRUFJUUFEZnlBQUlBRklCSDhnQkVHUWdDaHFJQUJCQVhRaUFrRURkR29pQXlBREt3TUFJQVJCREdvZ0FFRUNkR29vQWdDM0loV2pPUU1BSUFSQmtJQW9haUFDUVFGeVFRTjBhaUlDSUFJckF3QWdGYU01QXdBZ0FFRUJhaUVBREFFRlFRQUxDd1ZCQUFzTElSUWdEeVFHSUJRTDZBVUNDbjhCZkNNR0lRUWpCa0dBQW1va0JpQUVRZmdCYWlFSUlBUkI4QUZxSVFvZ0JFSG9BV29oRENBRVFlQUJhaUVGSUFSQjJBRnFJUXNnQkVIUUFXb2hCeUFFUWNnQmFpRUpJQVJCRUdvaEF5QUFRUUJISUFGQkFFZHhCRUFDUUNBQVFZaTVBUkN3QVNJR1JRUkFJQWxCcE1VREtBSUFOZ0lBSUFrZ0FEWUNCRUVBUVFOQnM2b0JJQWtRUFVHa3hRTW9BZ0FRdlFFaEFDQUhRYWZWQXpZQ0FDQUhJQUEyQWdSQkFFRURRYVcyQVNBSEVEMUJmeUVBREFFTElBWkJBRUVDRVBRQklBWW9Ba3dhSUFZb0FnQkJCWFpCQVhFRVFDQUxRYVRGQXlnQ0FEWUNBRUVBUVFOQitLb0JJQXNRUFVHa3hRTW9BZ0FRdlFFaEFDQUZRYWZWQXpZQ0FDQUZJQUEyQWdSQkFFRURRYVcyQVNBRkVEMUJmeUVBQlFKQUlBWVErQUloQnlBR0VQa0NRUUFoQUFKQUFrQURmeUFBUVFSUERRRWdBRUVCYWlFRklBY2dBRUVEZEVHa0ZXb29BZ0FpQUJCUEJIOGdCU0VBREFFRklBVUxDeUVGREFFTElBQkJCRVlFZjBFQVFRTkJwYXNCSUF3UVBVRi9JUUFNQWdWQkFDRUZRYVFWS0FJQUN5RUFDeUFESUFCQkFTQUdFR0ZCQVVjRVFDQUtRYVRGQXlnQ0FEWUNBRUVBUVFOQjlhc0JJQW9RUFVHa3hRTW9BZ0FRdlFFaEFDQUlRYWZWQXpZQ0FDQUlJQUEyQWdSQkFFRURRYVcyQVNBSUVEMUJmeUVBREFFTElBTWdCVFlDc0FFZ0F4RFlCQ0FGUVFGR0lnY0VRQ0FES3dONElRMGdBeUFEUVlBQmFpSUFLd01BT1FONElBTWdEVGtEZ0FFRklBTkJnQUZxSVFBTElBRWdBMEc0QVJCTUdpQUVJQUkyQWdCQkFTRUNBMEFnQWtFQlRnUkFRUUFoQUF3Q0N5QUVLQUlBUVFOcVFYeHhJZ2tvQWdBaENDQUVJQWxCQkdvMkFnQWdDQ0FCS0FLd0FUWUNzQUVnQXlBQktBS3dBVUVEZEVHY0ZXb29BZ0JCQVNBR0VHRkJBVWNFUUVGL0lRQU1BZ3NnQXlBRk5nS3dBU0FERU5nRUlBY0VRQ0FES3dONElRMGdBeUFBS3dNQU9RTjRJQUFnRFRrREFBc2dDQ0FEUWJnQkVFd2FJQUpCQVdvaEFnd0FBQXNBQ3dzZ0JoQnFDd1ZCZnlFQUN5QUVKQVlnQUF1VEFRRUVmd05BQWtBZ0JDQUNUZzBBSUFBb0FoZ2lBeUFBS0FJY0lnVkpCSDhnQXlBQklBSWdCR3NpQmlBRklBTnJRUUoxSWdNZ0JpQURTQnNpQXhDbkFTQUFJQUFvQWhnZ0EwRUNkR28yQWhnZ0F5QUVhaUVFSUFOQkFuUWdBV29GSUFBZ0FTZ0NBQ0FBS0FJQUtBSTBRVDl4UVlvQmFoRUNBRUYvUmcwQklBUkJBV29oQkNBQlFRUnFDeUVCREFFTEN5QUVDek1BSUFBZ0FDZ0NBQ2dDSkVIL0FIRkJDR29SQUFCQmYwWUVmMEYvQlNBQUlBQW9BZ3dpQUVFRWFqWUNEQ0FBS0FJQUN3dVVBUUVFZndOQUFrQWdCQ0FDVGcwQUlBQW9BZ3dpQXlBQUtBSVFJZ1ZKQkg4Z0FTQURJQUlnQkdzaUJpQUZJQU5yUVFKMUlnTWdCaUFEU0JzaUF4Q25BU0FBSUFBb0Fnd2dBMEVDZEdvMkFnd2dBMEVDZENBQmFnVWdBQ0FBS0FJQUtBSW9RZjhBY1VFSWFoRUFBQ0lEUVg5R0RRRWdBU0FETmdJQVFRRWhBeUFCUVFScUN5RUJJQU1nQkdvaEJBd0JDd3NnQkF1UUFRRUVmd05BQWtBZ0JDQUNUZzBBSUFBb0FoZ2lBeUFBS0FJY0lnVkpCSDhnQXlBQklBSWdCR3NpQmlBRklBTnJJZ01nQmlBRFNCc2lBeENvQVNBQUlBTWdBQ2dDR0dvMkFoZ2dBeUFFYWlFRUlBRWdBMm9GSUFBb0FnQW9BalFoQXlBQUlBRXNBQUFRUWlBRFFUOXhRWW9CYWhFQ0FFRi9SZzBCSUFSQkFXb2hCQ0FCUVFGcUN5RUJEQUVMQ3lBRUN6VUFJQUFnQUNnQ0FDZ0NKRUgvQUhGQkNHb1JBQUJCZjBZRWYwRi9CU0FBSUFBb0Fnd2lBRUVCYWpZQ0RDQUFMQUFBRUVJTEM0MEJBUVIvQTBBQ1FDQUVJQUpPRFFBZ0FDZ0NEQ0lESUFBb0FoQWlCVWtFZnlBQklBTWdBaUFFYXlJR0lBVWdBMnNpQXlBR0lBTklHeUlERUtnQklBQWdBeUFBS0FJTWFqWUNEQ0FCSUFOcUJTQUFJQUFvQWdBb0FpaEIvd0J4UVFocUVRQUFJZ05CZjBZTkFTQUJJQU1RUWpvQUFFRUJJUU1nQVVFQmFnc2hBU0FESUFScUlRUU1BUXNMSUFRTEN3QWdBQkNkQWlBQUVEZ0xTQUVDZnlBQUtBSW9JUUVEUUNBQkJFQWdBQ2dDSUNBQlFYOXFJZ0ZCQW5ScUtBSUFJUUpCQUNBQUlBQW9BaVFnQVVFQ2RHb29BZ0FnQWtFRGNVSDJCV29SQmdBTUFRc0xDd1FBUVFBTE13RUNmeU1HSVFFakJrRVFhaVFHSUFFZ0FEWUNBQ0FCSUFFb0FnQTJBZ1FnQVNnQ0JDZ0NCQkNJQXlFQ0lBRWtCaUFDQ3lrQkFYOGpCaUVBSXdaQkVHb2tCaUFBUVl1SkF6WUNBRUd3K1FCQkJ5QUFLQUlBRUFnZ0FDUUdDeWtCQVg4akJpRUFJd1pCRUdva0JpQUFRZXVJQXpZQ0FFRzQrUUJCQnlBQUtBSUFFQWdnQUNRR0N5a0JBWDhqQmlFQUl3WkJFR29rQmlBQVFjeUlBellDQUVIQStRQkJCaUFBS0FJQUVBZ2dBQ1FHQ3lrQkFYOGpCaUVBSXdaQkVHb2tCaUFBUWQ2R0F6WUNBRUhJK1FCQkJTQUFLQUlBRUFnZ0FDUUdDeWtCQVg4akJpRUFJd1pCRUdva0JpQUFRY0NHQXpZQ0FFSFErUUJCQkNBQUtBSUFFQWdnQUNRR0Mrb0ZBUVo4QW44Q1FBSkFBa0FDUUFKQUFrQWdCVUVCYXc0RUF3SUJBQVFMSUFBckF3QWdBU0FBS3dNd0lnaWhJQUJCUUdzckF3QWlCcUlnQUNzRElDSUpveUlCSUFHaUlBSWdBQ3NET0NJS29TQUdvaUFBS3dNb0lndWpJZ0lnQXFLZ0lnYWlSQUFBQUFBQUFQQS9vQ0FHSUFBckF3Z2dCcUtpb0NFSElBTWdDQ0FKSUFBckF4Z2lDQ0FHSUFFZ0FVUUFBQUFBQUFBQVFLS2lvS0lnQWlBQUt3TVFJZ2xFQUFBQUFBQUFBRUNpSUFHaW9pQUJJQWVpb0tDaW9Ea0RBQ0FLSUFzZ0FpQUlSQUFBQUFBQUFBQkFvaUFCb3FJZ0NTQUdJQUlnQWtRQUFBQUFBQUFBUUtLaW9LSWdBaUFIb3FDZ29xQWhBUXdFQ3lBQklBQXJBd0FpQnFFZ0FDc0RFQ0lIb2lJQlJBQUFBQUFBQUFBQVlTQUhJQUlnQUNzRENLR2lJZ0pFQUFBQUFBQUFBQUJoY1FSOElBTWdCamtEQUNBQUt3TUlCU0FESUFZZ0FDc0RHQ0FCUkFBQUFBQUFBUEEvSUFFZ0FhSWdBaUFDb3FBaUFTQUFLd01nUkFBQUFBQ0UxNWRCbzZLaElBRWdBU0FBS3dNb1JBQUFBQUNFMTVkQm8wUUFBQUFBQUdyNFFLT2lvcUVpQWFLaW9Ea0RBQ0FBS3dNSUlBSWdBYUtnQ3lFQkRBTUxJQUVnQUNzREFDSUdvU0FBS3dNUUlnZWlJZ0ZFQUFBQUFBQUFBQUJoSUFjZ0FpQUFLd01Jb2FJaUFrUUFBQUFBQUFBQUFHRnhCSHdnQXlBR09RTUFJQUFyQXdnRklBTWdCaUFCUkFBQUFBQUFBUEEvSUFFZ0FhSWdBaUFDb3FBaUFTQUFLd01ZUkFBQUFBQ0UxNWRCbzZLaElBRWdBU0FBS3dNZ1JBQUFBQUNFMTVkQm8wUUFBQUFBQUdyNFFLT2lvcUVpQWFLZ09RTUFJQUFyQXdnZ0FpQUJvcUFMSVFFTUFnc2dBU0FBS3dNQUlnYWhJQUFyQXhBaUI2SWlBVVFBQUFBQUFBQUFBR0VnQnlBQ0lBQXJBd2lob2lJQ1JBQUFBQUFBQUFBQVlYRUVmQ0FESUFZNUF3QWdBQ3NEQ0FVZ0F5QUdJQUZFQUFBQUFBQUE4RDhnQVNBQm9pQUNJQUtpb0NBQUt3TVlSQUFBQUFDRTE1ZEJvNktoSWdHaW9Ea0RBQ0FBS3dNSUlBSWdBYUtnQ3lFQkRBRUxRWDhNQVFzZ0JDQUJPUU1BUVFBTEdnc3BBUUYvSXdZaEFDTUdRUkJxSkFZZ0FFSE1oQU0yQWdCQmlQb0FRUUFnQUNnQ0FCQUlJQUFrQmdzcEFRRi9Jd1loQUNNR1FSQnFKQVlnQUVIZGd3TTJBZ0JCbVBrQUlBQW9BZ0JCQ0JBV0lBQWtCZ3NwQVFGL0l3WWhBQ01HUVJCcUpBWWdBRUhYZ3dNMkFnQkJrUGtBSUFBb0FnQkJCQkFXSUFBa0Jnc3RBUUYvSXdZaEFDTUdRUkJxSkFZZ0FFSEpnd00yQWdCQmlQa0FJQUFvQWdCQkJFRUFRWDhRQ2lBQUpBWUxOUUVCZnlNR0lRQWpCa0VRYWlRR0lBQkJ4SU1ETmdJQVFZRDVBQ0FBS0FJQVFRUkJnSUNBZ0hoQi8vLy8vd2NRQ2lBQUpBWUxMUUVCZnlNR0lRQWpCa0VRYWlRR0lBQkJ0NE1ETmdJQVFmajRBQ0FBS0FJQVFRUkJBRUYvRUFvZ0FDUUdDelVCQVg4akJpRUFJd1pCRUdva0JpQUFRYk9EQXpZQ0FFSHcrQUFnQUNnQ0FFRUVRWUNBZ0lCNFFmLy8vLzhIRUFvZ0FDUUdDeThCQVg4akJpRUFJd1pCRUdva0JpQUFRYVNEQXpZQ0FFSG8rQUFnQUNnQ0FFRUNRUUJCLy84REVBb2dBQ1FHQ3pFQkFYOGpCaUVBSXdaQkVHb2tCaUFBUVo2REF6WUNBRUhnK0FBZ0FDZ0NBRUVDUVlDQWZrSC8vd0VRQ2lBQUpBWUxMZ0VCZnlNR0lRQWpCa0VRYWlRR0lBQkJrSU1ETmdJQVFkRDRBQ0FBS0FJQVFRRkJBRUgvQVJBS0lBQWtCZ3N2QVFGL0l3WWhBQ01HUVJCcUpBWWdBRUdFZ3dNMkFnQkIyUGdBSUFBb0FnQkJBVUdBZjBIL0FCQUtJQUFrQmdzdkFRRi9Jd1loQUNNR1FSQnFKQVlnQUVIL2dnTTJBZ0JCeVBnQUlBQW9BZ0JCQVVHQWYwSC9BQkFLSUFBa0Jnc2ZBUUYvSXdZaEFDTUdRUkJxSkFZZ0FFR20xUU0yQWdBUTRBUWdBQ1FHQ3dZQVFlREZBd3NHQUVIY3hRTUxCZ0JCMU1VREN3Z0FRZVRGQXhBMkMzQUJBbjhnQUNBQktBSUlRUUFRZ1FFRVFDQUJJQUlnQXhEekFnVUNRQ0FBUVJCcUlBQW9BZ3dpQkVFRGRHb2hCU0FBUVJCcUlBRWdBaUFERU9FRUlBUkJBVW9FUUNBQVFSaHFJUUFEUUNBQUlBRWdBaUFERU9FRUlBRXNBRFlOQWlBQVFRaHFJZ0FnQlVrTkFBc0xDd3NMeFFRQkEzOGdBQ0FCS0FJSUlBUVFnUUVFUUNBQklBSWdBeER5QWdVQ1FDQUFJQUVvQWdBZ0JCQ0JBVVVFUUNBQUtBSU1JUVVnQUVFUWFpQUJJQUlnQXlBRUVKNENJQVZCQVV3TkFTQUFRUkJxSUFWQkEzUnFJUVlnQUVFWWFpRUZJQUFvQWdnaUFFRUNjVVVFUUNBQktBSWtRUUZIQkVBZ0FFRUJjVVVFUUFOQUlBRXNBRFlOQlNBQktBSWtRUUZHRFFVZ0JTQUJJQUlnQXlBRUVKNENJQVZCQ0dvaUJTQUdTUTBBREFVQUN3QUxBMEFnQVN3QU5nMEVJQUVvQWlSQkFVWUVRQ0FCS0FJWVFRRkdEUVVMSUFVZ0FTQUNJQU1nQkJDZUFpQUZRUWhxSWdVZ0Jra05BQXNNQXdzTEEwQWdBU3dBTmcwQ0lBVWdBU0FDSUFNZ0JCQ2VBaUFGUVFocUlnVWdCa2tOQUFzTUFRc2dBU2dDRUNBQ1J3UkFJQUVvQWhRZ0FrY0VRQ0FCSUFNMkFpQWdBU2dDTEVFRVJ3UkFJQUJCRUdvZ0FDZ0NERUVEZEdvaEIwRUFJUU1nQUVFUWFpRUdJQUVDZndKQUEwQUNRQ0FHSUFkUERRQWdBVUVBT2dBMElBRkJBRG9BTlNBR0lBRWdBaUFDUVFFZ0JCRHZBaUFCTEFBMkRRQWdBU3dBTlFSQUFrQWdBU3dBTkVVRVFDQUFLQUlJUVFGeEJFQkJBU0VGREFJRkRBWUxBQXNnQVNnQ0dFRUJSZ1JBUVFFaEF3d0ZDeUFBS0FJSVFRSnhCSDlCQVNFRlFRRUZRUUVoQXd3RkN5RURDd3NnQmtFSWFpRUdEQUVMQ3lBRkJIOE1BUVZCQkFzTUFRdEJBd3MyQWl3Z0EwRUJjUTBEQ3lBQklBSTJBaFFnQVNBQktBSW9RUUZxTmdJb0lBRW9BaVJCQVVjTkFpQUJLQUlZUVFKSERRSWdBVUVCT2dBMkRBSUxDeUFEUVFGR0JFQWdBVUVCTmdJZ0N3c0xDL1FDQVFsL0lBQWdBU2dDQ0NBRkVJRUJCRUFnQVNBQ0lBTWdCQkR4QWdVZ0FTd0FOQ0VPSUFFc0FEVWhCaUFBUVJCcUlBQW9BZ3dpQjBFRGRHb2hEQ0FCUVFBNkFEUWdBVUVBT2dBMUlBQkJFR29nQVNBQ0lBTWdCQ0FGRU84Q0lBNGdBU3dBTkNJTGNpRUpJQVlnQVN3QU5TSUljaUVHSUFkQkFVb0Vmd0ovSUFCQkdHb2hDZ04vSUFaQkFYRWhCeUFKUVFGeElRWWdBU3dBTmdSQUlBWWhBaUFIREFJTElBdEIvd0Z4QkVBZ0FTZ0NHRUVCUmdSQUlBWWhBaUFIREFNTElBQW9BZ2hCQW5GRkJFQWdCaUVDSUFjTUF3c0ZJQWhCL3dGeEJFQWdBQ2dDQ0VFQmNVVUVRQ0FHSVFJZ0J3d0VDd3NMSUFGQkFEb0FOQ0FCUVFBNkFEVWdDaUFCSUFJZ0F5QUVJQVVRN3dJZ0JpQUJMQUEwSWd0eUlRZ2dCeUFCTEFBMUlnMXlJUVlnQ2tFSWFpSUhJQXhKQkg4Z0J5RUtJQWdoQ1NBTklRZ01BUVVnQ0NFQ0lBWUxDd3NGSUFraEFpQUdDeUVBSUFFZ0FrSC9BWEZCQUVjNkFEUWdBU0FBUWY4QmNVRUFSem9BTlFzTEN3QWdBQ0FCUVFBUWdRRUxLUUVCZnlBQUtBSUFRWFJxSWdBb0FnZ2hBU0FBSUFGQmYybzJBZ2dnQVVFQlNBUkFJQUFRT0FzTEJ3QWdBQ2dDQkF0QUFRRi9JQUFnQVNnQ0NFRUFFSUVCQkVBZ0FTQUNJQU1ROHdJRklBQW9BZ2dpQUNnQ0FDZ0NIQ0VFSUFBZ0FTQUNJQU1nQkVFZmNVSDZCV29SQndBTEM1Z0NBUUovSUFBZ0FTZ0NDQ0FFRUlFQkJFQWdBU0FDSUFNUThnSUZBa0FnQUNBQktBSUFJQVFRZ1FGRkJFQWdBQ2dDQ0NJQUtBSUFLQUlZSVFVZ0FDQUJJQUlnQXlBRUlBVkJQM0ZCbWdacUVRVUFEQUVMSUFFb0FoQWdBa2NFUUNBQktBSVVJQUpIQkVBZ0FTQUROZ0lnSUFFb0FpeEJCRWNFUUNBQlFRQTZBRFFnQVVFQU9nQTFJQUFvQWdnaUFDZ0NBQ2dDRkNFRElBQWdBU0FDSUFKQkFTQUVJQU5CQjNGQjJnWnFFUXdBSUFFc0FEVUVRQ0FCTEFBMFJTRUdJQUZCQXpZQ0xDQUdSUTBFQlNBQlFRUTJBaXdMQ3lBQklBSTJBaFFnQVNBQktBSW9RUUZxTmdJb0lBRW9BaVJCQVVjTkFpQUJLQUlZUVFKSERRSWdBVUVCT2dBMkRBSUxDeUFEUVFGR0JFQWdBVUVCTmdJZ0N3c0xDMFlCQVg4Z0FDQUJLQUlJSUFVUWdRRUVRQ0FCSUFJZ0F5QUVFUEVDQlNBQUtBSUlJZ0FvQWdBb0FoUWhCaUFBSUFFZ0FpQURJQVFnQlNBR1FRZHhRZG9HYWhFTUFBc0x3QVlDQTM4R2ZDTUdJUVFqQmtIZ0FHb2tCZ0pBSUFBckExaEVBQUFBQUFBQUFBQm1CRUFEUUNBRlFRTkdEUUpCQUNFREEwQWdBMEVFUndSQUlBVkJCWFFnQkdvZ0EwRURkR29nQlVFRmRDQUFhaUFEUVFOMGFpc0RBRGtEQUNBRFFRRnFJUU1NQVFzTElBVkJBV29oQlF3QUFBc0FCUU5BSUFWQkEwWU5Ba0VBSVFNRFFDQURRUVJIQkVBZ0JVRUZkQ0FFYWlBRFFRTjBhaUFGUVFWMElBQnFJQU5CQTNScUt3TUFtamtEQUNBRFFRRnFJUU1NQVFzTElBVkJBV29oQlF3QUFBc0FDd0FMUVFBaEF3TkFJQU5CQTBjRVFFRUFJUUFEUUNBQVFRUkhCRUFnQTBFRmRDQUJhaUFBUVFOMGFrUUFBQUFBQUFBQUFEa0RBQ0FBUVFGcUlRQU1BUXNMSUFOQkFXb2hBd3dCQ3dzZ0FTQUVRVUJyS3dNQUlnZ2dCQ3NEU0NJR0lBUXJBMUFpQ2hEd0FpSUhPUU5RSUFKQlFHc2lBQ0FJSUFlaklnZzVBd0FnQWlBR0lBRXJBMUNqSWdZNUEwZ2dBaUFLSUFFckExQ2pJZ2M1QTFBZ0FpQUVLd05ZSUFFckExQ2pPUU5ZSUFFZ0NDQUdJQWNnQkNzRElDSUlJQVFyQXlnaUJpQUVLd013SWdjUTdnSWlDVGtETUNBQklBZ2dDU0FBS3dNQW9xRWlDaUFHSUFrZ0Fpc0RTS0toSWdnZ0J5QUpJQUlyQTFDaW9TSUdFUEFDSWdjNUF5Z2dBaUFLSUFlak9RTWdJQUlnQ0NBQkt3TW9vemtES0NBQ0lBWWdBU3NES0tNNUF6QWdBU0FBS3dNQUlBSXJBMGdnQWlzRFVDQUVLd01BSWdnZ0JDc0RDQ0lHSUFRckF4QWlCeER1QWlJTE9RTVFJQUVnQWlzRElDQUNLd01vSUFJckF6QWdDQ0FHSUFjUTdnSWlDVGtEQ0NBQklBZ2dDU0FDS3dNZ29xRWdDeUFBS3dNQW9xRWlDaUFHSUFrZ0Fpc0RLS0toSUFzZ0Fpc0RTS0toSWdnZ0J5QUpJQUlyQXpDaW9TQUxJQUlyQTFDaW9TSUdFUEFDSWdjNUF3QWdBaUFLSUFlak9RTUFJQUlnQ0NBQkt3TUFvemtEQ0NBQ0lBWWdBU3NEQUtNNUF4QWdBaUFFS3dNNElBRXJBekFnQWlzRFdDSUdvcUVnQVNzREtLTWlCemtET0NBQ0lBUXJBeGdnQnlBQkt3TUlvcUVnQmlBQkt3TVFvcUVnQVNzREFLTTVBeGhCQUNFREEwQWdBMEVEUndSQVFRQWhBZ05BSUFKQkEwY0VRQ0FEUVFWMElBRnFJQUpCQTNScUlnQWdBQ3NEQUNBQkt3TlFvemtEQUNBQ1FRRnFJUUlNQVFzTElBTkJBV29oQXd3QkN3c2dCQ1FHUVFBTEdnQWdBQ0FCS0FJSVFRQVFnUUVFUUNBQklBSWdBeER6QWdzTGt3RUFJQUFnQVNnQ0NDQUVFSUVCQkVBZ0FTQUNJQU1ROGdJRklBQWdBU2dDQUNBRUVJRUJCRUFDUUNBQktBSVFJQUpIQkVBZ0FTZ0NGQ0FDUndSQUlBRWdBellDSUNBQklBSTJBaFFnQVNBQktBSW9RUUZxTmdJb0lBRW9BaVJCQVVZRVFDQUJLQUlZUVFKR0JFQWdBVUVCT2dBMkN3c2dBVUVFTmdJc0RBSUxDeUFEUVFGR0JFQWdBVUVCTmdJZ0N3c0xDd3NjQUNBQUlBRW9BZ2dnQlJDQkFRUkFJQUVnQWlBRElBUVE4UUlMQzlJQkFRSi9Jd1loQXlNR1FVQnJKQVlnQUNBQlFRQVFnUUVFZjBFQkJTQUJCSDhnQVVIQTl3QkJzUGNBRU9RRUlnRUVmeUFESUFFMkFnQWdBMEVBTmdJRUlBTWdBRFlDQ0NBRFFYODJBZ3dnQTBJQU53SVFJQU5DQURjQ0dDQURRZ0EzQWlBZ0EwSUFOd0lvSUFOQkFEWUNNQ0FEUVFBN0FUUWdBMEVBT2dBMklBTkJBVFlDTUNBQktBSUFLQUljSVFBZ0FTQURJQUlvQWdCQkFTQUFRUjl4UWZvRmFoRUhBQ0FES0FJWVFRRkdCSDhnQWlBREtBSVFOZ0lBUVFFRlFRQUxCVUVBQ3dWQkFBc0xJUVFnQXlRR0lBUUwzUUVCQlg4akJpRUFJd1pCTUdva0JpQUFRUmhxSVFJZ0FFRVFhaUVCSUFCQkpHb2hBMEhNeFFNb0FnQWlCQVJBSUFKQjlmOENOZ0lBUWNQL0FpQUNFSjhDSUFNZ0JFSFFBR28yQWdBZ0JDZ0NBQ0lFS0FJRUlRSkJxUGNBSUFRZ0EwR285d0FvQWdBb0FoQkJQM0ZCeWdGcUVRUUFCRUFnQXlnQ0FDSUJLQUlBS0FJSUlRTWdBU0FEUWY4QWNVRUlhaEVBQUNFQklBQkI5ZjhDTmdJQUlBQWdBallDQkNBQUlBRTJBZ2hCN2Y0Q0lBQVFud0lGSUFGQjlmOENOZ0lBSUFFZ0FqWUNCRUdhL3dJZ0FSQ2ZBZ3NMUWVuL0FpQUFRU0JxRUo4Q0M2Y0VBUUo4SUFHM0lBQW9BZ0Mzb3lFRUlBSzNJQUFvQWdTM295RUZJQU1nQVRZQ0FDQURJQUkyQWdSQkFDRUJBMEFnQVVFRVJ3UkFJQU5CQ0dvZ0FVRURkR29nQkNBQVFRaHFJQUZCQTNScUt3TUFvamtEQUNBRFFTaHFJQUZCQTNScUlBVWdBRUVvYWlBQlFRTjBhaXNEQUtJNUF3QWdBMEhJQUdvZ0FVRURkR29nQUVISUFHb2dBVUVEZEdvckF3QTVBd0FnQVVFQmFpRUJEQUVMQ3dKQUFrQUNRQUpBQWtBQ1FBSkFJQUFvQXJBQklnRkJBV3NPQkFNQ0FRQUVDeUFESUFBckEyZzVBMmdnQXlBQUt3TndPUU53SUFNZ0FDc0RlRGtEZUNBRElBQXJBNEFCT1FPQUFTQURJQVFnQUNzRGlBR2lPUU9JQVNBRElBVWdBQ3NEa0FHaU9RT1FBU0FESUFRZ0FDc0RtQUdpT1FPWUFTQURJQVVnQUNzRG9BR2lPUU9nQVNBRElBQXJBNmdCT1FPb0FRd0VDeUFESUFRZ0FDc0RhS0k1QTJnZ0F5QUZJQUFyQTNDaU9RTndJQU1nQUNzRGVEa0RlQ0FESUFBckE0QUJPUU9BQVNBRElBQXJBNGdCSUFRZ0JhS2pPUU9JQVNBRElBQXJBNUFCSUFVZ0JDQUVvaUFGb3FLak9RT1FBUXdEQ3lBRElBUWdBQ3NEYUtJNUEyZ2dBeUFGSUFBckEzQ2lPUU53SUFNZ0FDc0RlRGtEZUNBRElBQXJBNEFCSUFRZ0JhS2pPUU9BQVNBRElBQXJBNGdCSUFVZ0JDQUVvaUFGb3FLak9RT0lBUXdDQ3lBRElBUWdBQ3NEYUtJNUEyZ2dBeUFGSUFBckEzQ2lPUU53SUFNZ0FDc0RlRGtEZUNBRElBQXJBNEFCSUFRZ0JhS2pPUU9BQVF3QkN3d0JDeUFESUFFMkFyQUJDd3Y3RXdJUmZ3RjhJd1loRkNNR1FSQnFKQVlnRkNFUUlBRkJBaEE1SVEwZ0FrRUNFRGtoRHlBRUtBSUFJZ2NoQWlBTklBOUJmMm9pRVd4QkFYUWdCMm9oQlFOQUlBc2dEVWdFUUNBRlFRQTdBUUFnQWtFQU93RUFJQUpCQW1vaEFpQUZRUUpxSVFVZ0MwRUJhaUVMREFFTEN5QUhJUUlnRFVGL2FpSVNRUUYwSUFkcUlRVkJBQ0VMQTBBZ0N5QVBTQVJBSUFWQkFEc0JBQ0FDUVFBN0FRQWdEVUVCZENBQ2FpRUNJQTFCQVhRZ0JXb2hCU0FMUVFGcUlRc01BUXNMSUFSQmtJRElBR29oQWtFQUlBMXJJUk1nQUNBQlFRRjBRUUpxYWlFT1FRRWhERUVBSVFVZ0RVRUJhaUlBSUFRb0FnUnFJUXNnQUVFQmRDQUhhaUVIQW44Q1FBTkFBa0FnRENBUlRnMENJQVVoQUVFQklRa0RRQ0FKSUJKSUJFQWdEaTBBQUNBRFNnUkFJQWRCQURzQkFDQUxRUUE2QUFBRkFrQWdDMEYvT2dBQUlCTkJBWFFnQjJvaUJTNEJBQ0lHUVFCS0JFQWdCeUFHT3dFQUlBWkJCMndpQlVFQ2RDQUVha0gwLzg4QWFpSUdJQVlvQWdCQkFXbzJBZ0FnQlVFQ2RDQUVha0g0Lzg4QWFpSUdJQWtnQmlnQ0FHbzJBZ0FnQlVFQ2RDQUVha0g4Lzg4QWFpSUdJQXdnQmlnQ0FHbzJBZ0FnQlVFQ2RDQUVha0dNZ05BQWFpQU1OZ0lBREFFTElBVkJmbW91QVFBaUJpRUlJQVpCQUVvaENpQUZMZ0VDSWdWQkFFd0VRQ0FLQkVBZ0J5QUdPd0VBSUFoQkIyd2lCVUVDZENBRWFrSDAvODhBYWlJR0lBWW9BZ0JCQVdvMkFnQWdCVUVDZENBRWFrSDQvODhBYWlJR0lBa2dCaWdDQUdvMkFnQWdCVUVDZENBRWFrSDgvODhBYWlJR0lBd2dCaWdDQUdvMkFnQWdCVUVDZENBRWFrR0VnTkFBYWlJR0tBSUFJQWxJQkVBZ0JpQUpOZ0lBQ3lBRlFRSjBJQVJxUVl5QTBBQnFJQXcyQWdBTUFnc2dCMEYrYWk0QkFDSUZRUUJLQkVBZ0J5QUZPd0VBSUFWQkIyd2lCVUVDZENBRWFrSDAvODhBYWlJR0lBWW9BZ0JCQVdvMkFnQWdCVUVDZENBRWFrSDQvODhBYWlJR0lBa2dCaWdDQUdvMkFnQWdCVUVDZENBRWFrSDgvODhBYWlJR0lBd2dCaWdDQUdvMkFnQWdCVUVDZENBRWFrR0VnTkFBYWlJRktBSUFJQWxPRFFJZ0JTQUpOZ0lBQlNBQVFmLy9BVW9OQmlBSElBQkJBV29pQlRzQkFDQUVRWkNBeUFCcUlBQkJBblJxSUFWQkVIUkJFSFUyQWdBZ0JFR1FnTkFBYWlBQVFRZHNJZ0JCQW5ScVFRRTJBZ0FnQUVFQ2RDQUVha0dVZ05BQWFpQUpOZ0lBSUFCQkFuUWdCR3BCbUlEUUFHb2dERFlDQUNBQVFRSjBJQVJxUVp5QTBBQnFJQWsyQWdBZ0FFRUNkQ0FFYWtHZ2dOQUFhaUFKTmdJQUlBQkJBblFnQkdwQnBJRFFBR29nRERZQ0FDQUFRUUowSUFScVFhaUEwQUJxSUF3MkFnQWdCU0VBQ3d3QkN5QUtCRUFDUUNBRlFRSjBJQVJxUVl5QXlBQnFLQUlBSWdVZ0NFRUNkQ0FFYWtHTWdNZ0FhaWdDQUNJR1NnUkFJQWNnQmpzQkFDQUNJUWhCQUNFS0EwQWdDaUFBVGdSQUlBWWhCUXdEQ3lBRklBZ29BZ0JHQkVBZ0NDQUdOZ0lBQ3lBSVFRUnFJUWdnQ2tFQmFpRUtEQUFBQ3dBRklBY2dCVHNCQUNBRklBWklCRUFnQWlFSVFRQWhDZ05BSUFvZ0FFNE5BeUFHSUFnb0FnQkdCRUFnQ0NBRk5nSUFDeUFJUVFScUlRZ2dDa0VCYWlFS0RBQUFDd0FMQ3dzZ0JVRVFkRUVRZFVFSGJDSUZRUUowSUFScVFmVC96d0JxSWdZZ0JpZ0NBRUVCYWpZQ0FDQUZRUUowSUFScVFmai96d0JxSWdZZ0NTQUdLQUlBYWpZQ0FDQUZRUUowSUFScVFmei96d0JxSWdZZ0RDQUdLQUlBYWpZQ0FDQUZRUUowSUFScVFZeUEwQUJxSUF3MkFnQU1BUXNnQjBGK2FpNEJBQ0lHUVFCTUJFQWdCeUFGT3dFQUlBVkJCMndpQlVFQ2RDQUVha0gwLzg4QWFpSUdJQVlvQWdCQkFXbzJBZ0FnQlVFQ2RDQUVha0g0Lzg4QWFpSUdJQWtnQmlnQ0FHbzJBZ0FnQlVFQ2RDQUVha0g4Lzg4QWFpSUdJQXdnQmlnQ0FHbzJBZ0FnQlVFQ2RDQUVha0dBZ05BQWFpSUdLQUlBSUFsS0JFQWdCaUFKTmdJQUN5QUZRUUowSUFScVFZeUEwQUJxSUF3MkFnQU1BUXNDUUNBRlFRSjBJQVJxUVl5QXlBQnFLQUlBSWdVZ0JrRUNkQ0FFYWtHTWdNZ0FhaWdDQUNJR1NnUkFJQWNnQmpzQkFDQUNJUWhCQUNFS0EwQWdDaUFBVGdSQUlBWWhCUXdEQ3lBRklBZ29BZ0JHQkVBZ0NDQUdOZ0lBQ3lBSVFRUnFJUWdnQ2tFQmFpRUtEQUFBQ3dBRklBY2dCVHNCQUNBRklBWklCRUFnQWlFSVFRQWhDZ05BSUFvZ0FFNE5BeUFHSUFnb0FnQkdCRUFnQ0NBRk5nSUFDeUFJUVFScUlRZ2dDa0VCYWlFS0RBQUFDd0FMQ3dzZ0JVRVFkRUVRZFVFSGJDSUZRUUowSUFScVFmVC96d0JxSWdZZ0JpZ0NBRUVCYWpZQ0FDQUZRUUowSUFScVFmai96d0JxSWdZZ0NTQUdLQUlBYWpZQ0FDQUZRUUowSUFScVFmei96d0JxSWdVZ0RDQUZLQUlBYWpZQ0FBc0xJQTVCQW1vaERpQUxRUUZxSVFzZ0NVRUJhaUVKSUFkQkFtb2hCd3dCQ3dzZ0FTQU9ha0VFYWlFT0lBeEJBV29oRENBQUlRVWdDMEVDYWlFTElBZEJCR29oQnd3QkN3dEJBRUVEUWFpbEFTQVFFRDFCZnd3QkN5QUVRUXhxSVFkQkFTRUFRUUVoQXdOQUlBTWdCVXdFUUNBRElBSW9BZ0FpQzBZRVFDQUFRUUZxSVFFRklBQWhBU0FMUVFKMElBUnFRWXlBeUFCcUtBSUFJUUFMSUFJZ0FEWUNBQ0FCSVFBZ0EwRUJhaUVESUFKQkJHb2hBZ3dCQ3dzZ0JDQUFRWDlxSWdBMkFnZ2dBQVIvSUFkQkFDQUFRUUowRUVVYUlBUkJrSUFvYWtFQUlBQkJCSFFRUlJwQkFDRUJBMEFnQVNBQVNBUkFJQVJCaklBSWFpQUJRUUowSWdKQkFuUnFJQTAyQWdBZ0JFR01nQWhxSUFKQkFYSkJBblJxUVFBMkFnQWdCRUdNZ0FocUlBSkJBbkpCQW5ScUlBODJBZ0FnQkVHTWdBaHFJQUpCQTNKQkFuUnFRUUEyQWdBZ0FVRUJhaUVCREFFTEMwRUFJUUVEUUNBQklBVklCRUFnQkVFTWFpQUVRWkNBeUFCcUlBRkJBblJxS0FJQVFYOXFJZ0pCQW5ScUlnTWdCRUdRZ05BQWFpQUJRUWRzSWdCQkFuUnFLQUlBSUFNb0FnQnFOZ0lBSUFSQmtJQW9haUFDUVFGMElnTkJBM1JxSWdjZ0J5c0RBQ0FBUVFKMElBUnFRWlNBMEFCcUtBSUF0NkE1QXdBZ0JFR1FnQ2hxSUFOQkFYSkJBM1JxSWdNZ0F5c0RBQ0FBUVFKMElBUnFRWmlBMEFCcUtBSUF0NkE1QXdBZ0JFR01nQWhxSUFKQkFuUWlBa0VDZEdvaUF5Z0NBQ0FBUVFKMElBUnFRWnlBMEFCcUtBSUFJZ2RLQkVBZ0F5QUhOZ0lBQ3lBRVFZeUFDR29nQWtFQmNrRUNkR29pQXlnQ0FDQUFRUUowSUFScVFhQ0EwQUJxS0FJQUlnZElCRUFnQXlBSE5nSUFDeUFFUVl5QUNHb2dBa0VDY2tFQ2RHb2lBeWdDQUNBQVFRSjBJQVJxUWFTQTBBQnFLQUlBSWdkS0JFQWdBeUFITmdJQUN5QUVRWXlBQ0dvZ0FrRURja0VDZEdvaUFpZ0NBQ0FBUVFKMElBUnFRYWlBMEFCcUtBSUFJZ0JJQkVBZ0FpQUFOZ0lBQ3lBQlFRRnFJUUVNQVFzTElBUW9BZ2doQVVFQUlRQURmeUFBSUFGSUJIOGdCRUdRZ0NocUlBQkJBWFFpQWtFRGRHb2lBeUFES3dNQUlBUkJER29nQUVFQ2RHb29BZ0MzSWhhak9RTUFJQVJCa0lBb2FpQUNRUUZ5UVFOMGFpSUNJQUlyQXdBZ0ZxTTVBd0FnQUVFQmFpRUFEQUVGUVFBTEN3VkJBQXNMSVJVZ0VDUUdJQlVMQkFBakJnc2JBUUovSXdZaEFpQUFJd1pxSkFZakJrRVBha0Z3Y1NRR0lBSUxDNkdMQTJFQVFZQUlDeEkyVXdBQVBWTUFBRWxUQUFCVFV3QUFZVk1BUWFBSUM5b1QvLy8vLy8vLy8vOEFBQUFBQVFBQUFBRUFBQUFCQUFBQUFBQUFBUC8vLy84QUFBQUFBUUFBQUFFQUFBQUJBQUFBQUFBQUFQLy8vLy8vLy8vLy8vLy8vd0FBQUFFQUFRRUJBQUlFLy84RkF3RUFBdjhHQi84REFRSUNBd0lEQWdNREFQOEVCZ2NGL3dFRUJRUUVCUVVFQlFjR0JnWUhCd2NHL3dJRUJnY0ZBLzhBQVFFQkFRRUJBQUVCQVFBQUFRRUJBUUVBQVFFQUFRRUJBQUVCQVFFQUFRRUFBUUVCQVFBQkFRRUFBUUVBQVFFQkFRRUFBQUVCQVFBQkFRRUJBUUVBQVAvL0EvOEZCdi8vQ1FyL0RQLy9ELzhSRXY4VS8vOFhHUC8vRy84ZEh2Ly9BUUwvQlAvL0J3ai8vd3YvRFE3L0VQLy9FLzhWRnYvL0dSci9IUC8vSHdFQUFBQUNBQUFBQkFBQUFBZ0FBQUFRQUFBQUJRQUFBQW9BQUFBVUFBQUFEUUFBQUJvQUFBQVJBQUFBQndBQUFBNEFBQUFjQUFBQUhRQUFBQjhBQUFBYkFBQUFFd0FBQUFNQUFBQUdBQUFBREFBQUFCZ0FBQUFWQUFBQUR3QUFBQjRBQUFBWkFBQUFGd0FBQUFzQUFBQVdBQUFBQ1FBQUFCSUFBQUFBQUFBQUFRQUFBQUlBQUFBRUFBQUFDQUFBQUFNQUFBQUdBQUFBREFBQUFBc0FBQUFGQUFBQUNnQUFBQWNBQUFBT0FBQUFEd0FBQUEwQUFBQUpBQUFBQUFBQUFQLy8vLzhBQUFBQUFRQUFBQklBQUFBQ0FBQUFCUUFBQUJNQUFBQUxBQUFBQXdBQUFCMEFBQUFHQUFBQUd3QUFBQlFBQUFBSUFBQUFEQUFBQUJjQUFBQUVBQUFBQ2dBQUFCNEFBQUFSQUFBQUJ3QUFBQllBQUFBY0FBQUFHZ0FBQUJVQUFBQVpBQUFBQ1FBQUFCQUFBQUFOQUFBQURnQUFBQmdBQUFBUEFBQUEvLy8vL3dBQUFBQUJBQUFBQkFBQUFBSUFBQUFJQUFBQUJRQUFBQW9BQUFBREFBQUFEZ0FBQUFrQUFBQUhBQUFBQmdBQUFBMEFBQUFMQUFBQURBQUFBQUVBQUFBQ0FBQUFCQUFBQUFnQUFBQVFBQUFBSUFBQUFFQUFBQUFEQUFBQUJnQUFBQXdBQUFBWUFBQUFNQUFBQUdBQUFBQkRBQUFBQlFBQUFBb0FBQUFVQUFBQUtBQUFBRkFBQUFBakFBQUFSZ0FBQUE4QUFBQWVBQUFBUEFBQUFIZ0FBQUJ6QUFBQVpRQUFBRWtBQUFBUkFBQUFJZ0FBQUVRQUFBQUxBQUFBRmdBQUFDd0FBQUJZQUFBQU13QUFBR1lBQUFCUEFBQUFIUUFBQURvQUFBQjBBQUFBYXdBQUFGVUFBQUFwQUFBQVVnQUFBQ2NBQUFCT0FBQUFId0FBQUQ0QUFBQjhBQUFBZXdBQUFIVUFBQUJwQUFBQVVRQUFBQ0VBQUFCQ0FBQUFCd0FBQUE0QUFBQWNBQUFBT0FBQUFIQUFBQUJqQUFBQVJRQUFBQWtBQUFBU0FBQUFKQUFBQUVnQUFBQVRBQUFBSmdBQUFFd0FBQUFiQUFBQU5nQUFBR3dBQUFCYkFBQUFOUUFBQUdvQUFBQlhBQUFBTFFBQUFGb0FBQUEzQUFBQWJnQUFBRjhBQUFBOUFBQUFlZ0FBQUhjQUFBQnRBQUFBV1FBQUFERUFBQUJpQUFBQVJ3QUFBQTBBQUFBYUFBQUFOQUFBQUdnQUFBQlRBQUFBSlFBQUFFb0FBQUFYQUFBQUxnQUFBRndBQUFBN0FBQUFkZ0FBQUc4QUFBQmRBQUFBT1FBQUFISUFBQUJuQUFBQVRRQUFBQmtBQUFBeUFBQUFaQUFBQUVzQUFBQVZBQUFBS2dBQUFGUUFBQUFyQUFBQVZnQUFBQzhBQUFCZUFBQUFQd0FBQUg0QUFBQi9BQUFBZlFBQUFIa0FBQUJ4QUFBQVlRQUFBRUVBQUFBQUFBQUEvLy8vL3dBQUFBQUJBQUFBQndBQUFBSUFBQUFPQUFBQUNBQUFBRGdBQUFBREFBQUFQd0FBQUE4QUFBQWZBQUFBQ1FBQUFGb0FBQUE1QUFBQUZRQUFBQVFBQUFBY0FBQUFRQUFBQUVNQUFBQVFBQUFBY0FBQUFDQUFBQUJoQUFBQUNnQUFBR3dBQUFCYkFBQUFSZ0FBQURvQUFBQW1BQUFBRmdBQUFDOEFBQUFGQUFBQU5nQUFBQjBBQUFBVEFBQUFRUUFBQUY4QUFBQkVBQUFBTFFBQUFCRUFBQUFyQUFBQWNRQUFBSE1BQUFBaEFBQUFUUUFBQUdJQUFBQjFBQUFBQ3dBQUFGY0FBQUJ0QUFBQUl3QUFBRndBQUFCS0FBQUFSd0FBQUU4QUFBQTdBQUFBYUFBQUFDY0FBQUJrQUFBQUZ3QUFBRklBQUFBd0FBQUFkd0FBQUFZQUFBQitBQUFBTndBQUFBMEFBQUFlQUFBQVBnQUFBQlFBQUFCWkFBQUFRZ0FBQUJzQUFBQmdBQUFBYndBQUFFVUFBQUJyQUFBQUxnQUFBQ1VBQUFBU0FBQUFOUUFBQUN3QUFBQmVBQUFBY2dBQUFDb0FBQUIwQUFBQVRBQUFBQ0lBQUFCV0FBQUFUZ0FBQUVrQUFBQmpBQUFBWndBQUFIWUFBQUJSQUFBQURBQUFBSDBBQUFCWUFBQUFQUUFBQUc0QUFBQWFBQUFBSkFBQUFHb0FBQUJkQUFBQU5BQUFBRXNBQUFBcEFBQUFTQUFBQUZVQUFBQlFBQUFBWmdBQUFEd0FBQUI4QUFBQWFRQUFBQmtBQUFBb0FBQUFNd0FBQUdVQUFBQlVBQUFBR0FBQUFIc0FBQUJUQUFBQU1nQUFBREVBQUFCNkFBQUFlQUFBQUhrQUFBQUVBQUFBaUFBQUFBVUFBQUNRQUFBQUJnQUFBSmdBQUFBSkFBQUFzQUFBQU9OWkFBRHBXUUFBN2xrQUFQWlpBQUFBQUFBQXNyNjVQaExjb0w2UXZqaytFdHlndnBDK09iNEFBQUNBc3I2NXZoTGNvRDZRdmptK0V0eWdQcEMrT1Q3U2NoaS9BQUFBQU5KeW1MNDZCZ1MvMG5LWVBqb0dCTC9TY2hnL0FBQUFnTkp5bUQ0NkJnUS8wbktZdmpvR0JEOEFBQUNBVnJnOXYyWk5KRDlXdUwyK1prMGtQMWE0dlQ0QUFBQUFWcmc5UDJaTkpMOVd1TDArWmswa3YxYTR2YjRNNlZnL0FBQUFnQXpwMkQ2WjJUcy9ET25ZdnBuWk96OE02VmkvQUFBQUFBenAyTDZaMlR1L0RPbllQcG5aTzc4QUFBQUEvRk51UC9GbFRyOE5WTzQrOFdWT3Z3MVU3cjRBQUFDQS9GTnV2L0ZsVGo4TlZPNis4V1ZPUHcxVTdqNEFBSUMvQUFBQUFBQUFBTC9RczEyL0FBQUFQOUN6WGI4QUFJQS9BQUFBZ0FBQUFEL1FzMTAvQUFBQXY5Q3pYVDl3UEFBQWNEd0FBSEE4QUFCd1BBQUFqS3dBQUtLc0FBRENyQUFBNTZ3QUFBR3RBQUFnclFBQU5hMEFBRkt0QUFCOHJRQUF2SzBBQU51dEFBRHlyUUFBQ0s0QUFCeXVBQUJacmdBQWlhNEFBS1d1QUFESXJnQUEvNjRBQURhdkFBQk5yd0FBYmE4QUFKZXZBQURrcndBQS82OEFBQ3F3QUFCR3NBQUFhN0FBQUpHd0FBQzJzQUFBeWJBQUFONndBQUR4c0FBQUJMRUFBQ214QUFBK3NRQUFVckVBQUhPeEFBQ0pzUUFBdUxFQUFPQ3hBQUFCc2dBQUlySUFBRkd5QUFCaXNnQUFmcklBQUx5eUFBRGpzZ0FBQ3JNQUFCNnpBQUJNc3dBQWRMTUFBSkN6QUFDMXN3QUExN01BQUFHMEFBQXN0QUFBU3JRQUFIaTBBQUNndEFBQXg3UUFBUEswQUFBZnRRQUFUN1VBQUhtMUFBQ210UUFBeWJVQUFPZTFBQUFGdGdBQU83WUFBR1cyQUFDRXRnQUFwN1lBQU02MkFBRGp0Z0FBOTdZQUFDeTNBQUE4dHdBQWVyY0FBTHkzQUFEbXR3QUFFcmdBQURtNEFBQlZ1QUFBZ0xnQUFKdTRBQUN2dUFBQXhyZ0FBTk80QUFEN3VBQUFNTGtBQUd5NUFBQ2F1UUFBdTdrQUFPSzVBQUQ3dVFBQUk3b0FBRWE2QUFCZXVnQUFncm9BQUtlNkFBQ3R1Z0FBNXJvQUFDQzdBQUEvdXdBQVRyc0FBR3U3QUFDSnV3QUFwcnNBQUwrN0FBRFl1d0FBR3J3QUFGUzhBQUNLdkFBQXZyd0FBTks4QUFEcHZBQUFENzBBQURhOUFBQjR2UUFBdEwwQUFPVzlBQUFKdmdBQU43NEFBRksrQUFDS3ZnQUF0YjRBUVlRY0M3MEVBUUFBQUFnQUFBQVFBQUFBQ1FBQUFBSUFBQUFEQUFBQUNnQUFBQkVBQUFBWUFBQUFJQUFBQUJrQUFBQVNBQUFBQ3dBQUFBUUFBQUFGQUFBQURBQUFBQk1BQUFBYUFBQUFJUUFBQUNnQUFBQXdBQUFBS1FBQUFDSUFBQUFiQUFBQUZBQUFBQTBBQUFBR0FBQUFCd0FBQUE0QUFBQVZBQUFBSEFBQUFDTUFBQUFxQUFBQU1RQUFBRGdBQUFBNUFBQUFNZ0FBQUNzQUFBQWtBQUFBSFFBQUFCWUFBQUFQQUFBQUZ3QUFBQjRBQUFBbEFBQUFMQUFBQURNQUFBQTZBQUFBT3dBQUFEUUFBQUF0QUFBQUpnQUFBQjhBQUFBbkFBQUFMZ0FBQURVQUFBQThBQUFBUFFBQUFEWUFBQUF2QUFBQU53QUFBRDRBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBQUFBQUFBQkFBQUFDQUFBQUJBQUFBQUpBQUFBQWdBQUFBTUFBQUFLQUFBQUVRQUFBQmdBQUFBZ0FBQUFHUUFBQUJJQUFBQUxBQUFBQkFBQUFBVUFBQUFNQUFBQUV3QUFBQm9BQUFBaEFBQUFLQUFBQURBQUFBQXBBQUFBSWdBQUFCc0FBQUFVQUFBQURRQUFBQVlBQUFBT0FBQUFGUUFBQUJ3QUFBQWpBQUFBS2dBQUFERUFBQUF5QUFBQUt3QUFBQ1FBQUFBZEFBQUFGZ0FBQUI0QUFBQWxBQUFBTEFBQUFETUFBQUEwQUFBQUxRQUFBQ1lBQUFBdUFBQUFOUUFBQURZQUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FFSFVJQXZ0QWdFQUFBQUlBQUFBRUFBQUFBa0FBQUFDQUFBQUF3QUFBQW9BQUFBUkFBQUFHQUFBQUNBQUFBQVpBQUFBRWdBQUFBc0FBQUFFQUFBQUJRQUFBQXdBQUFBVEFBQUFHZ0FBQUNFQUFBQW9BQUFBS1FBQUFDSUFBQUFiQUFBQUZBQUFBQTBBQUFBVkFBQUFIQUFBQUNNQUFBQXFBQUFBS3dBQUFDUUFBQUFkQUFBQUpRQUFBQ3dBQUFBdEFBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBQUFBQUFBQkFBQUFDQUFBQUJBQUFBQUpBQUFBQWdBQUFBTUFBQUFLQUFBQUVRQUFBQmdBQUFBZ0FBQUFHUUFBQUJJQUFBQUxBQUFBQkFBQUFBd0FBQUFUQUFBQUdnQUFBQ0VBQUFBaUFBQUFHd0FBQUJRQUFBQWNBQUFBSXdBQUFDUUFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BRUhVSXd2ZEFRRUFBQUFJQUFBQUVBQUFBQWtBQUFBQ0FBQUFBd0FBQUFvQUFBQVJBQUFBR0FBQUFCa0FBQUFTQUFBQUN3QUFBQk1BQUFBYUFBQUFHd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBQUFBQUFBUUFBQUFnQUFBQVFBQUFBQ1FBQUFBSUFBQUFLQUFBQUVRQUFBQklBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUVIRUpRdVVCQUVBQUFBSUFBQUFDUUFBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFDQkFSMWFEZ0tHSlJBREZCRVNCQXNJRkFYWUF4Y0cyZ0VaQitVQUhBaHZBQjRKTmdBaENob0FJd3NOQUFrTUJnQUtEUU1BREEwQkFJOFBmMW9rRUNVL0poSHlMQ2NTZkNBb0U3a1hLaFNDRVNzVjd3d3RGcUVKTGhjdkJ6QVlYQVV4R1FZRU14b0RBelFiUUFJMkhMRUJPQjFFQVRrZTlRQTdIN2NBUENDS0FENGhhQUEvSWs0QUlDTTdBQ0VKTEFDbEplRmFRQ1pNU0VFbkRUcERLUEV1UkNrZkprVXFNeDlHSzZnWlNDd1lGVWt0ZHhGS0xuUU9TeS83QzAwdytBbE9NV0VJVHpJR0J6QXp6UVV5Tk40RU1qVVBCRE0yWXdNME45UUNOVGhjQWpZNStBRTNPcVFCT0R0Z0FUazhKUUU2UGZZQU96N0xBRDAvcXdBOUlJOEF3VUVTVzFCQ0JFMVJReXhCVWtUWU4xTkY2QzlVUmp3cFZrZDVJMWRJM3g1WFNha2FTRXBPRjBoTEpCUktUSndSU2sxckQwdE9VUTFOVDdZTFRUQkFDdEJSTWxoWVVoeE5XVk9PUTFwVTNUdGJWZTQwWEZhdUxsMVhtaWxXUnhZbDJGbHdWVjlhcVV4Z1c5bEVZVndpUG1OZEpEaGpYclF5WFZZWEx0OWdxRlpsWVVaUFptTGxSMmRqejBGb1pEMDhZMTFlTjJsbU1WSnFadzlNYTJnNVJtZGpYa0hwYWlkV2JHdm5VRzFuaFV0dWJaZFZiMnRQVU81dkVGcHdiU0pWOEcvcldYRnhIVm9BUWVFcEMvQUJRTVZZbjFOQ1N3QkFTVEtqSXFnUnhWZ2hlL3h6WW1qRldMOUZDekIrR0o5VC9ITkJiVlJpbjFPelFVRXRFaGRDUzJKb1ZHSitXRUpMSVR1NktNTVVBRURGV0o5VFFrc0FRRWt5b3lLb0VVa3l2MFd6UVNFN1NUS0NKemNiNEEyaklnc3dRUzI2S0tNaU54dS9FbzRKcUJGK0dCSVh3eFNvRWVBTmpnbmZCQUFBQUFBQUFQQS83MkZJc1ZBeDlqL0tiMDJScnVmMFA2b1JiTzlpMFBJL0FBQUFBQUFBOEQ4N3Y2ZkFhU1RwUDdzZ3gzdDZVZUUvWGF0eTNsV28wVDhBQUFBQUFRQUFBQUlBQUFBREFBQUFBQUFBQUFFQUFBQUZBQUFBQWdBQUFBUUFBQUFHQUFBQUF3QUFBQWNBQUFBSUFFSGtLd3VkQVFFQUFBQUZBQUFBQmdBQUFBSUFBQUFFQUFBQUJ3QUFBQXdBQUFBREFBQUFDQUFBQUFzQUFBQU5BQUFBQ1FBQUFBb0FBQUFPQUFBQUR3QUFBQUFBQUFBQkFBQUFCUUFBQUFZQUFBQU9BQUFBQWdBQUFBUUFBQUFIQUFBQURRQUFBQThBQUFBREFBQUFDQUFBQUF3QUFBQVFBQUFBRlFBQUFBa0FBQUFMQUFBQUVRQUFBQlFBQUFBV0FBQUFDZ0FBQUJJQUFBQVRBQUFBRndBQUFCZ0FRWlF0QzgwQ0FRQUFBQVVBQUFBR0FBQUFEZ0FBQUE4QUFBQUNBQUFBQkFBQUFBY0FBQUFOQUFBQUVBQUFBQmtBQUFBREFBQUFDQUFBQUF3QUFBQVJBQUFBR0FBQUFCb0FBQUFKQUFBQUN3QUFBQklBQUFBWEFBQUFHd0FBQUNBQUFBQUtBQUFBRXdBQUFCWUFBQUFjQUFBQUh3QUFBQ0VBQUFBVUFBQUFGUUFBQUIwQUFBQWVBQUFBSWdBQUFDTUFBQUFBQUFBQUFRQUFBQVVBQUFBR0FBQUFEZ0FBQUE4QUFBQWJBQUFBQWdBQUFBUUFBQUFIQUFBQURRQUFBQkFBQUFBYUFBQUFIQUFBQUFNQUFBQUlBQUFBREFBQUFCRUFBQUFaQUFBQUhRQUFBQ1lBQUFBSkFBQUFDd0FBQUJJQUFBQVlBQUFBSGdBQUFDVUFBQUFuQUFBQUNnQUFBQk1BQUFBWEFBQUFId0FBQUNRQUFBQW9BQUFBTFFBQUFCUUFBQUFXQUFBQUlBQUFBQ01BQUFBcEFBQUFMQUFBQUM0QUFBQVZBQUFBSVFBQUFDSUFBQUFxQUFBQUt3QUFBQzhBQUFBd0FFSDBMd3ZRQkFFQUFBQUZBQUFBQmdBQUFBNEFBQUFQQUFBQUd3QUFBQndBQUFBQ0FBQUFCQUFBQUFjQUFBQU5BQUFBRUFBQUFCb0FBQUFkQUFBQUtnQUFBQU1BQUFBSUFBQUFEQUFBQUJFQUFBQVpBQUFBSGdBQUFDa0FBQUFyQUFBQUNRQUFBQXNBQUFBU0FBQUFHQUFBQUI4QUFBQW9BQUFBTEFBQUFEVUFBQUFLQUFBQUV3QUFBQmNBQUFBZ0FBQUFKd0FBQUMwQUFBQTBBQUFBTmdBQUFCUUFBQUFXQUFBQUlRQUFBQ1lBQUFBdUFBQUFNd0FBQURjQUFBQThBQUFBRlFBQUFDSUFBQUFsQUFBQUx3QUFBRElBQUFBNEFBQUFPd0FBQUQwQUFBQWpBQUFBSkFBQUFEQUFBQUF4QUFBQU9RQUFBRG9BQUFBK0FBQUFQd0FBQUFBQUFBQUJBQUFBQXdBQUFBY0FBQUFQQUFBQUh3QUFBRDhBQUFCL0FBQUEvd0FBQVA4QkFBRC9Bd0FBL3djQUFQOFBBQUQvSHdBQS96OEFBUDkvQUFBQXdERHdETXc4L0FQRE0vTVB6ei8vZ0VDd2NJeE12SHlEUTdOemowKy9meURnRU5BczdCemNJK01UMHkvdkg5K2dZSkJRckd5Y1hLTmprMU92YjU5ZkNNZzQrQVRFTlBRTHl6djdCOGMzOTRoSXVIaUVSTFIwaTB1N2U0ZEh0M2NvNkJqWUpPUVUxQ3ZyRzlzbjV4ZlhxR2lZV0tSa2xGU3JhNXRicDJlWFZ3TENNdklPemo3K0FjRXg4UTNOUGYyQ1FySnlqazYrZm9GQnNYR05UYjE5SXVJUzBpN3VIdDRoNFJIUkxlMGQzYUppa2xLdWJwNWVvV0dSVWExdG5WMEt5anI2QnNZMjlnbkpPZmtGeFRYMWlrcTZlb1pHdG5hSlNibDVoVVcxZFNycUd0b201aGJXS2VrWjJTWGxGZFdxYXBwYXBtYVdWcWxwbVZtbFpaVlYzaElFbFFBQUFBRC8vLy8vLy8vLy8vLy8vLzhBUWRBMEM4d0JBZ0FBd0FNQUFNQUVBQURBQlFBQXdBWUFBTUFIQUFEQUNBQUF3QWtBQU1BS0FBREFDd0FBd0F3QUFNQU5BQURBRGdBQXdBOEFBTUFRQUFEQUVRQUF3QklBQU1BVEFBREFGQUFBd0JVQUFNQVdBQURBRndBQXdCZ0FBTUFaQUFEQUdnQUF3QnNBQU1BY0FBREFIUUFBd0I0QUFNQWZBQURBQUFBQXN3RUFBTU1DQUFEREF3QUF3d1FBQU1NRkFBRERCZ0FBd3djQUFNTUlBQUREQ1FBQXd3b0FBTU1MQUFERERBQUF3dzBBQU5NT0FBREREd0FBd3dBQURMc0JBQXpEQWdBTXd3TUFETU1FQUF6VEFFR2tPZ3Y1QXdFQUFBQUNBQUFBQXdBQUFBUUFBQUFGQUFBQUJnQUFBQWNBQUFBSUFBQUFDUUFBQUFvQUFBQUxBQUFBREFBQUFBMEFBQUFPQUFBQUR3QUFBQkFBQUFBUkFBQUFFZ0FBQUJNQUFBQVVBQUFBRlFBQUFCWUFBQUFYQUFBQUdBQUFBQmtBQUFBYUFBQUFHd0FBQUJ3QUFBQWRBQUFBSGdBQUFCOEFBQUFnQUFBQUlRQUFBQ0lBQUFBakFBQUFKQUFBQUNVQUFBQW1BQUFBSndBQUFDZ0FBQUFwQUFBQUtnQUFBQ3NBQUFBc0FBQUFMUUFBQUM0QUFBQXZBQUFBTUFBQUFERUFBQUF5QUFBQU13QUFBRFFBQUFBMUFBQUFOZ0FBQURjQUFBQTRBQUFBT1FBQUFEb0FBQUE3QUFBQVBBQUFBRDBBQUFBK0FBQUFQd0FBQUVBQUFBQmhBQUFBWWdBQUFHTUFBQUJrQUFBQVpRQUFBR1lBQUFCbkFBQUFhQUFBQUdrQUFBQnFBQUFBYXdBQUFHd0FBQUJ0QUFBQWJnQUFBRzhBQUFCd0FBQUFjUUFBQUhJQUFBQnpBQUFBZEFBQUFIVUFBQUIyQUFBQWR3QUFBSGdBQUFCNUFBQUFlZ0FBQUZzQUFBQmNBQUFBWFFBQUFGNEFBQUJmQUFBQVlBQUFBR0VBQUFCaUFBQUFZd0FBQUdRQUFBQmxBQUFBWmdBQUFHY0FBQUJvQUFBQWFRQUFBR29BQUFCckFBQUFiQUFBQUcwQUFBQnVBQUFBYndBQUFIQUFBQUJ4QUFBQWNnQUFBSE1BQUFCMEFBQUFkUUFBQUhZQUFBQjNBQUFBZUFBQUFIa0FBQUI2QUFBQWV3QUFBSHdBQUFCOUFBQUFmZ0FBQUg4QVFhREVBQXYvQVFJQUFnQUNBQUlBQWdBQ0FBSUFBZ0FDQUFNZ0FpQUNJQUlnQWlBQ0FBSUFBZ0FDQUFJQUFnQUNBQUlBQWdBQ0FBSUFBZ0FDQUFJQUFnQUNBQUlBQWdBQllBVEFCTUFFd0FUQUJNQUV3QVRBQk1BRXdBVEFCTUFFd0FUQUJNQUV3QWpZQ05nSTJBallDTmdJMkFqWUNOZ0kyQWpZQk1BRXdBVEFCTUFFd0FUQUJNQUkxUWpWQ05VSTFRalZDTlVJeFFqRkNNVUl4UWpGQ01VSXhRakZDTVVJeFFqRkNNVUl4UWpGQ01VSXhRakZDTVVJeFFqRkJNQUV3QVRBQk1BRXdBVEFDTllJMWdqV0NOWUkxZ2pXQ01ZSXhnakdDTVlJeGdqR0NNWUl4Z2pHQ01ZSXhnakdDTVlJeGdqR0NNWUl4Z2pHQ01ZSXhnVEFCTUFFd0FUQUFnQkJwTXdBQy9rREFRQUFBQUlBQUFBREFBQUFCQUFBQUFVQUFBQUdBQUFBQndBQUFBZ0FBQUFKQUFBQUNnQUFBQXNBQUFBTUFBQUFEUUFBQUE0QUFBQVBBQUFBRUFBQUFCRUFBQUFTQUFBQUV3QUFBQlFBQUFBVkFBQUFGZ0FBQUJjQUFBQVlBQUFBR1FBQUFCb0FBQUFiQUFBQUhBQUFBQjBBQUFBZUFBQUFId0FBQUNBQUFBQWhBQUFBSWdBQUFDTUFBQUFrQUFBQUpRQUFBQ1lBQUFBbkFBQUFLQUFBQUNrQUFBQXFBQUFBS3dBQUFDd0FBQUF0QUFBQUxnQUFBQzhBQUFBd0FBQUFNUUFBQURJQUFBQXpBQUFBTkFBQUFEVUFBQUEyQUFBQU53QUFBRGdBQUFBNUFBQUFPZ0FBQURzQUFBQThBQUFBUFFBQUFENEFBQUEvQUFBQVFBQUFBRUVBQUFCQ0FBQUFRd0FBQUVRQUFBQkZBQUFBUmdBQUFFY0FBQUJJQUFBQVNRQUFBRW9BQUFCTEFBQUFUQUFBQUUwQUFBQk9BQUFBVHdBQUFGQUFBQUJSQUFBQVVnQUFBRk1BQUFCVUFBQUFWUUFBQUZZQUFBQlhBQUFBV0FBQUFGa0FBQUJhQUFBQVd3QUFBRndBQUFCZEFBQUFYZ0FBQUY4QUFBQmdBQUFBUVFBQUFFSUFBQUJEQUFBQVJBQUFBRVVBQUFCR0FBQUFSd0FBQUVnQUFBQkpBQUFBU2dBQUFFc0FBQUJNQUFBQVRRQUFBRTRBQUFCUEFBQUFVQUFBQUZFQUFBQlNBQUFBVXdBQUFGUUFBQUJWQUFBQVZnQUFBRmNBQUFCWUFBQUFXUUFBQUZvQUFBQjdBQUFBZkFBQUFIMEFBQUIrQUFBQWZ3QkJvTlFBQzZFQ0NnQUFBR1FBQUFEb0F3QUFFQ2NBQUtDR0FRQkFRZzhBZ0phWUFBRGg5UVgvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL0FBRUNBd1FGQmdjSUNmLy8vLy8vLy84S0N3d05EZzhRRVJJVEZCVVdGeGdaR2hzY0hSNGZJQ0VpSS8vLy8vLy8vd29MREEwT0R4QVJFaE1VRlJZWEdCa2FHeHdkSGg4Z0lTSWovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy93QkIwTllBQ3hnUkFBb0FFUkVSQUFBQUFBVUFBQUFBQUFBSkFBQUFBQXNBUWZEV0FBc2hFUUFQQ2hFUkVRTUtCd0FCRXdrTEN3QUFDUVlMQUFBTEFBWVJBQUFBRVJFUkFFR2gxd0FMQVFzQVFhclhBQXNZRVFBS0NoRVJFUUFLQUFBQ0FBa0xBQUFBQ1FBTEFBQUxBRUhiMXdBTEFRd0FRZWZYQUFzVkRBQUFBQUFNQUFBQUFBa01BQUFBQUFBTUFBQU1BRUdWMkFBTEFRNEFRYUhZQUFzVkRRQUFBQVFOQUFBQUFBa09BQUFBQUFBT0FBQU9BRUhQMkFBTEFSQUFRZHZZQUFzZUR3QUFBQUFQQUFBQUFBa1FBQUFBQUFBUUFBQVFBQUFTQUFBQUVoSVNBRUdTMlFBTERoSUFBQUFTRWhJQUFBQUFBQUFKQUVIRDJRQUxBUXNBUWMvWkFBc1ZDZ0FBQUFBS0FBQUFBQWtMQUFBQUFBQUxBQUFMQUVIOTJRQUxBUXdBUVluYUFBdCtEQUFBQUFBTUFBQUFBQWtNQUFBQUFBQU1BQUFNQUFBd01USXpORFUyTnpnNVFVSkRSRVZHR1JKRU93SS9MRWNVUFRNd0Noc0dSa3RGTnc5SkRvNFhBMEFkUEdrck5oOUtMUndCSUNVcElRZ01GUllpTGhBNFBnczBNUmhrZEhWMkwwRUpmemtSSTBNeVFvbUtpd1VFSmlnbkRTb2VOWXdIR2tpVEU1U1ZBRUdRMndBTDF3NUpiR3hsWjJGc0lHSjVkR1VnYzJWeGRXVnVZMlVBUkc5dFlXbHVJR1Z5Y205eUFGSmxjM1ZzZENCdWIzUWdjbVZ3Y21WelpXNTBZV0pzWlFCT2IzUWdZU0IwZEhrQVVHVnliV2x6YzJsdmJpQmtaVzVwWldRQVQzQmxjbUYwYVc5dUlHNXZkQ0J3WlhKdGFYUjBaV1FBVG04Z2MzVmphQ0JtYVd4bElHOXlJR1JwY21WamRHOXllUUJPYnlCemRXTm9JSEJ5YjJObGMzTUFSbWxzWlNCbGVHbHpkSE1BVm1Gc2RXVWdkRzl2SUd4aGNtZGxJR1p2Y2lCa1lYUmhJSFI1Y0dVQVRtOGdjM0JoWTJVZ2JHVm1kQ0J2YmlCa1pYWnBZMlVBVDNWMElHOW1JRzFsYlc5eWVRQlNaWE52ZFhKalpTQmlkWE41QUVsdWRHVnljblZ3ZEdWa0lITjVjM1JsYlNCallXeHNBRkpsYzI5MWNtTmxJSFJsYlhCdmNtRnlhV3g1SUhWdVlYWmhhV3hoWW14bEFFbHVkbUZzYVdRZ2MyVmxhd0JEY205emN5MWtaWFpwWTJVZ2JHbHVhd0JTWldGa0xXOXViSGtnWm1sc1pTQnplWE4wWlcwQVJHbHlaV04wYjNKNUlHNXZkQ0JsYlhCMGVRQkRiMjV1WldOMGFXOXVJSEpsYzJWMElHSjVJSEJsWlhJQVQzQmxjbUYwYVc5dUlIUnBiV1ZrSUc5MWRBQkRiMjV1WldOMGFXOXVJSEpsWm5WelpXUUFTRzl6ZENCcGN5QmtiM2R1QUVodmMzUWdhWE1nZFc1eVpXRmphR0ZpYkdVQVFXUmtjbVZ6Y3lCcGJpQjFjMlVBUW5KdmEyVnVJSEJwY0dVQVNTOVBJR1Z5Y205eUFFNXZJSE4xWTJnZ1pHVjJhV05sSUc5eUlHRmtaSEpsYzNNQVFteHZZMnNnWkdWMmFXTmxJSEpsY1hWcGNtVmtBRTV2SUhOMVkyZ2daR1YyYVdObEFFNXZkQ0JoSUdScGNtVmpkRzl5ZVFCSmN5QmhJR1JwY21WamRHOXllUUJVWlhoMElHWnBiR1VnWW5WemVRQkZlR1ZqSUdadmNtMWhkQ0JsY25KdmNnQkpiblpoYkdsa0lHRnlaM1Z0Wlc1MEFFRnlaM1Z0Wlc1MElHeHBjM1FnZEc5dklHeHZibWNBVTNsdFltOXNhV01nYkdsdWF5QnNiMjl3QUVacGJHVnVZVzFsSUhSdmJ5QnNiMjVuQUZSdmJ5QnRZVzU1SUc5d1pXNGdabWxzWlhNZ2FXNGdjM2x6ZEdWdEFFNXZJR1pwYkdVZ1pHVnpZM0pwY0hSdmNuTWdZWFpoYVd4aFlteGxBRUpoWkNCbWFXeGxJR1JsYzJOeWFYQjBiM0lBVG04Z1kyaHBiR1FnY0hKdlkyVnpjd0JDWVdRZ1lXUmtjbVZ6Y3dCR2FXeGxJSFJ2YnlCc1lYSm5aUUJVYjI4Z2JXRnVlU0JzYVc1cmN3Qk9ieUJzYjJOcmN5QmhkbUZwYkdGaWJHVUFVbVZ6YjNWeVkyVWdaR1ZoWkd4dlkyc2dkMjkxYkdRZ2IyTmpkWElBVTNSaGRHVWdibTkwSUhKbFkyOTJaWEpoWW14bEFGQnlaWFpwYjNWeklHOTNibVZ5SUdScFpXUUFUM0JsY21GMGFXOXVJR05oYm1ObGJHVmtBRVoxYm1OMGFXOXVJRzV2ZENCcGJYQnNaVzFsYm5SbFpBQk9ieUJ0WlhOellXZGxJRzltSUdSbGMybHlaV1FnZEhsd1pRQkpaR1Z1ZEdsbWFXVnlJSEpsYlc5MlpXUUFSR1YyYVdObElHNXZkQ0JoSUhOMGNtVmhiUUJPYnlCa1lYUmhJR0YyWVdsc1lXSnNaUUJFWlhacFkyVWdkR2x0Wlc5MWRBQlBkWFFnYjJZZ2MzUnlaV0Z0Y3lCeVpYTnZkWEpqWlhNQVRHbHVheUJvWVhNZ1ltVmxiaUJ6WlhabGNtVmtBRkJ5YjNSdlkyOXNJR1Z5Y205eUFFSmhaQ0J0WlhOellXZGxBRVpwYkdVZ1pHVnpZM0pwY0hSdmNpQnBiaUJpWVdRZ2MzUmhkR1VBVG05MElHRWdjMjlqYTJWMEFFUmxjM1JwYm1GMGFXOXVJR0ZrWkhKbGMzTWdjbVZ4ZFdseVpXUUFUV1Z6YzJGblpTQjBiMjhnYkdGeVoyVUFVSEp2ZEc5amIyd2dkM0p2Ym1jZ2RIbHdaU0JtYjNJZ2MyOWphMlYwQUZCeWIzUnZZMjlzSUc1dmRDQmhkbUZwYkdGaWJHVUFVSEp2ZEc5amIyd2dibTkwSUhOMWNIQnZjblJsWkFCVGIyTnJaWFFnZEhsd1pTQnViM1FnYzNWd2NHOXlkR1ZrQUU1dmRDQnpkWEJ3YjNKMFpXUUFVSEp2ZEc5amIyd2dabUZ0YVd4NUlHNXZkQ0J6ZFhCd2IzSjBaV1FBUVdSa2NtVnpjeUJtWVcxcGJIa2dibTkwSUhOMWNIQnZjblJsWkNCaWVTQndjbTkwYjJOdmJBQkJaR1J5WlhOeklHNXZkQ0JoZG1GcGJHRmliR1VBVG1WMGQyOXlheUJwY3lCa2IzZHVBRTVsZEhkdmNtc2dkVzV5WldGamFHRmliR1VBUTI5dWJtVmpkR2x2YmlCeVpYTmxkQ0JpZVNCdVpYUjNiM0pyQUVOdmJtNWxZM1JwYjI0Z1lXSnZjblJsWkFCT2J5QmlkV1ptWlhJZ2MzQmhZMlVnWVhaaGFXeGhZbXhsQUZOdlkydGxkQ0JwY3lCamIyNXVaV04wWldRQVUyOWphMlYwSUc1dmRDQmpiMjV1WldOMFpXUUFRMkZ1Ym05MElITmxibVFnWVdaMFpYSWdjMjlqYTJWMElITm9kWFJrYjNkdUFFOXdaWEpoZEdsdmJpQmhiSEpsWVdSNUlHbHVJSEJ5YjJkeVpYTnpBRTl3WlhKaGRHbHZiaUJwYmlCd2NtOW5jbVZ6Y3dCVGRHRnNaU0JtYVd4bElHaGhibVJzWlFCU1pXMXZkR1VnU1M5UElHVnljbTl5QUZGMWIzUmhJR1Y0WTJWbFpHVmtBRTV2SUcxbFpHbDFiU0JtYjNWdVpBQlhjbTl1WnlCdFpXUnBkVzBnZEhsd1pRQk9ieUJsY25KdmNpQnBibVp2Y20xaGRHbHZiZ0FBQUFBQUFFeERYME5VV1ZCRkFBQUFBRXhEWDA1VlRVVlNTVU1BQUV4RFgxUkpUVVVBQUFBQUFFeERYME5QVEV4QlZFVUFBRXhEWDAxUFRrVlVRVkpaQUV4RFgwMUZVMU5CUjBWVEFFSHc2UUFMbHdJREFBQUFCQUFBQUFRQUFBQUdBQUFBZy9taUFFUk9iZ0Q4S1JVQTBWY25BTjAwOVFCaTI4QUFQSm1WQUVHUVF3QmpVZjRBdTk2ckFMZGh4UUE2YmlRQTBrMUNBRWtHNEFBSjZpNEFISkxSQU9zZC9nQXBzUndBNkQ2bkFQVTFnZ0JFdXk0QW5PbUVBTFFtY0FCQmZsOEExcEU1QUZPRE9RQ2M5RGtBaTErRUFDajV2UUQ0SHpzQTN2K1hBQStZQlFBUkwrOEFDbHFMQUcwZmJRRFBmallBQ2NzbkFFWlB0d0NlWmo4QUxlcGZBTG9uZFFEbDY4Y0FQWHZ4QVBjNUJ3Q1NVb29BKzJ2cUFCK3hYd0FJWFkwQU1BTldBSHY4UmdEd3Eyc0FJTHpQQURiMG1nRGpxUjBBWG1HUkFBZ2I1Z0NGbVdVQW9CUmZBSTFBYUFDQTJQOEFKM05OQUFZR01RREtWaFVBeWFoekFIdmlZQUJyak1BQVFaUHNBQXY5QTBEN0lmay9BQUFBQUMxRWRENEFBQUNBbUViNFBBQUFBR0JSekhnN0FBQUFnSU1iOERrQUFBQkFJQ1Y2T0FBQUFJQWlndU0yQUFBQUFCM3phVFU0WSswKzJnOUpQMTZZZXovYUQ4ay9hVGVzTVdnaElqTzBEeFF6YUNHaU13QUFBQUFDQUFBQUF3QUFBQVVBQUFBSEFBQUFDd0FBQUEwQUFBQVJBQUFBRXdBQUFCY0FBQUFkQUFBQUh3QUFBQ1VBQUFBcEFBQUFLd0FBQUM4QUFBQTFBQUFBT3dBQUFEMEFBQUJEQUFBQVJ3QUFBRWtBQUFCUEFBQUFVd0FBQUZrQUFBQmhBQUFBWlFBQUFHY0FBQUJyQUFBQWJRQUFBSEVBQUFCL0FBQUFnd0FBQUlrQUFBQ0xBQUFBbFFBQUFKY0FBQUNkQUFBQW93QUFBS2NBQUFDdEFBQUFzd0FBQUxVQUFBQy9BQUFBd1FBQUFNVUFBQURIQUFBQTB3QUFBQUVBQUFBTEFBQUFEUUFBQUJFQUFBQVRBQUFBRndBQUFCMEFBQUFmQUFBQUpRQUFBQ2tBQUFBckFBQUFMd0FBQURVQUFBQTdBQUFBUFFBQUFFTUFBQUJIQUFBQVNRQUFBRThBQUFCVEFBQUFXUUFBQUdFQUFBQmxBQUFBWndBQUFHc0FBQUJ0QUFBQWNRQUFBSGtBQUFCL0FBQUFnd0FBQUlrQUFBQ0xBQUFBandBQUFKVUFBQUNYQUFBQW5RQUFBS01BQUFDbkFBQUFxUUFBQUswQUFBQ3pBQUFBdFFBQUFMc0FBQUMvQUFBQXdRQUFBTVVBQUFESEFBQUEwUUFBQURBeE1qTTBOVFkzT0RsaFltTmtaV1pCUWtORVJVWjRXQ3N0Y0ZCcFNXNU9BRUdnOEFBTGdRRWxBQUFBYlFBQUFDOEFBQUFsQUFBQVpBQUFBQzhBQUFBbEFBQUFlUUFBQUNVQUFBQlpBQUFBTFFBQUFDVUFBQUJ0QUFBQUxRQUFBQ1VBQUFCa0FBQUFKUUFBQUVrQUFBQTZBQUFBSlFBQUFFMEFBQUE2QUFBQUpRQUFBRk1BQUFBZ0FBQUFKUUFBQUhBQUFBQUFBQUFBSlFBQUFFZ0FBQUE2QUFBQUpRQUFBRTBBUWJEeEFBdTVBU1VBQUFCSUFBQUFPZ0FBQUNVQUFBQk5BQUFBT2dBQUFDVUFBQUJUQUFBQUpRQUFBRWdBQUFBNkFBQUFKUUFBQUUwQUFBQTZBQUFBSlFBQUFGTUFBQUJRUlFBQUUyTUFBSGhGQUFEWmJ3QUE4RGdBQUFBQUFBQjRSUUFBN1hJQUFLZzdBQUFBQUFBQWVFVUFBR2wrQUFDNFFnQUFBQUFBQUhoRkFBQVprQUFBdUVJQUFBQUFBQUI0UlFBQWpaQUFBTGhDQUFBQUFBQUE1RVVBQUp5bkFBQUFBQUFBQVFBQUFHQTVBQUFBQUFBQVVFVUFBTnVuQUFBRkFFSDA4Z0FMQVFJQVFZenpBQXNLQVFBQUFBRUFBQUNtNmdCQnBQTUFDd0VDQUVHejh3QUxCZi8vLy8vL0FFSDQ4d0FMQVFrQVFZVDBBQXNCQWdCQm1QUUFDeElDQUFBQUFBQUFBQUVBQUFCbzBnQUFBQVFBUWNUMEFBc0UvLy8vL3dCQmlQVUFDd0VGQUVHVTlRQUxBUU1BUWF6MUFBc09BUUFBQUFJQUFBQjQxZ0FBQUFRQVFjVDFBQXNCQVFCQjAvVUFDd1VLLy8vLy93QkJ2UFlBQ3dFREFFSGo5Z0FMQmYvLy8vLy9BRUdvOXdBTDF4QlFSUUFBL3I4QUFIaEZBQUJld0FBQXdEc0FBQUFBQUFCNFJRQUFDOEFBQU5BN0FBQUFBQUFBVUVVQUFDekFBQUI0UlFBQU9jQUFBTEE3QUFBQUFBQUFlRVVBQUtqQUFBQ29Pd0FBQUFBQUFIaEZBQUM0d0FBQTZEc0FBQUFBQUFCNFJRQUF5Y0FBQU1BN0FBQUFBQUFBZUVVQUFPdkFBQUFJUEFBQUFBQUFBSGhGQUFBUHdRQUF3RHNBQUFBQUFBRElSUUFBTjhFQUFNaEZBQUE1d1FBQXlFVUFBRHZCQUFESVJRQUFQY0VBQU1oRkFBQS93UUFBeUVVQUFFSEJBQURJUlFBQVE4RUFBTWhGQUFCRndRQUF5RVVBQUVmQkFBRElSUUFBWnNvQUFNaEZBQUJKd1FBQXlFVUFBRXZCQUFESVJRQUFUY0VBQUhoRkFBQlB3UUFBc0RzQUFBQUFBQUJRUlFBQXNNUUFBRkJGQUFEUHhBQUFVRVVBQU83RUFBQlFSUUFBRGNVQUFGQkZBQUFzeFFBQVVFVUFBRXZGQUFCUVJRQUFhc1VBQUZCRkFBQ0p4UUFBVUVVQUFLakZBQUJRUlFBQXg4VUFBRkJGQUFEbXhRQUFVRVVBQUFYR0FBQlFSUUFBSk1ZQUFPUkZBQUEzeGdBQUFBQUFBQUVBQUFCZ09RQUFBQUFBQU9SRkFBQjV4Z0FBQUFBQUFBRUFBQUJnT1FBQUFBQUFBT1JGQUFDN3hnQUFBQUFBQUFFQUFBQmdPUUFBQUFBQUFPUkZBQUQ2eGdBQUFBQUFBQUVBQUFCZ09RQUFBQUFBQUhoRkFBQkx4d0FBaUQwQUFBQUFBQUJRUlFBQU9jY0FBSGhGQUFCMXh3QUFpRDBBQUFBQUFBQlFSUUFBbjhjQUFGQkZBQURReHdBQTVFVUFBQUhJQUFBQUFBQUFBUUFBQUhnOUFBQUQ5UC8vNUVVQUFERElBQUFBQUFBQUFRQUFBSkE5QUFBRDlQLy81RVVBQUYvSUFBQUFBQUFBQVFBQUFIZzlBQUFEOVAvLzVFVUFBSTdJQUFBQUFBQUFBUUFBQUpBOUFBQUQ5UC8vZUVVQUFMM0lBQUNvUFFBQUFBQUFBSGhGQUFEV3lBQUFvRDBBQUFBQUFBQjRSUUFBRmNrQUFLZzlBQUFBQUFBQWVFVUFBQzNKQUFDZ1BRQUFBQUFBQUhoRkFBQkZ5UUFBWUQ0QUFBQUFBQUI0UlFBQVdja0FBTEJDQUFBQUFBQUFlRVVBQUcvSkFBQmdQZ0FBQUFBQUFPUkZBQUNJeVFBQUFBQUFBQUlBQUFCZ1BnQUFBZ0FBQUtBK0FBQUFBQUFBNUVVQUFNekpBQUFBQUFBQUFRQUFBTGcrQUFBQUFBQUFVRVVBQU9MSkFBRGtSUUFBKzhrQUFBQUFBQUFDQUFBQVlENEFBQUlBQUFEZ1BnQUFBQUFBQU9SRkFBQS95Z0FBQUFBQUFBRUFBQUM0UGdBQUFBQUFBT1JGQUFCb3lnQUFBQUFBQUFJQUFBQmdQZ0FBQWdBQUFCZy9BQUFBQUFBQTVFVUFBS3pLQUFBQUFBQUFBUUFBQURBL0FBQUFBQUFBVUVVQUFNTEtBQURrUlFBQTI4b0FBQUFBQUFBQ0FBQUFZRDRBQUFJQUFBQllQd0FBQUFBQUFPUkZBQUFmeXdBQUFBQUFBQUVBQUFBd1B3QUFBQUFBQU9SRkFBQjF6QUFBQUFBQUFBTUFBQUJnUGdBQUFnQUFBSmcvQUFBQ0FBQUFvRDhBQUFBSUFBQlFSUUFBM013QUFGQkZBQUM2ekFBQTVFVUFBTy9NQUFBQUFBQUFBd0FBQUdBK0FBQUNBQUFBbUQ4QUFBSUFBQURRUHdBQUFBZ0FBRkJGQUFBMHpRQUE1RVVBQUZiTkFBQUFBQUFBQWdBQUFHQStBQUFDQUFBQStEOEFBQUFJQUFCUVJRQUFtODBBQU9SRkFBQ3d6UUFBQUFBQUFBSUFBQUJnUGdBQUFnQUFBUGcvQUFBQUNBQUE1RVVBQVBYTkFBQUFBQUFBQWdBQUFHQStBQUFDQUFBQVFFQUFBQUlBQUFCUVJRQUFFYzRBQU9SRkFBQW16Z0FBQUFBQUFBSUFBQUJnUGdBQUFnQUFBRUJBQUFBQ0FBQUE1RVVBQUVMT0FBQUFBQUFBQWdBQUFHQStBQUFDQUFBQVFFQUFBQUlBQUFEa1JRQUFYczRBQUFBQUFBQUNBQUFBWUQ0QUFBSUFBQUJBUUFBQUFnQUFBT1JGQUFDSnpnQUFBQUFBQUFJQUFBQmdQZ0FBQWdBQUFNaEFBQUFBQUFBQVVFVUFBTS9PQUFEa1JRQUE4ODRBQUFBQUFBQUNBQUFBWUQ0QUFBSUFBQUR3UUFBQUFBQUFBRkJGQUFBNXp3QUE1RVVBQUZqUEFBQUFBQUFBQWdBQUFHQStBQUFDQUFBQUdFRUFBQUFBQUFCUVJRQUFuczhBQU9SRkFBQzN6d0FBQUFBQUFBSUFBQUJnUGdBQUFnQUFBRUJCQUFBQUFBQUFVRVVBQVAzUEFBRGtSUUFBRnRBQUFBQUFBQUFDQUFBQVlENEFBQUlBQUFCb1FRQUFBZ0FBQUZCRkFBQXIwQUFBNUVVQUFNTFFBQUFBQUFBQUFnQUFBR0ErQUFBQ0FBQUFhRUVBQUFJQUFBQjRSUUFBUTlBQUFLQkJBQUFBQUFBQTVFVUFBR2JRQUFBQUFBQUFBZ0FBQUdBK0FBQUNBQUFBd0VFQUFBSUFBQUJRUlFBQWlkQUFBSGhGQUFDZzBBQUFvRUVBQUFBQUFBRGtSUUFBMTlBQUFBQUFBQUFDQUFBQVlENEFBQUlBQUFEQVFRQUFBZ0FBQU9SRkFBRDUwQUFBQUFBQUFBSUFBQUJnUGdBQUFnQUFBTUJCQUFBQ0FBQUE1RVVBQUJ2UkFBQUFBQUFBQWdBQUFHQStBQUFDQUFBQXdFRUFBQUlBQUFCNFJRQUFQdEVBQUdBK0FBQUFBQUFBNUVVQUFGVFJBQUFBQUFBQUFnQUFBR0ErQUFBQ0FBQUFhRUlBQUFJQUFBQlFSUUFBWnRFQUFPUkZBQUI3MFFBQUFBQUFBQUlBQUFCZ1BnQUFBZ0FBQUdoQ0FBQUNBQUFBZUVVQUFKalJBQUJnUGdBQUFBQUFBSGhGQUFDdDBRQUFZRDRBQUFBQUFBQlFSUUFBd3RFQUFPUkZBQURiMFFBQUFBQUFBQUVBQUFDd1FnQUFBQUFBQUFFQUFBQUFBQUFBK0RnQUFBRUFBQUFDQUFBQUFBQUFBUEE0QUFBREFBQUFCQUFBQUFBQUFBQUlPUUFBQlFBQUFBWUFBQUFCQUFBQXVWS01QbzVhNXo2NVVvdytBQUFBQUJnNUFBQUhBQUFBQ0FBQUFBa0FBQUFCQUFBQUNnQUFBQUFBQUFBb09RQUFCd0FBQUFzQUFBQU1BQUFBQWdBQUFBMEFBQUFBQUFBQU9Ea0FBQWNBQUFBT0FBQUFEd0FBQUFNQUFBQVFBQUFBLy8vLy8vNy8vLy85Ly8vL09Ed0FBSEE4QUFDUVBBQUFPRHdBQUhBOEFBQndQQUFBbUR3QUFIQThBQUE0UEFBQWNEd0FBSmc4QUFCd1BBQUFPRHdBQUhBOEFBQndQQUFBU0RrQUFIQThBQUJ3UEFBQWNEd0FBSEE4QUFCd1BBQUFTRGtBQUhBOEFBQndQQUFBQVFBQUFBQUFBQUFDQUFBQVFBWUFBSUErQUFBQUFBQUFpQk1BQURBYUFBQVVBQUFBUXk1VlZFWXRPQUJCaklnQkN3THdRd0JCcElnQkN4Sm9PUUFBK0RrQUFJZzZBQUNJT2dBQUlCMEFRZWlKQVFzQ2pPSUFRYUNLQVF1OUVpQWlBQUFnSmdBQVgzQ0pBUDhKTHc4QUFJQS9BQURBUHdBQUFBRGN6OUUxQUFBQUFBREFGVDhBQUFBQXNEc0FBQkVBQUFBU0FBQUFFd0FBQUJRQUFBQUVBQUFBQVFBQUFBRUFBQUFCQUFBQUFBQUFBTmc3QUFBUkFBQUFGUUFBQUJNQUFBQVVBQUFBQkFBQUFBSUFBQUFDQUFBQUFnQUFBQUFBQUFEb093QUFGZ0FBQUJjQUFBQUVBQUFBQUFBQUFQZzdBQUFXQUFBQUdBQUFBQVFBQUFBQUFBQUFLRHdBQUJFQUFBQVpBQUFBRXdBQUFCUUFBQUFGQUFBQUFBQUFBS0E4QUFBUkFBQUFHZ0FBQUJNQUFBQVVBQUFBQkFBQUFBTUFBQUFEQUFBQUF3QUFBQUFBQUFDSVBRQUFHd0FBQUJ3QUFBQUFBQUFBb0QwQUFCMEFBQUFlQUFBQUFRQUFBQVlBQUFBQkFBQUFCQUFBQUFVQUFBQUdBQUFBQndBQUFBY0FBQUFJQUFBQUJBQUFBQWdBQUFBRkFBQUFBQUFBQUtnOUFBQWZBQUFBSUFBQUFBSUFBQUFKQUFBQUFnQUFBQVVBQUFBSkFBQUFDZ0FBQUFvQUFBQUxBQUFBREFBQUFBWUFBQUFMQUFBQUJ3QUFBQWdBQUFBQUFBQUFzRDBBQUNFQUFBQWlBQUFBK1AvLy8vai8vLyt3UFFBQUl3QUFBQ1FBQUFDZ1JnQUF0RVlBQUFnQUFBQUFBQUFBeUQwQUFDVUFBQUFtQUFBQStQLy8vL2ovLy8vSVBRQUFKd0FBQUNnQUFBRFFSZ0FBNUVZQUFBUUFBQUFBQUFBQTREMEFBQ2tBQUFBcUFBQUEvUC8vLy96Ly8vL2dQUUFBS3dBQUFDd0FBQUFBUndBQUZFY0FBQVFBQUFBQUFBQUErRDBBQUMwQUFBQXVBQUFBL1AvLy8vei8vLy80UFFBQUx3QUFBREFBQUFBd1J3QUFSRWNBQUFBQUFBQVFQZ0FBSHdBQUFERUFBQUFEQUFBQUNRQUFBQUlBQUFBRkFBQUFEUUFBQUFvQUFBQUtBQUFBQ3dBQUFBd0FBQUFHQUFBQURBQUFBQWdBQUFBQUFBQUFJRDRBQUIwQUFBQXlBQUFBQkFBQUFBWUFBQUFCQUFBQUJBQUFBQTRBQUFBR0FBQUFCd0FBQUFjQUFBQUlBQUFBQkFBQUFBMEFBQUFKQUFBQUFBQUFBREErQUFBZkFBQUFNd0FBQUFVQUFBQUpBQUFBQWdBQUFBVUFBQUFKQUFBQUNnQUFBQW9BQUFBUEFBQUFFQUFBQUFvQUFBQUxBQUFBQndBQUFBQUFBQUJBUGdBQUhRQUFBRFFBQUFBR0FBQUFCZ0FBQUFFQUFBQUVBQUFBQlFBQUFBWUFBQUFIQUFBQUVRQUFBQklBQUFBTEFBQUFDQUFBQUFVQUFBQUFBQUFBVUQ0QUFEVUFBQUEyQUFBQU53QUFBQUVBQUFBR0FBQUFEZ0FBQUFBQUFBQndQZ0FBT0FBQUFEa0FBQUEzQUFBQUFnQUFBQWNBQUFBUEFBQUFBQUFBQUlBK0FBQTZBQUFBT3dBQUFEY0FBQUFCQUFBQUFnQUFBQU1BQUFBRUFBQUFCUUFBQUFZQUFBQUhBQUFBQ0FBQUFBa0FBQUFLQUFBQUN3QUFBQUFBQUFEQVBnQUFQQUFBQUQwQUFBQTNBQUFBREFBQUFBMEFBQUFPQUFBQUR3QUFBQkFBQUFBUkFBQUFFZ0FBQUJNQUFBQVVBQUFBRlFBQUFCWUFBQUFBQUFBQStENEFBRDRBQUFBL0FBQUFOd0FBQUFNQUFBQUVBQUFBQVFBQUFBVUFBQUFDQUFBQUFRQUFBQUlBQUFBR0FBQUFBQUFBQURnL0FBQkFBQUFBUVFBQUFEY0FBQUFIQUFBQUNBQUFBQU1BQUFBSkFBQUFCQUFBQUFNQUFBQUVBQUFBQ2dBQUFBQUFBQUJ3UHdBQVFnQUFBRU1BQUFBM0FBQUFFd0FBQUJjQUFBQVlBQUFBR1FBQUFCb0FBQUFiQUFBQUFRQUFBUGovLy85d1B3QUFGQUFBQUJVQUFBQVdBQUFBRndBQUFCZ0FBQUFaQUFBQUdnQUFBQUFBQUFDb1B3QUFSQUFBQUVVQUFBQTNBQUFBR3dBQUFCd0FBQUFkQUFBQUhnQUFBQjhBQUFBZ0FBQUFBZ0FBQVBqLy8vK29Qd0FBSEFBQUFCMEFBQUFlQUFBQUh3QUFBQ0FBQUFBaEFBQUFJZ0FBQUNVQUFBQklBQUFBT2dBQUFDVUFBQUJOQUFBQU9nQUFBQ1VBQUFCVEFBQUFBQUFBQUNVQUFBQnRBQUFBTHdBQUFDVUFBQUJrQUFBQUx3QUFBQ1VBQUFCNUFBQUFBQUFBQUNVQUFBQkpBQUFBT2dBQUFDVUFBQUJOQUFBQU9nQUFBQ1VBQUFCVEFBQUFJQUFBQUNVQUFBQndBQUFBQUFBQUFDVUFBQUJoQUFBQUlBQUFBQ1VBQUFCaUFBQUFJQUFBQUNVQUFBQmtBQUFBSUFBQUFDVUFBQUJJQUFBQU9nQUFBQ1VBQUFCTkFBQUFPZ0FBQUNVQUFBQlRBQUFBSUFBQUFDVUFBQUJaQUFBQUFBQUFBRUVBQUFCTkFBQUFBQUFBQUZBQUFBQk5BQUFBQUFBQUFFb0FBQUJoQUFBQWJnQUFBSFVBQUFCaEFBQUFjZ0FBQUhrQUFBQUFBQUFBUmdBQUFHVUFBQUJpQUFBQWNnQUFBSFVBQUFCaEFBQUFjZ0FBQUhrQUFBQUFBQUFBVFFBQUFHRUFBQUJ5QUFBQVl3QUFBR2dBQUFBQUFBQUFRUUFBQUhBQUFBQnlBQUFBYVFBQUFHd0FBQUFBQUFBQVRRQUFBR0VBQUFCNUFBQUFBQUFBQUVvQUFBQjFBQUFBYmdBQUFHVUFBQUFBQUFBQVNnQUFBSFVBQUFCc0FBQUFlUUFBQUFBQUFBQkJBQUFBZFFBQUFHY0FBQUIxQUFBQWN3QUFBSFFBQUFBQUFBQUFVd0FBQUdVQUFBQndBQUFBZEFBQUFHVUFBQUJ0QUFBQVlnQUFBR1VBQUFCeUFBQUFBQUFBQUU4QUFBQmpBQUFBZEFBQUFHOEFBQUJpQUFBQVpRQUFBSElBQUFBQUFBQUFUZ0FBQUc4QUFBQjJBQUFBWlFBQUFHMEFBQUJpQUFBQVpRQUFBSElBQUFBQUFBQUFSQUFBQUdVQUFBQmpBQUFBWlFBQUFHMEFBQUJpQUFBQVpRQUFBSElBQUFBQUFBQUFTZ0FBQUdFQUFBQnVBQUFBQUFBQUFFWUFBQUJsQUFBQVlnQUFBQUFBQUFCTkFBQUFZUUFBQUhJQUFBQUFBQUFBUVFBQUFIQUFBQUJ5QUFBQUFBQUFBRW9BQUFCMUFBQUFiZ0FBQUFBQUFBQktBQUFBZFFBQUFHd0FBQUFBQUFBQVFRQUFBSFVBQUFCbkFBQUFBQUFBQUZNQUFBQmxBQUFBY0FBQUFBQUFBQUJQQUFBQVl3QUFBSFFBQUFBQUFBQUFUZ0FBQUc4QUFBQjJBQUFBQUFBQUFFUUFBQUJsQUFBQVl3QUFBQUFBQUFCVEFBQUFkUUFBQUc0QUFBQmtBQUFBWVFBQUFIa0FBQUFBQUFBQVRRQUFBRzhBQUFCdUFBQUFaQUFBQUdFQUFBQjVBQUFBQUFBQUFGUUFBQUIxQUFBQVpRQUFBSE1BQUFCa0FBQUFZUUFBQUhrQUFBQUFBQUFBVndBQUFHVUFBQUJrQUFBQWJnQUFBR1VBQUFCekFBQUFaQUFBQUdFQUFBQjVBQUFBQUFBQUFGUUFBQUJvQUFBQWRRQUFBSElBQUFCekFBQUFaQUFBQUdFQUFBQjVBQUFBQUFBQUFFWUFBQUJ5QUFBQWFRQUFBR1FBQUFCaEFBQUFlUUFBQUFBQUFBQlRBQUFBWVFBQUFIUUFBQUIxQUFBQWNnQUFBR1FBQUFCaEFBQUFlUUFBQUFBQUFBQlRBQUFBZFFBQUFHNEFBQUFBQUFBQVRRQUFBRzhBQUFCdUFBQUFBQUFBQUZRQUFBQjFBQUFBWlFBQUFBQUFBQUJYQUFBQVpRQUFBR1FBQUFBQUFBQUFWQUFBQUdnQUFBQjFBQUFBQUFBQUFFWUFBQUJ5QUFBQWFRQUFBQUFBQUFCVEFBQUFZUUFBQUhRQVFlaWNBUXNSMkQ4QUFFWUFBQUJIQUFBQU53QUFBQUVBUVlHZEFRdndCVUFBQUVnQUFBQkpBQUFBTndBQUFBSUFBQUFBQUFBQUlFQUFBRW9BQUFCTEFBQUFOd0FBQUNNQUFBQWtBQUFBQndBQUFBZ0FBQUFKQUFBQUNnQUFBQ1VBQUFBTEFBQUFEQUFBQUFBQUFBQklRQUFBVEFBQUFFMEFBQUEzQUFBQUpnQUFBQ2NBQUFBTkFBQUFEZ0FBQUE4QUFBQVFBQUFBS0FBQUFCRUFBQUFTQUFBQUFBQUFBR2hBQUFCT0FBQUFUd0FBQURjQUFBQXBBQUFBS2dBQUFCTUFBQUFVQUFBQUZRQUFBQllBQUFBckFBQUFGd0FBQUJnQUFBQUFBQUFBaUVBQUFGQUFBQUJSQUFBQU53QUFBQ3dBQUFBdEFBQUFHUUFBQUJvQUFBQWJBQUFBSEFBQUFDNEFBQUFkQUFBQUhnQUFBQUFBQUFDb1FBQUFVZ0FBQUZNQUFBQTNBQUFBQXdBQUFBUUFBQUFBQUFBQTBFQUFBRlFBQUFCVkFBQUFOd0FBQUFVQUFBQUdBQUFBQUFBQUFQaEFBQUJXQUFBQVZ3QUFBRGNBQUFBQkFBQUFJUUFBQUFBQUFBQWdRUUFBV0FBQUFGa0FBQUEzQUFBQUFnQUFBQ0lBQUFBQUFBQUFTRUVBQUZvQUFBQmJBQUFBTndBQUFCQUFBQUFFQUFBQUh3QUFBQUFBQUFCd1FRQUFYQUFBQUYwQUFBQTNBQUFBRVFBQUFBVUFBQUFnQUFBQUFBQUFBTWhCQUFCZUFBQUFYd0FBQURjQUFBQURBQUFBQkFBQUFBc0FBQUF2QUFBQU1BQUFBQXdBQUFBeEFBQUFBQUFBQUpCQkFBQmVBQUFBWUFBQUFEY0FBQUFEQUFBQUJBQUFBQXNBQUFBdkFBQUFNQUFBQUF3QUFBQXhBQUFBQUFBQUFQaEJBQUJoQUFBQVlnQUFBRGNBQUFBRkFBQUFCZ0FBQUEwQUFBQXlBQUFBTXdBQUFBNEFBQUEwQUFBQUFBQUFBRGhDQUFCakFBQUFaQUFBQURjQUFBQUFBQUFBU0VJQUFHVUFBQUJtQUFBQU53QUFBQXdBQUFBU0FBQUFEUUFBQUJNQUFBQU9BQUFBQVFBQUFCUUFBQUFQQUFBQUFBQUFBSkJDQUFCbkFBQUFhQUFBQURjQUFBQTFBQUFBTmdBQUFDRUFBQUFpQUFBQUl3QUFBQUFBQUFDZ1FnQUFhUUFBQUdvQUFBQTNBQUFBTndBQUFEZ0FBQUFrQUFBQUpRQUFBQ1lBQUFCbUFBQUFZUUFBQUd3QUFBQnpBQUFBWlFBQUFBQUFBQUIwQUFBQWNnQUFBSFVBQUFCbEFFSDhvZ0VML0lBQ1lENEFBRjRBQUFCckFBQUFOd0FBQUFBQUFBQndRZ0FBWGdBQUFHd0FBQUEzQUFBQUZRQUFBQUlBQUFBREFBQUFCQUFBQUE4QUFBQVdBQUFBRUFBQUFCY0FBQUFSQUFBQUJRQUFBQmdBQUFBUUFBQUFBQUFBQU5oQkFBQmVBQUFBYlFBQUFEY0FBQUFIQUFBQUNBQUFBQkVBQUFBNUFBQUFPZ0FBQUJJQUFBQTdBQUFBQUFBQUFCaENBQUJlQUFBQWJnQUFBRGNBQUFBSkFBQUFDZ0FBQUJNQUFBQThBQUFBUFFBQUFCUUFBQUErQUFBQUFBQUFBS0JCQUFCZUFBQUFid0FBQURjQUFBQURBQUFBQkFBQUFBc0FBQUF2QUFBQU1BQUFBQXdBQUFBeEFBQUFBQUFBQUtBL0FBQVVBQUFBRlFBQUFCWUFBQUFYQUFBQUdBQUFBQmtBQUFBYUFBQUFBQUFBQU5BL0FBQWNBQUFBSFFBQUFCNEFBQUFmQUFBQUlBQUFBQ0VBQUFBaUFBQUFSWEp5YjNJNklHeGhZbVZzYVc1bklIZHZjbXNnYjNabGNtWnNiM2N1Q2dCVmJtdHViM2R1SUc5eUlIVnVjM1Z3Y0c5eWRHVmtJR3hoWW1Wc2FXNW5JSFJvY21WemFHOXNaQ0J0YjJSbElISmxjWFZsYzNSbFpDNGdVMlYwSUhSdklHMWhiblZoYkM0S0FFeGhZbVZzYVc1bklIUm9jbVZ6YUc5c1pDQnRiMlJsSUhObGRDQjBieUFsY3k0S0FFMUJUbFZCVEFCQlZWUlBYMDFGUkVsQlRnQkJWVlJQWDA5VVUxVUFRVlZVVDE5QlJFRlFWRWxXUlFCQlZWUlBYMEpTUVVOTFJWUkpUa2NBUlhKeWIzSTZJRlZ1YzNWd2NHOXlkR1ZrSUhCcGVHVnNJR1p2Y20xaGRDQW9KV1FwSUhKbGNYVmxjM1JsWkM0S0FFRjFkRzhnZEdoeVpYTm9iMnhrSUNoaWNtRmphMlYwS1NCdFlYSnJaWElnWTI5MWJuUnpJQzFiSlROa09pQWxNMlJkSUZzbE0yUTZJQ1V6WkYwZ1d5VXpaRG9nSlROa1hTc3VDZ0JCZFhSdklIUm9jbVZ6YUc5c1pDQW9ZbkpoWTJ0bGRDa2dZV1JxZFhOMFpXUWdkR2h5WlhOb2IyeGtJSFJ2SUNWa0xnb0FiV1ZrYVdGdUFFOTBjM1VBUVhWMGJ5QjBhSEpsYzJodmJHUWdLQ1Z6S1NCaFpHcDFjM1JsWkNCMGFISmxjMmh2YkdRZ2RHOGdKV1F1Q2dBL1B6OGdNUW9BUHo4L0lESUtBRDgvUHlBekNnQkZjbkp2Y2pvZ2RXNXpkWEJ3YjNKMFpXUWdjR2w0Wld3Z1ptOXliV0YwTGdvQVJYSnliM0k2SUU1VlRFd2djR0YwZEVoaGJtUnNaUzRLQUVWeWNtOXlPaUJqWVc0bmRDQnNiMkZrSUhCaGRIUmxjbTRnWm5KdmJTQk9WVXhNSUdKMVptWmxjaTRLQUVWeWNtOXlPaUJ2ZFhRZ2IyWWdiV1Z0YjNKNUxnb0FJQWtLRFFCUVlYUjBaWEp1SUVSaGRHRWdjbVZoWkNCbGNuSnZjaUVoQ2dCRmNuSnZjaUJ5WldGa2FXNW5JSEJoZEhSbGNtNGdabWxzWlNBbkpYTW5MZ29BUlhKeWIzSWdLQ1ZrS1RvZ2RXNWhZbXhsSUhSdklHOXdaVzRnWTJGdFpYSmhJSEJoY21GdFpYUmxjbk1nWm1sc1pTQWlKWE1pSUdadmNpQnlaV0ZrYVc1bkxnb0FSWEp5YjNJZ0tDVmtLVG9nZFc1aFlteGxJSFJ2SUdSbGRHVnliV2x1WlNCbWFXeGxJR3hsYm1kMGFDNEFSWEp5YjNJNklITjFjSEJzYVdWa0lHWnBiR1VnWkc5bGN5QnViM1FnWVhCd1pXRnlJSFJ2SUdKbElHRnVJRUZTVkc5dmJFdHBkQ0JqWVcxbGNtRWdjR0Z5WVcxbGRHVnlJR1pwYkdVdUNnQkZjbkp2Y2lBb0pXUXBPaUIxYm1GaWJHVWdkRzhnY21WaFpDQm1jbTl0SUdacGJHVXVBR0Z5WjJ4RFlXMWxjbUZHY25WemRIVnRVa2dvS1RvZ1lYSlFZWEpoYlVSbFkyOXRjRTFoZENncElHbHVaR2xqWVhSbFpDQndZWEpoYldWMFpYSWdaWEp5YjNJdUNnQkZjbkp2Y2pvZ2FXTndSMlYwU2w5VlgxaGpBRVZ5Y205eUlERTZJR2xqY0VkbGRFbHVhWFJZZHpKWVl3b0FSWEp5YjNJZ01qb2dhV053UjJWMFNXNXBkRmgzTWxoakNnQkZjbkp2Y2lBek9pQnBZM0JIWlhSSmJtbDBXSGN5V0dNS0FFVnljbTl5SURRNklHbGpjRWRsZEVsdWFYUllkekpZWXdvQVJYSnliM0lnTlRvZ2FXTndSMlYwU1c1cGRGaDNNbGhqQ2dCRmNuSnZjaUEyT2lCcFkzQkhaWFJKYm1sMFdIY3lXR01LQUVWeWNtOXlJRGM2SUdsamNFZGxkRWx1YVhSWWR6SllZd29BUlhKeWIzSTZJSFZ1WVdKc1pTQjBieUJ2Y0dWdUlHMTFiSFJwYldGeWEyVnlJR052Ym1acFp5Qm1hV3hsSUNjbGN5Y3VDZ0JGY25KdmNpQndjbTlqWlhOemFXNW5JRzExYkhScGJXRnlhMlZ5SUdOdmJtWnBaeUJtYVd4bElDY2xjeWM2SUVacGNuTjBJR3hwYm1VZ2JYVnpkQ0JpWlNCdWRXMWlaWElnYjJZZ2JXRnlhMlZ5SUdOdmJtWnBaM01nZEc4Z2NtVmhaQzRLQUNWc2JIVWxZd0JGY25KdmNpQndjbTlqWlhOemFXNW5JRzExYkhScGJXRnlhMlZ5SUdOdmJtWnBaeUJtYVd4bElDY2xjeWM2SUhCaGRIUmxjbTRnSnlWekp5QnpjR1ZqYVdacFpXUWdhVzRnYlhWc2RHbHRZWEpyWlhJZ1kyOXVabWxuZFhKaGRHbHZiaUIzYUdsc1pTQnBiaUJpWVhKamIyUmxMVzl1YkhrZ2JXOWtaUzRLQUVWeWNtOXlJSEJ5YjJObGMzTnBibWNnYlhWc2RHbHRZWEpyWlhJZ1kyOXVabWxuSUdacGJHVWdKeVZ6SnpvZ1ZXNWhZbXhsSUhSdklHUmxkR1Z5YldsdVpTQmthWEpsWTNSdmNua2dibUZ0WlM0S0FFVnljbTl5SUhCeWIyTmxjM05wYm1jZ2JYVnNkR2x0WVhKclpYSWdZMjl1Wm1sbklHWnBiR1VnSnlWekp6b2dWVzVoWW14bElIUnZJR3h2WVdRZ2NHRjBkR1Z5YmlBbkpYTW5MZ29BSld4bUFFVnljbTl5SUhCeWIyTmxjM05wYm1jZ2JYVnNkR2x0WVhKclpYSWdZMjl1Wm1sbklHWnBiR1VnSnlWekp5d2diV0Z5YTJWeUlHUmxabWx1YVhScGIyNGdKVE5rT2lCR2FYSnpkQ0JzYVc1bElHMTFjM1FnWW1VZ2NHRjBkR1Z5YmlCM2FXUjBhQzRLQUNWc1ppQWxiR1lnSld4bUlDVnNaZ0FsWmlBbFpnQkZjbkp2Y2lCd2NtOWpaWE56YVc1bklHMTFiSFJwYldGeWEyVnlJR052Ym1acFp5Qm1hV3hsSUNjbGN5Y3NJRzFoY210bGNpQmtaV1pwYm1sMGFXOXVJQ1V6WkRvZ1RHbHVaWE1nTWlBdElEUWdiWFZ6ZENCaVpTQnRZWEpyWlhJZ2RISmhibk5tYjNKdExnb0FXeVZ6WFNBQVpHVmlkV2NBYVc1bWJ3QjNZWEp1YVc1bkFHVnljbTl5QUNWekpYTUFMbWx6WlhRQVJYSnliM0k2SUhWdVlXSnNaU0IwYnlCdmNHVnVJR1pwYkdVZ0p5VnpKWE1uSUdadmNpQnlaV0ZrYVc1bkxnb0FSWEp5YjNJZ2NtVmhaR2x1WnlCcGJXRm5aVk5sZEM0S0FFbHRZV2RsYzJWMElHTnZiblJoYVc1eklDVmtJR2x0WVdkbGN5NEtBRVpoYkd4cGJtY2dZbUZqYXlCMGJ5QnlaV0ZrYVc1bklDY2xjeVZ6SnlCcGJpQkJVbFJ2YjJ4TGFYUWdkalF1ZUNCbWIzSnRZWFF1Q2dCRmNuSnZjaUJ5WldGa2FXNW5JRXBRUlVjZ1ptbHNaUzRLQUVWeWNtOXlJSEpsWVdScGJtY2dTbEJGUnlCbWFXeGxJR2hsWVdSbGNpNEtBQ1ZtQUVacGJHVWdiM0JsYmlCbGNuSnZjaTRnSlhNS0FGSmxZV1FnWlhKeWIzSWhJUW9BY2dCRmNuSnZjaUJ2Y0dWdWFXNW5JR1pwYkdVZ0p5VnpKem9nQUNWekpYTUtBQ1ZrQUFvakl5TWdVM1Z5Wm1GalpTQk9ieTRsWkNBakl5TUtBQ1Z6QUNBZ1VtVmhaQ0JKYldGblpWTmxkQzRLQUVWeWNtOXlJRzl3Wlc1cGJtY2dabWxzWlNBbkpYTXVhWE5sZENjdUNnQWdJQ0FnWlc1a0xnb0FJQ0JTWldGa0lFWmxZWFIxY21WVFpYUXVDZ0JGY25KdmNpQnZjR1Z1YVc1bklHWnBiR1VnSnlWekxtWnpaWFFuTGdvQUlDQlNaV0ZrSUUxaGNtdGxjbE5sZEM0S0FHMXlhd0JGY25KdmNpQnZjR1Z1YVc1bklHWnBiR1VnSnlWekxtMXlheWN1Q2dBbFppQWxaaUFsWmlBbFpnQlVjbUZ1YzJadmNtMWhkR2x2YmlCdFlYUnlhWGdnY21WaFpDQmxjbkp2Y2lFaENnQnFjR2NBYTNCdFJHVnNaWFJsVW1WbVJHRjBZVk5sZENncE9pQk9WVXhNSUhKbFprUmhkR0ZUWlhSUWRISXhMM0psWmtSaGRHRlRaWFJRZEhJeUxnb0FhM0J0UkdWc1pYUmxVbVZtUkdGMFlWTmxkQ2dwT2lCT1ZVeE1JSEpsWmtSaGRHRlRaWFJRZEhJdUNnQnlZZ0JyY0cxTWIyRmtVbVZtUkdGMFlWTmxkQ2dwT2lCT1ZVeE1JR1pwYkdWdVlXMWxMM0psWmtSaGRHRlRaWFJRZEhJdUNnQkZjbkp2Y2lCc2IyRmthVzVuSUV0UVRTQmtZWFJoT2lCMWJtRmliR1VnZEc4Z2IzQmxiaUJtYVd4bElDY2xjeVZ6SlhNbklHWnZjaUJ5WldGa2FXNW5MZ29BUlhKeWIzSWdiRzloWkdsdVp5QkxVRTBnWkdGMFlUb2daWEp5YjNJZ2NtVmhaR2x1WnlCa1lYUmhMZ29BYTNCdFEyaGhibWRsVUdGblpVNXZUMlpTWldaRVlYUmhVMlYwS0NrNklFNVZURXdnY21WbVJHRjBZVk5sZEM0S0FHdHdiVk5sZEZKbFprUmhkR0ZUWlhRb0tUb2dUbFZNVENCcmNHMUlZVzVrYkdVdmNtVm1SR0YwWVZObGRDNEtBR3R3YlZObGRGSmxaa1JoZEdGVFpYUW9LVG9nY21WbVJHRjBZVk5sZEM0S0FIQnZhVzUwY3kwbFpBb0FhM0J0VFdGMFkyaHBibWNvS1RvZ1RsVk1UQ0JyY0cxSVlXNWtiR1V2YVc1SmJXRm5aVXgxYldFdUNnQlFZV2RsV3lWa1hTQWdjSEpsT2lVelpDd2dZV1owT2lVelpDd2daWEp5YjNJZ1BTQWxaZ29BSlhNdUpYTUFRWE56WlhKMGFXOXVJR0J3ZVhKaGJXbGtMVDV6YVhwbEtDa2dQaUF3WUNCbVlXbHNaV1FnYVc0Z0FDOVZjMlZ5Y3k5aGN5OUViMk4xYldWdWRITXZSR1YyWld4dmNHMWxiblF2WjJsMGFIVmlMMkZ5ZEc5dmJHdHBkRFV0YW5NdmJHbGlMMkZ5ZEc5dmJHdHBkRFV2YkdsaUwxTlNReTlMVUUwdlJuSmxZV3ROWVhSamFHVnlMMlJsZEdWamRHOXljeTlFYjBkZmMyTmhiR1ZmYVc1MllYSnBZVzUwWDJSbGRHVmpkRzl5TG1Od2NBQlFlWEpoYldsa0lHbHpJRzV2ZENCaGJHeHZZMkYwWldRQVQyTjBZWFpsSUc5MWRDQnZaaUJ5WVc1blpRQlRZMkZzWlNCdmRYUWdiMllnY21GdVoyVUFRWE56WlhKMGFXOXVJR0J0U1cxaFoyVnpMbk5wZW1Vb0tTQStJREJnSUdaaGFXeGxaQ0JwYmlBQVRHRndiR0ZqYVdGdUlIQjVjbUZ0YVdRZ2FHRnpJRzV2ZENCaVpXVnVJR0ZzYkc5allYUmxaQUJCYzNObGNuUnBiMjRnWUhCNWNtRnRhV1F0UG01MWJVOWpkR0YyWlhNb0tTQStJREJnSUdaaGFXeGxaQ0JwYmlBQVVIbHlZVzFwWkNCa2IyVnpJRzV2ZENCamIyNTBZV2x1SUdGdWVTQnNaWFpsYkhNQVFYTnpaWEowYVc5dUlHQmtlVzVoYldsalgyTmhjM1E4WTI5dWMzUWdRbWx1YjIxcFlXeFFlWEpoYldsa016Sm1LajRvY0hseVlXMXBaQ2xnSUdaaGFXeGxaQ0JwYmlBQVQyNXNlU0JpYVc1dmJXbGhiQ0J3ZVhKaGJXbGtJR2x6SUhOMWNIQnZjblJsWkFCQmMzTmxjblJwYjI0Z1lHUXVkSGx3WlNncElEMDlJRWxOUVVkRlgwWXpNbUFnWm1GcGJHVmtJR2x1SUFCUGJteDVJRVl6TWlCcGJXRm5aWE1nYzNWd2NHOXlkR1ZrQUVGemMyVnlkR2x2YmlCZ2FXMHhMblI1Y0dVb0tTQTlQU0JKVFVGSFJWOUdNekpnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnBiVEl1ZEhsd1pTZ3BJRDA5SUVsTlFVZEZYMFl6TW1BZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZR1F1WTJoaGJtNWxiSE1vS1NBOVBTQXhZQ0JtWVdsc1pXUWdhVzRnQUU5dWJIa2djMmx1WjJ4bElHTm9ZVzV1Wld3Z2FXMWhaMlZ6SUhOMWNIQnZjblJsWkFCQmMzTmxjblJwYjI0Z1lHbHRNUzVqYUdGdWJtVnNjeWdwSUQwOUlERmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCcGJUSXVZMmhoYm01bGJITW9LU0E5UFNBeFlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnWkM1M2FXUjBhQ2dwSUQwOUlHbHRNaTUzYVdSMGFDZ3BZQ0JtWVdsc1pXUWdhVzRnQUVsdFlXZGxjeUJ0ZFhOMElHaGhkbVVnZEdobElITmhiV1VnZDJsa2RHZ0FRWE56WlhKMGFXOXVJR0JrTG1obGFXZG9kQ2dwSUQwOUlHbHRNaTVvWldsbmFIUW9LV0FnWm1GcGJHVmtJR2x1SUFCSmJXRm5aWE1nYlhWemRDQm9ZWFpsSUhSb1pTQnpZVzFsSUdobGFXZG9kQUJCYzNObGNuUnBiMjRnWUdsdE1TNTNhV1IwYUNncElEMDlJR2x0TWk1M2FXUjBhQ2dwWUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdhVzB4TG1obGFXZG9kQ2dwSUQwOUlHbHRNaTVvWldsbmFIUW9LV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lISnZkeUE4SUcxSVpXbG5hSFJnSUdaaGFXeGxaQ0JwYmlBQUwxVnpaWEp6TDJGekwwUnZZM1Z0Wlc1MGN5OUVaWFpsYkc5d2JXVnVkQzluYVhSb2RXSXZZWEowYjI5c2EybDBOUzFxY3k5c2FXSXZZWEowYjI5c2EybDBOUzlzYVdJdlUxSkRMMHRRVFM5R2NtVmhhMDFoZEdOb1pYSXZabkpoYldWM2IzSnJMMmx0WVdkbExtZ0FjbTkzSUc5MWRDQnZaaUJpYjNWdVpITUFUaloyYVhOcGIyNHlOVWRoZFhOemFXRnVVMk5oYkdWVGNHRmpaVkI1Y21GdGFXUkZBRVJ2UnlCUWVYSmhiV2xrQUU1dmJpMXRZWGdnYzNWd2NISmxjM05wYjI0QVUzVmljR2w0Wld3QWNISjFibVZHWldGMGRYSmxjd0JHYVc1a0lFOXlhV1Z1ZEdGMGFXOXVjd0JCYzNObGNuUnBiMjRnWUcxQ2RXTnJaWFJ6TG5OcGVtVW9LU0E5UFNCdFRuVnRRblZqYTJWMGMxaGdJR1poYVd4bFpDQnBiaUFBUW5WamEyVjBjeUJoY21VZ2JtOTBJR0ZzYkc5allYUmxaQUJCYzNObGNuUnBiMjRnWUcxQ2RXTnJaWFJ6V3pCZExuTnBlbVVvS1NBOVBTQnRUblZ0UW5WamEyVjBjMWxnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnRSbVZoZEhWeVpWQnZhVzUwY3k1emFYcGxLQ2tnUEQwZ2JVMWhlRTUxYlVabFlYUjFjbVZRYjJsdWRITmdJR1poYVd4bFpDQnBiaUFBVkc5dklHMWhibmtnWm1WaGRIVnlaU0J3YjJsdWRITUFRWE56WlhKMGFXOXVJR0JpZFdOclpYUmJNRjB1Wm1seWMzUWdQajBnWW5WamEyVjBXMjVkTG1acGNuTjBZQ0JtWVdsc1pXUWdhVzRnQUc1MGFGOWxiR1Z0Wlc1MElHWmhhV3hsWkFCQmMzTmxjblJwYjI0Z1lHdHdMbk5qWVd4bElEd2diVXhoY0d4aFkybGhibEI1Y21GdGFXUXViblZ0VTJOaGJHVlFaWEpQWTNSaGRtVW9LV0FnWm1GcGJHVmtJR2x1SUFCR1pXRjBkWEpsSUhCdmFXNTBJSE5qWVd4bElHbHpJRzkxZENCdlppQmliM1Z1WkhNQVFYTnpaWEowYVc5dUlHQnJjQzV6WTI5eVpTQTlQU0JzWVhBeExtZGxkRHhtYkc5aGRENG9lU2xiZUYxZ0lHWmhhV3hsWkNCcGJpQUFVMk52Y21VZ2FYTWdibTkwSUdOdmJuTnBjM1JsYm5RZ2QybDBhQ0IwYUdVZ1JHOUhJR2x0WVdkbEFFRnpjMlZ5ZEdsdmJpQmdiR0Z3TUM1b1pXbG5hSFFvS1NBOVBTQnNZWEF4TG1obGFXZG9kQ2dwSUQwOUlHeGhjREl1YUdWcFoyaDBLQ2xnSUdaaGFXeGxaQ0JwYmlBQUwxVnpaWEp6TDJGekwwUnZZM1Z0Wlc1MGN5OUVaWFpsYkc5d2JXVnVkQzluYVhSb2RXSXZZWEowYjI5c2EybDBOUzFxY3k5c2FXSXZZWEowYjI5c2EybDBOUzlzYVdJdlUxSkRMMHRRVFM5R2NtVmhhMDFoZEdOb1pYSXZaR1YwWldOMGIzSnpMMFJ2UjE5elkyRnNaVjlwYm5aaGNtbGhiblJmWkdWMFpXTjBiM0l1YUFCWGFXUjBhQzlvWldsbmFIUWdZWEpsSUc1dmRDQmpiMjV6YVhOMFpXNTBBRUZ6YzJWeWRHbHZiaUJnS0d4aGNEQXVhR1ZwWjJoMEtDa2dQVDBnYkdGd01TNW9aV2xuYUhRb0tTa2dKaVlnS0Noc1lYQXhMbWhsYVdkb2RDZ3BQajR4S1NBOVBTQnNZWEF5TG1obGFXZG9kQ2dwS1dBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZQ2dvYkdGd01DNTNhV1IwYUNncFBqNHhLU0E5UFNCc1lYQXhMbmRwWkhSb0tDa3BJQ1ltSUNoc1lYQXhMbmRwWkhSb0tDa2dQVDBnYkdGd01pNTNhV1IwYUNncEtXQWdabUZwYkdWa0lHbHVJQUJKYldGblpTQnphWHBsY3lCaGNtVWdhVzVqYjI1emFYTjBaVzUwQUVGemMyVnlkR2x2YmlCZ0tIZ3RNU2tnUGowZ01DQW1KaUFvZUNzeEtTQThJR3hoY0RFdWQybGtkR2dvS1dBZ1ptRnBiR1ZrSUdsdUlBQjRJRzkxZENCdlppQmliM1Z1WkhNQVFYTnpaWEowYVc5dUlHQW9lUzB4S1NBK1BTQXdJQ1ltSUNoNUt6RXBJRHdnYkdGd01TNW9aV2xuYUhRb0tXQWdabUZwYkdWa0lHbHVJQUI1SUc5MWRDQnZaaUJpYjNWdVpITUFRWE56WlhKMGFXOXVJR0FvYkdGd01DNTNhV1IwYUNncFBqNHhLU0E5UFNCc1lYQXhMbmRwWkhSb0tDbGdJR1poYVd4bFpDQnBiaUFBU1cxaFoyVWdaR2x0Wlc1emFXOXVjeUJwYm1OdmJuTnBjM1JsYm5RQVFYTnpaWEowYVc5dUlHQW9iR0Z3TUM1M2FXUjBhQ2dwUGo0eEtTQTlQU0JzWVhBeUxuZHBaSFJvS0NsZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0FvYkdGd01DNW9aV2xuYUhRb0tUNCtNU2tnUFQwZ2JHRndNUzVvWldsbmFIUW9LV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lDaHNZWEF3TG1obGFXZG9kQ2dwUGo0eEtTQTlQU0JzWVhBeUxtaGxhV2RvZENncFlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnS0dsdWRDbHpkR1E2T21ac2IyOXlLSGdwSUQwOUlDaHBiblFwZUdBZ1ptRnBiR1ZrSUdsdUlBQXZWWE5sY25NdllYTXZSRzlqZFcxbGJuUnpMMFJsZG1Wc2IzQnRaVzUwTDJkcGRHaDFZaTloY25SdmIyeHJhWFExTFdwekwyeHBZaTloY25SdmIyeHJhWFExTDJ4cFlpOVRVa012UzFCTkwwWnlaV0ZyVFdGMFkyaGxjaTlrWlhSbFkzUnZjbk12YVc1MFpYSndiMnhoZEdVdWFBQm1iRzl2Y2lncElHRnVaQ0JqWVhOMElHNXZkQ0IwYUdVZ2MyRnRaUUJCYzNObGNuUnBiMjRnWUNocGJuUXBjM1JrT2pwbWJHOXZjaWg1S1NBOVBTQW9hVzUwS1hsZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0I1Y0NBK1BTQXdJQ1ltSUhsd0lEd2dhR1ZwWjJoMFlDQm1ZV2xzWldRZ2FXNGdBSGx3SUc5MWRDQnZaaUJpYjNWdVpITUFRWE56WlhKMGFXOXVJR0I1Y0Y5d2JIVnpYekVnUGowZ01DQW1KaUI1Y0Y5d2JIVnpYekVnUENCb1pXbG5hSFJnSUdaaGFXeGxaQ0JwYmlBQWVYQmZjR3gxYzE4eElHOTFkQ0J2WmlCaWIzVnVaSE1BUVhOelpYSjBhVzl1SUdCNGNDQStQU0F3SUNZbUlIaHdJRHdnZDJsa2RHaGdJR1poYVd4bFpDQnBiaUFBZUhBZ2IzVjBJRzltSUdKdmRXNWtjd0JCYzNObGNuUnBiMjRnWUhod1gzQnNkWE5mTVNBK1BTQXdJQ1ltSUhod1gzQnNkWE5mTVNBOElIZHBaSFJvWUNCbVlXbHNaV1FnYVc0Z0FIaHdYM0JzZFhOZk1TQnZkWFFnYjJZZ1ltOTFibVJ6QUVGemMyVnlkR2x2YmlCZ2R6QWdQajBnTUNBbUppQjNNQ0E4UFNBeExqQXdNREZnSUdaaGFXeGxaQ0JwYmlBQVQzVjBJRzltSUhKaGJtZGxBRUZ6YzJWeWRHbHZiaUJnZHpFZ1BqMGdNQ0FtSmlCM01TQThQU0F4TGpBd01ERmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCM01pQStQU0F3SUNZbUlIY3lJRHc5SURFdU1EQXdNV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lIY3pJRDQ5SURBZ0ppWWdkek1nUEQwZ01TNHdNREF4WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdLSGN3SzNjeEszY3lLM2N6S1NBOFBTQXhMakF3TURGZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0FvZUMweEtTQStQU0F3SUNZbUlDaDRLekVwSUR3Z2FXMHVkMmxrZEdnb0tXQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUNoNUxURXBJRDQ5SURBZ0ppWWdLSGtyTVNrZ1BDQnBiUzVvWldsbmFIUW9LV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHeGhjREF1ZDJsa2RHZ29LU0E5UFNCc1lYQXhMbmRwWkhSb0tDbGdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCc1lYQXdMbWhsYVdkb2RDZ3BJRDA5SUd4aGNERXVhR1ZwWjJoMEtDbGdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCNFgyUnBkbDh5TFRBdU5XWWdQajBnTUdBZ1ptRnBiR1ZrSUdsdUlBQjRYMlJwZGw4eUlHOTFkQ0J2WmlCaWIzVnVaSE1nYjNWMElHOW1JR0p2ZFc1a2N5Qm1iM0lnYVc1MFpYSndiMnhoZEdsdmJnQkJjM05sY25ScGIyNGdZSGxmWkdsMlh6SXRNQzQxWmlBK1BTQXdZQ0JtWVdsc1pXUWdhVzRnQUhsZlpHbDJYeklnYjNWMElHOW1JR0p2ZFc1a2N5QnZkWFFnYjJZZ1ltOTFibVJ6SUdadmNpQnBiblJsY25CdmJHRjBhVzl1QUVGemMyVnlkR2x2YmlCZ2VGOWthWFpmTWlzd0xqVm1JRHdnYkdGd01pNTNhV1IwYUNncFlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnZVY5a2FYWmZNaXN3TGpWbUlEd2diR0Z3TWk1b1pXbG5hSFFvS1dBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZR3hoY0RBdWQybGtkR2dvS1NBOVBTQnNZWEF5TG5kcFpIUm9LQ2xnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnNZWEF3TG1obGFXZG9kQ2dwSUQwOUlHeGhjREl1YUdWcFoyaDBLQ2xnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnBiVEF1YUdWcFoyaDBLQ2tnUFQwZ2FXMHhMbWhsYVdkb2RDZ3BZQ0JtWVdsc1pXUWdhVzRnQUVobGFXZG9kQ0JwY3lCcGJtTnZibk5wYzNSbGJuUUFRWE56WlhKMGFXOXVJR0JwYlRBdWFHVnBaMmgwS0NrZ1BUMGdhVzB5TG1obGFXZG9kQ2dwWUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdLR2x0TVM1b1pXbG5hSFFvS1Q0K01Ta2dQVDBnYVcweUxtaGxhV2RvZENncFlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnS0dsdE1DNW9aV2xuYUhRb0tUNCtNU2tnUFQwZ2FXMHhMbWhsYVdkb2RDZ3BZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ0tHbHRNQzVvWldsbmFIUW9LVDQrTVNrZ1BUMGdhVzB5TG1obGFXZG9kQ2dwWUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdhVzVrWlhnZ1BDQnRTVzFoWjJWekxuTnBlbVVvS1dBZ1ptRnBiR1ZrSUdsdUlBQkpibVJsZUNCcGN5QnZkWFFnYjJZZ2NtRnVaMlVBVGpaMmFYTnBiMjR4T0VKcGJtOXRhV0ZzVUhseVlXMXBaRE15WmtVQVFYTnpaWEowYVc5dUlHQjNhV1IwYUNBK1BTQTFZQ0JtWVdsc1pXUWdhVzRnQUM5VmMyVnljeTloY3k5RWIyTjFiV1Z1ZEhNdlJHVjJaV3h2Y0cxbGJuUXZaMmwwYUhWaUwyRnlkRzl2Ykd0cGREVXRhbk12YkdsaUwyRnlkRzl2Ykd0cGREVXZiR2xpTDFOU1F5OUxVRTB2Um5KbFlXdE5ZWFJqYUdWeUwyUmxkR1ZqZEc5eWN5OW5ZWFZ6YzJsaGJsOXpZMkZzWlY5emNHRmpaVjl3ZVhKaGJXbGtMbU53Y0FCSmJXRm5aU0JwY3lCMGIyOGdjMjFoYkd3QVFYTnpaWEowYVc5dUlHQm9aV2xuYUhRZ1BqMGdOV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHbHRZV2RsTG5SNWNHVW9LU0E5UFNCSlRVRkhSVjlWU1U1VU9HQWdabUZwYkdWa0lHbHVJQUJKYldGblpTQnRkWE4wSUdKbElHZHlZWGx6WTJGc1pRQkJjM05sY25ScGIyNGdZR2x0WVdkbExtTm9ZVzV1Wld4ektDa2dQVDBnTVdBZ1ptRnBiR1ZrSUdsdUlBQkpiV0ZuWlNCdGRYTjBJR2hoZG1VZ01TQmphR0Z1Ym1Wc0FFRnpjMlZ5ZEdsdmJpQmdiVkI1Y21GdGFXUXVjMmw2WlNncElEMDlJRzFPZFcxUFkzUmhkbVZ6S20xT2RXMVRZMkZzWlhOUVpYSlBZM1JoZG1WZ0lHWmhhV3hsWkNCcGJpQUFVSGx5WVcxcFpDQm9ZWE1nYm05MElHSmxaVzRnWVd4c2IyTmhkR1ZrSUhsbGRBQkJjM05sY25ScGIyNGdZR2x0WVdkbExuZHBaSFJvS0NrZ1BUMGdiVkI1Y21GdGFXUmJNRjB1ZDJsa2RHZ29LV0FnWm1GcGJHVmtJR2x1SUFCSmJXRm5aU0J2WmlCM2NtOXVaeUJ6YVhwbElHWnZjaUJ3ZVhKaGJXbGtBRUZ6YzJWeWRHbHZiaUJnYVcxaFoyVXVhR1ZwWjJoMEtDa2dQVDBnYlZCNWNtRnRhV1JiTUYwdWFHVnBaMmgwS0NsZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0JrYzNRdWRIbHdaU2dwSUQwOUlFbE5RVWRGWDBZek1tQWdabUZwYkdWa0lHbHVJQUJFWlhOMGFXNWhkR2x2YmlCcGJXRm5aU0J6YUc5MWJHUWdZbVVnWVNCbWJHOWhkQUJWYm10dWIzZHVJR2x0WVdkbElIUjVjR1VBVlc1emRYQndiM0owWldRZ2FXMWhaMlVnZEhsd1pRQk9OblpwYzJsdmJqbEZlR05sY0hScGIyNUZBRUZ6YzJWeWRHbHZiaUJnYVcwdWQybGtkR2dvS1NBOVBTQnBiUzV6ZEdWd0tDa3ZjMmw2Wlc5bUtHWnNiMkYwS1dBZ1ptRnBiR1ZrSUdsdUlBQXZWWE5sY25NdllYTXZSRzlqZFcxbGJuUnpMMFJsZG1Wc2IzQnRaVzUwTDJkcGRHaDFZaTloY25SdmIyeHJhWFExTFdwekwyeHBZaTloY25SdmIyeHJhWFExTDJ4cFlpOVRVa012UzFCTkwwWnlaV0ZyVFdGMFkyaGxjaTlrWlhSbFkzUnZjbk12YjNKcFpXNTBZWFJwYjI1ZllYTnphV2R1YldWdWRDNWpjSEFBVTNSbGNDQnphWHBsSUcxMWMzUWdZbVVnWlhGMVlXd2dkRzhnZDJsa2RHZ2dabTl5SUc1dmR3QkJjM05sY25ScGIyNGdZSGdnUGowZ01HQWdabUZwYkdWa0lHbHVJQUI0SUcxMWMzUWdZbVVnY0c5emFYUnBkbVVBUVhOelpYSjBhVzl1SUdCNElEd2diVWR5WVdScFpXNTBjMXR2WTNSaGRtVXFiVTUxYlZOallXeGxjMUJsY2s5amRHRjJaU3R6WTJGc1pWMHVkMmxrZEdnb0tXQWdabUZwYkdWa0lHbHVJQUI0SUcxMWMzUWdZbVVnYkdWemN5QjBhR0Z1SUhSb1pTQnBiV0ZuWlNCM2FXUjBhQUJCYzNObGNuUnBiMjRnWUhrZ1BqMGdNR0FnWm1GcGJHVmtJR2x1SUFCNUlHMTFjM1FnWW1VZ2NHOXphWFJwZG1VQVFYTnpaWEowYVc5dUlHQjVJRHdnYlVkeVlXUnBaVzUwYzF0dlkzUmhkbVVxYlU1MWJWTmpZV3hsYzFCbGNrOWpkR0YyWlN0elkyRnNaVjB1YUdWcFoyaDBLQ2xnSUdaaGFXeGxaQ0JwYmlBQWVTQnRkWE4wSUdKbElHeGxjM01nZEdoaGJpQjBhR1VnYVcxaFoyVWdhR1ZwWjJoMEFFRnpjMlZ5ZEdsdmJpQmdaeTVqYUdGdWJtVnNjeWdwSUQwOUlESmdJR1poYVd4bFpDQnBiaUFBVG5WdFltVnlJRzltSUdOb1lXNXVaV3h6SUhOb2IzVnNaQ0JpWlNBeUFFRnpjMlZ5ZEdsdmJpQmdiV0Y0WDJobGFXZG9kQ0ErSURCZ0lHWmhhV3hsWkNCcGJpQUFUV0Y0YVcxMWJTQmlhVzRnYzJodmRXeGtJR0psSUhCdmMybDBhWFpsQUVGemMyVnlkR2x2YmlCZ2FHbHpkQ0FoUFNCT1ZVeE1ZQ0JtWVdsc1pXUWdhVzRnQUM5VmMyVnljeTloY3k5RWIyTjFiV1Z1ZEhNdlJHVjJaV3h2Y0cxbGJuUXZaMmwwYUhWaUwyRnlkRzl2Ykd0cGREVXRhbk12YkdsaUwyRnlkRzl2Ykd0cGREVXZiR2xpTDFOU1F5OUxVRTB2Um5KbFlXdE5ZWFJqYUdWeUwyUmxkR1ZqZEc5eWN5OXZjbWxsYm5SaGRHbHZibDloYzNOcFoyNXRaVzUwTG1nQVNHbHpkRzluY21GdElIQnZhVzUwWlhJZ2FYTWdUbFZNVEFCQmMzTmxjblJwYjI0Z1lDaG1ZbWx1S3pBdU5XWXBJRDRnTUNBbUppQW9abUpwYmkwd0xqVm1LU0E4SUc1MWJWOWlhVzV6WUNCbVlXbHNaV1FnYVc0Z0FFUmxZMmx0WVd3Z1ltbHVJSEJ2YzJsMGFXOXVJR2x1WkdWNElHOTFkQ0J2WmlCeVlXNW5aUUJCYzNObGNuUnBiMjRnWUcxaFoyNXBkSFZrWlNBK1BTQXdZQ0JtWVdsc1pXUWdhVzRnQUUxaFoyNXBkSFZrWlNCallXNXViM1FnWW1VZ2JtVm5ZWFJwZG1VQVFYTnpaWEowYVc5dUlHQnVkVzFmWW1sdWN5QStQU0F3WUNCbVlXbHNaV1FnYVc0Z0FFNTFiV0psY2lCaWFXNXpJRzExYzNRZ1ltVWdjRzl6YVhScGRtVUFRWE56WlhKMGFXOXVJR0IzTVNBK1BTQXdZQ0JtWVdsc1pXUWdhVzRnQUhjeElHMTFjM1FnWW1VZ2NHOXphWFJwZG1VQVFYTnpaWEowYVc5dUlHQjNNaUErUFNBd1lDQm1ZV2xzWldRZ2FXNGdBSGN5SUcxMWMzUWdZbVVnY0c5emFYUnBkbVVBUVhOelpYSjBhVzl1SUdCaU1TQStQU0F3SUNZbUlHSXhJRHdnYm5WdFgySnBibk5nSUdaaGFXeGxaQ0JwYmlBQVlqRWdZbWx1SUdsdVpHVjRJRzkxZENCdlppQnlZVzVuWlFCQmMzTmxjblJwYjI0Z1lHSXlJRDQ5SURBZ0ppWWdZaklnUENCdWRXMWZZbWx1YzJBZ1ptRnBiR1ZrSUdsdUlBQmlNaUJpYVc0Z2FXNWtaWGdnYjNWMElHOW1JSEpoYm1kbEFFbEVJR0ZzY21WaFpIa2daWGhwYzNSekFFSjFhV3hrSUZCNWNtRnRhV1FBUlhoMGNtRmpkQ0JHWldGMGRYSmxjd0JCYzNObGNuUnBiMjRnWUdGemMybG5ibTFsYm5RdWMybDZaU2dwSUQwOUlHNTFiVjlwYm1ScFkyVnpZQ0JtWVdsc1pXUWdhVzRnQUM5VmMyVnljeTloY3k5RWIyTjFiV1Z1ZEhNdlJHVjJaV3h2Y0cxbGJuUXZaMmwwYUhWaUwyRnlkRzl2Ykd0cGREVXRhbk12YkdsaUwyRnlkRzl2Ykd0cGREVXZiR2xpTDFOU1F5OUxVRTB2Um5KbFlXdE5ZWFJqYUdWeUwyMWhkR05vWlhKekwySnBibUZ5ZVY5b2FXVnlZWEpqYUdsallXeGZZMngxYzNSbGNtbHVaeTVvQUVGemMybG5ibTFsYm5RZ2MybDZaU0IzY205dVp3QkJjM05sY25ScGIyNGdZR0Z6YzJsbmJtMWxiblJiYVYwZ0lUMGdMVEZnSUdaaGFXeGxaQ0JwYmlBQVFYTnphV2R1YldWdWRDQnBjeUJwYm5aaGJHbGtBRUZ6YzJWeWRHbHZiaUJnWVhOemFXZHViV1Z1ZEZ0cFhTQThJRzUxYlY5cGJtUnBZMlZ6WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMmxuYm0xbGJuUWdiM1YwSUc5bUlISmhibWRsQUVGemMyVnlkR2x2YmlCZ2FXNWthV05sYzF0aGMzTnBaMjV0Wlc1MFcybGRYU0E4SUc1MWJWOW1aV0YwZFhKbGMyQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUdsMExUNXpaV052Ym1RdWMybDZaU2dwSUNFOUlEQmdJR1poYVd4bFpDQnBiaUFBUTJ4MWMzUmxjaUJ0ZFhOMElHaGhkbVVnWVhSc1pXRnpaWFFnTVNCbVpXRjBkWEpsQUVGemMyVnlkR2x2YmlCZ2JVc2dQVDBnYlVObGJuUmxjbk11YzJsNlpTZ3BZQ0JtWVdsc1pXUWdhVzRnQUM5VmMyVnljeTloY3k5RWIyTjFiV1Z1ZEhNdlJHVjJaV3h2Y0cxbGJuUXZaMmwwYUhWaUwyRnlkRzl2Ykd0cGREVXRhbk12YkdsaUwyRnlkRzl2Ykd0cGREVXZiR2xpTDFOU1F5OUxVRTB2Um5KbFlXdE5ZWFJqYUdWeUwyMWhkR05vWlhKekwydHRaV1J2YVdSekxtZ0FheUJ6YUc5MWJHUWdiV0YwWTJnZ2RHaGxJRzUxYldKbGNpQnZaaUJqYkhWemRHVnlJR05sYm5SbGNuTUFRWE56WlhKMGFXOXVJR0J1ZFcxZlptVmhkSFZ5WlhNZ1BpQXdZQ0JtWVdsc1pXUWdhVzRnQUU1MWJXSmxjaUJ2WmlCbVpXRjBkWEpsY3lCdGRYTjBJR0psSUhCdmMybDBhWFpsQUVGemMyVnlkR2x2YmlCZ2JuVnRYMmx1WkdsalpYTWdQRDBnYm5WdFgyWmxZWFIxY21WellDQm1ZV2xzWldRZ2FXNGdBRTF2Y21VZ2FXNWthV05sY3lCMGFHRnVJR1psWVhSMWNtVnpBRUZ6YzJWeWRHbHZiaUJnYm5WdFgybHVaR2xqWlhNZ1BqMGdiVXRnSUdaaGFXeGxaQ0JwYmlBQVRtOTBJR1Z1YjNWbmFDQm1aV0YwZFhKbGN3QkJjM05wWjI1dFpXNTBJSE5wZW1VZ2FYTWdhVzVqYjNKeVpXTjBBRUZ6YzJWeWRHbHZiaUJnYm5WdFgyTmxiblJsY25NZ1BpQXdZQ0JtWVdsc1pXUWdhVzRnQUZSb1pYSmxJRzExYzNRZ1ltVWdZWFFnYkdWaGMzUWdNU0JqWlc1MFpYSUFMMVZ6WlhKekwyRnpMMFJ2WTNWdFpXNTBjeTlFWlhabGJHOXdiV1Z1ZEM5bmFYUm9kV0l2WVhKMGIyOXNhMmwwTlMxcWN5OXNhV0l2WVhKMGIyOXNhMmwwTlM5c2FXSXZVMUpETDB0UVRTOUdjbVZoYTAxaGRHTm9aWEl2YldGMFkyaGxjbk12ZG1semRXRnNYMlJoZEdGaVlYTmxMbWdBUVhOelpYSjBhVzl1SUdCa1pYUmxZM1J2Y21BZ1ptRnBiR1ZrSUdsdUlBQkVaWFJsWTNSdmNpQnBjeUJPVlV4TUFFRnpjMlZ5ZEdsdmJpQmdjSGx5WVcxcFpDMCthVzFoWjJWektDa3VjMmw2WlNncElENGdNR0FnWm1GcGJHVmtJR2x1SUFCUWVYSmhiV2xrSUdseklHVnRjSFI1QUVGemMyVnlkR2x2YmlCZ2NIbHlZVzFwWkMwK2FXMWhaMlZ6S0NsYk1GMHVkMmxrZEdnb0tTQTlQU0JrWlhSbFkzUnZjaTArZDJsa2RHZ29LV0FnWm1GcGJHVmtJR2x1SUFCUWVYSmhiV2xrSUdGdVpDQmtaWFJsWTNSdmNpQnphWHBsSUcxcGMyMWhkR05vQUVGemMyVnlkR2x2YmlCZ2NIbHlZVzFwWkMwK2FXMWhaMlZ6S0NsYk1GMHVhR1ZwWjJoMEtDa2dQVDBnWkdWMFpXTjBiM0l0UG1obGFXZG9kQ2dwWUNCbVlXbHNaV1FnYVc0Z0FFNVRkRE5mWHpJeE5HUmxabUYxYkhSZlpHVnNaWFJsU1U0MmRtbHphVzl1T0V0bGVXWnlZVzFsU1V4cE9UWkZSVVZGUlFCT1UzUXpYMTh5TWpCZlgzTm9ZWEpsWkY5d2RISmZjRzlwYm5SbGNrbFFUaloyYVhOcGIyNDRTMlY1Wm5KaGJXVkpUR2s1TmtWRlJVNVRYekUwWkdWbVlYVnNkRjlrWld4bGRHVkpVek5mUlVWT1UxODVZV3hzYjJOaGRHOXlTVk16WDBWRlJVVUFXeVZ6WFNCYkpYTmRJRnNsYzEwZ09pQkdiM1Z1WkNBbFpDQm1aV0YwZFhKbGN5QnBiaUJ4ZFdWeWVRQmliMjlzSUhacGMybHZiam82Vm1semRXRnNSR0YwWVdKaGMyVThkbWx6YVc5dU9qcEdVa1ZCUzBWNGRISmhZM1J2Y2l3Z2RtbHphVzl1T2pwQ2FXNWhjbmxHWldGMGRYSmxVM1J2Y21Vc0lIWnBjMmx2YmpvNlFtbHVZWEo1Um1WaGRIVnlaVTFoZEdOb1pYSThPVFkrSUQ0Nk9uRjFaWEo1S0dOdmJuTjBJSFpwYzJsdmJqbzZSMkYxYzNOcFlXNVRZMkZzWlZOd1lXTmxVSGx5WVcxcFpDQXFLU0JiUmtWQlZGVlNSVjlGV0ZSU1FVTlVUMUlnUFNCMmFYTnBiMjQ2T2taU1JVRkxSWGgwY21GamRHOXlMQ0JUVkU5U1JTQTlJSFpwYzJsdmJqbzZRbWx1WVhKNVJtVmhkSFZ5WlZOMGIzSmxMQ0JOUVZSRFNFVlNJRDBnZG1semFXOXVPanBDYVc1aGNubEdaV0YwZFhKbFRXRjBZMmhsY2p3NU5qNWRBRVpwYm1RZ1RXRjBZMmhsY3lBb01Ta0FTRzkxWjJnZ1ZtOTBhVzVuSUNneEtRQkdhVzVrSUVodmRXZG9JRTFoZEdOb1pYTWdLREVwQUVWemRHbHRZWFJsSUVodmJXOW5jbUZ3YUhrZ0tERXBBRVpwYm1RZ1NXNXNhV1Z5Y3lBb01Ta0FSbWx1WkNCTllYUmphR1Z6SUNneUtRQkliM1ZuYUNCV2IzUnBibWNnS0RJcEFFWnBibVFnU0c5MVoyZ2dUV0YwWTJobGN5QW9NaWtBUlhOMGFXMWhkR1VnU0c5dGIyZHlZWEJvZVNBb01pa0FSbWx1WkNCSmJteHBaWEp6SUNneUtRQkJjM05sY25ScGIyNGdZREJnSUdaaGFXeGxaQ0JwYmlBQUwxVnpaWEp6TDJGekwwUnZZM1Z0Wlc1MGN5OUVaWFpsYkc5d2JXVnVkQzluYVhSb2RXSXZZWEowYjI5c2EybDBOUzFxY3k5c2FXSXZZWEowYjI5c2EybDBOUzlzYVdJdlUxSkRMMHRRVFM5R2NtVmhhMDFoZEdOb1pYSXZiV0YwWTJobGNuTXZabVZoZEhWeVpWOXRZWFJqYUdWeUxXbHViR2x1WlM1b0FFWmhhV3hsWkNCMGJ5QmpiMjF3ZFhSbElHMWhkSEpwZUNCcGJuWmxjbk5sQUVGemMyVnlkR2x2YmlCZ1ltVnpkRjlwYm1SbGVDQWhQU0J6ZEdRNk9tNTFiV1Z5YVdOZmJHbHRhWFJ6UEhOcGVtVmZkRDQ2T20xaGVDZ3BZQ0JtWVdsc1pXUWdhVzRnQUZOdmJXVjBhR2x1WnlCemRISmhibWRsQUVGemMyVnlkR2x2YmlCZ2JVMWhkR05vWlhNdWMybDZaU2dwSUR3OUlHWmxZWFIxY21Wek1TMCtjMmw2WlNncFlDQm1ZV2xzWldRZ2FXNGdBRTUxYldKbGNpQnZaaUJ0WVhSamFHVnpJSE5vYjNWc1pDQmlaU0JzYjNkbGNnQkJjM05sY25ScGIyNGdZR2g1Y0M1emFYcGxLQ2tnUGowZ09TcHRZWGhmYm5WdFgyaDVjRzkwYUdWelpYTmdJR1poYVd4bFpDQnBiaUFBTDFWelpYSnpMMkZ6TDBSdlkzVnRaVzUwY3k5RVpYWmxiRzl3YldWdWRDOW5hWFJvZFdJdllYSjBiMjlzYTJsME5TMXFjeTlzYVdJdllYSjBiMjlzYTJsME5TOXNhV0l2VTFKREwwdFFUUzlHY21WaGEwMWhkR05vWlhJdmFHOXRiMmR5WVhCb2VWOWxjM1JwYldGMGFXOXVMM0p2WW5WemRGOW9iMjF2WjNKaGNHaDVMbWdBYUhsd0lIWmxZM1J2Y2lCemFHOTFiR1FnWW1VZ2IyWWdjMmw2WlNBNUttMWhlRjl1ZFcxZmFIbHdiM1JvWlhObGN3QkJjM05sY25ScGIyNGdZSFJ0Y0Y5cExuTnBlbVVvS1NBK1BTQnVkVzFmY0c5cGJuUnpZQ0JtWVdsc1pXUWdhVzRnQUhSdGNGOXBJSFpsWTNSdmNpQnphRzkxYkdRZ1ltVWdiMllnYzJsNlpTQnVkVzFmY0c5cGJuUnpBRUZ6YzJWeWRHbHZiaUJnYUhsd1gyTnZjM1J6TG5OcGVtVW9LU0ErUFNCdFlYaGZiblZ0WDJoNWNHOTBhR1Z6WlhOZ0lHWmhhV3hsWkNCcGJpQUFhSGx3WDJOdmMzUnpJSFpsWTNSdmNpQnphRzkxYkdRZ1ltVWdiMllnYzJsNlpTQnRZWGhmYm5WdFgyaDVjRzkwYUdWelpYTUFRWE56WlhKMGFXOXVJR0J1SUR3OUlHbHVYMjFoZEdOb1pYTXVjMmw2WlNncFlDQm1ZV2xzWldRZ2FXNGdBRk5vYjNWc1pDQmlaU0IwYUdVZ2MyRnRaUUJCYzNObGNuUnBiMjRnWUdScGMzUkNhVzVCYm1kc1pTQStQU0F3WUNCbVlXbHNaV1FnYVc0Z0FHUnBjM1JDYVc1QmJtZHNaU0J0ZFhOMElHNXZkQ0JpWlNCdVpXZGhkR2wyWlFCQmMzTmxjblJwYjI0Z1lHMVNiMjkwTG1kbGRDZ3BZQ0JtWVdsc1pXUWdhVzRnQUZKdmIzUWdZMkZ1Ym05MElHSmxJRTVWVEV3QVFYTnpaWEowYVc5dUlHQnRhVzVwSUNFOUlDMHhZQ0JtWVdsc1pXUWdhVzRnQUUxcGJtbHRkVzBnYVc1a1pYZ2dibTkwSUhObGRBQkJjM05sY25ScGIyNGdZSGdnUGowZ2JVMXBibGhnSUdaaGFXeGxaQ0JwYmlBQUwxVnpaWEp6TDJGekwwUnZZM1Z0Wlc1MGN5OUVaWFpsYkc5d2JXVnVkQzluYVhSb2RXSXZZWEowYjI5c2EybDBOUzFxY3k5c2FXSXZZWEowYjI5c2EybDBOUzlzYVdJdlUxSkRMMHRRVFM5R2NtVmhhMDFoZEdOb1pYSXZiV0YwWTJobGNuTXZhRzkxWjJoZmMybHRhV3hoY21sMGVWOTJiM1JwYm1jdWFBQjRJRzkxZENCdlppQnlZVzVuWlFCQmMzTmxjblJwYjI0Z1lIZ2dQQ0J0VFdGNFdHQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUhrZ1BqMGdiVTFwYmxsZ0lHWmhhV3hsWkNCcGJpQUFlU0J2ZFhRZ2IyWWdjbUZ1WjJVQVFYTnpaWEowYVc5dUlHQjVJRHdnYlUxaGVGbGdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCaGJtZHNaU0ErSUMxUVNXQWdabUZwYkdWa0lHbHVJQUJoYm1kc1pTQnZkWFFnYjJZZ2NtRnVaMlVBUVhOelpYSjBhVzl1SUdCaGJtZHNaU0E4UFNCUVNXQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUhOallXeGxJRDQ5SUcxTmFXNVRZMkZzWldBZ1ptRnBiR1ZrSUdsdUlBQnpZMkZzWlNCdmRYUWdiMllnY21GdVoyVUFRWE56WlhKMGFXOXVJR0J6WTJGc1pTQThJRzFOWVhoVFkyRnNaV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHbHVaR1Y0SUQ0OUlEQmdJR1poYVd4bFpDQnBiaUFBYVc1a1pYZ2diM1YwSUc5bUlISmhibWRsQUVGemMyVnlkR2x2YmlCZ1ltbHVXQ0ErUFNBd1lDQm1ZV2xzWldRZ2FXNGdBR0pwYmxnZ2IzVjBJRzltSUhKaGJtZGxBRUZ6YzJWeWRHbHZiaUJnWW1sdVdDQThJRzFPZFcxWVFtbHVjMkFnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHSnBibGtnUGowZ01HQWdabUZwYkdWa0lHbHVJQUJpYVc1WklHOTFkQ0J2WmlCeVlXNW5aUUJCYzNObGNuUnBiMjRnWUdKcGJsa2dQQ0J0VG5WdFdVSnBibk5nSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQmlhVzVCYm1kc1pTQStQU0F3WUNCbVlXbHNaV1FnYVc0Z0FHSnBia0Z1WjJ4bElHOTFkQ0J2WmlCeVlXNW5aUUJCYzNObGNuUnBiMjRnWUdKcGJrRnVaMnhsSUR3Z2JVNTFiVUZ1WjJ4bFFtbHVjMkFnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHSnBibE5qWVd4bElENDlJREJnSUdaaGFXeGxaQ0JwYmlBQVltbHVVMk5oYkdVZ2IzVjBJRzltSUhKaGJtZGxBRUZ6YzJWeWRHbHZiaUJnWW1sdVUyTmhiR1VnUENCdFRuVnRVMk5oYkdWQ2FXNXpZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ2FXNWtaWGdnUEQwZ0tHSnBibGdnS3lCaWFXNVpLbTFPZFcxWVFtbHVjeUFySUdKcGJrRnVaMnhsS20xT2RXMVlRbWx1Y3lwdFRuVnRXVUpwYm5NZ0t5QmlhVzVUWTJGc1pTcHRUblZ0V0VKcGJuTXFiVTUxYlZsQ2FXNXpLbTFPZFcxQmJtZHNaVUpwYm5NcFlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnYzJsNlpTQStJREJnSUdaaGFXeGxaQ0JwYmlBQUwxVnpaWEp6TDJGekwwUnZZM1Z0Wlc1MGN5OUVaWFpsYkc5d2JXVnVkQzluYVhSb2RXSXZZWEowYjI5c2EybDBOUzFxY3k5c2FXSXZZWEowYjI5c2EybDBOUzlzYVdJdlUxSkRMMHRRVFM5R2NtVmhhMDFoZEdOb1pYSXZiV0YwWTJobGNuTXZhRzkxWjJoZmMybHRhV3hoY21sMGVWOTJiM1JwYm1jdVkzQndBSE5wZW1VZ2JYVnpkQ0JpWlNCd2IzTnBkR2wyWlFCQmMzTmxjblJwYjI0Z1lHMVNaV1pKYldGblpWZHBaSFJvSUQ0Z01HQWdabUZwYkdWa0lHbHVJQUIzYVdSMGFDQnRkWE4wSUdKbElIQnZjMmwwYVhabEFFRnpjMlZ5ZEdsdmJpQmdiVkpsWmtsdFlXZGxTR1ZwWjJoMElENGdNR0FnWm1GcGJHVmtJR2x1SUFCb1pXbG5hSFFnYlhWemRDQmlaU0J3YjNOcGRHbDJaUUJCYzNObGNuUnBiMjRnWUc0Z1BpQXdZQ0JtWVdsc1pXUWdhVzRnQUM5VmMyVnljeTloY3k5RWIyTjFiV1Z1ZEhNdlJHVjJaV3h2Y0cxbGJuUXZaMmwwYUhWaUwyRnlkRzl2Ykd0cGREVXRhbk12YkdsaUwyRnlkRzl2Ykd0cGREVXZiR2xpTDFOU1F5OUxVRTB2Um5KbFlXdE5ZWFJqYUdWeUwzVjBhV3h6TDNCaGNuUnBZV3hmYzI5eWRDNW9BRzRnYlhWemRDQmlaU0J3YjNOcGRHbDJaUUJCYzNObGNuUnBiMjRnWUdzZ1BpQXdZQ0JtWVdsc1pXUWdhVzRnQUdzZ2JYVnpkQ0JpWlNCd2IzTnBkR2wyWlFCQmMzTmxjblJwYjI0Z1lIQjVjbUZ0YVdSZ0lHWmhhV3hsWkNCcGJpQUFMMVZ6WlhKekwyRnpMMFJ2WTNWdFpXNTBjeTlFWlhabGJHOXdiV1Z1ZEM5bmFYUm9kV0l2WVhKMGIyOXNhMmwwTlMxcWN5OXNhV0l2WVhKMGIyOXNhMmwwTlM5c2FXSXZVMUpETDB0UVRTOUdjbVZoYTAxaGRHTm9aWEl2YldGMFkyaGxjbk12Wm5KbFlXc3VhQUJRZVhKaGJXbGtJR2x6SUU1VlRFd0FRWE56WlhKMGFXOXVJR0J6ZEc5eVpTNXphWHBsS0NrZ1BUMGdjRzlwYm5SekxuTnBlbVVvS1dBZ1ptRnBiR1ZrSUdsdUlBQkdaV0YwZFhKbElITjBiM0psSUdoaGN5QnViM1FnWW1WbGJpQmhiR3h2WTJGMFpXUUFRWE56WlhKMGFXOXVJR0J1ZFcxZmNHOXBiblJ6SUQwOUlIQnZhVzUwY3k1emFYcGxLQ2xnSUdaaGFXeGxaQ0JwYmlBQVUyaHZkV3hrSUdKbElITmhiV1VnYzJsNlpRQkJjM05sY25ScGIyNGdZRzlqZEdGMlpTQStQU0F3WUNCbVlXbHNaV1FnYVc0Z0FDOVZjMlZ5Y3k5aGN5OUViMk4xYldWdWRITXZSR1YyWld4dmNHMWxiblF2WjJsMGFIVmlMMkZ5ZEc5dmJHdHBkRFV0YW5NdmJHbGlMMkZ5ZEc5dmJHdHBkRFV2YkdsaUwxTlNReTlMVUUwdlJuSmxZV3ROWVhSamFHVnlMMlJsZEdWamRHOXljeTluWVhWemMybGhibDl6WTJGc1pWOXpjR0ZqWlY5d2VYSmhiV2xrTG1nQVQyTjBZWFpsSUcxMWMzUWdZbVVnY0c5emFYUnBkbVVBUVhOelpYSjBhVzl1SUdCdlkzUmhkbVVnUENCdFRuVnRUMk4wWVhabGMyQWdabUZwYkdWa0lHbHVJQUJQWTNSaGRtVWdiWFZ6ZENCaVpTQnNaWE56SUhSb1lXNGdiblZ0WW1WeUlHOW1JRzlqZEdGMlpYTUFRWE56WlhKMGFXOXVJR0J6WTJGc1pTQStQU0F3WUNCbVlXbHNaV1FnYVc0Z0FGTmpZV3hsSUcxMWMzUWdZbVVnY0c5emFYUnBkbVVBUVhOelpYSjBhVzl1SUdCelkyRnNaU0E4SUcxT2RXMVRZMkZzWlhOUVpYSlBZM1JoZG1WZ0lHWmhhV3hsWkNCcGJpQUFVMk5oYkdVZ2JYVnpkQ0JpWlNCc1pYTnpJSFJvWVc0Z2JuVnRZbVZ5SUc5bUlITmpZV3hsSUhCbGNpQnZZM1JoZG1VQUpXMHRKV1F0SlZrdEpVZ3RKVTB0SlZNQVFYTnpaWEowYVc5dUlHQjNhV1IwYUNBK0lEQmdJR1poYVd4bFpDQnBiaUFBTDFWelpYSnpMMkZ6TDBSdlkzVnRaVzUwY3k5RVpYWmxiRzl3YldWdWRDOW5hWFJvZFdJdllYSjBiMjlzYTJsME5TMXFjeTlzYVdJdllYSjBiMjlzYTJsME5TOXNhV0l2VTFKREwwdFFUUzlHY21WaGEwMWhkR05vWlhJdlpuSmhiV1YzYjNKckwybHRZV2RsTG1Od2NBQlhhV1IwYUNCallXNXViM1FnWW1VZ2VtVnlid0JCYzNObGNuUnBiMjRnWUdobGFXZG9kQ0ErSURCZ0lHWmhhV3hsWkNCcGJpQUFTR1ZwWjJoMElHTmhibTV2ZENCaVpTQjZaWEp2QUVGemMyVnlkR2x2YmlCZ2MzUmxjQ0ErUFNCM2FXUjBhR0FnWm1GcGJHVmtJR2x1SUFCVGRHVndJRzExYzNRZ1ltVWdaM0psWVhSbGNpQjBhR0Z1SUc5eUlHVnhkV0ZzSUhSb1pTQjNhV1IwYUFCQmMzTmxjblJwYjI0Z1lHTm9ZVzV1Wld4eklENGdNR0FnWm1GcGJHVmtJR2x1SUFCT2RXMWlaWElnYjJZZ1kyaGhibTVsYkhNZ1kyRnVibTkwSUdKbElIcGxjbThBUVhOelpYSjBhVzl1SUdCdFJHRjBZUzVuWlhRb0tXQWdabUZwYkdWa0lHbHVJQUJFWVhSaElIQnZhVzUwWlhJZ2FYTWdUbFZNVEFCT1UzUXpYMTh5TVRSa1pXWmhkV3gwWDJSbGJHVjBaVWxvUlVVQVRsTjBNMTlmTWpJd1gxOXphR0Z5WldSZmNIUnlYM0J2YVc1MFpYSkpVR2hPVTE4eE5HUmxabUYxYkhSZlpHVnNaWFJsU1doRlJVNVRYemxoYkd4dlkyRjBiM0pKYUVWRlJVVUFTVzUyWVd4cFpDQnBiV0ZuWlNCMGVYQmxBREUyVG5Wc2JFRnljbUY1UkdWc1pYUmxja2xvUlFCT1UzUXpYMTh5TWpCZlgzTm9ZWEpsWkY5d2RISmZjRzlwYm5SbGNrbFFhREUyVG5Wc2JFRnljbUY1UkdWc1pYUmxja2xvUlU1VFh6bGhiR3h2WTJGMGIzSkphRVZGUlVVQVFYTnpaWEowYVc5dUlHQnRVM1JoY25SVWFXMWxJRDQ5SURCZ0lHWmhhV3hsWkNCcGJpQUFMMVZ6WlhKekwyRnpMMFJ2WTNWdFpXNTBjeTlFWlhabGJHOXdiV1Z1ZEM5bmFYUm9kV0l2WVhKMGIyOXNhMmwwTlMxcWN5OXNhV0l2WVhKMGIyOXNhMmwwTlM5c2FXSXZVMUpETDB0UVRTOUdjbVZoYTAxaGRHTm9aWEl2Wm5KaGJXVjNiM0pyTDNScGJXVnljeTVqY0hBQUlHeHBibVVnQURvZ0FFTnNiMk5ySUdoaGN5QnViM1FnWW1WbGJpQnpkR0Z5ZEdWa0FFRnpjMlZ5ZEdsdmJpQmdiVk4wYjNCVWFXMWxJRDQ5SURCZ0lHWmhhV3hsWkNCcGJpQUFRMnh2WTJzZ2FHRnpJRzV2ZENCaVpXVnVJSE4wYjNCd1pXUUFXeVZ6WFNCYkpYTmRJRnNsYzEwZ09pQWxjem9nSldZZ2JYTUFJRWxPUms4Z0lBQjJhWE5wYjI0Nk9sTmpiM0JsWkZScGJXVnlPanArVTJOdmNHVmtWR2x0WlhJb0tRQnpaWFIxY0FCMFpXRnlaRzkzYmdCelpYUjFjRUZTTWdCZllXUmtUV0Z5YTJWeUFGOWhaR1JOZFd4MGFVMWhjbXRsY2dCZllXUmtUa1pVVFdGeWEyVnlBR2RsZEUxMWJIUnBUV0Z5YTJWeVRuVnRBR2RsZEUxMWJIUnBUV0Z5YTJWeVEyOTFiblFBWDJ4dllXUkRZVzFsY21FQWMyVjBUV0Z5YTJWeVNXNW1iMFJwY2dCelpYUk5ZWEpyWlhKSmJtWnZWbVZ5ZEdWNEFHZGxkRlJ5WVc1elRXRjBVM0YxWVhKbEFHZGxkRlJ5WVc1elRXRjBVM0YxWVhKbFEyOXVkQUJuWlhSVWNtRnVjMDFoZEUxMWJIUnBVM0YxWVhKbEFHZGxkRlJ5WVc1elRXRjBUWFZzZEdsVGNYVmhjbVZTYjJKMWMzUUFaR1YwWldOMFRXRnlhMlZ5QUdkbGRFMWhjbXRsY2s1MWJRQmtaWFJsWTNST1JsUk5ZWEpyWlhJQVoyVjBUWFZzZEdsRllXTm9UV0Z5YTJWeUFHZGxkRTFoY210bGNnQm5aWFJPUmxSTllYSnJaWElBYzJWMFJHVmlkV2ROYjJSbEFHZGxkRVJsWW5WblRXOWtaUUJuWlhSUWNtOWpaWE56YVc1blNXMWhaMlVBYzJWMFRHOW5UR1YyWld3QVoyVjBURzluVEdWMlpXd0FjMlYwVUhKdmFtVmpkR2x2Yms1bFlYSlFiR0Z1WlFCblpYUlFjbTlxWldOMGFXOXVUbVZoY2xCc1lXNWxBSE5sZEZCeWIycGxZM1JwYjI1R1lYSlFiR0Z1WlFCblpYUlFjbTlxWldOMGFXOXVSbUZ5VUd4aGJtVUFjMlYwVkdoeVpYTm9iMnhrVFc5a1pRQm5aWFJVYUhKbGMyaHZiR1JOYjJSbEFITmxkRlJvY21WemFHOXNaQUJuWlhSVWFISmxjMmh2YkdRQWMyVjBVR0YwZEdWeWJrUmxkR1ZqZEdsdmJrMXZaR1VBWjJWMFVHRjBkR1Z5YmtSbGRHVmpkR2x2YmsxdlpHVUFjMlYwVUdGMGRGSmhkR2x2QUdkbGRGQmhkSFJTWVhScGJ3QnpaWFJOWVhSeWFYaERiMlJsVkhsd1pRQm5aWFJOWVhSeWFYaERiMlJsVkhsd1pRQnpaWFJNWVdKbGJHbHVaMDF2WkdVQVoyVjBUR0ZpWld4cGJtZE5iMlJsQUhObGRFbHRZV2RsVUhKdlkwMXZaR1VBWjJWMFNXMWhaMlZRY205alRXOWtaUUJGVWxKUFVsOUJVa05QVGxSU1QweE1SVkpmVGs5VVgwWlBWVTVFQUVWU1VrOVNYMDFWVEZSSlRVRlNTMFZTWDA1UFZGOUdUMVZPUkFCRlVsSlBVbDlOUVZKTFJWSmZTVTVFUlZoZlQxVlVYMDlHWDBKUFZVNUVVd0JCVWw5RVJVSlZSMTlFU1ZOQlFreEZBRUZTWDBSRlFsVkhYMFZPUVVKTVJRQkJVbDlFUlVaQlZVeFVYMFJGUWxWSFgwMVBSRVVBUVZKZlRFRkNSVXhKVGtkZlYwaEpWRVZmVWtWSFNVOU9BRUZTWDB4QlFrVk1TVTVIWDBKTVFVTkxYMUpGUjBsUFRnQkJVbDlFUlVaQlZVeFVYMHhCUWtWTVNVNUhYMDFQUkVVQVFWSmZSRVZHUVZWTVZGOU1RVUpGVEVsT1IxOVVTRkpGVTBnQVFWSmZTVTFCUjBWZlVGSlBRMTlHVWtGTlJWOUpUVUZIUlFCQlVsOUpUVUZIUlY5UVVrOURYMFpKUlV4RVgwbE5RVWRGQUVGU1gwUkZSa0ZWVEZSZlNVMUJSMFZmVUZKUFExOU5UMFJGQUVGU1gxUkZUVkJNUVZSRlgwMUJWRU5JU1U1SFgwTlBURTlTQUVGU1gxUkZUVkJNUVZSRlgwMUJWRU5JU1U1SFgwMVBUazhBUVZKZlRVRlVVa2xZWDBOUFJFVmZSRVZVUlVOVVNVOU9BRUZTWDFSRlRWQk1RVlJGWDAxQlZFTklTVTVIWDBOUFRFOVNYMEZPUkY5TlFWUlNTVmdBUVZKZlZFVk5VRXhCVkVWZlRVRlVRMGhKVGtkZlRVOU9UMTlCVGtSZlRVRlVVa2xZQUVGU1gwUkZSa0ZWVEZSZlVFRlVWRVZTVGw5RVJWUkZRMVJKVDA1ZlRVOUVSUUJCVWw5VlUwVmZWRkpCUTB0SlRrZGZTRWxUVkU5U1dRQkJVbDlPVDFWVFJWOVVVa0ZEUzBsT1IxOUlTVk5VVDFKWkFFRlNYMVZUUlY5VVVrRkRTMGxPUjE5SVNWTlVUMUpaWDFZeUFFRlNYMFJGUmtGVlRGUmZUVUZTUzBWU1gwVllWRkpCUTFSSlQwNWZUVTlFUlFCQlVsOU5RVmhmVEU5UFVGOURUMVZPVkFCQlVsOU1UMDlRWDBKU1JVRkxYMVJJVWtWVFNBQkJVbDlNVDBkZlRFVldSVXhmUkVWQ1ZVY0FRVkpmVEU5SFgweEZWa1ZNWDBsT1JrOEFRVkpmVEU5SFgweEZWa1ZNWDFkQlVrNEFRVkpmVEU5SFgweEZWa1ZNWDBWU1VrOVNBRUZTWDB4UFIxOU1SVlpGVEY5U1JVeGZTVTVHVHdCQlVsOU5RVlJTU1ZoZlEwOUVSVjh6ZURNQVFWSmZUVUZVVWtsWVgwTlBSRVZmTTNnelgwaEJUVTFKVGtjMk13QkJVbDlOUVZSU1NWaGZRMDlFUlY4emVETmZVRUZTU1ZSWk5qVUFRVkpmVFVGVVVrbFlYME5QUkVWZk5IZzBBRUZTWDAxQlZGSkpXRjlEVDBSRlh6UjRORjlDUTBoZk1UTmZPVjh6QUVGU1gwMUJWRkpKV0Y5RFQwUkZYelI0TkY5Q1EwaGZNVE5mTlY4MUFFRlNYMHhCUWtWTVNVNUhYMVJJVWtWVFNGOU5UMFJGWDAxQlRsVkJUQUJCVWw5TVFVSkZURWxPUjE5VVNGSkZVMGhmVFU5RVJWOUJWVlJQWDAxRlJFbEJUZ0JCVWw5TVFVSkZURWxPUjE5VVNGSkZVMGhmVFU5RVJWOUJWVlJQWDA5VVUxVUFRVkpmVEVGQ1JVeEpUa2RmVkVoU1JWTklYMDFQUkVWZlFWVlVUMTlCUkVGUVZFbFdSUUJCVWw5TlFWSkxSVkpmU1U1R1QxOURWVlJQUmtaZlVFaEJVMFZmVGs5T1JRQkJVbDlOUVZKTFJWSmZTVTVHVDE5RFZWUlBSa1pmVUVoQlUwVmZVRUZVVkVWU1RsOUZXRlJTUVVOVVNVOU9BRUZTWDAxQlVrdEZVbDlKVGtaUFgwTlZWRTlHUmw5UVNFRlRSVjlOUVZSRFNGOUhSVTVGVWtsREFFRlNYMDFCVWt0RlVsOUpUa1pQWDBOVlZFOUdSbDlRU0VGVFJWOU5RVlJEU0Y5RFQwNVVVa0ZUVkFCQlVsOU5RVkpMUlZKZlNVNUdUMTlEVlZSUFJrWmZVRWhCVTBWZlRVRlVRMGhmUWtGU1EwOUVSVjlPVDFSZlJrOVZUa1FBUVZKZlRVRlNTMFZTWDBsT1JrOWZRMVZVVDBaR1gxQklRVk5GWDAxQlZFTklYMEpCVWtOUFJFVmZSVVJEWDBaQlNVd0FRVkpmVFVGU1MwVlNYMGxPUms5ZlExVlVUMFpHWDFCSVFWTkZYMDFCVkVOSVgwTlBUa1pKUkVWT1EwVUFRVkpmVFVGU1MwVlNYMGxPUms5ZlExVlVUMFpHWDFCSVFWTkZYMUJQVTBWZlJWSlNUMUlBUVZKZlRVRlNTMFZTWDBsT1JrOWZRMVZVVDBaR1gxQklRVk5GWDFCUFUwVmZSVkpTVDFKZlRWVk1WRWtBUVZKZlRVRlNTMFZTWDBsT1JrOWZRMVZVVDBaR1gxQklRVk5GWDBoRlZWSkpVMVJKUTE5VVVrOVZRa3hGVTA5TlJWOU5RVlJTU1ZoZlEwOUVSVk1BWVd4c2IyTmhkRzl5UEZRK09qcGhiR3h2WTJGMFpTaHphWHBsWDNRZ2Jpa2dKMjRuSUdWNFkyVmxaSE1nYldGNGFXMTFiU0J6ZFhCd2IzSjBaV1FnYzJsNlpRQkpiV0ZuWlNCd2NtOWpMaUJ0YjJSbElITmxkQ0IwYnlBbFpDNEtBRXhoWW1Wc2FXNW5JRzF2WkdVZ2MyVjBJSFJ2SUNWa0NnQjJhV2xtQUZCaGRIUmxjbTRnY21GMGFXOGdjMmw2WlNCelpYUWdkRzhnSldZdUNnQlFZWFIwWlhKdUlHUmxkR1ZqZEdsdmJpQnRiMlJsSUhObGRDQjBieUFsWkM0S0FGUm9jbVZ6YUc5c1pDQnpaWFFnZEc4Z0pXUUtBSFpwYVdrQVZHaHlaWE5vYjJ4a0lHMXZaR1VnYzJWMElIUnZJQ1ZrQ2dCa2FXa0FkbWxwWkFCcGFRQjJhV2tBYjI0dUFHOW1aaTRBUkdWaWRXY2diVzlrWlNCelpYUWdkRzhnSlhNS0FGUnlZV05yYVc1bklHeHZjM1F1SUNWa0NnQlVjbUZqYTJWa0lIQmhaMlVnSldRZ0tHMWhlQ0FsWkNrdUNnQjdJSFpoY2lBa1lTQTlJR0Z5WjNWdFpXNTBjenNnZG1GeUlHa2dQU0F3T3lCcFppQW9JV0Z5ZEc5dmJHdHBkRnNpVGtaVVRXRnlhMlZ5U1c1bWJ5SmRLU0I3SUdGeWRHOXZiR3RwZEZzaVRrWlVUV0Z5YTJWeVNXNW1ieUpkSUQwZ0tIc2dhV1E2SURBc0lHVnljbTl5T2lBdE1Td2dabTkxYm1RNklEQXNJSEJ2YzJVNklGc3dMREFzTUN3d0xDQXdMREFzTUN3d0xDQXdMREFzTUN3d1hTQjlLVHNnZlNCMllYSWdiV0Z5YTJWeVNXNW1ieUE5SUdGeWRHOXZiR3RwZEZzaVRrWlVUV0Z5YTJWeVNXNW1ieUpkT3lCdFlYSnJaWEpKYm1adld5SnBaQ0pkSUQwZ0pHRmJhU3NyWFRzZ2JXRnlhMlZ5U1c1bWIxc2laWEp5YjNJaVhTQTlJQ1JoVzJrcksxMDdJRzFoY210bGNrbHVabTliSW1admRXNWtJbDBnUFNBeE95QnRZWEpyWlhKSmJtWnZXeUp3YjNObElsMWJNRjBnUFNBa1lWdHBLeXRkT3lCdFlYSnJaWEpKYm1adld5SndiM05sSWwxYk1WMGdQU0FrWVZ0cEt5dGRPeUJ0WVhKclpYSkpibVp2V3lKd2IzTmxJbDFiTWwwZ1BTQWtZVnRwS3l0ZE95QnRZWEpyWlhKSmJtWnZXeUp3YjNObElsMWJNMTBnUFNBa1lWdHBLeXRkT3lCdFlYSnJaWEpKYm1adld5SndiM05sSWwxYk5GMGdQU0FrWVZ0cEt5dGRPeUJ0WVhKclpYSkpibVp2V3lKd2IzTmxJbDFiTlYwZ1BTQWtZVnRwS3l0ZE95QnRZWEpyWlhKSmJtWnZXeUp3YjNObElsMWJObDBnUFNBa1lWdHBLeXRkT3lCdFlYSnJaWEpKYm1adld5SndiM05sSWwxYk4xMGdQU0FrWVZ0cEt5dGRPeUJ0WVhKclpYSkpibVp2V3lKd2IzTmxJbDFiT0YwZ1BTQWtZVnRwS3l0ZE95QnRZWEpyWlhKSmJtWnZXeUp3YjNObElsMWJPVjBnUFNBa1lWdHBLeXRkT3lCdFlYSnJaWEpKYm1adld5SndiM05sSWwxYk1UQmRJRDBnSkdGYmFTc3JYVHNnYldGeWEyVnlTVzVtYjFzaWNHOXpaU0pkV3pFeFhTQTlJQ1JoVzJrcksxMDdJSDBBZXlCMllYSWdKR0VnUFNCaGNtZDFiV1Z1ZEhNN0lIWmhjaUJwSUQwZ01Ec2dhV1lnS0NGaGNuUnZiMnhyYVhSYklrNUdWRTFoY210bGNrbHVabThpWFNrZ2V5QmhjblJ2YjJ4cmFYUmJJazVHVkUxaGNtdGxja2x1Wm04aVhTQTlJQ2g3SUdsa09pQXdMQ0JsY25KdmNqb2dMVEVzSUdadmRXNWtPaUF3TENCd2IzTmxPaUJiTUN3d0xEQXNNQ3dnTUN3d0xEQXNNQ3dnTUN3d0xEQXNNRjBnZlNrN0lIMGdkbUZ5SUcxaGNtdGxja2x1Wm04Z1BTQmhjblJ2YjJ4cmFYUmJJazVHVkUxaGNtdGxja2x1Wm04aVhUc2diV0Z5YTJWeVNXNW1iMXNpYVdRaVhTQTlJQ1JoVzJrcksxMDdJRzFoY210bGNrbHVabTliSW1WeWNtOXlJbDBnUFNBdE1Uc2diV0Z5YTJWeVNXNW1iMXNpWm05MWJtUWlYU0E5SURBN0lHMWhjbXRsY2tsdVptOWJJbkJ2YzJVaVhWc3dYU0E5SURBN0lHMWhjbXRsY2tsdVptOWJJbkJ2YzJVaVhWc3hYU0E5SURBN0lHMWhjbXRsY2tsdVptOWJJbkJ2YzJVaVhWc3lYU0E5SURBN0lHMWhjbXRsY2tsdVptOWJJbkJ2YzJVaVhWc3pYU0E5SURBN0lHMWhjbXRsY2tsdVptOWJJbkJ2YzJVaVhWczBYU0E5SURBN0lHMWhjbXRsY2tsdVptOWJJbkJ2YzJVaVhWczFYU0E5SURBN0lHMWhjbXRsY2tsdVptOWJJbkJ2YzJVaVhWczJYU0E5SURBN0lHMWhjbXRsY2tsdVptOWJJbkJ2YzJVaVhWczNYU0E5SURBN0lHMWhjbXRsY2tsdVptOWJJbkJ2YzJVaVhWczRYU0E5SURBN0lHMWhjbXRsY2tsdVptOWJJbkJ2YzJVaVhWczVYU0E5SURBN0lHMWhjbXRsY2tsdVptOWJJbkJ2YzJVaVhWc3hNRjBnUFNBd095QnRZWEpyWlhKSmJtWnZXeUp3YjNObElsMWJNVEZkSUQwZ01Ec2dmUUI3SUhaaGNpQWtZU0E5SUdGeVozVnRaVzUwY3pzZ2RtRnlJR2tnUFNBeE1qc2dhV1lnS0NGaGNuUnZiMnhyYVhSYkltMWhjbXRsY2tsdVptOGlYU2tnZXlCaGNuUnZiMnhyYVhSYkltMWhjbXRsY2tsdVptOGlYU0E5SUNoN0lIQnZjem9nV3pBc01GMHNJR3hwYm1VNklGdGJNQ3d3TERCZExDQmJNQ3d3TERCZExDQmJNQ3d3TERCZExDQmJNQ3d3TERCZFhTd2dkbVZ5ZEdWNE9pQmJXekFzTUYwc0lGc3dMREJkTENCYk1Dd3dYU3dnV3pBc01GMWRJSDBwT3lCOUlIWmhjaUJ0WVhKclpYSkpibVp2SUQwZ1lYSjBiMjlzYTJsMFd5SnRZWEpyWlhKSmJtWnZJbDA3SUcxaGNtdGxja2x1Wm05YkltRnlaV0VpWFNBOUlDUXdPeUJ0WVhKclpYSkpibVp2V3lKcFpDSmRJRDBnSkRFN0lHMWhjbXRsY2tsdVptOWJJbWxrVUdGMGRDSmRJRDBnSkRJN0lHMWhjbXRsY2tsdVptOWJJbWxrVFdGMGNtbDRJbDBnUFNBa016c2diV0Z5YTJWeVNXNW1iMXNpWkdseUlsMGdQU0FrTkRzZ2JXRnlhMlZ5U1c1bWIxc2laR2x5VUdGMGRDSmRJRDBnSkRVN0lHMWhjbXRsY2tsdVptOWJJbVJwY2sxaGRISnBlQ0pkSUQwZ0pEWTdJRzFoY210bGNrbHVabTliSW1ObUlsMGdQU0FrTnpzZ2JXRnlhMlZ5U1c1bWIxc2lZMlpRWVhSMElsMGdQU0FrT0RzZ2JXRnlhMlZ5U1c1bWIxc2lZMlpOWVhSeWFYZ2lYU0E5SUNRNU95QnRZWEpyWlhKSmJtWnZXeUp3YjNNaVhWc3dYU0E5SUNReE1Ec2diV0Z5YTJWeVNXNW1iMXNpY0c5eklsMWJNVjBnUFNBa01URTdJRzFoY210bGNrbHVabTliSW14cGJtVWlYVnN3WFZzd1hTQTlJQ1JoVzJrcksxMDdJRzFoY210bGNrbHVabTliSW14cGJtVWlYVnN3WFZzeFhTQTlJQ1JoVzJrcksxMDdJRzFoY210bGNrbHVabTliSW14cGJtVWlYVnN3WFZzeVhTQTlJQ1JoVzJrcksxMDdJRzFoY210bGNrbHVabTliSW14cGJtVWlYVnN4WFZzd1hTQTlJQ1JoVzJrcksxMDdJRzFoY210bGNrbHVabTliSW14cGJtVWlYVnN4WFZzeFhTQTlJQ1JoVzJrcksxMDdJRzFoY210bGNrbHVabTliSW14cGJtVWlYVnN4WFZzeVhTQTlJQ1JoVzJrcksxMDdJRzFoY210bGNrbHVabTliSW14cGJtVWlYVnN5WFZzd1hTQTlJQ1JoVzJrcksxMDdJRzFoY210bGNrbHVabTliSW14cGJtVWlYVnN5WFZzeFhTQTlJQ1JoVzJrcksxMDdJRzFoY210bGNrbHVabTliSW14cGJtVWlYVnN5WFZzeVhTQTlJQ1JoVzJrcksxMDdJRzFoY210bGNrbHVabTliSW14cGJtVWlYVnN6WFZzd1hTQTlJQ1JoVzJrcksxMDdJRzFoY210bGNrbHVabTliSW14cGJtVWlYVnN6WFZzeFhTQTlJQ1JoVzJrcksxMDdJRzFoY210bGNrbHVabTliSW14cGJtVWlYVnN6WFZzeVhTQTlJQ1JoVzJrcksxMDdJRzFoY210bGNrbHVabTliSW5abGNuUmxlQ0pkV3pCZFd6QmRJRDBnSkdGYmFTc3JYVHNnYldGeWEyVnlTVzVtYjFzaWRtVnlkR1Y0SWwxYk1GMWJNVjBnUFNBa1lWdHBLeXRkT3lCdFlYSnJaWEpKYm1adld5SjJaWEowWlhnaVhWc3hYVnN3WFNBOUlDUmhXMmtySzEwN0lHMWhjbXRsY2tsdVptOWJJblpsY25SbGVDSmRXekZkV3pGZElEMGdKR0ZiYVNzclhUc2diV0Z5YTJWeVNXNW1iMXNpZG1WeWRHVjRJbDFiTWwxYk1GMGdQU0FrWVZ0cEt5dGRPeUJ0WVhKclpYSkpibVp2V3lKMlpYSjBaWGdpWFZzeVhWc3hYU0E5SUNSaFcya3JLMTA3SUcxaGNtdGxja2x1Wm05YkluWmxjblJsZUNKZFd6TmRXekJkSUQwZ0pHRmJhU3NyWFRzZ2JXRnlhMlZ5U1c1bWIxc2lkbVZ5ZEdWNElsMWJNMTFiTVYwZ1BTQWtZVnRwS3l0ZE95QnRZWEpyWlhKSmJtWnZXeUpsY25KdmNrTnZjbkpsWTNSbFpDSmRJRDBnSkdGYmFTc3JYVHNnZlFCN0lHbG1JQ2doWVhKMGIyOXNhMmwwV3lKdGRXeDBhVVZoWTJoTllYSnJaWEpKYm1adklsMHBJSHNnWVhKMGIyOXNhMmwwV3lKdGRXeDBhVVZoWTJoTllYSnJaWEpKYm1adklsMGdQU0FvZTMwcE95QjlJSFpoY2lCdGRXeDBhVVZoWTJoTllYSnJaWElnUFNCaGNuUnZiMnhyYVhSYkltMTFiSFJwUldGamFFMWhjbXRsY2tsdVptOGlYVHNnYlhWc2RHbEZZV05vVFdGeWEyVnlXeWQyYVhOcFlteGxKMTBnUFNBa01Ec2diWFZzZEdsRllXTm9UV0Z5YTJWeVd5ZHdZWFIwU1dRblhTQTlJQ1F4T3lCdGRXeDBhVVZoWTJoTllYSnJaWEpiSjNCaGRIUlVlWEJsSjEwZ1BTQWtNanNnYlhWc2RHbEZZV05vVFdGeWEyVnlXeWQzYVdSMGFDZGRJRDBnSkRNN0lIMEFhV2xwQUU1VGRETmZYekl4TW1KaGMybGpYM04wY21sdVowbGpUbE5mTVRGamFHRnlYM1J5WVdsMGMwbGpSVVZPVTE4NVlXeHNiMk5oZEc5eVNXTkZSVVZGQUU1VGRETmZYekl5TVY5ZlltRnphV05mYzNSeWFXNW5YMk52YlcxdmJrbE1ZakZGUlVVQWJHOWhaRU5oYldWeVlTZ3BPaUJGY25KdmNpQnNiMkZrYVc1bklIQmhjbUZ0WlhSbGNpQm1hV3hsSUNWeklHWnZjaUJqWVcxbGNtRXVDZ0JwYVdscEFFRlNWRzl2YkV0cGRFcFRLQ2s2SUZWdVlXSnNaU0IwYnlCelpYUWdkWEFnVGtaVUlHMWhjbXRsY2k0S0FGSmxZV1JwYm1jZ0pYTXVabk5sZERNS0FHWnpaWFF6QUVWeWNtOXlJSEpsWVdScGJtY2dTMUJOSUdSaGRHRWdabkp2YlNBbGN5NW1jMlYwTXdvQUlDQkJjM05wWjI1bFpDQndZV2RsSUc1dkxpQWxaQzRLQUVWeWNtOXlPaUJyY0cxRGFHRnVaMlZRWVdkbFRtOVBabEpsWmtSaGRHRlRaWFFLQUVWeWNtOXlPaUJyY0cxTlpYSm5aVkpsWmtSaGRHRlRaWFFLQUNBZ1JHOXVaUzRLQUZKbFlXUnBibWNnSlhNdVpuTmxkQW9BWm5ObGRBQkZjbkp2Y2lCeVpXRmthVzVuSUdSaGRHRWdabkp2YlNBbGN5NW1jMlYwQ2dCRmNuSnZjam9nYTNCdFUyVjBVbVZtUkdGMFlWTmxkQW9BVEc5aFpHbHVaeUJ2WmlCT1JsUWdaR0YwWVNCamIyMXdiR1YwWlM0S0FFRlNWRzl2YkV0cGRFcFRLQ2s2SUZWdVlXSnNaU0IwYnlCelpYUWdkWEFnUVZJZ2JYVnNkR2x0WVhKclpYSXVDZ0JqYjI1bWFXY2daR0YwWVNCc2IyRmtJR1Z5Y205eUlDRWhDZ0JCVWxSdmIyeExhWFJLVXlncE9pQlZibUZpYkdVZ2RHOGdjMlYwSUhWd0lFRlNJRzFoY210bGNpNEtBR3h2WVdSTllYSnJaWElvS1RvZ1JYSnliM0lnYkc5aFpHbHVaeUJ3WVhSMFpYSnVJR1pwYkdVZ0pYTXVDZ0JGY25KdmNqb2dZWEl5UTNKbFlYUmxTR0Z1Wkd4bExnb0FhV2xwYVdrQWMyVjBkWEFvS1RvZ1JYSnliM0k2SUdGeVVHRjBkRU55WldGMFpVaGhibVJzWlM0S0FFRnNiRzlqWVhSbFpDQjJhV1JsYjBaeVlXMWxVMmw2WlNBbFpBb0FleUJwWmlBb0lXRnlkRzl2Ykd0cGRGc2labkpoYldWTllXeHNiMk1pWFNrZ2V5QmhjblJ2YjJ4cmFYUmJJbVp5WVcxbFRXRnNiRzlqSWwwZ1BTQW9lMzBwT3lCOUlIWmhjaUJtY21GdFpVMWhiR3h2WXlBOUlHRnlkRzl2Ykd0cGRGc2labkpoYldWTllXeHNiMk1pWFRzZ1puSmhiV1ZOWVd4c2IyTmJJbVp5WVcxbGNHOXBiblJsY2lKZElEMGdKREU3SUdaeVlXMWxUV0ZzYkc5ald5Sm1jbUZ0WlhOcGVtVWlYU0E5SUNReU95Qm1jbUZ0WlUxaGJHeHZZMXNpWTJGdFpYSmhJbDBnUFNBa016c2dabkpoYldWTllXeHNiMk5iSW5SeVlXNXpabTl5YlNKZElEMGdKRFE3SUdaeVlXMWxUV0ZzYkc5ald5SjJhV1JsYjB4MWJXRlFiMmx1ZEdWeUlsMGdQU0FrTlRzZ2ZRQXFLaW9nUTJGdFpYSmhJRkJoY21GdFpYUmxjaUJ5WlhOcGVtVmtJR1p5YjIwZ0pXUXNJQ1ZrTGlBcUtpb0tBSE5sZEVOaGJXVnlZU2dwT2lCRmNuSnZjam9nWVhKUVlYSmhiVXhVUTNKbFlYUmxMZ29BYzJWMFEyRnRaWEpoS0NrNklFVnljbTl5T2lCaGNrTnlaV0YwWlVoaGJtUnNaUzRLQUhObGRFTmhiV1Z5WVNncE9pQkZjbkp2Y2lCamNtVmhkR2x1WnlBelJDQm9ZVzVrYkdVQVQzVjBJRzltSUcxbGJXOXllU0VoQ2dCRmNuSnZjam9nYldGc2JHOWpDZ0FqSXlNZ1JtVmhkSFZ5WlNCallXNWthV1JoZEdWeklHWnZjaUIwY21GamEybHVaeUJoY21VZ2IzWmxjbVpzYjNjdUNnQkNiMmQxY3lCdFpYTnpZV2RsSUdOdlpHVWdKV1FBUVV4SlIwNWZWRmxRUlNCcGN5QjNjbTl1Wnl3Z2NHeGxZWE5sSUdacGVBQk5RVmhmUVV4TVQwTmZRMGhWVGtzZ2FYTWdkM0p2Ym1jc0lIQnNaV0Z6WlNCbWFYZ0FRbTluZFhNZ1luVm1abVZ5SUdOdmJuUnliMndnYlc5a1pRQkpiblpoYkdsa0lHTnZiWEJ2Ym1WdWRDQkpSQ0FsWkNCcGJpQlRUMU1BU1c1MllXeHBaQ0JqY205d0lISmxjWFZsYzNRQVJFTlVJR052WldabWFXTnBaVzUwSUc5MWRDQnZaaUJ5WVc1blpRQkVRMVFnYzJOaGJHVmtJR0pzYjJOcklITnBlbVVnSldSNEpXUWdibTkwSUhOMWNIQnZjblJsWkFCRGIyMXdiMjVsYm5RZ2FXNWtaWGdnSldRNklHMXBjMjFoZEdOb2FXNW5JSE5oYlhCc2FXNW5JSEpoZEdsdklDVmtPaVZrTENBbFpEb2xaQ3dnSldNQVFtOW5kWE1nU0hWbVptMWhiaUIwWVdKc1pTQmtaV1pwYm1sMGFXOXVBRUp2WjNWeklHbHVjSFYwSUdOdmJHOXljM0JoWTJVQVFtOW5kWE1nU2xCRlJ5QmpiMnh2Y25Od1lXTmxBRUp2WjNWeklHMWhjbXRsY2lCc1pXNW5kR2dBVjNKdmJtY2dTbEJGUnlCc2FXSnlZWEo1SUhabGNuTnBiMjQ2SUd4cFluSmhjbmtnYVhNZ0pXUXNJR05oYkd4bGNpQmxlSEJsWTNSeklDVmtBRk5oYlhCc2FXNW5JR1poWTNSdmNuTWdkRzl2SUd4aGNtZGxJR1p2Y2lCcGJuUmxjbXhsWVhabFpDQnpZMkZ1QUVsdWRtRnNhV1FnYldWdGIzSjVJSEJ2YjJ3Z1kyOWtaU0FsWkFCVmJuTjFjSEJ2Y25SbFpDQktVRVZISUdSaGRHRWdjSEpsWTJsemFXOXVJQ1ZrQUVsdWRtRnNhV1FnY0hKdlozSmxjM05wZG1VZ2NHRnlZVzFsZEdWeWN5QlRjejBsWkNCVFpUMGxaQ0JCYUQwbFpDQkJiRDBsWkFCSmJuWmhiR2xrSUhCeWIyZHlaWE56YVhabElIQmhjbUZ0WlhSbGNuTWdZWFFnYzJOaGJpQnpZM0pwY0hRZ1pXNTBjbmtnSldRQVFtOW5kWE1nYzJGdGNHeHBibWNnWm1GamRHOXljd0JKYm5aaGJHbGtJSE5qWVc0Z2MyTnlhWEIwSUdGMElHVnVkSEo1SUNWa0FFbHRjSEp2Y0dWeUlHTmhiR3dnZEc4Z1NsQkZSeUJzYVdKeVlYSjVJR2x1SUhOMFlYUmxJQ1ZrQUVwUVJVY2djR0Z5WVcxbGRHVnlJSE4wY25WamRDQnRhWE50WVhSamFEb2diR2xpY21GeWVTQjBhR2x1YTNNZ2MybDZaU0JwY3lBbGRTd2dZMkZzYkdWeUlHVjRjR1ZqZEhNZ0pYVUFRbTluZFhNZ2RtbHlkSFZoYkNCaGNuSmhlU0JoWTJObGMzTUFRblZtWm1WeUlIQmhjM05sWkNCMGJ5QktVRVZISUd4cFluSmhjbmtnYVhNZ2RHOXZJSE50WVd4c0FGTjFjM0JsYm5OcGIyNGdibTkwSUdGc2JHOTNaV1FnYUdWeVpRQkRRMGxTTmpBeElITmhiWEJzYVc1bklHNXZkQ0JwYlhCc1pXMWxiblJsWkNCNVpYUUFWRzl2SUcxaGJua2dZMjlzYjNJZ1kyOXRjRzl1Wlc1MGN6b2dKV1FzSUcxaGVDQWxaQUJWYm5OMWNIQnZjblJsWkNCamIyeHZjaUJqYjI1MlpYSnphVzl1SUhKbGNYVmxjM1FBUW05bmRYTWdSRUZESUdsdVpHVjRJQ1ZrQUVKdlozVnpJRVJCUXlCMllXeDFaU0F3ZUNWNEFFSnZaM1Z6SUVSSVZDQnBibVJsZUNBbFpBQkNiMmQxY3lCRVVWUWdhVzVrWlhnZ0pXUUFSVzF3ZEhrZ1NsQkZSeUJwYldGblpTQW9SRTVNSUc1dmRDQnpkWEJ3YjNKMFpXUXBBRkpsWVdRZ1puSnZiU0JGVFZNZ1ptRnBiR1ZrQUZkeWFYUmxJSFJ2SUVWTlV5Qm1ZV2xzWldRQVJHbGtiaWQwSUdWNGNHVmpkQ0J0YjNKbElIUm9ZVzRnYjI1bElITmpZVzRBU1c1d2RYUWdabWxzWlNCeVpXRmtJR1Z5Y205eUFFOTFkSEIxZENCbWFXeGxJSGR5YVhSbElHVnljbTl5SUMwdExTQnZkWFFnYjJZZ1pHbHpheUJ6Y0dGalpUOEFSbkpoWTNScGIyNWhiQ0J6WVcxd2JHbHVaeUJ1YjNRZ2FXMXdiR1Z0Wlc1MFpXUWdlV1YwQUVoMVptWnRZVzRnWTI5a1pTQnphWHBsSUhSaFlteGxJRzkyWlhKbWJHOTNBRTFwYzNOcGJtY2dTSFZtWm0xaGJpQmpiMlJsSUhSaFlteGxJR1Z1ZEhKNUFFMWhlR2x0ZFcwZ2MzVndjRzl5ZEdWa0lHbHRZV2RsSUdScGJXVnVjMmx2YmlCcGN5QWxkU0J3YVhobGJITUFSVzF3ZEhrZ2FXNXdkWFFnWm1sc1pRQlFjbVZ0WVhSMWNtVWdaVzVrSUc5bUlHbHVjSFYwSUdacGJHVUFRMkZ1Ym05MElIUnlZVzV6WTI5a1pTQmtkV1VnZEc4Z2JYVnNkR2x3YkdVZ2RYTmxJRzltSUhGMVlXNTBhWHBoZEdsdmJpQjBZV0pzWlNBbFpBQlRZMkZ1SUhOamNtbHdkQ0JrYjJWeklHNXZkQ0IwY21GdWMyMXBkQ0JoYkd3Z1pHRjBZUUJKYm5aaGJHbGtJR052Ykc5eUlIRjFZVzUwYVhwaGRHbHZiaUJ0YjJSbElHTm9ZVzVuWlFCT2IzUWdhVzF3YkdWdFpXNTBaV1FnZVdWMEFGSmxjWFZsYzNSbFpDQm1aV0YwZFhKbElIZGhjeUJ2YldsMGRHVmtJR0YwSUdOdmJYQnBiR1VnZEdsdFpRQkJjbWwwYUcxbGRHbGpJSFJoWW14bElEQjRKVEF5ZUNCM1lYTWdibTkwSUdSbFptbHVaV1FBUW1GamEybHVaeUJ6ZEc5eVpTQnViM1FnYzNWd2NHOXlkR1ZrQUVoMVptWnRZVzRnZEdGaWJHVWdNSGdsTURKNElIZGhjeUJ1YjNRZ1pHVm1hVzVsWkFCS1VFVkhJR1JoZEdGemRISmxZVzBnWTI5dWRHRnBibk1nYm04Z2FXMWhaMlVBVVhWaGJuUnBlbUYwYVc5dUlIUmhZbXhsSURCNEpUQXllQ0IzWVhNZ2JtOTBJR1JsWm1sdVpXUUFUbTkwSUdFZ1NsQkZSeUJtYVd4bE9pQnpkR0Z5ZEhNZ2QybDBhQ0F3ZUNVd01uZ2dNSGdsTURKNEFFbHVjM1ZtWm1samFXVnVkQ0J0WlcxdmNua2dLR05oYzJVZ0pXUXBBRU5oYm01dmRDQnhkV0Z1ZEdsNlpTQnRiM0psSUhSb1lXNGdKV1FnWTI5c2IzSWdZMjl0Y0c5dVpXNTBjd0JEWVc1dWIzUWdjWFZoYm5ScGVtVWdkRzhnWm1WM1pYSWdkR2hoYmlBbFpDQmpiMnh2Y25NQVEyRnVibTkwSUhGMVlXNTBhWHBsSUhSdklHMXZjbVVnZEdoaGJpQWxaQ0JqYjJ4dmNuTUFTVzUyWVd4cFpDQktVRVZISUdacGJHVWdjM1J5ZFdOMGRYSmxPaUFsY3lCaVpXWnZjbVVnVTA5R0FFbHVkbUZzYVdRZ1NsQkZSeUJtYVd4bElITjBjblZqZEhWeVpUb2dkSGR2SUZOUFJpQnRZWEpyWlhKekFFbHVkbUZzYVdRZ1NsQkZSeUJtYVd4bElITjBjblZqZEhWeVpUb2diV2x6YzJsdVp5QlRUMU1nYldGeWEyVnlBRlZ1YzNWd2NHOXlkR1ZrSUVwUVJVY2djSEp2WTJWemN6b2dVMDlHSUhSNWNHVWdNSGdsTURKNEFFbHVkbUZzYVdRZ1NsQkZSeUJtYVd4bElITjBjblZqZEhWeVpUb2dkSGR2SUZOUFNTQnRZWEpyWlhKekFFWmhhV3hsWkNCMGJ5QmpjbVZoZEdVZ2RHVnRjRzl5WVhKNUlHWnBiR1VnSlhNQVVtVmhaQ0JtWVdsc1pXUWdiMjRnZEdWdGNHOXlZWEo1SUdacGJHVUFVMlZsYXlCbVlXbHNaV1FnYjI0Z2RHVnRjRzl5WVhKNUlHWnBiR1VBVjNKcGRHVWdabUZwYkdWa0lHOXVJSFJsYlhCdmNtRnllU0JtYVd4bElDMHRMU0J2ZFhRZ2IyWWdaR2x6YXlCemNHRmpaVDhBUVhCd2JHbGpZWFJwYjI0Z2RISmhibk5tWlhKeVpXUWdkRzl2SUdabGR5QnpZMkZ1YkdsdVpYTUFWVzV6ZFhCd2IzSjBaV1FnYldGeWEyVnlJSFI1Y0dVZ01IZ2xNREo0QUZacGNuUjFZV3dnWVhKeVlYa2dZMjl1ZEhKdmJHeGxjaUJ0WlhOelpXUWdkWEFBU1cxaFoyVWdkRzl2SUhkcFpHVWdabTl5SUhSb2FYTWdhVzF3YkdWdFpXNTBZWFJwYjI0QVVtVmhaQ0JtY205dElGaE5VeUJtWVdsc1pXUUFWM0pwZEdVZ2RHOGdXRTFUSUdaaGFXeGxaQUJEYjNCNWNtbG5hSFFnS0VNcElESXdNVGdzSUZSb2IyMWhjeUJITGlCTVlXNWxMQ0JIZFdsa2J5QldiMnhzWW1Wa2FXNW5BRGxqSUNBeE5DMUtZVzR0TWpBeE9BQkRZWFYwYVc5dU9pQnhkV0Z1ZEdsNllYUnBiMjRnZEdGaWJHVnpJR0Z5WlNCMGIyOGdZMjloY25ObElHWnZjaUJpWVhObGJHbHVaU0JLVUVWSEFFRmtiMkpsSUVGUVVERTBJRzFoY210bGNqb2dkbVZ5YzJsdmJpQWxaQ3dnWm14aFozTWdNSGdsTURSNElEQjRKVEEwZUN3Z2RISmhibk5tYjNKdElDVmtBRlZ1YTI1dmQyNGdRVkJRTUNCdFlYSnJaWElnS0c1dmRDQktSa2xHS1N3Z2JHVnVaM1JvSUNWMUFGVnVhMjV2ZDI0Z1FWQlFNVFFnYldGeWEyVnlJQ2h1YjNRZ1FXUnZZbVVwTENCc1pXNW5kR2dnSlhVQVJHVm1hVzVsSUVGeWFYUm9iV1YwYVdNZ1ZHRmliR1VnTUhnbE1ESjRPaUF3ZUNVd01uZ0FSR1ZtYVc1bElFaDFabVp0WVc0Z1ZHRmliR1VnTUhnbE1ESjRBRVJsWm1sdVpTQlJkV0Z1ZEdsNllYUnBiMjRnVkdGaWJHVWdKV1FnSUhCeVpXTnBjMmx2YmlBbFpBQkVaV1pwYm1VZ1VtVnpkR0Z5ZENCSmJuUmxjblpoYkNBbGRRQkdjbVZsWkNCRlRWTWdhR0Z1Wkd4bElDVjFBRTlpZEdGcGJtVmtJRVZOVXlCb1lXNWtiR1VnSlhVQVJXNWtJRTltSUVsdFlXZGxBQ0FnSUNBZ0lDQWdKVE5rSUNVelpDQWxNMlFnSlROa0lDVXpaQ0FsTTJRZ0pUTmtJQ1V6WkFCS1JrbEdJRUZRVURBZ2JXRnlhMlZ5T2lCMlpYSnphVzl1SUNWa0xpVXdNbVFzSUdSbGJuTnBkSGtnSldSNEpXUWdJQ1ZrQUZkaGNtNXBibWM2SUhSb2RXMWlibUZwYkNCcGJXRm5aU0J6YVhwbElHUnZaWE1nYm05MElHMWhkR05vSUdSaGRHRWdiR1Z1WjNSb0lDVjFBRXBHU1VZZ1pYaDBaVzV6YVc5dUlHMWhjbXRsY2pvZ2RIbHdaU0F3ZUNVd01uZ3NJR3hsYm1kMGFDQWxkUUFnSUNBZ2QybDBhQ0FsWkNCNElDVmtJSFJvZFcxaWJtRnBiQ0JwYldGblpRQk5hWE5qWld4c1lXNWxiM1Z6SUcxaGNtdGxjaUF3ZUNVd01uZ3NJR3hsYm1kMGFDQWxkUUJWYm1WNGNHVmpkR1ZrSUcxaGNtdGxjaUF3ZUNVd01uZ0FJQ0FnSUNBZ0lDQWxOSFVnSlRSMUlDVTBkU0FsTkhVZ0pUUjFJQ1UwZFNBbE5IVWdKVFIxQUZGMVlXNTBhWHBwYm1jZ2RHOGdKV1FnUFNBbFpDb2xaQ29sWkNCamIyeHZjbk1BVVhWaGJuUnBlbWx1WnlCMGJ5QWxaQ0JqYjJ4dmNuTUFVMlZzWldOMFpXUWdKV1FnWTI5c2IzSnpJR1p2Y2lCeGRXRnVkR2w2WVhScGIyNEFRWFFnYldGeWEyVnlJREI0SlRBeWVDd2djbVZqYjNabGNua2dZV04wYVc5dUlDVmtBRkpUVkNWa0FGTnRiMjkwYUdsdVp5QnViM1FnYzNWd2NHOXlkR1ZrSUhkcGRHZ2dibTl1YzNSaGJtUmhjbVFnYzJGdGNHeHBibWNnY21GMGFXOXpBRk4wWVhKMElFOW1JRVp5WVcxbElEQjRKVEF5ZURvZ2QybGtkR2c5SlhVc0lHaGxhV2RvZEQwbGRTd2dZMjl0Y0c5dVpXNTBjejBsWkFBZ0lDQWdRMjl0Y0c5dVpXNTBJQ1ZrT2lBbFpHaDRKV1IySUhFOUpXUUFVM1JoY25RZ2IyWWdTVzFoWjJVQVUzUmhjblFnVDJZZ1UyTmhiam9nSldRZ1kyOXRjRzl1Wlc1MGN3QWdJQ0FnUTI5dGNHOXVaVzUwSUNWa09pQmtZejBsWkNCaFl6MGxaQUFnSUZOelBTVmtMQ0JUWlQwbFpDd2dRV2c5SldRc0lFRnNQU1ZrQUVOc2IzTmxaQ0IwWlcxd2IzSmhjbmtnWm1sc1pTQWxjd0JQY0dWdVpXUWdkR1Z0Y0c5eVlYSjVJR1pwYkdVZ0pYTUFTa1pKUmlCbGVIUmxibk5wYjI0Z2JXRnlhMlZ5T2lCS1VFVkhMV052YlhCeVpYTnpaV1FnZEdoMWJXSnVZV2xzSUdsdFlXZGxMQ0JzWlc1bmRHZ2dKWFVBU2taSlJpQmxlSFJsYm5OcGIyNGdiV0Z5YTJWeU9pQndZV3hsZEhSbElIUm9kVzFpYm1GcGJDQnBiV0ZuWlN3Z2JHVnVaM1JvSUNWMUFFcEdTVVlnWlhoMFpXNXphVzl1SUcxaGNtdGxjam9nVWtkQ0lIUm9kVzFpYm1GcGJDQnBiV0ZuWlN3Z2JHVnVaM1JvSUNWMUFGVnVjbVZqYjJkdWFYcGxaQ0JqYjIxd2IyNWxiblFnU1VSeklDVmtJQ1ZrSUNWa0xDQmhjM04xYldsdVp5QlpRMkpEY2dCR2NtVmxaQ0JZVFZNZ2FHRnVaR3hsSUNWMUFFOWlkR0ZwYm1Wa0lGaE5VeUJvWVc1a2JHVWdKWFVBVlc1cmJtOTNiaUJCWkc5aVpTQmpiMnh2Y2lCMGNtRnVjMlp2Y20wZ1kyOWtaU0FsWkFCRGIzSnlkWEIwSUVwUVJVY2daR0YwWVRvZ1ltRmtJR0Z5YVhSb2JXVjBhV01nWTI5a1pRQkpibU52Ym5OcGMzUmxiblFnY0hKdlozSmxjM05wYjI0Z2MyVnhkV1Z1WTJVZ1ptOXlJR052YlhCdmJtVnVkQ0FsWkNCamIyVm1abWxqYVdWdWRDQWxaQUJEYjNKeWRYQjBJRXBRUlVjZ1pHRjBZVG9nSlhVZ1pYaDBjbUZ1Wlc5MWN5QmllWFJsY3lCaVpXWnZjbVVnYldGeWEyVnlJREI0SlRBeWVBQkRiM0p5ZFhCMElFcFFSVWNnWkdGMFlUb2djSEpsYldGMGRYSmxJR1Z1WkNCdlppQmtZWFJoSUhObFoyMWxiblFBUTI5eWNuVndkQ0JLVUVWSElHUmhkR0U2SUdKaFpDQklkV1ptYldGdUlHTnZaR1VBVjJGeWJtbHVaem9nZFc1cmJtOTNiaUJLUmtsR0lISmxkbWx6YVc5dUlHNTFiV0psY2lBbFpDNGxNREprQUZCeVpXMWhkSFZ5WlNCbGJtUWdiMllnU2xCRlJ5Qm1hV3hsQUVOdmNuSjFjSFFnU2xCRlJ5QmtZWFJoT2lCbWIzVnVaQ0J0WVhKclpYSWdNSGdsTURKNElHbHVjM1JsWVdRZ2IyWWdVbE5VSldRQVNXNTJZV3hwWkNCVFQxTWdjR0Z5WVcxbGRHVnljeUJtYjNJZ2MyVnhkV1Z1ZEdsaGJDQktVRVZIQUVGd2NHeHBZMkYwYVc5dUlIUnlZVzV6Wm1WeWNtVmtJSFJ2YnlCdFlXNTVJSE5qWVc1c2FXNWxjd0JLVUVWSFRVVk5BQ1ZzWkNWakFGTlBVd0JNVTBVQUpYTUtBSEozWVFCcGJtWnBibWwwZVFBQUFRSUVCd01HQlFBdEt5QWdJREJZTUhnQUtHNTFiR3dwQUMwd1dDc3dXQ0F3V0Mwd2VDc3dlQ0F3ZUFCcGJtWUFTVTVHQUc1aGJnQk9RVTRBTGdCTVExOUJURXdBVEVGT1J3QkRMbFZVUmkwNEFGQlBVMGxZQUUxVlUweGZURTlEVUVGVVNBQjBaWEp0YVc1aGRHbHVaeUIzYVhSb0lDVnpJR1Y0WTJWd2RHbHZiaUJ2WmlCMGVYQmxJQ1Z6T2lBbGN3QjBaWEp0YVc1aGRHbHVaeUIzYVhSb0lDVnpJR1Y0WTJWd2RHbHZiaUJ2WmlCMGVYQmxJQ1Z6QUhSbGNtMXBibUYwYVc1bklIZHBkR2dnSlhNZ1ptOXlaV2xuYmlCbGVHTmxjSFJwYjI0QWRHVnliV2x1WVhScGJtY0FkVzVqWVhWbmFIUUFVM1E1WlhoalpYQjBhVzl1QUU0eE1GOWZZM2g0WVdKcGRqRXhObDlmYzJocGJWOTBlWEJsWDJsdVptOUZBRk4wT1hSNWNHVmZhVzVtYndCT01UQmZYMk40ZUdGaWFYWXhNakJmWDNOcFgyTnNZWE56WDNSNWNHVmZhVzVtYjBVQVRqRXdYMTlqZUhoaFltbDJNVEUzWDE5amJHRnpjMTkwZVhCbFgybHVabTlGQUhSbGNtMXBibUYwWlY5b1lXNWtiR1Z5SUhWdVpYaHdaV04wWldSc2VTQnlaWFIxY201bFpBQlRkREV4Ykc5bmFXTmZaWEp5YjNJQVUzUXhNbXhsYm1kMGFGOWxjbkp2Y2dCT01UQmZYMk40ZUdGaWFYWXhNVGRmWDNCaVlYTmxYM1I1Y0dWZmFXNW1iMFVBVGpFd1gxOWplSGhoWW1sMk1URTVYMTl3YjJsdWRHVnlYM1I1Y0dWZmFXNW1iMFVBVGpFd1gxOWplSGhoWW1sMk1USXpYMTltZFc1a1lXMWxiblJoYkY5MGVYQmxYMmx1Wm05RkFIWUFZZ0JqQUdnQVlRQnpBSFFBYVFCcUFHMEFaZ0JrQUU0eE1GOWZZM2g0WVdKcGRqRXlNVjlmZG0xcFgyTnNZWE56WDNSNWNHVmZhVzVtYjBVQWRtOXBaQUJpYjI5c0FHTm9ZWElBYzJsbmJtVmtJR05vWVhJQWRXNXphV2R1WldRZ1kyaGhjZ0J6YUc5eWRBQjFibk5wWjI1bFpDQnphRzl5ZEFCcGJuUUFkVzV6YVdkdVpXUWdhVzUwQUd4dmJtY0FkVzV6YVdkdVpXUWdiRzl1WndCbWJHOWhkQUJrYjNWaWJHVUFjM1JrT2pwemRISnBibWNBYzNSa09qcGlZWE5wWTE5emRISnBibWM4ZFc1emFXZHVaV1FnWTJoaGNqNEFjM1JrT2pwM2MzUnlhVzVuQUhOMFpEbzZkVEUyYzNSeWFXNW5BSE4wWkRvNmRUTXljM1J5YVc1bkFHVnRjMk55YVhCMFpXNDZPblpoYkFCbGJYTmpjbWx3ZEdWdU9qcHRaVzF2Y25sZmRtbGxkenhqYUdGeVBnQmxiWE5qY21sd2RHVnVPanB0WlcxdmNubGZkbWxsZHp4emFXZHVaV1FnWTJoaGNqNEFaVzF6WTNKcGNIUmxiam82YldWdGIzSjVYM1pwWlhjOGRXNXphV2R1WldRZ1kyaGhjajRBWlcxelkzSnBjSFJsYmpvNmJXVnRiM0o1WDNacFpYYzhjMmh2Y25RK0FHVnRjMk55YVhCMFpXNDZPbTFsYlc5eWVWOTJhV1YzUEhWdWMybG5ibVZrSUhOb2IzSjBQZ0JsYlhOamNtbHdkR1Z1T2pwdFpXMXZjbmxmZG1sbGR6eHBiblErQUdWdGMyTnlhWEIwWlc0Nk9tMWxiVzl5ZVY5MmFXVjNQSFZ1YzJsbmJtVmtJR2x1ZEQ0QVpXMXpZM0pwY0hSbGJqbzZiV1Z0YjNKNVgzWnBaWGM4Ykc5dVp6NEFaVzF6WTNKcGNIUmxiam82YldWdGIzSjVYM1pwWlhjOGRXNXphV2R1WldRZ2JHOXVaejRBWlcxelkzSnBjSFJsYmpvNmJXVnRiM0o1WDNacFpYYzhhVzUwT0Y5MFBnQmxiWE5qY21sd2RHVnVPanB0WlcxdmNubGZkbWxsZHp4MWFXNTBPRjkwUGdCbGJYTmpjbWx3ZEdWdU9qcHRaVzF2Y25sZmRtbGxkenhwYm5ReE5sOTBQZ0JsYlhOamNtbHdkR1Z1T2pwdFpXMXZjbmxmZG1sbGR6eDFhVzUwTVRaZmRENEFaVzF6WTNKcGNIUmxiam82YldWdGIzSjVYM1pwWlhjOGFXNTBNekpmZEQ0QVpXMXpZM0pwY0hSbGJqbzZiV1Z0YjNKNVgzWnBaWGM4ZFdsdWRETXlYM1ErQUdWdGMyTnlhWEIwWlc0Nk9tMWxiVzl5ZVY5MmFXVjNQR1pzYjJGMFBnQmxiWE5qY21sd2RHVnVPanB0WlcxdmNubGZkbWxsZHp4a2IzVmliR1UrQUdWdGMyTnlhWEIwWlc0Nk9tMWxiVzl5ZVY5MmFXVjNQR3h2Ym1jZ1pHOTFZbXhsUGdCT01UQmxiWE5qY21sd2RHVnVNVEZ0WlcxdmNubGZkbWxsZDBsbFJVVUFUakV3WlcxelkzSnBjSFJsYmpFeGJXVnRiM0o1WDNacFpYZEpaRVZGQUU0eE1HVnRjMk55YVhCMFpXNHhNVzFsYlc5eWVWOTJhV1YzU1daRlJRQk9NVEJsYlhOamNtbHdkR1Z1TVRGdFpXMXZjbmxmZG1sbGQwbHRSVVVBVGpFd1pXMXpZM0pwY0hSbGJqRXhiV1Z0YjNKNVgzWnBaWGRKYkVWRkFFNHhNR1Z0YzJOeWFYQjBaVzR4TVcxbGJXOXllVjkyYVdWM1NXcEZSUUJPTVRCbGJYTmpjbWx3ZEdWdU1URnRaVzF2Y25sZmRtbGxkMGxwUlVVQVRqRXdaVzF6WTNKcGNIUmxiakV4YldWdGIzSjVYM1pwWlhkSmRFVkZBRTR4TUdWdGMyTnlhWEIwWlc0eE1XMWxiVzl5ZVY5MmFXVjNTWE5GUlFCT01UQmxiWE5qY21sd2RHVnVNVEZ0WlcxdmNubGZkbWxsZDBsb1JVVUFUakV3WlcxelkzSnBjSFJsYmpFeGJXVnRiM0o1WDNacFpYZEpZVVZGQUU0eE1HVnRjMk55YVhCMFpXNHhNVzFsYlc5eWVWOTJhV1YzU1dORlJRQk9NVEJsYlhOamNtbHdkR1Z1TTNaaGJFVUFUbE4wTTE5Zk1qRXlZbUZ6YVdOZmMzUnlhVzVuU1VScFRsTmZNVEZqYUdGeVgzUnlZV2wwYzBsRWFVVkZUbE5mT1dGc2JHOWpZWFJ2Y2tsRWFVVkZSVVVBVGxOME0xOWZNakV5WW1GemFXTmZjM1J5YVc1blNVUnpUbE5mTVRGamFHRnlYM1J5WVdsMGMwbEVjMFZGVGxOZk9XRnNiRzlqWVhSdmNrbEVjMFZGUlVVQVRsTjBNMTlmTWpFeVltRnphV05mYzNSeWFXNW5TWGRPVTE4eE1XTm9ZWEpmZEhKaGFYUnpTWGRGUlU1VFh6bGhiR3h2WTJGMGIzSkpkMFZGUlVVQVRsTjBNMTlmTWpFeVltRnphV05mYzNSeWFXNW5TV2hPVTE4eE1XTm9ZWEpmZEhKaGFYUnpTV2hGUlU1VFh6bGhiR3h2WTJGMGIzSkphRVZGUlVVQVRsTjBNMTlmTWpocGIzTmZZbUZ6WlVVQVRsTjBNMTlmTWpsaVlYTnBZMTlwYjNOSlkwNVRYekV4WTJoaGNsOTBjbUZwZEhOSlkwVkZSVVVBVGxOME0xOWZNamxpWVhOcFkxOXBiM05KZDA1VFh6RXhZMmhoY2w5MGNtRnBkSE5KZDBWRlJVVUFUbE4wTTE5Zk1qRTFZbUZ6YVdOZmMzUnlaV0Z0WW5WbVNXTk9VMTh4TVdOb1lYSmZkSEpoYVhSelNXTkZSVVZGQUU1VGRETmZYekl4TldKaGMybGpYM04wY21WaGJXSjFaa2wzVGxOZk1URmphR0Z5WDNSeVlXbDBjMGwzUlVWRlJRQk9VM1F6WDE4eU1UTmlZWE5wWTE5cGMzUnlaV0Z0U1dOT1UxOHhNV05vWVhKZmRISmhhWFJ6U1dORlJVVkZBRTVUZEROZlh6SXhNMkpoYzJsalgybHpkSEpsWVcxSmQwNVRYekV4WTJoaGNsOTBjbUZwZEhOSmQwVkZSVVVBVGxOME0xOWZNakV6WW1GemFXTmZiM04wY21WaGJVbGpUbE5mTVRGamFHRnlYM1J5WVdsMGMwbGpSVVZGUlFCT1UzUXpYMTh5TVROaVlYTnBZMTl2YzNSeVpXRnRTWGRPVTE4eE1XTm9ZWEpmZEhKaGFYUnpTWGRGUlVWRkFFNVRkRE5mWHpJeE1WOWZjM1JrYjNWMFluVm1TWGRGUlFCT1UzUXpYMTh5TVRGZlgzTjBaRzkxZEdKMVprbGpSVVVBZFc1emRYQndiM0owWldRZ2JHOWpZV3hsSUdadmNpQnpkR0Z1WkdGeVpDQnBibkIxZEFCT1UzUXpYMTh5TVRCZlgzTjBaR2x1WW5WbVNYZEZSUUJPVTNRelgxOHlNVEJmWDNOMFpHbHVZblZtU1dORlJRQk9VM1F6WDE4eU4yTnZiR3hoZEdWSlkwVkZBRTVUZEROZlh6STJiRzlqWVd4bE5XWmhZMlYwUlFCT1UzUXpYMTh5TjJOdmJHeGhkR1ZKZDBWRkFDVndBRU1BVGxOME0xOWZNamR1ZFcxZloyVjBTV05PVTE4eE9XbHpkSEpsWVcxaWRXWmZhWFJsY21GMGIzSkpZMDVUWHpFeFkyaGhjbDkwY21GcGRITkpZMFZGUlVWRlJRQk9VM1F6WDE4eU9WOWZiblZ0WDJkbGRFbGpSVVVBVGxOME0xOWZNakUwWDE5dWRXMWZaMlYwWDJKaGMyVkZBRTVUZEROZlh6STNiblZ0WDJkbGRFbDNUbE5mTVRscGMzUnlaV0Z0WW5WbVgybDBaWEpoZEc5eVNYZE9VMTh4TVdOb1lYSmZkSEpoYVhSelNYZEZSVVZGUlVVQVRsTjBNMTlmTWpsZlgyNTFiVjluWlhSSmQwVkZBQ1Z3QUFBQUFFd0FiR3dBSlFBQUFBQUFiQUJPVTNRelgxOHlOMjUxYlY5d2RYUkpZMDVUWHpFNWIzTjBjbVZoYldKMVpsOXBkR1Z5WVhSdmNrbGpUbE5mTVRGamFHRnlYM1J5WVdsMGMwbGpSVVZGUlVWRkFFNVRkRE5mWHpJNVgxOXVkVzFmY0hWMFNXTkZSUUJPVTNRelgxOHlNVFJmWDI1MWJWOXdkWFJmWW1GelpVVUFUbE4wTTE5Zk1qZHVkVzFmY0hWMFNYZE9VMTh4T1c5emRISmxZVzFpZFdaZmFYUmxjbUYwYjNKSmQwNVRYekV4WTJoaGNsOTBjbUZwZEhOSmQwVkZSVVZGUlFCT1UzUXpYMTh5T1Y5ZmJuVnRYM0IxZEVsM1JVVUFKVWc2SlUwNkpWTUFKVzB2SldRdkpYa0FKVWs2SlUwNkpWTWdKWEFBSldFZ0pXSWdKV1FnSlVnNkpVMDZKVk1nSlZrQVFVMEFVRTBBU21GdWRXRnllUUJHWldKeWRXRnllUUJOWVhKamFBQkJjSEpwYkFCTllYa0FTblZ1WlFCS2RXeDVBRUYxWjNWemRBQlRaWEIwWlcxaVpYSUFUMk4wYjJKbGNnQk9iM1psYldKbGNnQkVaV05sYldKbGNnQktZVzRBUm1WaUFFMWhjZ0JCY0hJQVNuVnVBRXAxYkFCQmRXY0FVMlZ3QUU5amRBQk9iM1lBUkdWakFGTjFibVJoZVFCTmIyNWtZWGtBVkhWbGMyUmhlUUJYWldSdVpYTmtZWGtBVkdoMWNuTmtZWGtBUm5KcFpHRjVBRk5oZEhWeVpHRjVBRk4xYmdCTmIyNEFWSFZsQUZkbFpBQlVhSFVBUm5KcEFGTmhkQUFsYlM4bFpDOGxlU1ZaTFNWdExTVmtKVWs2SlUwNkpWTWdKWEFsU0RvbFRTVklPaVZOT2lWVEpVZzZKVTA2SlZOT1UzUXpYMTh5T0hScGJXVmZaMlYwU1dOT1UxOHhPV2x6ZEhKbFlXMWlkV1pmYVhSbGNtRjBiM0pKWTA1VFh6RXhZMmhoY2w5MGNtRnBkSE5KWTBWRlJVVkZSUUJPVTNRelgxOHlNakJmWDNScGJXVmZaMlYwWDJOZmMzUnZjbUZuWlVsalJVVUFUbE4wTTE5Zk1qbDBhVzFsWDJKaGMyVkZBRTVUZEROZlh6STRkR2x0WlY5blpYUkpkMDVUWHpFNWFYTjBjbVZoYldKMVpsOXBkR1Z5WVhSdmNrbDNUbE5mTVRGamFHRnlYM1J5WVdsMGMwbDNSVVZGUlVWRkFFNVRkRE5mWHpJeU1GOWZkR2x0WlY5blpYUmZZMTl6ZEc5eVlXZGxTWGRGUlFCT1UzUXpYMTh5T0hScGJXVmZjSFYwU1dOT1UxOHhPVzl6ZEhKbFlXMWlkV1pmYVhSbGNtRjBiM0pKWTA1VFh6RXhZMmhoY2w5MGNtRnBkSE5KWTBWRlJVVkZSUUJPVTNRelgxOHlNVEJmWDNScGJXVmZjSFYwUlFCT1UzUXpYMTh5T0hScGJXVmZjSFYwU1hkT1UxOHhPVzl6ZEhKbFlXMWlkV1pmYVhSbGNtRjBiM0pKZDA1VFh6RXhZMmhoY2w5MGNtRnBkSE5KZDBWRlJVVkZSUUJPVTNRelgxOHlNVEJ0YjI1bGVYQjFibU4wU1dOTVlqQkZSVVVBVGxOME0xOWZNakV3Ylc5dVpYbGZZbUZ6WlVVQVRsTjBNMTlmTWpFd2JXOXVaWGx3ZFc1amRFbGpUR0l4UlVWRkFFNVRkRE5mWHpJeE1HMXZibVY1Y0hWdVkzUkpkMHhpTUVWRlJRQk9VM1F6WDE4eU1UQnRiMjVsZVhCMWJtTjBTWGRNWWpGRlJVVUFNREV5TXpRMU5qYzRPUUFsVEdZQVRsTjBNMTlmTWpsdGIyNWxlVjluWlhSSlkwNVRYekU1YVhOMGNtVmhiV0oxWmw5cGRHVnlZWFJ2Y2tsalRsTmZNVEZqYUdGeVgzUnlZV2wwYzBsalJVVkZSVVZGQUU1VGRETmZYekl4TVY5ZmJXOXVaWGxmWjJWMFNXTkZSUUF3TVRJek5EVTJOemc1QUU1VGRETmZYekk1Ylc5dVpYbGZaMlYwU1hkT1UxOHhPV2x6ZEhKbFlXMWlkV1pmYVhSbGNtRjBiM0pKZDA1VFh6RXhZMmhoY2w5MGNtRnBkSE5KZDBWRlJVVkZSUUJPVTNRelgxOHlNVEZmWDIxdmJtVjVYMmRsZEVsM1JVVUFKUzR3VEdZQVRsTjBNMTlmTWpsdGIyNWxlVjl3ZFhSSlkwNVRYekU1YjNOMGNtVmhiV0oxWmw5cGRHVnlZWFJ2Y2tsalRsTmZNVEZqYUdGeVgzUnlZV2wwYzBsalJVVkZSVVZGQUU1VGRETmZYekl4TVY5ZmJXOXVaWGxmY0hWMFNXTkZSUUJPVTNRelgxOHlPVzF2Ym1WNVgzQjFkRWwzVGxOZk1UbHZjM1J5WldGdFluVm1YMmwwWlhKaGRHOXlTWGRPVTE4eE1XTm9ZWEpmZEhKaGFYUnpTWGRGUlVWRlJVVUFUbE4wTTE5Zk1qRXhYMTl0YjI1bGVWOXdkWFJKZDBWRkFFNVRkRE5mWHpJNGJXVnpjMkZuWlhOSlkwVkZBRTVUZEROZlh6SXhNMjFsYzNOaFoyVnpYMkpoYzJWRkFFNVRkRE5mWHpJeE4xOWZkMmxrWlc1ZlpuSnZiVjkxZEdZNFNVeHRNekpGUlVVQVRsTjBNMTlmTWpkamIyUmxZM1owU1VScFl6RXhYMTl0WW5OMFlYUmxYM1JGUlFCT1UzUXpYMTh5TVRKamIyUmxZM1owWDJKaGMyVkZBRTVUZEROZlh6SXhObDlmYm1GeWNtOTNYM1J2WDNWMFpqaEpURzB6TWtWRlJRQk9VM1F6WDE4eU9HMWxjM05oWjJWelNYZEZSUUJPVTNRelgxOHlOMk52WkdWamRuUkpZMk14TVY5ZmJXSnpkR0YwWlY5MFJVVUFUbE4wTTE5Zk1qZGpiMlJsWTNaMFNYZGpNVEZmWDIxaWMzUmhkR1ZmZEVWRkFFNVRkRE5mWHpJM1kyOWtaV04yZEVsRWMyTXhNVjlmYldKemRHRjBaVjkwUlVVQVRsTjBNMTlmTWpac2IyTmhiR1UxWDE5cGJYQkZBRTVUZEROZlh6STFZM1I1Y0dWSlkwVkZBRTVUZEROZlh6SXhNR04wZVhCbFgySmhjMlZGQUU1VGRETmZYekkxWTNSNWNHVkpkMFZGQUdaaGJITmxBSFJ5ZFdVQVRsTjBNMTlmTWpodWRXMXdkVzVqZEVsalJVVUFUbE4wTTE5Zk1qaHVkVzF3ZFc1amRFbDNSVVVBVGxOME0xOWZNakUwWDE5emFHRnlaV1JmWTI5MWJuUkZBRTVUZEROZlh6SXhPVjlmYzJoaGNtVmtYM2RsWVd0ZlkyOTFiblJGQUVId3ZnTUxBUUVBUVpqQUF3dGFYRWdBQUFFQUFBQjhTQUFBQVFBQUFOQlFBQUFCQUFBQUlDSUFBQUFBQUFDVVVRQUFBUUFBQU5oUkFBQUJBQUFBakZBQUFBRUFBQUJNNGdBQUFBQUFBQWhTQUFBQkFBQUFPRklBQUFFQUFBQUVVUUFBQVFBQUFDNHNBRUdBd1FNTERTeFJBQUFCQUFBQUxnQUFBQ3dBUWFEQkF3dkpBcHhJQUFBQkFBQUEzRWdBQUFFQUFBQWNTUUFBQVFBQUFGQkpBQUFCQUFBQW5FNEFBQUVBQUFEVVRnQUFBUUFBQUF4UEFBQUJBQUFBUkU4QUFBRUFBQUI4VHdBQUFRQUFBSmhQQUFBQkFBQUF0RThBQUFFQUFBRFFUd0FBQVFBQUFJUkpBQUFCQUFBQXRFa0FBQUFBQUFEWVNRQUFBUUFBQUFoS0FBQUFBQUFBYkU0QUFBRUFBQUJNNGdBQUFBQUFBSVJPQUFBQkFBQUFUT0lBQUFBQUFBRHNUd0FBQVFBQUFBeFFBQUFCQUFBQUFRQUFBQUFBQUFDOFVBQUFEd0FBQUhEaEFBRGc0UUFBNE9FQUFBQUFBQUFZNEFBQUlPQUFBQ2pnQUFBNDRBQUFRT0FBQUVqZ0FBQlk0QUFBWU9BQUFHamdBQUNBNEFBQW9PQUFBS2pnQUFDdzRBQUF1T0FBQU1EZ0FBREk0QUFBME9BQUFOamdBQURnNEFBQTZPQUFBUERnQUFENDRBQUFBT0VBQUJEaEFBQWc0UUFBTU9FQUFFRGhBQUJJNFFBQUFRQUFBQUFBQUFCREFFSHp3d01MQmdFQUFBQUFBUUJCNk1VREN4R2dSZ0FBQUFBQUFMUkdBQUFDRUFBQUJnQkJpTVlEQ3dhUTVRQUFXT0VBUWJqR0F3c1ptT01BQVAvLy8vL1FSZ0FBQUFBQUFPUkdBQUFDRUFBQUJnQkI0TVlEQ3diUTVRQUFXT0VBUVpESEF3c1Y3T01BQVAvLy8vOEFSd0FBRkVjQUFBSVFBQUFHQUVHMHh3TUxCaERtQUFCWTRRQkI2TWNEQ3hILy8vLy9NRWNBQUVSSEFBQUNFQUFBQmdCQmlNZ0RDd1pJNWdBQVdPRUFRYnpJQXdzUi8vLy8vd0JIQUFBVVJ3QUFBakFBQUFZQVFkeklBd3NHZ09ZQUFGamhBRUdNeVFNTEZaampBQUQvLy8vL01FY0FBRVJIQUFBQ01BQUFCZ0JCc01rREN3YTQ1Z0FBV09FQVFlREpBd3NWN09NQUFQLy8vLzhBUndBQUZFY0FBQUlRQUFBR0FFR0V5Z01MQm9EbUFBQlk0UUJCdU1vREN4SC8vLy8vTUVjQUFFUkhBQUFDRUFBQUJnQkIyTW9EQ3dhNDVnQUFXT0VBUVl6TEF3c0svLy8vL3h4SUFBQlk0UUJCc01zREN4YjRPUUFBUU9BQUFNamxBQUFCQUFBQS8vLy8vd0FCQUVIUXl3TUxCdHhIQUFCWTRRQkI4TXNEQ3hUNE9RQUFTT0FBQUFqbUFBQUJBQUFBLy8vLy93QkJrTXdEQ3dhY1J3QUFXT0VBUWJETUF3c05pRG9BQUVEZ0FBQkE1Z0FBQVFCQnlNd0RDd1pjUndBQVdPRUFRZWpNQXdzS2lEb0FBRWpnQUFCNDVnQkJnTTBEQ3dhY1J3QUFXT0VBUWFETkF3c05hRGtBQUVEZ0FBQ3c1Z0FBQVFCQnVNMERDd1pjUndBQVdPRUFRZGpOQXdzS2FEa0FBRWpnQUFEbzVnQkI4TTBEQzFYLy8vLy9BUUFBQVAvLy8vOENBQUFBLy8vLy93TUFBQUJNNGdBQUhBQUFBUC8vLy84SkFBQUEvLy8vL3dzQUFBRC8vLy8vQkFBQUFQLy8vLzhLQUFBQS8vLy8vd3dBQUFELy8vLy9EUUFBQVAvLy8vOE9BRUdFendNTEJmLy8vLzhYQUVISXp3TUxsZ0gvLy8vL0dBQUFBUC8vLy84WkFBQUEvLy8vL3hvQUFBRC8vLy8vRHdBQUFQLy8vLzhRQUFBQS8vLy8veEVBQUFELy8vLy9FZ0FBQVAvLy8vOFRBQUFBLy8vLy94UUFBQUQvLy8vL0ZRQUFBUC8vLy84V0FBQUEvLy8vL3hzQUFBRC8vLy8vSEFBQUFQLy8vLzhGQUFBQS8vLy8vd1lBQUFELy8vLy9Cd0FBQVAvLy8vOElBQUFBV09FQUFGRG9BQUJZNFFBQVdPZ0FRZkRlQXdzQ1dPRUFRWURmQXdzRk9PZ0FBSThBUVpEZkF3c1Jqd0FBQUFBQUFBQ2c3d0FBQUFBQUFJOD1cIjtmdW5jdGlvbiBsQSgpe3RyeXtpZihuKXJldHVybiBuZXcgVWludDhBcnJheShuKTt2YXIgQT1qZyhmQSk7aWYoQSlyZXR1cm4gQTtpZihoKXJldHVybiBoKGZBKTt0aHJvd1wiYm90aCBhc3luYyBhbmQgc3luYyBmZXRjaGluZyBvZiB0aGUgd2FzbSBmYWlsZWRcIn1jYXRjaChBKXtKQShBKX19ZnVuY3Rpb24gdUEoKXtyZXR1cm4gbnx8IWkmJiFvfHxcImZ1bmN0aW9uXCIhPXR5cGVvZiBmZXRjaD9uZXcgUHJvbWlzZSgoZnVuY3Rpb24oQSxJKXtBKGxBKCkpfSkpOmZldGNoKGZBLHtjcmVkZW50aWFsczpcInNhbWUtb3JpZ2luXCJ9KS50aGVuKChmdW5jdGlvbihBKXtpZighQS5vayl0aHJvd1wiZmFpbGVkIHRvIGxvYWQgd2FzbSBiaW5hcnkgZmlsZSBhdCAnXCIrZkErXCInXCI7cmV0dXJuIEEuYXJyYXlCdWZmZXIoKX0pKS5jYXRjaCgoZnVuY3Rpb24oKXtyZXR1cm4gbEEoKX0pKX1mdW5jdGlvbiBXQSgpe3ZhciBJPXtlbnY6QkIsd2FzaV9zbmFwc2hvdF9wcmV2aWV3MTpCQixnbG9iYWw6e05hTjpOYU4sSW5maW5pdHk6MS8wfSxcImdsb2JhbC5NYXRoXCI6TWF0aCxhc20yd2FzbTprfTtmdW5jdGlvbiBnKEksZyl7dmFyIEI9SS5leHBvcnRzO0EuYXNtPUIsZUEoKX1mdW5jdGlvbiBCKEEpe2coQS5pbnN0YW5jZSl9ZnVuY3Rpb24gQyhBKXtyZXR1cm4gdUEoKS50aGVuKChmdW5jdGlvbihBKXtyZXR1cm4gV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoQSxJKX0pKS50aGVuKEEsKGZ1bmN0aW9uKEEpe1MoXCJmYWlsZWQgdG8gYXN5bmNocm9ub3VzbHkgcHJlcGFyZSB3YXNtOiBcIitBKSxKQShBKX0pKX1pZihZQSgpLEEuaW5zdGFudGlhdGVXYXNtKXRyeXtyZXR1cm4gQS5pbnN0YW50aWF0ZVdhc20oSSxnKX1jYXRjaChBKXtyZXR1cm4gUyhcIk1vZHVsZS5pbnN0YW50aWF0ZVdhc20gY2FsbGJhY2sgZmFpbGVkIHdpdGggZXJyb3I6IFwiK0EpLCExfXJldHVybiBmdW5jdGlvbigpe2lmKG58fFwiZnVuY3Rpb25cIiE9dHlwZW9mIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nfHxMQShmQSl8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIGZldGNoKXJldHVybiBDKEIpO2ZldGNoKGZBLHtjcmVkZW50aWFsczpcInNhbWUtb3JpZ2luXCJ9KS50aGVuKChmdW5jdGlvbihBKXtyZXR1cm4gV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcoQSxJKS50aGVuKEIsKGZ1bmN0aW9uKEEpe1MoXCJ3YXNtIHN0cmVhbWluZyBjb21waWxlIGZhaWxlZDogXCIrQSksUyhcImZhbGxpbmcgYmFjayB0byBBcnJheUJ1ZmZlciBpbnN0YW50aWF0aW9uXCIpLEMoQil9KSl9KSl9KCkse319TEEoZkEpfHwoZkE9eShmQSkpLEEuYXNtPVdBO3ZhciBwQT1bZnVuY3Rpb24oQSxJLGcsQixDLFEpe2FydG9vbGtpdC5mcmFtZU1hbGxvY3x8KGFydG9vbGtpdC5mcmFtZU1hbGxvYz17fSk7dmFyIEU9YXJ0b29sa2l0LmZyYW1lTWFsbG9jO0UuZnJhbWVwb2ludGVyPUksRS5mcmFtZXNpemU9ZyxFLmNhbWVyYT1CLEUudHJhbnNmb3JtPUMsRS52aWRlb0x1bWFQb2ludGVyPVF9LGZ1bmN0aW9uKEEsSSxnLEIpe2FydG9vbGtpdC5tdWx0aUVhY2hNYXJrZXJJbmZvfHwoYXJ0b29sa2l0Lm11bHRpRWFjaE1hcmtlckluZm89e30pO3ZhciBDPWFydG9vbGtpdC5tdWx0aUVhY2hNYXJrZXJJbmZvO0MudmlzaWJsZT1BLEMucGF0dElkPUksQy5wYXR0VHlwZT1nLEMud2lkdGg9Qn0sZnVuY3Rpb24oQSxJLGcsQixDLFEsRSxpLG8sRCxhLHcsRixHLGgscyxSLFUseSx0LFMsTSxuLGMscixrLEssTixZLGUsSixILEwpe3ZhciBxPWFyZ3VtZW50cyxkPTEyO2FydG9vbGtpdC5tYXJrZXJJbmZvfHwoYXJ0b29sa2l0Lm1hcmtlckluZm89e3BvczpbMCwwXSxsaW5lOltbMCwwLDBdLFswLDAsMF0sWzAsMCwwXSxbMCwwLDBdXSx2ZXJ0ZXg6W1swLDBdLFswLDBdLFswLDBdLFswLDBdXX0pO3ZhciBmPWFydG9vbGtpdC5tYXJrZXJJbmZvO2YuYXJlYT1BLGYuaWQ9SSxmLmlkUGF0dD1nLGYuaWRNYXRyaXg9QixmLmRpcj1DLGYuZGlyUGF0dD1RLGYuZGlyTWF0cml4PUUsZi5jZj1pLGYuY2ZQYXR0PW8sZi5jZk1hdHJpeD1ELGYucG9zWzBdPWEsZi5wb3NbMV09dyxmLmxpbmVbMF1bMF09cVtkKytdLGYubGluZVswXVsxXT1xW2QrK10sZi5saW5lWzBdWzJdPXFbZCsrXSxmLmxpbmVbMV1bMF09cVtkKytdLGYubGluZVsxXVsxXT1xW2QrK10sZi5saW5lWzFdWzJdPXFbZCsrXSxmLmxpbmVbMl1bMF09cVtkKytdLGYubGluZVsyXVsxXT1xW2QrK10sZi5saW5lWzJdWzJdPXFbZCsrXSxmLmxpbmVbM11bMF09cVtkKytdLGYubGluZVszXVsxXT1xW2QrK10sZi5saW5lWzNdWzJdPXFbZCsrXSxmLnZlcnRleFswXVswXT1xW2QrK10sZi52ZXJ0ZXhbMF1bMV09cVtkKytdLGYudmVydGV4WzFdWzBdPXFbZCsrXSxmLnZlcnRleFsxXVsxXT1xW2QrK10sZi52ZXJ0ZXhbMl1bMF09cVtkKytdLGYudmVydGV4WzJdWzFdPXFbZCsrXSxmLnZlcnRleFszXVswXT1xW2QrK10sZi52ZXJ0ZXhbM11bMV09cVtkKytdLGYuZXJyb3JDb3JyZWN0ZWQ9cVtkKytdfSxmdW5jdGlvbihBLEksZyxCLEMsUSxFLGksbyxELGEsdyxGLEcpe3ZhciBoPWFyZ3VtZW50cyxzPTA7YXJ0b29sa2l0Lk5GVE1hcmtlckluZm98fChhcnRvb2xraXQuTkZUTWFya2VySW5mbz17aWQ6MCxlcnJvcjotMSxmb3VuZDowLHBvc2U6WzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXX0pO3ZhciBSPWFydG9vbGtpdC5ORlRNYXJrZXJJbmZvO1IuaWQ9aFtzKytdLFIuZXJyb3I9aFtzKytdLFIuZm91bmQ9MSxSLnBvc2VbMF09aFtzKytdLFIucG9zZVsxXT1oW3MrK10sUi5wb3NlWzJdPWhbcysrXSxSLnBvc2VbM109aFtzKytdLFIucG9zZVs0XT1oW3MrK10sUi5wb3NlWzVdPWhbcysrXSxSLnBvc2VbNl09aFtzKytdLFIucG9zZVs3XT1oW3MrK10sUi5wb3NlWzhdPWhbcysrXSxSLnBvc2VbOV09aFtzKytdLFIucG9zZVsxMF09aFtzKytdLFIucG9zZVsxMV09aFtzKytdfSxmdW5jdGlvbihBKXt2YXIgST1hcmd1bWVudHMsZz0wO2FydG9vbGtpdC5ORlRNYXJrZXJJbmZvfHwoYXJ0b29sa2l0Lk5GVE1hcmtlckluZm89e2lkOjAsZXJyb3I6LTEsZm91bmQ6MCxwb3NlOlswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF19KTt2YXIgQj1hcnRvb2xraXQuTkZUTWFya2VySW5mbztCLmlkPUlbZysrXSxCLmVycm9yPS0xLEIuZm91bmQ9MCxCLnBvc2VbMF09MCxCLnBvc2VbMV09MCxCLnBvc2VbMl09MCxCLnBvc2VbM109MCxCLnBvc2VbNF09MCxCLnBvc2VbNV09MCxCLnBvc2VbNl09MCxCLnBvc2VbN109MCxCLnBvc2VbOF09MCxCLnBvc2VbOV09MCxCLnBvc2VbMTBdPTAsQi5wb3NlWzExXT0wfV07ZnVuY3Rpb24gWkEoQSxJLGcsQixDLFEsRSl7cmV0dXJuIHBBW0FdKEksZyxCLEMsUSxFKX1mdW5jdGlvbiBiQShBLEksZyxCLEMpe3JldHVybiBwQVtBXShJLGcsQixDKX1mdW5jdGlvbiB4QShBLEksZyxCLEMsUSxFLGksbyxELGEsdyxGLEcsaCl7cmV0dXJuIHBBW0FdKEksZyxCLEMsUSxFLGksbyxELGEsdyxGLEcsaCl9ZnVuY3Rpb24gbUEoQSxJKXtyZXR1cm4gcEFbQV0oSSl9ZnVuY3Rpb24gWEEoQSxJLGcsQixDLFEsRSxpLG8sRCxhLHcsRixHLGgscyxSLFUseSx0LFMsTSxuLGMscixrLEssTixZLGUsSixILEwscSl7cmV0dXJuIHBBW0FdKEksZyxCLEMsUSxFLGksbyxELGEsdyxGLEcsaCxzLFIsVSx5LHQsUyxNLG4sYyxyLGssSyxOLFksZSxKLEgsTCxxKX1mdW5jdGlvbiBWQShBKXtyZXR1cm4gQS5yZXBsYWNlKC9cXGJfX1pbXFx3XFxkX10rL2csKGZ1bmN0aW9uKEEpe3JldHVybiBBPT1BP0E6QStcIiBbXCIrQStcIl1cIn0pKX1mdW5jdGlvbiBPQSgpe3ZhciBBPW5ldyBFcnJvcjtpZighQS5zdGFjayl7dHJ5e3Rocm93IG5ldyBFcnJvcn1jYXRjaChJKXtBPUl9aWYoIUEuc3RhY2spcmV0dXJuXCIobm8gc3RhY2sgdHJhY2UgYXZhaWxhYmxlKVwifXJldHVybiBBLnN0YWNrLnRvU3RyaW5nKCl9ZnVuY3Rpb24gVEEoKXt2YXIgST1PQSgpO3JldHVybiBBLmV4dHJhU3RhY2tUcmFjZSYmKEkrPVwiXFxuXCIrQS5leHRyYVN0YWNrVHJhY2UoKSksVkEoSSl9d0EucHVzaCh7ZnVuYzpmdW5jdGlvbigpe0VCKCl9fSx7ZnVuYzpmdW5jdGlvbigpe2FCKCl9fSx7ZnVuYzpmdW5jdGlvbigpe2lCKCl9fSx7ZnVuYzpmdW5jdGlvbigpe29CKCl9fSk7dmFyIGpBPXt9O2Z1bmN0aW9uIFBBKCl7cmV0dXJuIFF8fFwiLi90aGlzLnByb2dyYW1cIn1mdW5jdGlvbiB2QShBKXt2YXIgSSxnO3ZBLmNhbGxlZD8oZz1BQVtBPj4yXSxJPUFBW2c+PjJdKToodkEuY2FsbGVkPSEwLGpBLlVTRVI9XCJ3ZWJfdXNlclwiLGpBLkxPR05BTUU9XCJ3ZWJfdXNlclwiLGpBLlBBVEg9XCIvXCIsakEuUFdEPVwiL1wiLGpBLkhPTUU9XCIvaG9tZS93ZWJfdXNlclwiLGpBLkxBTkc9KFwib2JqZWN0XCI9PT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIG5hdmlnYXRvcj9cInVuZGVmaW5lZFwiOkQobmF2aWdhdG9yKSkmJm5hdmlnYXRvci5sYW5ndWFnZXMmJm5hdmlnYXRvci5sYW5ndWFnZXNbMF18fFwiQ1wiKS5yZXBsYWNlKFwiLVwiLFwiX1wiKStcIi5VVEYtOFwiLGpBLl89UEEoKSxJPUwoMTAyNCksZz1MKDI1NiksQUFbZz4+Ml09SSxBQVtBPj4yXT1nKTt2YXIgQj1bXSxDPTA7Zm9yKHZhciBRIGluIGpBKWlmKFwic3RyaW5nXCI9PXR5cGVvZiBqQVtRXSl7dmFyIEU9UStcIj1cIitqQVtRXTtCLnB1c2goRSksQys9RS5sZW5ndGh9aWYoQz4xMDI0KXRocm93IG5ldyBFcnJvcihcIkVudmlyb25tZW50IHNpemUgZXhjZWVkZWQgVE9UQUxfRU5WX1NJWkUhXCIpO2Zvcih2YXIgaT0wO2k8Qi5sZW5ndGg7aSsrKWooRT1CW2ldLEkpLEFBW2crNCppPj4yXT1JLEkrPUUubGVuZ3RoKzE7QUFbZys0KkIubGVuZ3RoPj4yXT0wfWZ1bmN0aW9uIHpBKEEpe3JldHVybiBSQihBKX12YXIgX0E9e307ZnVuY3Rpb24gJEEoQSxJLGcpe3Rocm93IF9BW0FdPXtwdHI6QSxhZGp1c3RlZDpbQV0sdHlwZTpJLGRlc3RydWN0b3I6ZyxyZWZjb3VudDowLGNhdWdodDohMSxyZXRocm93bjohMX0sXCJ1bmNhdWdodF9leGNlcHRpb25cImluIERCP0RCLnVuY2F1Z2h0X2V4Y2VwdGlvbnMrKzpEQi51bmNhdWdodF9leGNlcHRpb25zPTEsQX1mdW5jdGlvbiBBSSgpe31mdW5jdGlvbiBJSShJKXtyZXR1cm4gQS5fX19lcnJub19sb2NhdGlvbiYmKEFBW0EuX19fZXJybm9fbG9jYXRpb24oKT4+Ml09SSksSX1mdW5jdGlvbiBnSShBLEkpe3JldHVybiBJSSg2MyksLTF9dmFyIEJJPXtzcGxpdFBhdGg6ZnVuY3Rpb24oQSl7cmV0dXJuL14oXFwvP3wpKFtcXHNcXFNdKj8pKCg/OlxcLnsxLDJ9fFteXFwvXSs/fCkoXFwuW14uXFwvXSp8KSkoPzpbXFwvXSopJC8uZXhlYyhBKS5zbGljZSgxKX0sbm9ybWFsaXplQXJyYXk6ZnVuY3Rpb24oQSxJKXtmb3IodmFyIGc9MCxCPUEubGVuZ3RoLTE7Qj49MDtCLS0pe3ZhciBDPUFbQl07XCIuXCI9PT1DP0Euc3BsaWNlKEIsMSk6XCIuLlwiPT09Qz8oQS5zcGxpY2UoQiwxKSxnKyspOmcmJihBLnNwbGljZShCLDEpLGctLSl9aWYoSSlmb3IoO2c7Zy0tKUEudW5zaGlmdChcIi4uXCIpO3JldHVybiBBfSxub3JtYWxpemU6ZnVuY3Rpb24oQSl7dmFyIEk9XCIvXCI9PT1BLmNoYXJBdCgwKSxnPVwiL1wiPT09QS5zdWJzdHIoLTEpO3JldHVybihBPUJJLm5vcm1hbGl6ZUFycmF5KEEuc3BsaXQoXCIvXCIpLmZpbHRlcigoZnVuY3Rpb24oQSl7cmV0dXJuISFBfSkpLCFJKS5qb2luKFwiL1wiKSl8fEl8fChBPVwiLlwiKSxBJiZnJiYoQSs9XCIvXCIpLChJP1wiL1wiOlwiXCIpK0F9LGRpcm5hbWU6ZnVuY3Rpb24oQSl7dmFyIEk9Qkkuc3BsaXRQYXRoKEEpLGc9SVswXSxCPUlbMV07cmV0dXJuIGd8fEI/KEImJihCPUIuc3Vic3RyKDAsQi5sZW5ndGgtMSkpLGcrQik6XCIuXCJ9LGJhc2VuYW1lOmZ1bmN0aW9uKEEpe2lmKFwiL1wiPT09QSlyZXR1cm5cIi9cIjt2YXIgST1BLmxhc3RJbmRleE9mKFwiL1wiKTtyZXR1cm4tMT09PUk/QTpBLnN1YnN0cihJKzEpfSxleHRuYW1lOmZ1bmN0aW9uKEEpe3JldHVybiBCSS5zcGxpdFBhdGgoQSlbM119LGpvaW46ZnVuY3Rpb24oKXt2YXIgQT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMCk7cmV0dXJuIEJJLm5vcm1hbGl6ZShBLmpvaW4oXCIvXCIpKX0sam9pbjI6ZnVuY3Rpb24oQSxJKXtyZXR1cm4gQkkubm9ybWFsaXplKEErXCIvXCIrSSl9fSxDST17cmVzb2x2ZTpmdW5jdGlvbigpe2Zvcih2YXIgQT1cIlwiLEk9ITEsZz1hcmd1bWVudHMubGVuZ3RoLTE7Zz49LTEmJiFJO2ctLSl7dmFyIEI9Zz49MD9hcmd1bWVudHNbZ106aUkuY3dkKCk7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIEIpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50cyB0byBwYXRoLnJlc29sdmUgbXVzdCBiZSBzdHJpbmdzXCIpO2lmKCFCKXJldHVyblwiXCI7QT1CK1wiL1wiK0EsST1cIi9cIj09PUIuY2hhckF0KDApfXJldHVybihJP1wiL1wiOlwiXCIpKyhBPUJJLm5vcm1hbGl6ZUFycmF5KEEuc3BsaXQoXCIvXCIpLmZpbHRlcigoZnVuY3Rpb24oQSl7cmV0dXJuISFBfSkpLCFJKS5qb2luKFwiL1wiKSl8fFwiLlwifSxyZWxhdGl2ZTpmdW5jdGlvbihBLEkpe2Z1bmN0aW9uIGcoQSl7Zm9yKHZhciBJPTA7STxBLmxlbmd0aCYmXCJcIj09PUFbSV07SSsrKTtmb3IodmFyIGc9QS5sZW5ndGgtMTtnPj0wJiZcIlwiPT09QVtnXTtnLS0pO3JldHVybiBJPmc/W106QS5zbGljZShJLGctSSsxKX1BPUNJLnJlc29sdmUoQSkuc3Vic3RyKDEpLEk9Q0kucmVzb2x2ZShJKS5zdWJzdHIoMSk7Zm9yKHZhciBCPWcoQS5zcGxpdChcIi9cIikpLEM9ZyhJLnNwbGl0KFwiL1wiKSksUT1NYXRoLm1pbihCLmxlbmd0aCxDLmxlbmd0aCksRT1RLGk9MDtpPFE7aSsrKWlmKEJbaV0hPT1DW2ldKXtFPWk7YnJlYWt9dmFyIG89W107Zm9yKGk9RTtpPEIubGVuZ3RoO2krKylvLnB1c2goXCIuLlwiKTtyZXR1cm4obz1vLmNvbmNhdChDLnNsaWNlKEUpKSkuam9pbihcIi9cIil9fSxRST17dHR5czpbXSxpbml0OmZ1bmN0aW9uKCl7fSxzaHV0ZG93bjpmdW5jdGlvbigpe30scmVnaXN0ZXI6ZnVuY3Rpb24oQSxJKXtRSS50dHlzW0FdPXtpbnB1dDpbXSxvdXRwdXQ6W10sb3BzOkl9LGlJLnJlZ2lzdGVyRGV2aWNlKEEsUUkuc3RyZWFtX29wcyl9LHN0cmVhbV9vcHM6e29wZW46ZnVuY3Rpb24oQSl7dmFyIEk9UUkudHR5c1tBLm5vZGUucmRldl07aWYoIUkpdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoNDMpO0EudHR5PUksQS5zZWVrYWJsZT0hMX0sY2xvc2U6ZnVuY3Rpb24oQSl7QS50dHkub3BzLmZsdXNoKEEudHR5KX0sZmx1c2g6ZnVuY3Rpb24oQSl7QS50dHkub3BzLmZsdXNoKEEudHR5KX0scmVhZDpmdW5jdGlvbihBLEksZyxCLEMpe2lmKCFBLnR0eXx8IUEudHR5Lm9wcy5nZXRfY2hhcil0aHJvdyBuZXcgaUkuRXJybm9FcnJvcig2MCk7Zm9yKHZhciBRPTAsRT0wO0U8QjtFKyspe3ZhciBpO3RyeXtpPUEudHR5Lm9wcy5nZXRfY2hhcihBLnR0eSl9Y2F0Y2goQSl7dGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoMjkpfWlmKHZvaWQgMD09PWkmJjA9PT1RKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDYpO2lmKG51bGw9PWkpYnJlYWs7USsrLElbZytFXT1pfXJldHVybiBRJiYoQS5ub2RlLnRpbWVzdGFtcD1EYXRlLm5vdygpKSxRfSx3cml0ZTpmdW5jdGlvbihBLEksZyxCLEMpe2lmKCFBLnR0eXx8IUEudHR5Lm9wcy5wdXRfY2hhcil0aHJvdyBuZXcgaUkuRXJybm9FcnJvcig2MCk7dHJ5e2Zvcih2YXIgUT0wO1E8QjtRKyspQS50dHkub3BzLnB1dF9jaGFyKEEudHR5LElbZytRXSl9Y2F0Y2goQSl7dGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoMjkpfXJldHVybiBCJiYoQS5ub2RlLnRpbWVzdGFtcD1EYXRlLm5vdygpKSxRfX0sZGVmYXVsdF90dHlfb3BzOntnZXRfY2hhcjpmdW5jdGlvbihBKXtpZighQS5pbnB1dC5sZW5ndGgpe3ZhciBJPW51bGw7aWYodyl7dmFyIGc9QnVmZmVyLmFsbG9jP0J1ZmZlci5hbGxvYygyNTYpOm5ldyBCdWZmZXIoMjU2KSxCPTA7dHJ5e0I9cy5yZWFkU3luYyhwcm9jZXNzLnN0ZGluLmZkLGcsMCwyNTYsbnVsbCl9Y2F0Y2goQSl7aWYoLTE9PUEudG9TdHJpbmcoKS5pbmRleE9mKFwiRU9GXCIpKXRocm93IEE7Qj0wfUk9Qj4wP2cuc2xpY2UoMCxCKS50b1N0cmluZyhcInV0Zi04XCIpOm51bGx9ZWxzZVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHdpbmRvdy5wcm9tcHQ/bnVsbCE9PShJPXdpbmRvdy5wcm9tcHQoXCJJbnB1dDogXCIpKSYmKEkrPVwiXFxuXCIpOlwiZnVuY3Rpb25cIj09dHlwZW9mIHJlYWRsaW5lJiZudWxsIT09KEk9cmVhZGxpbmUoKSkmJihJKz1cIlxcblwiKTtpZighSSlyZXR1cm4gbnVsbDtBLmlucHV0PVhnKEksITApfXJldHVybiBBLmlucHV0LnNoaWZ0KCl9LHB1dF9jaGFyOmZ1bmN0aW9uKEEsSSl7bnVsbD09PUl8fDEwPT09ST8odChkKEEub3V0cHV0LDApKSxBLm91dHB1dD1bXSk6MCE9SSYmQS5vdXRwdXQucHVzaChJKX0sZmx1c2g6ZnVuY3Rpb24oQSl7QS5vdXRwdXQmJkEub3V0cHV0Lmxlbmd0aD4wJiYodChkKEEub3V0cHV0LDApKSxBLm91dHB1dD1bXSl9fSxkZWZhdWx0X3R0eTFfb3BzOntwdXRfY2hhcjpmdW5jdGlvbihBLEkpe251bGw9PT1JfHwxMD09PUk/KFMoZChBLm91dHB1dCwwKSksQS5vdXRwdXQ9W10pOjAhPUkmJkEub3V0cHV0LnB1c2goSSl9LGZsdXNoOmZ1bmN0aW9uKEEpe0Eub3V0cHV0JiZBLm91dHB1dC5sZW5ndGg+MCYmKFMoZChBLm91dHB1dCwwKSksQS5vdXRwdXQ9W10pfX19LEVJPXtvcHNfdGFibGU6bnVsbCxtb3VudDpmdW5jdGlvbihBKXtyZXR1cm4gRUkuY3JlYXRlTm9kZShudWxsLFwiL1wiLDE2ODk1LDApfSxjcmVhdGVOb2RlOmZ1bmN0aW9uKEEsSSxnLEIpe2lmKGlJLmlzQmxrZGV2KGcpfHxpSS5pc0ZJRk8oZykpdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoNjMpO0VJLm9wc190YWJsZXx8KEVJLm9wc190YWJsZT17ZGlyOntub2RlOntnZXRhdHRyOkVJLm5vZGVfb3BzLmdldGF0dHIsc2V0YXR0cjpFSS5ub2RlX29wcy5zZXRhdHRyLGxvb2t1cDpFSS5ub2RlX29wcy5sb29rdXAsbWtub2Q6RUkubm9kZV9vcHMubWtub2QscmVuYW1lOkVJLm5vZGVfb3BzLnJlbmFtZSx1bmxpbms6RUkubm9kZV9vcHMudW5saW5rLHJtZGlyOkVJLm5vZGVfb3BzLnJtZGlyLHJlYWRkaXI6RUkubm9kZV9vcHMucmVhZGRpcixzeW1saW5rOkVJLm5vZGVfb3BzLnN5bWxpbmt9LHN0cmVhbTp7bGxzZWVrOkVJLnN0cmVhbV9vcHMubGxzZWVrfX0sZmlsZTp7bm9kZTp7Z2V0YXR0cjpFSS5ub2RlX29wcy5nZXRhdHRyLHNldGF0dHI6RUkubm9kZV9vcHMuc2V0YXR0cn0sc3RyZWFtOntsbHNlZWs6RUkuc3RyZWFtX29wcy5sbHNlZWsscmVhZDpFSS5zdHJlYW1fb3BzLnJlYWQsd3JpdGU6RUkuc3RyZWFtX29wcy53cml0ZSxhbGxvY2F0ZTpFSS5zdHJlYW1fb3BzLmFsbG9jYXRlLG1tYXA6RUkuc3RyZWFtX29wcy5tbWFwLG1zeW5jOkVJLnN0cmVhbV9vcHMubXN5bmN9fSxsaW5rOntub2RlOntnZXRhdHRyOkVJLm5vZGVfb3BzLmdldGF0dHIsc2V0YXR0cjpFSS5ub2RlX29wcy5zZXRhdHRyLHJlYWRsaW5rOkVJLm5vZGVfb3BzLnJlYWRsaW5rfSxzdHJlYW06e319LGNocmRldjp7bm9kZTp7Z2V0YXR0cjpFSS5ub2RlX29wcy5nZXRhdHRyLHNldGF0dHI6RUkubm9kZV9vcHMuc2V0YXR0cn0sc3RyZWFtOmlJLmNocmRldl9zdHJlYW1fb3BzfX0pO3ZhciBDPWlJLmNyZWF0ZU5vZGUoQSxJLGcsQik7cmV0dXJuIGlJLmlzRGlyKEMubW9kZSk/KEMubm9kZV9vcHM9RUkub3BzX3RhYmxlLmRpci5ub2RlLEMuc3RyZWFtX29wcz1FSS5vcHNfdGFibGUuZGlyLnN0cmVhbSxDLmNvbnRlbnRzPXt9KTppSS5pc0ZpbGUoQy5tb2RlKT8oQy5ub2RlX29wcz1FSS5vcHNfdGFibGUuZmlsZS5ub2RlLEMuc3RyZWFtX29wcz1FSS5vcHNfdGFibGUuZmlsZS5zdHJlYW0sQy51c2VkQnl0ZXM9MCxDLmNvbnRlbnRzPW51bGwpOmlJLmlzTGluayhDLm1vZGUpPyhDLm5vZGVfb3BzPUVJLm9wc190YWJsZS5saW5rLm5vZGUsQy5zdHJlYW1fb3BzPUVJLm9wc190YWJsZS5saW5rLnN0cmVhbSk6aUkuaXNDaHJkZXYoQy5tb2RlKSYmKEMubm9kZV9vcHM9RUkub3BzX3RhYmxlLmNocmRldi5ub2RlLEMuc3RyZWFtX29wcz1FSS5vcHNfdGFibGUuY2hyZGV2LnN0cmVhbSksQy50aW1lc3RhbXA9RGF0ZS5ub3coKSxBJiYoQS5jb250ZW50c1tJXT1DKSxDfSxnZXRGaWxlRGF0YUFzUmVndWxhckFycmF5OmZ1bmN0aW9uKEEpe2lmKEEuY29udGVudHMmJkEuY29udGVudHMuc3ViYXJyYXkpe2Zvcih2YXIgST1bXSxnPTA7ZzxBLnVzZWRCeXRlczsrK2cpSS5wdXNoKEEuY29udGVudHNbZ10pO3JldHVybiBJfXJldHVybiBBLmNvbnRlbnRzfSxnZXRGaWxlRGF0YUFzVHlwZWRBcnJheTpmdW5jdGlvbihBKXtyZXR1cm4gQS5jb250ZW50cz9BLmNvbnRlbnRzLnN1YmFycmF5P0EuY29udGVudHMuc3ViYXJyYXkoMCxBLnVzZWRCeXRlcyk6bmV3IFVpbnQ4QXJyYXkoQS5jb250ZW50cyk6bmV3IFVpbnQ4QXJyYXl9LGV4cGFuZEZpbGVTdG9yYWdlOmZ1bmN0aW9uKEEsSSl7dmFyIGc9QS5jb250ZW50cz9BLmNvbnRlbnRzLmxlbmd0aDowO2lmKCEoZz49SSkpe0k9TWF0aC5tYXgoSSxnKihnPDEwNDg1NzY/MjoxLjEyNSl8MCksMCE9ZyYmKEk9TWF0aC5tYXgoSSwyNTYpKTt2YXIgQj1BLmNvbnRlbnRzO0EuY29udGVudHM9bmV3IFVpbnQ4QXJyYXkoSSksQS51c2VkQnl0ZXM+MCYmQS5jb250ZW50cy5zZXQoQi5zdWJhcnJheSgwLEEudXNlZEJ5dGVzKSwwKX19LHJlc2l6ZUZpbGVTdG9yYWdlOmZ1bmN0aW9uKEEsSSl7aWYoQS51c2VkQnl0ZXMhPUkpe2lmKDA9PUkpcmV0dXJuIEEuY29udGVudHM9bnVsbCx2b2lkKEEudXNlZEJ5dGVzPTApO2lmKCFBLmNvbnRlbnRzfHxBLmNvbnRlbnRzLnN1YmFycmF5KXt2YXIgZz1BLmNvbnRlbnRzO3JldHVybiBBLmNvbnRlbnRzPW5ldyBVaW50OEFycmF5KEkpLGcmJkEuY29udGVudHMuc2V0KGcuc3ViYXJyYXkoMCxNYXRoLm1pbihJLEEudXNlZEJ5dGVzKSkpLHZvaWQoQS51c2VkQnl0ZXM9SSl9aWYoQS5jb250ZW50c3x8KEEuY29udGVudHM9W10pLEEuY29udGVudHMubGVuZ3RoPkkpQS5jb250ZW50cy5sZW5ndGg9STtlbHNlIGZvcig7QS5jb250ZW50cy5sZW5ndGg8STspQS5jb250ZW50cy5wdXNoKDApO0EudXNlZEJ5dGVzPUl9fSxub2RlX29wczp7Z2V0YXR0cjpmdW5jdGlvbihBKXt2YXIgST17fTtyZXR1cm4gSS5kZXY9aUkuaXNDaHJkZXYoQS5tb2RlKT9BLmlkOjEsSS5pbm89QS5pZCxJLm1vZGU9QS5tb2RlLEkubmxpbms9MSxJLnVpZD0wLEkuZ2lkPTAsSS5yZGV2PUEucmRldixpSS5pc0RpcihBLm1vZGUpP0kuc2l6ZT00MDk2OmlJLmlzRmlsZShBLm1vZGUpP0kuc2l6ZT1BLnVzZWRCeXRlczppSS5pc0xpbmsoQS5tb2RlKT9JLnNpemU9QS5saW5rLmxlbmd0aDpJLnNpemU9MCxJLmF0aW1lPW5ldyBEYXRlKEEudGltZXN0YW1wKSxJLm10aW1lPW5ldyBEYXRlKEEudGltZXN0YW1wKSxJLmN0aW1lPW5ldyBEYXRlKEEudGltZXN0YW1wKSxJLmJsa3NpemU9NDA5NixJLmJsb2Nrcz1NYXRoLmNlaWwoSS5zaXplL0kuYmxrc2l6ZSksSX0sc2V0YXR0cjpmdW5jdGlvbihBLEkpe3ZvaWQgMCE9PUkubW9kZSYmKEEubW9kZT1JLm1vZGUpLHZvaWQgMCE9PUkudGltZXN0YW1wJiYoQS50aW1lc3RhbXA9SS50aW1lc3RhbXApLHZvaWQgMCE9PUkuc2l6ZSYmRUkucmVzaXplRmlsZVN0b3JhZ2UoQSxJLnNpemUpfSxsb29rdXA6ZnVuY3Rpb24oQSxJKXt0aHJvdyBpSS5nZW5lcmljRXJyb3JzWzQ0XX0sbWtub2Q6ZnVuY3Rpb24oQSxJLGcsQil7cmV0dXJuIEVJLmNyZWF0ZU5vZGUoQSxJLGcsQil9LHJlbmFtZTpmdW5jdGlvbihBLEksZyl7aWYoaUkuaXNEaXIoQS5tb2RlKSl7dmFyIEI7dHJ5e0I9aUkubG9va3VwTm9kZShJLGcpfWNhdGNoKEEpe31pZihCKWZvcih2YXIgQyBpbiBCLmNvbnRlbnRzKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDU1KX1kZWxldGUgQS5wYXJlbnQuY29udGVudHNbQS5uYW1lXSxBLm5hbWU9ZyxJLmNvbnRlbnRzW2ddPUEsQS5wYXJlbnQ9SX0sdW5saW5rOmZ1bmN0aW9uKEEsSSl7ZGVsZXRlIEEuY29udGVudHNbSV19LHJtZGlyOmZ1bmN0aW9uKEEsSSl7dmFyIGc9aUkubG9va3VwTm9kZShBLEkpO2Zvcih2YXIgQiBpbiBnLmNvbnRlbnRzKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDU1KTtkZWxldGUgQS5jb250ZW50c1tJXX0scmVhZGRpcjpmdW5jdGlvbihBKXt2YXIgST1bXCIuXCIsXCIuLlwiXTtmb3IodmFyIGcgaW4gQS5jb250ZW50cylBLmNvbnRlbnRzLmhhc093blByb3BlcnR5KGcpJiZJLnB1c2goZyk7cmV0dXJuIEl9LHN5bWxpbms6ZnVuY3Rpb24oQSxJLGcpe3ZhciBCPUVJLmNyZWF0ZU5vZGUoQSxJLDQxNDcxLDApO3JldHVybiBCLmxpbms9ZyxCfSxyZWFkbGluazpmdW5jdGlvbihBKXtpZighaUkuaXNMaW5rKEEubW9kZSkpdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoMjgpO3JldHVybiBBLmxpbmt9fSxzdHJlYW1fb3BzOntyZWFkOmZ1bmN0aW9uKEEsSSxnLEIsQyl7dmFyIFE9QS5ub2RlLmNvbnRlbnRzO2lmKEM+PUEubm9kZS51c2VkQnl0ZXMpcmV0dXJuIDA7dmFyIEU9TWF0aC5taW4oQS5ub2RlLnVzZWRCeXRlcy1DLEIpO2lmKEU+OCYmUS5zdWJhcnJheSlJLnNldChRLnN1YmFycmF5KEMsQytFKSxnKTtlbHNlIGZvcih2YXIgaT0wO2k8RTtpKyspSVtnK2ldPVFbQytpXTtyZXR1cm4gRX0sd3JpdGU6ZnVuY3Rpb24oQSxJLGcsQixDLFEpe2lmKCFCKXJldHVybiAwO3ZhciBFPUEubm9kZTtpZihFLnRpbWVzdGFtcD1EYXRlLm5vdygpLEkuc3ViYXJyYXkmJighRS5jb250ZW50c3x8RS5jb250ZW50cy5zdWJhcnJheSkpe2lmKFEpcmV0dXJuIEUuY29udGVudHM9SS5zdWJhcnJheShnLGcrQiksRS51c2VkQnl0ZXM9QixCO2lmKDA9PT1FLnVzZWRCeXRlcyYmMD09PUMpcmV0dXJuIEUuY29udGVudHM9SS5zbGljZShnLGcrQiksRS51c2VkQnl0ZXM9QixCO2lmKEMrQjw9RS51c2VkQnl0ZXMpcmV0dXJuIEUuY29udGVudHMuc2V0KEkuc3ViYXJyYXkoZyxnK0IpLEMpLEJ9aWYoRUkuZXhwYW5kRmlsZVN0b3JhZ2UoRSxDK0IpLEUuY29udGVudHMuc3ViYXJyYXkmJkkuc3ViYXJyYXkpRS5jb250ZW50cy5zZXQoSS5zdWJhcnJheShnLGcrQiksQyk7ZWxzZSBmb3IodmFyIGk9MDtpPEI7aSsrKUUuY29udGVudHNbQytpXT1JW2craV07cmV0dXJuIEUudXNlZEJ5dGVzPU1hdGgubWF4KEUudXNlZEJ5dGVzLEMrQiksQn0sbGxzZWVrOmZ1bmN0aW9uKEEsSSxnKXt2YXIgQj1JO2lmKDE9PT1nP0IrPUEucG9zaXRpb246Mj09PWcmJmlJLmlzRmlsZShBLm5vZGUubW9kZSkmJihCKz1BLm5vZGUudXNlZEJ5dGVzKSxCPDApdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoMjgpO3JldHVybiBCfSxhbGxvY2F0ZTpmdW5jdGlvbihBLEksZyl7RUkuZXhwYW5kRmlsZVN0b3JhZ2UoQS5ub2RlLEkrZyksQS5ub2RlLnVzZWRCeXRlcz1NYXRoLm1heChBLm5vZGUudXNlZEJ5dGVzLEkrZyl9LG1tYXA6ZnVuY3Rpb24oQSxJLGcsQixDLFEsRSl7aWYoIWlJLmlzRmlsZShBLm5vZGUubW9kZSkpdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoNDMpO3ZhciBpLG8sRD1BLm5vZGUuY29udGVudHM7aWYoMiZFfHxELmJ1ZmZlciE9PUkuYnVmZmVyKXsoQz4wfHxDK0I8QS5ub2RlLnVzZWRCeXRlcykmJihEPUQuc3ViYXJyYXk/RC5zdWJhcnJheShDLEMrQik6QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoRCxDLEMrQikpLG89ITA7dmFyIGE9SS5idWZmZXI9PXYuYnVmZmVyO2lmKCEoaT1SQihCKSkpdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoNDgpOyhhP3Y6SSkuc2V0KEQsaSl9ZWxzZSBvPSExLGk9RC5ieXRlT2Zmc2V0O3JldHVybntwdHI6aSxhbGxvY2F0ZWQ6b319LG1zeW5jOmZ1bmN0aW9uKEEsSSxnLEIsQyl7aWYoIWlJLmlzRmlsZShBLm5vZGUubW9kZSkpdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoNDMpO3JldHVybiAyJkN8fEVJLnN0cmVhbV9vcHMud3JpdGUoQSxJLDAsQixnLCExKSwwfX19LGlJPXtyb290Om51bGwsbW91bnRzOltdLGRldmljZXM6e30sc3RyZWFtczpbXSxuZXh0SW5vZGU6MSxuYW1lVGFibGU6bnVsbCxjdXJyZW50UGF0aDpcIi9cIixpbml0aWFsaXplZDohMSxpZ25vcmVQZXJtaXNzaW9uczohMCx0cmFja2luZ0RlbGVnYXRlOnt9LHRyYWNraW5nOntvcGVuRmxhZ3M6e1JFQUQ6MSxXUklURToyfX0sRXJybm9FcnJvcjpudWxsLGdlbmVyaWNFcnJvcnM6e30sZmlsZXN5c3RlbXM6bnVsbCxzeW5jRlNSZXF1ZXN0czowLGhhbmRsZUZTRXJyb3I6ZnVuY3Rpb24oQSl7aWYoIShBIGluc3RhbmNlb2YgaUkuRXJybm9FcnJvcikpdGhyb3cgQStcIiA6IFwiK1RBKCk7cmV0dXJuIElJKEEuZXJybm8pfSxsb29rdXBQYXRoOmZ1bmN0aW9uKEEsSSl7aWYoST1JfHx7fSwhKEE9Q0kucmVzb2x2ZShpSS5jd2QoKSxBKSkpcmV0dXJue3BhdGg6XCJcIixub2RlOm51bGx9O3ZhciBnPXtmb2xsb3dfbW91bnQ6ITAscmVjdXJzZV9jb3VudDowfTtmb3IodmFyIEIgaW4gZyl2b2lkIDA9PT1JW0JdJiYoSVtCXT1nW0JdKTtpZihJLnJlY3Vyc2VfY291bnQ+OCl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcigzMik7Zm9yKHZhciBDPUJJLm5vcm1hbGl6ZUFycmF5KEEuc3BsaXQoXCIvXCIpLmZpbHRlcigoZnVuY3Rpb24oQSl7cmV0dXJuISFBfSkpLCExKSxRPWlJLnJvb3QsRT1cIi9cIixpPTA7aTxDLmxlbmd0aDtpKyspe3ZhciBvPWk9PT1DLmxlbmd0aC0xO2lmKG8mJkkucGFyZW50KWJyZWFrO2lmKFE9aUkubG9va3VwTm9kZShRLENbaV0pLEU9Qkkuam9pbjIoRSxDW2ldKSxpSS5pc01vdW50cG9pbnQoUSkmJighb3x8byYmSS5mb2xsb3dfbW91bnQpJiYoUT1RLm1vdW50ZWQucm9vdCksIW98fEkuZm9sbG93KWZvcih2YXIgRD0wO2lJLmlzTGluayhRLm1vZGUpOyl7dmFyIGE9aUkucmVhZGxpbmsoRSk7aWYoRT1DSS5yZXNvbHZlKEJJLmRpcm5hbWUoRSksYSksUT1pSS5sb29rdXBQYXRoKEUse3JlY3Vyc2VfY291bnQ6SS5yZWN1cnNlX2NvdW50fSkubm9kZSxEKys+NDApdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoMzIpfX1yZXR1cm57cGF0aDpFLG5vZGU6UX19LGdldFBhdGg6ZnVuY3Rpb24oQSl7Zm9yKHZhciBJOzspe2lmKGlJLmlzUm9vdChBKSl7dmFyIGc9QS5tb3VudC5tb3VudHBvaW50O3JldHVybiBJP1wiL1wiIT09Z1tnLmxlbmd0aC0xXT9nK1wiL1wiK0k6ZytJOmd9ST1JP0EubmFtZStcIi9cIitJOkEubmFtZSxBPUEucGFyZW50fX0saGFzaE5hbWU6ZnVuY3Rpb24oQSxJKXtmb3IodmFyIGc9MCxCPTA7QjxJLmxlbmd0aDtCKyspZz0oZzw8NSktZytJLmNoYXJDb2RlQXQoQil8MDtyZXR1cm4oQStnPj4+MCklaUkubmFtZVRhYmxlLmxlbmd0aH0saGFzaEFkZE5vZGU6ZnVuY3Rpb24oQSl7dmFyIEk9aUkuaGFzaE5hbWUoQS5wYXJlbnQuaWQsQS5uYW1lKTtBLm5hbWVfbmV4dD1pSS5uYW1lVGFibGVbSV0saUkubmFtZVRhYmxlW0ldPUF9LGhhc2hSZW1vdmVOb2RlOmZ1bmN0aW9uKEEpe3ZhciBJPWlJLmhhc2hOYW1lKEEucGFyZW50LmlkLEEubmFtZSk7aWYoaUkubmFtZVRhYmxlW0ldPT09QSlpSS5uYW1lVGFibGVbSV09QS5uYW1lX25leHQ7ZWxzZSBmb3IodmFyIGc9aUkubmFtZVRhYmxlW0ldO2c7KXtpZihnLm5hbWVfbmV4dD09PUEpe2cubmFtZV9uZXh0PUEubmFtZV9uZXh0O2JyZWFrfWc9Zy5uYW1lX25leHR9fSxsb29rdXBOb2RlOmZ1bmN0aW9uKEEsSSl7dmFyIGc9aUkubWF5TG9va3VwKEEpO2lmKGcpdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoZyxBKTtmb3IodmFyIEI9aUkuaGFzaE5hbWUoQS5pZCxJKSxDPWlJLm5hbWVUYWJsZVtCXTtDO0M9Qy5uYW1lX25leHQpe3ZhciBRPUMubmFtZTtpZihDLnBhcmVudC5pZD09PUEuaWQmJlE9PT1JKXJldHVybiBDfXJldHVybiBpSS5sb29rdXAoQSxJKX0sY3JlYXRlTm9kZTpmdW5jdGlvbihBLEksZyxCKXtpZighaUkuRlNOb2RlKXtpSS5GU05vZGU9ZnVuY3Rpb24oQSxJLGcsQil7QXx8KEE9dGhpcyksdGhpcy5wYXJlbnQ9QSx0aGlzLm1vdW50PUEubW91bnQsdGhpcy5tb3VudGVkPW51bGwsdGhpcy5pZD1pSS5uZXh0SW5vZGUrKyx0aGlzLm5hbWU9SSx0aGlzLm1vZGU9Zyx0aGlzLm5vZGVfb3BzPXt9LHRoaXMuc3RyZWFtX29wcz17fSx0aGlzLnJkZXY9Qn0saUkuRlNOb2RlLnByb3RvdHlwZT17fTtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhpSS5GU05vZGUucHJvdG90eXBlLHtyZWFkOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gMzY1PT0oMzY1JnRoaXMubW9kZSl9LHNldDpmdW5jdGlvbihBKXtBP3RoaXMubW9kZXw9MzY1OnRoaXMubW9kZSY9LTM2Nn19LHdyaXRlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gMTQ2PT0oMTQ2JnRoaXMubW9kZSl9LHNldDpmdW5jdGlvbihBKXtBP3RoaXMubW9kZXw9MTQ2OnRoaXMubW9kZSY9LTE0N319LGlzRm9sZGVyOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaUkuaXNEaXIodGhpcy5tb2RlKX19LGlzRGV2aWNlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaUkuaXNDaHJkZXYodGhpcy5tb2RlKX19fSl9dmFyIEM9bmV3IGlJLkZTTm9kZShBLEksZyxCKTtyZXR1cm4gaUkuaGFzaEFkZE5vZGUoQyksQ30sZGVzdHJveU5vZGU6ZnVuY3Rpb24oQSl7aUkuaGFzaFJlbW92ZU5vZGUoQSl9LGlzUm9vdDpmdW5jdGlvbihBKXtyZXR1cm4gQT09PUEucGFyZW50fSxpc01vdW50cG9pbnQ6ZnVuY3Rpb24oQSl7cmV0dXJuISFBLm1vdW50ZWR9LGlzRmlsZTpmdW5jdGlvbihBKXtyZXR1cm4gMzI3Njg9PSg2MTQ0MCZBKX0saXNEaXI6ZnVuY3Rpb24oQSl7cmV0dXJuIDE2Mzg0PT0oNjE0NDAmQSl9LGlzTGluazpmdW5jdGlvbihBKXtyZXR1cm4gNDA5NjA9PSg2MTQ0MCZBKX0saXNDaHJkZXY6ZnVuY3Rpb24oQSl7cmV0dXJuIDgxOTI9PSg2MTQ0MCZBKX0saXNCbGtkZXY6ZnVuY3Rpb24oQSl7cmV0dXJuIDI0NTc2PT0oNjE0NDAmQSl9LGlzRklGTzpmdW5jdGlvbihBKXtyZXR1cm4gNDA5Nj09KDYxNDQwJkEpfSxpc1NvY2tldDpmdW5jdGlvbihBKXtyZXR1cm4gNDkxNTI9PSg0OTE1MiZBKX0sZmxhZ01vZGVzOntyOjAscnM6MTA1MjY3MixcInIrXCI6Mix3OjU3Nyx3eDo3MDUseHc6NzA1LFwidytcIjo1NzgsXCJ3eCtcIjo3MDYsXCJ4dytcIjo3MDYsYToxMDg5LGF4OjEyMTcseGE6MTIxNyxcImErXCI6MTA5MCxcImF4K1wiOjEyMTgsXCJ4YStcIjoxMjE4fSxtb2RlU3RyaW5nVG9GbGFnczpmdW5jdGlvbihBKXt2YXIgST1pSS5mbGFnTW9kZXNbQV07aWYodm9pZCAwPT09SSl0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGZpbGUgb3BlbiBtb2RlOiBcIitBKTtyZXR1cm4gSX0sZmxhZ3NUb1Blcm1pc3Npb25TdHJpbmc6ZnVuY3Rpb24oQSl7dmFyIEk9W1wiclwiLFwid1wiLFwicndcIl1bMyZBXTtyZXR1cm4gNTEyJkEmJihJKz1cIndcIiksSX0sbm9kZVBlcm1pc3Npb25zOmZ1bmN0aW9uKEEsSSl7cmV0dXJuIGlJLmlnbm9yZVBlcm1pc3Npb25zfHwoLTE9PT1JLmluZGV4T2YoXCJyXCIpfHwyOTImQS5tb2RlKSYmKC0xPT09SS5pbmRleE9mKFwid1wiKXx8MTQ2JkEubW9kZSkmJigtMT09PUkuaW5kZXhPZihcInhcIil8fDczJkEubW9kZSk/MDoyfSxtYXlMb29rdXA6ZnVuY3Rpb24oQSl7cmV0dXJuIGlJLm5vZGVQZXJtaXNzaW9ucyhBLFwieFwiKXx8KEEubm9kZV9vcHMubG9va3VwPzA6Mil9LG1heUNyZWF0ZTpmdW5jdGlvbihBLEkpe3RyeXtyZXR1cm4gaUkubG9va3VwTm9kZShBLEkpLDIwfWNhdGNoKEEpe31yZXR1cm4gaUkubm9kZVBlcm1pc3Npb25zKEEsXCJ3eFwiKX0sbWF5RGVsZXRlOmZ1bmN0aW9uKEEsSSxnKXt2YXIgQjt0cnl7Qj1pSS5sb29rdXBOb2RlKEEsSSl9Y2F0Y2goQSl7cmV0dXJuIEEuZXJybm99dmFyIEM9aUkubm9kZVBlcm1pc3Npb25zKEEsXCJ3eFwiKTtpZihDKXJldHVybiBDO2lmKGcpe2lmKCFpSS5pc0RpcihCLm1vZGUpKXJldHVybiA1NDtpZihpSS5pc1Jvb3QoQil8fGlJLmdldFBhdGgoQik9PT1pSS5jd2QoKSlyZXR1cm4gMTB9ZWxzZSBpZihpSS5pc0RpcihCLm1vZGUpKXJldHVybiAzMTtyZXR1cm4gMH0sbWF5T3BlbjpmdW5jdGlvbihBLEkpe3JldHVybiBBP2lJLmlzTGluayhBLm1vZGUpPzMyOmlJLmlzRGlyKEEubW9kZSkmJihcInJcIiE9PWlJLmZsYWdzVG9QZXJtaXNzaW9uU3RyaW5nKEkpfHw1MTImSSk/MzE6aUkubm9kZVBlcm1pc3Npb25zKEEsaUkuZmxhZ3NUb1Blcm1pc3Npb25TdHJpbmcoSSkpOjQ0fSxNQVhfT1BFTl9GRFM6NDA5NixuZXh0ZmQ6ZnVuY3Rpb24oQSxJKXtBPUF8fDAsST1JfHxpSS5NQVhfT1BFTl9GRFM7Zm9yKHZhciBnPUE7Zzw9STtnKyspaWYoIWlJLnN0cmVhbXNbZ10pcmV0dXJuIGc7dGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoMzMpfSxnZXRTdHJlYW06ZnVuY3Rpb24oQSl7cmV0dXJuIGlJLnN0cmVhbXNbQV19LGNyZWF0ZVN0cmVhbTpmdW5jdGlvbihBLEksZyl7aUkuRlNTdHJlYW18fChpSS5GU1N0cmVhbT1mdW5jdGlvbigpe30saUkuRlNTdHJlYW0ucHJvdG90eXBlPXt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGlJLkZTU3RyZWFtLnByb3RvdHlwZSx7b2JqZWN0OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2RlfSxzZXQ6ZnVuY3Rpb24oQSl7dGhpcy5ub2RlPUF9fSxpc1JlYWQ6e2dldDpmdW5jdGlvbigpe3JldHVybiAxIT0oMjA5NzE1NSZ0aGlzLmZsYWdzKX19LGlzV3JpdGU6e2dldDpmdW5jdGlvbigpe3JldHVybiAwIT0oMjA5NzE1NSZ0aGlzLmZsYWdzKX19LGlzQXBwZW5kOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gMTAyNCZ0aGlzLmZsYWdzfX19KSk7dmFyIEI9bmV3IGlJLkZTU3RyZWFtO2Zvcih2YXIgQyBpbiBBKUJbQ109QVtDXTtBPUI7dmFyIFE9aUkubmV4dGZkKEksZyk7cmV0dXJuIEEuZmQ9USxpSS5zdHJlYW1zW1FdPUEsQX0sY2xvc2VTdHJlYW06ZnVuY3Rpb24oQSl7aUkuc3RyZWFtc1tBXT1udWxsfSxjaHJkZXZfc3RyZWFtX29wczp7b3BlbjpmdW5jdGlvbihBKXt2YXIgST1pSS5nZXREZXZpY2UoQS5ub2RlLnJkZXYpO0Euc3RyZWFtX29wcz1JLnN0cmVhbV9vcHMsQS5zdHJlYW1fb3BzLm9wZW4mJkEuc3RyZWFtX29wcy5vcGVuKEEpfSxsbHNlZWs6ZnVuY3Rpb24oKXt0aHJvdyBuZXcgaUkuRXJybm9FcnJvcig3MCl9fSxtYWpvcjpmdW5jdGlvbihBKXtyZXR1cm4gQT4+OH0sbWlub3I6ZnVuY3Rpb24oQSl7cmV0dXJuIDI1NSZBfSxtYWtlZGV2OmZ1bmN0aW9uKEEsSSl7cmV0dXJuIEE8PDh8SX0scmVnaXN0ZXJEZXZpY2U6ZnVuY3Rpb24oQSxJKXtpSS5kZXZpY2VzW0FdPXtzdHJlYW1fb3BzOkl9fSxnZXREZXZpY2U6ZnVuY3Rpb24oQSl7cmV0dXJuIGlJLmRldmljZXNbQV19LGdldE1vdW50czpmdW5jdGlvbihBKXtmb3IodmFyIEk9W10sZz1bQV07Zy5sZW5ndGg7KXt2YXIgQj1nLnBvcCgpO0kucHVzaChCKSxnLnB1c2guYXBwbHkoZyxCLm1vdW50cyl9cmV0dXJuIEl9LHN5bmNmczpmdW5jdGlvbihBLEkpe1wiZnVuY3Rpb25cIj09dHlwZW9mIEEmJihJPUEsQT0hMSksaUkuc3luY0ZTUmVxdWVzdHMrKyxpSS5zeW5jRlNSZXF1ZXN0cz4xJiZTKFwid2FybmluZzogXCIraUkuc3luY0ZTUmVxdWVzdHMrXCIgRlMuc3luY2ZzIG9wZXJhdGlvbnMgaW4gZmxpZ2h0IGF0IG9uY2UsIHByb2JhYmx5IGp1c3QgZG9pbmcgZXh0cmEgd29ya1wiKTt2YXIgZz1pSS5nZXRNb3VudHMoaUkucm9vdC5tb3VudCksQj0wO2Z1bmN0aW9uIEMoQSl7cmV0dXJuIGlJLnN5bmNGU1JlcXVlc3RzLS0sSShBKX1mdW5jdGlvbiBRKEEpe2lmKEEpcmV0dXJuIFEuZXJyb3JlZD92b2lkIDA6KFEuZXJyb3JlZD0hMCxDKEEpKTsrK0I+PWcubGVuZ3RoJiZDKG51bGwpfWcuZm9yRWFjaCgoZnVuY3Rpb24oSSl7aWYoIUkudHlwZS5zeW5jZnMpcmV0dXJuIFEobnVsbCk7SS50eXBlLnN5bmNmcyhJLEEsUSl9KSl9LG1vdW50OmZ1bmN0aW9uKEEsSSxnKXt2YXIgQixDPVwiL1wiPT09ZyxRPSFnO2lmKEMmJmlJLnJvb3QpdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoMTApO2lmKCFDJiYhUSl7dmFyIEU9aUkubG9va3VwUGF0aChnLHtmb2xsb3dfbW91bnQ6ITF9KTtpZihnPUUucGF0aCxCPUUubm9kZSxpSS5pc01vdW50cG9pbnQoQikpdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoMTApO2lmKCFpSS5pc0RpcihCLm1vZGUpKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDU0KX12YXIgaT17dHlwZTpBLG9wdHM6SSxtb3VudHBvaW50OmcsbW91bnRzOltdfSxvPUEubW91bnQoaSk7cmV0dXJuIG8ubW91bnQ9aSxpLnJvb3Q9byxDP2lJLnJvb3Q9bzpCJiYoQi5tb3VudGVkPWksQi5tb3VudCYmQi5tb3VudC5tb3VudHMucHVzaChpKSksb30sdW5tb3VudDpmdW5jdGlvbihBKXt2YXIgST1pSS5sb29rdXBQYXRoKEEse2ZvbGxvd19tb3VudDohMX0pO2lmKCFpSS5pc01vdW50cG9pbnQoSS5ub2RlKSl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcigyOCk7dmFyIGc9SS5ub2RlLEI9Zy5tb3VudGVkLEM9aUkuZ2V0TW91bnRzKEIpO09iamVjdC5rZXlzKGlJLm5hbWVUYWJsZSkuZm9yRWFjaCgoZnVuY3Rpb24oQSl7Zm9yKHZhciBJPWlJLm5hbWVUYWJsZVtBXTtJOyl7dmFyIGc9SS5uYW1lX25leHQ7LTEhPT1DLmluZGV4T2YoSS5tb3VudCkmJmlJLmRlc3Ryb3lOb2RlKEkpLEk9Z319KSksZy5tb3VudGVkPW51bGw7dmFyIFE9Zy5tb3VudC5tb3VudHMuaW5kZXhPZihCKTtnLm1vdW50Lm1vdW50cy5zcGxpY2UoUSwxKX0sbG9va3VwOmZ1bmN0aW9uKEEsSSl7cmV0dXJuIEEubm9kZV9vcHMubG9va3VwKEEsSSl9LG1rbm9kOmZ1bmN0aW9uKEEsSSxnKXt2YXIgQj1pSS5sb29rdXBQYXRoKEEse3BhcmVudDohMH0pLm5vZGUsQz1CSS5iYXNlbmFtZShBKTtpZighQ3x8XCIuXCI9PT1DfHxcIi4uXCI9PT1DKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDI4KTt2YXIgUT1pSS5tYXlDcmVhdGUoQixDKTtpZihRKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKFEpO2lmKCFCLm5vZGVfb3BzLm1rbm9kKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDYzKTtyZXR1cm4gQi5ub2RlX29wcy5ta25vZChCLEMsSSxnKX0sY3JlYXRlOmZ1bmN0aW9uKEEsSSl7cmV0dXJuIEk9dm9pZCAwIT09ST9JOjQzOCxJJj00MDk1LEl8PTMyNzY4LGlJLm1rbm9kKEEsSSwwKX0sbWtkaXI6ZnVuY3Rpb24oQSxJKXtyZXR1cm4gST12b2lkIDAhPT1JP0k6NTExLEkmPTEwMjMsSXw9MTYzODQsaUkubWtub2QoQSxJLDApfSxta2RpclRyZWU6ZnVuY3Rpb24oQSxJKXtmb3IodmFyIGc9QS5zcGxpdChcIi9cIiksQj1cIlwiLEM9MDtDPGcubGVuZ3RoOysrQylpZihnW0NdKXtCKz1cIi9cIitnW0NdO3RyeXtpSS5ta2RpcihCLEkpfWNhdGNoKEEpe2lmKDIwIT1BLmVycm5vKXRocm93IEF9fX0sbWtkZXY6ZnVuY3Rpb24oQSxJLGcpe3JldHVybiB2b2lkIDA9PT1nJiYoZz1JLEk9NDM4KSxJfD04MTkyLGlJLm1rbm9kKEEsSSxnKX0sc3ltbGluazpmdW5jdGlvbihBLEkpe2lmKCFDSS5yZXNvbHZlKEEpKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDQ0KTt2YXIgZz1pSS5sb29rdXBQYXRoKEkse3BhcmVudDohMH0pLm5vZGU7aWYoIWcpdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoNDQpO3ZhciBCPUJJLmJhc2VuYW1lKEkpLEM9aUkubWF5Q3JlYXRlKGcsQik7aWYoQyl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcihDKTtpZighZy5ub2RlX29wcy5zeW1saW5rKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDYzKTtyZXR1cm4gZy5ub2RlX29wcy5zeW1saW5rKGcsQixBKX0scmVuYW1lOmZ1bmN0aW9uKEEsSSl7dmFyIGcsQixDPUJJLmRpcm5hbWUoQSksUT1CSS5kaXJuYW1lKEkpLEU9QkkuYmFzZW5hbWUoQSksaT1CSS5iYXNlbmFtZShJKTt0cnl7Zz1pSS5sb29rdXBQYXRoKEEse3BhcmVudDohMH0pLm5vZGUsQj1pSS5sb29rdXBQYXRoKEkse3BhcmVudDohMH0pLm5vZGV9Y2F0Y2goQSl7dGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoMTApfWlmKCFnfHwhQil0aHJvdyBuZXcgaUkuRXJybm9FcnJvcig0NCk7aWYoZy5tb3VudCE9PUIubW91bnQpdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoNzUpO3ZhciBvLEQ9aUkubG9va3VwTm9kZShnLEUpLGE9Q0kucmVsYXRpdmUoQSxRKTtpZihcIi5cIiE9PWEuY2hhckF0KDApKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDI4KTtpZihcIi5cIiE9PShhPUNJLnJlbGF0aXZlKEksQykpLmNoYXJBdCgwKSl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcig1NSk7dHJ5e289aUkubG9va3VwTm9kZShCLGkpfWNhdGNoKEEpe31pZihEIT09byl7dmFyIHc9aUkuaXNEaXIoRC5tb2RlKSxGPWlJLm1heURlbGV0ZShnLEUsdyk7aWYoRil0aHJvdyBuZXcgaUkuRXJybm9FcnJvcihGKTtpZihGPW8/aUkubWF5RGVsZXRlKEIsaSx3KTppSS5tYXlDcmVhdGUoQixpKSl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcihGKTtpZighZy5ub2RlX29wcy5yZW5hbWUpdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoNjMpO2lmKGlJLmlzTW91bnRwb2ludChEKXx8byYmaUkuaXNNb3VudHBvaW50KG8pKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDEwKTtpZihCIT09ZyYmKEY9aUkubm9kZVBlcm1pc3Npb25zKGcsXCJ3XCIpKSl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcihGKTt0cnl7aUkudHJhY2tpbmdEZWxlZ2F0ZS53aWxsTW92ZVBhdGgmJmlJLnRyYWNraW5nRGVsZWdhdGUud2lsbE1vdmVQYXRoKEEsSSl9Y2F0Y2goZyl7UyhcIkZTLnRyYWNraW5nRGVsZWdhdGVbJ3dpbGxNb3ZlUGF0aCddKCdcIitBK1wiJywgJ1wiK0krXCInKSB0aHJldyBhbiBleGNlcHRpb246IFwiK2cubWVzc2FnZSl9aUkuaGFzaFJlbW92ZU5vZGUoRCk7dHJ5e2cubm9kZV9vcHMucmVuYW1lKEQsQixpKX1jYXRjaChBKXt0aHJvdyBBfWZpbmFsbHl7aUkuaGFzaEFkZE5vZGUoRCl9dHJ5e2lJLnRyYWNraW5nRGVsZWdhdGUub25Nb3ZlUGF0aCYmaUkudHJhY2tpbmdEZWxlZ2F0ZS5vbk1vdmVQYXRoKEEsSSl9Y2F0Y2goZyl7UyhcIkZTLnRyYWNraW5nRGVsZWdhdGVbJ29uTW92ZVBhdGgnXSgnXCIrQStcIicsICdcIitJK1wiJykgdGhyZXcgYW4gZXhjZXB0aW9uOiBcIitnLm1lc3NhZ2UpfX19LHJtZGlyOmZ1bmN0aW9uKEEpe3ZhciBJPWlJLmxvb2t1cFBhdGgoQSx7cGFyZW50OiEwfSkubm9kZSxnPUJJLmJhc2VuYW1lKEEpLEI9aUkubG9va3VwTm9kZShJLGcpLEM9aUkubWF5RGVsZXRlKEksZywhMCk7aWYoQyl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcihDKTtpZighSS5ub2RlX29wcy5ybWRpcil0aHJvdyBuZXcgaUkuRXJybm9FcnJvcig2Myk7aWYoaUkuaXNNb3VudHBvaW50KEIpKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDEwKTt0cnl7aUkudHJhY2tpbmdEZWxlZ2F0ZS53aWxsRGVsZXRlUGF0aCYmaUkudHJhY2tpbmdEZWxlZ2F0ZS53aWxsRGVsZXRlUGF0aChBKX1jYXRjaChJKXtTKFwiRlMudHJhY2tpbmdEZWxlZ2F0ZVsnd2lsbERlbGV0ZVBhdGgnXSgnXCIrQStcIicpIHRocmV3IGFuIGV4Y2VwdGlvbjogXCIrSS5tZXNzYWdlKX1JLm5vZGVfb3BzLnJtZGlyKEksZyksaUkuZGVzdHJveU5vZGUoQik7dHJ5e2lJLnRyYWNraW5nRGVsZWdhdGUub25EZWxldGVQYXRoJiZpSS50cmFja2luZ0RlbGVnYXRlLm9uRGVsZXRlUGF0aChBKX1jYXRjaChJKXtTKFwiRlMudHJhY2tpbmdEZWxlZ2F0ZVsnb25EZWxldGVQYXRoJ10oJ1wiK0ErXCInKSB0aHJldyBhbiBleGNlcHRpb246IFwiK0kubWVzc2FnZSl9fSxyZWFkZGlyOmZ1bmN0aW9uKEEpe3ZhciBJPWlJLmxvb2t1cFBhdGgoQSx7Zm9sbG93OiEwfSkubm9kZTtpZighSS5ub2RlX29wcy5yZWFkZGlyKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDU0KTtyZXR1cm4gSS5ub2RlX29wcy5yZWFkZGlyKEkpfSx1bmxpbms6ZnVuY3Rpb24oQSl7dmFyIEk9aUkubG9va3VwUGF0aChBLHtwYXJlbnQ6ITB9KS5ub2RlLGc9QkkuYmFzZW5hbWUoQSksQj1pSS5sb29rdXBOb2RlKEksZyksQz1pSS5tYXlEZWxldGUoSSxnLCExKTtpZihDKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKEMpO2lmKCFJLm5vZGVfb3BzLnVubGluayl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcig2Myk7aWYoaUkuaXNNb3VudHBvaW50KEIpKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDEwKTt0cnl7aUkudHJhY2tpbmdEZWxlZ2F0ZS53aWxsRGVsZXRlUGF0aCYmaUkudHJhY2tpbmdEZWxlZ2F0ZS53aWxsRGVsZXRlUGF0aChBKX1jYXRjaChJKXtTKFwiRlMudHJhY2tpbmdEZWxlZ2F0ZVsnd2lsbERlbGV0ZVBhdGgnXSgnXCIrQStcIicpIHRocmV3IGFuIGV4Y2VwdGlvbjogXCIrSS5tZXNzYWdlKX1JLm5vZGVfb3BzLnVubGluayhJLGcpLGlJLmRlc3Ryb3lOb2RlKEIpO3RyeXtpSS50cmFja2luZ0RlbGVnYXRlLm9uRGVsZXRlUGF0aCYmaUkudHJhY2tpbmdEZWxlZ2F0ZS5vbkRlbGV0ZVBhdGgoQSl9Y2F0Y2goSSl7UyhcIkZTLnRyYWNraW5nRGVsZWdhdGVbJ29uRGVsZXRlUGF0aCddKCdcIitBK1wiJykgdGhyZXcgYW4gZXhjZXB0aW9uOiBcIitJLm1lc3NhZ2UpfX0scmVhZGxpbms6ZnVuY3Rpb24oQSl7dmFyIEk9aUkubG9va3VwUGF0aChBKS5ub2RlO2lmKCFJKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDQ0KTtpZighSS5ub2RlX29wcy5yZWFkbGluayl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcigyOCk7cmV0dXJuIENJLnJlc29sdmUoaUkuZ2V0UGF0aChJLnBhcmVudCksSS5ub2RlX29wcy5yZWFkbGluayhJKSl9LHN0YXQ6ZnVuY3Rpb24oQSxJKXt2YXIgZz1pSS5sb29rdXBQYXRoKEEse2ZvbGxvdzohSX0pLm5vZGU7aWYoIWcpdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoNDQpO2lmKCFnLm5vZGVfb3BzLmdldGF0dHIpdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoNjMpO3JldHVybiBnLm5vZGVfb3BzLmdldGF0dHIoZyl9LGxzdGF0OmZ1bmN0aW9uKEEpe3JldHVybiBpSS5zdGF0KEEsITApfSxjaG1vZDpmdW5jdGlvbihBLEksZyl7dmFyIEI7aWYoIShCPVwic3RyaW5nXCI9PXR5cGVvZiBBP2lJLmxvb2t1cFBhdGgoQSx7Zm9sbG93OiFnfSkubm9kZTpBKS5ub2RlX29wcy5zZXRhdHRyKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDYzKTtCLm5vZGVfb3BzLnNldGF0dHIoQix7bW9kZTo0MDk1Jkl8LTQwOTYmQi5tb2RlLHRpbWVzdGFtcDpEYXRlLm5vdygpfSl9LGxjaG1vZDpmdW5jdGlvbihBLEkpe2lJLmNobW9kKEEsSSwhMCl9LGZjaG1vZDpmdW5jdGlvbihBLEkpe3ZhciBnPWlJLmdldFN0cmVhbShBKTtpZighZyl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcig4KTtpSS5jaG1vZChnLm5vZGUsSSl9LGNob3duOmZ1bmN0aW9uKEEsSSxnLEIpe3ZhciBDO2lmKCEoQz1cInN0cmluZ1wiPT10eXBlb2YgQT9pSS5sb29rdXBQYXRoKEEse2ZvbGxvdzohQn0pLm5vZGU6QSkubm9kZV9vcHMuc2V0YXR0cil0aHJvdyBuZXcgaUkuRXJybm9FcnJvcig2Myk7Qy5ub2RlX29wcy5zZXRhdHRyKEMse3RpbWVzdGFtcDpEYXRlLm5vdygpfSl9LGxjaG93bjpmdW5jdGlvbihBLEksZyl7aUkuY2hvd24oQSxJLGcsITApfSxmY2hvd246ZnVuY3Rpb24oQSxJLGcpe3ZhciBCPWlJLmdldFN0cmVhbShBKTtpZighQil0aHJvdyBuZXcgaUkuRXJybm9FcnJvcig4KTtpSS5jaG93bihCLm5vZGUsSSxnKX0sdHJ1bmNhdGU6ZnVuY3Rpb24oQSxJKXtpZihJPDApdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoMjgpO3ZhciBnO2lmKCEoZz1cInN0cmluZ1wiPT10eXBlb2YgQT9pSS5sb29rdXBQYXRoKEEse2ZvbGxvdzohMH0pLm5vZGU6QSkubm9kZV9vcHMuc2V0YXR0cil0aHJvdyBuZXcgaUkuRXJybm9FcnJvcig2Myk7aWYoaUkuaXNEaXIoZy5tb2RlKSl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcigzMSk7aWYoIWlJLmlzRmlsZShnLm1vZGUpKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDI4KTt2YXIgQj1pSS5ub2RlUGVybWlzc2lvbnMoZyxcIndcIik7aWYoQil0aHJvdyBuZXcgaUkuRXJybm9FcnJvcihCKTtnLm5vZGVfb3BzLnNldGF0dHIoZyx7c2l6ZTpJLHRpbWVzdGFtcDpEYXRlLm5vdygpfSl9LGZ0cnVuY2F0ZTpmdW5jdGlvbihBLEkpe3ZhciBnPWlJLmdldFN0cmVhbShBKTtpZighZyl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcig4KTtpZigwPT0oMjA5NzE1NSZnLmZsYWdzKSl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcigyOCk7aUkudHJ1bmNhdGUoZy5ub2RlLEkpfSx1dGltZTpmdW5jdGlvbihBLEksZyl7dmFyIEI9aUkubG9va3VwUGF0aChBLHtmb2xsb3c6ITB9KS5ub2RlO0Iubm9kZV9vcHMuc2V0YXR0cihCLHt0aW1lc3RhbXA6TWF0aC5tYXgoSSxnKX0pfSxvcGVuOmZ1bmN0aW9uKEksZyxCLEMsUSl7aWYoXCJcIj09PUkpdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoNDQpO3ZhciBFO2lmKEI9dm9pZCAwPT09Qj80Mzg6QixCPTY0JihnPVwic3RyaW5nXCI9PXR5cGVvZiBnP2lJLm1vZGVTdHJpbmdUb0ZsYWdzKGcpOmcpPzQwOTUmQnwzMjc2ODowLFwib2JqZWN0XCI9PT1EKEkpKUU9STtlbHNle0k9Qkkubm9ybWFsaXplKEkpO3RyeXtFPWlJLmxvb2t1cFBhdGgoSSx7Zm9sbG93OiEoMTMxMDcyJmcpfSkubm9kZX1jYXRjaChBKXt9fXZhciBpPSExO2lmKDY0JmcpaWYoRSl7aWYoMTI4JmcpdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoMjApfWVsc2UgRT1pSS5ta25vZChJLEIsMCksaT0hMDtpZighRSl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcig0NCk7aWYoaUkuaXNDaHJkZXYoRS5tb2RlKSYmKGcmPS01MTMpLDY1NTM2JmcmJiFpSS5pc0RpcihFLm1vZGUpKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDU0KTtpZighaSl7dmFyIG89aUkubWF5T3BlbihFLGcpO2lmKG8pdGhyb3cgbmV3IGlJLkVycm5vRXJyb3Iobyl9NTEyJmcmJmlJLnRydW5jYXRlKEUsMCksZyY9LTY0MTt2YXIgYT1pSS5jcmVhdGVTdHJlYW0oe25vZGU6RSxwYXRoOmlJLmdldFBhdGgoRSksZmxhZ3M6ZyxzZWVrYWJsZTohMCxwb3NpdGlvbjowLHN0cmVhbV9vcHM6RS5zdHJlYW1fb3BzLHVuZ290dGVuOltdLGVycm9yOiExfSxDLFEpO2Euc3RyZWFtX29wcy5vcGVuJiZhLnN0cmVhbV9vcHMub3BlbihhKSwhQS5sb2dSZWFkRmlsZXN8fDEmZ3x8KGlJLnJlYWRGaWxlc3x8KGlJLnJlYWRGaWxlcz17fSksSSBpbiBpSS5yZWFkRmlsZXN8fChpSS5yZWFkRmlsZXNbSV09MSxTKFwiRlMudHJhY2tpbmdEZWxlZ2F0ZSBlcnJvciBvbiByZWFkIGZpbGU6IFwiK0kpKSk7dHJ5e2lmKGlJLnRyYWNraW5nRGVsZWdhdGUub25PcGVuRmlsZSl7dmFyIHc9MDsxIT0oMjA5NzE1NSZnKSYmKHd8PWlJLnRyYWNraW5nLm9wZW5GbGFncy5SRUFEKSwwIT0oMjA5NzE1NSZnKSYmKHd8PWlJLnRyYWNraW5nLm9wZW5GbGFncy5XUklURSksaUkudHJhY2tpbmdEZWxlZ2F0ZS5vbk9wZW5GaWxlKEksdyl9fWNhdGNoKEEpe1MoXCJGUy50cmFja2luZ0RlbGVnYXRlWydvbk9wZW5GaWxlJ10oJ1wiK0krXCInLCBmbGFncykgdGhyZXcgYW4gZXhjZXB0aW9uOiBcIitBLm1lc3NhZ2UpfXJldHVybiBhfSxjbG9zZTpmdW5jdGlvbihBKXtpZihpSS5pc0Nsb3NlZChBKSl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcig4KTtBLmdldGRlbnRzJiYoQS5nZXRkZW50cz1udWxsKTt0cnl7QS5zdHJlYW1fb3BzLmNsb3NlJiZBLnN0cmVhbV9vcHMuY2xvc2UoQSl9Y2F0Y2goQSl7dGhyb3cgQX1maW5hbGx5e2lJLmNsb3NlU3RyZWFtKEEuZmQpfUEuZmQ9bnVsbH0saXNDbG9zZWQ6ZnVuY3Rpb24oQSl7cmV0dXJuIG51bGw9PT1BLmZkfSxsbHNlZWs6ZnVuY3Rpb24oQSxJLGcpe2lmKGlJLmlzQ2xvc2VkKEEpKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDgpO2lmKCFBLnNlZWthYmxlfHwhQS5zdHJlYW1fb3BzLmxsc2Vlayl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcig3MCk7aWYoMCE9ZyYmMSE9ZyYmMiE9Zyl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcigyOCk7cmV0dXJuIEEucG9zaXRpb249QS5zdHJlYW1fb3BzLmxsc2VlayhBLEksZyksQS51bmdvdHRlbj1bXSxBLnBvc2l0aW9ufSxyZWFkOmZ1bmN0aW9uKEEsSSxnLEIsQyl7aWYoQjwwfHxDPDApdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoMjgpO2lmKGlJLmlzQ2xvc2VkKEEpKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDgpO2lmKDE9PSgyMDk3MTU1JkEuZmxhZ3MpKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDgpO2lmKGlJLmlzRGlyKEEubm9kZS5tb2RlKSl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcigzMSk7aWYoIUEuc3RyZWFtX29wcy5yZWFkKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDI4KTt2YXIgUT12b2lkIDAhPT1DO2lmKFEpe2lmKCFBLnNlZWthYmxlKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDcwKX1lbHNlIEM9QS5wb3NpdGlvbjt2YXIgRT1BLnN0cmVhbV9vcHMucmVhZChBLEksZyxCLEMpO3JldHVybiBRfHwoQS5wb3NpdGlvbis9RSksRX0sd3JpdGU6ZnVuY3Rpb24oQSxJLGcsQixDLFEpe2lmKEI8MHx8QzwwKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDI4KTtpZihpSS5pc0Nsb3NlZChBKSl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcig4KTtpZigwPT0oMjA5NzE1NSZBLmZsYWdzKSl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcig4KTtpZihpSS5pc0RpcihBLm5vZGUubW9kZSkpdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoMzEpO2lmKCFBLnN0cmVhbV9vcHMud3JpdGUpdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoMjgpOzEwMjQmQS5mbGFncyYmaUkubGxzZWVrKEEsMCwyKTt2YXIgRT12b2lkIDAhPT1DO2lmKEUpe2lmKCFBLnNlZWthYmxlKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDcwKX1lbHNlIEM9QS5wb3NpdGlvbjt2YXIgaT1BLnN0cmVhbV9vcHMud3JpdGUoQSxJLGcsQixDLFEpO0V8fChBLnBvc2l0aW9uKz1pKTt0cnl7QS5wYXRoJiZpSS50cmFja2luZ0RlbGVnYXRlLm9uV3JpdGVUb0ZpbGUmJmlJLnRyYWNraW5nRGVsZWdhdGUub25Xcml0ZVRvRmlsZShBLnBhdGgpfWNhdGNoKEkpe1MoXCJGUy50cmFja2luZ0RlbGVnYXRlWydvbldyaXRlVG9GaWxlJ10oJ1wiK0EucGF0aCtcIicpIHRocmV3IGFuIGV4Y2VwdGlvbjogXCIrSS5tZXNzYWdlKX1yZXR1cm4gaX0sYWxsb2NhdGU6ZnVuY3Rpb24oQSxJLGcpe2lmKGlJLmlzQ2xvc2VkKEEpKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDgpO2lmKEk8MHx8Zzw9MCl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcigyOCk7aWYoMD09KDIwOTcxNTUmQS5mbGFncykpdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoOCk7aWYoIWlJLmlzRmlsZShBLm5vZGUubW9kZSkmJiFpSS5pc0RpcihBLm5vZGUubW9kZSkpdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoNDMpO2lmKCFBLnN0cmVhbV9vcHMuYWxsb2NhdGUpdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoMTM4KTtBLnN0cmVhbV9vcHMuYWxsb2NhdGUoQSxJLGcpfSxtbWFwOmZ1bmN0aW9uKEEsSSxnLEIsQyxRLEUpe2lmKDAhPSgyJlEpJiYwPT0oMiZFKSYmMiE9KDIwOTcxNTUmQS5mbGFncykpdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoMik7aWYoMT09KDIwOTcxNTUmQS5mbGFncykpdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoMik7aWYoIUEuc3RyZWFtX29wcy5tbWFwKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDQzKTtyZXR1cm4gQS5zdHJlYW1fb3BzLm1tYXAoQSxJLGcsQixDLFEsRSl9LG1zeW5jOmZ1bmN0aW9uKEEsSSxnLEIsQyl7cmV0dXJuIEEmJkEuc3RyZWFtX29wcy5tc3luYz9BLnN0cmVhbV9vcHMubXN5bmMoQSxJLGcsQixDKTowfSxtdW5tYXA6ZnVuY3Rpb24oQSl7cmV0dXJuIDB9LGlvY3RsOmZ1bmN0aW9uKEEsSSxnKXtpZighQS5zdHJlYW1fb3BzLmlvY3RsKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDU5KTtyZXR1cm4gQS5zdHJlYW1fb3BzLmlvY3RsKEEsSSxnKX0scmVhZEZpbGU6ZnVuY3Rpb24oQSxJKXtpZigoST1JfHx7fSkuZmxhZ3M9SS5mbGFnc3x8XCJyXCIsSS5lbmNvZGluZz1JLmVuY29kaW5nfHxcImJpbmFyeVwiLFwidXRmOFwiIT09SS5lbmNvZGluZyYmXCJiaW5hcnlcIiE9PUkuZW5jb2RpbmcpdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGVuY29kaW5nIHR5cGUgXCInK0kuZW5jb2RpbmcrJ1wiJyk7dmFyIGcsQj1pSS5vcGVuKEEsSS5mbGFncyksQz1pSS5zdGF0KEEpLnNpemUsUT1uZXcgVWludDhBcnJheShDKTtyZXR1cm4gaUkucmVhZChCLFEsMCxDLDApLFwidXRmOFwiPT09SS5lbmNvZGluZz9nPWQoUSwwKTpcImJpbmFyeVwiPT09SS5lbmNvZGluZyYmKGc9USksaUkuY2xvc2UoQiksZ30sd3JpdGVGaWxlOmZ1bmN0aW9uKEEsSSxnKXsoZz1nfHx7fSkuZmxhZ3M9Zy5mbGFnc3x8XCJ3XCI7dmFyIEI9aUkub3BlbihBLGcuZmxhZ3MsZy5tb2RlKTtpZihcInN0cmluZ1wiPT10eXBlb2YgSSl7dmFyIEM9bmV3IFVpbnQ4QXJyYXkoVyhJKSsxKSxRPWwoSSxDLDAsQy5sZW5ndGgpO2lJLndyaXRlKEIsQywwLFEsdm9pZCAwLGcuY2FuT3duKX1lbHNle2lmKCFBcnJheUJ1ZmZlci5pc1ZpZXcoSSkpdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgZGF0YSB0eXBlXCIpO2lJLndyaXRlKEIsSSwwLEkuYnl0ZUxlbmd0aCx2b2lkIDAsZy5jYW5Pd24pfWlJLmNsb3NlKEIpfSxjd2Q6ZnVuY3Rpb24oKXtyZXR1cm4gaUkuY3VycmVudFBhdGh9LGNoZGlyOmZ1bmN0aW9uKEEpe3ZhciBJPWlJLmxvb2t1cFBhdGgoQSx7Zm9sbG93OiEwfSk7aWYobnVsbD09PUkubm9kZSl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcig0NCk7aWYoIWlJLmlzRGlyKEkubm9kZS5tb2RlKSl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcig1NCk7dmFyIGc9aUkubm9kZVBlcm1pc3Npb25zKEkubm9kZSxcInhcIik7aWYoZyl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcihnKTtpSS5jdXJyZW50UGF0aD1JLnBhdGh9LGNyZWF0ZURlZmF1bHREaXJlY3RvcmllczpmdW5jdGlvbigpe2lJLm1rZGlyKFwiL3RtcFwiKSxpSS5ta2RpcihcIi9ob21lXCIpLGlJLm1rZGlyKFwiL2hvbWUvd2ViX3VzZXJcIil9LGNyZWF0ZURlZmF1bHREZXZpY2VzOmZ1bmN0aW9uKCl7dmFyIEE7aWYoaUkubWtkaXIoXCIvZGV2XCIpLGlJLnJlZ2lzdGVyRGV2aWNlKGlJLm1ha2VkZXYoMSwzKSx7cmVhZDpmdW5jdGlvbigpe3JldHVybiAwfSx3cml0ZTpmdW5jdGlvbihBLEksZyxCLEMpe3JldHVybiBCfX0pLGlJLm1rZGV2KFwiL2Rldi9udWxsXCIsaUkubWFrZWRldigxLDMpKSxRSS5yZWdpc3RlcihpSS5tYWtlZGV2KDUsMCksUUkuZGVmYXVsdF90dHlfb3BzKSxRSS5yZWdpc3RlcihpSS5tYWtlZGV2KDYsMCksUUkuZGVmYXVsdF90dHkxX29wcyksaUkubWtkZXYoXCIvZGV2L3R0eVwiLGlJLm1ha2VkZXYoNSwwKSksaUkubWtkZXYoXCIvZGV2L3R0eTFcIixpSS5tYWtlZGV2KDYsMCkpLFwib2JqZWN0XCI9PT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIGNyeXB0bz9cInVuZGVmaW5lZFwiOkQoY3J5cHRvKSkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMpe3ZhciBJPW5ldyBVaW50OEFycmF5KDEpO0E9ZnVuY3Rpb24oKXtyZXR1cm4gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhJKSxJWzBdfX1lbHNlIGlmKHcpdHJ5e3ZhciBCPWcoNjU0KTtBPWZ1bmN0aW9uKCl7cmV0dXJuIEIucmFuZG9tQnl0ZXMoMSlbMF19fWNhdGNoKEEpe31BfHwoQT1mdW5jdGlvbigpe0pBKFwicmFuZG9tX2RldmljZVwiKX0pLGlJLmNyZWF0ZURldmljZShcIi9kZXZcIixcInJhbmRvbVwiLEEpLGlJLmNyZWF0ZURldmljZShcIi9kZXZcIixcInVyYW5kb21cIixBKSxpSS5ta2RpcihcIi9kZXYvc2htXCIpLGlJLm1rZGlyKFwiL2Rldi9zaG0vdG1wXCIpfSxjcmVhdGVTcGVjaWFsRGlyZWN0b3JpZXM6ZnVuY3Rpb24oKXtpSS5ta2RpcihcIi9wcm9jXCIpLGlJLm1rZGlyKFwiL3Byb2Mvc2VsZlwiKSxpSS5ta2RpcihcIi9wcm9jL3NlbGYvZmRcIiksaUkubW91bnQoe21vdW50OmZ1bmN0aW9uKCl7dmFyIEE9aUkuY3JlYXRlTm9kZShcIi9wcm9jL3NlbGZcIixcImZkXCIsMTY4OTUsNzMpO3JldHVybiBBLm5vZGVfb3BzPXtsb29rdXA6ZnVuY3Rpb24oQSxJKXt2YXIgZz0rSSxCPWlJLmdldFN0cmVhbShnKTtpZighQil0aHJvdyBuZXcgaUkuRXJybm9FcnJvcig4KTt2YXIgQz17cGFyZW50Om51bGwsbW91bnQ6e21vdW50cG9pbnQ6XCJmYWtlXCJ9LG5vZGVfb3BzOntyZWFkbGluazpmdW5jdGlvbigpe3JldHVybiBCLnBhdGh9fX07cmV0dXJuIEMucGFyZW50PUMsQ319LEF9fSx7fSxcIi9wcm9jL3NlbGYvZmRcIil9LGNyZWF0ZVN0YW5kYXJkU3RyZWFtczpmdW5jdGlvbigpe0Euc3RkaW4/aUkuY3JlYXRlRGV2aWNlKFwiL2RldlwiLFwic3RkaW5cIixBLnN0ZGluKTppSS5zeW1saW5rKFwiL2Rldi90dHlcIixcIi9kZXYvc3RkaW5cIiksQS5zdGRvdXQ/aUkuY3JlYXRlRGV2aWNlKFwiL2RldlwiLFwic3Rkb3V0XCIsbnVsbCxBLnN0ZG91dCk6aUkuc3ltbGluayhcIi9kZXYvdHR5XCIsXCIvZGV2L3N0ZG91dFwiKSxBLnN0ZGVycj9pSS5jcmVhdGVEZXZpY2UoXCIvZGV2XCIsXCJzdGRlcnJcIixudWxsLEEuc3RkZXJyKTppSS5zeW1saW5rKFwiL2Rldi90dHkxXCIsXCIvZGV2L3N0ZGVyclwiKSxpSS5vcGVuKFwiL2Rldi9zdGRpblwiLFwiclwiKSxpSS5vcGVuKFwiL2Rldi9zdGRvdXRcIixcIndcIiksaUkub3BlbihcIi9kZXYvc3RkZXJyXCIsXCJ3XCIpfSxlbnN1cmVFcnJub0Vycm9yOmZ1bmN0aW9uKCl7aUkuRXJybm9FcnJvcnx8KGlJLkVycm5vRXJyb3I9ZnVuY3Rpb24oQSxJKXt0aGlzLm5vZGU9SSx0aGlzLnNldEVycm5vPWZ1bmN0aW9uKEEpe3RoaXMuZXJybm89QX0sdGhpcy5zZXRFcnJubyhBKSx0aGlzLm1lc3NhZ2U9XCJGUyBlcnJvclwifSxpSS5FcnJub0Vycm9yLnByb3RvdHlwZT1uZXcgRXJyb3IsaUkuRXJybm9FcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3I9aUkuRXJybm9FcnJvcixbNDRdLmZvckVhY2goKGZ1bmN0aW9uKEEpe2lJLmdlbmVyaWNFcnJvcnNbQV09bmV3IGlJLkVycm5vRXJyb3IoQSksaUkuZ2VuZXJpY0Vycm9yc1tBXS5zdGFjaz1cIjxnZW5lcmljIGVycm9yLCBubyBzdGFjaz5cIn0pKSl9LHN0YXRpY0luaXQ6ZnVuY3Rpb24oKXtpSS5lbnN1cmVFcnJub0Vycm9yKCksaUkubmFtZVRhYmxlPW5ldyBBcnJheSg0MDk2KSxpSS5tb3VudChFSSx7fSxcIi9cIiksaUkuY3JlYXRlRGVmYXVsdERpcmVjdG9yaWVzKCksaUkuY3JlYXRlRGVmYXVsdERldmljZXMoKSxpSS5jcmVhdGVTcGVjaWFsRGlyZWN0b3JpZXMoKSxpSS5maWxlc3lzdGVtcz17TUVNRlM6RUl9fSxpbml0OmZ1bmN0aW9uKEksZyxCKXtpSS5pbml0LmluaXRpYWxpemVkPSEwLGlJLmVuc3VyZUVycm5vRXJyb3IoKSxBLnN0ZGluPUl8fEEuc3RkaW4sQS5zdGRvdXQ9Z3x8QS5zdGRvdXQsQS5zdGRlcnI9Qnx8QS5zdGRlcnIsaUkuY3JlYXRlU3RhbmRhcmRTdHJlYW1zKCl9LHF1aXQ6ZnVuY3Rpb24oKXtpSS5pbml0LmluaXRpYWxpemVkPSExO3ZhciBJPUEuX2ZmbHVzaDtJJiZJKDApO2Zvcih2YXIgZz0wO2c8aUkuc3RyZWFtcy5sZW5ndGg7ZysrKXt2YXIgQj1pSS5zdHJlYW1zW2ddO0ImJmlJLmNsb3NlKEIpfX0sZ2V0TW9kZTpmdW5jdGlvbihBLEkpe3ZhciBnPTA7cmV0dXJuIEEmJihnfD0zNjUpLEkmJihnfD0xNDYpLGd9LGpvaW5QYXRoOmZ1bmN0aW9uKEEsSSl7dmFyIGc9Qkkuam9pbi5hcHBseShudWxsLEEpO3JldHVybiBJJiZcIi9cIj09Z1swXSYmKGc9Zy5zdWJzdHIoMSkpLGd9LGFic29sdXRlUGF0aDpmdW5jdGlvbihBLEkpe3JldHVybiBDSS5yZXNvbHZlKEksQSl9LHN0YW5kYXJkaXplUGF0aDpmdW5jdGlvbihBKXtyZXR1cm4gQkkubm9ybWFsaXplKEEpfSxmaW5kT2JqZWN0OmZ1bmN0aW9uKEEsSSl7dmFyIGc9aUkuYW5hbHl6ZVBhdGgoQSxJKTtyZXR1cm4gZy5leGlzdHM/Zy5vYmplY3Q6KElJKGcuZXJyb3IpLG51bGwpfSxhbmFseXplUGF0aDpmdW5jdGlvbihBLEkpe3RyeXtBPShCPWlJLmxvb2t1cFBhdGgoQSx7Zm9sbG93OiFJfSkpLnBhdGh9Y2F0Y2goQSl7fXZhciBnPXtpc1Jvb3Q6ITEsZXhpc3RzOiExLGVycm9yOjAsbmFtZTpudWxsLHBhdGg6bnVsbCxvYmplY3Q6bnVsbCxwYXJlbnRFeGlzdHM6ITEscGFyZW50UGF0aDpudWxsLHBhcmVudE9iamVjdDpudWxsfTt0cnl7dmFyIEI9aUkubG9va3VwUGF0aChBLHtwYXJlbnQ6ITB9KTtnLnBhcmVudEV4aXN0cz0hMCxnLnBhcmVudFBhdGg9Qi5wYXRoLGcucGFyZW50T2JqZWN0PUIubm9kZSxnLm5hbWU9QkkuYmFzZW5hbWUoQSksQj1pSS5sb29rdXBQYXRoKEEse2ZvbGxvdzohSX0pLGcuZXhpc3RzPSEwLGcucGF0aD1CLnBhdGgsZy5vYmplY3Q9Qi5ub2RlLGcubmFtZT1CLm5vZGUubmFtZSxnLmlzUm9vdD1cIi9cIj09PUIucGF0aH1jYXRjaChBKXtnLmVycm9yPUEuZXJybm99cmV0dXJuIGd9LGNyZWF0ZUZvbGRlcjpmdW5jdGlvbihBLEksZyxCKXt2YXIgQz1CSS5qb2luMihcInN0cmluZ1wiPT10eXBlb2YgQT9BOmlJLmdldFBhdGgoQSksSSksUT1pSS5nZXRNb2RlKGcsQik7cmV0dXJuIGlJLm1rZGlyKEMsUSl9LGNyZWF0ZVBhdGg6ZnVuY3Rpb24oQSxJLGcsQil7QT1cInN0cmluZ1wiPT10eXBlb2YgQT9BOmlJLmdldFBhdGgoQSk7Zm9yKHZhciBDPUkuc3BsaXQoXCIvXCIpLnJldmVyc2UoKTtDLmxlbmd0aDspe3ZhciBRPUMucG9wKCk7aWYoUSl7dmFyIEU9Qkkuam9pbjIoQSxRKTt0cnl7aUkubWtkaXIoRSl9Y2F0Y2goQSl7fUE9RX19cmV0dXJuIEV9LGNyZWF0ZUZpbGU6ZnVuY3Rpb24oQSxJLGcsQixDKXt2YXIgUT1CSS5qb2luMihcInN0cmluZ1wiPT10eXBlb2YgQT9BOmlJLmdldFBhdGgoQSksSSksRT1pSS5nZXRNb2RlKEIsQyk7cmV0dXJuIGlJLmNyZWF0ZShRLEUpfSxjcmVhdGVEYXRhRmlsZTpmdW5jdGlvbihBLEksZyxCLEMsUSl7dmFyIEU9ST9CSS5qb2luMihcInN0cmluZ1wiPT10eXBlb2YgQT9BOmlJLmdldFBhdGgoQSksSSk6QSxpPWlJLmdldE1vZGUoQixDKSxvPWlJLmNyZWF0ZShFLGkpO2lmKGcpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBnKXtmb3IodmFyIEQ9bmV3IEFycmF5KGcubGVuZ3RoKSxhPTAsdz1nLmxlbmd0aDthPHc7KythKURbYV09Zy5jaGFyQ29kZUF0KGEpO2c9RH1pSS5jaG1vZChvLDE0NnxpKTt2YXIgRj1pSS5vcGVuKG8sXCJ3XCIpO2lJLndyaXRlKEYsZywwLGcubGVuZ3RoLDAsUSksaUkuY2xvc2UoRiksaUkuY2htb2QobyxpKX1yZXR1cm4gb30sY3JlYXRlRGV2aWNlOmZ1bmN0aW9uKEEsSSxnLEIpe3ZhciBDPUJJLmpvaW4yKFwic3RyaW5nXCI9PXR5cGVvZiBBP0E6aUkuZ2V0UGF0aChBKSxJKSxRPWlJLmdldE1vZGUoISFnLCEhQik7aUkuY3JlYXRlRGV2aWNlLm1ham9yfHwoaUkuY3JlYXRlRGV2aWNlLm1ham9yPTY0KTt2YXIgRT1pSS5tYWtlZGV2KGlJLmNyZWF0ZURldmljZS5tYWpvcisrLDApO3JldHVybiBpSS5yZWdpc3RlckRldmljZShFLHtvcGVuOmZ1bmN0aW9uKEEpe0Euc2Vla2FibGU9ITF9LGNsb3NlOmZ1bmN0aW9uKEEpe0ImJkIuYnVmZmVyJiZCLmJ1ZmZlci5sZW5ndGgmJkIoMTApfSxyZWFkOmZ1bmN0aW9uKEEsSSxCLEMsUSl7Zm9yKHZhciBFPTAsaT0wO2k8QztpKyspe3ZhciBvO3RyeXtvPWcoKX1jYXRjaChBKXt0aHJvdyBuZXcgaUkuRXJybm9FcnJvcigyOSl9aWYodm9pZCAwPT09byYmMD09PUUpdGhyb3cgbmV3IGlJLkVycm5vRXJyb3IoNik7aWYobnVsbD09bylicmVhaztFKyssSVtCK2ldPW99cmV0dXJuIEUmJihBLm5vZGUudGltZXN0YW1wPURhdGUubm93KCkpLEV9LHdyaXRlOmZ1bmN0aW9uKEEsSSxnLEMsUSl7Zm9yKHZhciBFPTA7RTxDO0UrKyl0cnl7QihJW2crRV0pfWNhdGNoKEEpe3Rocm93IG5ldyBpSS5FcnJub0Vycm9yKDI5KX1yZXR1cm4gQyYmKEEubm9kZS50aW1lc3RhbXA9RGF0ZS5ub3coKSksRX19KSxpSS5ta2RldihDLFEsRSl9LGNyZWF0ZUxpbms6ZnVuY3Rpb24oQSxJLGcsQixDKXt2YXIgUT1CSS5qb2luMihcInN0cmluZ1wiPT10eXBlb2YgQT9BOmlJLmdldFBhdGgoQSksSSk7cmV0dXJuIGlJLnN5bWxpbmsoZyxRKX0sZm9yY2VMb2FkRmlsZTpmdW5jdGlvbihBKXtpZihBLmlzRGV2aWNlfHxBLmlzRm9sZGVyfHxBLmxpbmt8fEEuY29udGVudHMpcmV0dXJuITA7dmFyIEk9ITA7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFhNTEh0dHBSZXF1ZXN0KXRocm93IG5ldyBFcnJvcihcIkxhenkgbG9hZGluZyBzaG91bGQgaGF2ZSBiZWVuIHBlcmZvcm1lZCAoY29udGVudHMgc2V0KSBpbiBjcmVhdGVMYXp5RmlsZSwgYnV0IGl0IHdhcyBub3QuIExhenkgbG9hZGluZyBvbmx5IHdvcmtzIGluIHdlYiB3b3JrZXJzLiBVc2UgLS1lbWJlZC1maWxlIG9yIC0tcHJlbG9hZC1maWxlIGluIGVtY2Mgb24gdGhlIG1haW4gdGhyZWFkLlwiKTtpZighRyl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgbG9hZCB3aXRob3V0IHJlYWQoKSBvciBYTUxIdHRwUmVxdWVzdC5cIik7dHJ5e0EuY29udGVudHM9WGcoRyhBLnVybCksITApLEEudXNlZEJ5dGVzPUEuY29udGVudHMubGVuZ3RofWNhdGNoKEEpe0k9ITF9cmV0dXJuIEl8fElJKDI5KSxJfSxjcmVhdGVMYXp5RmlsZTpmdW5jdGlvbihBLEksZyxCLEMpe2Z1bmN0aW9uIFEoKXt0aGlzLmxlbmd0aEtub3duPSExLHRoaXMuY2h1bmtzPVtdfWlmKFEucHJvdG90eXBlLmdldD1mdW5jdGlvbihBKXtpZighKEE+dGhpcy5sZW5ndGgtMXx8QTwwKSl7dmFyIEk9QSV0aGlzLmNodW5rU2l6ZSxnPUEvdGhpcy5jaHVua1NpemV8MDtyZXR1cm4gdGhpcy5nZXR0ZXIoZylbSV19fSxRLnByb3RvdHlwZS5zZXREYXRhR2V0dGVyPWZ1bmN0aW9uKEEpe3RoaXMuZ2V0dGVyPUF9LFEucHJvdG90eXBlLmNhY2hlTGVuZ3RoPWZ1bmN0aW9uKCl7dmFyIEE9bmV3IFhNTEh0dHBSZXF1ZXN0O2lmKEEub3BlbihcIkhFQURcIixnLCExKSxBLnNlbmQobnVsbCksIShBLnN0YXR1cz49MjAwJiZBLnN0YXR1czwzMDB8fDMwND09PUEuc3RhdHVzKSl0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBsb2FkIFwiK2crXCIuIFN0YXR1czogXCIrQS5zdGF0dXMpO3ZhciBJLEI9TnVtYmVyKEEuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LWxlbmd0aFwiKSksQz0oST1BLmdldFJlc3BvbnNlSGVhZGVyKFwiQWNjZXB0LVJhbmdlc1wiKSkmJlwiYnl0ZXNcIj09PUksUT0oST1BLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1FbmNvZGluZ1wiKSkmJlwiZ3ppcFwiPT09SSxFPTEwNDg1NzY7Q3x8KEU9Qik7dmFyIGk9dGhpcztpLnNldERhdGFHZXR0ZXIoKGZ1bmN0aW9uKEEpe3ZhciBJPUEqRSxDPShBKzEpKkUtMTtpZihDPU1hdGgubWluKEMsQi0xKSx2b2lkIDA9PT1pLmNodW5rc1tBXSYmKGkuY2h1bmtzW0FdPWZ1bmN0aW9uKEEsSSl7aWYoQT5JKXRocm93IG5ldyBFcnJvcihcImludmFsaWQgcmFuZ2UgKFwiK0ErXCIsIFwiK0krXCIpIG9yIG5vIGJ5dGVzIHJlcXVlc3RlZCFcIik7aWYoST5CLTEpdGhyb3cgbmV3IEVycm9yKFwib25seSBcIitCK1wiIGJ5dGVzIGF2YWlsYWJsZSEgcHJvZ3JhbW1lciBlcnJvciFcIik7dmFyIEM9bmV3IFhNTEh0dHBSZXF1ZXN0O2lmKEMub3BlbihcIkdFVFwiLGcsITEpLEIhPT1FJiZDLnNldFJlcXVlc3RIZWFkZXIoXCJSYW5nZVwiLFwiYnl0ZXM9XCIrQStcIi1cIitJKSxcInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDhBcnJheSYmKEMucmVzcG9uc2VUeXBlPVwiYXJyYXlidWZmZXJcIiksQy5vdmVycmlkZU1pbWVUeXBlJiZDLm92ZXJyaWRlTWltZVR5cGUoXCJ0ZXh0L3BsYWluOyBjaGFyc2V0PXgtdXNlci1kZWZpbmVkXCIpLEMuc2VuZChudWxsKSwhKEMuc3RhdHVzPj0yMDAmJkMuc3RhdHVzPDMwMHx8MzA0PT09Qy5zdGF0dXMpKXRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGxvYWQgXCIrZytcIi4gU3RhdHVzOiBcIitDLnN0YXR1cyk7cmV0dXJuIHZvaWQgMCE9PUMucmVzcG9uc2U/bmV3IFVpbnQ4QXJyYXkoQy5yZXNwb25zZXx8W10pOlhnKEMucmVzcG9uc2VUZXh0fHxcIlwiLCEwKX0oSSxDKSksdm9pZCAwPT09aS5jaHVua3NbQV0pdGhyb3cgbmV3IEVycm9yKFwiZG9YSFIgZmFpbGVkIVwiKTtyZXR1cm4gaS5jaHVua3NbQV19KSksIVEmJkJ8fChFPUI9MSxCPXRoaXMuZ2V0dGVyKDApLmxlbmd0aCxFPUIsdChcIkxhenlGaWxlcyBvbiBnemlwIGZvcmNlcyBkb3dubG9hZCBvZiB0aGUgd2hvbGUgZmlsZSB3aGVuIGxlbmd0aCBpcyBhY2Nlc3NlZFwiKSksdGhpcy5fbGVuZ3RoPUIsdGhpcy5fY2h1bmtTaXplPUUsdGhpcy5sZW5ndGhLbm93bj0hMH0sXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFhNTEh0dHBSZXF1ZXN0KXtpZighbyl0aHJvd1wiQ2Fubm90IGRvIHN5bmNocm9ub3VzIGJpbmFyeSBYSFJzIG91dHNpZGUgd2Vid29ya2VycyBpbiBtb2Rlcm4gYnJvd3NlcnMuIFVzZSAtLWVtYmVkLWZpbGUgb3IgLS1wcmVsb2FkLWZpbGUgaW4gZW1jY1wiO3ZhciBFPW5ldyBRO09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEUse2xlbmd0aDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubGVuZ3RoS25vd258fHRoaXMuY2FjaGVMZW5ndGgoKSx0aGlzLl9sZW5ndGh9fSxjaHVua1NpemU6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmxlbmd0aEtub3dufHx0aGlzLmNhY2hlTGVuZ3RoKCksdGhpcy5fY2h1bmtTaXplfX19KTt2YXIgaT17aXNEZXZpY2U6ITEsY29udGVudHM6RX19ZWxzZSBpPXtpc0RldmljZTohMSx1cmw6Z307dmFyIEQ9aUkuY3JlYXRlRmlsZShBLEksaSxCLEMpO2kuY29udGVudHM/RC5jb250ZW50cz1pLmNvbnRlbnRzOmkudXJsJiYoRC5jb250ZW50cz1udWxsLEQudXJsPWkudXJsKSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhELHt1c2VkQnl0ZXM6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnRlbnRzLmxlbmd0aH19fSk7dmFyIGE9e307cmV0dXJuIE9iamVjdC5rZXlzKEQuc3RyZWFtX29wcykuZm9yRWFjaCgoZnVuY3Rpb24oQSl7dmFyIEk9RC5zdHJlYW1fb3BzW0FdO2FbQV09ZnVuY3Rpb24oKXtpZighaUkuZm9yY2VMb2FkRmlsZShEKSl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcigyOSk7cmV0dXJuIEkuYXBwbHkobnVsbCxhcmd1bWVudHMpfX0pKSxhLnJlYWQ9ZnVuY3Rpb24oQSxJLGcsQixDKXtpZighaUkuZm9yY2VMb2FkRmlsZShEKSl0aHJvdyBuZXcgaUkuRXJybm9FcnJvcigyOSk7dmFyIFE9QS5ub2RlLmNvbnRlbnRzO2lmKEM+PVEubGVuZ3RoKXJldHVybiAwO3ZhciBFPU1hdGgubWluKFEubGVuZ3RoLUMsQik7aWYoUS5zbGljZSlmb3IodmFyIGk9MDtpPEU7aSsrKUlbZytpXT1RW0MraV07ZWxzZSBmb3IoaT0wO2k8RTtpKyspSVtnK2ldPVEuZ2V0KEMraSk7cmV0dXJuIEV9LEQuc3RyZWFtX29wcz1hLER9LGNyZWF0ZVByZWxvYWRlZEZpbGU6ZnVuY3Rpb24oSSxnLEIsQyxRLEUsaSxvLEQsYSl7QnJvd3Nlci5pbml0KCk7dmFyIHc9Zz9DSS5yZXNvbHZlKEJJLmpvaW4yKEksZykpOkk7ZnVuY3Rpb24gRihCKXtmdW5jdGlvbiBGKEEpe2EmJmEoKSxvfHxpSS5jcmVhdGVEYXRhRmlsZShJLGcsQSxDLFEsRCksRSYmRSgpLGVBKCl9dmFyIEc9ITE7QS5wcmVsb2FkUGx1Z2lucy5mb3JFYWNoKChmdW5jdGlvbihBKXtHfHxBLmNhbkhhbmRsZSh3KSYmKEEuaGFuZGxlKEIsdyxGLChmdW5jdGlvbigpe2kmJmkoKSxlQSgpfSkpLEc9ITApfSkpLEd8fEYoQil9WUEoKSxcInN0cmluZ1wiPT10eXBlb2YgQj9Ccm93c2VyLmFzeW5jTG9hZChCLChmdW5jdGlvbihBKXtGKEEpfSksaSk6RihCKX0saW5kZXhlZERCOmZ1bmN0aW9uKCl7cmV0dXJuIHdpbmRvdy5pbmRleGVkREJ8fHdpbmRvdy5tb3pJbmRleGVkREJ8fHdpbmRvdy53ZWJraXRJbmRleGVkREJ8fHdpbmRvdy5tc0luZGV4ZWREQn0sREJfTkFNRTpmdW5jdGlvbigpe3JldHVyblwiRU1fRlNfXCIrd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lfSxEQl9WRVJTSU9OOjIwLERCX1NUT1JFX05BTUU6XCJGSUxFX0RBVEFcIixzYXZlRmlsZXNUb0RCOmZ1bmN0aW9uKEEsSSxnKXtJPUl8fGZ1bmN0aW9uKCl7fSxnPWd8fGZ1bmN0aW9uKCl7fTt2YXIgQj1pSS5pbmRleGVkREIoKTt0cnl7dmFyIEM9Qi5vcGVuKGlJLkRCX05BTUUoKSxpSS5EQl9WRVJTSU9OKX1jYXRjaChBKXtyZXR1cm4gZyhBKX1DLm9udXBncmFkZW5lZWRlZD1mdW5jdGlvbigpe3QoXCJjcmVhdGluZyBkYlwiKSxDLnJlc3VsdC5jcmVhdGVPYmplY3RTdG9yZShpSS5EQl9TVE9SRV9OQU1FKX0sQy5vbnN1Y2Nlc3M9ZnVuY3Rpb24oKXt2YXIgQj1DLnJlc3VsdC50cmFuc2FjdGlvbihbaUkuREJfU1RPUkVfTkFNRV0sXCJyZWFkd3JpdGVcIiksUT1CLm9iamVjdFN0b3JlKGlJLkRCX1NUT1JFX05BTUUpLEU9MCxpPTAsbz1BLmxlbmd0aDtmdW5jdGlvbiBEKCl7MD09aT9JKCk6ZygpfUEuZm9yRWFjaCgoZnVuY3Rpb24oQSl7dmFyIEk9US5wdXQoaUkuYW5hbHl6ZVBhdGgoQSkub2JqZWN0LmNvbnRlbnRzLEEpO0kub25zdWNjZXNzPWZ1bmN0aW9uKCl7KytFK2k9PW8mJkQoKX0sSS5vbmVycm9yPWZ1bmN0aW9uKCl7aSsrLEUraT09byYmRCgpfX0pKSxCLm9uZXJyb3I9Z30sQy5vbmVycm9yPWd9LGxvYWRGaWxlc0Zyb21EQjpmdW5jdGlvbihBLEksZyl7ST1JfHxmdW5jdGlvbigpe30sZz1nfHxmdW5jdGlvbigpe307dmFyIEI9aUkuaW5kZXhlZERCKCk7dHJ5e3ZhciBDPUIub3BlbihpSS5EQl9OQU1FKCksaUkuREJfVkVSU0lPTil9Y2F0Y2goQSl7cmV0dXJuIGcoQSl9Qy5vbnVwZ3JhZGVuZWVkZWQ9ZyxDLm9uc3VjY2Vzcz1mdW5jdGlvbigpe3ZhciBCPUMucmVzdWx0O3RyeXt2YXIgUT1CLnRyYW5zYWN0aW9uKFtpSS5EQl9TVE9SRV9OQU1FXSxcInJlYWRvbmx5XCIpfWNhdGNoKEEpe3JldHVybiB2b2lkIGcoQSl9dmFyIEU9US5vYmplY3RTdG9yZShpSS5EQl9TVE9SRV9OQU1FKSxpPTAsbz0wLEQ9QS5sZW5ndGg7ZnVuY3Rpb24gYSgpezA9PW8/SSgpOmcoKX1BLmZvckVhY2goKGZ1bmN0aW9uKEEpe3ZhciBJPUUuZ2V0KEEpO0kub25zdWNjZXNzPWZ1bmN0aW9uKCl7aUkuYW5hbHl6ZVBhdGgoQSkuZXhpc3RzJiZpSS51bmxpbmsoQSksaUkuY3JlYXRlRGF0YUZpbGUoQkkuZGlybmFtZShBKSxCSS5iYXNlbmFtZShBKSxJLnJlc3VsdCwhMCwhMCwhMCksKytpK289PUQmJmEoKX0sSS5vbmVycm9yPWZ1bmN0aW9uKCl7bysrLGkrbz09RCYmYSgpfX0pKSxRLm9uZXJyb3I9Z30sQy5vbmVycm9yPWd9fSxvST17REVGQVVMVF9QT0xMTUFTSzo1LG1hcHBpbmdzOnt9LHVtYXNrOjUxMSxjYWxjdWxhdGVBdDpmdW5jdGlvbihBLEkpe2lmKFwiL1wiIT09SVswXSl7dmFyIGc7aWYoLTEwMD09PUEpZz1pSS5jd2QoKTtlbHNle3ZhciBCPWlJLmdldFN0cmVhbShBKTtpZighQil0aHJvdyBuZXcgaUkuRXJybm9FcnJvcig4KTtnPUIucGF0aH1JPUJJLmpvaW4yKGcsSSl9cmV0dXJuIEl9LGRvU3RhdDpmdW5jdGlvbihBLEksZyl7dHJ5e3ZhciBCPUEoSSl9Y2F0Y2goQSl7aWYoQSYmQS5ub2RlJiZCSS5ub3JtYWxpemUoSSkhPT1CSS5ub3JtYWxpemUoaUkuZ2V0UGF0aChBLm5vZGUpKSlyZXR1cm4tNTQ7dGhyb3cgQX1yZXR1cm4gQUFbZz4+Ml09Qi5kZXYsQUFbZys0Pj4yXT0wLEFBW2crOD4+Ml09Qi5pbm8sQUFbZysxMj4+Ml09Qi5tb2RlLEFBW2crMTY+PjJdPUIubmxpbmssQUFbZysyMD4+Ml09Qi51aWQsQUFbZysyND4+Ml09Qi5naWQsQUFbZysyOD4+Ml09Qi5yZGV2LEFBW2crMzI+PjJdPTAsZEE9W0Iuc2l6ZT4+PjAsKHFBPUIuc2l6ZSwrTUEocUEpPj0xP3FBPjA/KDB8ckEoK2NBKHFBLzQyOTQ5NjcyOTYpLDQyOTQ5NjcyOTUpKT4+PjA6fn4rbkEoKHFBLSsofn5xQT4+PjApKS80Mjk0OTY3Mjk2KT4+PjA6MCldLEFBW2crNDA+PjJdPWRBWzBdLEFBW2crNDQ+PjJdPWRBWzFdLEFBW2crNDg+PjJdPTQwOTYsQUFbZys1Mj4+Ml09Qi5ibG9ja3MsQUFbZys1Nj4+Ml09Qi5hdGltZS5nZXRUaW1lKCkvMWUzfDAsQUFbZys2MD4+Ml09MCxBQVtnKzY0Pj4yXT1CLm10aW1lLmdldFRpbWUoKS8xZTN8MCxBQVtnKzY4Pj4yXT0wLEFBW2crNzI+PjJdPUIuY3RpbWUuZ2V0VGltZSgpLzFlM3wwLEFBW2crNzY+PjJdPTAsZEE9W0IuaW5vPj4+MCwocUE9Qi5pbm8sK01BKHFBKT49MT9xQT4wPygwfHJBKCtjQShxQS80Mjk0OTY3Mjk2KSw0Mjk0OTY3Mjk1KSk+Pj4wOn5+K25BKChxQS0rKH5+cUE+Pj4wKSkvNDI5NDk2NzI5Nik+Pj4wOjApXSxBQVtnKzgwPj4yXT1kQVswXSxBQVtnKzg0Pj4yXT1kQVsxXSwwfSxkb01zeW5jOmZ1bmN0aW9uKEEsSSxnLEIsQyl7dmFyIFE9ei5zbGljZShBLEErZyk7aUkubXN5bmMoSSxRLEMsZyxCKX0sZG9Na2RpcjpmdW5jdGlvbihBLEkpe3JldHVyblwiL1wiPT09KEE9Qkkubm9ybWFsaXplKEEpKVtBLmxlbmd0aC0xXSYmKEE9QS5zdWJzdHIoMCxBLmxlbmd0aC0xKSksaUkubWtkaXIoQSxJLDApLDB9LGRvTWtub2Q6ZnVuY3Rpb24oQSxJLGcpe3N3aXRjaCg2MTQ0MCZJKXtjYXNlIDMyNzY4OmNhc2UgODE5MjpjYXNlIDI0NTc2OmNhc2UgNDA5NjpjYXNlIDQ5MTUyOmJyZWFrO2RlZmF1bHQ6cmV0dXJuLTI4fXJldHVybiBpSS5ta25vZChBLEksZyksMH0sZG9SZWFkbGluazpmdW5jdGlvbihBLEksZyl7aWYoZzw9MClyZXR1cm4tMjg7dmFyIEI9aUkucmVhZGxpbmsoQSksQz1NYXRoLm1pbihnLFcoQikpLFE9dltJK0NdO3JldHVybiB1KEIsSSxnKzEpLHZbSStDXT1RLEN9LGRvQWNjZXNzOmZ1bmN0aW9uKEEsSSl7aWYoLTgmSSlyZXR1cm4tMjg7dmFyIGc7aWYoIShnPWlJLmxvb2t1cFBhdGgoQSx7Zm9sbG93OiEwfSkubm9kZSkpcmV0dXJuLTQ0O3ZhciBCPVwiXCI7cmV0dXJuIDQmSSYmKEIrPVwiclwiKSwyJkkmJihCKz1cIndcIiksMSZJJiYoQis9XCJ4XCIpLEImJmlJLm5vZGVQZXJtaXNzaW9ucyhnLEIpPy0yOjB9LGRvRHVwOmZ1bmN0aW9uKEEsSSxnKXt2YXIgQj1pSS5nZXRTdHJlYW0oZyk7cmV0dXJuIEImJmlJLmNsb3NlKEIpLGlJLm9wZW4oQSxJLDAsZyxnKS5mZH0sZG9SZWFkdjpmdW5jdGlvbihBLEksZyxCKXtmb3IodmFyIEM9MCxRPTA7UTxnO1ErKyl7dmFyIEU9QUFbSSs4KlE+PjJdLGk9QUFbSSsoOCpRKzQpPj4yXSxvPWlJLnJlYWQoQSx2LEUsaSxCKTtpZihvPDApcmV0dXJuLTE7aWYoQys9byxvPGkpYnJlYWt9cmV0dXJuIEN9LGRvV3JpdGV2OmZ1bmN0aW9uKEEsSSxnLEIpe2Zvcih2YXIgQz0wLFE9MDtRPGc7USsrKXt2YXIgRT1BQVtJKzgqUT4+Ml0saT1BQVtJKyg4KlErNCk+PjJdLG89aUkud3JpdGUoQSx2LEUsaSxCKTtpZihvPDApcmV0dXJuLTE7Qys9b31yZXR1cm4gQ30sdmFyYXJnczowLGdldDpmdW5jdGlvbihBKXtyZXR1cm4gb0kudmFyYXJncys9NCxBQVtvSS52YXJhcmdzLTQ+PjJdfSxnZXRTdHI6ZnVuY3Rpb24oKXtyZXR1cm4gZihvSS5nZXQoKSl9LGdldFN0cmVhbUZyb21GRDpmdW5jdGlvbihBKXt2b2lkIDA9PT1BJiYoQT1vSS5nZXQoKSk7dmFyIEk9aUkuZ2V0U3RyZWFtKEEpO2lmKCFJKXRocm93IG5ldyBpSS5FcnJub0Vycm9yKDgpO3JldHVybiBJfSxnZXQ2NDpmdW5jdGlvbigpe3ZhciBBPW9JLmdldCgpO3JldHVybiBvSS5nZXQoKSxBfSxnZXRaZXJvOmZ1bmN0aW9uKCl7b0kuZ2V0KCl9fTtmdW5jdGlvbiBESShBLEkpe29JLnZhcmFyZ3M9STt0cnl7dmFyIGc9b0kuZ2V0U3RyZWFtRnJvbUZEKCk7c3dpdGNoKG9JLmdldCgpKXtjYXNlIDA6cmV0dXJuKEI9b0kuZ2V0KCkpPDA/LTI4OmlJLm9wZW4oZy5wYXRoLGcuZmxhZ3MsMCxCKS5mZDtjYXNlIDE6Y2FzZSAyOmNhc2UgMTM6Y2FzZSAxNDpyZXR1cm4gMDtjYXNlIDM6cmV0dXJuIGcuZmxhZ3M7Y2FzZSA0OnZhciBCPW9JLmdldCgpO3JldHVybiBnLmZsYWdzfD1CLDA7Y2FzZSAxMjpyZXR1cm4gQj1vSS5nZXQoKSxfW0IrMD4+MV09MiwwO2RlZmF1bHQ6cmV0dXJuLTI4O2Nhc2UgOTpyZXR1cm4gSUkoMjgpLC0xfX1jYXRjaChBKXtyZXR1cm4gdm9pZCAwIT09aUkmJkEgaW5zdGFuY2VvZiBpSS5FcnJub0Vycm9yfHxKQShBKSwtQS5lcnJub319ZnVuY3Rpb24gYUkoQSxJKXtvSS52YXJhcmdzPUk7dHJ5e3ZhciBnPW9JLmdldFN0cigpLEI9b0kuZ2V0KCksQz1vSS5nZXQoKTtyZXR1cm4gaUkub3BlbihnLEIsQykuZmR9Y2F0Y2goQSl7cmV0dXJuIHZvaWQgMCE9PWlJJiZBIGluc3RhbmNlb2YgaUkuRXJybm9FcnJvcnx8SkEoQSksLUEuZXJybm99fWZ1bmN0aW9uIHdJKEEsSSl7b0kudmFyYXJncz1JO3RyeXt2YXIgZz1vSS5nZXRTdHJlYW1Gcm9tRkQoKSxCPW9JLmdldCgpO3N3aXRjaChCKXtjYXNlIDIxNTA5OmNhc2UgMjE1MDU6Y2FzZSAyMTUxMDpjYXNlIDIxNTExOmNhc2UgMjE1MTI6Y2FzZSAyMTUwNjpjYXNlIDIxNTA3OmNhc2UgMjE1MDg6Y2FzZSAyMTUyMzpjYXNlIDIxNTI0OnJldHVybiBnLnR0eT8wOi01OTtjYXNlIDIxNTE5OmlmKCFnLnR0eSlyZXR1cm4tNTk7dmFyIEM9b0kuZ2V0KCk7cmV0dXJuIEFBW0M+PjJdPTAsMDtjYXNlIDIxNTIwOnJldHVybiBnLnR0eT8tMjg6LTU5O2Nhc2UgMjE1MzE6cmV0dXJuIEM9b0kuZ2V0KCksaUkuaW9jdGwoZyxCLEMpO2RlZmF1bHQ6SkEoXCJiYWQgaW9jdGwgc3lzY2FsbCBcIitCKX19Y2F0Y2goQSl7cmV0dXJuIHZvaWQgMCE9PWlJJiZBIGluc3RhbmNlb2YgaUkuRXJybm9FcnJvcnx8SkEoQSksLUEuZXJybm99fWZ1bmN0aW9uIEZJKEEsSSl7aWYoLTE9PT1BfHwwPT09SSlyZXR1cm4tMjg7dmFyIGc9b0kubWFwcGluZ3NbQV07aWYoIWcpcmV0dXJuIDA7aWYoST09PWcubGVuKXt2YXIgQj1pSS5nZXRTdHJlYW0oZy5mZCk7b0kuZG9Nc3luYyhBLEIsSSxnLmZsYWdzLGcub2Zmc2V0KSxpSS5tdW5tYXAoQiksb0kubWFwcGluZ3NbQV09bnVsbCxnLmFsbG9jYXRlZCYmc0IoZy5tYWxsb2MpfXJldHVybiAwfWZ1bmN0aW9uIEdJKEEsSSl7b0kudmFyYXJncz1JO3RyeXtyZXR1cm4gRkkob0kuZ2V0KCksb0kuZ2V0KCkpfWNhdGNoKEEpe3JldHVybiB2b2lkIDAhPT1pSSYmQSBpbnN0YW5jZW9mIGlJLkVycm5vRXJyb3J8fEpBKEEpLC1BLmVycm5vfX1mdW5jdGlvbiBoSSgpe31mdW5jdGlvbiBzSShBKXt0cnl7dmFyIEk9b0kuZ2V0U3RyZWFtRnJvbUZEKEEpO3JldHVybiBpSS5jbG9zZShJKSwwfWNhdGNoKEEpe3JldHVybiB2b2lkIDAhPT1pSSYmQSBpbnN0YW5jZW9mIGlJLkVycm5vRXJyb3J8fEpBKEEpLEEuZXJybm99fWZ1bmN0aW9uIFJJKCl7cmV0dXJuIHNJLmFwcGx5KG51bGwsYXJndW1lbnRzKX1mdW5jdGlvbiBVSShBLEksZyxCKXt0cnl7dmFyIEM9b0kuZ2V0U3RyZWFtRnJvbUZEKEEpLFE9b0kuZG9SZWFkdihDLEksZyk7cmV0dXJuIEFBW0I+PjJdPVEsMH1jYXRjaChBKXtyZXR1cm4gdm9pZCAwIT09aUkmJkEgaW5zdGFuY2VvZiBpSS5FcnJub0Vycm9yfHxKQShBKSxBLmVycm5vfX1mdW5jdGlvbiB5SSgpe3JldHVybiBVSS5hcHBseShudWxsLGFyZ3VtZW50cyl9ZnVuY3Rpb24gdEkoQSxJLGcsQixDKXt0cnl7dmFyIFE9b0kuZ2V0U3RyZWFtRnJvbUZEKEEpLEU9NDI5NDk2NzI5NipnKyhJPj4+MCksaT05MDA3MTk5MjU0NzQwOTkyO3JldHVybiBFPD0taXx8RT49aT8tNjE6KGlJLmxsc2VlayhRLEUsQiksZEE9W1EucG9zaXRpb24+Pj4wLChxQT1RLnBvc2l0aW9uLCtNQShxQSk+PTE/cUE+MD8oMHxyQSgrY0EocUEvNDI5NDk2NzI5NiksNDI5NDk2NzI5NSkpPj4+MDp+fituQSgocUEtKyh+fnFBPj4+MCkpLzQyOTQ5NjcyOTYpPj4+MDowKV0sQUFbQz4+Ml09ZEFbMF0sQUFbQys0Pj4yXT1kQVsxXSxRLmdldGRlbnRzJiYwPT09RSYmMD09PUImJihRLmdldGRlbnRzPW51bGwpLDApfWNhdGNoKEEpe3JldHVybiB2b2lkIDAhPT1pSSYmQSBpbnN0YW5jZW9mIGlJLkVycm5vRXJyb3J8fEpBKEEpLEEuZXJybm99fWZ1bmN0aW9uIFNJKCl7cmV0dXJuIHRJLmFwcGx5KG51bGwsYXJndW1lbnRzKX1mdW5jdGlvbiBNSShBLEksZyxCKXt0cnl7dmFyIEM9b0kuZ2V0U3RyZWFtRnJvbUZEKEEpLFE9b0kuZG9Xcml0ZXYoQyxJLGcpO3JldHVybiBBQVtCPj4yXT1RLDB9Y2F0Y2goQSl7cmV0dXJuIHZvaWQgMCE9PWlJJiZBIGluc3RhbmNlb2YgaUkuRXJybm9FcnJvcnx8SkEoQSksQS5lcnJub319ZnVuY3Rpb24gbkkoKXtyZXR1cm4gTUkuYXBwbHkobnVsbCxhcmd1bWVudHMpfWZ1bmN0aW9uIGNJKEEpe3N3aXRjaChBKXtjYXNlIDE6cmV0dXJuIDA7Y2FzZSAyOnJldHVybiAxO2Nhc2UgNDpyZXR1cm4gMjtjYXNlIDg6cmV0dXJuIDM7ZGVmYXVsdDp0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biB0eXBlIHNpemU6IFwiK0EpfX1mdW5jdGlvbiBySSgpe2Zvcih2YXIgQT1uZXcgQXJyYXkoMjU2KSxJPTA7STwyNTY7KytJKUFbSV09U3RyaW5nLmZyb21DaGFyQ29kZShJKTtrST1BfXZhciBrST12b2lkIDA7ZnVuY3Rpb24gS0koQSl7Zm9yKHZhciBJPVwiXCIsZz1BO3pbZ107KUkrPWtJW3pbZysrXV07cmV0dXJuIEl9dmFyIE5JPXt9LFlJPXt9LGVJPXt9LEpJPTQ4LEhJPTU3O2Z1bmN0aW9uIExJKEEpe2lmKHZvaWQgMD09PUEpcmV0dXJuXCJfdW5rbm93blwiO3ZhciBJPShBPUEucmVwbGFjZSgvW15hLXpBLVowLTlfXS9nLFwiJFwiKSkuY2hhckNvZGVBdCgwKTtyZXR1cm4gST49SkkmJkk8PUhJP1wiX1wiK0E6QX1mdW5jdGlvbiBxSShBLEkpe3JldHVybiBBPUxJKEEpLG5ldyBGdW5jdGlvbihcImJvZHlcIixcInJldHVybiBmdW5jdGlvbiBcIitBKycoKSB7XFxuICAgIFwidXNlIHN0cmljdFwiOyAgICByZXR1cm4gYm9keS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcbn07XFxuJykoSSl9ZnVuY3Rpb24gZEkoQSxJKXt2YXIgZz1xSShJLChmdW5jdGlvbihBKXt0aGlzLm5hbWU9SSx0aGlzLm1lc3NhZ2U9QTt2YXIgZz1uZXcgRXJyb3IoQSkuc3RhY2s7dm9pZCAwIT09ZyYmKHRoaXMuc3RhY2s9dGhpcy50b1N0cmluZygpK1wiXFxuXCIrZy5yZXBsYWNlKC9eRXJyb3IoOlteXFxuXSopP1xcbi8sXCJcIikpfSkpO3JldHVybiBnLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEEucHJvdG90eXBlKSxnLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1nLGcucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMD09PXRoaXMubWVzc2FnZT90aGlzLm5hbWU6dGhpcy5uYW1lK1wiOiBcIit0aGlzLm1lc3NhZ2V9LGd9dmFyIGZJPXZvaWQgMDtmdW5jdGlvbiBsSShBKXt0aHJvdyBuZXcgZkkoQSl9dmFyIHVJPXZvaWQgMDtmdW5jdGlvbiBXSShBKXt0aHJvdyBuZXcgdUkoQSl9ZnVuY3Rpb24gcEkoQSxJLGcpe2Z1bmN0aW9uIEIoSSl7dmFyIEI9ZyhJKTtCLmxlbmd0aCE9PUEubGVuZ3RoJiZXSShcIk1pc21hdGNoZWQgdHlwZSBjb252ZXJ0ZXIgY291bnRcIik7Zm9yKHZhciBDPTA7QzxBLmxlbmd0aDsrK0MpWkkoQVtDXSxCW0NdKX1BLmZvckVhY2goKGZ1bmN0aW9uKEEpe2VJW0FdPUl9KSk7dmFyIEM9bmV3IEFycmF5KEkubGVuZ3RoKSxRPVtdLEU9MDtJLmZvckVhY2goKGZ1bmN0aW9uKEEsSSl7WUkuaGFzT3duUHJvcGVydHkoQSk/Q1tJXT1ZSVtBXTooUS5wdXNoKEEpLE5JLmhhc093blByb3BlcnR5KEEpfHwoTklbQV09W10pLE5JW0FdLnB1c2goKGZ1bmN0aW9uKCl7Q1tJXT1ZSVtBXSwrK0U9PT1RLmxlbmd0aCYmQihDKX0pKSl9KSksMD09PVEubGVuZ3RoJiZCKEMpfWZ1bmN0aW9uIFpJKEEsSSxnKXtpZihnPWd8fHt9LCEoXCJhcmdQYWNrQWR2YW5jZVwiaW4gSSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcInJlZ2lzdGVyVHlwZSByZWdpc3RlcmVkSW5zdGFuY2UgcmVxdWlyZXMgYXJnUGFja0FkdmFuY2VcIik7dmFyIEI9SS5uYW1lO2lmKEF8fGxJKCd0eXBlIFwiJytCKydcIiBtdXN0IGhhdmUgYSBwb3NpdGl2ZSBpbnRlZ2VyIHR5cGVpZCBwb2ludGVyJyksWUkuaGFzT3duUHJvcGVydHkoQSkpe2lmKGcuaWdub3JlRHVwbGljYXRlUmVnaXN0cmF0aW9ucylyZXR1cm47bEkoXCJDYW5ub3QgcmVnaXN0ZXIgdHlwZSAnXCIrQitcIicgdHdpY2VcIil9aWYoWUlbQV09SSxkZWxldGUgZUlbQV0sTkkuaGFzT3duUHJvcGVydHkoQSkpe3ZhciBDPU5JW0FdO2RlbGV0ZSBOSVtBXSxDLmZvckVhY2goKGZ1bmN0aW9uKEEpe0EoKX0pKX19ZnVuY3Rpb24gYkkoQSxJLGcsQixDKXt2YXIgUT1jSShnKTtaSShBLHtuYW1lOkk9S0koSSksZnJvbVdpcmVUeXBlOmZ1bmN0aW9uKEEpe3JldHVybiEhQX0sdG9XaXJlVHlwZTpmdW5jdGlvbihBLEkpe3JldHVybiBJP0I6Q30sYXJnUGFja0FkdmFuY2U6OCxyZWFkVmFsdWVGcm9tUG9pbnRlcjpmdW5jdGlvbihBKXt2YXIgQjtpZigxPT09ZylCPXY7ZWxzZSBpZigyPT09ZylCPV87ZWxzZXtpZig0IT09Zyl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biBib29sZWFuIHR5cGUgc2l6ZTogXCIrSSk7Qj1BQX1yZXR1cm4gdGhpcy5mcm9tV2lyZVR5cGUoQltBPj5RXSl9LGRlc3RydWN0b3JGdW5jdGlvbjpudWxsfSl9ZnVuY3Rpb24geEkoSSxnLEIpe0k9S0koSSkscEkoW10sW2ddLChmdW5jdGlvbihnKXtyZXR1cm4gZz1nWzBdLEFbSV09Zy5mcm9tV2lyZVR5cGUoQiksW119KSl9dmFyIG1JPVtdLFhJPVt7fSx7dmFsdWU6dm9pZCAwfSx7dmFsdWU6bnVsbH0se3ZhbHVlOiEwfSx7dmFsdWU6ITF9XTtmdW5jdGlvbiBWSShBKXtBPjQmJjA9PS0tWElbQV0ucmVmY291bnQmJihYSVtBXT12b2lkIDAsbUkucHVzaChBKSl9ZnVuY3Rpb24gT0koKXtmb3IodmFyIEE9MCxJPTU7STxYSS5sZW5ndGg7KytJKXZvaWQgMCE9PVhJW0ldJiYrK0E7cmV0dXJuIEF9ZnVuY3Rpb24gVEkoKXtmb3IodmFyIEE9NTtBPFhJLmxlbmd0aDsrK0EpaWYodm9pZCAwIT09WElbQV0pcmV0dXJuIFhJW0FdO3JldHVybiBudWxsfWZ1bmN0aW9uIGpJKCl7QS5jb3VudF9lbXZhbF9oYW5kbGVzPU9JLEEuZ2V0X2ZpcnN0X2VtdmFsPVRJfWZ1bmN0aW9uIFBJKEEpe3N3aXRjaChBKXtjYXNlIHZvaWQgMDpyZXR1cm4gMTtjYXNlIG51bGw6cmV0dXJuIDI7Y2FzZSEwOnJldHVybiAzO2Nhc2UhMTpyZXR1cm4gNDtkZWZhdWx0OnZhciBJPW1JLmxlbmd0aD9tSS5wb3AoKTpYSS5sZW5ndGg7cmV0dXJuIFhJW0ldPXtyZWZjb3VudDoxLHZhbHVlOkF9LEl9fWZ1bmN0aW9uIHZJKEEpe3JldHVybiB0aGlzLmZyb21XaXJlVHlwZShJQVtBPj4yXSl9ZnVuY3Rpb24gekkoQSxJKXtaSShBLHtuYW1lOkk9S0koSSksZnJvbVdpcmVUeXBlOmZ1bmN0aW9uKEEpe3ZhciBJPVhJW0FdLnZhbHVlO3JldHVybiBWSShBKSxJfSx0b1dpcmVUeXBlOmZ1bmN0aW9uKEEsSSl7cmV0dXJuIFBJKEkpfSxhcmdQYWNrQWR2YW5jZTo4LHJlYWRWYWx1ZUZyb21Qb2ludGVyOnZJLGRlc3RydWN0b3JGdW5jdGlvbjpudWxsfSl9ZnVuY3Rpb24gX0koQSl7aWYobnVsbD09PUEpcmV0dXJuXCJudWxsXCI7dmFyIEk9RChBKTtyZXR1cm5cIm9iamVjdFwiPT09SXx8XCJhcnJheVwiPT09SXx8XCJmdW5jdGlvblwiPT09ST9BLnRvU3RyaW5nKCk6XCJcIitBfWZ1bmN0aW9uICRJKEEsSSl7c3dpdGNoKEkpe2Nhc2UgMjpyZXR1cm4gZnVuY3Rpb24oQSl7cmV0dXJuIHRoaXMuZnJvbVdpcmVUeXBlKGdBW0E+PjJdKX07Y2FzZSAzOnJldHVybiBmdW5jdGlvbihBKXtyZXR1cm4gdGhpcy5mcm9tV2lyZVR5cGUoQkFbQT4+M10pfTtkZWZhdWx0OnRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGZsb2F0IHR5cGU6IFwiK0EpfX1mdW5jdGlvbiBBZyhBLEksZyl7dmFyIEI9Y0koZyk7WkkoQSx7bmFtZTpJPUtJKEkpLGZyb21XaXJlVHlwZTpmdW5jdGlvbihBKXtyZXR1cm4gQX0sdG9XaXJlVHlwZTpmdW5jdGlvbihBLEkpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiBJJiZcImJvb2xlYW5cIiE9dHlwZW9mIEkpdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgXCInK19JKEkpKydcIiB0byAnK3RoaXMubmFtZSk7cmV0dXJuIEl9LGFyZ1BhY2tBZHZhbmNlOjgscmVhZFZhbHVlRnJvbVBvaW50ZXI6JEkoSSxCKSxkZXN0cnVjdG9yRnVuY3Rpb246bnVsbH0pfWZ1bmN0aW9uIElnKEEsSSl7aWYoIShBIGluc3RhbmNlb2YgRnVuY3Rpb24pKXRocm93IG5ldyBUeXBlRXJyb3IoXCJuZXdfIGNhbGxlZCB3aXRoIGNvbnN0cnVjdG9yIHR5cGUgXCIrRChBKStcIiB3aGljaCBpcyBub3QgYSBmdW5jdGlvblwiKTt2YXIgZz1xSShBLm5hbWV8fFwidW5rbm93bkZ1bmN0aW9uTmFtZVwiLChmdW5jdGlvbigpe30pKTtnLnByb3RvdHlwZT1BLnByb3RvdHlwZTt2YXIgQj1uZXcgZyxDPUEuYXBwbHkoQixJKTtyZXR1cm4gQyBpbnN0YW5jZW9mIE9iamVjdD9DOkJ9ZnVuY3Rpb24gZ2coQSl7Zm9yKDtBLmxlbmd0aDspe3ZhciBJPUEucG9wKCk7QS5wb3AoKShJKX19ZnVuY3Rpb24gQmcoQSxJLGcsQixDKXt2YXIgUT1JLmxlbmd0aDtRPDImJmxJKFwiYXJnVHlwZXMgYXJyYXkgc2l6ZSBtaXNtYXRjaCEgTXVzdCBhdCBsZWFzdCBnZXQgcmV0dXJuIHZhbHVlIGFuZCAndGhpcycgdHlwZXMhXCIpO2Zvcih2YXIgRT1udWxsIT09SVsxXSYmbnVsbCE9PWcsaT0hMSxvPTE7bzxJLmxlbmd0aDsrK28paWYobnVsbCE9PUlbb10mJnZvaWQgMD09PUlbb10uZGVzdHJ1Y3RvckZ1bmN0aW9uKXtpPSEwO2JyZWFrfXZhciBEPVwidm9pZFwiIT09SVswXS5uYW1lLGE9XCJcIix3PVwiXCI7Zm9yKG89MDtvPFEtMjsrK28pYSs9KDAhPT1vP1wiLCBcIjpcIlwiKStcImFyZ1wiK28sdys9KDAhPT1vP1wiLCBcIjpcIlwiKStcImFyZ1wiK28rXCJXaXJlZFwiO3ZhciBGPVwicmV0dXJuIGZ1bmN0aW9uIFwiK0xJKEEpK1wiKFwiK2ErXCIpIHtcXG5pZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gXCIrKFEtMikrXCIpIHtcXG50aHJvd0JpbmRpbmdFcnJvcignZnVuY3Rpb24gXCIrQStcIiBjYWxsZWQgd2l0aCAnICsgYXJndW1lbnRzLmxlbmd0aCArICcgYXJndW1lbnRzLCBleHBlY3RlZCBcIisoUS0yKStcIiBhcmdzIScpO1xcbn1cXG5cIjtpJiYoRis9XCJ2YXIgZGVzdHJ1Y3RvcnMgPSBbXTtcXG5cIik7dmFyIEc9aT9cImRlc3RydWN0b3JzXCI6XCJudWxsXCIsaD1bXCJ0aHJvd0JpbmRpbmdFcnJvclwiLFwiaW52b2tlclwiLFwiZm5cIixcInJ1bkRlc3RydWN0b3JzXCIsXCJyZXRUeXBlXCIsXCJjbGFzc1BhcmFtXCJdLHM9W2xJLEIsQyxnZyxJWzBdLElbMV1dO2ZvcihFJiYoRis9XCJ2YXIgdGhpc1dpcmVkID0gY2xhc3NQYXJhbS50b1dpcmVUeXBlKFwiK0crXCIsIHRoaXMpO1xcblwiKSxvPTA7bzxRLTI7KytvKUYrPVwidmFyIGFyZ1wiK28rXCJXaXJlZCA9IGFyZ1R5cGVcIitvK1wiLnRvV2lyZVR5cGUoXCIrRytcIiwgYXJnXCIrbytcIik7IC8vIFwiK0lbbysyXS5uYW1lK1wiXFxuXCIsaC5wdXNoKFwiYXJnVHlwZVwiK28pLHMucHVzaChJW28rMl0pO2lmKEUmJih3PVwidGhpc1dpcmVkXCIrKHcubGVuZ3RoPjA/XCIsIFwiOlwiXCIpK3cpLEYrPShEP1widmFyIHJ2ID0gXCI6XCJcIikrXCJpbnZva2VyKGZuXCIrKHcubGVuZ3RoPjA/XCIsIFwiOlwiXCIpK3crXCIpO1xcblwiLGkpRis9XCJydW5EZXN0cnVjdG9ycyhkZXN0cnVjdG9ycyk7XFxuXCI7ZWxzZSBmb3Iobz1FPzE6MjtvPEkubGVuZ3RoOysrbyl7dmFyIFI9MT09PW8/XCJ0aGlzV2lyZWRcIjpcImFyZ1wiKyhvLTIpK1wiV2lyZWRcIjtudWxsIT09SVtvXS5kZXN0cnVjdG9yRnVuY3Rpb24mJihGKz1SK1wiX2R0b3IoXCIrUitcIik7IC8vIFwiK0lbb10ubmFtZStcIlxcblwiLGgucHVzaChSK1wiX2R0b3JcIikscy5wdXNoKElbb10uZGVzdHJ1Y3RvckZ1bmN0aW9uKSl9cmV0dXJuIEQmJihGKz1cInZhciByZXQgPSByZXRUeXBlLmZyb21XaXJlVHlwZShydik7XFxucmV0dXJuIHJldDtcXG5cIiksRis9XCJ9XFxuXCIsaC5wdXNoKEYpLElnKEZ1bmN0aW9uLGgpLmFwcGx5KG51bGwscyl9ZnVuY3Rpb24gQ2coQSxJLGcpe2lmKHZvaWQgMD09PUFbSV0ub3ZlcmxvYWRUYWJsZSl7dmFyIEI9QVtJXTtBW0ldPWZ1bmN0aW9uKCl7cmV0dXJuIEFbSV0ub3ZlcmxvYWRUYWJsZS5oYXNPd25Qcm9wZXJ0eShhcmd1bWVudHMubGVuZ3RoKXx8bEkoXCJGdW5jdGlvbiAnXCIrZytcIicgY2FsbGVkIHdpdGggYW4gaW52YWxpZCBudW1iZXIgb2YgYXJndW1lbnRzIChcIithcmd1bWVudHMubGVuZ3RoK1wiKSAtIGV4cGVjdHMgb25lIG9mIChcIitBW0ldLm92ZXJsb2FkVGFibGUrXCIpIVwiKSxBW0ldLm92ZXJsb2FkVGFibGVbYXJndW1lbnRzLmxlbmd0aF0uYXBwbHkodGhpcyxhcmd1bWVudHMpfSxBW0ldLm92ZXJsb2FkVGFibGU9W10sQVtJXS5vdmVybG9hZFRhYmxlW0IuYXJnQ291bnRdPUJ9fWZ1bmN0aW9uIFFnKEksZyxCKXtBLmhhc093blByb3BlcnR5KEkpPygodm9pZCAwPT09Qnx8dm9pZCAwIT09QVtJXS5vdmVybG9hZFRhYmxlJiZ2b2lkIDAhPT1BW0ldLm92ZXJsb2FkVGFibGVbQl0pJiZsSShcIkNhbm5vdCByZWdpc3RlciBwdWJsaWMgbmFtZSAnXCIrSStcIicgdHdpY2VcIiksQ2coQSxJLEkpLEEuaGFzT3duUHJvcGVydHkoQikmJmxJKFwiQ2Fubm90IHJlZ2lzdGVyIG11bHRpcGxlIG92ZXJsb2FkcyBvZiBhIGZ1bmN0aW9uIHdpdGggdGhlIHNhbWUgbnVtYmVyIG9mIGFyZ3VtZW50cyAoXCIrQitcIikhXCIpLEFbSV0ub3ZlcmxvYWRUYWJsZVtCXT1nKTooQVtJXT1nLHZvaWQgMCE9PUImJihBW0ldLm51bUFyZ3VtZW50cz1CKSl9ZnVuY3Rpb24gRWcoQSxJKXtmb3IodmFyIGc9W10sQj0wO0I8QTtCKyspZy5wdXNoKEFBWyhJPj4yKStCXSk7cmV0dXJuIGd9ZnVuY3Rpb24gaWcoSSxnLEIpe0EuaGFzT3duUHJvcGVydHkoSSl8fFdJKFwiUmVwbGFjaW5nIG5vbmV4aXN0YW50IHB1YmxpYyBzeW1ib2xcIiksdm9pZCAwIT09QVtJXS5vdmVybG9hZFRhYmxlJiZ2b2lkIDAhPT1CP0FbSV0ub3ZlcmxvYWRUYWJsZVtCXT1nOihBW0ldPWcsQVtJXS5hcmdDb3VudD1CKX1mdW5jdGlvbiBvZyhJLGcpe3ZhciBCO2lmKEk9S0koSSksdm9pZCAwIT09QVtcIkZVTkNUSU9OX1RBQkxFX1wiK0ldKUI9QVtcIkZVTkNUSU9OX1RBQkxFX1wiK0ldW2ddO2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEZVTkNUSU9OX1RBQkxFKUI9RlVOQ1RJT05fVEFCTEVbZ107ZWxzZXt2YXIgQz1BW1wiZHluQ2FsbF9cIitJXTt2b2lkIDA9PT1DJiZ2b2lkIDA9PT0oQz1BW1wiZHluQ2FsbF9cIitJLnJlcGxhY2UoL2YvZyxcImRcIildKSYmbEkoXCJObyBkeW5DYWxsIGludm9rZXIgZm9yIHNpZ25hdHVyZTogXCIrSSksQj1mdW5jdGlvbihBKXtmb3IodmFyIEI9W10sQz0xO0M8SS5sZW5ndGg7KytDKUIucHVzaChcImFcIitDKTt2YXIgUT1cInJldHVybiBmdW5jdGlvbiBkeW5DYWxsX1wiK0krXCJfXCIrZytcIihcIitCLmpvaW4oXCIsIFwiKStcIikge1xcblwiO3JldHVybiBRKz1cIiAgICByZXR1cm4gZHluQ2FsbChyYXdGdW5jdGlvblwiKyhCLmxlbmd0aD9cIiwgXCI6XCJcIikrQi5qb2luKFwiLCBcIikrXCIpO1xcblwiLFErPVwifTtcXG5cIixuZXcgRnVuY3Rpb24oXCJkeW5DYWxsXCIsXCJyYXdGdW5jdGlvblwiLFEpKEEsZyl9KEMpfXJldHVyblwiZnVuY3Rpb25cIiE9dHlwZW9mIEImJmxJKFwidW5rbm93biBmdW5jdGlvbiBwb2ludGVyIHdpdGggc2lnbmF0dXJlIFwiK0krXCI6IFwiK2cpLEJ9dmFyIERnPXZvaWQgMDtmdW5jdGlvbiBhZyhBKXt2YXIgST13QihBKSxnPUtJKEkpO3JldHVybiBzQihJKSxnfWZ1bmN0aW9uIHdnKEEsSSl7dmFyIGc9W10sQj17fTt0aHJvdyBJLmZvckVhY2goKGZ1bmN0aW9uIEEoSSl7QltJXXx8WUlbSV18fChlSVtJXT9lSVtJXS5mb3JFYWNoKEEpOihnLnB1c2goSSksQltJXT0hMCkpfSkpLG5ldyBEZyhBK1wiOiBcIitnLm1hcChhZykuam9pbihbXCIsIFwiXSkpfWZ1bmN0aW9uIEZnKEEsSSxnLEIsQyxRKXt2YXIgRT1FZyhJLGcpO0E9S0koQSksQz1vZyhCLEMpLFFnKEEsKGZ1bmN0aW9uKCl7d2coXCJDYW5ub3QgY2FsbCBcIitBK1wiIGR1ZSB0byB1bmJvdW5kIHR5cGVzXCIsRSl9KSxJLTEpLHBJKFtdLEUsKGZ1bmN0aW9uKGcpe3ZhciBCPVtnWzBdLG51bGxdLmNvbmNhdChnLnNsaWNlKDEpKTtyZXR1cm4gaWcoQSxCZyhBLEIsbnVsbCxDLFEpLEktMSksW119KSl9ZnVuY3Rpb24gR2coQSxJLGcpe3N3aXRjaChJKXtjYXNlIDA6cmV0dXJuIGc/ZnVuY3Rpb24oQSl7cmV0dXJuIHZbQV19OmZ1bmN0aW9uKEEpe3JldHVybiB6W0FdfTtjYXNlIDE6cmV0dXJuIGc/ZnVuY3Rpb24oQSl7cmV0dXJuIF9bQT4+MV19OmZ1bmN0aW9uKEEpe3JldHVybiAkW0E+PjFdfTtjYXNlIDI6cmV0dXJuIGc/ZnVuY3Rpb24oQSl7cmV0dXJuIEFBW0E+PjJdfTpmdW5jdGlvbihBKXtyZXR1cm4gSUFbQT4+Ml19O2RlZmF1bHQ6dGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gaW50ZWdlciB0eXBlOiBcIitBKX19ZnVuY3Rpb24gaGcoQSxJLGcsQixDKXtJPUtJKEkpLC0xPT09QyYmKEM9NDI5NDk2NzI5NSk7dmFyIFE9Y0koZyksRT1mdW5jdGlvbihBKXtyZXR1cm4gQX07aWYoMD09PUIpe3ZhciBpPTMyLTgqZztFPWZ1bmN0aW9uKEEpe3JldHVybiBBPDxpPj4+aX19dmFyIG89LTEhPUkuaW5kZXhPZihcInVuc2lnbmVkXCIpO1pJKEEse25hbWU6SSxmcm9tV2lyZVR5cGU6RSx0b1dpcmVUeXBlOmZ1bmN0aW9uKEEsZyl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGcmJlwiYm9vbGVhblwiIT10eXBlb2YgZyl0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBcIicrX0koZykrJ1wiIHRvICcrdGhpcy5uYW1lKTtpZihnPEJ8fGc+Qyl0aHJvdyBuZXcgVHlwZUVycm9yKCdQYXNzaW5nIGEgbnVtYmVyIFwiJytfSShnKSsnXCIgZnJvbSBKUyBzaWRlIHRvIEMvQysrIHNpZGUgdG8gYW4gYXJndW1lbnQgb2YgdHlwZSBcIicrSSsnXCIsIHdoaWNoIGlzIG91dHNpZGUgdGhlIHZhbGlkIHJhbmdlIFsnK0IrXCIsIFwiK0MrXCJdIVwiKTtyZXR1cm4gbz9nPj4+MDowfGd9LGFyZ1BhY2tBZHZhbmNlOjgscmVhZFZhbHVlRnJvbVBvaW50ZXI6R2coSSxRLDAhPT1CKSxkZXN0cnVjdG9yRnVuY3Rpb246bnVsbH0pfWZ1bmN0aW9uIHNnKEEsSSxnKXt2YXIgQj1bSW50OEFycmF5LFVpbnQ4QXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXldW0ldO2Z1bmN0aW9uIEMoQSl7dmFyIEk9SUEsZz1JW0E+Pj0yXSxDPUlbQSsxXTtyZXR1cm4gbmV3IEIoSS5idWZmZXIsQyxnKX1aSShBLHtuYW1lOmc9S0koZyksZnJvbVdpcmVUeXBlOkMsYXJnUGFja0FkdmFuY2U6OCxyZWFkVmFsdWVGcm9tUG9pbnRlcjpDfSx7aWdub3JlRHVwbGljYXRlUmVnaXN0cmF0aW9uczohMH0pfWZ1bmN0aW9uIFJnKEEsSSl7dmFyIGc9XCJzdGQ6OnN0cmluZ1wiPT09KEk9S0koSSkpO1pJKEEse25hbWU6SSxmcm9tV2lyZVR5cGU6ZnVuY3Rpb24oQSl7dmFyIEksQj1JQVtBPj4yXTtpZihnKXt2YXIgQz16W0ErNCtCXSxRPTA7MCE9QyYmKFE9Qyx6W0ErNCtCXT0wKTtmb3IodmFyIEU9QSs0LGk9MDtpPD1COysraSl7dmFyIG89QSs0K2k7aWYoMD09eltvXSl7dmFyIEQ9ZihFKTt2b2lkIDA9PT1JP0k9RDooSSs9U3RyaW5nLmZyb21DaGFyQ29kZSgwKSxJKz1EKSxFPW8rMX19MCE9USYmKHpbQSs0K0JdPVEpfWVsc2V7dmFyIGE9bmV3IEFycmF5KEIpO2ZvcihpPTA7aTxCOysraSlhW2ldPVN0cmluZy5mcm9tQ2hhckNvZGUoeltBKzQraV0pO0k9YS5qb2luKFwiXCIpfXJldHVybiBzQihBKSxJfSx0b1dpcmVUeXBlOmZ1bmN0aW9uKEEsSSl7SSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyJiYoST1uZXcgVWludDhBcnJheShJKSk7dmFyIEI9XCJzdHJpbmdcIj09dHlwZW9mIEk7Qnx8SSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXl8fEkgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheXx8SSBpbnN0YW5jZW9mIEludDhBcnJheXx8bEkoXCJDYW5ub3QgcGFzcyBub24tc3RyaW5nIHRvIHN0ZDo6c3RyaW5nXCIpO3ZhciBDPShnJiZCP2Z1bmN0aW9uKCl7cmV0dXJuIFcoSSl9OmZ1bmN0aW9uKCl7cmV0dXJuIEkubGVuZ3RofSkoKSxRPVJCKDQrQysxKTtpZihJQVtRPj4yXT1DLGcmJkIpdShJLFErNCxDKzEpO2Vsc2UgaWYoQilmb3IodmFyIEU9MDtFPEM7KytFKXt2YXIgaT1JLmNoYXJDb2RlQXQoRSk7aT4yNTUmJihzQihRKSxsSShcIlN0cmluZyBoYXMgVVRGLTE2IGNvZGUgdW5pdHMgdGhhdCBkbyBub3QgZml0IGluIDggYml0c1wiKSkseltRKzQrRV09aX1lbHNlIGZvcihFPTA7RTxDOysrRSl6W1ErNCtFXT1JW0VdO3JldHVybiBudWxsIT09QSYmQS5wdXNoKHNCLFEpLFF9LGFyZ1BhY2tBZHZhbmNlOjgscmVhZFZhbHVlRnJvbVBvaW50ZXI6dkksZGVzdHJ1Y3RvckZ1bmN0aW9uOmZ1bmN0aW9uKEEpe3NCKEEpfX0pfWZ1bmN0aW9uIFVnKEEsSSxnKXt2YXIgQixDLFEsRSxpO2c9S0koZyksMj09PUk/KEI9WixDPWIsRT14LFE9ZnVuY3Rpb24oKXtyZXR1cm4gJH0saT0xKTo0PT09SSYmKEI9bSxDPVgsRT1WLFE9ZnVuY3Rpb24oKXtyZXR1cm4gSUF9LGk9MiksWkkoQSx7bmFtZTpnLGZyb21XaXJlVHlwZTpmdW5jdGlvbihBKXt2YXIgZyxDPUlBW0E+PjJdLEU9USgpLG89RVtBKzQrQypJPj5pXSxEPTA7MCE9byYmKEQ9byxFW0ErNCtDKkk+PmldPTApO2Zvcih2YXIgYT1BKzQsdz0wO3c8PUM7Kyt3KXt2YXIgRj1BKzQrdypJO2lmKDA9PUVbRj4+aV0pe3ZhciBHPUIoYSk7dm9pZCAwPT09Zz9nPUc6KGcrPVN0cmluZy5mcm9tQ2hhckNvZGUoMCksZys9RyksYT1GK0l9fXJldHVybiAwIT1EJiYoRVtBKzQrQypJPj5pXT1EKSxzQihBKSxnfSx0b1dpcmVUeXBlOmZ1bmN0aW9uKEEsQil7XCJzdHJpbmdcIiE9dHlwZW9mIEImJmxJKFwiQ2Fubm90IHBhc3Mgbm9uLXN0cmluZyB0byBDKysgc3RyaW5nIHR5cGUgXCIrZyk7dmFyIFE9RShCKSxvPVJCKDQrUStJKTtyZXR1cm4gSUFbbz4+Ml09UT4+aSxDKEIsbys0LFErSSksbnVsbCE9PUEmJkEucHVzaChzQixvKSxvfSxhcmdQYWNrQWR2YW5jZTo4LHJlYWRWYWx1ZUZyb21Qb2ludGVyOnZJLGRlc3RydWN0b3JGdW5jdGlvbjpmdW5jdGlvbihBKXtzQihBKX19KX1mdW5jdGlvbiB5ZyhBLEkpe1pJKEEse2lzVm9pZDohMCxuYW1lOkk9S0koSSksYXJnUGFja0FkdmFuY2U6MCxmcm9tV2lyZVR5cGU6ZnVuY3Rpb24oKXt9LHRvV2lyZVR5cGU6ZnVuY3Rpb24oQSxJKXt9fSl9ZnVuY3Rpb24gdGcoKXtKQSgpfWZ1bmN0aW9uIFNnKCl7cmV0dXJuIHoubGVuZ3RofWZ1bmN0aW9uIE1nKEEpe0pBKFwiT09NXCIpfWZ1bmN0aW9uIG5nKEEpe01nKCl9ZnVuY3Rpb24gY2coQSl7ZUIoQSl9ZnVuY3Rpb24gcmcoQSl7cmV0dXJuIDA9PT1BPzA6KEE9ZihBKSxqQS5oYXNPd25Qcm9wZXJ0eShBKT8ocmcucmV0JiZzQihyZy5yZXQpLHJnLnJldD1PKGpBW0FdKSxyZy5yZXQpOjApfWZ1bmN0aW9uIGtnKEEpe3ZhciBJPURhdGUubm93KCk7cmV0dXJuIEFBW0E+PjJdPUkvMWUzfDAsQUFbQSs0Pj4yXT1JJTFlMyoxZTN8MCwwfWZ1bmN0aW9uIEtnKEEpe3JldHVybiBNYXRoLnBvdygyLEEpfWZ1bmN0aW9uIE5nKEEpe3ZhciBJPVlnLGc9SS5MTFZNX1NBVkVEU1RBQ0tTW0FdO0kuTExWTV9TQVZFRFNUQUNLUy5zcGxpY2UoQSwxKSx5QihnKX1mdW5jdGlvbiBZZygpe3ZhciBBPVlnO3JldHVybiBBLkxMVk1fU0FWRURTVEFDS1N8fChBLkxMVk1fU0FWRURTVEFDS1M9W10pLEEuTExWTV9TQVZFRFNUQUNLUy5wdXNoKHRCKCkpLEEuTExWTV9TQVZFRFNUQUNLUy5sZW5ndGgtMX12YXIgZWc9NjExMzY7ZnVuY3Rpb24gSmcoKXtpZighSmcuY2FsbGVkKXtKZy5jYWxsZWQ9ITAsQUFbR0IoKT4+Ml09NjAqKG5ldyBEYXRlKS5nZXRUaW1lem9uZU9mZnNldCgpO3ZhciBBPShuZXcgRGF0ZSkuZ2V0RnVsbFllYXIoKSxJPW5ldyBEYXRlKEEsMCwxKSxnPW5ldyBEYXRlKEEsNiwxKTtBQVtGQigpPj4yXT1OdW1iZXIoSS5nZXRUaW1lem9uZU9mZnNldCgpIT1nLmdldFRpbWV6b25lT2Zmc2V0KCkpO3ZhciBCPWkoSSksQz1pKGcpLFE9TyhCKSxFPU8oQyk7Zy5nZXRUaW1lem9uZU9mZnNldCgpPEkuZ2V0VGltZXpvbmVPZmZzZXQoKT8oQUFbaEIoKT4+Ml09USxBQVtoQigpKzQ+PjJdPUUpOihBQVtoQigpPj4yXT1FLEFBW2hCKCkrND4+Ml09USl9ZnVuY3Rpb24gaShBKXt2YXIgST1BLnRvVGltZVN0cmluZygpLm1hdGNoKC9cXCgoW0EtWmEteiBdKylcXCkkLyk7cmV0dXJuIEk/SVsxXTpcIkdNVFwifX1mdW5jdGlvbiBIZyhBLEkpe0pnKCk7dmFyIGc9bmV3IERhdGUoMWUzKkFBW0E+PjJdKTtBQVtJPj4yXT1nLmdldFNlY29uZHMoKSxBQVtJKzQ+PjJdPWcuZ2V0TWludXRlcygpLEFBW0krOD4+Ml09Zy5nZXRIb3VycygpLEFBW0krMTI+PjJdPWcuZ2V0RGF0ZSgpLEFBW0krMTY+PjJdPWcuZ2V0TW9udGgoKSxBQVtJKzIwPj4yXT1nLmdldEZ1bGxZZWFyKCktMTkwMCxBQVtJKzI0Pj4yXT1nLmdldERheSgpO3ZhciBCPW5ldyBEYXRlKGcuZ2V0RnVsbFllYXIoKSwwLDEpLEM9KGcuZ2V0VGltZSgpLUIuZ2V0VGltZSgpKS84NjRlNXwwO0FBW0krMjg+PjJdPUMsQUFbSSszNj4+Ml09LTYwKmcuZ2V0VGltZXpvbmVPZmZzZXQoKTt2YXIgUT1uZXcgRGF0ZShnLmdldEZ1bGxZZWFyKCksNiwxKS5nZXRUaW1lem9uZU9mZnNldCgpLEU9Qi5nZXRUaW1lem9uZU9mZnNldCgpLGk9MHwoUSE9RSYmZy5nZXRUaW1lem9uZU9mZnNldCgpPT1NYXRoLm1pbihFLFEpKTtBQVtJKzMyPj4yXT1pO3ZhciBvPUFBW2hCKCkrKGk/NDowKT4+Ml07cmV0dXJuIEFBW0krNDA+PjJdPW8sSX1mdW5jdGlvbiBMZyhBKXtyZXR1cm4gSGcoQSxlZyl9ZnVuY3Rpb24gcWcoQSxJKXt0aHJvdyBVQihBLEl8fDEpLFwibG9uZ2ptcFwifWZ1bmN0aW9uIGRnKEEsSSxnKXt6LnNldCh6LnN1YmFycmF5KEksSStnKSxBKX1mdW5jdGlvbiBmZyhBKXtyZXR1cm4gQSU0PT0wJiYoQSUxMDAhPTB8fEElNDAwPT0wKX1mdW5jdGlvbiBsZyhBLEkpe2Zvcih2YXIgZz0wLEI9MDtCPD1JO2crPUFbQisrXSk7cmV0dXJuIGd9dShcIkdNVFwiLDYxMTg0LDQpO3ZhciB1Zz1bMzEsMjksMzEsMzAsMzEsMzAsMzEsMzEsMzAsMzEsMzAsMzFdLFdnPVszMSwyOCwzMSwzMCwzMSwzMCwzMSwzMSwzMCwzMSwzMCwzMV07ZnVuY3Rpb24gcGcoQSxJKXtmb3IodmFyIGc9bmV3IERhdGUoQS5nZXRUaW1lKCkpO0k+MDspe3ZhciBCPWZnKGcuZ2V0RnVsbFllYXIoKSksQz1nLmdldE1vbnRoKCksUT0oQj91ZzpXZylbQ107aWYoIShJPlEtZy5nZXREYXRlKCkpKXJldHVybiBnLnNldERhdGUoZy5nZXREYXRlKCkrSSksZztJLT1RLWcuZ2V0RGF0ZSgpKzEsZy5zZXREYXRlKDEpLEM8MTE/Zy5zZXRNb250aChDKzEpOihnLnNldE1vbnRoKDApLGcuc2V0RnVsbFllYXIoZy5nZXRGdWxsWWVhcigpKzEpKX1yZXR1cm4gZ31mdW5jdGlvbiBaZyhBLEksZyxCKXt2YXIgQz1BQVtCKzQwPj4yXSxRPXt0bV9zZWM6QUFbQj4+Ml0sdG1fbWluOkFBW0IrND4+Ml0sdG1faG91cjpBQVtCKzg+PjJdLHRtX21kYXk6QUFbQisxMj4+Ml0sdG1fbW9uOkFBW0IrMTY+PjJdLHRtX3llYXI6QUFbQisyMD4+Ml0sdG1fd2RheTpBQVtCKzI0Pj4yXSx0bV95ZGF5OkFBW0IrMjg+PjJdLHRtX2lzZHN0OkFBW0IrMzI+PjJdLHRtX2dtdG9mZjpBQVtCKzM2Pj4yXSx0bV96b25lOkM/ZihDKTpcIlwifSxFPWYoZyksaT17XCIlY1wiOlwiJWEgJWIgJWQgJUg6JU06JVMgJVlcIixcIiVEXCI6XCIlbS8lZC8leVwiLFwiJUZcIjpcIiVZLSVtLSVkXCIsXCIlaFwiOlwiJWJcIixcIiVyXCI6XCIlSTolTTolUyAlcFwiLFwiJVJcIjpcIiVIOiVNXCIsXCIlVFwiOlwiJUg6JU06JVNcIixcIiV4XCI6XCIlbS8lZC8leVwiLFwiJVhcIjpcIiVIOiVNOiVTXCIsXCIlRWNcIjpcIiVjXCIsXCIlRUNcIjpcIiVDXCIsXCIlRXhcIjpcIiVtLyVkLyV5XCIsXCIlRVhcIjpcIiVIOiVNOiVTXCIsXCIlRXlcIjpcIiV5XCIsXCIlRVlcIjpcIiVZXCIsXCIlT2RcIjpcIiVkXCIsXCIlT2VcIjpcIiVlXCIsXCIlT0hcIjpcIiVIXCIsXCIlT0lcIjpcIiVJXCIsXCIlT21cIjpcIiVtXCIsXCIlT01cIjpcIiVNXCIsXCIlT1NcIjpcIiVTXCIsXCIlT3VcIjpcIiV1XCIsXCIlT1VcIjpcIiVVXCIsXCIlT1ZcIjpcIiVWXCIsXCIlT3dcIjpcIiV3XCIsXCIlT1dcIjpcIiVXXCIsXCIlT3lcIjpcIiV5XCJ9O2Zvcih2YXIgbyBpbiBpKUU9RS5yZXBsYWNlKG5ldyBSZWdFeHAobyxcImdcIiksaVtvXSk7dmFyIEQ9W1wiU3VuZGF5XCIsXCJNb25kYXlcIixcIlR1ZXNkYXlcIixcIldlZG5lc2RheVwiLFwiVGh1cnNkYXlcIixcIkZyaWRheVwiLFwiU2F0dXJkYXlcIl0sYT1bXCJKYW51YXJ5XCIsXCJGZWJydWFyeVwiLFwiTWFyY2hcIixcIkFwcmlsXCIsXCJNYXlcIixcIkp1bmVcIixcIkp1bHlcIixcIkF1Z3VzdFwiLFwiU2VwdGVtYmVyXCIsXCJPY3RvYmVyXCIsXCJOb3ZlbWJlclwiLFwiRGVjZW1iZXJcIl07ZnVuY3Rpb24gdyhBLEksZyl7Zm9yKHZhciBCPVwibnVtYmVyXCI9PXR5cGVvZiBBP0EudG9TdHJpbmcoKTpBfHxcIlwiO0IubGVuZ3RoPEk7KUI9Z1swXStCO3JldHVybiBCfWZ1bmN0aW9uIEYoQSxJKXtyZXR1cm4gdyhBLEksXCIwXCIpfWZ1bmN0aW9uIEcoQSxJKXtmdW5jdGlvbiBnKEEpe3JldHVybiBBPDA/LTE6QT4wPzE6MH12YXIgQjtyZXR1cm4gMD09PShCPWcoQS5nZXRGdWxsWWVhcigpLUkuZ2V0RnVsbFllYXIoKSkpJiYwPT09KEI9ZyhBLmdldE1vbnRoKCktSS5nZXRNb250aCgpKSkmJihCPWcoQS5nZXREYXRlKCktSS5nZXREYXRlKCkpKSxCfWZ1bmN0aW9uIGgoQSl7c3dpdGNoKEEuZ2V0RGF5KCkpe2Nhc2UgMDpyZXR1cm4gbmV3IERhdGUoQS5nZXRGdWxsWWVhcigpLTEsMTEsMjkpO2Nhc2UgMTpyZXR1cm4gQTtjYXNlIDI6cmV0dXJuIG5ldyBEYXRlKEEuZ2V0RnVsbFllYXIoKSwwLDMpO2Nhc2UgMzpyZXR1cm4gbmV3IERhdGUoQS5nZXRGdWxsWWVhcigpLDAsMik7Y2FzZSA0OnJldHVybiBuZXcgRGF0ZShBLmdldEZ1bGxZZWFyKCksMCwxKTtjYXNlIDU6cmV0dXJuIG5ldyBEYXRlKEEuZ2V0RnVsbFllYXIoKS0xLDExLDMxKTtjYXNlIDY6cmV0dXJuIG5ldyBEYXRlKEEuZ2V0RnVsbFllYXIoKS0xLDExLDMwKX19ZnVuY3Rpb24gcyhBKXt2YXIgST1wZyhuZXcgRGF0ZShBLnRtX3llYXIrMTkwMCwwLDEpLEEudG1feWRheSksZz1uZXcgRGF0ZShJLmdldEZ1bGxZZWFyKCksMCw0KSxCPW5ldyBEYXRlKEkuZ2V0RnVsbFllYXIoKSsxLDAsNCksQz1oKGcpLFE9aChCKTtyZXR1cm4gRyhDLEkpPD0wP0coUSxJKTw9MD9JLmdldEZ1bGxZZWFyKCkrMTpJLmdldEZ1bGxZZWFyKCk6SS5nZXRGdWxsWWVhcigpLTF9dmFyIFI9e1wiJWFcIjpmdW5jdGlvbihBKXtyZXR1cm4gRFtBLnRtX3dkYXldLnN1YnN0cmluZygwLDMpfSxcIiVBXCI6ZnVuY3Rpb24oQSl7cmV0dXJuIERbQS50bV93ZGF5XX0sXCIlYlwiOmZ1bmN0aW9uKEEpe3JldHVybiBhW0EudG1fbW9uXS5zdWJzdHJpbmcoMCwzKX0sXCIlQlwiOmZ1bmN0aW9uKEEpe3JldHVybiBhW0EudG1fbW9uXX0sXCIlQ1wiOmZ1bmN0aW9uKEEpe3JldHVybiBGKChBLnRtX3llYXIrMTkwMCkvMTAwfDAsMil9LFwiJWRcIjpmdW5jdGlvbihBKXtyZXR1cm4gRihBLnRtX21kYXksMil9LFwiJWVcIjpmdW5jdGlvbihBKXtyZXR1cm4gdyhBLnRtX21kYXksMixcIiBcIil9LFwiJWdcIjpmdW5jdGlvbihBKXtyZXR1cm4gcyhBKS50b1N0cmluZygpLnN1YnN0cmluZygyKX0sXCIlR1wiOmZ1bmN0aW9uKEEpe3JldHVybiBzKEEpfSxcIiVIXCI6ZnVuY3Rpb24oQSl7cmV0dXJuIEYoQS50bV9ob3VyLDIpfSxcIiVJXCI6ZnVuY3Rpb24oQSl7dmFyIEk9QS50bV9ob3VyO3JldHVybiAwPT1JP0k9MTI6ST4xMiYmKEktPTEyKSxGKEksMil9LFwiJWpcIjpmdW5jdGlvbihBKXtyZXR1cm4gRihBLnRtX21kYXkrbGcoZmcoQS50bV95ZWFyKzE5MDApP3VnOldnLEEudG1fbW9uLTEpLDMpfSxcIiVtXCI6ZnVuY3Rpb24oQSl7cmV0dXJuIEYoQS50bV9tb24rMSwyKX0sXCIlTVwiOmZ1bmN0aW9uKEEpe3JldHVybiBGKEEudG1fbWluLDIpfSxcIiVuXCI6ZnVuY3Rpb24oKXtyZXR1cm5cIlxcblwifSxcIiVwXCI6ZnVuY3Rpb24oQSl7cmV0dXJuIEEudG1faG91cj49MCYmQS50bV9ob3VyPDEyP1wiQU1cIjpcIlBNXCJ9LFwiJVNcIjpmdW5jdGlvbihBKXtyZXR1cm4gRihBLnRtX3NlYywyKX0sXCIldFwiOmZ1bmN0aW9uKCl7cmV0dXJuXCJcXHRcIn0sXCIldVwiOmZ1bmN0aW9uKEEpe3JldHVybiBBLnRtX3dkYXl8fDd9LFwiJVVcIjpmdW5jdGlvbihBKXt2YXIgST1uZXcgRGF0ZShBLnRtX3llYXIrMTkwMCwwLDEpLGc9MD09PUkuZ2V0RGF5KCk/STpwZyhJLDctSS5nZXREYXkoKSksQj1uZXcgRGF0ZShBLnRtX3llYXIrMTkwMCxBLnRtX21vbixBLnRtX21kYXkpO2lmKEcoZyxCKTwwKXt2YXIgQz1sZyhmZyhCLmdldEZ1bGxZZWFyKCkpP3VnOldnLEIuZ2V0TW9udGgoKS0xKS0zMSxRPTMxLWcuZ2V0RGF0ZSgpK0MrQi5nZXREYXRlKCk7cmV0dXJuIEYoTWF0aC5jZWlsKFEvNyksMil9cmV0dXJuIDA9PT1HKGcsSSk/XCIwMVwiOlwiMDBcIn0sXCIlVlwiOmZ1bmN0aW9uKEEpe3ZhciBJLGc9bmV3IERhdGUoQS50bV95ZWFyKzE5MDAsMCw0KSxCPW5ldyBEYXRlKEEudG1feWVhcisxOTAxLDAsNCksQz1oKGcpLFE9aChCKSxFPXBnKG5ldyBEYXRlKEEudG1feWVhcisxOTAwLDAsMSksQS50bV95ZGF5KTtyZXR1cm4gRyhFLEMpPDA/XCI1M1wiOkcoUSxFKTw9MD9cIjAxXCI6KEk9Qy5nZXRGdWxsWWVhcigpPEEudG1feWVhcisxOTAwP0EudG1feWRheSszMi1DLmdldERhdGUoKTpBLnRtX3lkYXkrMS1DLmdldERhdGUoKSxGKE1hdGguY2VpbChJLzcpLDIpKX0sXCIld1wiOmZ1bmN0aW9uKEEpe3JldHVybiBBLnRtX3dkYXl9LFwiJVdcIjpmdW5jdGlvbihBKXt2YXIgST1uZXcgRGF0ZShBLnRtX3llYXIsMCwxKSxnPTE9PT1JLmdldERheSgpP0k6cGcoSSwwPT09SS5nZXREYXkoKT8xOjctSS5nZXREYXkoKSsxKSxCPW5ldyBEYXRlKEEudG1feWVhcisxOTAwLEEudG1fbW9uLEEudG1fbWRheSk7aWYoRyhnLEIpPDApe3ZhciBDPWxnKGZnKEIuZ2V0RnVsbFllYXIoKSk/dWc6V2csQi5nZXRNb250aCgpLTEpLTMxLFE9MzEtZy5nZXREYXRlKCkrQytCLmdldERhdGUoKTtyZXR1cm4gRihNYXRoLmNlaWwoUS83KSwyKX1yZXR1cm4gMD09PUcoZyxJKT9cIjAxXCI6XCIwMFwifSxcIiV5XCI6ZnVuY3Rpb24oQSl7cmV0dXJuKEEudG1feWVhcisxOTAwKS50b1N0cmluZygpLnN1YnN0cmluZygyKX0sXCIlWVwiOmZ1bmN0aW9uKEEpe3JldHVybiBBLnRtX3llYXIrMTkwMH0sXCIlelwiOmZ1bmN0aW9uKEEpe3ZhciBJPUEudG1fZ210b2ZmLGc9ST49MDtyZXR1cm4gST0oST1NYXRoLmFicyhJKS82MCkvNjAqMTAwK0klNjAsKGc/XCIrXCI6XCItXCIpK1N0cmluZyhcIjAwMDBcIitJKS5zbGljZSgtNCl9LFwiJVpcIjpmdW5jdGlvbihBKXtyZXR1cm4gQS50bV96b25lfSxcIiUlXCI6ZnVuY3Rpb24oKXtyZXR1cm5cIiVcIn19O2Zvcih2YXIgbyBpbiBSKUUuaW5kZXhPZihvKT49MCYmKEU9RS5yZXBsYWNlKG5ldyBSZWdFeHAobyxcImdcIiksUltvXShRKSkpO3ZhciBVPVhnKEUsITEpO3JldHVybiBVLmxlbmd0aD5JPzA6KFQoVSxBKSxVLmxlbmd0aC0xKX1mdW5jdGlvbiBiZyhBLEksZyxCKXtyZXR1cm4gWmcoQSxJLGcsQil9ZnVuY3Rpb24geGcoQSl7dmFyIEk9RGF0ZS5ub3coKS8xZTN8MDtyZXR1cm4gQSYmKEFBW0E+PjJdPUkpLEl9aUkuc3RhdGljSW5pdCgpLHJJKCksZkk9QS5CaW5kaW5nRXJyb3I9ZEkoRXJyb3IsXCJCaW5kaW5nRXJyb3JcIiksdUk9QS5JbnRlcm5hbEVycm9yPWRJKEVycm9yLFwiSW50ZXJuYWxFcnJvclwiKSxqSSgpLERnPUEuVW5ib3VuZFR5cGVFcnJvcj1kSShFcnJvcixcIlVuYm91bmRUeXBlRXJyb3JcIik7dmFyIG1nPSExO2Z1bmN0aW9uIFhnKEEsSSxnKXt2YXIgQj1nPjA/ZzpXKEEpKzEsQz1uZXcgQXJyYXkoQiksUT1sKEEsQywwLEMubGVuZ3RoKTtyZXR1cm4gSSYmKEMubGVuZ3RoPVEpLEN9ZnVuY3Rpb24gVmcoQSl7Zm9yKHZhciBJPVtdLGc9MDtnPEEubGVuZ3RoO2crKyl7dmFyIEI9QVtnXTtCPjI1NSYmKG1nJiZIKCExLFwiQ2hhcmFjdGVyIGNvZGUgXCIrQitcIiAoXCIrU3RyaW5nLmZyb21DaGFyQ29kZShCKStcIikgIGF0IG9mZnNldCBcIitnK1wiIG5vdCBpbiAweDAwLTB4RkYuXCIpLEImPTI1NSksSS5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoQikpfXJldHVybiBJLmpvaW4oXCJcIil9dmFyIE9nPVwiZnVuY3Rpb25cIj09dHlwZW9mIGF0b2I/YXRvYjpmdW5jdGlvbihBKXt2YXIgSSxnLEIsQyxRLEUsaT1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89XCIsbz1cIlwiLEQ9MDtBPUEucmVwbGFjZSgvW15BLVphLXowLTlcXCtcXC9cXD1dL2csXCJcIik7ZG97ST1pLmluZGV4T2YoQS5jaGFyQXQoRCsrKSk8PDJ8KEM9aS5pbmRleE9mKEEuY2hhckF0KEQrKykpKT4+NCxnPSgxNSZDKTw8NHwoUT1pLmluZGV4T2YoQS5jaGFyQXQoRCsrKSkpPj4yLEI9KDMmUSk8PDZ8KEU9aS5pbmRleE9mKEEuY2hhckF0KEQrKykpKSxvKz1TdHJpbmcuZnJvbUNoYXJDb2RlKEkpLDY0IT09USYmKG8rPVN0cmluZy5mcm9tQ2hhckNvZGUoZykpLDY0IT09RSYmKG8rPVN0cmluZy5mcm9tQ2hhckNvZGUoQikpfXdoaWxlKEQ8QS5sZW5ndGgpO3JldHVybiBvfTtmdW5jdGlvbiBUZyhBKXtpZihcImJvb2xlYW5cIj09dHlwZW9mIHcmJncpe3ZhciBJO3RyeXtJPUJ1ZmZlci5mcm9tKEEsXCJiYXNlNjRcIil9Y2F0Y2goZyl7ST1uZXcgQnVmZmVyKEEsXCJiYXNlNjRcIil9cmV0dXJuIG5ldyBVaW50OEFycmF5KEkuYnVmZmVyLEkuYnl0ZU9mZnNldCxJLmJ5dGVMZW5ndGgpfXRyeXtmb3IodmFyIGc9T2coQSksQj1uZXcgVWludDhBcnJheShnLmxlbmd0aCksQz0wO0M8Zy5sZW5ndGg7KytDKUJbQ109Zy5jaGFyQ29kZUF0KEMpO3JldHVybiBCfWNhdGNoKEEpe3Rocm93IG5ldyBFcnJvcihcIkNvbnZlcnRpbmcgYmFzZTY0IHN0cmluZyB0byBieXRlcyBmYWlsZWQuXCIpfX1mdW5jdGlvbiBqZyhBKXtpZihMQShBKSlyZXR1cm4gVGcoQS5zbGljZShIQS5sZW5ndGgpKX1mdW5jdGlvbiBQZyhBLEkpe3ZhciBnPXRCKCk7dHJ5e3JldHVybiBTQihBLEkpfWNhdGNoKEEpe2lmKHlCKGcpLEEhPT1BKzAmJlwibG9uZ2ptcFwiIT09QSl0aHJvdyBBO1VCKDEsMCl9fWZ1bmN0aW9uIHZnKEEsSSxnKXt2YXIgQj10QigpO3RyeXtyZXR1cm4gTUIoQSxJLGcpfWNhdGNoKEEpe2lmKHlCKEIpLEEhPT1BKzAmJlwibG9uZ2ptcFwiIT09QSl0aHJvdyBBO1VCKDEsMCl9fWZ1bmN0aW9uIHpnKEEsSSxnLEIpe3ZhciBDPXRCKCk7dHJ5e3JldHVybiBuQihBLEksZyxCKX1jYXRjaChBKXtpZih5QihDKSxBIT09QSswJiZcImxvbmdqbXBcIiE9PUEpdGhyb3cgQTtVQigxLDApfX1mdW5jdGlvbiBfZyhBLEkpe3ZhciBnPXRCKCk7dHJ5e2NCKEEsSSl9Y2F0Y2goQSl7aWYoeUIoZyksQSE9PUErMCYmXCJsb25nam1wXCIhPT1BKXRocm93IEE7VUIoMSwwKX19ZnVuY3Rpb24gJGcoQSxJLGcpe3ZhciBCPXRCKCk7dHJ5e3JCKEEsSSxnKX1jYXRjaChBKXtpZih5QihCKSxBIT09QSswJiZcImxvbmdqbXBcIiE9PUEpdGhyb3cgQTtVQigxLDApfX1mdW5jdGlvbiBBQihBLEksZyxCKXt2YXIgQz10QigpO3RyeXtrQihBLEksZyxCKX1jYXRjaChBKXtpZih5QihDKSxBIT09QSswJiZcImxvbmdqbXBcIiE9PUEpdGhyb3cgQTtVQigxLDApfX1mdW5jdGlvbiBJQihBLEksZyxCLEMpe3ZhciBRPXRCKCk7dHJ5e0tCKEEsSSxnLEIsQyl9Y2F0Y2goQSl7aWYoeUIoUSksQSE9PUErMCYmXCJsb25nam1wXCIhPT1BKXRocm93IEE7VUIoMSwwKX19dmFyIGdCPXt9LEJCPXskOnZBLGY6ekEsZTokQSxBOkFJLF86Z0ksejpESSxaOmFJLFk6d0ksWDpHSSxvOmhJLHk6UkksVzp5SSxEOlNJLFY6bkksVTpiSSx4OnhJLFQ6ekksdzpBZyxqOkZnLGs6aGcsaTpzZyx2OlJnLHM6VWcsUzp5ZyxfX21lbW9yeV9iYXNlOjEwMjQsX190YWJsZV9iYXNlOjAsYTp0ZyxSOm1BLFE6eEEsUDpiQSxPOlpBLE46WEEsTTpTZyxLOmRnLEo6bmcsYjpjZyxuOnJnLHU6a2csSTpLZyxtOk5nLGw6WWcsSDpMZyxnOnFnLEY6WmcsRTpiZyx0OnhnLGM6SkEsaDpZLHE6UGcsTDp2ZyxHOnpnLHA6X2csQzokZyxCOkFCLHI6SUIsbWVtb3J5OnIsZDpOLHRhYmxlOmV9LENCPUEuYXNtKGdCLEJCLFApO0EuYXNtPUNCO3ZhciBRQixFQj1BLl9fR0xPQkFMX19zdWJfSV9BUlRvb2xLaXRKU19jcHA9ZnVuY3Rpb24oKXtyZXR1cm4gQS5hc20uYWEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxpQj1BLl9fR0xPQkFMX19zdWJfSV9iaW5kX2NwcD1mdW5jdGlvbigpe3JldHVybiBBLmFzbS5iYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LG9CPUEuX19HTE9CQUxfX3N1Yl9JX2lvc3RyZWFtX2NwcD1mdW5jdGlvbigpe3JldHVybiBBLmFzbS5jYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LERCPUEuX19aU3QxOHVuY2F1Z2h0X2V4Y2VwdGlvbnY9ZnVuY3Rpb24oKXtyZXR1cm4gQS5hc20uZGEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxhQj0oQS5fX19lbWJpbmRfcmVnaXN0ZXJfbmF0aXZlX2FuZF9idWlsdGluX3R5cGVzPWZ1bmN0aW9uKCl7cmV0dXJuIEEuYXNtLmVhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQS5fX19lbXNjcmlwdGVuX2Vudmlyb25fY29uc3RydWN0b3I9ZnVuY3Rpb24oKXtyZXR1cm4gQS5hc20uZmEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSksd0I9KEEuX19fZXJybm9fbG9jYXRpb249ZnVuY3Rpb24oKXtyZXR1cm4gQS5hc20uZ2EuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxBLl9fX2dldFR5cGVOYW1lPWZ1bmN0aW9uKCl7cmV0dXJuIEEuYXNtLmhhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0pLEZCPUEuX19nZXRfZGF5bGlnaHQ9ZnVuY3Rpb24oKXtyZXR1cm4gQS5hc20uaWEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxHQj1BLl9fZ2V0X3RpbWV6b25lPWZ1bmN0aW9uKCl7cmV0dXJuIEEuYXNtLmphLmFwcGx5KG51bGwsYXJndW1lbnRzKX0saEI9QS5fX2dldF90em5hbWU9ZnVuY3Rpb24oKXtyZXR1cm4gQS5hc20ua2EuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxzQj1BLl9mcmVlPWZ1bmN0aW9uKCl7cmV0dXJuIEEuYXNtLmxhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sUkI9QS5fbWFsbG9jPWZ1bmN0aW9uKCl7cmV0dXJuIEEuYXNtLm1hLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sVUI9QS5fc2V0VGhyZXc9ZnVuY3Rpb24oKXtyZXR1cm4gQS5hc20ubmEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSx5Qj0oQS5zdGFja0FsbG9jPWZ1bmN0aW9uKCl7cmV0dXJuIEEuYXNtLlJhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQS5zdGFja1Jlc3RvcmU9ZnVuY3Rpb24oKXtyZXR1cm4gQS5hc20uU2EuYXBwbHkobnVsbCxhcmd1bWVudHMpfSksdEI9QS5zdGFja1NhdmU9ZnVuY3Rpb24oKXtyZXR1cm4gQS5hc20uVGEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxTQj0oQS5keW5DYWxsX2RpPWZ1bmN0aW9uKCl7cmV0dXJuIEEuYXNtLm9hLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQS5keW5DYWxsX2RpaT1mdW5jdGlvbigpe3JldHVybiBBLmFzbS5wYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEEuZHluQ2FsbF9pPWZ1bmN0aW9uKCl7cmV0dXJuIEEuYXNtLnFhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQS5keW5DYWxsX2lpPWZ1bmN0aW9uKCl7cmV0dXJuIEEuYXNtLnJhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0pLE1CPShBLmR5bkNhbGxfaWlkaWlpaT1mdW5jdGlvbigpe3JldHVybiBBLmFzbS5zYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEEuZHluQ2FsbF9paWk9ZnVuY3Rpb24oKXtyZXR1cm4gQS5hc20udGEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSksbkI9QS5keW5DYWxsX2lpaWk9ZnVuY3Rpb24oKXtyZXR1cm4gQS5hc20udWEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxjQj0oQS5keW5DYWxsX2lpaWlpPWZ1bmN0aW9uKCl7cmV0dXJuIEEuYXNtLnZhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQS5keW5DYWxsX2lpaWlpZD1mdW5jdGlvbigpe3JldHVybiBBLmFzbS53YS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEEuZHluQ2FsbF9paWlpaWk9ZnVuY3Rpb24oKXtyZXR1cm4gQS5hc20ueGEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxBLmR5bkNhbGxfaWlpaWlpZD1mdW5jdGlvbigpe3JldHVybiBBLmFzbS55YS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEEuZHluQ2FsbF9paWlpaWlpPWZ1bmN0aW9uKCl7cmV0dXJuIEEuYXNtLnphLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQS5keW5DYWxsX2lpaWlpaWlpPWZ1bmN0aW9uKCl7cmV0dXJuIEEuYXNtLkFhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQS5keW5DYWxsX2lpaWlpaWlpaT1mdW5jdGlvbigpe3JldHVybiBBLmFzbS5CYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEEuZHluQ2FsbF9paWlpaWo9ZnVuY3Rpb24oKXtyZXR1cm4gQS5hc20uQ2EuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxBLmR5bkNhbGxfamlqaT1mdW5jdGlvbigpe3JldHVybiBBLmFzbS5EYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEEuZHluQ2FsbF92PWZ1bmN0aW9uKCl7cmV0dXJuIEEuYXNtLkVhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQS5keW5DYWxsX3ZpPWZ1bmN0aW9uKCl7cmV0dXJuIEEuYXNtLkZhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0pLHJCPShBLmR5bkNhbGxfdmlkPWZ1bmN0aW9uKCl7cmV0dXJuIEEuYXNtLkdhLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQS5keW5DYWxsX3ZpZj1mdW5jdGlvbigpe3JldHVybiBBLmFzbS5IYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEEuZHluQ2FsbF92aWk9ZnVuY3Rpb24oKXtyZXR1cm4gQS5hc20uSWEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSksa0I9KEEuZHluQ2FsbF92aWlkPWZ1bmN0aW9uKCl7cmV0dXJuIEEuYXNtLkphLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sQS5keW5DYWxsX3ZpaWY9ZnVuY3Rpb24oKXtyZXR1cm4gQS5hc20uS2EuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxBLmR5bkNhbGxfdmlpaT1mdW5jdGlvbigpe3JldHVybiBBLmFzbS5MYS5hcHBseShudWxsLGFyZ3VtZW50cyl9KSxLQj1BLmR5bkNhbGxfdmlpaWk9ZnVuY3Rpb24oKXtyZXR1cm4gQS5hc20uTWEuYXBwbHkobnVsbCxhcmd1bWVudHMpfTtmdW5jdGlvbiBOQihBKXt0aGlzLm5hbWU9XCJFeGl0U3RhdHVzXCIsdGhpcy5tZXNzYWdlPVwiUHJvZ3JhbSB0ZXJtaW5hdGVkIHdpdGggZXhpdChcIitBK1wiKVwiLHRoaXMuc3RhdHVzPUF9ZnVuY3Rpb24gWUIoSSl7ZnVuY3Rpb24gZygpe1FCfHwoUUI9ITAsSnx8KFJBKCksVUEoKSxBLm9uUnVudGltZUluaXRpYWxpemVkJiZBLm9uUnVudGltZUluaXRpYWxpemVkKCkseUEoKSkpfUk9SXx8QyxrQT4wfHwoc0EoKSxrQT4wfHwoQS5zZXRTdGF0dXM/KEEuc2V0U3RhdHVzKFwiUnVubmluZy4uLlwiKSxzZXRUaW1lb3V0KChmdW5jdGlvbigpe3NldFRpbWVvdXQoKGZ1bmN0aW9uKCl7QS5zZXRTdGF0dXMoXCJcIil9KSwxKSxnKCl9KSwxKSk6ZygpKSl9ZnVuY3Rpb24gZUIoSSxnKXtnJiZjJiYwPT09SXx8KGN8fChKPSEwLEEub25FeGl0JiZBLm9uRXhpdChJKSksRShJLG5ldyBOQihJKSkpfWlmKEEuZHluQ2FsbF92aWlpaWk9ZnVuY3Rpb24oKXtyZXR1cm4gQS5hc20uTmEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxBLmR5bkNhbGxfdmlpaWlpaT1mdW5jdGlvbigpe3JldHVybiBBLmFzbS5PYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEEuZHluQ2FsbF92aWlpaWlpaT1mdW5jdGlvbigpe3JldHVybiBBLmFzbS5QYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEEuZHluQ2FsbF92aWlqaWk9ZnVuY3Rpb24oKXtyZXR1cm4gQS5hc20uUWEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxBLmFzbT1DQixBLkZTPWlJLEEudGhlbj1mdW5jdGlvbihJKXtpZihRQilJKEEpO2Vsc2V7dmFyIGc9QS5vblJ1bnRpbWVJbml0aWFsaXplZDtBLm9uUnVudGltZUluaXRpYWxpemVkPWZ1bmN0aW9uKCl7ZyYmZygpLEkoQSl9fXJldHVybiBBfSxOQT1mdW5jdGlvbiBBKCl7UUJ8fFlCKCksUUJ8fChOQT1BKX0sQS5ydW49WUIsQS5wcmVJbml0KWZvcihcImZ1bmN0aW9uXCI9PXR5cGVvZiBBLnByZUluaXQmJihBLnByZUluaXQ9W0EucHJlSW5pdF0pO0EucHJlSW5pdC5sZW5ndGg+MDspQS5wcmVJbml0LnBvcCgpKCk7cmV0dXJuIGM9ITAsWUIoKSxBfSk7Y29uc3QgRj13LEc9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKEEpe0Yoe29uUnVudGltZUluaXRpYWxpemVkOmZ1bmN0aW9uKCl7QSh7aW5zdGFuY2U6dGhpc30pfX0pfSkpfTt2YXIgaD1nKDY2OSkscz1nLm4oaCksUj1mdW5jdGlvbigpe2Z1bmN0aW9uIEEoKXtDKHRoaXMsQSl9dmFyIGc7cmV0dXJuIEUoQSxudWxsLFt7a2V5OlwiZmV0Y2hSZW1vdGVEYXRhXCIsdmFsdWU6KGc9SShvKCkubWFyaygoZnVuY3Rpb24gQShJKXt2YXIgZztyZXR1cm4gbygpLndyYXAoKGZ1bmN0aW9uKEEpe2Zvcig7Oylzd2l0Y2goQS5wcmV2PUEubmV4dCl7Y2FzZSAwOnJldHVybiBBLnByZXY9MCxBLm5leHQ9MyxzKCkuZ2V0KEkse3Jlc3BvbnNlVHlwZTpcImFycmF5YnVmZmVyXCJ9KTtjYXNlIDM6cmV0dXJuIGc9QS5zZW50LEEuYWJydXB0KFwicmV0dXJuXCIsbmV3IFVpbnQ4QXJyYXkoZy5kYXRhKSk7Y2FzZSA3OnRocm93IEEucHJldj03LEEudDA9QS5jYXRjaCgwKSxBLnQwO2Nhc2UgMTA6Y2FzZVwiZW5kXCI6cmV0dXJuIEEuc3RvcCgpfX0pLEEsbnVsbCxbWzAsN11dKX0pKSksZnVuY3Rpb24oQSl7cmV0dXJuIGcuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJzdHJpbmcyVWludDhEYXRhXCIsdmFsdWU6ZnVuY3Rpb24oQSl7Zm9yKHZhciBJPW5ldyBVaW50OEFycmF5KEEubGVuZ3RoKSxnPTA7ZzxJLmxlbmd0aDtnKyspSVtnXT0yNTUmQS5jaGFyQ29kZUF0KGcpO3JldHVybiBJfX0se2tleTpcInVpbnQ4RGF0YTJTdHJpbmdcIix2YWx1ZTpmdW5jdGlvbihBKXtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsQSl9fSx7a2V5OlwicGFyc2VNdWx0aUZpbGVcIix2YWx1ZTpmdW5jdGlvbihJKXt2YXIgZz1BLnVpbnQ4RGF0YTJTdHJpbmcoSSkuc3BsaXQoXCJcXG5cIiksQj1bXSxDPTA7cmV0dXJuIGcuZm9yRWFjaCgoZnVuY3Rpb24oQSl7aWYoKEE9QS50cmltKCkpJiYhQS5zdGFydHNXaXRoKFwiI1wiKSlzd2l0Y2goQyl7Y2FzZSAwOnJldHVybiB2b2lkKEM9MSk7Y2FzZSAxOkEubWF0Y2goL15cXGQrJC8pfHxCLnB1c2goQSk7Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6cmV0dXJuIHZvaWQgQysrO2Nhc2UgNTpyZXR1cm4gdm9pZChDPTEpfX0pKSxCfX1dKSxBfSgpLFU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBBKCl7Qyh0aGlzLEEpLHRoaXMuaW5zdGFuY2UsdGhpcy5tYXJrZXJDb3VudD0wLHRoaXMubXVsdGlNYXJrZXJDb3VudD0wLHRoaXMuY2FtZXJhQ291bnQ9MCx0aGlzLnZlcnNpb249XCIwLjEuMFwiLGNvbnNvbGUuaW5mbyhcIkFSVG9vbGtpdCBcIix0aGlzLnZlcnNpb24pfXZhciBCLFEsaSxELGE7cmV0dXJuIEUoQSxbe2tleTpcImluaXRcIix2YWx1ZTooYT1JKG8oKS5tYXJrKChmdW5jdGlvbiBBKCl7dmFyIEk7cmV0dXJuIG8oKS53cmFwKChmdW5jdGlvbihBKXtmb3IoOzspc3dpdGNoKEEucHJldj1BLm5leHQpe2Nhc2UgMDpyZXR1cm4gQS5uZXh0PTIsRygpO2Nhc2UgMjpyZXR1cm4gST1BLnNlbnQsdGhpcy5pbnN0YW5jZT1JLmluc3RhbmNlLHRoaXMuX2RlY29yYXRlKCksKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OmcuZykuYXJ0b29sa2l0PXRoaXMsQS5hYnJ1cHQoXCJyZXR1cm5cIix0aGlzKTtjYXNlIDg6Y2FzZVwiZW5kXCI6cmV0dXJuIEEuc3RvcCgpfX0pLEEsdGhpcyl9KSkpLGZ1bmN0aW9uKCl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJfZGVjb3JhdGVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBBPXRoaXM7Zm9yKHZhciBJIGluW1wic2V0dXBcIixcInRlYXJkb3duXCIsXCJzZXR1cEFSMlwiLFwic2V0TG9nTGV2ZWxcIixcImdldExvZ0xldmVsXCIsXCJzZXREZWJ1Z01vZGVcIixcImdldERlYnVnTW9kZVwiLFwiZ2V0UHJvY2Vzc2luZ0ltYWdlXCIsXCJzZXRNYXJrZXJJbmZvRGlyXCIsXCJzZXRNYXJrZXJJbmZvVmVydGV4XCIsXCJnZXRUcmFuc01hdFNxdWFyZVwiLFwiZ2V0VHJhbnNNYXRTcXVhcmVDb250XCIsXCJnZXRUcmFuc01hdE11bHRpU3F1YXJlXCIsXCJnZXRUcmFuc01hdE11bHRpU3F1YXJlUm9idXN0XCIsXCJnZXRNdWx0aU1hcmtlck51bVwiLFwiZ2V0TXVsdGlNYXJrZXJDb3VudFwiLFwiZGV0ZWN0TWFya2VyXCIsXCJnZXRNYXJrZXJOdW1cIixcImRldGVjdE5GVE1hcmtlclwiLFwiZ2V0TkZUTWFya2VyXCIsXCJnZXRNYXJrZXJcIixcImdldE11bHRpRWFjaE1hcmtlclwiLFwic2V0UHJvamVjdGlvbk5lYXJQbGFuZVwiLFwiZ2V0UHJvamVjdGlvbk5lYXJQbGFuZVwiLFwic2V0UHJvamVjdGlvbkZhclBsYW5lXCIsXCJnZXRQcm9qZWN0aW9uRmFyUGxhbmVcIixcInNldFRocmVzaG9sZE1vZGVcIixcImdldFRocmVzaG9sZE1vZGVcIixcInNldFRocmVzaG9sZFwiLFwiZ2V0VGhyZXNob2xkXCIsXCJzZXRQYXR0ZXJuRGV0ZWN0aW9uTW9kZVwiLFwiZ2V0UGF0dGVybkRldGVjdGlvbk1vZGVcIixcInNldE1hdHJpeENvZGVUeXBlXCIsXCJnZXRNYXRyaXhDb2RlVHlwZVwiLFwic2V0TGFiZWxpbmdNb2RlXCIsXCJnZXRMYWJlbGluZ01vZGVcIixcInNldFBhdHRSYXRpb1wiLFwiZ2V0UGF0dFJhdGlvXCIsXCJzZXRJbWFnZVByb2NNb2RlXCIsXCJnZXRJbWFnZVByb2NNb2RlXCJdLmZvckVhY2goKGZ1bmN0aW9uKEkpe0FbSV09QS5pbnN0YW5jZVtJXX0pKSx0aGlzLmluc3RhbmNlKUkubWF0Y2goL15BUi8pJiYodGhpc1tJXT10aGlzLmluc3RhbmNlW0ldKX19LHtrZXk6XCJsb2FkQ2FtZXJhXCIsdmFsdWU6KEQ9SShvKCkubWFyaygoZnVuY3Rpb24gQShJKXt2YXIgZyxCO3JldHVybiBvKCkud3JhcCgoZnVuY3Rpb24oQSl7Zm9yKDs7KXN3aXRjaChBLnByZXY9QS5uZXh0KXtjYXNlIDA6aWYoZz1cIi9jYW1lcmFfcGFyYW1fXCIrdGhpcy5jYW1lcmFDb3VudCsrLCEoSSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKXtBLm5leHQ9NTticmVha31CPUksQS5uZXh0PTE0O2JyZWFrO2Nhc2UgNTpyZXR1cm4gQS5wcmV2PTUsQS5uZXh0PTgsUi5mZXRjaFJlbW90ZURhdGEoSSk7Y2FzZSA4OkI9QS5zZW50LEEubmV4dD0xNDticmVhaztjYXNlIDExOnRocm93IEEucHJldj0xMSxBLnQwPUEuY2F0Y2goNSksQS50MDtjYXNlIDE0OnJldHVybiB0aGlzLl9zdG9yZURhdGFGaWxlKEIsZyksQS5hYnJ1cHQoXCJyZXR1cm5cIix0aGlzLmluc3RhbmNlLl9sb2FkQ2FtZXJhKGcpKTtjYXNlIDE2OmNhc2VcImVuZFwiOnJldHVybiBBLnN0b3AoKX19KSxBLHRoaXMsW1s1LDExXV0pfSkpKSxmdW5jdGlvbihBKXtyZXR1cm4gRC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcImFkZE1hcmtlclwiLHZhbHVlOihpPUkobygpLm1hcmsoKGZ1bmN0aW9uIEEoSSxnKXt2YXIgQixDO3JldHVybiBvKCkud3JhcCgoZnVuY3Rpb24oQSl7Zm9yKDs7KXN3aXRjaChBLnByZXY9QS5uZXh0KXtjYXNlIDA6aWYoQj1cIi9tYXJrZXJfXCIrdGhpcy5tYXJrZXJDb3VudCsrLC0xPT09Zy5pbmRleE9mKFwiXFxuXCIpKXtBLm5leHQ9NTticmVha31DPVIuc3RyaW5nMlVpbnQ4RGF0YShnKSxBLm5leHQ9MTQ7YnJlYWs7Y2FzZSA1OnJldHVybiBBLnByZXY9NSxBLm5leHQ9OCxSLmZldGNoUmVtb3RlRGF0YShnKTtjYXNlIDg6Qz1BLnNlbnQsQS5uZXh0PTE0O2JyZWFrO2Nhc2UgMTE6dGhyb3cgQS5wcmV2PTExLEEudDA9QS5jYXRjaCg1KSxBLnQwO2Nhc2UgMTQ6cmV0dXJuIHRoaXMuX3N0b3JlRGF0YUZpbGUoQyxCKSxBLmFicnVwdChcInJldHVyblwiLHRoaXMuaW5zdGFuY2UuX2FkZE1hcmtlcihJLEIpKTtjYXNlIDE2OmNhc2VcImVuZFwiOnJldHVybiBBLnN0b3AoKX19KSxBLHRoaXMsW1s1LDExXV0pfSkpKSxmdW5jdGlvbihBLEkpe3JldHVybiBpLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OlwiYWRkTXVsdGlNYXJrZXJcIix2YWx1ZTooUT1JKG8oKS5tYXJrKChmdW5jdGlvbiBBKGcsQil7dmFyIEMsUSxFLGksRCxhLHc7cmV0dXJuIG8oKS53cmFwKChmdW5jdGlvbihBKXtmb3IoOzspc3dpdGNoKEEucHJldj1BLm5leHQpe2Nhc2UgMDpyZXR1cm4gQz1cIi9tdWx0aV9tYXJrZXJfXCIrdGhpcy5tdWx0aU1hcmtlckNvdW50KyssQS5uZXh0PTMsUi5mZXRjaFJlbW90ZURhdGEoQik7Y2FzZSAzOnJldHVybiBRPUEuc2VudCxFPVIucGFyc2VNdWx0aUZpbGUoUSksaT1mdW5jdGlvbigpe3ZhciBBPUkobygpLm1hcmsoKGZ1bmN0aW9uIEEoSSl7dmFyIGcsQztyZXR1cm4gbygpLndyYXAoKGZ1bmN0aW9uKEEpe2Zvcig7Oylzd2l0Y2goQS5wcmV2PUEubmV4dCl7Y2FzZSAwOnJldHVybiBnPW5ldyBVUkwoSSxCKS50b1N0cmluZygpLEEubmV4dD0zLFIuZmV0Y2hSZW1vdGVEYXRhKGcpO2Nhc2UgMzpDPUEuc2VudCx0aGlzLl9zdG9yZURhdGFGaWxlKEMsSSk7Y2FzZSA1OmNhc2VcImVuZFwiOnJldHVybiBBLnN0b3AoKX19KSxBLHRoaXMpfSkpKTtyZXR1cm4gZnVuY3Rpb24oSSl7cmV0dXJuIEEuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0oKSxEPUUubWFwKGksdGhpcyksQS5uZXh0PTksUHJvbWlzZS5hbGwoRCk7Y2FzZSA5OnJldHVybiBhPXRoaXMuaW5zdGFuY2UuX2FkZE11bHRpTWFya2VyKGcsQyksdz10aGlzLmluc3RhbmNlLmdldE11bHRpTWFya2VyTnVtKGcsYSksQS5hYnJ1cHQoXCJyZXR1cm5cIixbYSx3XSk7Y2FzZSAxMjpjYXNlXCJlbmRcIjpyZXR1cm4gQS5zdG9wKCl9fSksQSx0aGlzKX0pKSksZnVuY3Rpb24oQSxJKXtyZXR1cm4gUS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcImFkZE5GVE1hcmtlclwiLHZhbHVlOihCPUkobygpLm1hcmsoKGZ1bmN0aW9uIEEoZyxCKXt2YXIgQyxRLEUsaTtyZXR1cm4gbygpLndyYXAoKGZ1bmN0aW9uKEEpe2Zvcig7Oylzd2l0Y2goQS5wcmV2PUEubmV4dCl7Y2FzZSAwOnJldHVybiBDPVwiL21hcmtlck5GVF9cIit0aGlzLm1hcmtlckNvdW50KyssUT1bXCJmc2V0XCIsXCJpc2V0XCIsXCJmc2V0M1wiXSxFPWZ1bmN0aW9uKCl7dmFyIEE9SShvKCkubWFyaygoZnVuY3Rpb24gQShJKXt2YXIgZyxRLEU7cmV0dXJuIG8oKS53cmFwKChmdW5jdGlvbihBKXtmb3IoOzspc3dpdGNoKEEucHJldj1BLm5leHQpe2Nhc2UgMDpyZXR1cm4gZz1CK1wiLlwiK0ksUT1DK1wiLlwiK0ksQS5uZXh0PTQsUi5mZXRjaFJlbW90ZURhdGEoZyk7Y2FzZSA0OkU9QS5zZW50LHRoaXMuX3N0b3JlRGF0YUZpbGUoRSxRKTtjYXNlIDY6Y2FzZVwiZW5kXCI6cmV0dXJuIEEuc3RvcCgpfX0pLEEsdGhpcyl9KSkpO3JldHVybiBmdW5jdGlvbihJKXtyZXR1cm4gQS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSgpLGk9US5tYXAoRSx0aGlzKSxBLm5leHQ9NixQcm9taXNlLmFsbChpKTtjYXNlIDY6cmV0dXJuIEEuYWJydXB0KFwicmV0dXJuXCIsdGhpcy5pbnN0YW5jZS5fYWRkTkZUTWFya2VyKGcsQykpO2Nhc2UgNzpjYXNlXCJlbmRcIjpyZXR1cm4gQS5zdG9wKCl9fSksQSx0aGlzKX0pKSksZnVuY3Rpb24oQSxJKXtyZXR1cm4gQi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcIl9zdG9yZURhdGFGaWxlXCIsdmFsdWU6ZnVuY3Rpb24oQSxJKXt0aGlzLmluc3RhbmNlLkZTLndyaXRlRmlsZShJLEEse2VuY29kaW5nOlwiYmluYXJ5XCJ9KX19XSxbe2tleTpcIlVOS05PV05fTUFSS0VSXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuLTF9fSx7a2V5OlwiUEFUVEVSTl9NQVJLRVJcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gMH19LHtrZXk6XCJCQVJDT0RFX01BUktFUlwiLGdldDpmdW5jdGlvbigpe3JldHVybiAxfX0se2tleTpcIk5GVF9NQVJLRVJcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gMn19XSksQX0oKTtmdW5jdGlvbiB5KEEsSSxnKXtyZXR1cm4gSSBpbiBBP09iamVjdC5kZWZpbmVQcm9wZXJ0eShBLEkse3ZhbHVlOmcsZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTpBW0ldPWcsQX1mdW5jdGlvbiB0KEEsSSl7dmFyIGc9T2JqZWN0LmtleXMoQSk7aWYoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyl7dmFyIEI9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhBKTtJJiYoQj1CLmZpbHRlcigoZnVuY3Rpb24oSSl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoQSxJKS5lbnVtZXJhYmxlfSkpKSxnLnB1c2guYXBwbHkoZyxCKX1yZXR1cm4gZ31mdW5jdGlvbiBTKEEpe2Zvcih2YXIgST0xO0k8YXJndW1lbnRzLmxlbmd0aDtJKyspe3ZhciBnPW51bGwhPWFyZ3VtZW50c1tJXT9hcmd1bWVudHNbSV06e307SSUyP3QoT2JqZWN0KGcpLCEwKS5mb3JFYWNoKChmdW5jdGlvbihJKXt5KEEsSSxnW0ldKX0pKTpPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycz9PYmplY3QuZGVmaW5lUHJvcGVydGllcyhBLE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKGcpKTp0KE9iamVjdChnKSkuZm9yRWFjaCgoZnVuY3Rpb24oSSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KEEsSSxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGcsSSkpfSkpfXJldHVybiBBfXZhciBNPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gQShJLGcsQixRKXtDKHRoaXMsQSksdGhpcy5vcHRpb25zPVMoUyh7fSx7Y2FudmFzOm51bGwsb3JpZW50YXRpb246XCJsYW5kc2NhcGVcIn0pLFEpLHRoaXMuaWQ9LTEsdGhpcy53aWR0aD1JLHRoaXMuaGVpZ2h0PWcsdGhpcy5pbWFnZSx0aGlzLm9yaWVudGF0aW9uPXRoaXMub3B0aW9ucy5vcmllbnRhdGlvbix0aGlzLmNhbWVyYVBhcmFtPUIsdGhpcy5jYW1lcmFJZD0tMSx0aGlzLmNhbWVyYUxvYWRlZD0hMSx0aGlzLmFydG9vbGtpdCx0aGlzLmxpc3RlbmVycz17fSx0aGlzLmRlZmF1bHRNYXJrZXJXaWR0aD0xLHRoaXMucGF0dGVybk1hcmtlcnM9e30sdGhpcy5iYXJjb2RlTWFya2Vycz17fSx0aGlzLm5mdE1hcmtlcnM9e30sdGhpcy50cmFuc2Zvcm1fbWF0PW5ldyBGbG9hdDMyQXJyYXkoMTYpLHRoaXMudHJhbnNmb3JtR0xfUkg9bmV3IEZsb2F0NjRBcnJheSgxNiksdGhpcy52aWRlb1dpZHRoPUksdGhpcy52aWRlb0hlaWdodD1nLHRoaXMudmlkZW9TaXplPXRoaXMudmlkZW9XaWR0aCp0aGlzLnZpZGVvSGVpZ2h0LHRoaXMuZnJhbWVwb2ludGVyPW51bGwsdGhpcy5mcmFtZXNpemU9bnVsbCx0aGlzLmRhdGFIZWFwPW51bGwsdGhpcy52aWRlb0x1bWE9bnVsbCx0aGlzLmNhbWVyYV9tYXQ9bnVsbCx0aGlzLm1hcmtlcl90cmFuc2Zvcm1fbWF0PW51bGwsdGhpcy52aWRlb0x1bWFQb2ludGVyPW51bGwsdGhpcy5vcHRpb25zLmNhbnZhcz90aGlzLmNhbnZhcz10aGlzLm9wdGlvbnMuY2FudmFzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudCYmKHRoaXMuY2FudmFzPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIikpLHRoaXMuY2FudmFzPyh0aGlzLmNhbnZhcy53aWR0aD1JLHRoaXMuY2FudmFzLmhlaWdodD1nLHRoaXMuY3R4PXRoaXMuY2FudmFzLmdldENvbnRleHQoXCIyZFwiKSk6Y29uc29sZS53YXJuKFwiTm8gY2FudmFzIGF2YWlsYWJsZVwiKSx0aGlzLm5mdE1hcmtlckZvdW5kPSExLHRoaXMubmZ0TWFya2VyRm91bmRUaW1lPSExLHRoaXMubmZ0TWFya2VyQ291bnQ9MCx0aGlzLl9id3BvaW50ZXI9ITF9dmFyIGcsQixRLGksRCxhO3JldHVybiBFKEEsW3trZXk6XCJkaXNwb3NlXCIsdmFsdWU6ZnVuY3Rpb24oKXtmb3IodmFyIEEgaW4gdGhpcy5jYW1lcmFJZD0tMSx0aGlzLmNhbWVyYVBhcmFtPVwiXCIsdGhpcy5jYW1lcmFMb2FkZWQ9ITEsdGhpcy5pZD4tMSYmdGhpcy5hcnRvb2xraXQudGVhcmRvd24odGhpcy5pZCksdGhpcy5pbWFnZSYmdGhpcy5pbWFnZS5zcmNPYmplY3QsdGhpcyl0aGlzW0FdPW51bGx9fSx7a2V5OlwicHJvY2Vzc1wiLHZhbHVlOmZ1bmN0aW9uKEEpe3ZhciBJPXRoaXMuZGV0ZWN0TWFya2VyKEEpOzAhPUkmJmNvbnNvbGUuZXJyb3IoXCJbQVJDb250cm9sbGVyXVwiLFwiZGV0ZWN0TWFya2VyIGVycm9yOlwiLEkpO3ZhciBnLEIsQz10aGlzLmdldE1hcmtlck51bSgpO2ZvcihnIGluIHRoaXMucGF0dGVybk1hcmtlcnMpKEI9dGhpcy5wYXR0ZXJuTWFya2Vyc1tnXSkuaW5QcmV2aW91cz1CLmluQ3VycmVudCxCLmluQ3VycmVudD0hMTtmb3IoZyBpbiB0aGlzLmJhcmNvZGVNYXJrZXJzKShCPXRoaXMuYmFyY29kZU1hcmtlcnNbZ10pLmluUHJldmlvdXM9Qi5pbkN1cnJlbnQsQi5pbkN1cnJlbnQ9ITE7Zm9yKGcgaW4gdGhpcy5uZnRNYXJrZXJzKShCPXRoaXMubmZ0TWFya2Vyc1tnXSkuaW5QcmV2aW91cz1CLmluQ3VycmVudCxCLmluQ3VycmVudD0hMTtmb3IodmFyIFE9MDtRPEM7USsrKXt2YXIgRT10aGlzLmdldE1hcmtlcihRKSxpPVUuVU5LTk9XTl9NQVJLRVIsbz10aGlzLnRyYWNrUGF0dGVybk1hcmtlcklkKC0xKTtFLmlkUGF0dD4tMSYmKEUuaWQ9PT1FLmlkUGF0dHx8LTE9PT1FLmlkTWF0cml4KT8obz10aGlzLnRyYWNrUGF0dGVybk1hcmtlcklkKEUuaWRQYXR0KSxpPVUuUEFUVEVSTl9NQVJLRVIsRS5kaXIhPT1FLmRpclBhdHQmJnRoaXMuc2V0TWFya2VySW5mb0RpcihRLEUuZGlyUGF0dCkpOkUuaWRNYXRyaXg+LTEmJihvPXRoaXMudHJhY2tCYXJjb2RlTWFya2VySWQoRS5pZE1hdHJpeCksaT1VLkJBUkNPREVfTUFSS0VSLEUuZGlyIT09RS5kaXJNYXRyaXgmJnRoaXMuc2V0TWFya2VySW5mb0RpcihRLEUuZGlyTWF0cml4KSksaSE9PVUuVU5LTk9XTl9NQVJLRVImJm8uaW5QcmV2aW91cz90aGlzLmdldFRyYW5zTWF0U3F1YXJlQ29udChRLG8ubWFya2VyV2lkdGgsby5tYXRyaXgsby5tYXRyaXgpOnRoaXMuZ2V0VHJhbnNNYXRTcXVhcmUoUSxvLm1hcmtlcldpZHRoLG8ubWF0cml4KSxvLmluQ3VycmVudD0hMCx0aGlzLnRyYW5zTWF0VG9HTE1hdChvLm1hdHJpeCx0aGlzLnRyYW5zZm9ybV9tYXQpLHRoaXMudHJhbnNmb3JtR0xfUkg9dGhpcy5hcmdsQ2FtZXJhVmlld1JIZih0aGlzLnRyYW5zZm9ybV9tYXQpLHRoaXMuZGlzcGF0Y2hFdmVudCh7bmFtZTpcImdldE1hcmtlclwiLHRhcmdldDp0aGlzLGRhdGE6e2luZGV4OlEsdHlwZTppLG1hcmtlcjpFLG1hdHJpeDp0aGlzLnRyYW5zZm9ybV9tYXQsbWF0cml4R0xfUkg6dGhpcy50cmFuc2Zvcm1HTF9SSH19KX12YXIgRD10aGlzLm5mdE1hcmtlckNvdW50O3RoaXMuZGV0ZWN0TkZUTWFya2VyKCk7Zm9yKHZhciBhPTA7YTxEO2ErKyl7dmFyIHc9dGhpcy5nZXRORlRNYXJrZXIoYSksRj1VLk5GVF9NQVJLRVI7aWYody5mb3VuZCl7dGhpcy5uZnRNYXJrZXJGb3VuZD1hLHRoaXMubmZ0TWFya2VyRm91bmRUaW1lPURhdGUubm93KCk7dmFyIEc9dGhpcy50cmFja05GVE1hcmtlcklkKGEpO0cubWF0cml4LnNldCh3LnBvc2UpLEcuaW5DdXJyZW50PSEwLHRoaXMudHJhbnNNYXRUb0dMTWF0KEcubWF0cml4LHRoaXMudHJhbnNmb3JtX21hdCksdGhpcy50cmFuc2Zvcm1HTF9SSD10aGlzLmFyZ2xDYW1lcmFWaWV3UkhmKHRoaXMudHJhbnNmb3JtX21hdCksdGhpcy5kaXNwYXRjaEV2ZW50KHtuYW1lOlwiZ2V0TkZUTWFya2VyXCIsdGFyZ2V0OnRoaXMsZGF0YTp7aW5kZXg6YSx0eXBlOkYsbWFya2VyOncsbWF0cml4OnRoaXMudHJhbnNmb3JtX21hdCxtYXRyaXhHTF9SSDp0aGlzLnRyYW5zZm9ybUdMX1JIfX0pfWVsc2Ugc2VsZi5uZnRNYXJrZXJGb3VuZD09PWEmJkRhdGUubm93KCktdGhpcy5uZnRNYXJrZXJGb3VuZFRpbWU+MjAwJiYodGhpcy5uZnRNYXJrZXJGb3VuZD0hMSx0aGlzLmRpc3BhdGNoRXZlbnQoe25hbWU6XCJsb3N0TkZUTWFya2VyXCIsdGFyZ2V0OnRoaXMsZGF0YTp7aW5kZXg6YSx0eXBlOkYsbWFya2VyOncsbWF0cml4OnRoaXMudHJhbnNmb3JtX21hdCxtYXRyaXhHTF9SSDp0aGlzLnRyYW5zZm9ybUdMX1JIfX0pKX1mb3IodmFyIGg9dGhpcy5nZXRNdWx0aU1hcmtlckNvdW50KCkscz0wO3M8aDtzKyspe3ZhciBSPXRoaXMuZ2V0TXVsdGlNYXJrZXJQYXR0ZXJuQ291bnQocykseT0hMTt0aGlzLmFydG9vbGtpdC5nZXRUcmFuc01hdE11bHRpU3F1YXJlUm9idXN0KHRoaXMuaWQscyksdGhpcy50cmFuc01hdFRvR0xNYXQodGhpcy5tYXJrZXJfdHJhbnNmb3JtX21hdCx0aGlzLnRyYW5zZm9ybV9tYXQpLHRoaXMudHJhbnNmb3JtR0xfUkg9dGhpcy5hcmdsQ2FtZXJhVmlld1JIZih0aGlzLnRyYW5zZm9ybV9tYXQpO2Zvcih2YXIgdD0wO3Q8Ujt0KyspaWYoKE09dGhpcy5nZXRNdWx0aUVhY2hNYXJrZXIocyx0KSkudmlzaWJsZT49MCl7eT0hMCx0aGlzLmRpc3BhdGNoRXZlbnQoe25hbWU6XCJnZXRNdWx0aU1hcmtlclwiLHRhcmdldDp0aGlzLGRhdGE6e211bHRpTWFya2VySWQ6cyxtYXRyaXg6dGhpcy50cmFuc2Zvcm1fbWF0LG1hdHJpeEdMX1JIOnRoaXMudHJhbnNmb3JtR0xfUkh9fSk7YnJlYWt9aWYoeSlmb3IodmFyIFM9MDtTPFI7UysrKXt2YXIgTT10aGlzLmdldE11bHRpRWFjaE1hcmtlcihzLFMpO3RoaXMudHJhbnNNYXRUb0dMTWF0KHRoaXMubWFya2VyX3RyYW5zZm9ybV9tYXQsdGhpcy50cmFuc2Zvcm1fbWF0KSx0aGlzLnRyYW5zZm9ybUdMX1JIPXRoaXMuYXJnbENhbWVyYVZpZXdSSGYodGhpcy50cmFuc2Zvcm1fbWF0KSx0aGlzLmRpc3BhdGNoRXZlbnQoe25hbWU6XCJnZXRNdWx0aU1hcmtlclN1YlwiLHRhcmdldDp0aGlzLGRhdGE6e211bHRpTWFya2VySWQ6cyxtYXJrZXJJbmRleDpTLG1hcmtlcjpNLG1hdHJpeDp0aGlzLnRyYW5zZm9ybV9tYXQsbWF0cml4R0xfUkg6dGhpcy50cmFuc2Zvcm1HTF9SSH19KX19dGhpcy5fYndwb2ludGVyJiZ0aGlzLmRlYnVnRHJhdygpfX0se2tleTpcImRldGVjdE5GVE1hcmtlclwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5hcnRvb2xraXQuZGV0ZWN0TkZUTWFya2VyKHRoaXMuaWQpfX0se2tleTpcInRyYWNrUGF0dGVybk1hcmtlcklkXCIsdmFsdWU6ZnVuY3Rpb24oQSxJKXt2YXIgZz10aGlzLnBhdHRlcm5NYXJrZXJzW0FdO3JldHVybiBnfHwodGhpcy5wYXR0ZXJuTWFya2Vyc1tBXT1nPXtpblByZXZpb3VzOiExLGluQ3VycmVudDohMSxtYXRyaXg6bmV3IEZsb2F0NjRBcnJheSgxMiksbWF0cml4R0xfUkg6bmV3IEZsb2F0NjRBcnJheSgxMiksbWFya2VyV2lkdGg6SXx8dGhpcy5kZWZhdWx0TWFya2VyV2lkdGh9KSxJJiYoZy5tYXJrZXJXaWR0aD1JKSxnfX0se2tleTpcInRyYWNrQmFyY29kZU1hcmtlcklkXCIsdmFsdWU6ZnVuY3Rpb24oQSxJKXt2YXIgZz10aGlzLmJhcmNvZGVNYXJrZXJzW0FdO3JldHVybiBnfHwodGhpcy5iYXJjb2RlTWFya2Vyc1tBXT1nPXtpblByZXZpb3VzOiExLGluQ3VycmVudDohMSxtYXRyaXg6bmV3IEZsb2F0NjRBcnJheSgxMiksbWF0cml4R0xfUkg6bmV3IEZsb2F0NjRBcnJheSgxMiksbWFya2VyV2lkdGg6SXx8dGhpcy5kZWZhdWx0TWFya2VyV2lkdGh9KSxJJiYoZy5tYXJrZXJXaWR0aD1JKSxnfX0se2tleTpcInRyYWNrTkZUTWFya2VySWRcIix2YWx1ZTpmdW5jdGlvbihBLEkpe3ZhciBnPXRoaXMubmZ0TWFya2Vyc1tBXTtyZXR1cm4gZ3x8KHRoaXMubmZ0TWFya2Vyc1tBXT1nPXtpblByZXZpb3VzOiExLGluQ3VycmVudDohMSxtYXRyaXg6bmV3IEZsb2F0NjRBcnJheSgxMiksbWF0cml4R0xfUkg6bmV3IEZsb2F0NjRBcnJheSgxMiksbWFya2VyV2lkdGg6SXx8dGhpcy5kZWZhdWx0TWFya2VyV2lkdGh9KSxJJiYoZy5tYXJrZXJXaWR0aD1JKSxnfX0se2tleTpcImdldE11bHRpTWFya2VyQ291bnRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmFydG9vbGtpdC5nZXRNdWx0aU1hcmtlckNvdW50KHRoaXMuaWQpfX0se2tleTpcImdldE11bHRpTWFya2VyUGF0dGVybkNvdW50XCIsdmFsdWU6ZnVuY3Rpb24oQSl7cmV0dXJuIHRoaXMuYXJ0b29sa2l0LmdldE11bHRpTWFya2VyTnVtKHRoaXMuaWQsQSl9fSx7a2V5OlwiYWRkRXZlbnRMaXN0ZW5lclwiLHZhbHVlOmZ1bmN0aW9uKEEsSSl7dGhpcy5saXN0ZW5lcnNbQV18fCh0aGlzLmxpc3RlbmVyc1tBXT1bXSksdGhpcy5saXN0ZW5lcnNbQV0ucHVzaChJKX19LHtrZXk6XCJyZW1vdmVFdmVudExpc3RlbmVyXCIsdmFsdWU6ZnVuY3Rpb24oQSxJKXtpZih0aGlzLmxpc3RlbmVyc1tBXSl7dmFyIGc9dGhpcy5saXN0ZW5lcnNbQV0uaW5kZXhPZihJKTtnPi0xJiZ0aGlzLmxpc3RlbmVyc1tBXS5zcGxpY2UoZywxKX19fSx7a2V5OlwiZGlzcGF0Y2hFdmVudFwiLHZhbHVlOmZ1bmN0aW9uKEEpe3ZhciBJPXRoaXMubGlzdGVuZXJzW0EubmFtZV07aWYoSSlmb3IodmFyIGc9MDtnPEkubGVuZ3RoO2crKylJW2ddLmNhbGwodGhpcyxBKX19LHtrZXk6XCJkZWJ1Z1NldHVwXCIsdmFsdWU6ZnVuY3Rpb24oKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgZG9jdW1lbnQ/KGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5jYW52YXMpLHRoaXMuc2V0RGVidWdNb2RlKCEwKSx0aGlzLl9id3BvaW50ZXI9dGhpcy5nZXRQcm9jZXNzaW5nSW1hZ2UoKSk6Y29uc29sZS5sb2coXCJkZWJ1Z1NldHVwKCkgY3VycmVudGx5IG9ubHkgc3VwcG9ydHMgQnJvd3NlciBlbnZpcm9ubWVudHNcIil9fSx7a2V5OlwiZGVidWdEcmF3XCIsdmFsdWU6ZnVuY3Rpb24oKXtmb3IodmFyIEE9bmV3IFVpbnQ4Q2xhbXBlZEFycmF5KHRoaXMuYXJ0b29sa2l0Lmluc3RhbmNlLkhFQVBVOC5idWZmZXIsdGhpcy5fYndwb2ludGVyLHRoaXMuZnJhbWVzaXplKSxJPW5ldyBJbWFnZURhdGEobmV3IFVpbnQ4Q2xhbXBlZEFycmF5KHRoaXMuY2FudmFzLndpZHRoKnRoaXMuY2FudmFzLmhlaWdodCo0KSx0aGlzLmNhbnZhcy53aWR0aCx0aGlzLmNhbnZhcy5oZWlnaHQpLGc9MCxCPTA7ZzxBLmxlbmd0aDtnKyssQis9NCl7dmFyIEM9QVtnXTtJLmRhdGFbQiswXT1DLEkuZGF0YVtCKzFdPUMsSS5kYXRhW0IrMl09QyxJLmRhdGFbQiszXT0yNTV9dGhpcy5jdHgucHV0SW1hZ2VEYXRhKEksMCwwKTtmb3IodmFyIFE9dGhpcy5nZXRNYXJrZXJOdW0oKSxFPTA7RTxRO0UrKyl0aGlzLmRyYXdEZWJ1Z01hcmtlcih0aGlzLmdldE1hcmtlcihFKSl9fSx7a2V5OlwiZHJhd0RlYnVnTWFya2VyXCIsdmFsdWU6ZnVuY3Rpb24oQSl7dmFyIEk9QS52ZXJ0ZXgsZz1BLnBvcyxCPXRoaXMuY3R4O0IubGluZVdpZHRoPTUsQi5zdHJva2VTdHlsZT1cInJlZFwiLEIuYmVnaW5QYXRoKCksQi5tb3ZlVG8oSVswXVswXSxJWzBdWzFdKSxCLmxpbmVUbyhJWzFdWzBdLElbMV1bMV0pLEIuc3Ryb2tlKCksQi5iZWdpblBhdGgoKSxCLm1vdmVUbyhJWzJdWzBdLElbMl1bMV0pLEIubGluZVRvKElbM11bMF0sSVszXVsxXSksQi5zdHJva2UoKSxCLnN0cm9rZVN0eWxlPVwiZ3JlZW5cIixCLmJlZ2luUGF0aCgpLEIubGluZVRvKElbMV1bMF0sSVsxXVsxXSksQi5saW5lVG8oSVsyXVswXSxJWzJdWzFdKSxCLnN0cm9rZSgpLEIuYmVnaW5QYXRoKCksQi5tb3ZlVG8oSVszXVswXSxJWzNdWzFdKSxCLmxpbmVUbyhJWzBdWzBdLElbMF1bMV0pLEIuc3Ryb2tlKCksQi5iZWdpblBhdGgoKSxCLmFyYyhnWzBdLGdbMV0sOCwwLDIqTWF0aC5QSSksQi5maWxsU3R5bGU9XCJyZWRcIixCLmZpbGwoKX19LHtrZXk6XCJsb2FkTWFya2VyXCIsdmFsdWU6KGE9SShvKCkubWFyaygoZnVuY3Rpb24gQShJKXtyZXR1cm4gbygpLndyYXAoKGZ1bmN0aW9uKEEpe2Zvcig7Oylzd2l0Y2goQS5wcmV2PUEubmV4dCl7Y2FzZSAwOnJldHVybiBBLm5leHQ9Mix0aGlzLmFydG9vbGtpdC5hZGRNYXJrZXIodGhpcy5pZCxJKTtjYXNlIDI6cmV0dXJuIEEuYWJydXB0KFwicmV0dXJuXCIsQS5zZW50KTtjYXNlIDM6Y2FzZVwiZW5kXCI6cmV0dXJuIEEuc3RvcCgpfX0pLEEsdGhpcyl9KSkpLGZ1bmN0aW9uKEEpe3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OlwibG9hZE11bHRpTWFya2VyXCIsdmFsdWU6KEQ9SShvKCkubWFyaygoZnVuY3Rpb24gQShJKXtyZXR1cm4gbygpLndyYXAoKGZ1bmN0aW9uKEEpe2Zvcig7Oylzd2l0Y2goQS5wcmV2PUEubmV4dCl7Y2FzZSAwOnJldHVybiBBLm5leHQ9Mix0aGlzLmFydG9vbGtpdC5hZGRNdWx0aU1hcmtlcih0aGlzLmlkLEkpO2Nhc2UgMjpyZXR1cm4gQS5hYnJ1cHQoXCJyZXR1cm5cIixBLnNlbnQpO2Nhc2UgMzpjYXNlXCJlbmRcIjpyZXR1cm4gQS5zdG9wKCl9fSksQSx0aGlzKX0pKSksZnVuY3Rpb24oQSl7cmV0dXJuIEQuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJsb2FkTkZUTWFya2VyXCIsdmFsdWU6KGk9SShvKCkubWFyaygoZnVuY3Rpb24gQShJKXt2YXIgZztyZXR1cm4gbygpLndyYXAoKGZ1bmN0aW9uKEEpe2Zvcig7Oylzd2l0Y2goQS5wcmV2PUEubmV4dCl7Y2FzZSAwOnJldHVybiBBLm5leHQ9Mix0aGlzLmFydG9vbGtpdC5hZGRORlRNYXJrZXIodGhpcy5pZCxJKTtjYXNlIDI6cmV0dXJuIGc9QS5zZW50LHRoaXMubmZ0TWFya2VyQ291bnQ9ZysxLEEuYWJydXB0KFwicmV0dXJuXCIsZyk7Y2FzZSA1OmNhc2VcImVuZFwiOnJldHVybiBBLnN0b3AoKX19KSxBLHRoaXMpfSkpKSxmdW5jdGlvbihBKXtyZXR1cm4gaS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcImdldFRyYW5zTWF0U3F1YXJlXCIsdmFsdWU6ZnVuY3Rpb24oQSxJLGcpe3JldHVybiB0aGlzLmFydG9vbGtpdC5nZXRUcmFuc01hdFNxdWFyZSh0aGlzLmlkLEEsSSksZy5zZXQodGhpcy5tYXJrZXJfdHJhbnNmb3JtX21hdCksZ319LHtrZXk6XCJnZXRUcmFuc01hdFNxdWFyZUNvbnRcIix2YWx1ZTpmdW5jdGlvbihBLEksZyxCKXtyZXR1cm4gdGhpcy5tYXJrZXJfdHJhbnNmb3JtX21hdC5zZXQoZyksdGhpcy5hcnRvb2xraXQuZ2V0VHJhbnNNYXRTcXVhcmVDb250KHRoaXMuaWQsQSxJKSxCLnNldCh0aGlzLm1hcmtlcl90cmFuc2Zvcm1fbWF0KSxCfX0se2tleTpcImdldFRyYW5zTWF0TXVsdGlTcXVhcmVcIix2YWx1ZTpmdW5jdGlvbihBLEkpe3JldHVybiB0aGlzLmFydG9vbGtpdC5nZXRUcmFuc01hdE11bHRpU3F1YXJlKHRoaXMuaWQsQSksSS5zZXQodGhpcy5tYXJrZXJfdHJhbnNmb3JtX21hdCksSX19LHtrZXk6XCJnZXRUcmFuc01hdE11bHRpU3F1YXJlUm9idXN0XCIsdmFsdWU6ZnVuY3Rpb24oQSxJKXtyZXR1cm4gdGhpcy5hcnRvb2xraXQuZ2V0VHJhbnNNYXRNdWx0aVNxdWFyZSh0aGlzLmlkLEEpLEkuc2V0KHRoaXMubWFya2VyX3RyYW5zZm9ybV9tYXQpLEl9fSx7a2V5OlwidHJhbnNNYXRUb0dMTWF0XCIsdmFsdWU6ZnVuY3Rpb24oQSxJLGcpe3JldHVybiBudWxsPT1JJiYoST1uZXcgRmxvYXQ2NEFycmF5KDE2KSksSVswXT1BWzBdLElbNF09QVsxXSxJWzhdPUFbMl0sSVsxMl09QVszXSxJWzFdPUFbNF0sSVs1XT1BWzVdLElbOV09QVs2XSxJWzEzXT1BWzddLElbMl09QVs4XSxJWzZdPUFbOV0sSVsxMF09QVsxMF0sSVsxNF09QVsxMV0sSVszXT0wLElbN109MCxJWzExXT0wLElbMTVdPTEsbnVsbCE9ZyYmMCE9PWcmJihJWzEyXSo9ZyxJWzEzXSo9ZyxJWzE0XSo9ZyksSX19LHtrZXk6XCJhcmdsQ2FtZXJhVmlld1JIZlwiLHZhbHVlOmZ1bmN0aW9uKEEsSSxnKXt2YXIgQjtyZXR1cm4oQj1udWxsPT1JP25ldyBGbG9hdDY0QXJyYXkoMTYpOkkpWzBdPUFbMF0sQls0XT1BWzRdLEJbOF09QVs4XSxCWzEyXT1BWzEyXSxCWzFdPS1BWzFdLEJbNV09LUFbNV0sQls5XT0tQVs5XSxCWzEzXT0tQVsxM10sQlsyXT0tQVsyXSxCWzZdPS1BWzZdLEJbMTBdPS1BWzEwXSxCWzE0XT0tQVsxNF0sQlszXT0wLEJbN109MCxCWzExXT0wLEJbMTVdPTEsbnVsbCE9ZyYmMCE9PWcmJihCWzEyXSo9ZyxCWzEzXSo9ZyxCWzE0XSo9ZyksQn19LHtrZXk6XCJkZXRlY3RNYXJrZXJcIix2YWx1ZTpmdW5jdGlvbihBKXtyZXR1cm4gdGhpcy5fY29weUltYWdlVG9IZWFwKEEpP3RoaXMuYXJ0b29sa2l0LmRldGVjdE1hcmtlcih0aGlzLmlkKTotOTl9fSx7a2V5OlwiZ2V0TWFya2VyTnVtXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hcnRvb2xraXQuZ2V0TWFya2VyTnVtKHRoaXMuaWQpfX0se2tleTpcImdldE1hcmtlclwiLHZhbHVlOmZ1bmN0aW9uKEEpe2lmKDA9PT10aGlzLmFydG9vbGtpdC5nZXRNYXJrZXIodGhpcy5pZCxBKSlyZXR1cm4gdGhpcy5hcnRvb2xraXQubWFya2VySW5mb319LHtrZXk6XCJnZXRORlRNYXJrZXJcIix2YWx1ZTpmdW5jdGlvbihBKXtpZigwPT09dGhpcy5hcnRvb2xraXQuZ2V0TkZUTWFya2VyKHRoaXMuaWQsQSkpcmV0dXJuIHRoaXMuYXJ0b29sa2l0Lk5GVE1hcmtlckluZm99fSx7a2V5Olwic2V0TWFya2VySW5mb1ZlcnRleFwiLHZhbHVlOmZ1bmN0aW9uKEEsSSl7Zm9yKHZhciBnPTA7ZzxJLmxlbmd0aDtnKyspdGhpcy5tYXJrZXJfdHJhbnNmb3JtX21hdFsyKmcrMF09SVtnXVswXSx0aGlzLm1hcmtlcl90cmFuc2Zvcm1fbWF0WzIqZysxXT1JW2ddWzFdO3JldHVybiB0aGlzLmFydG9vbGtpdC5zZXRNYXJrZXJJbmZvVmVydGV4KHRoaXMuaWQsQSl9fSx7a2V5OlwiY2xvbmVNYXJrZXJJbmZvXCIsdmFsdWU6ZnVuY3Rpb24oQSl7cmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoQSkpfX0se2tleTpcImdldE11bHRpRWFjaE1hcmtlclwiLHZhbHVlOmZ1bmN0aW9uKEEsSSl7aWYoMD09PXRoaXMuYXJ0b29sa2l0LmdldE11bHRpRWFjaE1hcmtlcih0aGlzLmlkLEEsSSkpcmV0dXJuIHRoaXMuYXJ0b29sa2l0Lm11bHRpRWFjaE1hcmtlckluZm99fSx7a2V5OlwiZ2V0VHJhbnNmb3JtYXRpb25NYXRyaXhcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnRyYW5zZm9ybV9tYXR9fSx7a2V5OlwiZ2V0Q2FtZXJhTWF0cml4XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jYW1lcmFfbWF0fX0se2tleTpcImdldE1hcmtlclRyYW5zZm9ybWF0aW9uTWF0cml4XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXJrZXJfdHJhbnNmb3JtX21hdH19LHtrZXk6XCJzZXREZWJ1Z01vZGVcIix2YWx1ZTpmdW5jdGlvbihBKXtyZXR1cm4gdGhpcy5hcnRvb2xraXQuc2V0RGVidWdNb2RlKHRoaXMuaWQsQSl9fSx7a2V5OlwiZ2V0RGVidWdNb2RlXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hcnRvb2xraXQuZ2V0RGVidWdNb2RlKHRoaXMuaWQpfX0se2tleTpcImdldFByb2Nlc3NpbmdJbWFnZVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXJ0b29sa2l0LmdldFByb2Nlc3NpbmdJbWFnZSh0aGlzLmlkKX19LHtrZXk6XCJzZXRMb2dMZXZlbFwiLHZhbHVlOmZ1bmN0aW9uKEEpe3JldHVybiB0aGlzLmFydG9vbGtpdC5zZXRMb2dMZXZlbChBKX19LHtrZXk6XCJnZXRMb2dMZXZlbFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXJ0b29sa2l0LmdldExvZ0xldmVsKCl9fSx7a2V5Olwic2V0TWFya2VySW5mb0RpclwiLHZhbHVlOmZ1bmN0aW9uKEEsSSl7cmV0dXJuIHRoaXMuYXJ0b29sa2l0LnNldE1hcmtlckluZm9EaXIodGhpcy5pZCxBLEkpfX0se2tleTpcInNldFByb2plY3Rpb25OZWFyUGxhbmVcIix2YWx1ZTpmdW5jdGlvbihBKXtyZXR1cm4gdGhpcy5hcnRvb2xraXQuc2V0UHJvamVjdGlvbk5lYXJQbGFuZSh0aGlzLmlkLEEpfX0se2tleTpcImdldFByb2plY3Rpb25OZWFyUGxhbmVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmFydG9vbGtpdC5nZXRQcm9qZWN0aW9uTmVhclBsYW5lKHRoaXMuaWQpfX0se2tleTpcInNldFByb2plY3Rpb25GYXJQbGFuZVwiLHZhbHVlOmZ1bmN0aW9uKEEpe3JldHVybiB0aGlzLmFydG9vbGtpdC5zZXRQcm9qZWN0aW9uRmFyUGxhbmUodGhpcy5pZCxBKX19LHtrZXk6XCJnZXRQcm9qZWN0aW9uRmFyUGxhbmVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmFydG9vbGtpdC5nZXRQcm9qZWN0aW9uRmFyUGxhbmUodGhpcy5pZCl9fSx7a2V5Olwic2V0VGhyZXNob2xkTW9kZVwiLHZhbHVlOmZ1bmN0aW9uKEEpe3JldHVybiB0aGlzLmFydG9vbGtpdC5zZXRUaHJlc2hvbGRNb2RlKHRoaXMuaWQsQSl9fSx7a2V5OlwiZ2V0VGhyZXNob2xkTW9kZVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXJ0b29sa2l0LmdldFRocmVzaG9sZE1vZGUodGhpcy5pZCl9fSx7a2V5Olwic2V0VGhyZXNob2xkXCIsdmFsdWU6ZnVuY3Rpb24oQSl7cmV0dXJuIHRoaXMuYXJ0b29sa2l0LnNldFRocmVzaG9sZCh0aGlzLmlkLEEpfX0se2tleTpcImdldFRocmVzaG9sZFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXJ0b29sa2l0LmdldFRocmVzaG9sZCh0aGlzLmlkKX19LHtrZXk6XCJzZXRQYXR0ZXJuRGV0ZWN0aW9uTW9kZVwiLHZhbHVlOmZ1bmN0aW9uKEEpe3JldHVybiB0aGlzLmFydG9vbGtpdC5zZXRQYXR0ZXJuRGV0ZWN0aW9uTW9kZSh0aGlzLmlkLEEpfX0se2tleTpcImdldFBhdHRlcm5EZXRlY3Rpb25Nb2RlXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hcnRvb2xraXQuZ2V0UGF0dGVybkRldGVjdGlvbk1vZGUodGhpcy5pZCl9fSx7a2V5Olwic2V0TWF0cml4Q29kZVR5cGVcIix2YWx1ZTpmdW5jdGlvbihBKXtyZXR1cm4gdGhpcy5hcnRvb2xraXQuc2V0TWF0cml4Q29kZVR5cGUodGhpcy5pZCxBKX19LHtrZXk6XCJnZXRNYXRyaXhDb2RlVHlwZVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXJ0b29sa2l0LmdldE1hdHJpeENvZGVUeXBlKHRoaXMuaWQpfX0se2tleTpcInNldExhYmVsaW5nTW9kZVwiLHZhbHVlOmZ1bmN0aW9uKEEpe3JldHVybiB0aGlzLmFydG9vbGtpdC5zZXRMYWJlbGluZ01vZGUodGhpcy5pZCxBKX19LHtrZXk6XCJnZXRMYWJlbGluZ01vZGVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmFydG9vbGtpdC5nZXRMYWJlbGluZ01vZGUodGhpcy5pZCl9fSx7a2V5Olwic2V0UGF0dFJhdGlvXCIsdmFsdWU6ZnVuY3Rpb24oQSl7cmV0dXJuIHRoaXMuYXJ0b29sa2l0LnNldFBhdHRSYXRpbyh0aGlzLmlkLEEpfX0se2tleTpcImdldFBhdHRSYXRpb1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXJ0b29sa2l0LmdldFBhdHRSYXRpbyh0aGlzLmlkKX19LHtrZXk6XCJzZXRJbWFnZVByb2NNb2RlXCIsdmFsdWU6ZnVuY3Rpb24oQSl7cmV0dXJuIHRoaXMuYXJ0b29sa2l0LnNldEltYWdlUHJvY01vZGUodGhpcy5pZCxBKX19LHtrZXk6XCJnZXRJbWFnZVByb2NNb2RlXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hcnRvb2xraXQuZ2V0SW1hZ2VQcm9jTW9kZSh0aGlzLmlkKX19LHtrZXk6XCJfaW5pdGlhbGl6ZVwiLHZhbHVlOihRPUkobygpLm1hcmsoKGZ1bmN0aW9uIEEoKXt2YXIgSSxnPXRoaXM7cmV0dXJuIG8oKS53cmFwKChmdW5jdGlvbihBKXtmb3IoOzspc3dpdGNoKEEucHJldj1BLm5leHQpe2Nhc2UgMDpyZXR1cm4gQS5uZXh0PTIsKG5ldyBVKS5pbml0KCk7Y2FzZSAyOnJldHVybiB0aGlzLmFydG9vbGtpdD1BLnNlbnQsY29uc29sZS5sb2coXCJbQVJDb250cm9sbGVyXVwiLFwiQVJUb29sa2l0IGluaXRpYWxpemVkXCIpLEEubmV4dD02LHRoaXMuYXJ0b29sa2l0LmxvYWRDYW1lcmEodGhpcy5jYW1lcmFQYXJhbSk7Y2FzZSA2OnJldHVybiB0aGlzLmNhbWVyYUlkPUEuc2VudCxjb25zb2xlLmxvZyhcIltBUkNvbnRyb2xsZXJdXCIsXCJDYW1lcmEgcGFyYW1zIGxvYWRlZCB3aXRoIElEXCIsdGhpcy5jYW1lcmFJZCksdGhpcy5pZD10aGlzLmFydG9vbGtpdC5zZXR1cCh0aGlzLndpZHRoLHRoaXMuaGVpZ2h0LHRoaXMuY2FtZXJhSWQpLGNvbnNvbGUubG9nKFwiW0FSQ29udHJvbGxlcl1cIixcIkdvdCBJRCBmcm9tIHNldHVwXCIsdGhpcy5pZCksdGhpcy5faW5pdE5GVCgpLEk9YXJ0b29sa2l0LmZyYW1lTWFsbG9jLHRoaXMuZnJhbWVwb2ludGVyPUkuZnJhbWVwb2ludGVyLHRoaXMuZnJhbWVzaXplPUkuZnJhbWVzaXplLHRoaXMudmlkZW9MdW1hUG9pbnRlcj1JLnZpZGVvTHVtYVBvaW50ZXIsdGhpcy5kYXRhSGVhcD1uZXcgVWludDhBcnJheSh0aGlzLmFydG9vbGtpdC5pbnN0YW5jZS5IRUFQVTguYnVmZmVyLHRoaXMuZnJhbWVwb2ludGVyLHRoaXMuZnJhbWVzaXplKSx0aGlzLnZpZGVvTHVtYT1uZXcgVWludDhBcnJheSh0aGlzLmFydG9vbGtpdC5pbnN0YW5jZS5IRUFQVTguYnVmZmVyLHRoaXMudmlkZW9MdW1hUG9pbnRlcix0aGlzLmZyYW1lc2l6ZS80KSx0aGlzLmNhbWVyYV9tYXQ9bmV3IEZsb2F0NjRBcnJheSh0aGlzLmFydG9vbGtpdC5pbnN0YW5jZS5IRUFQVTguYnVmZmVyLEkuY2FtZXJhLDE2KSx0aGlzLm1hcmtlcl90cmFuc2Zvcm1fbWF0PW5ldyBGbG9hdDY0QXJyYXkodGhpcy5hcnRvb2xraXQuaW5zdGFuY2UuSEVBUFU4LmJ1ZmZlcixJLnRyYW5zZm9ybSwxMiksdGhpcy5zZXRQcm9qZWN0aW9uTmVhclBsYW5lKC4xKSx0aGlzLnNldFByb2plY3Rpb25GYXJQbGFuZSgxZTMpLHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7Zy5kaXNwYXRjaEV2ZW50KHtuYW1lOlwibG9hZFwiLHRhcmdldDpnfSl9KSwxKSxBLmFicnVwdChcInJldHVyblwiLHRoaXMpO2Nhc2UgMjM6Y2FzZVwiZW5kXCI6cmV0dXJuIEEuc3RvcCgpfX0pLEEsdGhpcyl9KSkpLGZ1bmN0aW9uKCl7cmV0dXJuIFEuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJfaW5pdE5GVFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5hcnRvb2xraXQuc2V0dXBBUjIodGhpcy5pZCl9fSx7a2V5OlwiX2NvcHlJbWFnZVRvSGVhcFwiLHZhbHVlOmZ1bmN0aW9uKEEpe3ZhciBJO2lmKEF8fChBPXRoaXMuaW1hZ2UpLEEuZGF0YT9JPUEuZGF0YToodGhpcy5jdHguc2F2ZSgpLFwicG9ydHJhaXRcIj09PXRoaXMub3JpZW50YXRpb24/dGhpcy5jdHguZHJhd0ltYWdlKEEsMCwwLHRoaXMuY2FudmFzLmhlaWdodCx0aGlzLmNhbnZhcy53aWR0aCk6dGhpcy5jdHguZHJhd0ltYWdlKEEsMCwwLHRoaXMuY2FudmFzLndpZHRoLHRoaXMuY2FudmFzLmhlaWdodCksdGhpcy5jdHgucmVzdG9yZSgpLEk9dGhpcy5jdHguZ2V0SW1hZ2VEYXRhKDAsMCx0aGlzLmNhbnZhcy53aWR0aCx0aGlzLmNhbnZhcy5oZWlnaHQpLmRhdGEpLHRoaXMudmlkZW9MdW1hKWZvcih2YXIgZz0wLEI9MDtCPHRoaXMudmlkZW9TaXplO0IrKyl7dmFyIEM9SVtnKzBdLFE9SVtnKzFdLEU9SVtnKzJdO3RoaXMudmlkZW9MdW1hW0JdPUMrQytDK0UrUStRK1ErUT4+MyxnKz00fXJldHVybiEhdGhpcy5kYXRhSGVhcCYmKHRoaXMuZGF0YUhlYXAuc2V0KEkpLCEwKX19XSxbe2tleTpcImluaXRXaXRoRGltZW5zaW9uc1wiLHZhbHVlOihCPUkobygpLm1hcmsoKGZ1bmN0aW9uIEkoZyxCLEMsUSl7dmFyIEU7cmV0dXJuIG8oKS53cmFwKChmdW5jdGlvbihJKXtmb3IoOzspc3dpdGNoKEkucHJldj1JLm5leHQpe2Nhc2UgMDpyZXR1cm4gRT1uZXcgQShnLEIsQyxRKSxJLm5leHQ9MyxFLl9pbml0aWFsaXplKCk7Y2FzZSAzOnJldHVybiBJLmFicnVwdChcInJldHVyblwiLEkuc2VudCk7Y2FzZSA0OmNhc2VcImVuZFwiOnJldHVybiBJLnN0b3AoKX19KSxJKX0pKSksZnVuY3Rpb24oQSxJLGcsQyl7cmV0dXJuIEIuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJpbml0V2l0aEltYWdlXCIsdmFsdWU6KGc9SShvKCkubWFyaygoZnVuY3Rpb24gSShnLEIsQyl7dmFyIFEsRSxpO3JldHVybiBvKCkud3JhcCgoZnVuY3Rpb24oSSl7Zm9yKDs7KXN3aXRjaChJLnByZXY9SS5uZXh0KXtjYXNlIDA6cmV0dXJuIFE9Zy52aWRlb1dpZHRofHxnLndpZHRoLEU9Zy52aWRlb0hlaWdodHx8Zy5oZWlnaHQsSS5uZXh0PTQsQS5pbml0V2l0aERpbWVuc2lvbnMoUSxFLEIsQyk7Y2FzZSA0OnJldHVybihpPUkuc2VudCkuaW1hZ2U9ZyxJLmFicnVwdChcInJldHVyblwiLGkpO2Nhc2UgNzpjYXNlXCJlbmRcIjpyZXR1cm4gSS5zdG9wKCl9fSksSSl9KSkpLGZ1bmN0aW9uKEEsSSxCKXtyZXR1cm4gZy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX1dKSxBfSgpO2NvbnN0IG49e0FSVG9vbGtpdDpVLEFSQ29udHJvbGxlcjpNfX0pKCksQi5kZWZhdWx0fSkoKX0pKTsiLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgQXJCYXNlQ29udHJvbHMgZnJvbSAnLi4vdGhyZWV4L3RocmVleC1hcmJhc2Vjb250cm9scyc7XG5pbXBvcnQgQXJNYXJrZXJDb250cm9scyBmcm9tICcuLi90aHJlZXgvYXJqcy1tYXJrZXJjb250cm9scyc7XG5pbXBvcnQgQXJNdWx0aU1hcmtlckNvbnRyb2xzIGZyb20gJy4vYXJqcy1tYXJrZXJzYXJlYWNvbnRyb2xzJztcblxuY29uc3QgTWFya2Vyc0FyZWFDb250cm9scyA9IGZ1bmN0aW9uKGFyVG9vbGtpdENvbnRleHQsIG9iamVjdDNkLCBwYXJhbWV0ZXJzKXtcblx0dmFyIF90aGlzID0gdGhpc1xuXHRBckJhc2VDb250cm9scy5jYWxsKHRoaXMsIG9iamVjdDNkKVxuXG5cdGlmKCBhcmd1bWVudHMubGVuZ3RoID4gMyApXHRjb25zb2xlLmFzc2VydCgnd3JvbmcgYXBpIGZvcicsIE1hcmtlcnNBcmVhQ29udHJvbHMpXG5cblx0Ly8gaGF2ZSBhIHBhcmFtZXRlcnMgaW4gYXJndW1lbnRcblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdC8vIGxpc3Qgb2YgY29udHJvbHMgZm9yIGVhY2ggc3ViTWFya2VyXG5cdFx0c3ViTWFya2Vyc0NvbnRyb2xzOiBwYXJhbWV0ZXJzLnN1Yk1hcmtlcnNDb250cm9scyxcblx0XHQvLyBsaXN0IG9mIHBvc2UgZm9yIGVhY2ggc3ViTWFya2VyIHJlbGF0aXZlIHRvIHRoZSBvcmlnaW5cblx0XHRzdWJNYXJrZXJQb3NlczogcGFyYW1ldGVycy5zdWJNYXJrZXJQb3Nlcyxcblx0XHQvLyBjaGFuZ2UgbWF0cml4IG1vZGUgLSBbbW9kZWxWaWV3TWF0cml4LCBjYW1lcmFUcmFuc2Zvcm1NYXRyaXhdXG5cdFx0Y2hhbmdlTWF0cml4TW9kZSA6IHBhcmFtZXRlcnMuY2hhbmdlTWF0cml4TW9kZSAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5jaGFuZ2VNYXRyaXhNb2RlIDogJ21vZGVsVmlld01hdHJpeCcsXG5cdH1cblx0XG5cdHRoaXMub2JqZWN0M2QudmlzaWJsZSA9IGZhbHNlXG5cdC8vIGhvbm9yIG9ic29sZXRlIHN0dWZmIC0gYWRkIGEgd2FybmluZyB0byB1c2Vcblx0dGhpcy5zdWJNYXJrZXJzQ29udHJvbHMgPSB0aGlzLnBhcmFtZXRlcnMuc3ViTWFya2Vyc0NvbnRyb2xzXG5cdHRoaXMuc3ViTWFya2VyUG9zZXMgPSB0aGlzLnBhcmFtZXRlcnMuc3ViTWFya2VyUG9zZXNcblxuXHQvLyBsaXN0ZW4gdG8gYXJUb29sa2l0Q29udGV4dCBldmVudCAnc291cmNlUHJvY2Vzc2VkJ1xuXHQvLyAtIGFmdGVyIHdlIGZ1bGx5IHByb2Nlc3NlZCBvbmUgaW1hZ2UsIGFrYSB3aGVuIHdlIGtub3cgYWxsIGRldGVjdGVkIHBvc2VzIGluIGl0XG5cdGFyVG9vbGtpdENvbnRleHQuYWRkRXZlbnRMaXN0ZW5lcignc291cmNlUHJvY2Vzc2VkJywgZnVuY3Rpb24oKXtcblx0XHRfdGhpcy5fb25Tb3VyY2VQcm9jZXNzZWQoKVxuXHR9KVxufVxuXG5NYXJrZXJzQXJlYUNvbnRyb2xzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEFyQmFzZUNvbnRyb2xzLnByb3RvdHlwZSApO1xuTWFya2Vyc0FyZWFDb250cm9scy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNYXJrZXJzQXJlYUNvbnRyb2xzO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vXHRcdENvZGUgU2VwYXJhdG9yXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG4vKipcbiAqIFdoYXQgdG8gZG8gd2hlbiBhIGltYWdlIHNvdXJjZSBpcyBmdWxseSBwcm9jZXNzZWRcbiAqL1xuTWFya2Vyc0FyZWFDb250cm9scy5wcm90b3R5cGUuX29uU291cmNlUHJvY2Vzc2VkID0gZnVuY3Rpb24oKXtcblx0dmFyIF90aGlzID0gdGhpc1xuXHR2YXIgc3RhdHMgPSB7XG5cdFx0Y291bnQ6IDAsXG5cdFx0cG9zaXRpb24gOiB7XG5cdFx0XHRzdW06IG5ldyBUSFJFRS5WZWN0b3IzKDAsMCwwKSxcblx0XHRcdGF2ZXJhZ2U6IG5ldyBUSFJFRS5WZWN0b3IzKDAsMCwwKSxcblx0XHR9LFxuXHRcdHF1YXRlcm5pb24gOiB7XG5cdFx0XHRzdW06IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKDAsMCwwLDApLFxuXHRcdFx0YXZlcmFnZTogbmV3IFRIUkVFLlF1YXRlcm5pb24oMCwwLDAsMCksXG5cdFx0fSxcblx0XHRzY2FsZSA6IHtcblx0XHRcdHN1bTogbmV3IFRIUkVFLlZlY3RvcjMoMCwwLDApLFxuXHRcdFx0YXZlcmFnZTogbmV3IFRIUkVFLlZlY3RvcjMoMCwwLDApLFxuXHRcdH0sXG5cdH1cblxuXHR2YXIgZmlyc3RRdWF0ZXJuaW9uID0gX3RoaXMucGFyYW1ldGVycy5zdWJNYXJrZXJzQ29udHJvbHNbMF0ub2JqZWN0M2QucXVhdGVybmlvblxuXG5cdHRoaXMucGFyYW1ldGVycy5zdWJNYXJrZXJzQ29udHJvbHMuZm9yRWFjaChmdW5jdGlvbihtYXJrZXJDb250cm9scywgbWFya2VySW5kZXgpe1xuXHRcdFxuXHRcdHZhciBtYXJrZXJPYmplY3QzZCA9IG1hcmtlckNvbnRyb2xzLm9iamVjdDNkXG5cdFx0Ly8gaWYgdGhpcyBtYXJrZXIgaXMgbm90IHZpc2libGUsIGlnbm9yZSBpdFxuXHRcdGlmKCBtYXJrZXJPYmplY3QzZC52aXNpYmxlID09PSBmYWxzZSApXHRyZXR1cm5cblxuXHRcdC8vIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCBvZiB0aGlzLm9iamVjdDNkIGFjY29yZGluZyB0byB0aGlzIHN1Yi1tYXJrZXJzXG5cdFx0dmFyIG1hdHJpeCA9IG1hcmtlck9iamVjdDNkLm1hdHJpeC5jbG9uZSgpXG5cdFx0dmFyIG1hcmtlclBvc2UgPSBfdGhpcy5wYXJhbWV0ZXJzLnN1Yk1hcmtlclBvc2VzW21hcmtlckluZGV4XVxuXHRcdG1hdHJpeC5tdWx0aXBseShuZXcgVEhSRUUuTWF0cml4NCgpLmdldEludmVyc2UobWFya2VyUG9zZSkpXG5cblx0XHQvLyBkZWNvbXBvc2UgdGhlIG1hdHJpeCBpbnRvIC5wb3NpdGlvbiwgLnF1YXRlcm5pb24sIC5zY2FsZVxuXHRcdHZhciBwb3NpdGlvbiA9IG5ldyBUSFJFRS5WZWN0b3IzXG5cdFx0dmFyIHF1YXRlcm5pb24gPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpXG5cdFx0dmFyIHNjYWxlID0gbmV3IFRIUkVFLlZlY3RvcjNcblx0XHRtYXRyaXguZGVjb21wb3NlKHBvc2l0aW9uLCBxdWF0ZXJuaW9uLCBzY2FsZSlcblxuXHRcdC8vIGh0dHA6Ly93aWtpLnVuaXR5M2QuY29tL2luZGV4LnBocC9BdmVyYWdpbmdfUXVhdGVybmlvbnNfYW5kX1ZlY3RvcnNcblx0XHRzdGF0cy5jb3VudCsrXG5cblx0XHRNYXJrZXJzQXJlYUNvbnRyb2xzLmF2ZXJhZ2VWZWN0b3IzKHN0YXRzLnBvc2l0aW9uLnN1bSwgcG9zaXRpb24sIHN0YXRzLmNvdW50LCBzdGF0cy5wb3NpdGlvbi5hdmVyYWdlKVxuXHRcdE1hcmtlcnNBcmVhQ29udHJvbHMuYXZlcmFnZVF1YXRlcm5pb24oc3RhdHMucXVhdGVybmlvbi5zdW0sIHF1YXRlcm5pb24sIGZpcnN0UXVhdGVybmlvbiwgc3RhdHMuY291bnQsIHN0YXRzLnF1YXRlcm5pb24uYXZlcmFnZSlcblx0XHRNYXJrZXJzQXJlYUNvbnRyb2xzLmF2ZXJhZ2VWZWN0b3IzKHN0YXRzLnNjYWxlLnN1bSwgc2NhbGUsIHN0YXRzLmNvdW50LCBzdGF0cy5zY2FsZS5hdmVyYWdlKVxuXHR9KVxuXG5cdC8vIGhvbm9yIF90aGlzLm9iamVjdDNkLnZpc2libGVcblx0aWYoIHN0YXRzLmNvdW50ID4gMCApe1xuXHRcdF90aGlzLm9iamVjdDNkLnZpc2libGUgPSB0cnVlXG5cdH1lbHNle1xuXHRcdF90aGlzLm9iamVjdDNkLnZpc2libGUgPSBmYWxzZVx0XHRcdFxuXHR9XG5cblx0Ly8gaWYgYXQgbGVhc3Qgb25lIHN1Yi1tYXJrZXIgaGFzIGJlZW4gZGV0ZWN0ZWQsIG1ha2UgdGhlIGF2ZXJhZ2Ugb2YgYWxsIGRldGVjdGVkIG1hcmtlcnNcblx0aWYoIHN0YXRzLmNvdW50ID4gMCApe1xuXHRcdC8vIGNvbXB1dGUgbW9kZWxWaWV3TWF0cml4XG5cdFx0dmFyIG1vZGVsVmlld01hdHJpeCA9IG5ldyBUSFJFRS5NYXRyaXg0KClcblx0XHRtb2RlbFZpZXdNYXRyaXguY29tcG9zZShzdGF0cy5wb3NpdGlvbi5hdmVyYWdlLCBzdGF0cy5xdWF0ZXJuaW9uLmF2ZXJhZ2UsIHN0YXRzLnNjYWxlLmF2ZXJhZ2UpXG5cblx0XHQvLyBjaGFuZ2UgX3RoaXMub2JqZWN0M2QubWF0cml4IGJhc2VkIG9uIHBhcmFtZXRlcnMuY2hhbmdlTWF0cml4TW9kZVxuXHRcdGlmKCB0aGlzLnBhcmFtZXRlcnMuY2hhbmdlTWF0cml4TW9kZSA9PT0gJ21vZGVsVmlld01hdHJpeCcgKXtcblx0XHRcdF90aGlzLm9iamVjdDNkLm1hdHJpeC5jb3B5KG1vZGVsVmlld01hdHJpeClcblx0XHR9ZWxzZSBpZiggdGhpcy5wYXJhbWV0ZXJzLmNoYW5nZU1hdHJpeE1vZGUgPT09ICdjYW1lcmFUcmFuc2Zvcm1NYXRyaXgnICl7XG5cdFx0XHRfdGhpcy5vYmplY3QzZC5tYXRyaXguZ2V0SW52ZXJzZSggbW9kZWxWaWV3TWF0cml4IClcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLmFzc2VydChmYWxzZSlcblx0XHR9XG5cblx0XHQvLyBkZWNvbXBvc2UgLSB0aGUgbWF0cml4IGludG8gLnBvc2l0aW9uLCAucXVhdGVybmlvbiwgLnNjYWxlXG5cdFx0X3RoaXMub2JqZWN0M2QubWF0cml4LmRlY29tcG9zZShfdGhpcy5vYmplY3QzZC5wb3NpdGlvbiwgX3RoaXMub2JqZWN0M2QucXVhdGVybmlvbiwgX3RoaXMub2JqZWN0M2Quc2NhbGUpXG5cdH1cblxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vXHRcdFV0aWxpdHkgZnVuY3Rpb25zXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBmcm9tIGh0dHA6Ly93aWtpLnVuaXR5M2QuY29tL2luZGV4LnBocC9BdmVyYWdpbmdfUXVhdGVybmlvbnNfYW5kX1ZlY3RvcnNcbiAqL1xuTWFya2Vyc0FyZWFDb250cm9scy5hdmVyYWdlUXVhdGVybmlvbiA9IGZ1bmN0aW9uKHF1YXRlcm5pb25TdW0sIG5ld1F1YXRlcm5pb24sIGZpcnN0UXVhdGVybmlvbiwgY291bnQsIHF1YXRlcm5pb25BdmVyYWdlKXtcblx0cXVhdGVybmlvbkF2ZXJhZ2UgPSBxdWF0ZXJuaW9uQXZlcmFnZSB8fCBuZXcgVEhSRUUuUXVhdGVybmlvbigpXG5cdC8vIHNhbml0eSBjaGVja1xuXHRjb25zb2xlLmFzc2VydChmaXJzdFF1YXRlcm5pb24gaW5zdGFuY2VvZiBUSFJFRS5RdWF0ZXJuaW9uID09PSB0cnVlKVxuXHRcblx0Ly8gZnJvbSBodHRwOi8vd2lraS51bml0eTNkLmNvbS9pbmRleC5waHAvQXZlcmFnaW5nX1F1YXRlcm5pb25zX2FuZF9WZWN0b3JzXG5cdGlmKCBuZXdRdWF0ZXJuaW9uLmRvdChmaXJzdFF1YXRlcm5pb24pID4gMCApe1xuXHRcdG5ld1F1YXRlcm5pb24gPSBuZXcgVEhSRUUuUXVhdGVybmlvbigtbmV3UXVhdGVybmlvbi54LCAtbmV3UXVhdGVybmlvbi55LCAtbmV3UXVhdGVybmlvbi56LCAtbmV3UXVhdGVybmlvbi53KVxuXHR9XG5cblx0cXVhdGVybmlvblN1bS54ICs9IG5ld1F1YXRlcm5pb24ueFxuXHRxdWF0ZXJuaW9uU3VtLnkgKz0gbmV3UXVhdGVybmlvbi55XG5cdHF1YXRlcm5pb25TdW0ueiArPSBuZXdRdWF0ZXJuaW9uLnpcblx0cXVhdGVybmlvblN1bS53ICs9IG5ld1F1YXRlcm5pb24ud1xuXHRcblx0cXVhdGVybmlvbkF2ZXJhZ2UueCA9IHF1YXRlcm5pb25TdW0ueC9jb3VudFxuXHRxdWF0ZXJuaW9uQXZlcmFnZS55ID0gcXVhdGVybmlvblN1bS55L2NvdW50XG5cdHF1YXRlcm5pb25BdmVyYWdlLnogPSBxdWF0ZXJuaW9uU3VtLnovY291bnRcblx0cXVhdGVybmlvbkF2ZXJhZ2UudyA9IHF1YXRlcm5pb25TdW0udy9jb3VudFxuXHRcblx0cXVhdGVybmlvbkF2ZXJhZ2Uubm9ybWFsaXplKClcblxuXHRyZXR1cm4gcXVhdGVybmlvbkF2ZXJhZ2Vcbn1cblxuXG5NYXJrZXJzQXJlYUNvbnRyb2xzLmF2ZXJhZ2VWZWN0b3IzID0gZnVuY3Rpb24odmVjdG9yM1N1bSwgdmVjdG9yMywgY291bnQsIHZlY3RvcjNBdmVyYWdlKXtcblx0dmVjdG9yM0F2ZXJhZ2UgPSB2ZWN0b3IzQXZlcmFnZSB8fCBuZXcgVEhSRUUuVmVjdG9yMygpXG5cdFxuXHR2ZWN0b3IzU3VtLnggKz0gdmVjdG9yMy54XG5cdHZlY3RvcjNTdW0ueSArPSB2ZWN0b3IzLnlcblx0dmVjdG9yM1N1bS56ICs9IHZlY3RvcjMuelxuXHRcblx0dmVjdG9yM0F2ZXJhZ2UueCA9IHZlY3RvcjNTdW0ueCAvIGNvdW50XG5cdHZlY3RvcjNBdmVyYWdlLnkgPSB2ZWN0b3IzU3VtLnkgLyBjb3VudFxuXHR2ZWN0b3IzQXZlcmFnZS56ID0gdmVjdG9yM1N1bS56IC8gY291bnRcblx0XG5cdHJldHVybiB2ZWN0b3IzQXZlcmFnZVxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vXHRcdFV0aWxpdHkgZnVuY3Rpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIGNvbXB1dGUgdGhlIGNlbnRlciBvZiB0aGlzIG11bHRpbWFya2VyIGZpbGVcbiAqL1xuTWFya2Vyc0FyZWFDb250cm9scy5jb21wdXRlQ2VudGVyID0gZnVuY3Rpb24oanNvbkRhdGEpe1xuXHR2YXIgbXVsdGlNYXJrZXJGaWxlID0gSlNPTi5wYXJzZShqc29uRGF0YSlcblx0dmFyIHN0YXRzID0ge1xuXHRcdGNvdW50IDogMCxcblx0XHRwb3NpdGlvbiA6IHtcblx0XHRcdHN1bTogbmV3IFRIUkVFLlZlY3RvcjMoMCwwLDApLFxuXHRcdFx0YXZlcmFnZTogbmV3IFRIUkVFLlZlY3RvcjMoMCwwLDApLFx0XHRcdFx0XHRcdFxuXHRcdH0sXG5cdFx0cXVhdGVybmlvbiA6IHtcblx0XHRcdHN1bTogbmV3IFRIUkVFLlF1YXRlcm5pb24oMCwwLDAsMCksXG5cdFx0XHRhdmVyYWdlOiBuZXcgVEhSRUUuUXVhdGVybmlvbigwLDAsMCwwKSxcdFx0XHRcdFx0XHRcblx0XHR9LFxuXHRcdHNjYWxlIDoge1xuXHRcdFx0c3VtOiBuZXcgVEhSRUUuVmVjdG9yMygwLDAsMCksXG5cdFx0XHRhdmVyYWdlOiBuZXcgVEhSRUUuVmVjdG9yMygwLDAsMCksXHRcdFx0XHRcdFx0XG5cdFx0fSxcblx0fVxuXHR2YXIgZmlyc3RRdWF0ZXJuaW9uID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKSAvLyBGSVhNRSA/Pz9cblx0XG5cdG11bHRpTWFya2VyRmlsZS5zdWJNYXJrZXJzQ29udHJvbHMuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcblx0XHR2YXIgcG9zZU1hdHJpeCA9IG5ldyBUSFJFRS5NYXRyaXg0KCkuZnJvbUFycmF5KGl0ZW0ucG9zZU1hdHJpeClcblx0XHRcblx0XHR2YXIgcG9zaXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yM1xuXHRcdHZhciBxdWF0ZXJuaW9uID0gbmV3IFRIUkVFLlF1YXRlcm5pb25cblx0XHR2YXIgc2NhbGUgPSBuZXcgVEhSRUUuVmVjdG9yM1xuXHRcdHBvc2VNYXRyaXguZGVjb21wb3NlKHBvc2l0aW9uLCBxdWF0ZXJuaW9uLCBzY2FsZSlcblx0XHRcblx0XHQvLyBodHRwOi8vd2lraS51bml0eTNkLmNvbS9pbmRleC5waHAvQXZlcmFnaW5nX1F1YXRlcm5pb25zX2FuZF9WZWN0b3JzXG5cdFx0c3RhdHMuY291bnQrK1xuXG5cdFx0TWFya2Vyc0FyZWFDb250cm9scy5hdmVyYWdlVmVjdG9yMyhzdGF0cy5wb3NpdGlvbi5zdW0sIHBvc2l0aW9uLCBzdGF0cy5jb3VudCwgc3RhdHMucG9zaXRpb24uYXZlcmFnZSlcblx0XHRNYXJrZXJzQXJlYUNvbnRyb2xzLmF2ZXJhZ2VRdWF0ZXJuaW9uKHN0YXRzLnF1YXRlcm5pb24uc3VtLCBxdWF0ZXJuaW9uLCBmaXJzdFF1YXRlcm5pb24sIHN0YXRzLmNvdW50LCBzdGF0cy5xdWF0ZXJuaW9uLmF2ZXJhZ2UpXG5cdFx0TWFya2Vyc0FyZWFDb250cm9scy5hdmVyYWdlVmVjdG9yMyhzdGF0cy5zY2FsZS5zdW0sIHNjYWxlLCBzdGF0cy5jb3VudCwgc3RhdHMuc2NhbGUuYXZlcmFnZSlcblx0fSlcblx0XG5cdHZhciBhdmVyYWdlTWF0cml4ID0gbmV3IFRIUkVFLk1hdHJpeDQoKVxuXHRhdmVyYWdlTWF0cml4LmNvbXBvc2Uoc3RhdHMucG9zaXRpb24uYXZlcmFnZSwgc3RhdHMucXVhdGVybmlvbi5hdmVyYWdlLCBzdGF0cy5zY2FsZS5hdmVyYWdlKVxuXG5cdHJldHVybiBhdmVyYWdlTWF0cml4XG59XG5cbk1hcmtlcnNBcmVhQ29udHJvbHMuY29tcHV0ZUJvdW5kaW5nQm94ID0gZnVuY3Rpb24oanNvbkRhdGEpe1xuXHR2YXIgbXVsdGlNYXJrZXJGaWxlID0gSlNPTi5wYXJzZShqc29uRGF0YSlcblx0dmFyIGJvdW5kaW5nQm94ID0gbmV3IFRIUkVFLkJveDMoKVxuXG5cdG11bHRpTWFya2VyRmlsZS5zdWJNYXJrZXJzQ29udHJvbHMuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcblx0XHR2YXIgcG9zZU1hdHJpeCA9IG5ldyBUSFJFRS5NYXRyaXg0KCkuZnJvbUFycmF5KGl0ZW0ucG9zZU1hdHJpeClcblx0XHRcblx0XHR2YXIgcG9zaXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yM1xuXHRcdHZhciBxdWF0ZXJuaW9uID0gbmV3IFRIUkVFLlF1YXRlcm5pb25cblx0XHR2YXIgc2NhbGUgPSBuZXcgVEhSRUUuVmVjdG9yM1xuXHRcdHBvc2VNYXRyaXguZGVjb21wb3NlKHBvc2l0aW9uLCBxdWF0ZXJuaW9uLCBzY2FsZSlcblxuXHRcdGJvdW5kaW5nQm94LmV4cGFuZEJ5UG9pbnQocG9zaXRpb24pXG5cdH0pXG5cblx0cmV0dXJuIGJvdW5kaW5nQm94XG59XG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vXHRcdHVwZGF0ZVNtb290aGVkQ29udHJvbHNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5NYXJrZXJzQXJlYUNvbnRyb2xzLnByb3RvdHlwZS51cGRhdGVTbW9vdGhlZENvbnRyb2xzID0gZnVuY3Rpb24oc21vb3RoZWRDb250cm9scywgbGVycHNWYWx1ZXMpe1xuXHQvLyBoYW5kbGUgZGVmYXVsdCB2YWx1ZXNcblx0aWYoIGxlcnBzVmFsdWVzID09PSB1bmRlZmluZWQgKXtcblx0XHQvLyBGSVhNRSB0aGlzIHBhcmFtZXRlciBmb3JtYXQgaXMgdXNlbGVzc2x5IGNyeXB0aWNcblx0XHQvLyBsZXJwVmFsdWVzID0gW1xuXHRcdC8vIHtsZXJwUG9zaXRpb246IDAuNSwgbGVycFF1YXRlcm5pb246IDAuMiwgbGVycFF1YXRlcm5pb246IDAuN31cblx0XHQvLyBdXG5cdFx0bGVycHNWYWx1ZXMgPSBbXG5cdFx0XHRbMC4zKy4xLCAwLjEsIDAuM10sXG5cdFx0XHRbMC40Ky4xLCAwLjEsIDAuNF0sXG5cdFx0XHRbMC40Ky4xLCAwLjIsIDAuNV0sXG5cdFx0XHRbMC41Ky4xLCAwLjIsIDAuN10sXG5cdFx0XHRbMC41Ky4xLCAwLjIsIDAuN10sXG5cdFx0XVxuXHR9XG5cdC8vIGNvdW50IGhvdyBtYW55IHN1Yk1hcmtlcnNDb250cm9scyBhcmUgdmlzaWJsZVxuXHR2YXIgblZpc2libGUgPSAwXG5cdHRoaXMucGFyYW1ldGVycy5zdWJNYXJrZXJzQ29udHJvbHMuZm9yRWFjaChmdW5jdGlvbihtYXJrZXJDb250cm9scywgbWFya2VySW5kZXgpe1xuXHRcdHZhciBtYXJrZXJPYmplY3QzZCA9IG1hcmtlckNvbnRyb2xzLm9iamVjdDNkXG5cdFx0aWYoIG1hcmtlck9iamVjdDNkLnZpc2libGUgPT09IHRydWUgKVx0blZpc2libGUgKytcblx0fSlcblxuXHQvLyBmaW5kIHRoZSBnb29kIGxlcnBWYWx1ZXNcblx0aWYoIGxlcnBzVmFsdWVzW25WaXNpYmxlLTFdICE9PSB1bmRlZmluZWQgKXtcblx0XHR2YXIgbGVycFZhbHVlcyA9IGxlcnBzVmFsdWVzW25WaXNpYmxlLTFdXG5cdH1lbHNle1xuXHRcdHZhciBsZXJwVmFsdWVzID0gbGVycHNWYWx1ZXNbbGVycHNWYWx1ZXMubGVuZ3RoLTFdXG5cdH1cblxuXHQvLyBtb2RpZnkgbGVycFZhbHVlcyBpbiBzbW9vdGhlZENvbnRyb2xzXG5cdHNtb290aGVkQ29udHJvbHMucGFyYW1ldGVycy5sZXJwUG9zaXRpb24gPSBsZXJwVmFsdWVzWzBdXG5cdHNtb290aGVkQ29udHJvbHMucGFyYW1ldGVycy5sZXJwUXVhdGVybmlvbiA9IGxlcnBWYWx1ZXNbMV1cblx0c21vb3RoZWRDb250cm9scy5wYXJhbWV0ZXJzLmxlcnBTY2FsZSA9IGxlcnBWYWx1ZXNbMl1cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vXHRcdENyZWF0ZSBBck11bHRpTWFya2VyQ29udHJvbHMgZnJvbSBKU09OXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuTWFya2Vyc0FyZWFDb250cm9scy5mcm9tSlNPTiA9IGZ1bmN0aW9uKGFyVG9vbGtpdENvbnRleHQsIHBhcmVudDNELCBtYXJrZXJSb290LCBqc29uRGF0YSwgcGFyYW1ldGVycyl7XG5cdHZhciBtdWx0aU1hcmtlckZpbGUgPSBKU09OLnBhcnNlKGpzb25EYXRhKVxuXHQvLyBkZWNsYXJlIHZhcmlhYmxlc1xuXHR2YXIgc3ViTWFya2Vyc0NvbnRyb2xzID0gW11cblx0dmFyIHN1Yk1hcmtlclBvc2VzID0gW11cblx0Ly8gaGFuZGxlIGRlZmF1bHQgYXJndW1lbnRzXG5cdHBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzIHx8IHt9XG5cblx0Ly8gcHJlcGFyZSB0aGUgcGFyYW1ldGVyc1xuXHRtdWx0aU1hcmtlckZpbGUuc3ViTWFya2Vyc0NvbnRyb2xzLmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XG5cdFx0Ly8gY3JlYXRlIGEgbWFya2VyUm9vdFxuXHRcdHZhciBtYXJrZXJSb290ID0gbmV3IFRIUkVFLk9iamVjdDNEKClcblx0XHRwYXJlbnQzRC5hZGQobWFya2VyUm9vdClcblxuXHRcdC8vIGNyZWF0ZSBtYXJrZXJDb250cm9scyBmb3Igb3VyIG1hcmtlclJvb3Rcblx0XHR2YXIgc3ViTWFya2VyQ29udHJvbHMgPSBuZXcgQXJNYXJrZXJDb250cm9scyhhclRvb2xraXRDb250ZXh0LCBtYXJrZXJSb290LCBpdGVtLnBhcmFtZXRlcnMpXG5cbi8vIGlmKCB0cnVlICl7XG5cdFx0Ly8gc3RvcmUgaXQgaW4gdGhlIHBhcmFtZXRlcnNcblx0XHRzdWJNYXJrZXJzQ29udHJvbHMucHVzaChzdWJNYXJrZXJDb250cm9scylcblx0XHRzdWJNYXJrZXJQb3Nlcy5wdXNoKG5ldyBUSFJFRS5NYXRyaXg0KCkuZnJvbUFycmF5KGl0ZW0ucG9zZU1hdHJpeCkpXHRcbi8vIH1lbHNle1xuLy8gXHRcdC8vIGJ1aWxkIGEgc21vb3RoZWRDb250cm9sc1xuLy8gXHRcdHZhciBzbW9vdGhlZFJvb3QgPSBuZXcgVEhSRUUuR3JvdXAoKVxuLy8gXHRcdHBhcmVudDNELmFkZChzbW9vdGhlZFJvb3QpXG4vLyBcdFx0dmFyIHNtb290aGVkQ29udHJvbHMgPSBuZXcgVEhSRUV4LkFyU21vb3RoZWRDb250cm9scyhzbW9vdGhlZFJvb3QsIHtcbi8vIFx0XHRcdGxlcnBQb3NpdGlvbiA6IDAuMSxcbi8vIFx0XHRcdGxlcnBRdWF0ZXJuaW9uIDogMC4xLCBcbi8vIFx0XHRcdGxlcnBTY2FsZSA6IDAuMSxcbi8vIFx0XHRcdG1pblZpc2libGVEZWxheTogMCxcbi8vIFx0XHRcdG1pblVudmlzaWJsZURlbGF5OiAwLFxuLy8gXHRcdH0pXG4vLyBcdFx0b25SZW5kZXJGY3RzLnB1c2goZnVuY3Rpb24oZGVsdGEpe1xuLy8gXHRcdFx0c21vb3RoZWRDb250cm9scy51cGRhdGUobWFya2VyUm9vdClcdC8vIFRPRE8gdGhpcyBpcyBhIGdsb2JhbFxuLy8gXHRcdH0pXG4vLyBcdFxuLy8gXG4vLyBcdFx0Ly8gc3RvcmUgaXQgaW4gdGhlIHBhcmFtZXRlcnNcbi8vIFx0XHRzdWJNYXJrZXJzQ29udHJvbHMucHVzaChzbW9vdGhlZENvbnRyb2xzKVxuLy8gXHRcdHN1Yk1hcmtlclBvc2VzLnB1c2gobmV3IFRIUkVFLk1hdHJpeDQoKS5mcm9tQXJyYXkoaXRlbS5wb3NlTWF0cml4KSlcbi8vIH1cblx0fSlcblx0XG5cdHBhcmFtZXRlcnMuc3ViTWFya2Vyc0NvbnRyb2xzID0gc3ViTWFya2Vyc0NvbnRyb2xzXG5cdHBhcmFtZXRlcnMuc3ViTWFya2VyUG9zZXMgPSBzdWJNYXJrZXJQb3Nlc1xuXHQvLyBjcmVhdGUgYSBuZXcgQXJNdWx0aU1hcmtlckNvbnRyb2xzXG5cdHZhciBtdWx0aU1hcmtlckNvbnRyb2xzID0gbmV3IEFyTXVsdGlNYXJrZXJDb250cm9scyhhclRvb2xraXRDb250ZXh0LCBtYXJrZXJSb290LCBwYXJhbWV0ZXJzKVxuXG5cdC8vIHJldHVybiBpdFxuXHRyZXR1cm4gbXVsdGlNYXJrZXJDb250cm9sc1x0XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1hcmtlcnNBcmVhQ29udHJvbHM7IiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuaW1wb3J0IENvbnRleHQgZnJvbSAnLi4vdGhyZWV4L2FyanMtY29udGV4dCc7IC8vIFRPRE8gY29udGV4dCBidWlsZC1kZXBlbmRlbnRcblxuY29uc3QgTWFya2Vyc0FyZWFVdGlscyA9IHt9O1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vXHRcdG5hdmlnYXRlVG9MZWFybmVyUGFnZVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogTmF2aWdhdGUgdG8gdGhlIG11bHRpLW1hcmtlciBsZWFybmVyIHBhZ2VcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbGVhcm5lckJhc2VVUkwgIC0gdGhlIGJhc2UgdXJsIGZvciB0aGUgbGVhcm5lclxuICogQHBhcmFtIHtTdHJpbmd9IHRyYWNraW5nQmFja2VuZCAtIHRoZSB0cmFja2luZyBiYWNrZW5kIHRvIHVzZVxuICovXG5NYXJrZXJzQXJlYVV0aWxzLm5hdmlnYXRlVG9MZWFybmVyUGFnZSA9IGZ1bmN0aW9uKGxlYXJuZXJCYXNlVVJMLCB0cmFja2luZ0JhY2tlbmQpe1xuXHR2YXIgbGVhcm5lclBhcmFtZXRlcnMgPSB7XG5cdFx0YmFja1VSTCA6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHJhY2tpbmdCYWNrZW5kOiB0cmFja2luZ0JhY2tlbmQsXG5cdFx0bWFya2Vyc0NvbnRyb2xzUGFyYW1ldGVyczogTWFya2Vyc0FyZWFVdGlscy5jcmVhdGVEZWZhdWx0TWFya2Vyc0NvbnRyb2xzUGFyYW1ldGVycyh0cmFja2luZ0JhY2tlbmQpLFxuXHR9XG5cdGxvY2F0aW9uLmhyZWYgPSBsZWFybmVyQmFzZVVSTCArICc/JyArIGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShsZWFybmVyUGFyYW1ldGVycykpXG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy9cdFx0RGVmYXVsdE11bHRpTWFya2VyRmlsZVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQ3JlYXRlIGFuZCBzdG9yZSBhIGRlZmF1bHQgbXVsdGktbWFya2VyIGZpbGVcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdHJhY2tpbmdCYWNrZW5kIC0gdGhlIHRyYWNraW5nIGJhY2tlbmQgdG8gdXNlXG4gKi9cbk1hcmtlcnNBcmVhVXRpbHMuc3RvcmVEZWZhdWx0TXVsdGlNYXJrZXJGaWxlID0gZnVuY3Rpb24odHJhY2tpbmdCYWNrZW5kKXtcblx0dmFyIGZpbGUgPSBNYXJrZXJzQXJlYVV0aWxzLmNyZWF0ZURlZmF1bHRNdWx0aU1hcmtlckZpbGUodHJhY2tpbmdCYWNrZW5kKVxuXHQvLyBqc29uLnN0cmluZnkgdGhlIHZhbHVlIGFuZCBzdG9yZSBpdCBpbiBsb2NhbFN0b3JhZ2Vcblx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oJ0FSanNNdWx0aU1hcmtlckZpbGUnLCBKU09OLnN0cmluZ2lmeShmaWxlKSlcbn1cblxuXG5cbi8qKlxuICogQ3JlYXRlIGEgZGVmYXVsdCBtdWx0aS1tYXJrZXIgZmlsZVxuICogQHBhcmFtIHtTdHJpbmd9IHRyYWNraW5nQmFja2VuZCAtIHRoZSB0cmFja2luZyBiYWNrZW5kIHRvIHVzZVxuICogQHJldHVybiB7T2JqZWN0fSAtIGpzb24gb2JqZWN0IG9mIHRoZSBtdWx0aS1tYXJrZXIgZmlsZVxuICovXG5NYXJrZXJzQXJlYVV0aWxzLmNyZWF0ZURlZmF1bHRNdWx0aU1hcmtlckZpbGUgPSBmdW5jdGlvbih0cmFja2luZ0JhY2tlbmQpe1xuXHRjb25zb2xlLmFzc2VydCh0cmFja2luZ0JhY2tlbmQpXG5cdGlmKCB0cmFja2luZ0JhY2tlbmQgPT09IHVuZGVmaW5lZCApXHRkZWJ1Z2dlclxuXG5cdC8vIGNyZWF0ZSBhYnNvbHV0ZUJhc2VVUkxcblx0dmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJylcblx0bGluay5ocmVmID0gQ29udGV4dC5iYXNlVVJMXG5cdHZhciBhYnNvbHV0ZUJhc2VVUkwgPSBsaW5rLmhyZWZcblxuXHQvLyBjcmVhdGUgdGhlIGJhc2UgZmlsZVxuXHR2YXIgZmlsZSA9IHtcblx0XHRtZXRhIDoge1xuXHRcdFx0Y3JlYXRlZEJ5IDogJ0FSLmpzICcgKyBDb250ZXh0LlJFVklTSU9OICsgJyAtIERlZmF1bHQgTWFya2VyJyxcblx0XHRcdGNyZWF0ZWRBdCA6IG5ldyBEYXRlKCkudG9KU09OKCksXG5cdFx0fSxcblx0XHR0cmFja2luZ0JhY2tlbmQgOiB0cmFja2luZ0JhY2tlbmQsXG5cdFx0c3ViTWFya2Vyc0NvbnRyb2xzIDogW1xuXHRcdFx0Ly8gZW1wdHkgZm9yIG5vdy4uLiBiZWluZyBmaWxsZWRcblx0XHRdXG5cdH1cblx0Ly8gYWRkIGEgc3ViTWFya2Vyc0NvbnRyb2xzXG5cdGZpbGUuc3ViTWFya2Vyc0NvbnRyb2xzWzBdID0ge1xuXHRcdHBhcmFtZXRlcnM6IHt9LFxuXHRcdHBvc2VNYXRyaXg6IG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKDAsMCwgMCkudG9BcnJheSgpLFxuXHR9XG5cdGlmKCB0cmFja2luZ0JhY2tlbmQgPT09ICdhcnRvb2xraXQnICl7XG5cdFx0ZmlsZS5zdWJNYXJrZXJzQ29udHJvbHNbMF0ucGFyYW1ldGVycy50eXBlID0gJ3BhdHRlcm4nXG5cdFx0ZmlsZS5zdWJNYXJrZXJzQ29udHJvbHNbMF0ucGFyYW1ldGVycy5wYXR0ZXJuVXJsID0gYWJzb2x1dGVCYXNlVVJMICsgJ2V4YW1wbGVzL21hcmtlci10cmFpbmluZy9leGFtcGxlcy9wYXR0ZXJuLWZpbGVzL3BhdHRlcm4taGlyby5wYXR0J1xuXHR9ZWxzZSBjb25zb2xlLmFzc2VydChmYWxzZSlcblxuXHQvLyBqc29uLnN0cmluZnkgdGhlIHZhbHVlIGFuZCBzdG9yZSBpdCBpbiBsb2NhbFN0b3JhZ2Vcblx0cmV0dXJuIGZpbGVcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vL1x0XHRjcmVhdGVEZWZhdWx0TWFya2Vyc0NvbnRyb2xzUGFyYW1ldGVyc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQ3JlYXRlIGEgZGVmYXVsdCBjb250cm9scyBwYXJhbWV0ZXJzIGZvciB0aGUgbXVsdGktbWFya2VyIGxlYXJuZXJcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdHJhY2tpbmdCYWNrZW5kIC0gdGhlIHRyYWNraW5nIGJhY2tlbmQgdG8gdXNlXG4gKiBAcmV0dXJuIHtPYmplY3R9IC0ganNvbiBvYmplY3QgY29udGFpbmluZyB0aGUgY29udHJvbHMgcGFyYW1ldGVyc1xuICovXG5NYXJrZXJzQXJlYVV0aWxzLmNyZWF0ZURlZmF1bHRNYXJrZXJzQ29udHJvbHNQYXJhbWV0ZXJzID0gZnVuY3Rpb24odHJhY2tpbmdCYWNrZW5kKXtcblx0Ly8gY3JlYXRlIGFic29sdXRlQmFzZVVSTFxuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKVxuXHRsaW5rLmhyZWYgPSBDb250ZXh0LmJhc2VVUkxcblx0dmFyIGFic29sdXRlQmFzZVVSTCA9IGxpbmsuaHJlZlxuXG5cblx0aWYoIHRyYWNraW5nQmFja2VuZCA9PT0gJ2FydG9vbGtpdCcgKXtcblx0XHQvLyBwYXR0ZXJuIGhpcm8va2FuamkvYS9iL2MvZlxuXHRcdHZhciBtYXJrZXJzQ29udHJvbHNQYXJhbWV0ZXJzID0gW1xuXHRcdFx0e1xuXHRcdFx0XHR0eXBlIDogJ3BhdHRlcm4nLFxuXHRcdFx0XHRwYXR0ZXJuVXJsIDogYWJzb2x1dGVCYXNlVVJMICsgJ2V4YW1wbGVzL21hcmtlci10cmFpbmluZy9leGFtcGxlcy9wYXR0ZXJuLWZpbGVzL3BhdHRlcm4taGlyby5wYXR0Jyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGUgOiAncGF0dGVybicsXG5cdFx0XHRcdHBhdHRlcm5VcmwgOiBhYnNvbHV0ZUJhc2VVUkwgKyAnZXhhbXBsZXMvbWFya2VyLXRyYWluaW5nL2V4YW1wbGVzL3BhdHRlcm4tZmlsZXMvcGF0dGVybi1rYW5qaS5wYXR0Jyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGUgOiAncGF0dGVybicsXG5cdFx0XHRcdHBhdHRlcm5VcmwgOiBhYnNvbHV0ZUJhc2VVUkwgKyAnZXhhbXBsZXMvbWFya2VyLXRyYWluaW5nL2V4YW1wbGVzL3BhdHRlcm4tZmlsZXMvcGF0dGVybi1sZXR0ZXJBLnBhdHQnLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0dHlwZSA6ICdwYXR0ZXJuJyxcblx0XHRcdFx0cGF0dGVyblVybCA6IGFic29sdXRlQmFzZVVSTCArICdleGFtcGxlcy9tYXJrZXItdHJhaW5pbmcvZXhhbXBsZXMvcGF0dGVybi1maWxlcy9wYXR0ZXJuLWxldHRlckIucGF0dCcsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlIDogJ3BhdHRlcm4nLFxuXHRcdFx0XHRwYXR0ZXJuVXJsIDogYWJzb2x1dGVCYXNlVVJMICsgJ2V4YW1wbGVzL21hcmtlci10cmFpbmluZy9leGFtcGxlcy9wYXR0ZXJuLWZpbGVzL3BhdHRlcm4tbGV0dGVyQy5wYXR0Jyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGUgOiAncGF0dGVybicsXG5cdFx0XHRcdHBhdHRlcm5VcmwgOiBhYnNvbHV0ZUJhc2VVUkwgKyAnZXhhbXBsZXMvbWFya2VyLXRyYWluaW5nL2V4YW1wbGVzL3BhdHRlcm4tZmlsZXMvcGF0dGVybi1sZXR0ZXJGLnBhdHQnLFxuXHRcdFx0fSxcblx0XHRdXG5cdH1lbHNlIGNvbnNvbGUuYXNzZXJ0KGZhbHNlKVxuXHRyZXR1cm4gbWFya2Vyc0NvbnRyb2xzUGFyYW1ldGVyc1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy9cdFx0Q29kZSBTZXBhcmF0b3Jcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLyoqXG4gKiBnZW5lcmF0ZSBhcmVhRmlsZVxuICovXG5NYXJrZXJzQXJlYVV0aWxzLnN0b3JlTWFya2Vyc0FyZWFGaWxlRnJvbVJlc29sdXRpb24gPSBmdW5jdGlvbiAodHJhY2tpbmdCYWNrZW5kLCByZXNvbHV0aW9uVywgcmVzb2x1dGlvbkgpIHtcblx0Ly8gZ2VuZXJhdGUgYXJlYUZpbGVcblx0dmFyIGFyZWFGaWxlID0gdGhpcy5idWlsZE1hcmtlcnNBcmVhRmlsZUZyb21SZXNvbHV0aW9uKHRyYWNraW5nQmFja2VuZCwgcmVzb2x1dGlvblcsIHJlc29sdXRpb25IKVxuXHQvLyBzdG9yZSBhcmVhRmlsZSBpbiBsb2NhbFN0b3JhZ2Vcblx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oJ0FSanNNdWx0aU1hcmtlckZpbGUnLCBKU09OLnN0cmluZ2lmeShhcmVhRmlsZSkpXG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vL1x0XHRDb2RlIFNlcGFyYXRvclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbk1hcmtlcnNBcmVhVXRpbHMuYnVpbGRNYXJrZXJzQXJlYUZpbGVGcm9tUmVzb2x1dGlvbiA9IGZ1bmN0aW9uKHRyYWNraW5nQmFja2VuZCwgcmVzb2x1dGlvblcsIHJlc29sdXRpb25IKXtcblx0Ly8gY3JlYXRlIHRoZSBiYXNlIGZpbGVcblx0dmFyIGZpbGUgPSB7XG5cdFx0bWV0YSA6IHtcblx0XHRcdGNyZWF0ZWRCeSA6ICdBUi5qcyAtIEF1Z21lbnRlZCBXZWJzaXRlJyxcblx0XHRcdGNyZWF0ZWRBdCA6IG5ldyBEYXRlKCkudG9KU09OKCksXG5cdFx0fSxcblx0XHR0cmFja2luZ0JhY2tlbmQgOiB0cmFja2luZ0JhY2tlbmQsXG5cdFx0c3ViTWFya2Vyc0NvbnRyb2xzIDogW1xuXHRcdFx0Ly8gZW1wdHkgZm9yIG5vdy4uLlxuXHRcdF1cblx0fVxuXG5cdHZhciB3aGl0ZU1hcmdpbiA9IDAuMVxuXHRpZiggcmVzb2x1dGlvblcgPiByZXNvbHV0aW9uSCApe1xuXHRcdHZhciBtYXJrZXJJbWFnZVNpemUgPSAwLjQgKiByZXNvbHV0aW9uSFxuXHR9ZWxzZSBpZiggcmVzb2x1dGlvblcgPCByZXNvbHV0aW9uSCApe1xuXHRcdHZhciBtYXJrZXJJbWFnZVNpemUgPSAwLjQgKiByZXNvbHV0aW9uV1xuXHR9ZWxzZSBpZiggcmVzb2x1dGlvblcgPT09IHJlc29sdXRpb25IICl7XG5cdFx0Ly8gc3BlY2lmaWMgZm9yIHR3aXR0ZXIgcGxheWVyIC0gaHR0cHM6Ly9kZXYudHdpdHRlci5jb20vY2FyZHMvdHlwZXMvcGxheWVyXG5cdFx0dmFyIG1hcmtlckltYWdlU2l6ZSA9IDAuMzMgKiByZXNvbHV0aW9uV1xuXHR9ZWxzZSBjb25zb2xlLmFzc2VydChmYWxzZSlcblxuXHQvLyBjb25zb2xlLndhcm4oJ3VzaW5nIG5ldyBtYXJrZXJJbWFnZVNpemUgY29tcHV0YXRpb24nKVxuXHR2YXIgYWN0dWFsTWFya2VyU2l6ZSA9IG1hcmtlckltYWdlU2l6ZSAqICgxIC0gMip3aGl0ZU1hcmdpbilcblxuXHR2YXIgZGVsdGFYID0gKHJlc29sdXRpb25XIC0gbWFya2VySW1hZ2VTaXplKS8yIC8gYWN0dWFsTWFya2VyU2l6ZVxuXHR2YXIgZGVsdGFaID0gKHJlc29sdXRpb25IIC0gbWFya2VySW1hZ2VTaXplKS8yIC8gYWN0dWFsTWFya2VyU2l6ZVxuXG5cdHZhciBzdWJNYXJrZXJDb250cm9scyA9IGJ1aWxkU3ViTWFya2VyQ29udHJvbHMoJ2NlbnRlcicsIDAsIDApXG5cdGZpbGUuc3ViTWFya2Vyc0NvbnRyb2xzLnB1c2goc3ViTWFya2VyQ29udHJvbHMpXG5cblx0dmFyIHN1Yk1hcmtlckNvbnRyb2xzID0gYnVpbGRTdWJNYXJrZXJDb250cm9scygndG9wbGVmdCcsIC1kZWx0YVgsIC1kZWx0YVopXG5cdGZpbGUuc3ViTWFya2Vyc0NvbnRyb2xzLnB1c2goc3ViTWFya2VyQ29udHJvbHMpXG5cblx0dmFyIHN1Yk1hcmtlckNvbnRyb2xzID0gYnVpbGRTdWJNYXJrZXJDb250cm9scygndG9wcmlnaHQnLCArZGVsdGFYLCAtZGVsdGFaKVxuXHRmaWxlLnN1Yk1hcmtlcnNDb250cm9scy5wdXNoKHN1Yk1hcmtlckNvbnRyb2xzKVxuXG5cdHZhciBzdWJNYXJrZXJDb250cm9scyA9IGJ1aWxkU3ViTWFya2VyQ29udHJvbHMoJ2JvdHRvbWxlZnQnLCAtZGVsdGFYLCArZGVsdGFaKVxuXHRmaWxlLnN1Yk1hcmtlcnNDb250cm9scy5wdXNoKHN1Yk1hcmtlckNvbnRyb2xzKVxuXG5cdHZhciBzdWJNYXJrZXJDb250cm9scyA9IGJ1aWxkU3ViTWFya2VyQ29udHJvbHMoJ2JvdHRvbXJpZ2h0JywgK2RlbHRhWCwgK2RlbHRhWilcblx0ZmlsZS5zdWJNYXJrZXJzQ29udHJvbHMucHVzaChzdWJNYXJrZXJDb250cm9scylcblxuXHRyZXR1cm4gZmlsZVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvL1x0XHRDb2RlIFNlcGFyYXRvclxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHRmdW5jdGlvbiBidWlsZFN1Yk1hcmtlckNvbnRyb2xzKGxheW91dCwgcG9zaXRpb25YLCBwb3NpdGlvblope1xuXHRcdGNvbnNvbGUubG9nKCdidWlsZFN1Yk1hcmtlckNvbnRyb2xzJywgbGF5b3V0LCBwb3NpdGlvblgsIHBvc2l0aW9uWilcblx0XHQvLyBjcmVhdGUgc3ViTWFya2Vyc0NvbnRyb2xzXG5cdFx0dmFyIHN1Yk1hcmtlcnNDb250cm9scyA9IHtcblx0XHRcdHBhcmFtZXRlcnM6IHt9LFxuXHRcdFx0cG9zZU1hdHJpeDogbmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24ocG9zaXRpb25YLDAsIHBvc2l0aW9uWikudG9BcnJheSgpLFxuXHRcdH1cblx0XHQvLyBmaWxsIHRoZSBwYXJhbWV0ZXJzXG5cdFx0aWYoIHRyYWNraW5nQmFja2VuZCA9PT0gJ2FydG9vbGtpdCcgKXtcblx0XHRcdGxheW91dDJNYXJrZXJQYXJhbWV0ZXJzQXJ0b29sa2l0KHN1Yk1hcmtlcnNDb250cm9scy5wYXJhbWV0ZXJzLCBsYXlvdXQpXG5cdFx0fWVsc2UgY29uc29sZS5hc3NlcnQoZmFsc2UpXG5cdFx0Ly8gcmV0dXJuIHN1Yk1hcmtlcnNDb250cm9sc1xuXHRcdHJldHVybiBzdWJNYXJrZXJzQ29udHJvbHNcblx0fVxuXG5cdGZ1bmN0aW9uIGxheW91dDJNYXJrZXJQYXJhbWV0ZXJzQXJ0b29sa2l0KHBhcmFtZXRlcnMsIGxheW91dCl7XG5cdFx0Ly8gY3JlYXRlIGFic29sdXRlQmFzZVVSTFxuXHRcdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpXG5cdFx0bGluay5ocmVmID0gQ29udGV4dC5iYXNlVVJMXG5cdFx0dmFyIGFic29sdXRlQmFzZVVSTCA9IGxpbmsuaHJlZlxuXG5cdFx0dmFyIGxheW91dDJQYXR0ZXJuVXJsID0ge1xuXHRcdFx0J2NlbnRlcicgOiBjb252ZXJ0UmVsYXRpdmVVcmxUb0Fic29sdXRlKGFic29sdXRlQmFzZVVSTCArICdleGFtcGxlcy9tYXJrZXItdHJhaW5pbmcvZXhhbXBsZXMvcGF0dGVybi1maWxlcy9wYXR0ZXJuLWhpcm8ucGF0dCcpLFxuXHRcdFx0J3RvcGxlZnQnIDogY29udmVydFJlbGF0aXZlVXJsVG9BYnNvbHV0ZShhYnNvbHV0ZUJhc2VVUkwgKyAnZXhhbXBsZXMvbWFya2VyLXRyYWluaW5nL2V4YW1wbGVzL3BhdHRlcm4tZmlsZXMvcGF0dGVybi1sZXR0ZXJBLnBhdHQnKSxcblx0XHRcdCd0b3ByaWdodCcgOiBjb252ZXJ0UmVsYXRpdmVVcmxUb0Fic29sdXRlKGFic29sdXRlQmFzZVVSTCArICdleGFtcGxlcy9tYXJrZXItdHJhaW5pbmcvZXhhbXBsZXMvcGF0dGVybi1maWxlcy9wYXR0ZXJuLWxldHRlckIucGF0dCcpLFxuXHRcdFx0J2JvdHRvbWxlZnQnIDogY29udmVydFJlbGF0aXZlVXJsVG9BYnNvbHV0ZShhYnNvbHV0ZUJhc2VVUkwgKyAnZXhhbXBsZXMvbWFya2VyLXRyYWluaW5nL2V4YW1wbGVzL3BhdHRlcm4tZmlsZXMvcGF0dGVybi1sZXR0ZXJDLnBhdHQnKSxcblx0XHRcdCdib3R0b21yaWdodCcgOiBjb252ZXJ0UmVsYXRpdmVVcmxUb0Fic29sdXRlKGFic29sdXRlQmFzZVVSTCArICdleGFtcGxlcy9tYXJrZXItdHJhaW5pbmcvZXhhbXBsZXMvcGF0dGVybi1maWxlcy9wYXR0ZXJuLWxldHRlckYucGF0dCcpLFxuXHRcdH1cblx0XHRjb25zb2xlLmFzc2VydChsYXlvdXQyUGF0dGVyblVybFtsYXlvdXRdICE9PSB1bmRlZmluZWQgKVxuXHRcdHBhcmFtZXRlcnMudHlwZSA9ICdwYXR0ZXJuJ1xuXHRcdHBhcmFtZXRlcnMucGF0dGVyblVybCA9IGxheW91dDJQYXR0ZXJuVXJsW2xheW91dF1cblx0XHRyZXR1cm5cblx0XHRmdW5jdGlvbiBjb252ZXJ0UmVsYXRpdmVVcmxUb0Fic29sdXRlKHJlbGF0aXZlVXJsKXtcblx0XHRcdHZhciB0bXBMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuXHRcdFx0dG1wTGluay5ocmVmID0gcmVsYXRpdmVVcmxcblx0XHRcdHJldHVybiB0bXBMaW5rLmhyZWZcblx0XHR9XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTWFya2Vyc0FyZWFVdGlscztcbiIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCBBck1hcmtlckNvbnRyb2xzIGZyb20gJ3RocmVleEFybWFya2VyY29udHJvbHMnOyAvLyBBbGlhcyBmb3IgZHluYW1pYyBpbXBvcnRpbmdcbmltcG9ydCBBck1hcmtlckhlbHBlciBmcm9tICcuLi90aHJlZXgvdGhyZWV4LWFybWFya2VyaGVscGVyJztcbmltcG9ydCBBclNtb290aGVkQ29udHJvbHMgZnJvbSAnLi4vdGhyZWV4L3RocmVleC1hcnNtb290aGVkY29udHJvbHMnO1xuaW1wb3J0IE1hcmtlcnNBcmVhQ29udHJvbHMgZnJvbSAnLi4vbWFya2Vycy1hcmVhL2FyanMtbWFya2Vyc2FyZWFjb250cm9scyc7XG5pbXBvcnQgTWFya2Vyc0FyZWFVdGlscyBmcm9tICcuLi9tYXJrZXJzLWFyZWEvYXJqcy1tYXJrZXJzYXJlYXV0aWxzJztcblxuLy8gVE9ETyB0aGlzIGlzIGEgY29udHJvbHMuLi4gc2hvdWxkIGkgZ2l2ZSB0aGUgb2JqZWN0M2QgaGVyZSA/XG4vLyBub3QgYWNjb3JkaW5nIHRvICdubyB0aHJlZS5qcyBkZXBlbmRhbmN5J1xuXG4vKipcbiAqIENyZWF0ZSBhbiBhbmNob3IgaW4gdGhlIHJlYWwgd29ybGRcbiAqXG4gKiBAcGFyYW0ge0FSanMuU2Vzc2lvbn0gYXJTZXNzaW9uIC0gdGhlIHNlc3Npb24gb24gd2hpY2ggd2UgY3JlYXRlIHRoZSBhbmNob3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXJrZXJQYXJhbWV0ZXJzIC0gcGFyYW1ldGVyIG9mIHRoaXMgYW5jaG9yXG4gKi9cbmNvbnN0IEFuY2hvciA9IGZ1bmN0aW9uKGFyU2Vzc2lvbiwgbWFya2VyUGFyYW1ldGVycyl7XG5cdHZhciBfdGhpcyA9IHRoaXNcblx0dmFyIGFyQ29udGV4dCA9IGFyU2Vzc2lvbi5hckNvbnRleHRcblx0dmFyIHNjZW5lID0gYXJTZXNzaW9uLnBhcmFtZXRlcnMuc2NlbmVcblx0dmFyIGNhbWVyYSA9IGFyU2Vzc2lvbi5wYXJhbWV0ZXJzLmNhbWVyYVxuXG5cdHRoaXMuYXJTZXNzaW9uID0gYXJTZXNzaW9uXG5cdHRoaXMucGFyYW1ldGVycyA9IG1hcmtlclBhcmFtZXRlcnNcblxuXHQvLyBsb2cgdG8gZGVidWdcblx0Y29uc29sZS5sb2coJ0FSanMuQW5jaG9yIC0nLCAnY2hhbmdlTWF0cml4TW9kZTonLCB0aGlzLnBhcmFtZXRlcnMuY2hhbmdlTWF0cml4TW9kZSwgJy8gbWFya2Vyc0FyZWFFbmFibGVkOicsIG1hcmtlclBhcmFtZXRlcnMubWFya2Vyc0FyZWFFbmFibGVkKVxuXG5cdHZhciBtYXJrZXJSb290ID0gbmV3IFRIUkVFLkdyb3VwKClcblx0c2NlbmUuYWRkKG1hcmtlclJvb3QpXG5cblx0Ly8gc2V0IGNvbnRyb2xsZWRPYmplY3QgZGVwZW5kaW5nIG9uIGNoYW5nZU1hdHJpeE1vZGVcblx0aWYoIG1hcmtlclBhcmFtZXRlcnMuY2hhbmdlTWF0cml4TW9kZSA9PT0gJ21vZGVsVmlld01hdHJpeCcgKXtcblx0XHR2YXIgY29udHJvbGxlZE9iamVjdCA9IG1hcmtlclJvb3Rcblx0fWVsc2UgaWYoIG1hcmtlclBhcmFtZXRlcnMuY2hhbmdlTWF0cml4TW9kZSA9PT0gJ2NhbWVyYVRyYW5zZm9ybU1hdHJpeCcgKXtcblx0XHR2YXIgY29udHJvbGxlZE9iamVjdCA9IGNhbWVyYVxuXHR9ZWxzZSBjb25zb2xlLmFzc2VydChmYWxzZSlcblxuXHRpZiggbWFya2VyUGFyYW1ldGVycy5tYXJrZXJzQXJlYUVuYWJsZWQgPT09IGZhbHNlICl7XG5cdFx0dmFyIG1hcmtlckNvbnRyb2xzID0gbmV3IEFyTWFya2VyQ29udHJvbHMoYXJDb250ZXh0LCBjb250cm9sbGVkT2JqZWN0LCBtYXJrZXJQYXJhbWV0ZXJzKVxuXHRcdHRoaXMuY29udHJvbHMgPSBtYXJrZXJDb250cm9sc1xuXHR9ZWxzZXtcblx0XHQvLyBzYW5pdHkgY2hlY2sgLSBNVVNUIGJlIGEgdHJhY2tpbmdCYWNrZW5kIHdpdGggbWFya2Vyc1xuXHRcdGNvbnNvbGUuYXNzZXJ0KCBhckNvbnRleHQucGFyYW1ldGVycy50cmFja2luZ0JhY2tlbmQgPT09ICdhcnRvb2xraXQnIClcblxuXHRcdC8vIGhvbm9yIG1hcmtlcnMtcGFnZS1yZXNvbHV0aW9uIGZvciBodHRwczovL3dlYnhyLmlvL2F1Z21lbnRlZC13ZWJzaXRlXG5cdFx0aWYoIGxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpLnN0YXJ0c1dpdGgoJ21hcmtlcnMtcGFnZS1yZXNvbHV0aW9uPScpID09PSB0cnVlICl7XG5cdFx0XHQvLyBnZXQgcmVzb2x1dGlvblcvcmVzb2x1dGlvbkggZnJvbSB1cmxcblx0XHRcdHZhciBtYXJrZXJQYWdlUmVzb2x1dGlvbiA9IGxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpXG5cdFx0XHR2YXIgbWF0Y2hlcyA9IG1hcmtlclBhZ2VSZXNvbHV0aW9uLm1hdGNoKC9tYXJrZXJzLXBhZ2UtcmVzb2x1dGlvbj0oXFxkKyl4KFxcZCspLylcblx0XHRcdGNvbnNvbGUuYXNzZXJ0KG1hdGNoZXMubGVuZ3RoID09PSAzKVxuXHRcdFx0dmFyIHJlc29sdXRpb25XID0gcGFyc2VJbnQobWF0Y2hlc1sxXSlcblx0XHRcdHZhciByZXNvbHV0aW9uSCA9IHBhcnNlSW50KG1hdGNoZXNbMl0pXG5cdFx0XHR2YXIgYXJDb250ZXh0ID0gYXJTZXNzaW9uLmFyQ29udGV4dFxuXHRcdFx0Ly8gZ2VuZXJhdGUgYW5kIHN0b3JlIHRoZSBBUmpzTXVsdGlNYXJrZXJGaWxlXG5cdFx0XHRNYXJrZXJzQXJlYVV0aWxzLnN0b3JlTWFya2Vyc0FyZWFGaWxlRnJvbVJlc29sdXRpb24oYXJDb250ZXh0LnBhcmFtZXRlcnMudHJhY2tpbmdCYWNrZW5kLCByZXNvbHV0aW9uVywgcmVzb2x1dGlvbkgpXG5cdFx0fVxuXG5cdFx0Ly8gaWYgdGhlcmUgaXMgbm8gQVJqc011bHRpTWFya2VyRmlsZSwgYnVpbGQgYSBkZWZhdWx0IG9uZVxuXHRcdGlmKCBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnQVJqc011bHRpTWFya2VyRmlsZScpID09PSBudWxsICl7XG5cdFx0XHRNYXJrZXJzQXJlYVV0aWxzLnN0b3JlRGVmYXVsdE11bHRpTWFya2VyRmlsZShhckNvbnRleHQucGFyYW1ldGVycy50cmFja2luZ0JhY2tlbmQpXG5cdFx0fVxuXG5cdFx0Ly8gZ2V0IG11bHRpTWFya2VyRmlsZSBmcm9tIGxvY2FsU3RvcmFnZVxuXHRcdGNvbnNvbGUuYXNzZXJ0KCBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnQVJqc011bHRpTWFya2VyRmlsZScpICE9PSBudWxsIClcblx0XHR2YXIgbXVsdGlNYXJrZXJGaWxlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ0FSanNNdWx0aU1hcmtlckZpbGUnKVxuXG5cdFx0Ly8gc2V0IGNvbnRyb2xsZWRPYmplY3QgZGVwZW5kaW5nIG9uIGNoYW5nZU1hdHJpeE1vZGVcblx0XHRpZiggbWFya2VyUGFyYW1ldGVycy5jaGFuZ2VNYXRyaXhNb2RlID09PSAnbW9kZWxWaWV3TWF0cml4JyApe1xuXHRcdFx0dmFyIHBhcmVudDNEID0gc2NlbmVcblx0XHR9ZWxzZSBpZiggbWFya2VyUGFyYW1ldGVycy5jaGFuZ2VNYXRyaXhNb2RlID09PSAnY2FtZXJhVHJhbnNmb3JtTWF0cml4JyApe1xuXHRcdFx0dmFyIHBhcmVudDNEID0gY2FtZXJhXG5cdFx0fWVsc2UgY29uc29sZS5hc3NlcnQoZmFsc2UpXG5cblx0XHQvLyBidWlsZCBhIG11bHRpTWFya2VyQ29udHJvbHNcblx0XHR2YXIgbXVsdGlNYXJrZXJDb250cm9scyA9IE1hcmtlcnNBcmVhQ29udHJvbHMuZnJvbUpTT04oYXJDb250ZXh0LCBwYXJlbnQzRCwgY29udHJvbGxlZE9iamVjdCwgbXVsdGlNYXJrZXJGaWxlKVxuXHRcdHRoaXMuY29udHJvbHMgPSBtdWx0aU1hcmtlckNvbnRyb2xzXG5cblx0XHQvLyBob25vciBtYXJrZXJQYXJhbWV0ZXJzLmNoYW5nZU1hdHJpeE1vZGVcblx0XHRtdWx0aU1hcmtlckNvbnRyb2xzLnBhcmFtZXRlcnMuY2hhbmdlTWF0cml4TW9kZSA9IG1hcmtlclBhcmFtZXRlcnMuY2hhbmdlTWF0cml4TW9kZVxuXG4vLyBUT0RPIHB1dCBzdWJNYXJrZXJDb250cm9scyB2aXNpYmlsaXR5IGludG8gYW4gZXh0ZXJuYWwgZmlsZS4gd2l0aCAyIGhhbmRsaW5nIGZvciB0aHJlZS5qcyBhbmQgYmFieWxvbi5qc1xuXHRcdC8vIGNyZWF0ZSBBck1hcmtlckhlbHBlciAtIHVzZWZ1bCB0byBkZWJ1ZyAtIHN1cGVyIHRocmVlLmpzIHNwZWNpZmljXG5cdFx0dmFyIG1hcmtlckhlbHBlcnMgPSBbXVxuXHRcdG11bHRpTWFya2VyQ29udHJvbHMuc3ViTWFya2Vyc0NvbnRyb2xzLmZvckVhY2goZnVuY3Rpb24oc3ViTWFya2VyQ29udHJvbHMpe1xuXHRcdFx0Ly8gYWRkIGFuIGhlbHBlciB0byB2aXN1YWJsZSBlYWNoIHN1Yi1tYXJrZXJcblx0XHRcdHZhciBtYXJrZXJIZWxwZXIgPSBuZXcgQXJNYXJrZXJIZWxwZXIoc3ViTWFya2VyQ29udHJvbHMpXG5cdFx0XHRtYXJrZXJIZWxwZXIub2JqZWN0M2QudmlzaWJsZSA9IGZhbHNlXG5cdFx0XHQvLyBzdWJNYXJrZXJDb250cm9scy5vYmplY3QzZC5hZGQoIG1hcmtlckhlbHBlci5vYmplY3QzZCApXG5cdFx0XHRzdWJNYXJrZXJDb250cm9scy5vYmplY3QzZC5hZGQoIG1hcmtlckhlbHBlci5vYmplY3QzZCApXG5cdFx0XHQvLyBhZGQgaXQgdG8gbWFya2VySGVscGVyc1xuXHRcdFx0bWFya2VySGVscGVycy5wdXNoKG1hcmtlckhlbHBlcilcblx0XHR9KVxuXHRcdC8vIGRlZmluZSBBUEkgc3BlY2lmaWMgdG8gbWFya2Vyc0FyZWFcblx0XHR0aGlzLm1hcmtlcnNBcmVhID0ge31cblx0XHR0aGlzLm1hcmtlcnNBcmVhLnNldFN1Yk1hcmtlcnNWaXNpYmlsaXR5ID0gZnVuY3Rpb24odmlzaWJsZSl7XG5cdFx0XHRtYXJrZXJIZWxwZXJzLmZvckVhY2goZnVuY3Rpb24obWFya2VySGVscGVyKXtcblx0XHRcdFx0bWFya2VySGVscGVyLm9iamVjdDNkLnZpc2libGUgPSB2aXNpYmxlXG5cdFx0XHR9KVxuXHRcdH1cblx0fVxuXG5cdHRoaXMub2JqZWN0M2QgPSBuZXcgVEhSRUUuR3JvdXAoKVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvL1x0XHRUSFJFRXguQXJTbW9vdGhlZENvbnRyb2xzXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdHZhciBzaG91bGRCZVNtb290aGVkID0gdHJ1ZVxuXG5cdGlmKCBzaG91bGRCZVNtb290aGVkID09PSB0cnVlICl7XG5cdFx0Ly8gYnVpbGQgYSBzbW9vdGhlZENvbnRyb2xzXG5cdFx0dmFyIHNtb290aGVkUm9vdCA9IG5ldyBUSFJFRS5Hcm91cCgpXG5cdFx0c2NlbmUuYWRkKHNtb290aGVkUm9vdClcblx0XHR2YXIgc21vb3RoZWRDb250cm9scyA9IG5ldyBBclNtb290aGVkQ29udHJvbHMoc21vb3RoZWRSb290KVxuXHRcdHNtb290aGVkUm9vdC5hZGQodGhpcy5vYmplY3QzZClcblx0fWVsc2V7XG5cdFx0bWFya2VyUm9vdC5hZGQodGhpcy5vYmplY3QzZClcblx0fVxuXG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vXHRcdENvZGUgU2VwYXJhdG9yXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHR0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uKCl7XG5cdFx0Ly8gdXBkYXRlIF90aGlzLm9iamVjdDNkLnZpc2libGVcblx0XHRfdGhpcy5vYmplY3QzZC52aXNpYmxlID0gX3RoaXMub2JqZWN0M2QucGFyZW50LnZpc2libGVcblxuXHRcdC8vIGNvbnNvbGUubG9nKCdjb250cm9sbGVkT2JqZWN0LnZpc2libGUnLCBfdGhpcy5vYmplY3QzZC5wYXJlbnQudmlzaWJsZSlcblx0XHRpZiggc21vb3RoZWRDb250cm9scyAhPT0gdW5kZWZpbmVkICl7XG5cdFx0XHQvLyB1cGRhdGUgc21vb3RoZWRDb250cm9scyBwYXJhbWV0ZXJzIGRlcGVuZGluZyBvbiBob3cgbWFueSBtYXJrZXJzIGFyZSB2aXNpYmxlIGluIG11bHRpTWFya2VyQ29udHJvbHNcblx0XHRcdGlmKCBtdWx0aU1hcmtlckNvbnRyb2xzICE9PSB1bmRlZmluZWQgKXtcblx0XHRcdFx0bXVsdGlNYXJrZXJDb250cm9scy51cGRhdGVTbW9vdGhlZENvbnRyb2xzKHNtb290aGVkQ29udHJvbHMpXG5cdFx0XHR9XG5cblx0XHRcdC8vIHVwZGF0ZSBzbW9vdGhlZENvbnRyb2xzXG5cdFx0XHRzbW9vdGhlZENvbnRyb2xzLnVwZGF0ZShtYXJrZXJSb290KVxuXHRcdH1cblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBBbmNob3I7IiwiaW1wb3J0IE1hcmtlcnNBcmVhVXRpbHMgZnJvbSAnLi4vbWFya2Vycy1hcmVhL2FyanMtbWFya2Vyc2FyZWF1dGlscyc7XG5pbXBvcnQgQ29udGV4dCBmcm9tICcuLi90aHJlZXgvYXJqcy1jb250ZXh0JzsgLy8gVE9ETyBjb250ZXh0IGJ1aWxkLWRlcGVuZGVudFxuXG4vKipcbiAqIENyZWF0ZSBhbiBkZWJ1ZyBVSSBmb3IgYW4gQVJqcy5BbmNob3JcbiAqXG4gKiBAcGFyYW0ge0FSanMuQW5jaG9yfSBhckFuY2hvciAtIHRoZSBhbmNob3IgdG8gdXNlclxuICovXG5jb25zdCBTZXNzaW9uRGVidWdVSSA9IGZ1bmN0aW9uIChhclNlc3Npb24pIHtcbiAgICB2YXIgdHJhY2tpbmdCYWNrZW5kID0gYXJTZXNzaW9uLmFyQ29udGV4dC5wYXJhbWV0ZXJzLnRyYWNraW5nQmFja2VuZFxuXG4gICAgdGhpcy5kb21FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB0aGlzLmRvbUVsZW1lbnQuc3R5bGUuY29sb3IgPSAncmdiYSgwLDAsMCwwLjkpJ1xuICAgIHRoaXMuZG9tRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAncmdiYSgxMjcsMTI3LDEyNywwLjUpJ1xuICAgIHRoaXMuZG9tRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJ1xuICAgIHRoaXMuZG9tRWxlbWVudC5zdHlsZS5wYWRkaW5nID0gJzAuNWVtJ1xuICAgIHRoaXMuZG9tRWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCdcbiAgICB0aGlzLmRvbUVsZW1lbnQuc3R5bGUubGVmdCA9ICc1cHgnXG4gICAgdGhpcy5kb21FbGVtZW50LnN0eWxlLmJvdHRvbSA9ICcxMHB4J1xuICAgIHRoaXMuZG9tRWxlbWVudC5zdHlsZS50ZXh0QWxpZ24gPSAncmlnaHQnXG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvL1x0XHRjdXJyZW50LXRyYWNraW5nLWJhY2tlbmRcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIHZhciBkb21FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpXG4gICAgZG9tRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJ1xuICAgIGRvbUVsZW1lbnQuaW5uZXJIVE1MID0gJzxiPnRyYWNraW5nQmFja2VuZDwvYj4gOiAnICsgdHJhY2tpbmdCYWNrZW5kXG4gICAgdGhpcy5kb21FbGVtZW50LmFwcGVuZENoaWxkKGRvbUVsZW1lbnQpXG59XG5cbi8qKlxuICogVXJsIG9mIGF1Z21lbnRlZC13ZWJzaXRlIHNlcnZpY2UgLSBpZiA9PT0gJycgdGhlbiBkb250IGluY2x1ZGUgYXVnbWVudGVkLXdlYnNpdGUgbGlua1xuICogQHR5cGUge1N0cmluZ31cbiAqL1xuU2Vzc2lvbkRlYnVnVUkuQXVnbWVudGVkV2Vic2l0ZVVSTCA9ICdodHRwczovL3dlYnhyLmlvL2F1Z21lbnRlZC13ZWJzaXRlJ1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vXHRcdEFuY2hvckRlYnVnVUlcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIENyZWF0ZSBhbiBkZWJ1ZyBVSSBmb3IgYW4gQVJqcy5BbmNob3JcbiAqXG4gKiBAcGFyYW0ge0FSanMuQW5jaG9yfSBhckFuY2hvciAtIHRoZSBhbmNob3IgdG8gdXNlclxuICovXG5jb25zdCBBbmNob3JEZWJ1Z1VJID0gZnVuY3Rpb24gKGFyQW5jaG9yKSB7XG4gICAgdmFyIGFyU2Vzc2lvbiA9IGFyQW5jaG9yLmFyU2Vzc2lvblxuICAgIHZhciB0cmFja2luZ0JhY2tlbmQgPSBhclNlc3Npb24uYXJDb250ZXh0LnBhcmFtZXRlcnMudHJhY2tpbmdCYWNrZW5kXG5cbiAgICB0aGlzLmRvbUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHRoaXMuZG9tRWxlbWVudC5zdHlsZS5jb2xvciA9ICdyZ2JhKDAsMCwwLDAuOSknXG4gICAgdGhpcy5kb21FbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdyZ2JhKDEyNywxMjcsMTI3LDAuNSknXG4gICAgdGhpcy5kb21FbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJ1xuICAgIHRoaXMuZG9tRWxlbWVudC5zdHlsZS5wYWRkaW5nID0gJzAuNWVtJ1xuICAgIHRoaXMuZG9tRWxlbWVudC5zdHlsZS5tYXJnaW4gPSAnMC41ZW0nXG4gICAgdGhpcy5kb21FbGVtZW50LnN0eWxlLnRleHRBbGlnbiA9ICdsZWZ0J1xuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy9cdFx0Y3VycmVudC10cmFja2luZy1iYWNrZW5kXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICB2YXIgZG9tRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKVxuICAgIGRvbUVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jaydcbiAgICBkb21FbGVtZW50LnN0eWxlLnBhZGRpbmcgPSAnMC41ZW0nXG4gICAgZG9tRWxlbWVudC5zdHlsZS5jb2xvciA9ICdyZ2JhKDAsMCwwLDAuOSknXG4gICAgZG9tRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAncmdiYSgxMjcsMTI3LDEyNywwLjUpJ1xuICAgIGRvbUVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnXG4gICAgZG9tRWxlbWVudC5zdHlsZS5sZWZ0ID0gJzVweCdcbiAgICBkb21FbGVtZW50LnN0eWxlLmJvdHRvbSA9ICc0MHB4J1xuXG4gICAgdGhpcy5kb21FbGVtZW50LmFwcGVuZENoaWxkKGRvbUVsZW1lbnQpXG4gICAgZG9tRWxlbWVudC5pbm5lckhUTUwgPSAnPGI+bWFya2Vyc0FyZWFFbmFibGVkPC9iPiA6JyArIGFyQW5jaG9yLnBhcmFtZXRlcnMubWFya2Vyc0FyZWFFbmFibGVkXG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvL1x0XHR0b2dnbGUtbWFya2VyLWhlbHBlclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgaWYgKGFyQW5jaG9yLnBhcmFtZXRlcnMubWFya2Vyc0FyZWFFbmFibGVkKSB7XG4gICAgICAgIHZhciBkb21FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJylcbiAgICAgICAgZG9tRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJ1xuICAgICAgICB0aGlzLmRvbUVsZW1lbnQuc3R5bGUucGFkZGluZyA9ICcwLjVlbSdcbiAgICAgICAgdGhpcy5kb21FbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJ1xuICAgICAgICB0aGlzLmRvbUVsZW1lbnQuc3R5bGUudGV4dEFsaWduID0gJ2xlZnQnXG4gICAgICAgIHRoaXMuZG9tRWxlbWVudC5hcHBlbmRDaGlsZChkb21FbGVtZW50KVxuXG4gICAgICAgIGRvbUVsZW1lbnQuaWQgPSAnYnV0dG9uVG9nZ2xlTWFya2VySGVscGVycydcbiAgICAgICAgZG9tRWxlbWVudC5pbm5lckhUTUwgPSAndG9nZ2xlLW1hcmtlci1oZWxwZXInXG4gICAgICAgIGRvbUVsZW1lbnQuaHJlZiA9ICdqYXZhc2NyaXB0OnZvaWQoMCknXG5cbiAgICAgICAgdmFyIHN1Yk1hcmtlckhlbHBlcnNWaXNpYmxlID0gZmFsc2VcbiAgICAgICAgZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN1Yk1hcmtlckhlbHBlcnNWaXNpYmxlID0gc3ViTWFya2VySGVscGVyc1Zpc2libGUgPyBmYWxzZSA6IHRydWVcbiAgICAgICAgICAgIGFyQW5jaG9yLm1hcmtlcnNBcmVhLnNldFN1Yk1hcmtlcnNWaXNpYmlsaXR5KHN1Yk1hcmtlckhlbHBlcnNWaXNpYmxlKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vXHRcdExlYXJuLW5ldy1tYXJrZXItYXJlYVxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgaWYgKGFyQW5jaG9yLnBhcmFtZXRlcnMubWFya2Vyc0FyZWFFbmFibGVkKSB7XG4gICAgICAgIHZhciBkb21FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJylcbiAgICAgICAgZG9tRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJ1xuICAgICAgICB0aGlzLmRvbUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9tRWxlbWVudClcblxuICAgICAgICBkb21FbGVtZW50LmlkID0gJ2J1dHRvbk1hcmtlcnNBcmVhTGVhcm5lcidcbiAgICAgICAgZG9tRWxlbWVudC5pbm5lckhUTUwgPSAnTGVhcm4tbmV3LW1hcmtlci1hcmVhJ1xuICAgICAgICBkb21FbGVtZW50LmhyZWYgPSAnamF2YXNjcmlwdDp2b2lkKDApJ1xuXG4gICAgICAgIGRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoQW5jaG9yRGVidWdVSS5NYXJrZXJzQXJlYUxlYXJuZXJVUkwgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGVhcm5lclVSTCA9IEFuY2hvckRlYnVnVUkuTWFya2Vyc0FyZWFMZWFybmVyVVJMXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBsZWFybmVyVVJMID0gQ29udGV4dC5iYXNlVVJMICsgJ2V4YW1wbGVzL211bHRpLW1hcmtlcnMvZXhhbXBsZXMvbGVhcm5lci5odG1sJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgTWFya2Vyc0FyZWFVdGlscy5uYXZpZ2F0ZVRvTGVhcm5lclBhZ2UobGVhcm5lclVSTCwgdHJhY2tpbmdCYWNrZW5kKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vXHRcdFJlc2V0LW1hcmtlci1hcmVhXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICBpZiAoYXJBbmNob3IucGFyYW1ldGVycy5tYXJrZXJzQXJlYUVuYWJsZWQpIHtcbiAgICAgICAgdmFyIGRvbUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKVxuICAgICAgICBkb21FbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snXG4gICAgICAgIHRoaXMuZG9tRWxlbWVudC5hcHBlbmRDaGlsZChkb21FbGVtZW50KVxuXG4gICAgICAgIGRvbUVsZW1lbnQuaWQgPSAnYnV0dG9uTWFya2Vyc0FyZWFSZXNldCdcbiAgICAgICAgZG9tRWxlbWVudC5pbm5lckhUTUwgPSAnUmVzZXQtbWFya2VyLWFyZWEnXG4gICAgICAgIGRvbUVsZW1lbnQuaHJlZiA9ICdqYXZhc2NyaXB0OnZvaWQoMCknXG5cbiAgICAgICAgZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIE1hcmtlcnNBcmVhVXRpbHMuc3RvcmVEZWZhdWx0TXVsdGlNYXJrZXJGaWxlKHRyYWNraW5nQmFja2VuZClcbiAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG4vKipcbiAqIHVybCBmb3IgdGhlIG1hcmtlcnMtYXJlYSBsZWFybmVyLiBpZiBub3Qgc2V0LCB0YWtlIHRoZSBkZWZhdWx0IG9uZVxuICogQHR5cGUge1N0cmluZ31cbiAqL1xuQW5jaG9yRGVidWdVSS5NYXJrZXJzQXJlYUxlYXJuZXJVUkwgPSBudWxsXG5cbmV4cG9ydCB7XG4gIFNlc3Npb25EZWJ1Z1VJLFxuICBBbmNob3JEZWJ1Z1VJXG59O1xuIiwiaW1wb3J0IEhpdFRlc3RpbmdQbGFuZSBmcm9tICcuLi90aHJlZXgvdGhyZWV4LWhpdHRlc3RpbmctcGxhbmUnO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBhbmNob3IgaW4gdGhlIHJlYWwgd29ybGRcbiAqXG4gKiBAcGFyYW0ge0FSanMuU2Vzc2lvbn0gYXJTZXNzaW9uIC0gdGhlIHNlc3Npb24gb24gd2hpY2ggd2UgY3JlYXRlIHRoZSBhbmNob3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXJrZXJQYXJhbWV0ZXJzIC0gcGFyYW1ldGVyIG9mIHRoaXMgYW5jaG9yXG4gKi9cbmNvbnN0IEhpdFRlc3RpbmcgPSBmdW5jdGlvbiAoYXJTZXNzaW9uKSB7XG4gICAgdmFyIF90aGlzID0gdGhpc1xuICAgIHZhciBhckNvbnRleHQgPSBhclNlc3Npb24uYXJDb250ZXh0XG4gICAgdmFyIHRyYWNraW5nQmFja2VuZCA9IGFyQ29udGV4dC5wYXJhbWV0ZXJzLnRyYWNraW5nQmFja2VuZFxuXG4gICAgdGhpcy5lbmFibGVkID0gdHJ1ZVxuICAgIHRoaXMuX2FyU2Vzc2lvbiA9IGFyU2Vzc2lvblxuICAgIHRoaXMuX2hpdFRlc3RpbmdQbGFuZSA9IG51bGxcbiAgICBfdGhpcy5faGl0VGVzdGluZ1BsYW5lID0gbmV3IEhpdFRlc3RpbmdQbGFuZShhclNlc3Npb24uYXJTb3VyY2UuZG9tRWxlbWVudClcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vL1x0XHR1cGRhdGUgZnVuY3Rpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLyoqXG4gKiB1cGRhdGVcbiAqXG4gKiBAcGFyYW0ge1RIUkVFLkNhbWVyYX0gY2FtZXJhICAgLSB0aGUgY2FtZXJhIHRvIHVzZVxuICogQHBhcmFtIHtUSFJFRS5PYmplY3QzRH0gb2JqZWN0M2QgLVxuICovXG5IaXRUZXN0aW5nLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoY2FtZXJhLCBwaWNraW5nUm9vdCwgY2hhbmdlTWF0cml4TW9kZSkge1xuICAgIC8vIGlmIGl0IGlzbnQgZW5hYmxlZCwgZG8gbm90aGluZ1xuICAgIGlmICh0aGlzLmVuYWJsZWQgPT09IGZhbHNlKSByZXR1cm5cblxuXG4gICAgaWYgKHRoaXMuX2hpdFRlc3RpbmdQbGFuZSAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9oaXRUZXN0aW5nUGxhbmUudXBkYXRlKGNhbWVyYSwgcGlja2luZ1Jvb3QsIGNoYW5nZU1hdHJpeE1vZGUpXG4gICAgfSBlbHNlIGNvbnNvbGUuYXNzZXJ0KGZhbHNlKVxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vXHRcdGFjdHVhbCBoaXQgdGVzdGluZ1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogVGVzdCB0aGUgcmVhbCB3b3JsZCBmb3IgaW50ZXJzZWN0aW9ucyBkaXJlY3RseSBmcm9tIGEgRG9tRXZlbnRcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbW91c2VYIC0gcG9zaXRpb24gWCBvZiB0aGUgaGl0IFstMSwgKzFdXG4gKiBAcGFyYW0ge051bWJlcn0gbW91c2VZIC0gcG9zaXRpb24gWSBvZiB0aGUgaGl0IFstMSwgKzFdXG4gKiBAcmV0dXJuIHtbSGl0VGVzdGluZy5SZXN1bHRdfSAtIGFycmF5IG9mIHJlc3VsdFxuICovXG5IaXRUZXN0aW5nLnByb3RvdHlwZS50ZXN0RG9tRXZlbnQgPSBmdW5jdGlvbiAoZG9tRXZlbnQpIHtcbiAgICB2YXIgdHJhY2tpbmdCYWNrZW5kID0gdGhpcy5fYXJTZXNzaW9uLmFyQ29udGV4dC5wYXJhbWV0ZXJzLnRyYWNraW5nQmFja2VuZFxuICAgIHZhciBhclNvdXJjZSA9IHRoaXMuX2FyU2Vzc2lvbi5hclNvdXJjZVxuXG4gICAgLy8gaWYgaXQgaXNudCBlbmFibGVkLCBkbyBub3RoaW5nXG4gICAgaWYgKHRoaXMuZW5hYmxlZCA9PT0gZmFsc2UpIHJldHVybiBbXVxuICAgIHZhciBtb3VzZVggPSBkb21FdmVudC5jbGllbnRYIC8gYXJTb3VyY2UuZG9tRWxlbWVudFdpZHRoKClcbiAgICB2YXIgbW91c2VZID0gZG9tRXZlbnQuY2xpZW50WSAvIGFyU291cmNlLmRvbUVsZW1lbnRIZWlnaHQoKVxuXG4gICAgcmV0dXJuIHRoaXMudGVzdChtb3VzZVgsIG1vdXNlWSlcbn1cblxuLyoqXG4gKiBUZXN0IHRoZSByZWFsIHdvcmxkIGZvciBpbnRlcnNlY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtb3VzZVggLSBwb3NpdGlvbiBYIG9mIHRoZSBoaXQgWzAsICsxXVxuICogQHBhcmFtIHtOdW1iZXJ9IG1vdXNlWSAtIHBvc2l0aW9uIFkgb2YgdGhlIGhpdCBbMCwgKzFdXG4gKiBAcmV0dXJuIHtbSGl0VGVzdGluZy5SZXN1bHRdfSAtIGFycmF5IG9mIHJlc3VsdFxuICovXG5IaXRUZXN0aW5nLnByb3RvdHlwZS50ZXN0ID0gZnVuY3Rpb24gKG1vdXNlWCwgbW91c2VZKSB7XG4gICAgdmFyIGFyQ29udGV4dCA9IHRoaXMuX2FyU2Vzc2lvbi5hckNvbnRleHRcbiAgICB2YXIgdHJhY2tpbmdCYWNrZW5kID0gYXJDb250ZXh0LnBhcmFtZXRlcnMudHJhY2tpbmdCYWNrZW5kXG4gICAgdmFyIGhpdFRlc3RSZXN1bHRzID0gW11cblxuICAgIC8vIGlmIGl0IGlzbnQgZW5hYmxlZCwgZG8gbm90aGluZ1xuICAgIGlmICh0aGlzLmVuYWJsZWQgPT09IGZhbHNlKSByZXR1cm4gW11cblxuICAgIHZhciByZXN1bHQgPSB0aGlzLl9oaXRUZXN0aW5nUGxhbmUudGVzdChtb3VzZVgsIG1vdXNlWSlcblxuICAgIC8vIGlmIG5vIHJlc3VsdCBpcyBmb3VuZCwgcmV0dXJuIG5vd1xuICAgIGlmIChyZXN1bHQgPT09IG51bGwpIHJldHVybiBoaXRUZXN0UmVzdWx0c1xuXG4gICAgLy8gYnVpbGQgYSBIaXRUZXN0aW5nLlJlc3VsdFxuICAgIHZhciBoaXRUZXN0UmVzdWx0ID0gbmV3IEhpdFRlc3RpbmcuUmVzdWx0KHJlc3VsdC5wb3NpdGlvbiwgcmVzdWx0LnF1YXRlcm5pb24sIHJlc3VsdC5zY2FsZSlcbiAgICBoaXRUZXN0UmVzdWx0cy5wdXNoKGhpdFRlc3RSZXN1bHQpXG5cbiAgICByZXR1cm4gaGl0VGVzdFJlc3VsdHNcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vL1x0XHRIaXRUZXN0aW5nLlJlc3VsdFxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKipcbiAqIENvbnRhaW5zIHRoZSByZXN1bHQgb2YgSGl0VGVzdGluZy50ZXN0KClcbiAqXG4gKiBAcGFyYW0ge1RIUkVFLlZlY3RvcjN9IHBvc2l0aW9uIC0gcG9zaXRpb24gdG8gdXNlXG4gKiBAcGFyYW0ge1RIUkVFLlF1YXRlcm5pb259IHF1YXRlcm5pb24gLSBxdWF0ZXJuaW9uIHRvIHVzZVxuICogQHBhcmFtIHtUSFJFRS5WZWN0b3IzfSBzY2FsZSAtIHNjYWxlXG4gKi9cbkhpdFRlc3RpbmcuUmVzdWx0ID0gZnVuY3Rpb24gKHBvc2l0aW9uLCBxdWF0ZXJuaW9uLCBzY2FsZSkge1xuICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvblxuICAgIHRoaXMucXVhdGVybmlvbiA9IHF1YXRlcm5pb25cbiAgICB0aGlzLnNjYWxlID0gc2NhbGVcbn1cblxuLyoqXG4gKiBBcHBseSB0byBhIGNvbnRyb2xsZWQgb2JqZWN0M2RcbiAqXG4gKiBAcGFyYW0ge1RIUkVFLk9iamVjdDNEfSBvYmplY3QzZCAtIHRoZSByZXN1bHQgdG8gYXBwbHlcbiAqL1xuSGl0VGVzdGluZy5SZXN1bHQucHJvdG90eXBlLmFwcGx5ID0gZnVuY3Rpb24gKG9iamVjdDNkKSB7XG4gICAgb2JqZWN0M2QucG9zaXRpb24uY29weSh0aGlzLnBvc2l0aW9uKVxuICAgIG9iamVjdDNkLnF1YXRlcm5pb24uY29weSh0aGlzLnF1YXRlcm5pb24pXG4gICAgb2JqZWN0M2Quc2NhbGUuY29weSh0aGlzLnNjYWxlKVxuXG4gICAgb2JqZWN0M2QudXBkYXRlTWF0cml4KClcbn1cblxuLyoqXG4gKiBBcHBseSB0byBhIGNvbnRyb2xsZWQgb2JqZWN0M2RcbiAqXG4gKiBAcGFyYW0ge1RIUkVFLk9iamVjdDNEfSBvYmplY3QzZCAtIHRoZSByZXN1bHQgdG8gYXBwbHlcbiAqL1xuSGl0VGVzdGluZy5SZXN1bHQucHJvdG90eXBlLmFwcGx5UG9zaXRpb24gPSBmdW5jdGlvbiAob2JqZWN0M2QpIHtcbiAgICBvYmplY3QzZC5wb3NpdGlvbi5jb3B5KHRoaXMucG9zaXRpb24pXG5cbiAgICBvYmplY3QzZC51cGRhdGVNYXRyaXgoKVxuXG4gICAgcmV0dXJuIHRoaXNcbn1cblxuLyoqXG4gKiBBcHBseSB0byBhIGNvbnRyb2xsZWQgb2JqZWN0M2RcbiAqXG4gKiBAcGFyYW0ge1RIUkVFLk9iamVjdDNEfSBvYmplY3QzZCAtIHRoZSByZXN1bHQgdG8gYXBwbHlcbiAqL1xuSGl0VGVzdGluZy5SZXN1bHQucHJvdG90eXBlLmFwcGx5UXVhdGVybmlvbiA9IGZ1bmN0aW9uIChvYmplY3QzZCkge1xuICAgIG9iamVjdDNkLnF1YXRlcm5pb24uY29weSh0aGlzLnF1YXRlcm5pb24pXG5cbiAgICBvYmplY3QzZC51cGRhdGVNYXRyaXgoKVxuXG4gICAgcmV0dXJuIHRoaXNcbn1cblxuZXhwb3J0IGRlZmF1bHQgSGl0VGVzdGluZztcbiIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCBTb3VyY2UgZnJvbSAnLi4vdGhyZWV4L2FyanMtc291cmNlJztcbmltcG9ydCBDb250ZXh0IGZyb20gJy4uL3RocmVleC9hcmpzLWNvbnRleHQnOyAvLyBUT0RPIGNvbnRleHQgYnVpbGQtZGVwZW5kZW50XG5cbi8qKlxuICogICogZGVmaW5lIGEgU2Vzc2lvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbWV0ZXJzIC0gcGFyYW1ldGVycyBmb3IgdGhpcyBzZXNzaW9uXG4gKi9cbmNvbnN0IFNlc3Npb24gPSBmdW5jdGlvbihwYXJhbWV0ZXJzKXtcblx0dmFyIF90aGlzID0gdGhpc1xuXHQvLyBoYW5kbGUgZGVmYXVsdCBwYXJhbWV0ZXJzXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyZW5kZXJlcjogbnVsbCxcblx0XHRjYW1lcmE6IG51bGwsXG5cdFx0c2NlbmU6IG51bGwsXG5cdFx0c291cmNlUGFyYW1ldGVyczoge30sXG5cdFx0Y29udGV4dFBhcmFtZXRlcnM6IHt9LFxuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vXHRcdHNldFBhcmFtZXRlcnNcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdHNldFBhcmFtZXRlcnMocGFyYW1ldGVycylcblx0ZnVuY3Rpb24gc2V0UGFyYW1ldGVycyhwYXJhbWV0ZXJzKXtcblx0XHRpZiggcGFyYW1ldGVycyA9PT0gdW5kZWZpbmVkIClcdHJldHVyblxuXHRcdGZvciggdmFyIGtleSBpbiBwYXJhbWV0ZXJzICl7XG5cdFx0XHR2YXIgbmV3VmFsdWUgPSBwYXJhbWV0ZXJzWyBrZXkgXVxuXG5cdFx0XHRpZiggbmV3VmFsdWUgPT09IHVuZGVmaW5lZCApe1xuXHRcdFx0XHRjb25zb2xlLndhcm4oIFwiVEhSRUV4LlNlc3Npb246ICdcIiArIGtleSArIFwiJyBwYXJhbWV0ZXIgaXMgdW5kZWZpbmVkLlwiIClcblx0XHRcdFx0Y29udGludWVcblx0XHRcdH1cblxuXHRcdFx0dmFyIGN1cnJlbnRWYWx1ZSA9IF90aGlzLnBhcmFtZXRlcnNbIGtleSBdXG5cblx0XHRcdGlmKCBjdXJyZW50VmFsdWUgPT09IHVuZGVmaW5lZCApe1xuXHRcdFx0XHRjb25zb2xlLndhcm4oIFwiVEhSRUV4LlNlc3Npb246ICdcIiArIGtleSArIFwiJyBpcyBub3QgYSBwcm9wZXJ0eSBvZiB0aGlzIG1hdGVyaWFsLlwiIClcblx0XHRcdFx0Y29udGludWVcblx0XHRcdH1cblxuXHRcdFx0X3RoaXMucGFyYW1ldGVyc1sga2V5IF0gPSBuZXdWYWx1ZVxuXHRcdH1cblx0fVxuXHQvLyBzYW5pdHkgY2hlY2tcblx0Y29uc29sZS5hc3NlcnQodGhpcy5wYXJhbWV0ZXJzLnJlbmRlcmVyIGluc3RhbmNlb2YgVEhSRUUuV2ViR0xSZW5kZXJlcilcblx0Y29uc29sZS5hc3NlcnQodGhpcy5wYXJhbWV0ZXJzLmNhbWVyYSBpbnN0YW5jZW9mIFRIUkVFLkNhbWVyYSlcblx0Y29uc29sZS5hc3NlcnQodGhpcy5wYXJhbWV0ZXJzLnNjZW5lIGluc3RhbmNlb2YgVEhSRUUuU2NlbmUpXG5cblxuXHQvLyBiYWNrd2FyZCBlbXVsYXRpb25cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdyZW5kZXJlcicsIHtnZXQ6IGZ1bmN0aW9uKCl7XG5cdFx0Y29uc29sZS53YXJuKCd1c2UgLnBhcmFtZXRlcnMucmVuZGVyZXIgcmVuZGVyZXInKVxuXHRcdHJldHVybiB0aGlzLnBhcmFtZXRlcnMucmVuZGVyZXI7XG5cdH19KTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdjYW1lcmEnLCB7Z2V0OiBmdW5jdGlvbigpe1xuXHRcdGNvbnNvbGUud2FybigndXNlIC5wYXJhbWV0ZXJzLmNhbWVyYSBpbnN0ZWFkJylcblx0XHRyZXR1cm4gdGhpcy5wYXJhbWV0ZXJzLmNhbWVyYTtcblx0fX0pO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3NjZW5lJywge2dldDogZnVuY3Rpb24oKXtcblx0XHRjb25zb2xlLndhcm4oJ3VzZSAucGFyYW1ldGVycy5zY2VuZSBpbnN0ZWFkJylcblx0XHRyZXR1cm4gdGhpcy5wYXJhbWV0ZXJzLnNjZW5lO1xuXHR9fSk7XG5cblxuXHQvLyBsb2cgdGhlIHZlcnNpb25cblx0Y29uc29sZS5sb2coJ0FSLmpzJywgQ29udGV4dC5SRVZJU0lPTiwgJy0gdHJhY2tpbmdCYWNrZW5kOicsIHBhcmFtZXRlcnMuY29udGV4dFBhcmFtZXRlcnMudHJhY2tpbmdCYWNrZW5kKVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvL1x0XHRpbml0IGFyU291cmNlXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHR2YXIgYXJTb3VyY2UgPSBfdGhpcy5hclNvdXJjZSA9IG5ldyBTb3VyY2UocGFyYW1ldGVycy5zb3VyY2VQYXJhbWV0ZXJzKVxuXG5cdGFyU291cmNlLmluaXQoZnVuY3Rpb24gb25SZWFkeSgpe1xuXHRcdGFyU291cmNlLm9uUmVzaXplKGFyQ29udGV4dCwgX3RoaXMucGFyYW1ldGVycy5yZW5kZXJlciwgX3RoaXMucGFyYW1ldGVycy5jYW1lcmEpXG5cdH0pXG5cblx0Ly8gaGFuZGxlIHJlc2l6ZVxuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24oKXtcblx0XHRhclNvdXJjZS5vblJlc2l6ZShhckNvbnRleHQsIF90aGlzLnBhcmFtZXRlcnMucmVuZGVyZXIsIF90aGlzLnBhcmFtZXRlcnMuY2FtZXJhKVxuXHR9KVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvL1x0XHRpbml0IGFyQ29udGV4dFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHQvLyBjcmVhdGUgYXRUb29sa2l0Q29udGV4dFxuXHR2YXIgYXJDb250ZXh0ID0gX3RoaXMuYXJDb250ZXh0ID0gbmV3IENvbnRleHQocGFyYW1ldGVycy5jb250ZXh0UGFyYW1ldGVycylcblxuXHQvLyBpbml0aWFsaXplIGl0XG5cdF90aGlzLmFyQ29udGV4dC5pbml0KClcblxuXHRhckNvbnRleHQuYWRkRXZlbnRMaXN0ZW5lcignaW5pdGlhbGl6ZWQnLCBmdW5jdGlvbihldmVudCl7XG5cdFx0YXJTb3VyY2Uub25SZXNpemUoYXJDb250ZXh0LCBfdGhpcy5wYXJhbWV0ZXJzLnJlbmRlcmVyLCBfdGhpcy5wYXJhbWV0ZXJzLmNhbWVyYSlcblx0fSlcblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly9cdFx0dXBkYXRlIGZ1bmN0aW9uXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLyB1cGRhdGUgYXJ0b29sa2l0IG9uIGV2ZXJ5IGZyYW1lXG5cdHRoaXMudXBkYXRlID0gZnVuY3Rpb24oKXtcblx0XHRpZiggYXJTb3VyY2UucmVhZHkgPT09IGZhbHNlIClcdHJldHVyblxuXG5cdFx0YXJDb250ZXh0LnVwZGF0ZSggYXJTb3VyY2UuZG9tRWxlbWVudCApXG5cdH1cbn1cblxuU2Vzc2lvbi5wcm90b3R5cGUub25SZXNpemUgPSBmdW5jdGlvbiAoKSB7XG5cdHRoaXMuYXJTb3VyY2Uub25SZXNpemUodGhpcy5hckNvbnRleHQsIHRoaXMucGFyYW1ldGVycy5yZW5kZXJlciwgdGhpcy5wYXJhbWV0ZXJzLmNhbWVyYSlcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNlc3Npb247IiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuXG5jb25zdCBVdGlscyA9IHt9O1xuXG4vKipcbiAqIENyZWF0ZSBhIGRlZmF1bHQgcmVuZGVyaW5nIGNhbWVyYSBmb3IgdGhpcyB0cmFja2luZ0JhY2tlbmQuIFRoZXkgbWF5IGJlIG1vZGlmaWVkIGxhdGVyLiB0byBmaXQgcGh5c2ljYWwgY2FtZXJhIHBhcmFtZXRlcnNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHJhY2tpbmdCYWNrZW5kIC0gdGhlIHRyYWNraW5nIHRvIHVzZXJcbiAqIEByZXR1cm4ge1RIUkVFLkNhbWVyYX0gdGhlIGNyZWF0ZWQgY2FtZXJhXG4gKi9cblV0aWxzLmNyZWF0ZURlZmF1bHRDYW1lcmEgPSBmdW5jdGlvbiAodHJhY2tpbmdNZXRob2QpIHtcbiAgICB2YXIgdHJhY2tpbmdCYWNrZW5kID0gdGhpcy5wYXJzZVRyYWNraW5nTWV0aG9kKHRyYWNraW5nTWV0aG9kKS50cmFja2luZ0JhY2tlbmRcbiAgICAvLyBDcmVhdGUgYSBjYW1lcmFcbiAgICBpZiAodHJhY2tpbmdCYWNrZW5kID09PSAnYXJ0b29sa2l0Jykge1xuICAgICAgICB2YXIgY2FtZXJhID0gbmV3IFRIUkVFLkNhbWVyYSgpO1xuICAgIH0gZWxzZSBjb25zb2xlLmFzc2VydChmYWxzZSwgJ3Vua25vd24gdHJhY2tpbmdCYWNrZW5kOiAnICsgdHJhY2tpbmdCYWNrZW5kKVxuXG4gICAgcmV0dXJuIGNhbWVyYVxufVxuXG4vKipcbiAqIHBhcnNlIHRyYWNraW5nIG1ldGhvZFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0cmFja2luZ01ldGhvZCAtIHRoZSB0cmFja2luZyBtZXRob2QgdG8gcGFyc2VcbiAqIEByZXR1cm4ge09iamVjdH0gLSB2YXJpb3VzIGZpZWxkIG9mIHRoZSB0cmFja2luZyBtZXRob2RcbiAqL1xuVXRpbHMucGFyc2VUcmFja2luZ01ldGhvZCA9IGZ1bmN0aW9uICh0cmFja2luZ01ldGhvZCkge1xuXG4gICAgaWYgKHRyYWNraW5nTWV0aG9kID09PSAnYmVzdCcpIHtcbiAgICAgICAgdHJhY2tpbmdNZXRob2QgPSAnYXJlYS1hcnRvb2xraXQnO1xuICAgIH1cblxuICAgIGlmICh0cmFja2luZ01ldGhvZC5zdGFydHNXaXRoKCdhcmVhLScpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0cmFja2luZ0JhY2tlbmQ6IHRyYWNraW5nTWV0aG9kLnJlcGxhY2UoJ2FyZWEtJywgJycpLFxuICAgICAgICAgICAgbWFya2Vyc0FyZWFFbmFibGVkOiB0cnVlLFxuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRyYWNraW5nQmFja2VuZDogdHJhY2tpbmdNZXRob2QsXG4gICAgICAgICAgICBtYXJrZXJzQXJlYUVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBVdGlscztcbiIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCBBck1hcmtlckNvbnRyb2xzIGZyb20gJ3RocmVleEFybWFya2VyY29udHJvbHMnOyAvLyBBbGlhcyBmb3IgZHluYW1pYyBpbXBvcnRpbmdcbmltcG9ydCBqc2FydG9vbGtpdCBmcm9tICdqc2FydG9vbGtpdCc7IC8vIFRPRE8gY29tbWVudCBleHBsYW5hdGlvblxuY29uc3QgeyBBUlRvb2xraXQsIEFSQ29udHJvbGxlciB9ID0ganNhcnRvb2xraXQ7XG5jb25zdCBhcnRvb2xraXQgPSBuZXcgQVJUb29sa2l0KCk7XG5cbmNvbnN0IENvbnRleHQgPSBmdW5jdGlvbiAocGFyYW1ldGVycykge1xuICAgIHZhciBfdGhpcyA9IHRoaXNcblxuICAgIF90aGlzLl91cGRhdGVkQXQgPSBudWxsXG5cbiAgICAvLyBoYW5kbGUgZGVmYXVsdCBwYXJhbWV0ZXJzXG4gICAgdGhpcy5wYXJhbWV0ZXJzID0ge1xuICAgICAgICAvLyBBUiBiYWNrZW5kIC0gWydhcnRvb2xraXQnXVxuICAgICAgICB0cmFja2luZ0JhY2tlbmQ6ICdhcnRvb2xraXQnLFxuICAgICAgICAvLyBkZWJ1ZyAtIHRydWUgaWYgb25lIHNob3VsZCBkaXNwbGF5IGFydG9vbGtpdCBkZWJ1ZyBjYW52YXMsIGZhbHNlIG90aGVyd2lzZVxuICAgICAgICBkZWJ1ZzogZmFsc2UsXG4gICAgICAgIC8vIHRoZSBtb2RlIG9mIGRldGVjdGlvbiAtIFsnY29sb3InLCAnY29sb3JfYW5kX21hdHJpeCcsICdtb25vJywgJ21vbm9fYW5kX21hdHJpeCddXG4gICAgICAgIGRldGVjdGlvbk1vZGU6ICdtb25vJyxcbiAgICAgICAgLy8gdHlwZSBvZiBtYXRyaXggY29kZSAtIHZhbGlkIGlpZiBkZXRlY3Rpb25Nb2RlIGVuZCB3aXRoICdtYXRyaXgnIC0gWzN4MywgM3gzX0hBTU1JTkc2MywgM3gzX1BBUklUWTY1LCA0eDQsIDR4NF9CQ0hfMTNfOV8zLCA0eDRfQkNIXzEzXzVfNV1cbiAgICAgICAgbWF0cml4Q29kZVR5cGU6ICczeDMnLFxuXG4gICAgICAgIC8vIHVybCBvZiB0aGUgY2FtZXJhIHBhcmFtZXRlcnNcbiAgICAgICAgY2FtZXJhUGFyYW1ldGVyc1VybDogQ29udGV4dC5iYXNlVVJMICsgJy4uL2RhdGEvZGF0YS9jYW1lcmFfcGFyYS5kYXQnLFxuXG4gICAgICAgIC8vIHR1bmUgdGhlIG1heGltdW0gcmF0ZSBvZiBwb3NlIGRldGVjdGlvbiBpbiB0aGUgc291cmNlIGltYWdlXG4gICAgICAgIG1heERldGVjdGlvblJhdGU6IDYwLFxuICAgICAgICAvLyByZXNvbHV0aW9uIG9mIGF0IHdoaWNoIHdlIGRldGVjdCBwb3NlIGluIHRoZSBzb3VyY2UgaW1hZ2VcbiAgICAgICAgY2FudmFzV2lkdGg6IDY0MCxcbiAgICAgICAgY2FudmFzSGVpZ2h0OiA0ODAsXG5cbiAgICAgICAgLy8gdGhlIHBhdHRlcm5SYXRpbyBpbnNpZGUgdGhlIGFydG9vbGtpdCBtYXJrZXIgLSBhcnRvb2xraXQgb25seVxuICAgICAgICBwYXR0ZXJuUmF0aW86IDAuNSxcblxuICAgICAgICAvLyBlbmFibGUgaW1hZ2Ugc21vb3RoaW5nIG9yIG5vdCBmb3IgY2FudmFzIGNvcHkgLSBkZWZhdWx0IHRvIHRydWVcbiAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC9pbWFnZVNtb290aGluZ0VuYWJsZWRcbiAgICAgICAgaW1hZ2VTbW9vdGhpbmdFbmFibGVkOiBmYWxzZSxcbiAgICB9XG4gICAgLy8gcGFyYW1ldGVycyBzYW5pdHkgY2hlY2tcbiAgICBjb25zb2xlLmFzc2VydChbJ2FydG9vbGtpdCddLmluZGV4T2YodGhpcy5wYXJhbWV0ZXJzLnRyYWNraW5nQmFja2VuZCkgIT09IC0xLCAnaW52YWxpZCBwYXJhbWV0ZXIgdHJhY2tpbmdCYWNrZW5kJywgdGhpcy5wYXJhbWV0ZXJzLnRyYWNraW5nQmFja2VuZClcbiAgICBjb25zb2xlLmFzc2VydChbJ2NvbG9yJywgJ2NvbG9yX2FuZF9tYXRyaXgnLCAnbW9ubycsICdtb25vX2FuZF9tYXRyaXgnXS5pbmRleE9mKHRoaXMucGFyYW1ldGVycy5kZXRlY3Rpb25Nb2RlKSAhPT0gLTEsICdpbnZhbGlkIHBhcmFtZXRlciBkZXRlY3Rpb25Nb2RlJywgdGhpcy5wYXJhbWV0ZXJzLmRldGVjdGlvbk1vZGUpXG5cbiAgICB0aGlzLmFyQ29udHJvbGxlciA9IG51bGw7XG5cbiAgICBfdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlXG5cblxuICAgIHRoaXMuX2FyTWFya2Vyc0NvbnRyb2xzID0gW11cblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vXHRcdHNldFBhcmFtZXRlcnNcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICBzZXRQYXJhbWV0ZXJzKHBhcmFtZXRlcnMpXG4gICAgZnVuY3Rpb24gc2V0UGFyYW1ldGVycyhwYXJhbWV0ZXJzKSB7XG4gICAgICAgIGlmIChwYXJhbWV0ZXJzID09PSB1bmRlZmluZWQpIHJldHVyblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcGFyYW1ldGVycykge1xuICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gcGFyYW1ldGVyc1trZXldXG5cbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQ29udGV4dDogJ1wiICsga2V5ICsgXCInIHBhcmFtZXRlciBpcyB1bmRlZmluZWQuXCIpXG4gICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9IF90aGlzLnBhcmFtZXRlcnNba2V5XVxuXG4gICAgICAgICAgICBpZiAoY3VycmVudFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJDb250ZXh0OiAnXCIgKyBrZXkgKyBcIicgaXMgbm90IGEgcHJvcGVydHkgb2YgdGhpcyBtYXRlcmlhbC5cIilcbiAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfdGhpcy5wYXJhbWV0ZXJzW2tleV0gPSBuZXdWYWx1ZVxuICAgICAgICB9XG4gICAgfVxufVxuXG5Db250ZXh0LnByb3RvdHlwZS5kaXNwYXRjaEV2ZW50ID0gVEhSRUUuRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZS5kaXNwYXRjaEV2ZW50O1xuQ29udGV4dC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IFRIUkVFLkV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcjtcbkNvbnRleHQucHJvdG90eXBlLmhhc0V2ZW50TGlzdGVuZXIgPSBUSFJFRS5FdmVudERpc3BhdGNoZXIucHJvdG90eXBlLmhhc0V2ZW50TGlzdGVuZXI7XG5Db250ZXh0LnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gVEhSRUUuRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyO1xuXG4vLyBkZWZhdWx0IHRvIGdpdGh1YiBwYWdlXG5Db250ZXh0LmJhc2VVUkwgPSAnaHR0cHM6Ly9hci1qcy1vcmcuZ2l0aHViLmlvL0FSLmpzL3RocmVlLmpzLydcbkNvbnRleHQuUkVWSVNJT04gPSAnMy4zLjMtZXM2LWJldGEtMDEnXG4vKipcbiAqIENyZWF0ZSBhIGRlZmF1bHQgY2FtZXJhIGZvciB0aGlzIHRyYWNraW5nQmFja2VuZFxuICogQHBhcmFtIHtzdHJpbmd9IHRyYWNraW5nQmFja2VuZCAtIHRoZSB0cmFja2luZyB0byB1c2VyXG4gKiBAcmV0dXJuIHtUSFJFRS5DYW1lcmF9IHRoZSBjcmVhdGVkIGNhbWVyYVxuICovXG5Db250ZXh0LmNyZWF0ZURlZmF1bHRDYW1lcmEgPSBmdW5jdGlvbiAodHJhY2tpbmdCYWNrZW5kKSB7XG4gICAgY29uc29sZS5hc3NlcnQoZmFsc2UsICd1c2UgQVJqcy5VdGlscy5jcmVhdGVEZWZhdWx0Q2FtZXJhIGluc3RlYWQnKVxuICAgIC8vIENyZWF0ZSBhIGNhbWVyYVxuICAgIGlmICh0cmFja2luZ0JhY2tlbmQgPT09ICdhcnRvb2xraXQnKSB7XG4gICAgICAgIHZhciBjYW1lcmEgPSBuZXcgVEhSRUUuQ2FtZXJhKCk7XG4gICAgfSBlbHNlIGNvbnNvbGUuYXNzZXJ0KGZhbHNlKTtcbiAgICByZXR1cm4gY2FtZXJhXG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vL1x0XHRpbml0IGZ1bmN0aW9uc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5Db250ZXh0LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKG9uQ29tcGxldGVkKSB7XG4gICAgdmFyIF90aGlzID0gdGhpc1xuICAgIGlmICh0aGlzLnBhcmFtZXRlcnMudHJhY2tpbmdCYWNrZW5kID09PSAnYXJ0b29sa2l0Jykge1xuICAgICAgICB0aGlzLl9pbml0QXJ0b29sa2l0KGRvbmUpO1xuICAgIH0gZWxzZSBjb25zb2xlLmFzc2VydChmYWxzZSk7XG4gICAgcmV0dXJuXG5cbiAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgICAvLyBkaXNwYXRjaCBldmVudFxuICAgICAgICBfdGhpcy5kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgIHR5cGU6ICdpbml0aWFsaXplZCdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgX3RoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlXG5cbiAgICAgICAgb25Db21wbGV0ZWQgJiYgb25Db21wbGV0ZWQoKVxuICAgIH1cblxufVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vICAgICAgICAgIHVwZGF0ZSBmdW5jdGlvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbkNvbnRleHQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChzcmNFbGVtZW50KSB7XG5cbiAgICAvLyBiZSBzdXJlIGFyQ29udHJvbGxlciBpcyBmdWxseSBpbml0aWFsaXplZFxuICAgIGlmICh0aGlzLnBhcmFtZXRlcnMudHJhY2tpbmdCYWNrZW5kID09PSAnYXJ0b29sa2l0JyAmJiB0aGlzLmFyQ29udHJvbGxlciA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gaG9ub3IgdGhpcy5wYXJhbWV0ZXJzLm1heERldGVjdGlvblJhdGVcbiAgICB2YXIgcHJlc2VudCA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgaWYgKHRoaXMuX3VwZGF0ZWRBdCAhPT0gbnVsbCAmJiBwcmVzZW50IC0gdGhpcy5fdXBkYXRlZEF0IDwgMTAwMCAvIHRoaXMucGFyYW1ldGVycy5tYXhEZXRlY3Rpb25SYXRlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICB0aGlzLl91cGRhdGVkQXQgPSBwcmVzZW50XG5cbiAgICB2YXIgcHJldlZpc2libGVNYXJrZXJzID0gW11cblxuICAgIC8vIG1hcmsgYWxsIG1hcmtlcnMgdG8gaW52aXNpYmxlIGJlZm9yZSBwcm9jZXNzaW5nIHRoaXMgZnJhbWVcbiAgICB0aGlzLl9hck1hcmtlcnNDb250cm9scy5mb3JFYWNoKGZ1bmN0aW9uIChtYXJrZXJDb250cm9scykge1xuICAgICAgICBpZiAobWFya2VyQ29udHJvbHMub2JqZWN0M2QudmlzaWJsZSkge1xuICAgICAgICAgICAgcHJldlZpc2libGVNYXJrZXJzLnB1c2gobWFya2VyQ29udHJvbHMpXG4gICAgICAgIH1cbiAgICAgICAgbWFya2VyQ29udHJvbHMub2JqZWN0M2QudmlzaWJsZSA9IGZhbHNlXG4gICAgfSlcblxuICAgIC8vIHByb2Nlc3MgdGhpcyBmcmFtZVxuICAgIGlmICh0aGlzLnBhcmFtZXRlcnMudHJhY2tpbmdCYWNrZW5kID09PSAnYXJ0b29sa2l0Jykge1xuICAgICAgICB0aGlzLl91cGRhdGVBcnRvb2xraXQoc3JjRWxlbWVudCk7XG4gICAgfSAgZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KGZhbHNlKTtcbiAgICB9XG5cbiAgICAvLyBkaXNwYXRjaCBldmVudFxuICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgIHR5cGU6ICdzb3VyY2VQcm9jZXNzZWQnXG4gICAgfSk7XG5cbiAgICAvLyBBZnRlciBmcmFtZSBpcyBwcm9jZXNzZWQsIGNoZWNrIHZpc2liaWxpdHkgb2YgZWFjaCBtYXJrZXIgdG8gZGV0ZXJtaW5lIGlmIGl0IHdhcyBmb3VuZCBvciBsb3N0XG4gICAgdGhpcy5fYXJNYXJrZXJzQ29udHJvbHMuZm9yRWFjaChmdW5jdGlvbiAobWFya2VyQ29udHJvbHMpIHtcbiAgICAgICAgdmFyIHdhc1Zpc2libGUgPSBwcmV2VmlzaWJsZU1hcmtlcnMuaW5jbHVkZXMobWFya2VyQ29udHJvbHMpO1xuICAgICAgICB2YXIgaXNWaXNpYmxlID0gbWFya2VyQ29udHJvbHMub2JqZWN0M2QudmlzaWJsZTtcbiAgICBcbiAgICAgICAgaWYgKGlzVmlzaWJsZSA9PT0gdHJ1ZSAmJiB3YXNWaXNpYmxlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdtYXJrZXJGb3VuZCcsIHtcbiAgICAgICAgICAgICAgICBkZXRhaWw6IG1hcmtlckNvbnRyb2xzLFxuICAgICAgICAgICAgfSkpXG4gICAgICAgIH0gZWxzZSBpZiAoaXNWaXNpYmxlID09PSBmYWxzZSAmJiB3YXNWaXNpYmxlID09PSB0cnVlKSB7XG4gICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ21hcmtlckxvc3QnLCB7XG4gICAgICAgICAgICAgICAgZGV0YWlsOiBtYXJrZXJDb250cm9scyxcbiAgICAgICAgICAgIH0pKVxuICAgICAgICB9XG4gICAgfSlcblxuXG4gICAgLy8gcmV0dXJuIHRydWUgYXMgd2UgcHJvY2Vzc2VkIHRoZSBmcmFtZVxuICAgIHJldHVybiB0cnVlO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gICAgICAgICAgQWRkL1JlbW92ZSBtYXJrZXJDb250cm9sc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbkNvbnRleHQucHJvdG90eXBlLmFkZE1hcmtlciA9IGZ1bmN0aW9uIChhck1hcmtlckNvbnRyb2xzKSB7XG4gICAgY29uc29sZS5hc3NlcnQoYXJNYXJrZXJDb250cm9scyBpbnN0YW5jZW9mIEFyTWFya2VyQ29udHJvbHMpXG4gICAgdGhpcy5fYXJNYXJrZXJzQ29udHJvbHMucHVzaChhck1hcmtlckNvbnRyb2xzKVxufVxuXG5Db250ZXh0LnByb3RvdHlwZS5yZW1vdmVNYXJrZXIgPSBmdW5jdGlvbiAoYXJNYXJrZXJDb250cm9scykge1xuICAgIGNvbnNvbGUuYXNzZXJ0KGFyTWFya2VyQ29udHJvbHMgaW5zdGFuY2VvZiBBck1hcmtlckNvbnRyb2xzKVxuICAgIHZhciBpbmRleCA9IHRoaXMuX2FyTWFya2Vyc0NvbnRyb2xzLmluZGV4T2YoYXJNYXJrZXJDb250cm9scyk7XG4gICAgaWYoIGluZGV4IDwgMCApIHtcbiAgICBcdHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fYXJNYXJrZXJzQ29udHJvbHMuc3BsaWNlKGluZGV4LCAxKVxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vXHRcdGFydG9vbGtpdCBzcGVjaWZpY1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5Db250ZXh0LnByb3RvdHlwZS5faW5pdEFydG9vbGtpdCA9IGZ1bmN0aW9uIChvbkNvbXBsZXRlZCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXNcblxuICAgIC8vIHNldCB0aGlzLl9hcnRvb2xraXRQcm9qZWN0aW9uQXhpc1RyYW5zZm9ybU1hdHJpeCB0byBjaGFuZ2UgYXJ0b29sa2l0IHByb2plY3Rpb24gbWF0cml4IGF4aXMgdG8gbWF0Y2ggdXN1YWwgd2ViZ2wgb25lXG4gICAgdGhpcy5fYXJ0b29sa2l0UHJvamVjdGlvbkF4aXNUcmFuc2Zvcm1NYXRyaXggPSBuZXcgVEhSRUUuTWF0cml4NCgpXG4gICAgdGhpcy5fYXJ0b29sa2l0UHJvamVjdGlvbkF4aXNUcmFuc2Zvcm1NYXRyaXgubXVsdGlwbHkobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25ZKE1hdGguUEkpKVxuICAgIHRoaXMuX2FydG9vbGtpdFByb2plY3Rpb25BeGlzVHJhbnNmb3JtTWF0cml4Lm11bHRpcGx5KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVJvdGF0aW9uWihNYXRoLlBJKSlcblxuICAgIC8vIGluaXQgQVJUb29sa2l0XG4gICAgYXJ0b29sa2l0LmluaXQoKS50aGVuKF8gPT4ge1xuICAgICAgICAvLyBpbml0IGNvbnRyb2xsZXJcbiAgICAgICAgQVJDb250cm9sbGVyLmluaXRXaXRoRGltZW5zaW9ucyhfdGhpcy5wYXJhbWV0ZXJzLmNhbnZhc1dpZHRoLCBfdGhpcy5wYXJhbWV0ZXJzLmNhbnZhc0hlaWdodCwgX3RoaXMucGFyYW1ldGVycy5jYW1lcmFQYXJhbWV0ZXJzVXJsKS50aGVuKChhckNvbnRyb2xsZXIpID0+IHtcbiAgICAgICAgICAgIF90aGlzLmFyQ29udHJvbGxlciA9IGFyQ29udHJvbGxlclxuXG4gICAgICAgICAgICAvLyBob25vciB0aGlzLnBhcmFtZXRlcnMuaW1hZ2VTbW9vdGhpbmdFbmFibGVkXG4gICAgICAgICAgICBhckNvbnRyb2xsZXIuY3R4Lm1vekltYWdlU21vb3RoaW5nRW5hYmxlZCA9IF90aGlzLnBhcmFtZXRlcnMuaW1hZ2VTbW9vdGhpbmdFbmFibGVkO1xuICAgICAgICAgICAgYXJDb250cm9sbGVyLmN0eC53ZWJraXRJbWFnZVNtb290aGluZ0VuYWJsZWQgPSBfdGhpcy5wYXJhbWV0ZXJzLmltYWdlU21vb3RoaW5nRW5hYmxlZDtcbiAgICAgICAgICAgIGFyQ29udHJvbGxlci5jdHgubXNJbWFnZVNtb290aGluZ0VuYWJsZWQgPSBfdGhpcy5wYXJhbWV0ZXJzLmltYWdlU21vb3RoaW5nRW5hYmxlZDtcbiAgICAgICAgICAgIGFyQ29udHJvbGxlci5jdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gX3RoaXMucGFyYW1ldGVycy5pbWFnZVNtb290aGluZ0VuYWJsZWQ7XG5cbiAgICAgICAgICAgIC8vIGhvbm9yIHRoaXMucGFyYW1ldGVycy5kZWJ1Z1xuICAgICAgICAgICAgaWYgKF90aGlzLnBhcmFtZXRlcnMuZGVidWcgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBhckNvbnRyb2xsZXIuZGVidWdTZXR1cCgpO1xuICAgICAgICAgICAgICAgIGFyQ29udHJvbGxlci5jYW52YXMuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnXG4gICAgICAgICAgICAgICAgYXJDb250cm9sbGVyLmNhbnZhcy5zdHlsZS50b3AgPSAnMHB4J1xuICAgICAgICAgICAgICAgIGFyQ29udHJvbGxlci5jYW52YXMuc3R5bGUub3BhY2l0eSA9ICcwLjYnXG4gICAgICAgICAgICAgICAgYXJDb250cm9sbGVyLmNhbnZhcy5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ25vbmUnXG4gICAgICAgICAgICAgICAgYXJDb250cm9sbGVyLmNhbnZhcy5zdHlsZS56SW5kZXggPSAnLTEnXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHNldFBhdHRlcm5EZXRlY3Rpb25Nb2RlXG4gICAgICAgICAgICB2YXIgZGV0ZWN0aW9uTW9kZXMgPSB7XG4gICAgICAgICAgICAgICAgJ2NvbG9yJzogYXJ0b29sa2l0LkFSX1RFTVBMQVRFX01BVENISU5HX0NPTE9SLFxuICAgICAgICAgICAgICAgICdjb2xvcl9hbmRfbWF0cml4JzogYXJ0b29sa2l0LkFSX1RFTVBMQVRFX01BVENISU5HX0NPTE9SX0FORF9NQVRSSVgsXG4gICAgICAgICAgICAgICAgJ21vbm8nOiBhcnRvb2xraXQuQVJfVEVNUExBVEVfTUFUQ0hJTkdfTU9OTyxcbiAgICAgICAgICAgICAgICAnbW9ub19hbmRfbWF0cml4JzogYXJ0b29sa2l0LkFSX1RFTVBMQVRFX01BVENISU5HX01PTk9fQU5EX01BVFJJWCxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBkZXRlY3Rpb25Nb2RlID0gZGV0ZWN0aW9uTW9kZXNbX3RoaXMucGFyYW1ldGVycy5kZXRlY3Rpb25Nb2RlXVxuICAgICAgICAgICAgY29uc29sZS5hc3NlcnQoZGV0ZWN0aW9uTW9kZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgYXJDb250cm9sbGVyLnNldFBhdHRlcm5EZXRlY3Rpb25Nb2RlKGRldGVjdGlvbk1vZGUpO1xuXG4gICAgICAgICAgICAvLyBzZXRNYXRyaXhDb2RlVHlwZVxuICAgICAgICAgICAgdmFyIG1hdHJpeENvZGVUeXBlcyA9IHtcbiAgICAgICAgICAgICAgICAnM3gzJzogYXJ0b29sa2l0LkFSX01BVFJJWF9DT0RFXzN4MyxcbiAgICAgICAgICAgICAgICAnM3gzX0hBTU1JTkc2Myc6IGFydG9vbGtpdC5BUl9NQVRSSVhfQ09ERV8zeDNfSEFNTUlORzYzLFxuICAgICAgICAgICAgICAgICczeDNfUEFSSVRZNjUnOiBhcnRvb2xraXQuQVJfTUFUUklYX0NPREVfM3gzX1BBUklUWTY1LFxuICAgICAgICAgICAgICAgICc0eDQnOiBhcnRvb2xraXQuQVJfTUFUUklYX0NPREVfNHg0LFxuICAgICAgICAgICAgICAgICc0eDRfQkNIXzEzXzlfMyc6IGFydG9vbGtpdC5BUl9NQVRSSVhfQ09ERV80eDRfQkNIXzEzXzlfMyxcbiAgICAgICAgICAgICAgICAnNHg0X0JDSF8xM181XzUnOiBhcnRvb2xraXQuQVJfTUFUUklYX0NPREVfNHg0X0JDSF8xM181XzUsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbWF0cml4Q29kZVR5cGUgPSBtYXRyaXhDb2RlVHlwZXNbX3RoaXMucGFyYW1ldGVycy5tYXRyaXhDb2RlVHlwZV1cbiAgICAgICAgICAgIGNvbnNvbGUuYXNzZXJ0KG1hdHJpeENvZGVUeXBlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBhckNvbnRyb2xsZXIuc2V0TWF0cml4Q29kZVR5cGUobWF0cml4Q29kZVR5cGUpO1xuXG4gICAgICAgICAgICAvLyBzZXQgdGhlIHBhdHRlcm5SYXRpbyBmb3IgYXJ0b29sa2l0XG4gICAgICAgICAgICBhckNvbnRyb2xsZXIuc2V0UGF0dFJhdGlvKF90aGlzLnBhcmFtZXRlcnMucGF0dGVyblJhdGlvKTtcblxuICAgICAgICAgICAgLy8gc2V0IHRocmVzaG9sZGluZyBpbiBhcnRvb2xraXRcbiAgICAgICAgICAgIC8vIHRoaXMgc2VlbXMgdG8gYmUgdGhlIGRlZmF1bHRcbiAgICAgICAgICAgIC8vIGFyQ29udHJvbGxlci5zZXRUaHJlc2hvbGRNb2RlKGFydG9vbGtpdC5BUl9MQUJFTElOR19USFJFU0hfTU9ERV9NQU5VQUwpXG4gICAgICAgICAgICAvLyBhZGF0YXRpdmUgY29uc3VtZSBhIExPVCBvZiBjcHUuLi5cbiAgICAgICAgICAgIC8vIGFyQ29udHJvbGxlci5zZXRUaHJlc2hvbGRNb2RlKGFydG9vbGtpdC5BUl9MQUJFTElOR19USFJFU0hfTU9ERV9BVVRPX0FEQVBUSVZFKVxuICAgICAgICAgICAgLy8gYXJDb250cm9sbGVyLnNldFRocmVzaG9sZE1vZGUoYXJ0b29sa2l0LkFSX0xBQkVMSU5HX1RIUkVTSF9NT0RFX0FVVE9fT1RTVSlcblxuICAgICAgICAgICAgLy8gbm90aWZ5XG4gICAgICAgICAgICBvbkNvbXBsZXRlZCgpXG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzXG59XG5cbi8qKlxuICogcmV0dXJuIHRoZSBwcm9qZWN0aW9uIG1hdHJpeFxuICovXG5Db250ZXh0LnByb3RvdHlwZS5nZXRQcm9qZWN0aW9uTWF0cml4ID0gZnVuY3Rpb24gKHNyY0VsZW1lbnQpIHtcblxuXG4gICAgLy8gRklYTUUgcmVuYW1lIHRoaXMgZnVuY3Rpb24gdG8gc2F5IGl0IGlzIGFydG9vbGtpdCBzcGVjaWZpYyAtIGdldEFydG9vbGtpdFByb2plY3RNYXRyaXhcbiAgICAvLyBrZWVwIGEgYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIGEgY29uc29sZS53YXJuXG5cbiAgICBjb25zb2xlLmFzc2VydCh0aGlzLnBhcmFtZXRlcnMudHJhY2tpbmdCYWNrZW5kID09PSAnYXJ0b29sa2l0JylcbiAgICBjb25zb2xlLmFzc2VydCh0aGlzLmFyQ29udHJvbGxlciwgJ2FyQ29udHJvbGxlciBNVVNUIGJlIGluaXRpYWxpemVkIHRvIGNhbGwgdGhpcyBmdW5jdGlvbicpXG4gICAgLy8gZ2V0IHByb2plY3Rpb25NYXRyaXhBcnIgZnJvbSBhcnRvb2xraXRcbiAgICB2YXIgcHJvamVjdGlvbk1hdHJpeEFyciA9IHRoaXMuYXJDb250cm9sbGVyLmdldENhbWVyYU1hdHJpeCgpO1xuICAgIHZhciBwcm9qZWN0aW9uTWF0cml4ID0gbmV3IFRIUkVFLk1hdHJpeDQoKS5mcm9tQXJyYXkocHJvamVjdGlvbk1hdHJpeEFycilcblxuICAgIC8vIHJldHVybiB0aGUgcmVzdWx0XG4gICAgcmV0dXJuIHByb2plY3Rpb25NYXRyaXhcbn1cblxuQ29udGV4dC5wcm90b3R5cGUuX3VwZGF0ZUFydG9vbGtpdCA9IGZ1bmN0aW9uIChzcmNFbGVtZW50KSB7XG4gICAgdGhpcy5hckNvbnRyb2xsZXIucHJvY2VzcyhzcmNFbGVtZW50KVxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vXHRcdGRpc3Bvc2UgZnVuY3Rpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuQ29udGV4dC5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0dGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuXG5cdC8vIG1hcmtlcnNcblx0dGhpcy5fYXJNYXJrZXJzQ29udHJvbHMuZm9yRWFjaChmdW5jdGlvbiAobWFya2VyQ29udHJvbHMpIHtcblx0XHRjb25zb2xlLmFzc2VydChtYXJrZXJDb250cm9scyBpbnN0YW5jZW9mIEFyTWFya2VyQ29udHJvbHMpO1xuXHRcdG1hcmtlckNvbnRyb2xzLmRpc3Bvc2UoKTtcblx0fSApO1xuXHR0aGlzLl9hck1hcmtlcnNDb250cm9scyA9IFtdO1xuXG5cdC8vIGNhbWVyYVBhcmFtXG5cdGlmICh0aGlzLmFyQ29udHJvbGxlciAmJiB0aGlzLmFyQ29udHJvbGxlci5jYW1lcmFQYXJhbSAmJiB0aGlzLmFyQ29udHJvbGxlci5jYW1lcmFQYXJhbS5kaXNwb3NlKSB7XG5cdFx0dGhpcy5hckNvbnRyb2xsZXIuY2FtZXJhUGFyYW0uZGlzcG9zZSgpO1xuXHR9XG5cblx0XG5cdC8vIEFSQ29udHJvbGxlclxuXHRpZiggdGhpcy5hckNvbnRyb2xsZXIgJiYgdGhpcy5hckNvbnRyb2xsZXIuZGlzcG9zZSApIHtcblx0XHR0aGlzLmFyQ29udHJvbGxlci5kaXNwb3NlKCk7XG5cdH1cblx0dGhpcy5hckNvbnRyb2xsZXIgPSBudWxsO1xuXG4gICAgLy8gY2xhc3MgcHJvcGVydGllc1xuICAgIHRoaXMuX2FydG9vbGtpdFByb2plY3Rpb25BeGlzVHJhbnNmb3JtTWF0cml4ID0gbnVsbDtcblxuXHQvLyBhcnRvb2xraXRcblx0Ly8gTk9URTogc2luY2UgdGhlIGluc3RhbmNlIG9mIEFSVG9vbGtpdCBpcyBjcmVhdGVkIGdsb2JhbGx5IFxuXHQvLyB3ZSBzaG91bGQgcHJvYmFibHkgZG8gbm90IGNhbGwgLnRlYXJkb3duKCkgLi4uID9cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udGV4dDsiLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgQXJCYXNlQ29udHJvbHMgZnJvbSAnLi90aHJlZXgtYXJiYXNlY29udHJvbHMnO1xuaW1wb3J0IGpzYXJ0b29sa2l0IGZyb20gJ2pzYXJ0b29sa2l0JzsgLy8gVE9ETyBjb21tZW50IGV4cGxhbmF0aW9uXG5jb25zdCB7IEFSVG9vbGtpdCB9ID0ganNhcnRvb2xraXQ7XG5cbmNvbnN0IE1hcmtlckNvbnRyb2xzID0gZnVuY3Rpb24oY29udGV4dCwgb2JqZWN0M2QsIHBhcmFtZXRlcnMpe1xuXHR2YXIgX3RoaXMgPSB0aGlzXG5cblx0QXJCYXNlQ29udHJvbHMuY2FsbCh0aGlzLCBvYmplY3QzZClcblxuXHR0aGlzLmNvbnRleHQgPSBjb250ZXh0XG5cdC8vIGhhbmRsZSBkZWZhdWx0IHBhcmFtZXRlcnNcblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdC8vIHNpemUgb2YgdGhlIG1hcmtlciBpbiBtZXRlclxuXHRcdHNpemUgOiAxLFxuXHRcdC8vIHR5cGUgb2YgbWFya2VyIC0gWydwYXR0ZXJuJywgJ2JhcmNvZGUnLCAndW5rbm93bicgXVxuXHRcdHR5cGUgOiAndW5rbm93bicsXG5cdFx0Ly8gdXJsIG9mIHRoZSBwYXR0ZXJuIC0gSUlGIHR5cGU9J3BhdHRlcm4nXG5cdFx0cGF0dGVyblVybCA6IG51bGwsXG5cdFx0Ly8gdmFsdWUgb2YgdGhlIGJhcmNvZGUgLSBJSUYgdHlwZT0nYmFyY29kZSdcblx0XHRiYXJjb2RlVmFsdWUgOiBudWxsLFxuXHRcdC8vIGNoYW5nZSBtYXRyaXggbW9kZSAtIFttb2RlbFZpZXdNYXRyaXgsIGNhbWVyYVRyYW5zZm9ybU1hdHJpeF1cblx0XHRjaGFuZ2VNYXRyaXhNb2RlIDogJ21vZGVsVmlld01hdHJpeCcsXG5cdFx0Ly8gbWluaW1hbCBjb25maWRlbmNlIGluIHRoZSBtYXJrZSByZWNvZ25pdGlvbiAtIGJldHdlZW4gWzAsIDFdIC0gZGVmYXVsdCB0byAxXG5cdFx0bWluQ29uZmlkZW5jZTogMC42LFxuXHRcdC8vIHR1cm4gb24vb2ZmIGNhbWVyYSBzbW9vdGhpbmdcblx0XHRzbW9vdGg6IGZhbHNlLFxuXHRcdC8vIG51bWJlciBvZiBtYXRyaWNlcyB0byBzbW9vdGggdHJhY2tpbmcgb3ZlciwgbW9yZSA9IHNtb290aGVyIGJ1dCBzbG93ZXIgZm9sbG93XG5cdFx0c21vb3RoQ291bnQ6IDUsXG5cdFx0Ly8gZGlzdGFuY2UgdG9sZXJhbmNlIGZvciBzbW9vdGhpbmcsIGlmIHNtb290aFRocmVzaG9sZCAjIG9mIG1hdHJpY2VzIGFyZSB1bmRlciB0b2xlcmFuY2UsIHRyYWNraW5nIHdpbGwgc3RheSBzdGlsbFxuXHRcdHNtb290aFRvbGVyYW5jZTogMC4wMSxcblx0XHQvLyB0aHJlc2hvbGQgZm9yIHNtb290aGluZywgd2lsbCBrZWVwIHN0aWxsIHVubGVzcyBlbm91Z2ggbWF0cmljZXMgYXJlIG92ZXIgdG9sZXJhbmNlXG5cdFx0c21vb3RoVGhyZXNob2xkOiAyLFxuXHR9XG5cblx0Ly8gc2FuaXR5IGNoZWNrXG5cdHZhciBwb3NzaWJsZVZhbHVlcyA9IFsncGF0dGVybicsICdiYXJjb2RlJywgJ3Vua25vd24nXVxuXHRjb25zb2xlLmFzc2VydChwb3NzaWJsZVZhbHVlcy5pbmRleE9mKHRoaXMucGFyYW1ldGVycy50eXBlKSAhPT0gLTEsICdpbGxlZ2FsIHZhbHVlJywgdGhpcy5wYXJhbWV0ZXJzLnR5cGUpXG5cdHZhciBwb3NzaWJsZVZhbHVlcyA9IFsnbW9kZWxWaWV3TWF0cml4JywgJ2NhbWVyYVRyYW5zZm9ybU1hdHJpeCcgXVxuXHRjb25zb2xlLmFzc2VydChwb3NzaWJsZVZhbHVlcy5pbmRleE9mKHRoaXMucGFyYW1ldGVycy5jaGFuZ2VNYXRyaXhNb2RlKSAhPT0gLTEsICdpbGxlZ2FsIHZhbHVlJywgdGhpcy5wYXJhbWV0ZXJzLmNoYW5nZU1hdHJpeE1vZGUpXG5cblxuICAgICAgICAvLyBjcmVhdGUgdGhlIG1hcmtlciBSb290XG5cdHRoaXMub2JqZWN0M2QgPSBvYmplY3QzZFxuXHR0aGlzLm9iamVjdDNkLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblx0dGhpcy5vYmplY3QzZC52aXNpYmxlID0gZmFsc2VcblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly9cdFx0c2V0UGFyYW1ldGVyc1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0c2V0UGFyYW1ldGVycyhwYXJhbWV0ZXJzKVxuXHRmdW5jdGlvbiBzZXRQYXJhbWV0ZXJzKHBhcmFtZXRlcnMpe1xuXHRcdGlmKCBwYXJhbWV0ZXJzID09PSB1bmRlZmluZWQgKVx0cmV0dXJuXG5cdFx0Zm9yKCB2YXIga2V5IGluIHBhcmFtZXRlcnMgKXtcblx0XHRcdHZhciBuZXdWYWx1ZSA9IHBhcmFtZXRlcnNbIGtleSBdXG5cblx0XHRcdGlmKCBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkICl7XG5cdFx0XHRcdGNvbnNvbGUud2FybiggXCJBck1hcmtlckNvbnRyb2xzOiAnXCIgKyBrZXkgKyBcIicgcGFyYW1ldGVyIGlzIHVuZGVmaW5lZC5cIiApXG5cdFx0XHRcdGNvbnRpbnVlXG5cdFx0XHR9XG5cblx0XHRcdHZhciBjdXJyZW50VmFsdWUgPSBfdGhpcy5wYXJhbWV0ZXJzWyBrZXkgXVxuXG5cdFx0XHRpZiggY3VycmVudFZhbHVlID09PSB1bmRlZmluZWQgKXtcblx0XHRcdFx0Y29uc29sZS53YXJuKCBcIkFyTWFya2VyQ29udHJvbHM6ICdcIiArIGtleSArIFwiJyBpcyBub3QgYSBwcm9wZXJ0eSBvZiB0aGlzIG1hdGVyaWFsLlwiIClcblx0XHRcdFx0Y29udGludWVcblx0XHRcdH1cblxuXHRcdFx0X3RoaXMucGFyYW1ldGVyc1sga2V5IF0gPSBuZXdWYWx1ZVxuXHRcdH1cblx0fVxuXG5cdGlmICh0aGlzLnBhcmFtZXRlcnMuc21vb3RoKSB7XG5cdFx0dGhpcy5zbW9vdGhNYXRyaWNlcyA9IFtdOyAvLyBsYXN0IERFQk9VTkNFX0NPVU5UIG1vZGVsVmlld01hdHJpeFxuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vXHRcdENvZGUgU2VwYXJhdG9yXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLyBhZGQgdGhpcyBtYXJrZXIgdG8gYXJ0b29sa2l0c3lzdGVtXG5cdC8vIFRPRE8gcmVuYW1lIHRoYXQgLmFkZE1hcmtlckNvbnRyb2xzXG5cdGNvbnRleHQuYWRkTWFya2VyKHRoaXMpXG5cblx0aWYoIF90aGlzLmNvbnRleHQucGFyYW1ldGVycy50cmFja2luZ0JhY2tlbmQgPT09ICdhcnRvb2xraXQnICl7XG5cdFx0dGhpcy5faW5pdEFydG9vbGtpdCgpXG5cdH1lbHNlIGNvbnNvbGUuYXNzZXJ0KGZhbHNlKVxufVxuXG5NYXJrZXJDb250cm9scy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBBckJhc2VDb250cm9scy5wcm90b3R5cGUgKTtcbk1hcmtlckNvbnRyb2xzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1hcmtlckNvbnRyb2xzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy9cdFx0ZGlzcG9zZSBpbnN0YW5jZVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5NYXJrZXJDb250cm9scy5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uKCl7XG5cdGlmKCB0aGlzLmNvbnRleHQgJiYgdGhpcy5jb250ZXh0LmFyQ29udHJvbGxlciApIHtcblx0XHR0aGlzLmNvbnRleHQuYXJDb250cm9sbGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2dldE1hcmtlcicsIHRoaXMub25HZXRNYXJrZXIpO1xuXHR9XG5cblx0dGhpcy5jb250ZXh0LnJlbW92ZU1hcmtlcih0aGlzKTtcblx0XG5cdHRoaXMub2JqZWN0M2QgPSBudWxsO1xuXHR0aGlzLnNtb290aE1hdHJpY2VzID0gW107XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy9cdFx0dXBkYXRlIGNvbnRyb2xzIHdpdGggbmV3IG1vZGVsVmlld01hdHJpeFxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogV2hlbiB5b3UgYWN0dWFsbHkgZ290IGEgbmV3IG1vZGVsVmlld01hdHJpeCwgeW91IG5lZWQgdG8gcGVyZm9tIGEgd2hvbGUgYnVuY2hcbiAqIG9mIHRoaW5ncy4gaXQgaXMgZG9uZSBoZXJlLlxuICovXG5NYXJrZXJDb250cm9scy5wcm90b3R5cGUudXBkYXRlV2l0aE1vZGVsVmlld01hdHJpeCA9IGZ1bmN0aW9uKG1vZGVsVmlld01hdHJpeCl7XG5cdHZhciBtYXJrZXJPYmplY3QzRCA9IHRoaXMub2JqZWN0M2Q7XG5cblx0Ly8gbWFyayBvYmplY3QgYXMgdmlzaWJsZVxuXHRtYXJrZXJPYmplY3QzRC52aXNpYmxlID0gdHJ1ZVxuXG5cdGlmKCB0aGlzLmNvbnRleHQucGFyYW1ldGVycy50cmFja2luZ0JhY2tlbmQgPT09ICdhcnRvb2xraXQnICl7XG5cdFx0Ly8gYXBwbHkgY29udGV4dC5fYXhpc1RyYW5zZm9ybU1hdHJpeCAtIGNoYW5nZSBhcnRvb2xraXQgYXhpcyB0byBtYXRjaCB1c3VhbCB3ZWJnbCBvbmVcblx0XHR2YXIgdG1wTWF0cml4ID0gbmV3IFRIUkVFLk1hdHJpeDQoKS5jb3B5KHRoaXMuY29udGV4dC5fYXJ0b29sa2l0UHJvamVjdGlvbkF4aXNUcmFuc2Zvcm1NYXRyaXgpXG5cdFx0dG1wTWF0cml4Lm11bHRpcGx5KG1vZGVsVmlld01hdHJpeClcblxuXHRcdG1vZGVsVmlld01hdHJpeC5jb3B5KHRtcE1hdHJpeClcblx0fWVsc2UgY29uc29sZS5hc3NlcnQoZmFsc2UpXG5cblx0Ly8gY2hhbmdlIGF4aXMgb3JpZW50YXRpb24gb24gbWFya2VyIC0gYXJ0b29sa2l0IHNheSBaIGlzIG5vcm1hbCB0byB0aGUgbWFya2VyIC0gYXIuanMgc2F5IFkgaXMgbm9ybWFsIHRvIHRoZSBtYXJrZXJcblx0dmFyIG1hcmtlckF4aXNUcmFuc2Zvcm1NYXRyaXggPSBuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VSb3RhdGlvblgoTWF0aC5QSS8yKVxuXHRtb2RlbFZpZXdNYXRyaXgubXVsdGlwbHkobWFya2VyQXhpc1RyYW5zZm9ybU1hdHJpeClcblxuXHR2YXIgcmVuZGVyUmVxZCA9IGZhbHNlO1xuXG5cdC8vIGNoYW5nZSBtYXJrZXJPYmplY3QzRC5tYXRyaXggYmFzZWQgb24gcGFyYW1ldGVycy5jaGFuZ2VNYXRyaXhNb2RlXG5cdGlmKCB0aGlzLnBhcmFtZXRlcnMuY2hhbmdlTWF0cml4TW9kZSA9PT0gJ21vZGVsVmlld01hdHJpeCcgKXtcblx0XHRpZiAodGhpcy5wYXJhbWV0ZXJzLnNtb290aCkge1xuXHRcdFx0dmFyIHN1bSxcblx0XHRcdFx0XHRpLCBqLFxuXHRcdFx0XHRcdGF2ZXJhZ2VzLCAvLyBhdmVyYWdlIHZhbHVlcyBmb3IgbWF0cml4IG92ZXIgbGFzdCBzbW9vdGhDb3VudFxuXHRcdFx0XHRcdGV4Y2VlZHNBdmVyYWdlVG9sZXJhbmNlID0gMDtcblxuXHRcdFx0dGhpcy5zbW9vdGhNYXRyaWNlcy5wdXNoKG1vZGVsVmlld01hdHJpeC5lbGVtZW50cy5zbGljZSgpKTsgLy8gYWRkIGxhdGVzdFxuXG5cdFx0XHRpZiAodGhpcy5zbW9vdGhNYXRyaWNlcy5sZW5ndGggPCAodGhpcy5wYXJhbWV0ZXJzLnNtb290aENvdW50ICsgMSkpIHtcblx0XHRcdFx0bWFya2VyT2JqZWN0M0QubWF0cml4LmNvcHkobW9kZWxWaWV3TWF0cml4KTsgLy8gbm90IGVub3VnaCBmb3IgYXZlcmFnZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5zbW9vdGhNYXRyaWNlcy5zaGlmdCgpOyAvLyByZW1vdmUgb2xkZXN0IGVudHJ5XG5cdFx0XHRcdGF2ZXJhZ2VzID0gW107XG5cblx0XHRcdFx0Zm9yIChpIGluIG1vZGVsVmlld01hdHJpeC5lbGVtZW50cykgeyAvLyBsb29wIG92ZXIgZW50cmllcyBpbiBtYXRyaXhcblx0XHRcdFx0XHRzdW0gPSAwO1xuXHRcdFx0XHRcdGZvciAoaiBpbiB0aGlzLnNtb290aE1hdHJpY2VzKSB7IC8vIGNhbGN1bGF0ZSBhdmVyYWdlIGZvciB0aGlzIGVudHJ5XG5cdFx0XHRcdFx0XHRzdW0gKz0gdGhpcy5zbW9vdGhNYXRyaWNlc1tqXVtpXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YXZlcmFnZXNbaV0gPSBzdW0gLyB0aGlzLnBhcmFtZXRlcnMuc21vb3RoQ291bnQ7XG5cdFx0XHRcdFx0Ly8gY2hlY2sgaG93IG1hbnkgZWxlbWVudHMgdmFyeSBmcm9tIHRoZSBhdmVyYWdlIGJ5IGF0IGxlYXN0IEFWRVJBR0VfTUFUUklYX1RPTEVSQU5DRVxuXHRcdFx0XHRcdGlmIChNYXRoLmFicyhhdmVyYWdlc1tpXSAtIG1vZGVsVmlld01hdHJpeC5lbGVtZW50c1tpXSkgPj0gdGhpcy5wYXJhbWV0ZXJzLnNtb290aFRvbGVyYW5jZSkge1xuXHRcdFx0XHRcdFx0ZXhjZWVkc0F2ZXJhZ2VUb2xlcmFuY2UrKztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBtb3ZpbmcgKGkuZS4gYXQgbGVhc3QgQVZFUkFHRV9NQVRSSVhfVEhSRVNIT0xEIGVudHJpZXMgYXJlIG92ZXIgQVZFUkFHRV9NQVRSSVhfVE9MRVJBTkNFKVxuXHRcdFx0XHRpZiAoZXhjZWVkc0F2ZXJhZ2VUb2xlcmFuY2UgPj0gdGhpcy5wYXJhbWV0ZXJzLnNtb290aFRocmVzaG9sZCkge1xuXHRcdFx0XHRcdC8vIHRoZW4gdXBkYXRlIG1hdHJpeCB2YWx1ZXMgdG8gYXZlcmFnZSwgb3RoZXJ3aXNlLCBkb24ndCByZW5kZXIgdG8gbWluaW1pemUgaml0dGVyXG5cdFx0XHRcdFx0Zm9yIChpIGluIG1vZGVsVmlld01hdHJpeC5lbGVtZW50cykge1xuXHRcdFx0XHRcdFx0bW9kZWxWaWV3TWF0cml4LmVsZW1lbnRzW2ldID0gYXZlcmFnZXNbaV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1hcmtlck9iamVjdDNELm1hdHJpeC5jb3B5KG1vZGVsVmlld01hdHJpeCk7XG5cdFx0XHRcdFx0cmVuZGVyUmVxZCA9IHRydWU7IC8vIHJlbmRlciByZXF1aXJlZCBpbiBhbmltYXRpb24gbG9vcFxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hcmtlck9iamVjdDNELm1hdHJpeC5jb3B5KG1vZGVsVmlld01hdHJpeClcblx0XHR9XG5cdH1lbHNlIGlmKCB0aGlzLnBhcmFtZXRlcnMuY2hhbmdlTWF0cml4TW9kZSA9PT0gJ2NhbWVyYVRyYW5zZm9ybU1hdHJpeCcgKXtcblx0XHRtYXJrZXJPYmplY3QzRC5tYXRyaXguY29weShtb2RlbFZpZXdNYXRyaXgpLmludmVydCgpXG5cdH1lbHNlIHtcblx0XHRjb25zb2xlLmFzc2VydChmYWxzZSlcblx0fVxuXG5cdC8vIGRlY29tcG9zZSAtIHRoZSBtYXRyaXggaW50byAucG9zaXRpb24sIC5xdWF0ZXJuaW9uLCAuc2NhbGVcblx0bWFya2VyT2JqZWN0M0QubWF0cml4LmRlY29tcG9zZShtYXJrZXJPYmplY3QzRC5wb3NpdGlvbiwgbWFya2VyT2JqZWN0M0QucXVhdGVybmlvbiwgbWFya2VyT2JqZWN0M0Quc2NhbGUpXG5cblx0Ly8gZGlzcGF0Y2hFdmVudFxuXHR0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ21hcmtlckZvdW5kJyB9ICk7XG5cblx0cmV0dXJuIHJlbmRlclJlcWQ7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy9cdFx0dXRpbGl0eSBmdW5jdGlvbnNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIHByb3ZpZGUgYSBuYW1lIGZvciBhIG1hcmtlclxuICogLSBzaWxseSBoZXVyaXN0aWMgZm9yIG5vd1xuICogLSBzaG91bGQgYmUgaW1wcm92ZWRcbiAqL1xuTWFya2VyQ29udHJvbHMucHJvdG90eXBlLm5hbWUgPSBmdW5jdGlvbigpe1xuXHR2YXIgbmFtZSA9ICcnXG5cdG5hbWUgKz0gdGhpcy5wYXJhbWV0ZXJzLnR5cGU7XG5cdGlmKCB0aGlzLnBhcmFtZXRlcnMudHlwZSA9PT0gJ3BhdHRlcm4nICl7XG5cdFx0dmFyIHVybCA9IHRoaXMucGFyYW1ldGVycy5wYXR0ZXJuVXJsXG5cdFx0dmFyIGJhc2VuYW1lID0gdXJsLnJlcGxhY2UoL14uKlxcLy9nLCAnJylcblx0XHRuYW1lICs9ICcgLSAnICsgYmFzZW5hbWVcblx0fWVsc2UgaWYoIHRoaXMucGFyYW1ldGVycy50eXBlID09PSAnYmFyY29kZScgKXtcblx0XHRuYW1lICs9ICcgLSAnICsgdGhpcy5wYXJhbWV0ZXJzLmJhcmNvZGVWYWx1ZVxuXHR9ZWxzZXtcblx0XHRjb25zb2xlLmFzc2VydChmYWxzZSwgJ25vIC5uYW1lKCkgaW1wbGVtZW50ZWQgZm9yIHRoaXMgbWFya2VyIGNvbnRyb2xzJylcblx0fVxuXHRyZXR1cm4gbmFtZVxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vXHRcdGluaXQgZm9yIEFydG9vbGtpdFxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5NYXJrZXJDb250cm9scy5wcm90b3R5cGUuX2luaXRBcnRvb2xraXQgPSBmdW5jdGlvbigpe1xuXHR2YXIgX3RoaXMgPSB0aGlzXG5cblx0dmFyIGFydG9vbGtpdE1hcmtlcklkID0gbnVsbFxuXG5cdHZhciBkZWxheWVkSW5pdFRpbWVySWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpe1xuXHRcdC8vIGNoZWNrIGlmIGFyQ29udHJvbGxlciBpcyBpbml0XG5cdFx0dmFyIGFyQ29udHJvbGxlciA9IF90aGlzLmNvbnRleHQuYXJDb250cm9sbGVyXG5cdFx0aWYoIGFyQ29udHJvbGxlciA9PT0gbnVsbCApXHRyZXR1cm5cblx0XHQvLyBzdG9wIGxvb3BpbmcgaWYgaXQgaXMgaW5pdFxuXHRcdGNsZWFySW50ZXJ2YWwoZGVsYXllZEluaXRUaW1lcklkKVxuXHRcdGRlbGF5ZWRJbml0VGltZXJJZCA9IG51bGxcblx0XHQvLyBsYXVuY2ggdGhlIF9wb3N0SW5pdEFydG9vbGtpdFxuXHRcdHBvc3RJbml0KClcblx0fSwgMTAwMC81MClcblxuXHRyZXR1cm5cblxuXHRmdW5jdGlvbiBwb3N0SW5pdCgpe1xuXHRcdC8vIGNoZWNrIGlmIGFyQ29udHJvbGxlciBpcyBpbml0XG5cdFx0dmFyIGFyQ29udHJvbGxlciA9IF90aGlzLmNvbnRleHQuYXJDb250cm9sbGVyXG5cdFx0Y29uc29sZS5hc3NlcnQoYXJDb250cm9sbGVyICE9PSBudWxsIClcblxuXHRcdC8vIHN0YXJ0IHRyYWNraW5nIHRoaXMgcGF0dGVyblxuXHRcdGlmKCBfdGhpcy5wYXJhbWV0ZXJzLnR5cGUgPT09ICdwYXR0ZXJuJyApe1xuXHQgICAgICAgICAgICAgICAgYXJDb250cm9sbGVyLmxvYWRNYXJrZXIoX3RoaXMucGFyYW1ldGVycy5wYXR0ZXJuVXJsKS50aGVuKGZ1bmN0aW9uKG1hcmtlcklkKSB7XG5cdFx0XHRcdGFydG9vbGtpdE1hcmtlcklkID0gbWFya2VySWRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYXJDb250cm9sbGVyLnRyYWNrUGF0dGVybk1hcmtlcklkKGFydG9vbGtpdE1hcmtlcklkLCBfdGhpcy5wYXJhbWV0ZXJzLnNpemUpO1xuXHQgICAgICAgICAgICAgICAgfSk7XG5cdFx0fWVsc2UgaWYoIF90aGlzLnBhcmFtZXRlcnMudHlwZSA9PT0gJ2JhcmNvZGUnICl7XG5cdFx0XHRhcnRvb2xraXRNYXJrZXJJZCA9IF90aGlzLnBhcmFtZXRlcnMuYmFyY29kZVZhbHVlXG5cdFx0XHRhckNvbnRyb2xsZXIudHJhY2tCYXJjb2RlTWFya2VySWQoYXJ0b29sa2l0TWFya2VySWQsIF90aGlzLnBhcmFtZXRlcnMuc2l6ZSk7XG5cdFx0fWVsc2UgaWYoIF90aGlzLnBhcmFtZXRlcnMudHlwZSA9PT0gJ3Vua25vd24nICl7XG5cdFx0XHRhcnRvb2xraXRNYXJrZXJJZCA9IG51bGxcblx0XHR9ZWxzZXtcblx0XHRcdGNvbnNvbGUubG9nKGZhbHNlLCAnaW52YWxpZCBtYXJrZXIgdHlwZScsIF90aGlzLnBhcmFtZXRlcnMudHlwZSlcblx0XHR9XG5cblx0XHQvLyBsaXN0ZW4gdG8gdGhlIGV2ZW50XG5cdFx0YXJDb250cm9sbGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2dldE1hcmtlcicsIG9uR2V0TWFya2VyKVxuXG5cdH1cblxuXHRmdW5jdGlvbiBvbk1hcmtlckZvdW5kKGV2ZW50KXtcblx0XHQvLyBob25vciBoaXMucGFyYW1ldGVycy5taW5Db25maWRlbmNlXG5cdFx0aWYoIGV2ZW50LmRhdGEudHlwZSA9PT0gQVJUb29sa2l0LlBBVFRFUk5fTUFSS0VSICYmIGV2ZW50LmRhdGEubWFya2VyLmNmUGF0dCA8IF90aGlzLnBhcmFtZXRlcnMubWluQ29uZmlkZW5jZSApXHRyZXR1cm5cblx0XHRpZiggZXZlbnQuZGF0YS50eXBlID09PSBBUlRvb2xraXQuQkFSQ09ERV9NQVJLRVIgJiYgZXZlbnQuZGF0YS5tYXJrZXIuY2ZNYXRyaXggPCBfdGhpcy5wYXJhbWV0ZXJzLm1pbkNvbmZpZGVuY2UgKVx0cmV0dXJuXG5cblx0XHR2YXIgbW9kZWxWaWV3TWF0cml4ID0gbmV3IFRIUkVFLk1hdHJpeDQoKS5mcm9tQXJyYXkoZXZlbnQuZGF0YS5tYXRyaXgpXG5cdFx0X3RoaXMudXBkYXRlV2l0aE1vZGVsVmlld01hdHJpeChtb2RlbFZpZXdNYXRyaXgpXG5cdH1cblxuXHRmdW5jdGlvbiBvbkdldE1hcmtlcihldmVudCl7XG5cdFx0aWYoIGV2ZW50LmRhdGEudHlwZSA9PT0gQVJUb29sa2l0LlBBVFRFUk5fTUFSS0VSICYmIF90aGlzLnBhcmFtZXRlcnMudHlwZSA9PT0gJ3BhdHRlcm4nICl7XG5cdFx0XHRpZiggYXJ0b29sa2l0TWFya2VySWQgPT09IG51bGwgKVx0cmV0dXJuXG5cdFx0XHRpZiggZXZlbnQuZGF0YS5tYXJrZXIuaWRQYXR0ID09PSBhcnRvb2xraXRNYXJrZXJJZCApIG9uTWFya2VyRm91bmQoZXZlbnQpXG5cdFx0fWVsc2UgaWYoIGV2ZW50LmRhdGEudHlwZSA9PT0gQVJUb29sa2l0LkJBUkNPREVfTUFSS0VSICYmIF90aGlzLnBhcmFtZXRlcnMudHlwZSA9PT0gJ2JhcmNvZGUnICl7XG5cdFx0XHQvLyBjb25zb2xlLmxvZygnQkFSQ09ERV9NQVJLRVIgaWRNYXRyaXgnLCBldmVudC5kYXRhLm1hcmtlci5pZE1hdHJpeCwgYXJ0b29sa2l0TWFya2VySWQgKVxuXHRcdFx0aWYoIGFydG9vbGtpdE1hcmtlcklkID09PSBudWxsIClcdHJldHVyblxuXHRcdFx0aWYoIGV2ZW50LmRhdGEubWFya2VyLmlkTWF0cml4ID09PSBhcnRvb2xraXRNYXJrZXJJZCApICBvbk1hcmtlckZvdW5kKGV2ZW50KVxuXHRcdH1lbHNlIGlmKCBldmVudC5kYXRhLnR5cGUgPT09IEFSVG9vbGtpdC5VTktOT1dOX01BUktFUiAmJiBfdGhpcy5wYXJhbWV0ZXJzLnR5cGUgPT09ICd1bmtub3duJyl7XG5cdFx0XHRvbk1hcmtlckZvdW5kKGV2ZW50KVxuXHRcdH1cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IE1hcmtlckNvbnRyb2xzO1xuIiwiaW1wb3J0IFV0aWxzIGZyb20gJy4uL25ldy1hcGkvYXJqcy11dGlscyc7XG5pbXBvcnQgQXJUb29sa2l0Q29udGV4dCBmcm9tICcuL2FyanMtY29udGV4dCc7IC8vIFRPRE8gY29udGV4dCBidWlsZC1kZXBlbmRlbnRcblxuLyoqXG4gKiBBclRvb2xraXRQcm9maWxlIGhlbHBzIHlvdSBidWlsZCBwYXJhbWV0ZXJzIGZvciBhcnRvb2xraXRcbiAqIC0gaXQgaXMgZnVsbHkgaW5kZXBlbmRlbnQgb2YgdGhlIHJlc3Qgb2YgdGhlIGNvZGVcbiAqIC0gYWxsIHRoZSBvdGhlciBjbGFzc2VzIGFyZSBzdGlsbCBleHBlY3Rpbmcgbm9ybWFsIHBhcmFtZXRlcnNcbiAqIC0geW91IGNhbiB1c2UgdGhpcyBjbGFzcyB0byB1bmRlcnN0YW5kIGhvdyB0byB0dW5lIHlvdXIgc3BlY2lmaWMgdXNlY2FzZVxuICogLSBpdCBpcyBtYWRlIHRvIGhlbHAgcGVvcGxlIHRvIGJ1aWxkIHBhcmFtZXRlcnMgd2l0aG91dCB1bmRlcnN0YW5kaW5nIGFsbCB0aGUgdW5kZXJseWluZyBkZXRhaWxzLlxuICovXG5jb25zdCBQcm9maWxlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucmVzZXQoKVxuXG4gICAgdGhpcy5wZXJmb3JtYW5jZSgnZGVmYXVsdCcpXG59XG5cblByb2ZpbGUucHJvdG90eXBlLl9ndWVzc1BlcmZvcm1hbmNlTGFiZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGlzTW9iaWxlID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQW5kcm9pZC9pKVxuICAgICAgICB8fCBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC93ZWJPUy9pKVxuICAgICAgICB8fCBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9pUGhvbmUvaSlcbiAgICAgICAgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvaVBhZC9pKVxuICAgICAgICB8fCBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9pUG9kL2kpXG4gICAgICAgIHx8IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0JsYWNrQmVycnkvaSlcbiAgICAgICAgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvV2luZG93cyBQaG9uZS9pKVxuICAgICAgICA/IHRydWUgOiBmYWxzZVxuICAgIGlmIChpc01vYmlsZSA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gJ3Bob25lLW5vcm1hbCdcbiAgICB9XG4gICAgcmV0dXJuICdkZXNrdG9wLW5vcm1hbCdcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vL1x0XHRDb2RlIFNlcGFyYXRvclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogcmVzZXQgYWxsIHBhcmFtZXRlcnNcbiAqL1xuUHJvZmlsZS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5zb3VyY2VQYXJhbWV0ZXJzID0ge1xuICAgICAgICAvLyB0byByZWFkIGZyb20gdGhlIHdlYmNhbVxuICAgICAgICBzb3VyY2VUeXBlOiAnd2ViY2FtJyxcbiAgICB9XG5cbiAgICB0aGlzLmNvbnRleHRQYXJhbWV0ZXJzID0ge1xuICAgICAgICBjYW1lcmFQYXJhbWV0ZXJzVXJsOiBBclRvb2xraXRDb250ZXh0LmJhc2VVUkwgKyAnLi4vZGF0YS9kYXRhL2NhbWVyYV9wYXJhLmRhdCcsIC8vIFRPRE8gZGVwZW5kZW50IG9mIGJ1aWxkP1xuICAgICAgICBkZXRlY3Rpb25Nb2RlOiAnbW9ubycsXG4gICAgfVxuICAgIHRoaXMuZGVmYXVsdE1hcmtlclBhcmFtZXRlcnMgPSB7XG4gICAgICAgIHR5cGU6ICdwYXR0ZXJuJyxcbiAgICAgICAgcGF0dGVyblVybDogQXJUb29sa2l0Q29udGV4dC5iYXNlVVJMICsgJy4uL2RhdGEvZGF0YS9wYXR0Lmhpcm8nLCAvLyBUT0RPIGRlcGVuZGVudCBvZiBidWlsZD9cbiAgICAgICAgY2hhbmdlTWF0cml4TW9kZTogJ21vZGVsVmlld01hdHJpeCcsXG4gICAgfVxuICAgIHJldHVybiB0aGlzXG59O1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vXHRcdFBlcmZvcm1hbmNlXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG5cblByb2ZpbGUucHJvdG90eXBlLnBlcmZvcm1hbmNlID0gZnVuY3Rpb24gKGxhYmVsKSB7XG5cbiAgICBpZiAobGFiZWwgPT09ICdkZWZhdWx0Jykge1xuICAgICAgICBsYWJlbCA9IHRoaXMuX2d1ZXNzUGVyZm9ybWFuY2VMYWJlbCgpXG4gICAgfVxuXG4gICAgaWYgKGxhYmVsID09PSAnZGVza3RvcC1mYXN0Jykge1xuICAgICAgICB0aGlzLmNvbnRleHRQYXJhbWV0ZXJzLmNhbnZhc1dpZHRoID0gNjQwICogM1xuICAgICAgICB0aGlzLmNvbnRleHRQYXJhbWV0ZXJzLmNhbnZhc0hlaWdodCA9IDQ4MCAqIDNcblxuICAgICAgICB0aGlzLmNvbnRleHRQYXJhbWV0ZXJzLm1heERldGVjdGlvblJhdGUgPSAzMFxuICAgIH0gZWxzZSBpZiAobGFiZWwgPT09ICdkZXNrdG9wLW5vcm1hbCcpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0UGFyYW1ldGVycy5jYW52YXNXaWR0aCA9IDY0MFxuICAgICAgICB0aGlzLmNvbnRleHRQYXJhbWV0ZXJzLmNhbnZhc0hlaWdodCA9IDQ4MFxuXG4gICAgICAgIHRoaXMuY29udGV4dFBhcmFtZXRlcnMubWF4RGV0ZWN0aW9uUmF0ZSA9IDYwXG4gICAgfSBlbHNlIGlmIChsYWJlbCA9PT0gJ3Bob25lLW5vcm1hbCcpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0UGFyYW1ldGVycy5jYW52YXNXaWR0aCA9IDgwICogNFxuICAgICAgICB0aGlzLmNvbnRleHRQYXJhbWV0ZXJzLmNhbnZhc0hlaWdodCA9IDYwICogNFxuXG4gICAgICAgIHRoaXMuY29udGV4dFBhcmFtZXRlcnMubWF4RGV0ZWN0aW9uUmF0ZSA9IDMwXG4gICAgfSBlbHNlIGlmIChsYWJlbCA9PT0gJ3Bob25lLXNsb3cnKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFBhcmFtZXRlcnMuY2FudmFzV2lkdGggPSA4MCAqIDNcbiAgICAgICAgdGhpcy5jb250ZXh0UGFyYW1ldGVycy5jYW52YXNIZWlnaHQgPSA2MCAqIDNcblxuICAgICAgICB0aGlzLmNvbnRleHRQYXJhbWV0ZXJzLm1heERldGVjdGlvblJhdGUgPSAzMFxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KGZhbHNlLCAndW5rbm9ud24gbGFiZWwgJyArIGxhYmVsKVxuICAgIH1cbiAgICByZXR1cm4gdGhpc1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vXHRcdE1hcmtlclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblxuUHJvZmlsZS5wcm90b3R5cGUuZGVmYXVsdE1hcmtlciA9IGZ1bmN0aW9uICh0cmFja2luZ0JhY2tlbmQpIHtcbiAgICB0cmFja2luZ0JhY2tlbmQgPSB0cmFja2luZ0JhY2tlbmQgfHwgdGhpcy5jb250ZXh0UGFyYW1ldGVycy50cmFja2luZ0JhY2tlbmRcblxuICAgIGlmICh0cmFja2luZ0JhY2tlbmQgPT09ICdhcnRvb2xraXQnKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFBhcmFtZXRlcnMuZGV0ZWN0aW9uTW9kZSA9ICdtb25vJ1xuICAgICAgICB0aGlzLmRlZmF1bHRNYXJrZXJQYXJhbWV0ZXJzLnR5cGUgPSAncGF0dGVybidcbiAgICAgICAgdGhpcy5kZWZhdWx0TWFya2VyUGFyYW1ldGVycy5wYXR0ZXJuVXJsID0gQXJUb29sa2l0Q29udGV4dC5iYXNlVVJMICsgJy4uL2RhdGEvZGF0YS9wYXR0Lmhpcm8nIC8vIFRPRE8gZGVwZW5kZW50IG9mIGJ1aWxkP1xuICAgIH0gZWxzZSBjb25zb2xlLmFzc2VydChmYWxzZSlcblxuICAgIHJldHVybiB0aGlzXG59XG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vXHRcdFNvdXJjZVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5Qcm9maWxlLnByb3RvdHlwZS5zb3VyY2VXZWJjYW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5zb3VyY2VQYXJhbWV0ZXJzLnNvdXJjZVR5cGUgPSAnd2ViY2FtJ1xuICAgIGRlbGV0ZSB0aGlzLnNvdXJjZVBhcmFtZXRlcnMuc291cmNlVXJsXG4gICAgcmV0dXJuIHRoaXNcbn1cblxuUHJvZmlsZS5wcm90b3R5cGUuc291cmNlVmlkZW8gPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgdGhpcy5zb3VyY2VQYXJhbWV0ZXJzLnNvdXJjZVR5cGUgPSAndmlkZW8nXG4gICAgdGhpcy5zb3VyY2VQYXJhbWV0ZXJzLnNvdXJjZVVybCA9IHVybFxuICAgIHJldHVybiB0aGlzXG59XG5cblByb2ZpbGUucHJvdG90eXBlLnNvdXJjZUltYWdlID0gZnVuY3Rpb24gKHVybCkge1xuICAgIHRoaXMuc291cmNlUGFyYW1ldGVycy5zb3VyY2VUeXBlID0gJ2ltYWdlJ1xuICAgIHRoaXMuc291cmNlUGFyYW1ldGVycy5zb3VyY2VVcmwgPSB1cmxcbiAgICByZXR1cm4gdGhpc1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vXHRcdHRyYWNraW5nQmFja2VuZFxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5Qcm9maWxlLnByb3RvdHlwZS50cmFja2luZ0JhY2tlbmQgPSBmdW5jdGlvbiAodHJhY2tpbmdCYWNrZW5kKSB7XG4gICAgY29uc29sZS53YXJuKCdzdG9wIHByb2ZpbGUudHJhY2tpbmdCYWNrZW5kKCkgb2Jzb2xldGUgZnVuY3Rpb24uIHVzZSAudHJhY2tpbmdNZXRob2QgaW5zdGVhZCcpXG4gICAgdGhpcy5jb250ZXh0UGFyYW1ldGVycy50cmFja2luZ0JhY2tlbmQgPSB0cmFja2luZ0JhY2tlbmRcbiAgICByZXR1cm4gdGhpc1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vXHRcdHRyYWNraW5nQmFja2VuZFxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5Qcm9maWxlLnByb3RvdHlwZS5jaGFuZ2VNYXRyaXhNb2RlID0gZnVuY3Rpb24gKGNoYW5nZU1hdHJpeE1vZGUpIHtcbiAgICB0aGlzLmRlZmF1bHRNYXJrZXJQYXJhbWV0ZXJzLmNoYW5nZU1hdHJpeE1vZGUgPSBjaGFuZ2VNYXRyaXhNb2RlXG4gICAgcmV0dXJuIHRoaXNcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vL1x0XHR0cmFja2luZ0JhY2tlbmRcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuUHJvZmlsZS5wcm90b3R5cGUudHJhY2tpbmdNZXRob2QgPSBmdW5jdGlvbiAodHJhY2tpbmdNZXRob2QpIHtcbiAgICB2YXIgZGF0YSA9IFV0aWxzLnBhcnNlVHJhY2tpbmdNZXRob2QodHJhY2tpbmdNZXRob2QpXG4gICAgdGhpcy5kZWZhdWx0TWFya2VyUGFyYW1ldGVycy5tYXJrZXJzQXJlYUVuYWJsZWQgPSBkYXRhLm1hcmtlcnNBcmVhRW5hYmxlZFxuICAgIHRoaXMuY29udGV4dFBhcmFtZXRlcnMudHJhY2tpbmdCYWNrZW5kID0gZGF0YS50cmFja2luZ0JhY2tlbmRcbiAgICByZXR1cm4gdGhpc1xufVxuXG4vKipcbiAqIGNoZWNrIGlmIHRoZSBwcm9maWxlIGlzIHZhbGlkLiBUaHJvdyBhbiBleGNlcHRpb24gaXMgbm90IHZhbGlkXG4gKi9cblByb2ZpbGUucHJvdG90eXBlLmNoZWNrSWZWYWxpZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpc1xufVxuXG5leHBvcnQgZGVmYXVsdCBQcm9maWxlO1xuIiwiY29uc3QgU291cmNlID0gZnVuY3Rpb24gKHBhcmFtZXRlcnMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzXG5cbiAgICB0aGlzLnJlYWR5ID0gZmFsc2VcbiAgICB0aGlzLmRvbUVsZW1lbnQgPSBudWxsXG5cbiAgICAvLyBoYW5kbGUgZGVmYXVsdCBwYXJhbWV0ZXJzXG4gICAgdGhpcy5wYXJhbWV0ZXJzID0ge1xuICAgICAgICAvLyB0eXBlIG9mIHNvdXJjZSAtIFsnd2ViY2FtJywgJ2ltYWdlJywgJ3ZpZGVvJ11cbiAgICAgICAgc291cmNlVHlwZTogJ3dlYmNhbScsXG4gICAgICAgIC8vIHVybCBvZiB0aGUgc291cmNlIC0gdmFsaWQgaWYgc291cmNlVHlwZSA9IGltYWdlfHZpZGVvXG4gICAgICAgIHNvdXJjZVVybDogbnVsbCxcblxuICAgICAgICAvLyBEZXZpY2UgaWQgb2YgdGhlIGNhbWVyYSB0byB1c2UgKG9wdGlvbmFsKVxuICAgICAgICBkZXZpY2VJZDogbnVsbCxcblxuICAgICAgICAvLyByZXNvbHV0aW9uIG9mIGF0IHdoaWNoIHdlIGluaXRpYWxpemUgaW4gdGhlIHNvdXJjZSBpbWFnZVxuICAgICAgICBzb3VyY2VXaWR0aDogNjQwLFxuICAgICAgICBzb3VyY2VIZWlnaHQ6IDQ4MCxcbiAgICAgICAgLy8gcmVzb2x1dGlvbiBkaXNwbGF5ZWQgZm9yIHRoZSBzb3VyY2VcbiAgICAgICAgZGlzcGxheVdpZHRoOiA2NDAsXG4gICAgICAgIGRpc3BsYXlIZWlnaHQ6IDQ4MCxcbiAgICB9XG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy9cdFx0c2V0UGFyYW1ldGVyc1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIHNldFBhcmFtZXRlcnMocGFyYW1ldGVycylcbiAgICBmdW5jdGlvbiBzZXRQYXJhbWV0ZXJzKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgaWYgKHBhcmFtZXRlcnMgPT09IHVuZGVmaW5lZCkgcmV0dXJuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBwYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBwYXJhbWV0ZXJzW2tleV1cblxuICAgICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJBclRvb2xraXRTb3VyY2U6ICdcIiArIGtleSArIFwiJyBwYXJhbWV0ZXIgaXMgdW5kZWZpbmVkLlwiKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjdXJyZW50VmFsdWUgPSBfdGhpcy5wYXJhbWV0ZXJzW2tleV1cblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQXJUb29sa2l0U291cmNlOiAnXCIgKyBrZXkgKyBcIicgaXMgbm90IGEgcHJvcGVydHkgb2YgdGhpcyBtYXRlcmlhbC5cIilcbiAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfdGhpcy5wYXJhbWV0ZXJzW2tleV0gPSBuZXdWYWx1ZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5vbkluaXRpYWxDbGljayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiggdGhpcy5kb21FbGVtZW50ICYmIHRoaXMuZG9tRWxlbWVudC5wbGF5ICkge1xuICAgICAgICAgICAgdGhpcy5kb21FbGVtZW50LnBsYXkoKS50aGVuKCAoKSA9PiB7fSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy9cdFx0Q29kZSBTZXBhcmF0b3Jcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuU291cmNlLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKG9uUmVhZHksIG9uRXJyb3IpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzXG5cbiAgICBpZiAodGhpcy5wYXJhbWV0ZXJzLnNvdXJjZVR5cGUgPT09ICdpbWFnZScpIHtcbiAgICAgICAgdmFyIGRvbUVsZW1lbnQgPSB0aGlzLl9pbml0U291cmNlSW1hZ2Uob25Tb3VyY2VSZWFkeSwgb25FcnJvcilcbiAgICB9IGVsc2UgaWYgKHRoaXMucGFyYW1ldGVycy5zb3VyY2VUeXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgIHZhciBkb21FbGVtZW50ID0gdGhpcy5faW5pdFNvdXJjZVZpZGVvKG9uU291cmNlUmVhZHksIG9uRXJyb3IpXG4gICAgfSBlbHNlIGlmICh0aGlzLnBhcmFtZXRlcnMuc291cmNlVHlwZSA9PT0gJ3dlYmNhbScpIHtcbiAgICAgICAgLy8gdmFyIGRvbUVsZW1lbnQgPSB0aGlzLl9pbml0U291cmNlV2ViY2FtT2xkKG9uU291cmNlUmVhZHkpXG4gICAgICAgIHZhciBkb21FbGVtZW50ID0gdGhpcy5faW5pdFNvdXJjZVdlYmNhbShvblNvdXJjZVJlYWR5LCBvbkVycm9yKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KGZhbHNlKVxuICAgIH1cblxuICAgIC8vIGF0dGFjaFxuICAgIHRoaXMuZG9tRWxlbWVudCA9IGRvbUVsZW1lbnRcbiAgICB0aGlzLmRvbUVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnXG4gICAgdGhpcy5kb21FbGVtZW50LnN0eWxlLnRvcCA9ICcwcHgnXG4gICAgdGhpcy5kb21FbGVtZW50LnN0eWxlLmxlZnQgPSAnMHB4J1xuICAgIHRoaXMuZG9tRWxlbWVudC5zdHlsZS56SW5kZXggPSAnLTInXG4gICAgdGhpcy5kb21FbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLCAnYXJqcy12aWRlbycpO1xuXG4gICAgcmV0dXJuIHRoaXNcbiAgICBmdW5jdGlvbiBvblNvdXJjZVJlYWR5KCkge1xuICAgICAgICBpZiggIV90aGlzLmRvbUVsZW1lbnQgKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKF90aGlzLmRvbUVsZW1lbnQpO1xuICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2FyanMtdmlkZW8tbG9hZGVkJywge1xuICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYXJqcy12aWRlbycpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIF90aGlzLnJlYWR5ID0gdHJ1ZVxuXG4gICAgICAgIG9uUmVhZHkgJiYgb25SZWFkeSgpXG4gICAgfVxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gICAgICAgICAgaW5pdCBpbWFnZSBzb3VyY2Vcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblxuU291cmNlLnByb3RvdHlwZS5faW5pdFNvdXJjZUltYWdlID0gZnVuY3Rpb24gKG9uUmVhZHkpIHtcbiAgICAvLyBUT0RPIG1ha2UgaXQgc3RhdGljXG4gICAgdmFyIGRvbUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICBkb21FbGVtZW50LnNyYyA9IHRoaXMucGFyYW1ldGVycy5zb3VyY2VVcmw7XG5cbiAgICBkb21FbGVtZW50LndpZHRoID0gdGhpcy5wYXJhbWV0ZXJzLnNvdXJjZVdpZHRoO1xuICAgIGRvbUVsZW1lbnQuaGVpZ2h0ID0gdGhpcy5wYXJhbWV0ZXJzLnNvdXJjZUhlaWdodDtcbiAgICBkb21FbGVtZW50LnN0eWxlLndpZHRoID0gdGhpcy5wYXJhbWV0ZXJzLmRpc3BsYXlXaWR0aCArICdweCc7XG4gICAgZG9tRWxlbWVudC5zdHlsZS5oZWlnaHQgPSB0aGlzLnBhcmFtZXRlcnMuZGlzcGxheUhlaWdodCArICdweCc7XG5cbiAgICBkb21FbGVtZW50Lm9ubG9hZCA9IG9uUmVhZHk7XG4gICAgcmV0dXJuIGRvbUVsZW1lbnRcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vICAgICAgICAgIGluaXQgdmlkZW8gc291cmNlXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cblNvdXJjZS5wcm90b3R5cGUuX2luaXRTb3VyY2VWaWRlbyA9IGZ1bmN0aW9uIChvblJlYWR5KSB7XG4gICAgLy8gVE9ETyBtYWtlIGl0IHN0YXRpY1xuICAgIHZhciBkb21FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcbiAgICBkb21FbGVtZW50LnNyYyA9IHRoaXMucGFyYW1ldGVycy5zb3VyY2VVcmw7XG5cbiAgICBkb21FbGVtZW50LnN0eWxlLm9iamVjdEZpdCA9ICdpbml0aWFsJztcblxuICAgIGRvbUVsZW1lbnQuYXV0b3BsYXkgPSB0cnVlO1xuICAgIGRvbUVsZW1lbnQud2Via2l0UGxheXNpbmxpbmUgPSB0cnVlO1xuICAgIGRvbUVsZW1lbnQuY29udHJvbHMgPSBmYWxzZTtcbiAgICBkb21FbGVtZW50Lmxvb3AgPSB0cnVlO1xuICAgIGRvbUVsZW1lbnQubXV0ZWQgPSB0cnVlO1xuXG4gICAgLy8gc3RhcnQgdGhlIHZpZGVvIG9uIGZpcnN0IGNsaWNrIGlmIG5vdCBzdGFydGVkIGF1dG9tYXRpY2FsbHlcbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkluaXRpYWxDbGljaywge29uY2U6dHJ1ZX0pO1xuXG4gICAgZG9tRWxlbWVudC53aWR0aCA9IHRoaXMucGFyYW1ldGVycy5zb3VyY2VXaWR0aDtcbiAgICBkb21FbGVtZW50LmhlaWdodCA9IHRoaXMucGFyYW1ldGVycy5zb3VyY2VIZWlnaHQ7XG4gICAgZG9tRWxlbWVudC5zdHlsZS53aWR0aCA9IHRoaXMucGFyYW1ldGVycy5kaXNwbGF5V2lkdGggKyAncHgnO1xuICAgIGRvbUVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gdGhpcy5wYXJhbWV0ZXJzLmRpc3BsYXlIZWlnaHQgKyAncHgnO1xuXG4gICAgZG9tRWxlbWVudC5vbmxvYWRlZGRhdGEgPSBvblJlYWR5O1xuICAgIHJldHVybiBkb21FbGVtZW50XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyAgICAgICAgICBpbml0IHdlYmNhbSBzb3VyY2Vcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblNvdXJjZS5wcm90b3R5cGUuX2luaXRTb3VyY2VXZWJjYW0gPSBmdW5jdGlvbiAob25SZWFkeSwgb25FcnJvcikge1xuICAgIHZhciBfdGhpcyA9IHRoaXNcblxuICAgIC8vIGluaXQgZGVmYXVsdCB2YWx1ZVxuICAgIG9uRXJyb3IgPSBvbkVycm9yIHx8IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICB2YXIgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ2NhbWVyYS1lcnJvcicsIHsgZXJyb3I6IGVycm9yIH0pO1xuICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudCk7XG5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlcnJvci1wb3B1cCcpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVycm9yUG9wdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBlcnJvclBvcHVwLmlubmVySFRNTCA9ICdXZWJjYW0gRXJyb3JcXG5OYW1lOiAnICsgZXJyb3IubmFtZSArICdcXG5NZXNzYWdlOiAnICsgZXJyb3IubWVzc2FnZVxuICAgICAgICAgICAgICAgIGVycm9yUG9wdXAuc2V0QXR0cmlidXRlKCdpZCcsICdlcnJvci1wb3B1cCcpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZXJyb3JQb3B1cCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDEwMDApO1xuICAgIH1cblxuICAgIHZhciBkb21FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcbiAgICBkb21FbGVtZW50LnNldEF0dHJpYnV0ZSgnYXV0b3BsYXknLCAnJyk7XG4gICAgZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ211dGVkJywgJycpO1xuICAgIGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKCdwbGF5c2lubGluZScsICcnKTtcbiAgICBkb21FbGVtZW50LnN0eWxlLndpZHRoID0gdGhpcy5wYXJhbWV0ZXJzLmRpc3BsYXlXaWR0aCArICdweCdcbiAgICBkb21FbGVtZW50LnN0eWxlLmhlaWdodCA9IHRoaXMucGFyYW1ldGVycy5kaXNwbGF5SGVpZ2h0ICsgJ3B4J1xuXG4gICAgLy8gY2hlY2sgQVBJIGlzIGF2YWlsYWJsZVxuICAgIGlmIChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzID09PSB1bmRlZmluZWRcbiAgICAgICAgfHwgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzID09PSB1bmRlZmluZWRcbiAgICAgICAgfHwgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAobmF2aWdhdG9yLm1lZGlhRGV2aWNlcyA9PT0gdW5kZWZpbmVkKSB2YXIgZmN0TmFtZSA9ICduYXZpZ2F0b3IubWVkaWFEZXZpY2VzJ1xuICAgICAgICBlbHNlIGlmIChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMgPT09IHVuZGVmaW5lZCkgdmFyIGZjdE5hbWUgPSAnbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzJ1xuICAgICAgICBlbHNlIGlmIChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSA9PT0gdW5kZWZpbmVkKSB2YXIgZmN0TmFtZSA9ICduYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSdcbiAgICAgICAgZWxzZSBjb25zb2xlLmFzc2VydChmYWxzZSlcbiAgICAgICAgb25FcnJvcih7XG4gICAgICAgICAgICBuYW1lOiAnJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdXZWJSVEMgaXNzdWUtISAnICsgZmN0TmFtZSArICcgbm90IHByZXNlbnQgaW4geW91ciBicm93c2VyJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICAvLyBnZXQgYXZhaWxhYmxlIGRldmljZXNcbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMoKS50aGVuKGZ1bmN0aW9uIChkZXZpY2VzKSB7XG4gICAgICAgIHZhciB1c2VyTWVkaWFDb25zdHJhaW50cyA9IHtcbiAgICAgICAgICAgIGF1ZGlvOiBmYWxzZSxcbiAgICAgICAgICAgIHZpZGVvOiB7XG4gICAgICAgICAgICAgICAgZmFjaW5nTW9kZTogJ2Vudmlyb25tZW50JyxcbiAgICAgICAgICAgICAgICB3aWR0aDoge1xuICAgICAgICAgICAgICAgICAgICBpZGVhbDogX3RoaXMucGFyYW1ldGVycy5zb3VyY2VXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgLy8gbWluOiAxMDI0LFxuICAgICAgICAgICAgICAgICAgICAvLyBtYXg6IDE5MjBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhlaWdodDoge1xuICAgICAgICAgICAgICAgICAgICBpZGVhbDogX3RoaXMucGFyYW1ldGVycy5zb3VyY2VIZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIC8vIG1pbjogNzc2LFxuICAgICAgICAgICAgICAgICAgICAvLyBtYXg6IDEwODBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG51bGwgIT09IF90aGlzLnBhcmFtZXRlcnMuZGV2aWNlSWQpIHtcbiAgICAgICAgICAgIHVzZXJNZWRpYUNvbnN0cmFpbnRzLnZpZGVvLmRldmljZUlkID0ge1xuICAgICAgICAgICAgICAgIGV4YWN0OiBfdGhpcy5wYXJhbWV0ZXJzLmRldmljZUlkXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZ2V0IGEgZGV2aWNlIHdoaWNoIHNhdGlzZnkgdGhlIGNvbnN0cmFpbnRzXG4gICAgICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHVzZXJNZWRpYUNvbnN0cmFpbnRzKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3Moc3RyZWFtKSB7XG4gICAgICAgICAgICAvLyBzZXQgdGhlIC5zcmMgb2YgdGhlIGRvbUVsZW1lbnRcbiAgICAgICAgICAgIGRvbUVsZW1lbnQuc3JjT2JqZWN0ID0gc3RyZWFtO1xuXG4gICAgICAgICAgICB2YXIgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ2NhbWVyYS1pbml0JywgeyBzdHJlYW06IHN0cmVhbSB9KTtcbiAgICAgICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcblxuICAgICAgICAgICAgLy8gc3RhcnQgdGhlIHZpZGVvIG9uIGZpcnN0IGNsaWNrIGlmIG5vdCBzdGFydGVkIGF1dG9tYXRpY2FsbHlcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBfdGhpcy5vbkluaXRpYWxDbGljaywge29uY2U6dHJ1ZX0pOyAgICAgICAgICAgIFxuXG4gICAgICAgICAgICBvblJlYWR5KCk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgb25FcnJvcih7XG4gICAgICAgICAgICAgICAgbmFtZTogZXJyb3IubmFtZSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIG9uRXJyb3Ioe1xuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZVxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBkb21FbGVtZW50XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyAgICAgICAgICBkaXNwb3NlIHNvdXJjZVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuU291cmNlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucmVhZHkgPSBmYWxzZTtcblxuICAgIHN3aXRjaCAodGhpcy5wYXJhbWV0ZXJzLnNvdXJjZVR5cGUpIHtcbiAgICAgICAgY2FzZSAnaW1hZ2UnOlxuICAgICAgICAgICAgdGhpcy5fZGlzcG9zZVNvdXJjZUltYWdlKCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICd2aWRlbyc6XG4gICAgICAgICAgICB0aGlzLl9kaXNwb3NlU291cmNlVmlkZW8oKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3dlYmNhbSc6XG4gICAgICAgICAgICB0aGlzLl9kaXNwb3NlU291cmNlV2ViY2FtKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLmRvbUVsZW1lbnQgPSBudWxsO1xuXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25Jbml0aWFsQ2xpY2ssIHtvbmNlOnRydWV9KTsgICAgICAgICAgICBcbn1cdFxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gICAgICAgICAgZGlzcG9zZSBpbWFnZSBzb3VyY2Vcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblNvdXJjZS5wcm90b3R5cGUuX2Rpc3Bvc2VTb3VyY2VJbWFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZG9tRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhcmpzLXZpZGVvJyk7XG5cbiAgICBpZiggIWRvbUVsZW1lbnQgKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkb21FbGVtZW50LnJlbW92ZSgpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gICAgICAgICAgZGlzcG9zZSB2aWRlbyBzb3VyY2Vcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblNvdXJjZS5wcm90b3R5cGUuX2Rpc3Bvc2VTb3VyY2VWaWRlbyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZG9tRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhcmpzLXZpZGVvJyk7XG4gICAgXG4gICAgaWYoICFkb21FbGVtZW50ICkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvbWVkaWEuaHRtbCNiZXN0LXByYWN0aWNlcy1mb3ItYXV0aG9ycy11c2luZy1tZWRpYS1lbGVtZW50c1xuICAgIGRvbUVsZW1lbnQucGF1c2UoKTtcbiAgICBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnc3JjJyk7IFxuICAgIGRvbUVsZW1lbnQubG9hZCgpOyBcblxuICAgIGRvbUVsZW1lbnQucmVtb3ZlKCk7ICAgIFxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gICAgICAgICAgZGlzcG9zZSB3ZWJjYW0gc291cmNlXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5Tb3VyY2UucHJvdG90eXBlLl9kaXNwb3NlU291cmNlV2ViY2FtID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBkb21FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2FyanMtdmlkZW8nKTtcblxuICAgIGlmKCAhZG9tRWxlbWVudCApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xMjQzNjc3MlxuICAgIGlmKCBkb21FbGVtZW50LnNyY09iamVjdCAmJiBkb21FbGVtZW50LnNyY09iamVjdC5nZXRUcmFja3MgKSB7XG4gICAgICAgIGRvbUVsZW1lbnQuc3JjT2JqZWN0LmdldFRyYWNrcygpLm1hcCgodHJhY2spID0+IHRyYWNrLnN0b3AoKSk7ICAgIFxuICAgIH1cdFxuXG4gICAgZG9tRWxlbWVudC5yZW1vdmUoKTtcdFxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vXHRcdEhhbmRsZSBNb2JpbGUgVG9yY2hcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuU291cmNlLnByb3RvdHlwZS5oYXNNb2JpbGVUb3JjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RyZWFtID0gYXJUb29sa2l0U291cmNlLmRvbUVsZW1lbnQuc3JjT2JqZWN0XG4gICAgaWYgKHN0cmVhbSBpbnN0YW5jZW9mIE1lZGlhU3RyZWFtID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlXG5cbiAgICBpZiAodGhpcy5fY3VycmVudFRvcmNoU3RhdHVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fY3VycmVudFRvcmNoU3RhdHVzID0gZmFsc2VcbiAgICB9XG5cbiAgICB2YXIgdmlkZW9UcmFjayA9IHN0cmVhbS5nZXRWaWRlb1RyYWNrcygpWzBdO1xuXG4gICAgLy8gaWYgdmlkZW9UcmFjay5nZXRDYXBhYmlsaXRpZXMoKSBkb2VzbnQgZXhpc3QsIHJldHVybiBmYWxzZSBub3dcbiAgICBpZiAodmlkZW9UcmFjay5nZXRDYXBhYmlsaXRpZXMgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZhbHNlXG5cbiAgICB2YXIgY2FwYWJpbGl0aWVzID0gdmlkZW9UcmFjay5nZXRDYXBhYmlsaXRpZXMoKVxuXG4gICAgcmV0dXJuIGNhcGFiaWxpdGllcy50b3JjaCA/IHRydWUgOiBmYWxzZVxufVxuXG4vKipcbiAqIHRvZ2dsZSB0aGUgZmxhc2gvdG9yY2ggb2YgdGhlIG1vYmlsZSBmdW4gaWYgYXBwbGljYWJsZS5cbiAqIEdyZWF0IHBvc3QgYWJvdXQgaXQgaHR0cHM6Ly93d3cub2JlcmhvZmVyLmNvL21lZGlhc3RyZWFtdHJhY2stYW5kLWl0cy1jYXBhYmlsaXRpZXMvXG4gKi9cblNvdXJjZS5wcm90b3R5cGUudG9nZ2xlTW9iaWxlVG9yY2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gc2FuaXR5IGNoZWNrXG4gICAgY29uc29sZS5hc3NlcnQodGhpcy5oYXNNb2JpbGVUb3JjaCgpID09PSB0cnVlKVxuXG4gICAgdmFyIHN0cmVhbSA9IGFyVG9vbGtpdFNvdXJjZS5kb21FbGVtZW50LnNyY09iamVjdFxuICAgIGlmIChzdHJlYW0gaW5zdGFuY2VvZiBNZWRpYVN0cmVhbSA9PT0gZmFsc2UpIHtcbiAgICAgICAgaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXJyb3ItcG9wdXAnKSkge1xuICAgICAgICAgICAgdmFyIGVycm9yUG9wdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGVycm9yUG9wdXAuaW5uZXJIVE1MID0gJ2VuYWJsaW5nIG1vYmlsZSB0b3JjaCBpcyBhdmFpbGFibGUgb25seSBvbiB3ZWJjYW0nXG4gICAgICAgICAgICBlcnJvclBvcHVwLnNldEF0dHJpYnV0ZSgnaWQnLCAnZXJyb3ItcG9wdXAnKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZXJyb3JQb3B1cCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2N1cnJlbnRUb3JjaFN0YXR1cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRUb3JjaFN0YXR1cyA9IGZhbHNlXG4gICAgfVxuXG4gICAgdmFyIHZpZGVvVHJhY2sgPSBzdHJlYW0uZ2V0VmlkZW9UcmFja3MoKVswXTtcbiAgICB2YXIgY2FwYWJpbGl0aWVzID0gdmlkZW9UcmFjay5nZXRDYXBhYmlsaXRpZXMoKVxuXG4gICAgaWYgKCFjYXBhYmlsaXRpZXMudG9yY2gpIHtcbiAgICAgICAgaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXJyb3ItcG9wdXAnKSkge1xuICAgICAgICAgICAgdmFyIGVycm9yUG9wdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGVycm9yUG9wdXAuaW5uZXJIVE1MID0gJ25vIG1vYmlsZSB0b3JjaCBpcyBhdmFpbGFibGUgb24geW91ciBjYW1lcmEnXG4gICAgICAgICAgICBlcnJvclBvcHVwLnNldEF0dHJpYnV0ZSgnaWQnLCAnZXJyb3ItcG9wdXAnKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZXJyb3JQb3B1cCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5fY3VycmVudFRvcmNoU3RhdHVzID0gdGhpcy5fY3VycmVudFRvcmNoU3RhdHVzID09PSBmYWxzZSA/IHRydWUgOiBmYWxzZVxuICAgIHZpZGVvVHJhY2suYXBwbHlDb25zdHJhaW50cyh7XG4gICAgICAgIGFkdmFuY2VkOiBbe1xuICAgICAgICAgICAgdG9yY2g6IHRoaXMuX2N1cnJlbnRUb3JjaFN0YXR1c1xuICAgICAgICB9XVxuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnJvcilcbiAgICB9KTtcbn1cblxuU291cmNlLnByb3RvdHlwZS5kb21FbGVtZW50V2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHRoaXMuZG9tRWxlbWVudC5zdHlsZS53aWR0aClcbn1cblNvdXJjZS5wcm90b3R5cGUuZG9tRWxlbWVudEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5kb21FbGVtZW50LnN0eWxlLmhlaWdodClcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vICAgICAgICAgIGhhbmRsZSByZXNpemVcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblNvdXJjZS5wcm90b3R5cGUub25SZXNpemVFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXNcbiAgICB2YXIgc2NyZWVuV2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aFxuICAgIHZhciBzY3JlZW5IZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHRcblxuICAgIC8vIHNhbml0eSBjaGVja1xuICAgIGNvbnNvbGUuYXNzZXJ0KGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG5cbiAgICAvLyBjb21wdXRlIHNvdXJjZVdpZHRoLCBzb3VyY2VIZWlnaHRcbiAgICBpZiAodGhpcy5kb21FbGVtZW50Lm5vZGVOYW1lID09PSBcIklNR1wiKSB7XG4gICAgICAgIHZhciBzb3VyY2VXaWR0aCA9IHRoaXMuZG9tRWxlbWVudC5uYXR1cmFsV2lkdGhcbiAgICAgICAgdmFyIHNvdXJjZUhlaWdodCA9IHRoaXMuZG9tRWxlbWVudC5uYXR1cmFsSGVpZ2h0XG4gICAgfSBlbHNlIGlmICh0aGlzLmRvbUVsZW1lbnQubm9kZU5hbWUgPT09IFwiVklERU9cIikge1xuICAgICAgICB2YXIgc291cmNlV2lkdGggPSB0aGlzLmRvbUVsZW1lbnQudmlkZW9XaWR0aFxuICAgICAgICB2YXIgc291cmNlSGVpZ2h0ID0gdGhpcy5kb21FbGVtZW50LnZpZGVvSGVpZ2h0XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5hc3NlcnQoZmFsc2UpXG4gICAgfVxuXG4gICAgLy8gY29tcHV0ZSBzb3VyY2VBc3BlY3RcbiAgICB2YXIgc291cmNlQXNwZWN0ID0gc291cmNlV2lkdGggLyBzb3VyY2VIZWlnaHRcbiAgICAvLyBjb21wdXRlIHNjcmVlbkFzcGVjdFxuICAgIHZhciBzY3JlZW5Bc3BlY3QgPSBzY3JlZW5XaWR0aCAvIHNjcmVlbkhlaWdodFxuXG4gICAgLy8gaWYgc2NyZWVuQXNwZWN0IDwgc291cmNlQXNwZWN0LCB0aGVuIGNoYW5nZSB0aGUgd2lkdGgsIGVsc2UgY2hhbmdlIHRoZSBoZWlnaHRcbiAgICBpZiAoc2NyZWVuQXNwZWN0IDwgc291cmNlQXNwZWN0KSB7XG4gICAgICAgIC8vIGNvbXB1dGUgbmV3V2lkdGggYW5kIHNldCAud2lkdGgvLm1hcmdpbkxlZnRcbiAgICAgICAgdmFyIG5ld1dpZHRoID0gc291cmNlQXNwZWN0ICogc2NyZWVuSGVpZ2h0XG4gICAgICAgIHRoaXMuZG9tRWxlbWVudC5zdHlsZS53aWR0aCA9IG5ld1dpZHRoICsgJ3B4J1xuICAgICAgICB0aGlzLmRvbUVsZW1lbnQuc3R5bGUubWFyZ2luTGVmdCA9IC0obmV3V2lkdGggLSBzY3JlZW5XaWR0aCkgLyAyICsgJ3B4J1xuXG4gICAgICAgIC8vIGluaXQgc3R5bGUuaGVpZ2h0Ly5tYXJnaW5Ub3AgdG8gbm9ybWFsIHZhbHVlXG4gICAgICAgIHRoaXMuZG9tRWxlbWVudC5zdHlsZS5oZWlnaHQgPSBzY3JlZW5IZWlnaHQgKyAncHgnXG4gICAgICAgIHRoaXMuZG9tRWxlbWVudC5zdHlsZS5tYXJnaW5Ub3AgPSAnMHB4J1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGNvbXB1dGUgbmV3SGVpZ2h0IGFuZCBzZXQgLmhlaWdodC8ubWFyZ2luVG9wXG4gICAgICAgIHZhciBuZXdIZWlnaHQgPSAxIC8gKHNvdXJjZUFzcGVjdCAvIHNjcmVlbldpZHRoKVxuICAgICAgICB0aGlzLmRvbUVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gbmV3SGVpZ2h0ICsgJ3B4J1xuICAgICAgICB0aGlzLmRvbUVsZW1lbnQuc3R5bGUubWFyZ2luVG9wID0gLShuZXdIZWlnaHQgLSBzY3JlZW5IZWlnaHQpIC8gMiArICdweCdcblxuICAgICAgICAvLyBpbml0IHN0eWxlLndpZHRoLy5tYXJnaW5MZWZ0IHRvIG5vcm1hbCB2YWx1ZVxuICAgICAgICB0aGlzLmRvbUVsZW1lbnQuc3R5bGUud2lkdGggPSBzY3JlZW5XaWR0aCArICdweCdcbiAgICAgICAgdGhpcy5kb21FbGVtZW50LnN0eWxlLm1hcmdpbkxlZnQgPSAnMHB4J1xuICAgIH1cbn1cbi8qXG5Tb3VyY2UucHJvdG90eXBlLmNvcHlFbGVtZW50U2l6ZVRvID0gZnVuY3Rpb24ob3RoZXJFbGVtZW50KXtcblx0b3RoZXJFbGVtZW50LnN0eWxlLndpZHRoID0gdGhpcy5kb21FbGVtZW50LnN0eWxlLndpZHRoXG5cdG90aGVyRWxlbWVudC5zdHlsZS5oZWlnaHQgPSB0aGlzLmRvbUVsZW1lbnQuc3R5bGUuaGVpZ2h0XG5cdG90aGVyRWxlbWVudC5zdHlsZS5tYXJnaW5MZWZ0ID0gdGhpcy5kb21FbGVtZW50LnN0eWxlLm1hcmdpbkxlZnRcblx0b3RoZXJFbGVtZW50LnN0eWxlLm1hcmdpblRvcCA9IHRoaXMuZG9tRWxlbWVudC5zdHlsZS5tYXJnaW5Ub3Bcbn1cbiovXG5cblNvdXJjZS5wcm90b3R5cGUuY29weUVsZW1lbnRTaXplVG8gPSBmdW5jdGlvbiAob3RoZXJFbGVtZW50KSB7XG5cbiAgICBpZiAod2luZG93LmlubmVyV2lkdGggPiB3aW5kb3cuaW5uZXJIZWlnaHQpIHtcbiAgICAgICAgLy9sYW5kc2NhcGVcbiAgICAgICAgb3RoZXJFbGVtZW50LnN0eWxlLndpZHRoID0gdGhpcy5kb21FbGVtZW50LnN0eWxlLndpZHRoXG4gICAgICAgIG90aGVyRWxlbWVudC5zdHlsZS5oZWlnaHQgPSB0aGlzLmRvbUVsZW1lbnQuc3R5bGUuaGVpZ2h0XG4gICAgICAgIG90aGVyRWxlbWVudC5zdHlsZS5tYXJnaW5MZWZ0ID0gdGhpcy5kb21FbGVtZW50LnN0eWxlLm1hcmdpbkxlZnRcbiAgICAgICAgb3RoZXJFbGVtZW50LnN0eWxlLm1hcmdpblRvcCA9IHRoaXMuZG9tRWxlbWVudC5zdHlsZS5tYXJnaW5Ub3BcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vcG9ydHJhaXRcbiAgICAgICAgb3RoZXJFbGVtZW50LnN0eWxlLmhlaWdodCA9IHRoaXMuZG9tRWxlbWVudC5zdHlsZS5oZWlnaHRcbiAgICAgICAgb3RoZXJFbGVtZW50LnN0eWxlLndpZHRoID0gKHBhcnNlSW50KG90aGVyRWxlbWVudC5zdHlsZS5oZWlnaHQpICogNCAvIDMpICsgXCJweFwiO1xuICAgICAgICBvdGhlckVsZW1lbnQuc3R5bGUubWFyZ2luTGVmdCA9ICgod2luZG93LmlubmVyV2lkdGggLSBwYXJzZUludChvdGhlckVsZW1lbnQuc3R5bGUud2lkdGgpKSAvIDIpICsgXCJweFwiO1xuICAgICAgICBvdGhlckVsZW1lbnQuc3R5bGUubWFyZ2luVG9wID0gMDtcbiAgICB9XG5cbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vL1x0XHRDb2RlIFNlcGFyYXRvclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblNvdXJjZS5wcm90b3R5cGUuY29weVNpemVUbyA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zb2xlLndhcm4oJ29ic29sZXRlIGZ1bmN0aW9uIGFyVG9vbGtpdFNvdXJjZS5jb3B5U2l6ZVRvLiBVc2UgYXJUb29sa2l0U291cmNlLmNvcHlFbGVtZW50U2l6ZVRvJylcbiAgICB0aGlzLmNvcHlFbGVtZW50U2l6ZVRvLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vL1x0XHRDb2RlIFNlcGFyYXRvclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblNvdXJjZS5wcm90b3R5cGUub25SZXNpemUgPSBmdW5jdGlvbiAoYXJUb29sa2l0Q29udGV4dCwgcmVuZGVyZXIsIGNhbWVyYSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAzKSB7XG4gICAgICAgIGNvbnNvbGUud2Fybignb2Jzb2xldGUgZnVuY3Rpb24gYXJUb29sa2l0U291cmNlLm9uUmVzaXplLiBVc2UgYXJUb29sa2l0U291cmNlLm9uUmVzaXplRWxlbWVudCcpXG4gICAgICAgIHJldHVybiB0aGlzLm9uUmVzaXplRWxlbWVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgfVxuXG4gICAgdmFyIHRyYWNraW5nQmFja2VuZCA9IGFyVG9vbGtpdENvbnRleHQucGFyYW1ldGVycy50cmFja2luZ0JhY2tlbmRcblxuXG4gICAgLy8gUkVTSVpFIERPTUVMRU1FTlRcbiAgICBpZiAodHJhY2tpbmdCYWNrZW5kID09PSAnYXJ0b29sa2l0Jykge1xuXG4gICAgICAgIHRoaXMub25SZXNpemVFbGVtZW50KClcblxuICAgICAgICB2YXIgaXNBZnJhbWUgPSByZW5kZXJlci5kb21FbGVtZW50LmRhdGFzZXQuYWZyYW1lQ2FudmFzID8gdHJ1ZSA6IGZhbHNlXG4gICAgICAgIGlmIChpc0FmcmFtZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoaXMuY29weUVsZW1lbnRTaXplVG8ocmVuZGVyZXIuZG9tRWxlbWVudClcbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFyVG9vbGtpdENvbnRleHQuYXJDb250cm9sbGVyICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmNvcHlFbGVtZW50U2l6ZVRvKGFyVG9vbGtpdENvbnRleHQuYXJDb250cm9sbGVyLmNhbnZhcylcbiAgICAgICAgfVxuICAgIH0gZWxzZSBjb25zb2xlLmFzc2VydChmYWxzZSwgJ3VuaGFuZGxlZCB0cmFja2luZ0JhY2tlbmQgJyArIHRyYWNraW5nQmFja2VuZClcblxuXG4gICAgLy8gVVBEQVRFIENBTUVSQVxuICAgIGlmICh0cmFja2luZ0JhY2tlbmQgPT09ICdhcnRvb2xraXQnKSB7XG4gICAgICAgIGlmIChhclRvb2xraXRDb250ZXh0LmFyQ29udHJvbGxlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY2FtZXJhLnByb2plY3Rpb25NYXRyaXguY29weShhclRvb2xraXRDb250ZXh0LmdldFByb2plY3Rpb25NYXRyaXgoKSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgY29uc29sZS5hc3NlcnQoZmFsc2UsICd1bmhhbmRsZWQgdHJhY2tpbmdCYWNrZW5kICcgKyB0cmFja2luZ0JhY2tlbmQpXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNvdXJjZTsiLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5cbmNvbnN0IEFyQmFzZUNvbnRyb2xzID0gZnVuY3Rpb24ob2JqZWN0M2QpIHtcblx0dGhpcy5pZCA9IEFyQmFzZUNvbnRyb2xzLmlkKytcblxuXHR0aGlzLm9iamVjdDNkID0gb2JqZWN0M2Rcblx0dGhpcy5vYmplY3QzZC5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cdHRoaXMub2JqZWN0M2QudmlzaWJsZSA9IGZhbHNlXG5cblx0Ly8gRXZlbnRzIHRvIGhvbm9yXG5cdC8vIHRoaXMuZGlzcGF0Y2hFdmVudCh7IHR5cGU6ICdiZWNhbWVWaXNpYmxlJyB9KVxuXHQvLyB0aGlzLmRpc3BhdGNoRXZlbnQoeyB0eXBlOiAnbWFya2VyVmlzaWJsZScgfSlcdC8vIHJlcGxhY2UgbWFya2VyRm91bmRcblx0Ly8gdGhpcy5kaXNwYXRjaEV2ZW50KHsgdHlwZTogJ2JlY2FtZVVuVmlzaWJsZScgfSlcbn1cblxuQXJCYXNlQ29udHJvbHMuaWQgPSAwXG5cbkFyQmFzZUNvbnRyb2xzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoVEhSRUUuRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSk7XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy9cdFx0RnVuY3Rpb25zXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8qKlxuICogZXJyb3IgY2F0Y2hpbmcgZnVuY3Rpb24gZm9yIHVwZGF0ZSgpXG4gKi9cbkFyQmFzZUNvbnRyb2xzLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpe1xuXHRjb25zb2xlLmFzc2VydChmYWxzZSwgJ3lvdSBuZWVkIHRvIGltcGxlbWVudCB5b3VyIG93biB1cGRhdGUnKVxufVxuXG4vKipcbiAqIGVycm9yIGNhdGNoaW5nIGZ1bmN0aW9uIGZvciBuYW1lKClcbiAqL1xuQXJCYXNlQ29udHJvbHMucHJvdG90eXBlLm5hbWUgPSBmdW5jdGlvbigpe1xuXHRjb25zb2xlLmFzc2VydChmYWxzZSwgJ3lvdSBuZWVkIHRvIGltcGxlbWVudCB5b3VyIG93biAubmFtZSgpJylcblx0cmV0dXJuICdOb3QgeWV0IGltcGxlbWVudGVkIC0gbmFtZSgpJ1xufVxuXG5leHBvcnQgZGVmYXVsdCBBckJhc2VDb250cm9scztcbiIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcblxuY29uc3QgQXJNYXJrZXJIZWxwZXIgPSBmdW5jdGlvbihtYXJrZXJDb250cm9scyl7XG5cdHRoaXMub2JqZWN0M2QgPSBuZXcgVEhSRUUuR3JvdXBcblxuXHR2YXIgbWVzaCA9IG5ldyBUSFJFRS5BeGVzSGVscGVyKClcblx0dGhpcy5vYmplY3QzZC5hZGQobWVzaClcblxuXHR2YXIgdGV4dCA9IG1hcmtlckNvbnRyb2xzLmlkXG5cdC8vIGRlYnVnZ2VyXG5cdC8vIHZhciB0ZXh0ID0gbWFya2VyQ29udHJvbHMucGFyYW1ldGVycy5wYXR0ZXJuVXJsLnNsaWNlKC0xKS50b1VwcGVyQ2FzZSgpO1xuXG5cdHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnY2FudmFzJyApO1xuXHRjYW52YXMud2lkdGggPSAgNjQ7XG5cdGNhbnZhcy5oZWlnaHQgPSA2NDtcblxuXHR2YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCAnMmQnICk7XG5cdHZhciB0ZXh0dXJlID0gbmV3IFRIUkVFLkNhbnZhc1RleHR1cmUoIGNhbnZhcyApO1xuXG5cdC8vIHB1dCB0aGUgdGV4dCBpbiB0aGUgc3ByaXRlXG5cdGNvbnRleHQuZm9udCA9ICc0OHB4IG1vbm9zcGFjZSc7XG5cdGNvbnRleHQuZmlsbFN0eWxlID0gJ3JnYmEoMTkyLDE5MiwyNTUsIDAuNSknO1xuXHRjb250ZXh0LmZpbGxSZWN0KCAwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQgKTtcblx0Y29udGV4dC5maWxsU3R5bGUgPSAnZGFya2JsdWUnO1xuXHRjb250ZXh0LmZpbGxUZXh0KHRleHQsIGNhbnZhcy53aWR0aC80LCAzKmNhbnZhcy5oZWlnaHQvNCApXG5cdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlXG5cblx0Ly8gdmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLkN1YmVHZW9tZXRyeSgxLCAxLCAxKVxuXHR2YXIgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSgxLCAxKVxuXHR2YXIgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe1xuXHRcdG1hcDogdGV4dHVyZSxcblx0XHR0cmFuc3BhcmVudDogdHJ1ZVxuXHR9KTtcblx0dmFyIG1lc2ggPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpXG5cdG1lc2gucm90YXRpb24ueCA9IC1NYXRoLlBJLzJcblxuXHR0aGlzLm9iamVjdDNkLmFkZChtZXNoKVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFyTWFya2VySGVscGVyO1xuIiwiaW1wb3J0IEFyQmFzZUNvbnRyb2xzIGZyb20gJy4vdGhyZWV4LWFyYmFzZWNvbnRyb2xzJztcblxuLyoqXG4gKiAtIGxlcnAgcG9zaXRpb24vcXVhdGVybmluby9zY2FsZVxuICogLSBtaW5EZWxheURldGVjdGVkXG4gKiAtIG1pbkRlbGF5VW5kZXRlY3RlZFxuICogQHBhcmFtIHtbdHlwZV19IG9iamVjdDNkICAgW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtIHtbdHlwZV19IHBhcmFtZXRlcnMgW2Rlc2NyaXB0aW9uXVxuICovXG5jb25zdCBBclNtb290aGVkQ29udHJvbHMgPSBmdW5jdGlvbihvYmplY3QzZCwgcGFyYW1ldGVycyl7XG5cdHZhciBfdGhpcyA9IHRoaXNcblx0XG5cdEFyQmFzZUNvbnRyb2xzLmNhbGwodGhpcywgb2JqZWN0M2QpXG5cdFxuXHQvLyBjb3B5IHBhcmFtZXRlcnNcblx0dGhpcy5vYmplY3QzZC52aXNpYmxlID0gZmFsc2Vcblx0XG5cdHRoaXMuX2xhc3RMZXJwU3RlcEF0ID0gbnVsbFxuXHR0aGlzLl92aXNpYmxlU3RhcnRlZEF0ID0gbnVsbFxuXHR0aGlzLl91bnZpc2libGVTdGFydGVkQXQgPSBudWxsXG5cblx0Ly8gaGFuZGxlIGRlZmF1bHQgcGFyYW1ldGVyc1xuXHRwYXJhbWV0ZXJzID0gcGFyYW1ldGVycyB8fCB7fVxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0Ly8gbGVycCBjb2VmaWNpZW50IGZvciB0aGUgcG9zaXRpb24gLSBiZXR3ZWVuIFswLDFdIC0gZGVmYXVsdCB0byAxXG5cdFx0bGVycFBvc2l0aW9uOiAwLjgsXG5cdFx0Ly8gbGVycCBjb2VmaWNpZW50IGZvciB0aGUgcXVhdGVybmlvbiAtIGJldHdlZW4gWzAsMV0gLSBkZWZhdWx0IHRvIDFcblx0XHRsZXJwUXVhdGVybmlvbjogMC4yLFxuXHRcdC8vIGxlcnAgY29lZmljaWVudCBmb3IgdGhlIHNjYWxlIC0gYmV0d2VlbiBbMCwxXSAtIGRlZmF1bHQgdG8gMVxuXHRcdGxlcnBTY2FsZTogMC43LFxuXHRcdC8vIGRlbGF5IGZvciBsZXJwIGZpeGVkIHN0ZXBzIC0gaW4gc2Vjb25kcyAtIGRlZmF1bHQgdG8gMS8xMjBcblx0XHRsZXJwU3RlcERlbGF5OiAxLzYwLFxuXHRcdC8vIG1pbmltdW0gZGVsYXkgdGhlIHN1Yi1jb250cm9sIG11c3QgYmUgdmlzaWJsZSBiZWZvcmUgdGhpcyBjb250cm9scyBiZWNvbWUgdmlzaWJsZSAtIGRlZmF1bHQgdG8gMCBzZWNvbmRzXG5cdFx0bWluVmlzaWJsZURlbGF5OiAwLjAsXG5cdFx0Ly8gbWluaW11bSBkZWxheSB0aGUgc3ViLWNvbnRyb2wgbXVzdCBiZSB1bnZpc2libGUgYmVmb3JlIHRoaXMgY29udHJvbHMgYmVjb21lIHVudmlzaWJsZSAtIGRlZmF1bHQgdG8gMCBzZWNvbmRzXG5cdFx0bWluVW52aXNpYmxlRGVsYXk6IDAuMixcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vXHRcdHNldFBhcmFtZXRlcnNcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdHNldFBhcmFtZXRlcnMocGFyYW1ldGVycylcblx0ZnVuY3Rpb24gc2V0UGFyYW1ldGVycyhwYXJhbWV0ZXJzKXtcblx0XHRpZiggcGFyYW1ldGVycyA9PT0gdW5kZWZpbmVkIClcdHJldHVyblxuXHRcdGZvciggdmFyIGtleSBpbiBwYXJhbWV0ZXJzICl7XG5cdFx0XHR2YXIgbmV3VmFsdWUgPSBwYXJhbWV0ZXJzWyBrZXkgXVxuXG5cdFx0XHRpZiggbmV3VmFsdWUgPT09IHVuZGVmaW5lZCApe1xuXHRcdFx0XHRjb25zb2xlLndhcm4oIFwiQXJTbW9vdGhlZENvbnRyb2xzOiAnXCIgKyBrZXkgKyBcIicgcGFyYW1ldGVyIGlzIHVuZGVmaW5lZC5cIiApXG5cdFx0XHRcdGNvbnRpbnVlXG5cdFx0XHR9XG5cblx0XHRcdHZhciBjdXJyZW50VmFsdWUgPSBfdGhpcy5wYXJhbWV0ZXJzWyBrZXkgXVxuXG5cdFx0XHRpZiggY3VycmVudFZhbHVlID09PSB1bmRlZmluZWQgKXtcblx0XHRcdFx0Y29uc29sZS53YXJuKCBcIkFyU21vb3RoZWRDb250cm9sczogJ1wiICsga2V5ICsgXCInIGlzIG5vdCBhIHByb3BlcnR5IG9mIHRoaXMgbWF0ZXJpYWwuXCIgKVxuXHRcdFx0XHRjb250aW51ZVxuXHRcdFx0fVxuXG5cdFx0XHRfdGhpcy5wYXJhbWV0ZXJzWyBrZXkgXSA9IG5ld1ZhbHVlXG5cdFx0fVxuXHR9XG59XG5cdFxuQXJTbW9vdGhlZENvbnRyb2xzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEFyQmFzZUNvbnRyb2xzLnByb3RvdHlwZSApO1xuQXJTbW9vdGhlZENvbnRyb2xzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEFyU21vb3RoZWRDb250cm9scztcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vL1x0XHR1cGRhdGUgZnVuY3Rpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5BclNtb290aGVkQ29udHJvbHMucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKHRhcmdldE9iamVjdDNkKXtcblx0dmFyIG9iamVjdDNkID0gdGhpcy5vYmplY3QzZFxuXHR2YXIgcGFyYW1ldGVycyA9IHRoaXMucGFyYW1ldGVyc1xuXHR2YXIgd2FzVmlzaWJsZSA9IG9iamVjdDNkLnZpc2libGVcblx0dmFyIHByZXNlbnQgPSBwZXJmb3JtYW5jZS5ub3coKS8xMDAwXG5cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly9cdFx0aGFuZGxlIG9iamVjdDNkLnZpc2libGUgd2l0aCBtaW5WaXNpYmxlRGVsYXkvbWluVW52aXNpYmxlRGVsYXlcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdGlmKCB0YXJnZXRPYmplY3QzZC52aXNpYmxlID09PSBmYWxzZSApXHR0aGlzLl92aXNpYmxlU3RhcnRlZEF0ID0gbnVsbFxuXHRpZiggdGFyZ2V0T2JqZWN0M2QudmlzaWJsZSA9PT0gdHJ1ZSApXHR0aGlzLl91bnZpc2libGVTdGFydGVkQXQgPSBudWxsXG5cblx0aWYoIHRhcmdldE9iamVjdDNkLnZpc2libGUgPT09IHRydWUgJiYgdGhpcy5fdmlzaWJsZVN0YXJ0ZWRBdCA9PT0gbnVsbCApXHR0aGlzLl92aXNpYmxlU3RhcnRlZEF0ID0gcHJlc2VudFxuXHRpZiggdGFyZ2V0T2JqZWN0M2QudmlzaWJsZSA9PT0gZmFsc2UgJiYgdGhpcy5fdW52aXNpYmxlU3RhcnRlZEF0ID09PSBudWxsIClcdHRoaXMuX3VudmlzaWJsZVN0YXJ0ZWRBdCA9IHByZXNlbnRcblxuXHRpZiggd2FzVmlzaWJsZSA9PT0gZmFsc2UgJiYgdGFyZ2V0T2JqZWN0M2QudmlzaWJsZSA9PT0gdHJ1ZSApe1xuXHRcdHZhciB2aXNpYmxlRm9yID0gcHJlc2VudCAtIHRoaXMuX3Zpc2libGVTdGFydGVkQXRcblx0XHRpZiggdmlzaWJsZUZvciA+PSB0aGlzLnBhcmFtZXRlcnMubWluVmlzaWJsZURlbGF5ICl7XG5cdFx0XHRvYmplY3QzZC52aXNpYmxlID0gdHJ1ZVxuXHRcdFx0c25hcERpcmVjdGx5VG9UYXJnZXQoKVxuXHRcdH1cblx0XHQvLyBjb25zb2xlLmxvZygndmlzaWJsZUZvcicsIHZpc2libGVGb3IpXG5cdH1cblxuXHRpZiggd2FzVmlzaWJsZSA9PT0gdHJ1ZSAmJiB0YXJnZXRPYmplY3QzZC52aXNpYmxlID09PSBmYWxzZSApe1xuXHRcdHZhciB1bnZpc2libGVGb3IgPSBwcmVzZW50IC0gdGhpcy5fdW52aXNpYmxlU3RhcnRlZEF0XG5cdFx0aWYoIHVudmlzaWJsZUZvciA+PSB0aGlzLnBhcmFtZXRlcnMubWluVW52aXNpYmxlRGVsYXkgKXtcblx0XHRcdG9iamVjdDNkLnZpc2libGUgPSBmYWxzZVx0XHRcdFxuXHRcdH1cblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vXHRcdGFwcGx5IGxlcnAgb24gcG9zaXRvbi9xdWF0ZXJuaW9uL3NjYWxlXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdC8vIGFwcGx5IGxlcnAgc3RlcHMgLSByZXF1aXJlIGZpeCB0aW1lIHN0ZXBzIHRvIGJlaGF2ZSB0aGUgc2FtZSBubyBtYXR0ZXIgdGhlIGZwc1xuXHRpZiggdGhpcy5fbGFzdExlcnBTdGVwQXQgPT09IG51bGwgKXtcblx0XHRhcHBseU9uZVNsZXJwU3RlcCgpXG5cdFx0dGhpcy5fbGFzdExlcnBTdGVwQXQgPSBwcmVzZW50XG5cdH1lbHNle1xuXHRcdHZhciBuU3RlcHNUb0RvID0gTWF0aC5mbG9vciggKHByZXNlbnQgLSB0aGlzLl9sYXN0TGVycFN0ZXBBdCkvdGhpcy5wYXJhbWV0ZXJzLmxlcnBTdGVwRGVsYXkgKVxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBuU3RlcHNUb0RvOyBpKyspe1xuXHRcdFx0YXBwbHlPbmVTbGVycFN0ZXAoKVxuXHRcdFx0dGhpcy5fbGFzdExlcnBTdGVwQXQgKz0gdGhpcy5wYXJhbWV0ZXJzLmxlcnBTdGVwRGVsYXlcblx0XHR9XG5cdH1cblxuXHQvLyBkaXNhYmxlIHRoZSBsZXJwIGJ5IGRpcmVjdGx5IGNvcHlpbmcgdGFyZ2V0T2JqZWN0M2QgcG9zaXRpb24vcXVhdGVybmlvbi9zY2FsZVxuXHRpZiggZmFsc2UgKXtcdFx0XG5cdFx0c25hcERpcmVjdGx5VG9UYXJnZXQoKVxuXHR9XG5cblx0Ly8gdXBkYXRlIHRoZSBtYXRyaXhcblx0dGhpcy5vYmplY3QzZC51cGRhdGVNYXRyaXgoKVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvL1x0XHRob25vciBiZWNhbWVWaXNpYmxlL2JlY2FtZVVuVmlzaWJsZSBldmVudFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8gaG9ub3IgYmVjYW1lVmlzaWJsZSBldmVudFxuXHRpZiggd2FzVmlzaWJsZSA9PT0gZmFsc2UgJiYgb2JqZWN0M2QudmlzaWJsZSA9PT0gdHJ1ZSApe1xuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCh7IHR5cGU6ICdiZWNhbWVWaXNpYmxlJyB9KVxuXHR9XG5cdC8vIGhvbm9yIGJlY2FtZVVuVmlzaWJsZSBldmVudFxuXHRpZiggd2FzVmlzaWJsZSA9PT0gdHJ1ZSAmJiBvYmplY3QzZC52aXNpYmxlID09PSBmYWxzZSApe1xuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCh7IHR5cGU6ICdiZWNhbWVVblZpc2libGUnIH0pXG5cdH1cblx0cmV0dXJuXG5cblx0ZnVuY3Rpb24gc25hcERpcmVjdGx5VG9UYXJnZXQoKXtcblx0XHRvYmplY3QzZC5wb3NpdGlvbi5jb3B5KCB0YXJnZXRPYmplY3QzZC5wb3NpdGlvbiApXG5cdFx0b2JqZWN0M2QucXVhdGVybmlvbi5jb3B5KCB0YXJnZXRPYmplY3QzZC5xdWF0ZXJuaW9uIClcblx0XHRvYmplY3QzZC5zY2FsZS5jb3B5KCB0YXJnZXRPYmplY3QzZC5zY2FsZSApXG5cdH1cdFxuXHRcblx0ZnVuY3Rpb24gYXBwbHlPbmVTbGVycFN0ZXAoKXtcblx0XHRvYmplY3QzZC5wb3NpdGlvbi5sZXJwKHRhcmdldE9iamVjdDNkLnBvc2l0aW9uLCBwYXJhbWV0ZXJzLmxlcnBQb3NpdGlvbilcblx0XHRvYmplY3QzZC5xdWF0ZXJuaW9uLnNsZXJwKHRhcmdldE9iamVjdDNkLnF1YXRlcm5pb24sIHBhcmFtZXRlcnMubGVycFF1YXRlcm5pb24pXG5cdFx0b2JqZWN0M2Quc2NhbGUubGVycCh0YXJnZXRPYmplY3QzZC5zY2FsZSwgcGFyYW1ldGVycy5sZXJwU2NhbGUpXG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXJTbW9vdGhlZENvbnRyb2xzO1xuIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuXG4vLyBUT0RPIHRoaXMgaXMgdXNlbGVzcyAtIHByZWZlcmUgYXJqcy1IaXRUZXN0aW5nLmpzXG5cbi8qKlxuICogLSBtYXliZSBzdXBwb3J0IC5vbkNsaWNrRmN0cyBpbiBlYWNoIG9iamVjdDNkXG4gKiAtIHNlZW1zIGFuIGVhc3kgbGlnaHQgbGF5ZXIgZm9yIGNsaWNrYWJsZSBvYmplY3RcbiAqIC0gdXAgdG8gXG4gKi9cbmNvbnN0IEhpdFRlc3RpbmdQbGFuZSA9IGZ1bmN0aW9uKHNvdXJjZUVsZW1lbnQpe1xuXHR0aGlzLl9zb3VyY2VFbGVtZW50ID0gc291cmNlRWxlbWVudFxuXG5cdC8vIGNyZWF0ZSBfcGlja2luZ1NjZW5lXG5cdHRoaXMuX3BpY2tpbmdTY2VuZSA9IG5ldyBUSFJFRS5TY2VuZVxuXHRcblx0Ly8gY3JlYXRlIF9waWNraW5nUGxhbmVcblx0dmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoMjAsMjAsMTksMTkpLnJvdGF0ZVgoLU1hdGguUEkvMilcblx0Ly8gdmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoMjAsMjApLnJvdGF0ZVgoLU1hdGguUEkvMilcblx0dmFyIG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtcblx0XHQvLyBvcGFjaXR5OiAwLjUsXG5cdFx0Ly8gdHJhbnNwYXJlbnQ6IHRydWUsXG5cdFx0d2lyZWZyYW1lOiB0cnVlXG5cdH0pXG5cdC8vIG1hdGVyaWFsLnZpc2libGUgPSBmYWxzZVxuXHR0aGlzLl9waWNraW5nUGxhbmUgPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpXG5cdHRoaXMuX3BpY2tpbmdTY2VuZS5hZGQodGhpcy5fcGlja2luZ1BsYW5lKVxuXG5cdC8vIENyZWF0ZSBwaWNraW5nQ2FtZXJhXG5cdHZhciBmdWxsV2lkdGggPSBwYXJzZUludChzb3VyY2VFbGVtZW50LnN0eWxlLndpZHRoKVxuXHR2YXIgZnVsbEhlaWdodCA9IHBhcnNlSW50KHNvdXJjZUVsZW1lbnQuc3R5bGUuaGVpZ2h0KVxuXHQvLyBUT0RPIGhhcmRjb2RlZCBmb3YgLSBjb3VjaFxuXHR0aGlzLl9waWNraW5nQ2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKDQyLCBmdWxsV2lkdGggLyBmdWxsSGVpZ2h0LCAwLjEsIDMwKTtcdFxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vXHRcdHVwZGF0ZSBmdW5jdGlvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbkhpdFRlc3RpbmdQbGFuZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oY2FtZXJhLCBwaWNraW5nUm9vdCwgY2hhbmdlTWF0cml4TW9kZSl7XG5cblx0dGhpcy5vblJlc2l6ZSgpXG5cdFxuXG5cdGlmKCBjaGFuZ2VNYXRyaXhNb2RlID09PSAnbW9kZWxWaWV3TWF0cml4JyApe1xuXHRcdC8vIHNldCBwaWNraW5nUGxhbmUgcG9zaXRpb25cblx0XHR2YXIgcGlja2luZ1BsYW5lID0gdGhpcy5fcGlja2luZ1BsYW5lXG5cdFx0cGlja2luZ1Jvb3QucGFyZW50LnVwZGF0ZU1hdHJpeFdvcmxkKClcblx0XHRwaWNraW5nUGxhbmUubWF0cml4LmNvcHkocGlja2luZ1Jvb3QucGFyZW50Lm1hdHJpeFdvcmxkKVxuXHRcdC8vIHNldCBwb3NpdGlvbi9xdWF0ZXJuaW9uL3NjYWxlIGZyb20gcGlja2luZ1BsYW5lLm1hdHJpeFxuXHRcdHBpY2tpbmdQbGFuZS5tYXRyaXguZGVjb21wb3NlKHBpY2tpbmdQbGFuZS5wb3NpdGlvbiwgcGlja2luZ1BsYW5lLnF1YXRlcm5pb24sIHBpY2tpbmdQbGFuZS5zY2FsZSlcblx0fWVsc2UgaWYoIGNoYW5nZU1hdHJpeE1vZGUgPT09ICdjYW1lcmFUcmFuc2Zvcm1NYXRyaXgnICl7XG5cdFx0Ly8gc2V0IHBpY2tpbmdQbGFuZSBwb3NpdGlvblxuXHRcdHZhciBwaWNraW5nQ2FtZXJhID0gdGhpcy5fcGlja2luZ0NhbWVyYVxuXHRcdGNhbWVyYS51cGRhdGVNYXRyaXhXb3JsZCgpXG5cdFx0cGlja2luZ0NhbWVyYS5tYXRyaXguY29weShjYW1lcmEubWF0cml4V29ybGQpXG5cdFx0Ly8gc2V0IHBvc2l0aW9uL3F1YXRlcm5pb24vc2NhbGUgZnJvbSBwaWNraW5nQ2FtZXJhLm1hdHJpeFxuXHRcdHBpY2tpbmdDYW1lcmEubWF0cml4LmRlY29tcG9zZShwaWNraW5nQ2FtZXJhLnBvc2l0aW9uLCBwaWNraW5nQ2FtZXJhLnF1YXRlcm5pb24sIHBpY2tpbmdDYW1lcmEuc2NhbGUpXG5cdH1lbHNlIGNvbnNvbGUuYXNzZXJ0KGZhbHNlKVxuXG5cbi8vIHZhciBwb3NpdGlvbiA9IHRoaXMuX3BpY2tpbmdQbGFuZS5wb3NpdGlvblxuLy8gY29uc29sZS5sb2coJ3BpY2tpbmdQbGFuZSBwb3NpdGlvbicsIHBvc2l0aW9uLngudG9GaXhlZCgyKSwgcG9zaXRpb24ueS50b0ZpeGVkKDIpLCBwb3NpdGlvbi56LnRvRml4ZWQoMikpXG4vLyB2YXIgcG9zaXRpb24gPSB0aGlzLl9waWNraW5nQ2FtZXJhLnBvc2l0aW9uXG4vLyBjb25zb2xlLmxvZygnaGlzLl9waWNraW5nQ2FtZXJhIHBvc2l0aW9uJywgcG9zaXRpb24ueC50b0ZpeGVkKDIpLCBwb3NpdGlvbi55LnRvRml4ZWQoMiksIHBvc2l0aW9uLnoudG9GaXhlZCgyKSlcblx0XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy9cdFx0cmVzaXplIGNhbWVyYVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbkhpdFRlc3RpbmdQbGFuZS5wcm90b3R5cGUub25SZXNpemUgPSBmdW5jdGlvbigpe1xuXHR2YXIgc291cmNlRWxlbWVudCA9IHRoaXMuX3NvdXJjZUVsZW1lbnRcblx0dmFyIHBpY2tpbmdDYW1lcmEgPSB0aGlzLl9waWNraW5nQ2FtZXJhXG5cdFxuLy8gRklYTUUgd2h5IHVzaW5nIGNzcyBoZXJlID8/PyBub3QgZXZlbiBjb21wdXRlZCBzdHlsZVxuLy8gc2hvdWxkIGdldCB0aGUgc2l6ZSBvZiB0aGUgZWxtZW50IGRpcmVjdGx5IGluZGVwZW5kYW50bHkgXG5cdHZhciBmdWxsV2lkdGggPSBwYXJzZUludChzb3VyY2VFbGVtZW50LnN0eWxlLndpZHRoKVxuXHR2YXIgZnVsbEhlaWdodCA9IHBhcnNlSW50KHNvdXJjZUVsZW1lbnQuc3R5bGUuaGVpZ2h0KVxuXHRwaWNraW5nQ2FtZXJhLmFzcGVjdCA9IGZ1bGxXaWR0aCAvIGZ1bGxIZWlnaHRcblxuXHRwaWNraW5nQ2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKVxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vXHRcdFBlcmZvcm0gdGVzdFxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5IaXRUZXN0aW5nUGxhbmUucHJvdG90eXBlLnRlc3QgPSBmdW5jdGlvbihtb3VzZVgsIG1vdXNlWSl7XG5cdC8vIGNvbnZlcnQgbW91c2VYLCBtb3VzZVkgdG8gWy0xLCArMV1cblx0bW91c2VYID0gKG1vdXNlWC0wLjUpKjJcblx0bW91c2VZID0tKG1vdXNlWS0wLjUpKjJcblx0XG5cdHRoaXMuX3BpY2tpbmdTY2VuZS51cGRhdGVNYXRyaXhXb3JsZCh0cnVlKVxuXG5cdC8vIGNvbXB1dGUgaW50ZXJzZWN0aW9ucyBiZXR3ZWVuIG1vdXNlVmVjdG9yMyBhbmQgcGlja2luZ1BsYW5lXG5cdHZhciByYXljYXN0ZXIgPSBuZXcgVEhSRUUuUmF5Y2FzdGVyKCk7XG5cdHZhciBtb3VzZVZlY3RvcjMgPSBuZXcgVEhSRUUuVmVjdG9yMyhtb3VzZVgsIG1vdXNlWSwgMSk7XG5cdHJheWNhc3Rlci5zZXRGcm9tQ2FtZXJhKCBtb3VzZVZlY3RvcjMsIHRoaXMuX3BpY2tpbmdDYW1lcmEgKVxuXHR2YXIgaW50ZXJzZWN0cyA9IHJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKCBbdGhpcy5fcGlja2luZ1BsYW5lXSApXG5cblx0aWYoIGludGVyc2VjdHMubGVuZ3RoID09PSAwIClcdHJldHVybiBudWxsXG5cblx0Ly8gc2V0IG5ldyBkZW1vUm9vdCBwb3NpdGlvblxuXHR2YXIgcG9zaXRpb24gPSB0aGlzLl9waWNraW5nUGxhbmUud29ybGRUb0xvY2FsKCBpbnRlcnNlY3RzWzBdLnBvaW50LmNsb25lKCkgKVxuXHQvLyBUT0RPIGhlcmUgZG8gYSBsb29rIGF0IHRoZSBjYW1lcmEgP1xuXHR2YXIgcXVhdGVybmlvbiA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uXG5cdHZhciBzY2FsZSA9IG5ldyBUSFJFRS5WZWN0b3IzKDEsMSwxKS8vLm11bHRpcGx5U2NhbGFyKDEpXG5cdFxuXHRyZXR1cm4ge1xuXHRcdHBvc2l0aW9uIDogcG9zaXRpb24sXG5cdFx0cXVhdGVybmlvbiA6IHF1YXRlcm5pb24sXG5cdFx0c2NhbGUgOiBzY2FsZVxuXHR9XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy9cdFx0cmVuZGVyIHRoZSBwaWNraW5nUGxhbmUgZm9yIGRlYnVnXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuSGl0VGVzdGluZ1BsYW5lLnByb3RvdHlwZS5yZW5kZXJEZWJ1ZyA9IGZ1bmN0aW9uKHJlbmRlcmVyKXtcblx0Ly8gcmVuZGVyIHNjZW5lT3J0aG9cblx0cmVuZGVyZXIucmVuZGVyKCB0aGlzLl9waWNraW5nU2NlbmUsIHRoaXMuX3BpY2tpbmdDYW1lcmEgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBIaXRUZXN0aW5nUGxhbmU7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfYWZyYW1lX187IiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX3RocmVlX187IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8vIENvbXBvbmVudHNcbmltcG9ydCAnLi9jb21wb25lbnQtYW5jaG9yJztcbmltcG9ydCAnLi9jb21wb25lbnQtaGl0LXRlc3RpbmcnO1xuXG4vLyBMb2NhdGlvbi1iYXNlZCBjb21wb25lbnRzXG5pbXBvcnQgJy4vbG9jYXRpb24tYmFzZWQvYXJqcy1sb29rLWNvbnRyb2xzJ1xuaW1wb3J0ICcuL2xvY2F0aW9uLWJhc2VkL2FyanMtd2ViY2FtLXRleHR1cmUnXG5pbXBvcnQgJy4vbG9jYXRpb24tYmFzZWQvQXJqc0RldmljZU9yaWVudGF0aW9uQ29udHJvbHMnXG5pbXBvcnQgJy4vbG9jYXRpb24tYmFzZWQvZ3BzLWNhbWVyYSdcbmltcG9ydCAnLi9sb2NhdGlvbi1iYXNlZC9ncHMtZW50aXR5LXBsYWNlJ1xuaW1wb3J0ICcuL2xvY2F0aW9uLWJhc2VkL2dwcy1wcm9qZWN0ZWQtY2FtZXJhJ1xuaW1wb3J0ICcuL2xvY2F0aW9uLWJhc2VkL2dwcy1wcm9qZWN0ZWQtZW50aXR5LXBsYWNlJ1xuXG4vLyBTeXN0ZW1cbmltcG9ydCAnLi9zeXN0ZW0tYXJqcyc7XG4iXSwic291cmNlUm9vdCI6IiJ9
